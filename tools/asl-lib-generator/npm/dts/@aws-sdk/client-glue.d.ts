// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-glue' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchCreatePartitionCommandInput, BatchCreatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchCreatePartitionCommand";
    import { BatchDeleteConnectionCommandInput, BatchDeleteConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteConnectionCommand";
    import { BatchDeletePartitionCommandInput, BatchDeletePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeletePartitionCommand";
    import { BatchDeleteTableCommandInput, BatchDeleteTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteTableCommand";
    import { BatchDeleteTableVersionCommandInput, BatchDeleteTableVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteTableVersionCommand";
    import { BatchGetBlueprintsCommandInput, BatchGetBlueprintsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetBlueprintsCommand";
    import { BatchGetCrawlersCommandInput, BatchGetCrawlersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetCrawlersCommand";
    import { BatchGetCustomEntityTypesCommandInput, BatchGetCustomEntityTypesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetCustomEntityTypesCommand";
    import { BatchGetDevEndpointsCommandInput, BatchGetDevEndpointsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetDevEndpointsCommand";
    import { BatchGetJobsCommandInput, BatchGetJobsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetJobsCommand";
    import { BatchGetPartitionCommandInput, BatchGetPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetPartitionCommand";
    import { BatchGetTriggersCommandInput, BatchGetTriggersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetTriggersCommand";
    import { BatchGetWorkflowsCommandInput, BatchGetWorkflowsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetWorkflowsCommand";
    import { BatchStopJobRunCommandInput, BatchStopJobRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchStopJobRunCommand";
    import { BatchUpdatePartitionCommandInput, BatchUpdatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchUpdatePartitionCommand";
    import { CancelMLTaskRunCommandInput, CancelMLTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CancelMLTaskRunCommand";
    import { CancelStatementCommandInput, CancelStatementCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CancelStatementCommand";
    import { CheckSchemaVersionValidityCommandInput, CheckSchemaVersionValidityCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CheckSchemaVersionValidityCommand";
    import { CreateBlueprintCommandInput, CreateBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateBlueprintCommand";
    import { CreateClassifierCommandInput, CreateClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateClassifierCommand";
    import { CreateConnectionCommandInput, CreateConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateConnectionCommand";
    import { CreateCrawlerCommandInput, CreateCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateCrawlerCommand";
    import { CreateCustomEntityTypeCommandInput, CreateCustomEntityTypeCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateCustomEntityTypeCommand";
    import { CreateDatabaseCommandInput, CreateDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateDatabaseCommand";
    import { CreateDevEndpointCommandInput, CreateDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateDevEndpointCommand";
    import { CreateJobCommandInput, CreateJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateJobCommand";
    import { CreateMLTransformCommandInput, CreateMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateMLTransformCommand";
    import { CreatePartitionCommandInput, CreatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreatePartitionCommand";
    import { CreatePartitionIndexCommandInput, CreatePartitionIndexCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreatePartitionIndexCommand";
    import { CreateRegistryCommandInput, CreateRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateRegistryCommand";
    import { CreateSchemaCommandInput, CreateSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSchemaCommand";
    import { CreateScriptCommandInput, CreateScriptCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateScriptCommand";
    import { CreateSecurityConfigurationCommandInput, CreateSecurityConfigurationCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSecurityConfigurationCommand";
    import { CreateSessionCommandInput, CreateSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSessionCommand";
    import { CreateTableCommandInput, CreateTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateTableCommand";
    import { CreateTriggerCommandInput, CreateTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateTriggerCommand";
    import { CreateUserDefinedFunctionCommandInput, CreateUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateUserDefinedFunctionCommand";
    import { CreateWorkflowCommandInput, CreateWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateWorkflowCommand";
    import { DeleteBlueprintCommandInput, DeleteBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteBlueprintCommand";
    import { DeleteClassifierCommandInput, DeleteClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteClassifierCommand";
    import { DeleteColumnStatisticsForPartitionCommandInput, DeleteColumnStatisticsForPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteColumnStatisticsForPartitionCommand";
    import { DeleteColumnStatisticsForTableCommandInput, DeleteColumnStatisticsForTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteColumnStatisticsForTableCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteConnectionCommand";
    import { DeleteCrawlerCommandInput, DeleteCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteCrawlerCommand";
    import { DeleteCustomEntityTypeCommandInput, DeleteCustomEntityTypeCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteCustomEntityTypeCommand";
    import { DeleteDatabaseCommandInput, DeleteDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteDatabaseCommand";
    import { DeleteDevEndpointCommandInput, DeleteDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteDevEndpointCommand";
    import { DeleteJobCommandInput, DeleteJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteJobCommand";
    import { DeleteMLTransformCommandInput, DeleteMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteMLTransformCommand";
    import { DeletePartitionCommandInput, DeletePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeletePartitionCommand";
    import { DeletePartitionIndexCommandInput, DeletePartitionIndexCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeletePartitionIndexCommand";
    import { DeleteRegistryCommandInput, DeleteRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteRegistryCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSchemaCommandInput, DeleteSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSchemaCommand";
    import { DeleteSchemaVersionsCommandInput, DeleteSchemaVersionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSchemaVersionsCommand";
    import { DeleteSecurityConfigurationCommandInput, DeleteSecurityConfigurationCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSecurityConfigurationCommand";
    import { DeleteSessionCommandInput, DeleteSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSessionCommand";
    import { DeleteTableCommandInput, DeleteTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTableCommand";
    import { DeleteTableVersionCommandInput, DeleteTableVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTableVersionCommand";
    import { DeleteTriggerCommandInput, DeleteTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTriggerCommand";
    import { DeleteUserDefinedFunctionCommandInput, DeleteUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteUserDefinedFunctionCommand";
    import { DeleteWorkflowCommandInput, DeleteWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteWorkflowCommand";
    import { GetBlueprintCommandInput, GetBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintCommand";
    import { GetBlueprintRunCommandInput, GetBlueprintRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintRunCommand";
    import { GetBlueprintRunsCommandInput, GetBlueprintRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintRunsCommand";
    import { GetCatalogImportStatusCommandInput, GetCatalogImportStatusCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCatalogImportStatusCommand";
    import { GetClassifierCommandInput, GetClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetClassifierCommand";
    import { GetClassifiersCommandInput, GetClassifiersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetClassifiersCommand";
    import { GetColumnStatisticsForPartitionCommandInput, GetColumnStatisticsForPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetColumnStatisticsForPartitionCommand";
    import { GetColumnStatisticsForTableCommandInput, GetColumnStatisticsForTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetColumnStatisticsForTableCommand";
    import { GetConnectionCommandInput, GetConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetConnectionCommand";
    import { GetConnectionsCommandInput, GetConnectionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetConnectionsCommand";
    import { GetCrawlerCommandInput, GetCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlerCommand";
    import { GetCrawlerMetricsCommandInput, GetCrawlerMetricsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlerMetricsCommand";
    import { GetCrawlersCommandInput, GetCrawlersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlersCommand";
    import { GetCustomEntityTypeCommandInput, GetCustomEntityTypeCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCustomEntityTypeCommand";
    import { GetDatabaseCommandInput, GetDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDatabaseCommand";
    import { GetDatabasesCommandInput, GetDatabasesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDatabasesCommand";
    import { GetDataCatalogEncryptionSettingsCommandInput, GetDataCatalogEncryptionSettingsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDataCatalogEncryptionSettingsCommand";
    import { GetDataflowGraphCommandInput, GetDataflowGraphCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDataflowGraphCommand";
    import { GetDevEndpointCommandInput, GetDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDevEndpointCommand";
    import { GetDevEndpointsCommandInput, GetDevEndpointsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDevEndpointsCommand";
    import { GetJobBookmarkCommandInput, GetJobBookmarkCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobBookmarkCommand";
    import { GetJobCommandInput, GetJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobCommand";
    import { GetJobRunCommandInput, GetJobRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobRunCommand";
    import { GetJobRunsCommandInput, GetJobRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobRunsCommand";
    import { GetJobsCommandInput, GetJobsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobsCommand";
    import { GetMappingCommandInput, GetMappingCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMappingCommand";
    import { GetMLTaskRunCommandInput, GetMLTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTaskRunCommand";
    import { GetMLTaskRunsCommandInput, GetMLTaskRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTaskRunsCommand";
    import { GetMLTransformCommandInput, GetMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTransformCommand";
    import { GetMLTransformsCommandInput, GetMLTransformsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTransformsCommand";
    import { GetPartitionCommandInput, GetPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionCommand";
    import { GetPartitionIndexesCommandInput, GetPartitionIndexesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionIndexesCommand";
    import { GetPartitionsCommandInput, GetPartitionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionsCommand";
    import { GetPlanCommandInput, GetPlanCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPlanCommand";
    import { GetRegistryCommandInput, GetRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetRegistryCommand";
    import { GetResourcePoliciesCommandInput, GetResourcePoliciesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetResourcePoliciesCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetResourcePolicyCommand";
    import { GetSchemaByDefinitionCommandInput, GetSchemaByDefinitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaByDefinitionCommand";
    import { GetSchemaCommandInput, GetSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaCommand";
    import { GetSchemaVersionCommandInput, GetSchemaVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaVersionCommand";
    import { GetSchemaVersionsDiffCommandInput, GetSchemaVersionsDiffCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaVersionsDiffCommand";
    import { GetSecurityConfigurationCommandInput, GetSecurityConfigurationCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSecurityConfigurationCommand";
    import { GetSecurityConfigurationsCommandInput, GetSecurityConfigurationsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSecurityConfigurationsCommand";
    import { GetSessionCommandInput, GetSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSessionCommand";
    import { GetStatementCommandInput, GetStatementCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetStatementCommand";
    import { GetTableCommandInput, GetTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableCommand";
    import { GetTablesCommandInput, GetTablesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTablesCommand";
    import { GetTableVersionCommandInput, GetTableVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableVersionCommand";
    import { GetTableVersionsCommandInput, GetTableVersionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableVersionsCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTagsCommand";
    import { GetTriggerCommandInput, GetTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTriggerCommand";
    import { GetTriggersCommandInput, GetTriggersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTriggersCommand";
    import { GetUnfilteredPartitionMetadataCommandInput, GetUnfilteredPartitionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredPartitionMetadataCommand";
    import { GetUnfilteredPartitionsMetadataCommandInput, GetUnfilteredPartitionsMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredPartitionsMetadataCommand";
    import { GetUnfilteredTableMetadataCommandInput, GetUnfilteredTableMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredTableMetadataCommand";
    import { GetUserDefinedFunctionCommandInput, GetUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUserDefinedFunctionCommand";
    import { GetUserDefinedFunctionsCommandInput, GetUserDefinedFunctionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUserDefinedFunctionsCommand";
    import { GetWorkflowCommandInput, GetWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowCommand";
    import { GetWorkflowRunCommandInput, GetWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunCommand";
    import { GetWorkflowRunPropertiesCommandInput, GetWorkflowRunPropertiesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunPropertiesCommand";
    import { GetWorkflowRunsCommandInput, GetWorkflowRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunsCommand";
    import { ImportCatalogToGlueCommandInput, ImportCatalogToGlueCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ImportCatalogToGlueCommand";
    import { ListBlueprintsCommandInput, ListBlueprintsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListBlueprintsCommand";
    import { ListCrawlersCommandInput, ListCrawlersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCrawlersCommand";
    import { ListCrawlsCommandInput, ListCrawlsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCrawlsCommand";
    import { ListCustomEntityTypesCommandInput, ListCustomEntityTypesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCustomEntityTypesCommand";
    import { ListDevEndpointsCommandInput, ListDevEndpointsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListDevEndpointsCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListJobsCommand";
    import { ListMLTransformsCommandInput, ListMLTransformsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListMLTransformsCommand";
    import { ListRegistriesCommandInput, ListRegistriesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListRegistriesCommand";
    import { ListSchemasCommandInput, ListSchemasCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSchemasCommand";
    import { ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSchemaVersionsCommand";
    import { ListSessionsCommandInput, ListSessionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSessionsCommand";
    import { ListStatementsCommandInput, ListStatementsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListStatementsCommand";
    import { ListTriggersCommandInput, ListTriggersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListTriggersCommand";
    import { ListWorkflowsCommandInput, ListWorkflowsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListWorkflowsCommand";
    import { PutDataCatalogEncryptionSettingsCommandInput, PutDataCatalogEncryptionSettingsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutDataCatalogEncryptionSettingsCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutResourcePolicyCommand";
    import { PutSchemaVersionMetadataCommandInput, PutSchemaVersionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutSchemaVersionMetadataCommand";
    import { PutWorkflowRunPropertiesCommandInput, PutWorkflowRunPropertiesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutWorkflowRunPropertiesCommand";
    import { QuerySchemaVersionMetadataCommandInput, QuerySchemaVersionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/QuerySchemaVersionMetadataCommand";
    import { RegisterSchemaVersionCommandInput, RegisterSchemaVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RegisterSchemaVersionCommand";
    import { RemoveSchemaVersionMetadataCommandInput, RemoveSchemaVersionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RemoveSchemaVersionMetadataCommand";
    import { ResetJobBookmarkCommandInput, ResetJobBookmarkCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ResetJobBookmarkCommand";
    import { ResumeWorkflowRunCommandInput, ResumeWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ResumeWorkflowRunCommand";
    import { RunStatementCommandInput, RunStatementCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RunStatementCommand";
    import { SearchTablesCommandInput, SearchTablesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/SearchTablesCommand";
    import { StartBlueprintRunCommandInput, StartBlueprintRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartBlueprintRunCommand";
    import { StartCrawlerCommandInput, StartCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartCrawlerCommand";
    import { StartCrawlerScheduleCommandInput, StartCrawlerScheduleCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartCrawlerScheduleCommand";
    import { StartExportLabelsTaskRunCommandInput, StartExportLabelsTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartExportLabelsTaskRunCommand";
    import { StartImportLabelsTaskRunCommandInput, StartImportLabelsTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartImportLabelsTaskRunCommand";
    import { StartJobRunCommandInput, StartJobRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartJobRunCommand";
    import { StartMLEvaluationTaskRunCommandInput, StartMLEvaluationTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartMLEvaluationTaskRunCommand";
    import { StartMLLabelingSetGenerationTaskRunCommandInput, StartMLLabelingSetGenerationTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartMLLabelingSetGenerationTaskRunCommand";
    import { StartTriggerCommandInput, StartTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartTriggerCommand";
    import { StartWorkflowRunCommandInput, StartWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartWorkflowRunCommand";
    import { StopCrawlerCommandInput, StopCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopCrawlerCommand";
    import { StopCrawlerScheduleCommandInput, StopCrawlerScheduleCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopCrawlerScheduleCommand";
    import { StopSessionCommandInput, StopSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopSessionCommand";
    import { StopTriggerCommandInput, StopTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopTriggerCommand";
    import { StopWorkflowRunCommandInput, StopWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopWorkflowRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UntagResourceCommand";
    import { UpdateBlueprintCommandInput, UpdateBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateBlueprintCommand";
    import { UpdateClassifierCommandInput, UpdateClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateClassifierCommand";
    import { UpdateColumnStatisticsForPartitionCommandInput, UpdateColumnStatisticsForPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateColumnStatisticsForPartitionCommand";
    import { UpdateColumnStatisticsForTableCommandInput, UpdateColumnStatisticsForTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateColumnStatisticsForTableCommand";
    import { UpdateConnectionCommandInput, UpdateConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateConnectionCommand";
    import { UpdateCrawlerCommandInput, UpdateCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateCrawlerCommand";
    import { UpdateCrawlerScheduleCommandInput, UpdateCrawlerScheduleCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateCrawlerScheduleCommand";
    import { UpdateDatabaseCommandInput, UpdateDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateDatabaseCommand";
    import { UpdateDevEndpointCommandInput, UpdateDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateDevEndpointCommand";
    import { UpdateJobCommandInput, UpdateJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateJobCommand";
    import { UpdateMLTransformCommandInput, UpdateMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateMLTransformCommand";
    import { UpdatePartitionCommandInput, UpdatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdatePartitionCommand";
    import { UpdateRegistryCommandInput, UpdateRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateRegistryCommand";
    import { UpdateSchemaCommandInput, UpdateSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateSchemaCommand";
    import { UpdateTableCommandInput, UpdateTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateTableCommand";
    import { UpdateTriggerCommandInput, UpdateTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateTriggerCommand";
    import { UpdateUserDefinedFunctionCommandInput, UpdateUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateUserDefinedFunctionCommand";
    import { UpdateWorkflowCommandInput, UpdateWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateWorkflowCommand";
    import { GlueClient } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    /**
        * <fullname>Glue</fullname>
        *          <p>Defines the public endpoint for the Glue service.</p>
        */
    export class Glue extends GlueClient {
            /**
                * <p>Creates one or more partitions in a batch operation.</p>
                */
            batchCreatePartition(args: BatchCreatePartitionCommandInput, options?: __HttpHandlerOptions): Promise<BatchCreatePartitionCommandOutput>;
            batchCreatePartition(args: BatchCreatePartitionCommandInput, cb: (err: any, data?: BatchCreatePartitionCommandOutput) => void): void;
            batchCreatePartition(args: BatchCreatePartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchCreatePartitionCommandOutput) => void): void;
            /**
                * <p>Deletes a list of connection definitions from the Data Catalog.</p>
                */
            batchDeleteConnection(args: BatchDeleteConnectionCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteConnectionCommandOutput>;
            batchDeleteConnection(args: BatchDeleteConnectionCommandInput, cb: (err: any, data?: BatchDeleteConnectionCommandOutput) => void): void;
            batchDeleteConnection(args: BatchDeleteConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteConnectionCommandOutput) => void): void;
            /**
                * <p>Deletes one or more partitions in a batch operation.</p>
                */
            batchDeletePartition(args: BatchDeletePartitionCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeletePartitionCommandOutput>;
            batchDeletePartition(args: BatchDeletePartitionCommandInput, cb: (err: any, data?: BatchDeletePartitionCommandOutput) => void): void;
            batchDeletePartition(args: BatchDeletePartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeletePartitionCommandOutput) => void): void;
            /**
                * <p>Deletes multiple tables at once.</p>
                *          <note>
                *             <p>After completing this operation, you no longer have access to the table versions and
                *         partitions that belong to the deleted table. Glue deletes these "orphaned" resources
                *         asynchronously in a timely manner, at the discretion of the service.</p>
                *             <p>To ensure the immediate deletion of all related resources, before calling
                *           <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or
                *           <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or
                *           <code>BatchDeletePartition</code>, to delete any resources that belong to the
                *         table.</p>
                *          </note>
                */
            batchDeleteTable(args: BatchDeleteTableCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteTableCommandOutput>;
            batchDeleteTable(args: BatchDeleteTableCommandInput, cb: (err: any, data?: BatchDeleteTableCommandOutput) => void): void;
            batchDeleteTable(args: BatchDeleteTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteTableCommandOutput) => void): void;
            /**
                * <p>Deletes a specified batch of versions of a table.</p>
                */
            batchDeleteTableVersion(args: BatchDeleteTableVersionCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteTableVersionCommandOutput>;
            batchDeleteTableVersion(args: BatchDeleteTableVersionCommandInput, cb: (err: any, data?: BatchDeleteTableVersionCommandOutput) => void): void;
            batchDeleteTableVersion(args: BatchDeleteTableVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteTableVersionCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a list of blueprints.</p>
                */
            batchGetBlueprints(args: BatchGetBlueprintsCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetBlueprintsCommandOutput>;
            batchGetBlueprints(args: BatchGetBlueprintsCommandInput, cb: (err: any, data?: BatchGetBlueprintsCommandOutput) => void): void;
            batchGetBlueprints(args: BatchGetBlueprintsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetBlueprintsCommandOutput) => void): void;
            /**
                * <p>Returns a list of resource metadata for a given list of crawler names. After calling the <code>ListCrawlers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
                */
            batchGetCrawlers(args: BatchGetCrawlersCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetCrawlersCommandOutput>;
            batchGetCrawlers(args: BatchGetCrawlersCommandInput, cb: (err: any, data?: BatchGetCrawlersCommandOutput) => void): void;
            batchGetCrawlers(args: BatchGetCrawlersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetCrawlersCommandOutput) => void): void;
            /**
                * <p>Retrieves the details for the custom patterns specified by a list of names.</p>
                */
            batchGetCustomEntityTypes(args: BatchGetCustomEntityTypesCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetCustomEntityTypesCommandOutput>;
            batchGetCustomEntityTypes(args: BatchGetCustomEntityTypesCommandInput, cb: (err: any, data?: BatchGetCustomEntityTypesCommandOutput) => void): void;
            batchGetCustomEntityTypes(args: BatchGetCustomEntityTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetCustomEntityTypesCommandOutput) => void): void;
            /**
                * <p>Returns a list of resource metadata for a given list of development endpoint names. After
                *       calling the <code>ListDevEndpoints</code> operation, you can call this operation to access the
                *       data to which you have been granted permissions. This operation supports all IAM permissions,
                *       including permission conditions that uses tags.</p>
                */
            batchGetDevEndpoints(args: BatchGetDevEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetDevEndpointsCommandOutput>;
            batchGetDevEndpoints(args: BatchGetDevEndpointsCommandInput, cb: (err: any, data?: BatchGetDevEndpointsCommandOutput) => void): void;
            batchGetDevEndpoints(args: BatchGetDevEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetDevEndpointsCommandOutput) => void): void;
            /**
                * <p>Returns a list of resource metadata for a given list of job names. After calling the <code>ListJobs</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
                * </p>
                */
            batchGetJobs(args: BatchGetJobsCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetJobsCommandOutput>;
            batchGetJobs(args: BatchGetJobsCommandInput, cb: (err: any, data?: BatchGetJobsCommandOutput) => void): void;
            batchGetJobs(args: BatchGetJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetJobsCommandOutput) => void): void;
            /**
                * <p>Retrieves partitions in a batch request.</p>
                */
            batchGetPartition(args: BatchGetPartitionCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetPartitionCommandOutput>;
            batchGetPartition(args: BatchGetPartitionCommandInput, cb: (err: any, data?: BatchGetPartitionCommandOutput) => void): void;
            batchGetPartition(args: BatchGetPartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetPartitionCommandOutput) => void): void;
            /**
                * <p>Returns a list of resource metadata for a given list of trigger names. After calling the <code>ListTriggers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
                */
            batchGetTriggers(args: BatchGetTriggersCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetTriggersCommandOutput>;
            batchGetTriggers(args: BatchGetTriggersCommandInput, cb: (err: any, data?: BatchGetTriggersCommandOutput) => void): void;
            batchGetTriggers(args: BatchGetTriggersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetTriggersCommandOutput) => void): void;
            /**
                * <p>Returns a list of resource metadata for a given list of workflow names. After calling the <code>ListWorkflows</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
                */
            batchGetWorkflows(args: BatchGetWorkflowsCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetWorkflowsCommandOutput>;
            batchGetWorkflows(args: BatchGetWorkflowsCommandInput, cb: (err: any, data?: BatchGetWorkflowsCommandOutput) => void): void;
            batchGetWorkflows(args: BatchGetWorkflowsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetWorkflowsCommandOutput) => void): void;
            /**
                * <p>Stops one or more job runs for a specified job definition.</p>
                */
            batchStopJobRun(args: BatchStopJobRunCommandInput, options?: __HttpHandlerOptions): Promise<BatchStopJobRunCommandOutput>;
            batchStopJobRun(args: BatchStopJobRunCommandInput, cb: (err: any, data?: BatchStopJobRunCommandOutput) => void): void;
            batchStopJobRun(args: BatchStopJobRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchStopJobRunCommandOutput) => void): void;
            /**
                * <p>Updates one or more partitions in a batch operation.</p>
                */
            batchUpdatePartition(args: BatchUpdatePartitionCommandInput, options?: __HttpHandlerOptions): Promise<BatchUpdatePartitionCommandOutput>;
            batchUpdatePartition(args: BatchUpdatePartitionCommandInput, cb: (err: any, data?: BatchUpdatePartitionCommandOutput) => void): void;
            batchUpdatePartition(args: BatchUpdatePartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchUpdatePartitionCommandOutput) => void): void;
            /**
                * <p>Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can cancel a
                *       machine learning task run at any time by calling <code>CancelMLTaskRun</code> with a task
                *       run's parent transform's <code>TransformID</code> and the task run's <code>TaskRunId</code>. </p>
                */
            cancelMLTaskRun(args: CancelMLTaskRunCommandInput, options?: __HttpHandlerOptions): Promise<CancelMLTaskRunCommandOutput>;
            cancelMLTaskRun(args: CancelMLTaskRunCommandInput, cb: (err: any, data?: CancelMLTaskRunCommandOutput) => void): void;
            cancelMLTaskRun(args: CancelMLTaskRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelMLTaskRunCommandOutput) => void): void;
            /**
                * <p>Cancels the statement.</p>
                */
            cancelStatement(args: CancelStatementCommandInput, options?: __HttpHandlerOptions): Promise<CancelStatementCommandOutput>;
            cancelStatement(args: CancelStatementCommandInput, cb: (err: any, data?: CancelStatementCommandOutput) => void): void;
            cancelStatement(args: CancelStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelStatementCommandOutput) => void): void;
            /**
                * <p>Validates the supplied schema. This call has no side effects, it simply validates using the supplied schema using <code>DataFormat</code> as the format. Since it does not take a schema set name, no compatibility checks are performed.</p>
                */
            checkSchemaVersionValidity(args: CheckSchemaVersionValidityCommandInput, options?: __HttpHandlerOptions): Promise<CheckSchemaVersionValidityCommandOutput>;
            checkSchemaVersionValidity(args: CheckSchemaVersionValidityCommandInput, cb: (err: any, data?: CheckSchemaVersionValidityCommandOutput) => void): void;
            checkSchemaVersionValidity(args: CheckSchemaVersionValidityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CheckSchemaVersionValidityCommandOutput) => void): void;
            /**
                * <p>Registers a blueprint with Glue.</p>
                */
            createBlueprint(args: CreateBlueprintCommandInput, options?: __HttpHandlerOptions): Promise<CreateBlueprintCommandOutput>;
            createBlueprint(args: CreateBlueprintCommandInput, cb: (err: any, data?: CreateBlueprintCommandOutput) => void): void;
            createBlueprint(args: CreateBlueprintCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBlueprintCommandOutput) => void): void;
            /**
                * <p>Creates a classifier in the user's account. This can be a <code>GrokClassifier</code>, an
                *         <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>,
                *       depending on which field of the request is present.</p>
                */
            createClassifier(args: CreateClassifierCommandInput, options?: __HttpHandlerOptions): Promise<CreateClassifierCommandOutput>;
            createClassifier(args: CreateClassifierCommandInput, cb: (err: any, data?: CreateClassifierCommandOutput) => void): void;
            createClassifier(args: CreateClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateClassifierCommandOutput) => void): void;
            /**
                * <p>Creates a connection definition in the Data Catalog.</p>
                */
            createConnection(args: CreateConnectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectionCommandOutput>;
            createConnection(args: CreateConnectionCommandInput, cb: (err: any, data?: CreateConnectionCommandOutput) => void): void;
            createConnection(args: CreateConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectionCommandOutput) => void): void;
            /**
                * <p>Creates a new crawler with specified targets, role, configuration, and optional schedule.
                *       At least one crawl target must be specified, in the <code>s3Targets</code> field, the
                *         <code>jdbcTargets</code> field, or the <code>DynamoDBTargets</code> field.</p>
                */
            createCrawler(args: CreateCrawlerCommandInput, options?: __HttpHandlerOptions): Promise<CreateCrawlerCommandOutput>;
            createCrawler(args: CreateCrawlerCommandInput, cb: (err: any, data?: CreateCrawlerCommandOutput) => void): void;
            createCrawler(args: CreateCrawlerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCrawlerCommandOutput) => void): void;
            /**
                * <p>Creates a custom pattern that is used to detect sensitive data across the columns and rows of your structured data.</p>
                *
                * 	        <p>Each custom pattern you create specifies a regular expression and an optional list of context words. If no context words are passed only a regular expression is checked.</p>
                */
            createCustomEntityType(args: CreateCustomEntityTypeCommandInput, options?: __HttpHandlerOptions): Promise<CreateCustomEntityTypeCommandOutput>;
            createCustomEntityType(args: CreateCustomEntityTypeCommandInput, cb: (err: any, data?: CreateCustomEntityTypeCommandOutput) => void): void;
            createCustomEntityType(args: CreateCustomEntityTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCustomEntityTypeCommandOutput) => void): void;
            /**
                * <p>Creates a new database in a Data Catalog.</p>
                */
            createDatabase(args: CreateDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<CreateDatabaseCommandOutput>;
            createDatabase(args: CreateDatabaseCommandInput, cb: (err: any, data?: CreateDatabaseCommandOutput) => void): void;
            createDatabase(args: CreateDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDatabaseCommandOutput) => void): void;
            /**
                * <p>Creates a new development endpoint.</p>
                */
            createDevEndpoint(args: CreateDevEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreateDevEndpointCommandOutput>;
            createDevEndpoint(args: CreateDevEndpointCommandInput, cb: (err: any, data?: CreateDevEndpointCommandOutput) => void): void;
            createDevEndpoint(args: CreateDevEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDevEndpointCommandOutput) => void): void;
            /**
                * <p>Creates a new job definition.</p>
                */
            createJob(args: CreateJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateJobCommandOutput>;
            createJob(args: CreateJobCommandInput, cb: (err: any, data?: CreateJobCommandOutput) => void): void;
            createJob(args: CreateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateJobCommandOutput) => void): void;
            /**
                * <p>Creates an Glue machine learning transform. This operation creates the transform and
                *       all the necessary parameters to train it.</p>
                *
                * 	        <p>Call this operation as the first step in the process of using a machine learning transform
                *       (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an
                *       optional <code>Description</code>, in addition to the parameters that you want to use for your
                *       algorithm.</p>
                *
                *          <p>You must also specify certain parameters for the tasks that Glue runs on your
                *       behalf as part of learning from your data and creating a high-quality machine learning
                *       transform. These parameters include <code>Role</code>, and optionally,
                *         <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more
                *       information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html">Jobs</a>.</p>
                */
            createMLTransform(args: CreateMLTransformCommandInput, options?: __HttpHandlerOptions): Promise<CreateMLTransformCommandOutput>;
            createMLTransform(args: CreateMLTransformCommandInput, cb: (err: any, data?: CreateMLTransformCommandOutput) => void): void;
            createMLTransform(args: CreateMLTransformCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMLTransformCommandOutput) => void): void;
            /**
                * <p>Creates a new partition.</p>
                */
            createPartition(args: CreatePartitionCommandInput, options?: __HttpHandlerOptions): Promise<CreatePartitionCommandOutput>;
            createPartition(args: CreatePartitionCommandInput, cb: (err: any, data?: CreatePartitionCommandOutput) => void): void;
            createPartition(args: CreatePartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePartitionCommandOutput) => void): void;
            /**
                * <p>Creates a specified partition index in an existing table.</p>
                */
            createPartitionIndex(args: CreatePartitionIndexCommandInput, options?: __HttpHandlerOptions): Promise<CreatePartitionIndexCommandOutput>;
            createPartitionIndex(args: CreatePartitionIndexCommandInput, cb: (err: any, data?: CreatePartitionIndexCommandOutput) => void): void;
            createPartitionIndex(args: CreatePartitionIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePartitionIndexCommandOutput) => void): void;
            /**
                * <p>Creates a new registry which may be used to hold a collection of schemas.</p>
                */
            createRegistry(args: CreateRegistryCommandInput, options?: __HttpHandlerOptions): Promise<CreateRegistryCommandOutput>;
            createRegistry(args: CreateRegistryCommandInput, cb: (err: any, data?: CreateRegistryCommandOutput) => void): void;
            createRegistry(args: CreateRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRegistryCommandOutput) => void): void;
            /**
                * <p>Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists without actually registering the version.</p>
                *          <p>When the schema set is created, a version checkpoint will be set to the first version. Compatibility mode "DISABLED" restricts any additional schema versions from being added after the first schema version. For all other compatibility modes, validation of compatibility settings will be applied only from the second version onwards when the <code>RegisterSchemaVersion</code> API is used.</p>
                *          <p>When this API is called without a <code>RegistryId</code>, this will create an entry for a "default-registry" in the registry database tables, if it is not already present.</p>
                */
            createSchema(args: CreateSchemaCommandInput, options?: __HttpHandlerOptions): Promise<CreateSchemaCommandOutput>;
            createSchema(args: CreateSchemaCommandInput, cb: (err: any, data?: CreateSchemaCommandOutput) => void): void;
            createSchema(args: CreateSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSchemaCommandOutput) => void): void;
            /**
                * <p>Transforms a directed acyclic graph (DAG) into code.</p>
                */
            createScript(args: CreateScriptCommandInput, options?: __HttpHandlerOptions): Promise<CreateScriptCommandOutput>;
            createScript(args: CreateScriptCommandInput, cb: (err: any, data?: CreateScriptCommandOutput) => void): void;
            createScript(args: CreateScriptCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateScriptCommandOutput) => void): void;
            /**
                * <p>Creates a new security configuration. A security configuration is a set of security properties that can be used by Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html">Encrypting Data Written by Crawlers, Jobs, and Development Endpoints</a>.</p>
                */
            createSecurityConfiguration(args: CreateSecurityConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreateSecurityConfigurationCommandOutput>;
            createSecurityConfiguration(args: CreateSecurityConfigurationCommandInput, cb: (err: any, data?: CreateSecurityConfigurationCommandOutput) => void): void;
            createSecurityConfiguration(args: CreateSecurityConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSecurityConfigurationCommandOutput) => void): void;
            /**
                * <p>Creates a new session.</p>
                */
            createSession(args: CreateSessionCommandInput, options?: __HttpHandlerOptions): Promise<CreateSessionCommandOutput>;
            createSession(args: CreateSessionCommandInput, cb: (err: any, data?: CreateSessionCommandOutput) => void): void;
            createSession(args: CreateSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSessionCommandOutput) => void): void;
            /**
                * <p>Creates a new table definition in the Data Catalog.</p>
                */
            createTable(args: CreateTableCommandInput, options?: __HttpHandlerOptions): Promise<CreateTableCommandOutput>;
            createTable(args: CreateTableCommandInput, cb: (err: any, data?: CreateTableCommandOutput) => void): void;
            createTable(args: CreateTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTableCommandOutput) => void): void;
            /**
                * <p>Creates a new trigger.</p>
                */
            createTrigger(args: CreateTriggerCommandInput, options?: __HttpHandlerOptions): Promise<CreateTriggerCommandOutput>;
            createTrigger(args: CreateTriggerCommandInput, cb: (err: any, data?: CreateTriggerCommandOutput) => void): void;
            createTrigger(args: CreateTriggerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTriggerCommandOutput) => void): void;
            /**
                * <p>Creates a new function definition in the Data Catalog.</p>
                */
            createUserDefinedFunction(args: CreateUserDefinedFunctionCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserDefinedFunctionCommandOutput>;
            createUserDefinedFunction(args: CreateUserDefinedFunctionCommandInput, cb: (err: any, data?: CreateUserDefinedFunctionCommandOutput) => void): void;
            createUserDefinedFunction(args: CreateUserDefinedFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserDefinedFunctionCommandOutput) => void): void;
            /**
                * <p>Creates a new workflow.</p>
                */
            createWorkflow(args: CreateWorkflowCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkflowCommandOutput>;
            createWorkflow(args: CreateWorkflowCommandInput, cb: (err: any, data?: CreateWorkflowCommandOutput) => void): void;
            createWorkflow(args: CreateWorkflowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkflowCommandOutput) => void): void;
            /**
                * <p>Deletes an existing blueprint.</p>
                */
            deleteBlueprint(args: DeleteBlueprintCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBlueprintCommandOutput>;
            deleteBlueprint(args: DeleteBlueprintCommandInput, cb: (err: any, data?: DeleteBlueprintCommandOutput) => void): void;
            deleteBlueprint(args: DeleteBlueprintCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBlueprintCommandOutput) => void): void;
            /**
                * <p>Removes a classifier from the Data Catalog.</p>
                */
            deleteClassifier(args: DeleteClassifierCommandInput, options?: __HttpHandlerOptions): Promise<DeleteClassifierCommandOutput>;
            deleteClassifier(args: DeleteClassifierCommandInput, cb: (err: any, data?: DeleteClassifierCommandOutput) => void): void;
            deleteClassifier(args: DeleteClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteClassifierCommandOutput) => void): void;
            /**
                * <p>Delete the partition column statistics of a column.</p>
                *
                * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeletePartition</code>.</p>
                */
            deleteColumnStatisticsForPartition(args: DeleteColumnStatisticsForPartitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteColumnStatisticsForPartitionCommandOutput>;
            deleteColumnStatisticsForPartition(args: DeleteColumnStatisticsForPartitionCommandInput, cb: (err: any, data?: DeleteColumnStatisticsForPartitionCommandOutput) => void): void;
            deleteColumnStatisticsForPartition(args: DeleteColumnStatisticsForPartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteColumnStatisticsForPartitionCommandOutput) => void): void;
            /**
                * <p>Retrieves table statistics of columns.</p>
                *
                * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeleteTable</code>.</p>
                */
            deleteColumnStatisticsForTable(args: DeleteColumnStatisticsForTableCommandInput, options?: __HttpHandlerOptions): Promise<DeleteColumnStatisticsForTableCommandOutput>;
            deleteColumnStatisticsForTable(args: DeleteColumnStatisticsForTableCommandInput, cb: (err: any, data?: DeleteColumnStatisticsForTableCommandOutput) => void): void;
            deleteColumnStatisticsForTable(args: DeleteColumnStatisticsForTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteColumnStatisticsForTableCommandOutput) => void): void;
            /**
                * <p>Deletes a connection from the Data Catalog.</p>
                */
            deleteConnection(args: DeleteConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectionCommandOutput>;
            deleteConnection(args: DeleteConnectionCommandInput, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            deleteConnection(args: DeleteConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            /**
                * <p>Removes a specified crawler from the Glue Data Catalog, unless the crawler state is
                *         <code>RUNNING</code>.</p>
                */
            deleteCrawler(args: DeleteCrawlerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCrawlerCommandOutput>;
            deleteCrawler(args: DeleteCrawlerCommandInput, cb: (err: any, data?: DeleteCrawlerCommandOutput) => void): void;
            deleteCrawler(args: DeleteCrawlerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCrawlerCommandOutput) => void): void;
            /**
                * <p>Deletes a custom pattern by specifying its name.</p>
                */
            deleteCustomEntityType(args: DeleteCustomEntityTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCustomEntityTypeCommandOutput>;
            deleteCustomEntityType(args: DeleteCustomEntityTypeCommandInput, cb: (err: any, data?: DeleteCustomEntityTypeCommandOutput) => void): void;
            deleteCustomEntityType(args: DeleteCustomEntityTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCustomEntityTypeCommandOutput) => void): void;
            /**
                * <p>Removes a specified database from a Data Catalog.</p>
                *          <note>
                *             <p>After completing this operation, you no longer have access to the tables (and all table
                *         versions and partitions that might belong to the tables) and the user-defined functions in
                *         the deleted database. Glue deletes these "orphaned" resources asynchronously in a timely
                *         manner, at the discretion of the service.</p>
                *             <p>To ensure the immediate deletion of all related resources, before calling
                *           <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or
                *           <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or
                *           <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and
                *           <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that
                *         belong to the database.</p>
                *          </note>
                */
            deleteDatabase(args: DeleteDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDatabaseCommandOutput>;
            deleteDatabase(args: DeleteDatabaseCommandInput, cb: (err: any, data?: DeleteDatabaseCommandOutput) => void): void;
            deleteDatabase(args: DeleteDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDatabaseCommandOutput) => void): void;
            /**
                * <p>Deletes a specified development endpoint.</p>
                */
            deleteDevEndpoint(args: DeleteDevEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDevEndpointCommandOutput>;
            deleteDevEndpoint(args: DeleteDevEndpointCommandInput, cb: (err: any, data?: DeleteDevEndpointCommandOutput) => void): void;
            deleteDevEndpoint(args: DeleteDevEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDevEndpointCommandOutput) => void): void;
            /**
                * <p>Deletes a specified job definition. If the job definition
                *       is not found, no exception is thrown.</p>
                */
            deleteJob(args: DeleteJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteJobCommandOutput>;
            deleteJob(args: DeleteJobCommandInput, cb: (err: any, data?: DeleteJobCommandOutput) => void): void;
            deleteJob(args: DeleteJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteJobCommandOutput) => void): void;
            /**
                * <p>Deletes an Glue machine learning transform. Machine learning transforms are a special
                *       type of transform that use machine learning to learn the details of the transformation to be
                *       performed by learning from examples provided by humans. These transformations are then saved
                *       by Glue. If you no longer need a transform, you can delete it by calling
                *         <code>DeleteMLTransforms</code>. However, any Glue jobs that still reference the deleted
                *       transform will no longer succeed.</p>
                */
            deleteMLTransform(args: DeleteMLTransformCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMLTransformCommandOutput>;
            deleteMLTransform(args: DeleteMLTransformCommandInput, cb: (err: any, data?: DeleteMLTransformCommandOutput) => void): void;
            deleteMLTransform(args: DeleteMLTransformCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMLTransformCommandOutput) => void): void;
            /**
                * <p>Deletes a specified partition.</p>
                */
            deletePartition(args: DeletePartitionCommandInput, options?: __HttpHandlerOptions): Promise<DeletePartitionCommandOutput>;
            deletePartition(args: DeletePartitionCommandInput, cb: (err: any, data?: DeletePartitionCommandOutput) => void): void;
            deletePartition(args: DeletePartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePartitionCommandOutput) => void): void;
            /**
                * <p>Deletes a specified partition index from an existing table.</p>
                */
            deletePartitionIndex(args: DeletePartitionIndexCommandInput, options?: __HttpHandlerOptions): Promise<DeletePartitionIndexCommandOutput>;
            deletePartitionIndex(args: DeletePartitionIndexCommandInput, cb: (err: any, data?: DeletePartitionIndexCommandOutput) => void): void;
            deletePartitionIndex(args: DeletePartitionIndexCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePartitionIndexCommandOutput) => void): void;
            /**
                * <p>Delete the entire registry including schema and all of its versions. To get the status of the delete operation, you can call the <code>GetRegistry</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the registry such as the <code>UpdateRegistry</code>, <code>CreateSchema</code>, <code>UpdateSchema</code>, and <code>RegisterSchemaVersion</code> APIs. </p>
                */
            deleteRegistry(args: DeleteRegistryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRegistryCommandOutput>;
            deleteRegistry(args: DeleteRegistryCommandInput, cb: (err: any, data?: DeleteRegistryCommandOutput) => void): void;
            deleteRegistry(args: DeleteRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRegistryCommandOutput) => void): void;
            /**
                * <p>Deletes a specified policy.</p>
                */
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourcePolicyCommandOutput>;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete operation, you can call <code>GetSchema</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the schema, such as the <code>GetSchemaByDefinition</code>, and <code>RegisterSchemaVersion</code> APIs.</p>
                */
            deleteSchema(args: DeleteSchemaCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSchemaCommandOutput>;
            deleteSchema(args: DeleteSchemaCommandInput, cb: (err: any, data?: DeleteSchemaCommandOutput) => void): void;
            deleteSchema(args: DeleteSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSchemaCommandOutput) => void): void;
            /**
                * <p>Remove versions from the specified schema. A version number or range may be supplied. If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.  Calling the <code>GetSchemaVersions</code> API after this call will list the status of the deleted versions.</p>
                *          <p>When the range of version numbers contain check pointed version, the API will return a 409 conflict and will not proceed with the deletion. You have to remove the checkpoint first using the <code>DeleteSchemaCheckpoint</code> API before using this API.</p>
                *          <p>You cannot use the <code>DeleteSchemaVersions</code> API to delete the first schema version in the schema set. The first schema version can only be deleted by the <code>DeleteSchema</code> API. This operation will also delete the attached <code>SchemaVersionMetadata</code> under the schema versions. Hard deletes will be enforced on the database.</p>
                *          <p>If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.</p>
                */
            deleteSchemaVersions(args: DeleteSchemaVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSchemaVersionsCommandOutput>;
            deleteSchemaVersions(args: DeleteSchemaVersionsCommandInput, cb: (err: any, data?: DeleteSchemaVersionsCommandOutput) => void): void;
            deleteSchemaVersions(args: DeleteSchemaVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSchemaVersionsCommandOutput) => void): void;
            /**
                * <p>Deletes a specified security configuration.</p>
                */
            deleteSecurityConfiguration(args: DeleteSecurityConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSecurityConfigurationCommandOutput>;
            deleteSecurityConfiguration(args: DeleteSecurityConfigurationCommandInput, cb: (err: any, data?: DeleteSecurityConfigurationCommandOutput) => void): void;
            deleteSecurityConfiguration(args: DeleteSecurityConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSecurityConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the session.</p>
                */
            deleteSession(args: DeleteSessionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSessionCommandOutput>;
            deleteSession(args: DeleteSessionCommandInput, cb: (err: any, data?: DeleteSessionCommandOutput) => void): void;
            deleteSession(args: DeleteSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSessionCommandOutput) => void): void;
            /**
                * <p>Removes a table definition from the Data Catalog.</p>
                *          <note>
                *             <p>After completing this operation, you no longer have access to the table versions and
                *         partitions that belong to the deleted table. Glue deletes these "orphaned" resources
                *         asynchronously in a timely manner, at the discretion of the service.</p>
                *             <p>To ensure the immediate deletion of all related resources, before calling
                *           <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or
                *           <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or
                *           <code>BatchDeletePartition</code>, to delete any resources that belong to the
                *         table.</p>
                *          </note>
                */
            deleteTable(args: DeleteTableCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTableCommandOutput>;
            deleteTable(args: DeleteTableCommandInput, cb: (err: any, data?: DeleteTableCommandOutput) => void): void;
            deleteTable(args: DeleteTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTableCommandOutput) => void): void;
            /**
                * <p>Deletes a specified version of a table.</p>
                */
            deleteTableVersion(args: DeleteTableVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTableVersionCommandOutput>;
            deleteTableVersion(args: DeleteTableVersionCommandInput, cb: (err: any, data?: DeleteTableVersionCommandOutput) => void): void;
            deleteTableVersion(args: DeleteTableVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTableVersionCommandOutput) => void): void;
            /**
                * <p>Deletes a specified trigger. If the trigger is not found, no
                *       exception is thrown.</p>
                */
            deleteTrigger(args: DeleteTriggerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTriggerCommandOutput>;
            deleteTrigger(args: DeleteTriggerCommandInput, cb: (err: any, data?: DeleteTriggerCommandOutput) => void): void;
            deleteTrigger(args: DeleteTriggerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTriggerCommandOutput) => void): void;
            /**
                * <p>Deletes an existing function definition from the Data Catalog.</p>
                */
            deleteUserDefinedFunction(args: DeleteUserDefinedFunctionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserDefinedFunctionCommandOutput>;
            deleteUserDefinedFunction(args: DeleteUserDefinedFunctionCommandInput, cb: (err: any, data?: DeleteUserDefinedFunctionCommandOutput) => void): void;
            deleteUserDefinedFunction(args: DeleteUserDefinedFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserDefinedFunctionCommandOutput) => void): void;
            /**
                * <p>Deletes a workflow.</p>
                */
            deleteWorkflow(args: DeleteWorkflowCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkflowCommandOutput>;
            deleteWorkflow(args: DeleteWorkflowCommandInput, cb: (err: any, data?: DeleteWorkflowCommandOutput) => void): void;
            deleteWorkflow(args: DeleteWorkflowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkflowCommandOutput) => void): void;
            /**
                * <p>Retrieves the details of a blueprint.</p>
                */
            getBlueprint(args: GetBlueprintCommandInput, options?: __HttpHandlerOptions): Promise<GetBlueprintCommandOutput>;
            getBlueprint(args: GetBlueprintCommandInput, cb: (err: any, data?: GetBlueprintCommandOutput) => void): void;
            getBlueprint(args: GetBlueprintCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlueprintCommandOutput) => void): void;
            /**
                * <p>Retrieves the details of a blueprint run.</p>
                */
            getBlueprintRun(args: GetBlueprintRunCommandInput, options?: __HttpHandlerOptions): Promise<GetBlueprintRunCommandOutput>;
            getBlueprintRun(args: GetBlueprintRunCommandInput, cb: (err: any, data?: GetBlueprintRunCommandOutput) => void): void;
            getBlueprintRun(args: GetBlueprintRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlueprintRunCommandOutput) => void): void;
            /**
                * <p>Retrieves the details of blueprint runs for a specified blueprint.</p>
                */
            getBlueprintRuns(args: GetBlueprintRunsCommandInput, options?: __HttpHandlerOptions): Promise<GetBlueprintRunsCommandOutput>;
            getBlueprintRuns(args: GetBlueprintRunsCommandInput, cb: (err: any, data?: GetBlueprintRunsCommandOutput) => void): void;
            getBlueprintRuns(args: GetBlueprintRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlueprintRunsCommandOutput) => void): void;
            /**
                * <p>Retrieves the status of a migration operation.</p>
                */
            getCatalogImportStatus(args: GetCatalogImportStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetCatalogImportStatusCommandOutput>;
            getCatalogImportStatus(args: GetCatalogImportStatusCommandInput, cb: (err: any, data?: GetCatalogImportStatusCommandOutput) => void): void;
            getCatalogImportStatus(args: GetCatalogImportStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCatalogImportStatusCommandOutput) => void): void;
            /**
                * <p>Retrieve a classifier by name.</p>
                */
            getClassifier(args: GetClassifierCommandInput, options?: __HttpHandlerOptions): Promise<GetClassifierCommandOutput>;
            getClassifier(args: GetClassifierCommandInput, cb: (err: any, data?: GetClassifierCommandOutput) => void): void;
            getClassifier(args: GetClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetClassifierCommandOutput) => void): void;
            /**
                * <p>Lists all classifier objects in the Data Catalog.</p>
                */
            getClassifiers(args: GetClassifiersCommandInput, options?: __HttpHandlerOptions): Promise<GetClassifiersCommandOutput>;
            getClassifiers(args: GetClassifiersCommandInput, cb: (err: any, data?: GetClassifiersCommandOutput) => void): void;
            getClassifiers(args: GetClassifiersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetClassifiersCommandOutput) => void): void;
            /**
                * <p>Retrieves partition statistics of columns.</p>
                *
                * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetPartition</code>.</p>
                */
            getColumnStatisticsForPartition(args: GetColumnStatisticsForPartitionCommandInput, options?: __HttpHandlerOptions): Promise<GetColumnStatisticsForPartitionCommandOutput>;
            getColumnStatisticsForPartition(args: GetColumnStatisticsForPartitionCommandInput, cb: (err: any, data?: GetColumnStatisticsForPartitionCommandOutput) => void): void;
            getColumnStatisticsForPartition(args: GetColumnStatisticsForPartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetColumnStatisticsForPartitionCommandOutput) => void): void;
            /**
                * <p>Retrieves table statistics of columns.</p>
                *
                *          <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetTable</code>.</p>
                */
            getColumnStatisticsForTable(args: GetColumnStatisticsForTableCommandInput, options?: __HttpHandlerOptions): Promise<GetColumnStatisticsForTableCommandOutput>;
            getColumnStatisticsForTable(args: GetColumnStatisticsForTableCommandInput, cb: (err: any, data?: GetColumnStatisticsForTableCommandOutput) => void): void;
            getColumnStatisticsForTable(args: GetColumnStatisticsForTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetColumnStatisticsForTableCommandOutput) => void): void;
            /**
                * <p>Retrieves a connection definition from the Data Catalog.</p>
                */
            getConnection(args: GetConnectionCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectionCommandOutput>;
            getConnection(args: GetConnectionCommandInput, cb: (err: any, data?: GetConnectionCommandOutput) => void): void;
            getConnection(args: GetConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectionCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of connection definitions from the Data Catalog.</p>
                */
            getConnections(args: GetConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectionsCommandOutput>;
            getConnections(args: GetConnectionsCommandInput, cb: (err: any, data?: GetConnectionsCommandOutput) => void): void;
            getConnections(args: GetConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectionsCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata for a specified crawler.</p>
                */
            getCrawler(args: GetCrawlerCommandInput, options?: __HttpHandlerOptions): Promise<GetCrawlerCommandOutput>;
            getCrawler(args: GetCrawlerCommandInput, cb: (err: any, data?: GetCrawlerCommandOutput) => void): void;
            getCrawler(args: GetCrawlerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCrawlerCommandOutput) => void): void;
            /**
                * <p>Retrieves metrics about specified crawlers.</p>
                */
            getCrawlerMetrics(args: GetCrawlerMetricsCommandInput, options?: __HttpHandlerOptions): Promise<GetCrawlerMetricsCommandOutput>;
            getCrawlerMetrics(args: GetCrawlerMetricsCommandInput, cb: (err: any, data?: GetCrawlerMetricsCommandOutput) => void): void;
            getCrawlerMetrics(args: GetCrawlerMetricsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCrawlerMetricsCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata for all crawlers defined in the customer
                *       account.</p>
                */
            getCrawlers(args: GetCrawlersCommandInput, options?: __HttpHandlerOptions): Promise<GetCrawlersCommandOutput>;
            getCrawlers(args: GetCrawlersCommandInput, cb: (err: any, data?: GetCrawlersCommandOutput) => void): void;
            getCrawlers(args: GetCrawlersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCrawlersCommandOutput) => void): void;
            /**
                * <p>Retrieves the details of a custom pattern by specifying its name.</p>
                */
            getCustomEntityType(args: GetCustomEntityTypeCommandInput, options?: __HttpHandlerOptions): Promise<GetCustomEntityTypeCommandOutput>;
            getCustomEntityType(args: GetCustomEntityTypeCommandInput, cb: (err: any, data?: GetCustomEntityTypeCommandOutput) => void): void;
            getCustomEntityType(args: GetCustomEntityTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCustomEntityTypeCommandOutput) => void): void;
            /**
                * <p>Retrieves the definition of a specified database.</p>
                */
            getDatabase(args: GetDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<GetDatabaseCommandOutput>;
            getDatabase(args: GetDatabaseCommandInput, cb: (err: any, data?: GetDatabaseCommandOutput) => void): void;
            getDatabase(args: GetDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDatabaseCommandOutput) => void): void;
            /**
                * <p>Retrieves all databases defined in a given Data Catalog.</p>
                */
            getDatabases(args: GetDatabasesCommandInput, options?: __HttpHandlerOptions): Promise<GetDatabasesCommandOutput>;
            getDatabases(args: GetDatabasesCommandInput, cb: (err: any, data?: GetDatabasesCommandOutput) => void): void;
            getDatabases(args: GetDatabasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDatabasesCommandOutput) => void): void;
            /**
                * <p>Retrieves the security configuration for a specified catalog.</p>
                */
            getDataCatalogEncryptionSettings(args: GetDataCatalogEncryptionSettingsCommandInput, options?: __HttpHandlerOptions): Promise<GetDataCatalogEncryptionSettingsCommandOutput>;
            getDataCatalogEncryptionSettings(args: GetDataCatalogEncryptionSettingsCommandInput, cb: (err: any, data?: GetDataCatalogEncryptionSettingsCommandOutput) => void): void;
            getDataCatalogEncryptionSettings(args: GetDataCatalogEncryptionSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDataCatalogEncryptionSettingsCommandOutput) => void): void;
            /**
                * <p>Transforms a Python script into a directed acyclic graph (DAG). </p>
                */
            getDataflowGraph(args: GetDataflowGraphCommandInput, options?: __HttpHandlerOptions): Promise<GetDataflowGraphCommandOutput>;
            getDataflowGraph(args: GetDataflowGraphCommandInput, cb: (err: any, data?: GetDataflowGraphCommandOutput) => void): void;
            getDataflowGraph(args: GetDataflowGraphCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDataflowGraphCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a specified development endpoint.</p>
                *          <note>
                *             <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only
                *         a private IP address, and the public IP address field is not populated. When you create a
                *         non-VPC development endpoint, Glue returns only a public IP address.</p>
                *          </note>
                */
            getDevEndpoint(args: GetDevEndpointCommandInput, options?: __HttpHandlerOptions): Promise<GetDevEndpointCommandOutput>;
            getDevEndpoint(args: GetDevEndpointCommandInput, cb: (err: any, data?: GetDevEndpointCommandOutput) => void): void;
            getDevEndpoint(args: GetDevEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevEndpointCommandOutput) => void): void;
            /**
                * <p>Retrieves all the development endpoints in this AWS account.</p>
                *          <note>
                *             <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address
                *       and the public IP address field is not populated. When you create a non-VPC development
                *       endpoint, Glue returns only a public IP address.</p>
                *          </note>
                */
            getDevEndpoints(args: GetDevEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<GetDevEndpointsCommandOutput>;
            getDevEndpoints(args: GetDevEndpointsCommandInput, cb: (err: any, data?: GetDevEndpointsCommandOutput) => void): void;
            getDevEndpoints(args: GetDevEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDevEndpointsCommandOutput) => void): void;
            /**
                * <p>Retrieves an existing job definition.</p>
                */
            getJob(args: GetJobCommandInput, options?: __HttpHandlerOptions): Promise<GetJobCommandOutput>;
            getJob(args: GetJobCommandInput, cb: (err: any, data?: GetJobCommandOutput) => void): void;
            getJob(args: GetJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobCommandOutput) => void): void;
            /**
                * <p>Returns information on a job bookmark entry.</p>
                */
            getJobBookmark(args: GetJobBookmarkCommandInput, options?: __HttpHandlerOptions): Promise<GetJobBookmarkCommandOutput>;
            getJobBookmark(args: GetJobBookmarkCommandInput, cb: (err: any, data?: GetJobBookmarkCommandOutput) => void): void;
            getJobBookmark(args: GetJobBookmarkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobBookmarkCommandOutput) => void): void;
            /**
                * <p>Retrieves the metadata for a given job run.</p>
                */
            getJobRun(args: GetJobRunCommandInput, options?: __HttpHandlerOptions): Promise<GetJobRunCommandOutput>;
            getJobRun(args: GetJobRunCommandInput, cb: (err: any, data?: GetJobRunCommandOutput) => void): void;
            getJobRun(args: GetJobRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobRunCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata for all runs of a given job definition.</p>
                */
            getJobRuns(args: GetJobRunsCommandInput, options?: __HttpHandlerOptions): Promise<GetJobRunsCommandOutput>;
            getJobRuns(args: GetJobRunsCommandInput, cb: (err: any, data?: GetJobRunsCommandOutput) => void): void;
            getJobRuns(args: GetJobRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobRunsCommandOutput) => void): void;
            /**
                * <p>Retrieves all current job definitions.</p>
                */
            getJobs(args: GetJobsCommandInput, options?: __HttpHandlerOptions): Promise<GetJobsCommandOutput>;
            getJobs(args: GetJobsCommandInput, cb: (err: any, data?: GetJobsCommandOutput) => void): void;
            getJobs(args: GetJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobsCommandOutput) => void): void;
            /**
                * <p>Creates mappings.</p>
                */
            getMapping(args: GetMappingCommandInput, options?: __HttpHandlerOptions): Promise<GetMappingCommandOutput>;
            getMapping(args: GetMappingCommandInput, cb: (err: any, data?: GetMappingCommandOutput) => void): void;
            getMapping(args: GetMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMappingCommandOutput) => void): void;
            /**
                * <p>Gets details for a specific task run on a machine learning transform. Machine learning
                *       task runs are asynchronous tasks that Glue runs on your behalf as part of various machine
                *       learning workflows. You can check the stats of any task run by calling
                *         <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's
                *         <code>TransformID</code>.</p>
                */
            getMLTaskRun(args: GetMLTaskRunCommandInput, options?: __HttpHandlerOptions): Promise<GetMLTaskRunCommandOutput>;
            getMLTaskRun(args: GetMLTaskRunCommandInput, cb: (err: any, data?: GetMLTaskRunCommandOutput) => void): void;
            getMLTaskRun(args: GetMLTaskRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMLTaskRunCommandOutput) => void): void;
            /**
                * <p>Gets a list of runs for a machine learning transform. Machine learning task runs are
                *       asynchronous tasks that Glue runs on your behalf as part of various machine learning
                *       workflows. You can get a sortable, filterable list of machine learning task runs by calling
                *         <code>GetMLTaskRuns</code> with their parent transform's <code>TransformID</code> and other
                *       optional parameters as documented in this section.</p>
                *
                * 	        <p>This operation returns a list of historic runs and must be paginated.</p>
                */
            getMLTaskRuns(args: GetMLTaskRunsCommandInput, options?: __HttpHandlerOptions): Promise<GetMLTaskRunsCommandOutput>;
            getMLTaskRuns(args: GetMLTaskRunsCommandInput, cb: (err: any, data?: GetMLTaskRunsCommandOutput) => void): void;
            getMLTaskRuns(args: GetMLTaskRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMLTaskRunsCommandOutput) => void): void;
            /**
                * <p>Gets an Glue machine learning transform artifact and all its corresponding metadata.
                *       Machine learning transforms are a special type of transform that use machine learning to learn
                *       the details of the transformation to be performed by learning from examples provided by
                *       humans. These transformations are then saved by Glue. You can retrieve their metadata by
                *       calling <code>GetMLTransform</code>.</p>
                */
            getMLTransform(args: GetMLTransformCommandInput, options?: __HttpHandlerOptions): Promise<GetMLTransformCommandOutput>;
            getMLTransform(args: GetMLTransformCommandInput, cb: (err: any, data?: GetMLTransformCommandOutput) => void): void;
            getMLTransform(args: GetMLTransformCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMLTransformCommandOutput) => void): void;
            /**
                * <p>Gets a sortable, filterable list of existing Glue machine learning transforms. Machine
                *       learning transforms are a special type of transform that use machine learning to learn the
                *       details of the transformation to be performed by learning from examples provided by humans.
                *       These transformations are then saved by Glue, and you can retrieve their metadata by
                *       calling <code>GetMLTransforms</code>.</p>
                */
            getMLTransforms(args: GetMLTransformsCommandInput, options?: __HttpHandlerOptions): Promise<GetMLTransformsCommandOutput>;
            getMLTransforms(args: GetMLTransformsCommandInput, cb: (err: any, data?: GetMLTransformsCommandOutput) => void): void;
            getMLTransforms(args: GetMLTransformsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMLTransformsCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a specified partition.</p>
                */
            getPartition(args: GetPartitionCommandInput, options?: __HttpHandlerOptions): Promise<GetPartitionCommandOutput>;
            getPartition(args: GetPartitionCommandInput, cb: (err: any, data?: GetPartitionCommandOutput) => void): void;
            getPartition(args: GetPartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPartitionCommandOutput) => void): void;
            /**
                * <p>Retrieves the partition indexes associated with a table.</p>
                */
            getPartitionIndexes(args: GetPartitionIndexesCommandInput, options?: __HttpHandlerOptions): Promise<GetPartitionIndexesCommandOutput>;
            getPartitionIndexes(args: GetPartitionIndexesCommandInput, cb: (err: any, data?: GetPartitionIndexesCommandOutput) => void): void;
            getPartitionIndexes(args: GetPartitionIndexesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPartitionIndexesCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the partitions in a table.</p>
                */
            getPartitions(args: GetPartitionsCommandInput, options?: __HttpHandlerOptions): Promise<GetPartitionsCommandOutput>;
            getPartitions(args: GetPartitionsCommandInput, cb: (err: any, data?: GetPartitionsCommandOutput) => void): void;
            getPartitions(args: GetPartitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPartitionsCommandOutput) => void): void;
            /**
                * <p>Gets code to perform a specified mapping.</p>
                */
            getPlan(args: GetPlanCommandInput, options?: __HttpHandlerOptions): Promise<GetPlanCommandOutput>;
            getPlan(args: GetPlanCommandInput, cb: (err: any, data?: GetPlanCommandOutput) => void): void;
            getPlan(args: GetPlanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPlanCommandOutput) => void): void;
            /**
                * <p>Describes the specified registry in detail.</p>
                */
            getRegistry(args: GetRegistryCommandInput, options?: __HttpHandlerOptions): Promise<GetRegistryCommandOutput>;
            getRegistry(args: GetRegistryCommandInput, cb: (err: any, data?: GetRegistryCommandOutput) => void): void;
            getRegistry(args: GetRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRegistryCommandOutput) => void): void;
            /**
                * <p>Retrieves the resource policies set on individual resources by Resource Access Manager
                *       during cross-account permission grants. Also retrieves the Data Catalog resource
                *       policy.</p>
                *          <p>If you enabled metadata encryption in Data Catalog settings, and you do not have
                *       permission on the KMS key, the operation can't return the Data Catalog resource
                *       policy.</p>
                */
            getResourcePolicies(args: GetResourcePoliciesCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcePoliciesCommandOutput>;
            getResourcePolicies(args: GetResourcePoliciesCommandInput, cb: (err: any, data?: GetResourcePoliciesCommandOutput) => void): void;
            getResourcePolicies(args: GetResourcePoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcePoliciesCommandOutput) => void): void;
            /**
                * <p>Retrieves a specified resource policy.</p>
                */
            getResourcePolicy(args: GetResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcePolicyCommandOutput>;
            getResourcePolicy(args: GetResourcePolicyCommandInput, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            getResourcePolicy(args: GetResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Describes the specified schema in detail.</p>
                */
            getSchema(args: GetSchemaCommandInput, options?: __HttpHandlerOptions): Promise<GetSchemaCommandOutput>;
            getSchema(args: GetSchemaCommandInput, cb: (err: any, data?: GetSchemaCommandOutput) => void): void;
            getSchema(args: GetSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSchemaCommandOutput) => void): void;
            /**
                * <p>Retrieves a schema by the <code>SchemaDefinition</code>. The schema definition is sent to the Schema Registry, canonicalized, and hashed. If the hash is matched within the scope of the <code>SchemaName</code> or ARN (or the default registry, if none is supplied), that schema’s metadata is returned. Otherwise, a 404 or NotFound error is returned. Schema versions in <code>Deleted</code> statuses will not be included in the results.</p>
                */
            getSchemaByDefinition(args: GetSchemaByDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetSchemaByDefinitionCommandOutput>;
            getSchemaByDefinition(args: GetSchemaByDefinitionCommandInput, cb: (err: any, data?: GetSchemaByDefinitionCommandOutput) => void): void;
            getSchemaByDefinition(args: GetSchemaByDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSchemaByDefinitionCommandOutput) => void): void;
            /**
                * <p>Get the specified schema by its unique ID assigned when a version of the schema is created or registered. Schema versions in Deleted status will not be included in the results.</p>
                */
            getSchemaVersion(args: GetSchemaVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetSchemaVersionCommandOutput>;
            getSchemaVersion(args: GetSchemaVersionCommandInput, cb: (err: any, data?: GetSchemaVersionCommandOutput) => void): void;
            getSchemaVersion(args: GetSchemaVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSchemaVersionCommandOutput) => void): void;
            /**
                * <p>Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.</p>
                *          <p>This API allows you to compare two schema versions between two schema definitions under the same schema.</p>
                */
            getSchemaVersionsDiff(args: GetSchemaVersionsDiffCommandInput, options?: __HttpHandlerOptions): Promise<GetSchemaVersionsDiffCommandOutput>;
            getSchemaVersionsDiff(args: GetSchemaVersionsDiffCommandInput, cb: (err: any, data?: GetSchemaVersionsDiffCommandOutput) => void): void;
            getSchemaVersionsDiff(args: GetSchemaVersionsDiffCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSchemaVersionsDiffCommandOutput) => void): void;
            /**
                * <p>Retrieves a specified security configuration.</p>
                */
            getSecurityConfiguration(args: GetSecurityConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetSecurityConfigurationCommandOutput>;
            getSecurityConfiguration(args: GetSecurityConfigurationCommandInput, cb: (err: any, data?: GetSecurityConfigurationCommandOutput) => void): void;
            getSecurityConfiguration(args: GetSecurityConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSecurityConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of all security configurations.</p>
                */
            getSecurityConfigurations(args: GetSecurityConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<GetSecurityConfigurationsCommandOutput>;
            getSecurityConfigurations(args: GetSecurityConfigurationsCommandInput, cb: (err: any, data?: GetSecurityConfigurationsCommandOutput) => void): void;
            getSecurityConfigurations(args: GetSecurityConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSecurityConfigurationsCommandOutput) => void): void;
            /**
                * <p>Retrieves the session.</p>
                */
            getSession(args: GetSessionCommandInput, options?: __HttpHandlerOptions): Promise<GetSessionCommandOutput>;
            getSession(args: GetSessionCommandInput, cb: (err: any, data?: GetSessionCommandOutput) => void): void;
            getSession(args: GetSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSessionCommandOutput) => void): void;
            /**
                * <p>Retrieves the statement.</p>
                */
            getStatement(args: GetStatementCommandInput, options?: __HttpHandlerOptions): Promise<GetStatementCommandOutput>;
            getStatement(args: GetStatementCommandInput, cb: (err: any, data?: GetStatementCommandOutput) => void): void;
            getStatement(args: GetStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStatementCommandOutput) => void): void;
            /**
                * <p>Retrieves the <code>Table</code> definition in a Data Catalog for
                *       a specified table.</p>
                */
            getTable(args: GetTableCommandInput, options?: __HttpHandlerOptions): Promise<GetTableCommandOutput>;
            getTable(args: GetTableCommandInput, cb: (err: any, data?: GetTableCommandOutput) => void): void;
            getTable(args: GetTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTableCommandOutput) => void): void;
            /**
                * <p>Retrieves the definitions of some or all of the tables in a given
                *       <code>Database</code>.</p>
                */
            getTables(args: GetTablesCommandInput, options?: __HttpHandlerOptions): Promise<GetTablesCommandOutput>;
            getTables(args: GetTablesCommandInput, cb: (err: any, data?: GetTablesCommandOutput) => void): void;
            getTables(args: GetTablesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTablesCommandOutput) => void): void;
            /**
                * <p>Retrieves a specified version of a table.</p>
                */
            getTableVersion(args: GetTableVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetTableVersionCommandOutput>;
            getTableVersion(args: GetTableVersionCommandInput, cb: (err: any, data?: GetTableVersionCommandOutput) => void): void;
            getTableVersion(args: GetTableVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTableVersionCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of strings that identify available versions of
                *       a specified table.</p>
                */
            getTableVersions(args: GetTableVersionsCommandInput, options?: __HttpHandlerOptions): Promise<GetTableVersionsCommandOutput>;
            getTableVersions(args: GetTableVersionsCommandInput, cb: (err: any, data?: GetTableVersionsCommandOutput) => void): void;
            getTableVersions(args: GetTableVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTableVersionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of tags associated with a resource.</p>
                */
            getTags(args: GetTagsCommandInput, options?: __HttpHandlerOptions): Promise<GetTagsCommandOutput>;
            getTags(args: GetTagsCommandInput, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            getTags(args: GetTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            /**
                * <p>Retrieves the definition of a trigger.</p>
                */
            getTrigger(args: GetTriggerCommandInput, options?: __HttpHandlerOptions): Promise<GetTriggerCommandOutput>;
            getTrigger(args: GetTriggerCommandInput, cb: (err: any, data?: GetTriggerCommandOutput) => void): void;
            getTrigger(args: GetTriggerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTriggerCommandOutput) => void): void;
            /**
                * <p>Gets all the triggers associated with a job.</p>
                */
            getTriggers(args: GetTriggersCommandInput, options?: __HttpHandlerOptions): Promise<GetTriggersCommandOutput>;
            getTriggers(args: GetTriggersCommandInput, cb: (err: any, data?: GetTriggersCommandOutput) => void): void;
            getTriggers(args: GetTriggersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTriggersCommandOutput) => void): void;
            getUnfilteredPartitionMetadata(args: GetUnfilteredPartitionMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetUnfilteredPartitionMetadataCommandOutput>;
            getUnfilteredPartitionMetadata(args: GetUnfilteredPartitionMetadataCommandInput, cb: (err: any, data?: GetUnfilteredPartitionMetadataCommandOutput) => void): void;
            getUnfilteredPartitionMetadata(args: GetUnfilteredPartitionMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUnfilteredPartitionMetadataCommandOutput) => void): void;
            getUnfilteredPartitionsMetadata(args: GetUnfilteredPartitionsMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetUnfilteredPartitionsMetadataCommandOutput>;
            getUnfilteredPartitionsMetadata(args: GetUnfilteredPartitionsMetadataCommandInput, cb: (err: any, data?: GetUnfilteredPartitionsMetadataCommandOutput) => void): void;
            getUnfilteredPartitionsMetadata(args: GetUnfilteredPartitionsMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUnfilteredPartitionsMetadataCommandOutput) => void): void;
            getUnfilteredTableMetadata(args: GetUnfilteredTableMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetUnfilteredTableMetadataCommandOutput>;
            getUnfilteredTableMetadata(args: GetUnfilteredTableMetadataCommandInput, cb: (err: any, data?: GetUnfilteredTableMetadataCommandOutput) => void): void;
            getUnfilteredTableMetadata(args: GetUnfilteredTableMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUnfilteredTableMetadataCommandOutput) => void): void;
            /**
                * <p>Retrieves a specified function definition from the Data Catalog.</p>
                */
            getUserDefinedFunction(args: GetUserDefinedFunctionCommandInput, options?: __HttpHandlerOptions): Promise<GetUserDefinedFunctionCommandOutput>;
            getUserDefinedFunction(args: GetUserDefinedFunctionCommandInput, cb: (err: any, data?: GetUserDefinedFunctionCommandOutput) => void): void;
            getUserDefinedFunction(args: GetUserDefinedFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUserDefinedFunctionCommandOutput) => void): void;
            /**
                * <p>Retrieves multiple function definitions from the Data Catalog.</p>
                */
            getUserDefinedFunctions(args: GetUserDefinedFunctionsCommandInput, options?: __HttpHandlerOptions): Promise<GetUserDefinedFunctionsCommandOutput>;
            getUserDefinedFunctions(args: GetUserDefinedFunctionsCommandInput, cb: (err: any, data?: GetUserDefinedFunctionsCommandOutput) => void): void;
            getUserDefinedFunctions(args: GetUserDefinedFunctionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUserDefinedFunctionsCommandOutput) => void): void;
            /**
                * <p>Retrieves resource metadata for a workflow.</p>
                */
            getWorkflow(args: GetWorkflowCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkflowCommandOutput>;
            getWorkflow(args: GetWorkflowCommandInput, cb: (err: any, data?: GetWorkflowCommandOutput) => void): void;
            getWorkflow(args: GetWorkflowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkflowCommandOutput) => void): void;
            /**
                * <p>Retrieves the metadata for a given workflow run. </p>
                */
            getWorkflowRun(args: GetWorkflowRunCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkflowRunCommandOutput>;
            getWorkflowRun(args: GetWorkflowRunCommandInput, cb: (err: any, data?: GetWorkflowRunCommandOutput) => void): void;
            getWorkflowRun(args: GetWorkflowRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkflowRunCommandOutput) => void): void;
            /**
                * <p>Retrieves the workflow run properties which were set during the run.</p>
                */
            getWorkflowRunProperties(args: GetWorkflowRunPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkflowRunPropertiesCommandOutput>;
            getWorkflowRunProperties(args: GetWorkflowRunPropertiesCommandInput, cb: (err: any, data?: GetWorkflowRunPropertiesCommandOutput) => void): void;
            getWorkflowRunProperties(args: GetWorkflowRunPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkflowRunPropertiesCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata for all runs of a given workflow.</p>
                */
            getWorkflowRuns(args: GetWorkflowRunsCommandInput, options?: __HttpHandlerOptions): Promise<GetWorkflowRunsCommandOutput>;
            getWorkflowRuns(args: GetWorkflowRunsCommandInput, cb: (err: any, data?: GetWorkflowRunsCommandOutput) => void): void;
            getWorkflowRuns(args: GetWorkflowRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorkflowRunsCommandOutput) => void): void;
            /**
                * <p>Imports an existing Amazon Athena Data Catalog to Glue.</p>
                */
            importCatalogToGlue(args: ImportCatalogToGlueCommandInput, options?: __HttpHandlerOptions): Promise<ImportCatalogToGlueCommandOutput>;
            importCatalogToGlue(args: ImportCatalogToGlueCommandInput, cb: (err: any, data?: ImportCatalogToGlueCommandOutput) => void): void;
            importCatalogToGlue(args: ImportCatalogToGlueCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportCatalogToGlueCommandOutput) => void): void;
            /**
                * <p>Lists all the blueprint names in an account.</p>
                */
            listBlueprints(args: ListBlueprintsCommandInput, options?: __HttpHandlerOptions): Promise<ListBlueprintsCommandOutput>;
            listBlueprints(args: ListBlueprintsCommandInput, cb: (err: any, data?: ListBlueprintsCommandOutput) => void): void;
            listBlueprints(args: ListBlueprintsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListBlueprintsCommandOutput) => void): void;
            /**
                * <p>Retrieves the names of all crawler resources in this Amazon Web Services account, or the
                *       resources with the specified tag. This operation allows you to see which
                *       resources are available in your account, and their names.</p>
                *
                *          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
                *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
                *       filtering, only resources with the tag are retrieved.</p>
                */
            listCrawlers(args: ListCrawlersCommandInput, options?: __HttpHandlerOptions): Promise<ListCrawlersCommandOutput>;
            listCrawlers(args: ListCrawlersCommandInput, cb: (err: any, data?: ListCrawlersCommandOutput) => void): void;
            listCrawlers(args: ListCrawlersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCrawlersCommandOutput) => void): void;
            /**
                * <p>Returns all the crawls of a specified crawler. Returns only the crawls that have occurred since the launch date of the crawler history feature, and only retains up to 12 months of crawls. Older crawls will not be returned.</p>
                *
                * 	        <p>You may use this API to:</p>
                * 	        <ul>
                *             <li>
                *                <p>Retrive all the crawls of a specified crawler.</p>
                *             </li>
                *             <li>
                *                <p>Retrieve all the crawls of a specified crawler within a limited count.</p>
                *             </li>
                *             <li>
                *                <p>Retrieve all the crawls of a specified crawler in a specific time range.</p>
                *             </li>
                *             <li>
                *                <p>Retrieve all the crawls of a specified crawler with a particular state, crawl ID, or DPU hour value.</p>
                *             </li>
                *          </ul>
                */
            listCrawls(args: ListCrawlsCommandInput, options?: __HttpHandlerOptions): Promise<ListCrawlsCommandOutput>;
            listCrawls(args: ListCrawlsCommandInput, cb: (err: any, data?: ListCrawlsCommandOutput) => void): void;
            listCrawls(args: ListCrawlsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCrawlsCommandOutput) => void): void;
            /**
                * <p>Lists all the custom patterns that have been created.</p>
                */
            listCustomEntityTypes(args: ListCustomEntityTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListCustomEntityTypesCommandOutput>;
            listCustomEntityTypes(args: ListCustomEntityTypesCommandInput, cb: (err: any, data?: ListCustomEntityTypesCommandOutput) => void): void;
            listCustomEntityTypes(args: ListCustomEntityTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCustomEntityTypesCommandOutput) => void): void;
            /**
                * <p>Retrieves the names of all <code>DevEndpoint</code> resources in this Amazon Web Services account, or the
                *       resources with the specified tag. This operation allows you to see which resources are
                *       available in your account, and their names.</p>
                *
                *          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
                *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
                *       filtering, only resources with the tag are retrieved.</p>
                */
            listDevEndpoints(args: ListDevEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<ListDevEndpointsCommandOutput>;
            listDevEndpoints(args: ListDevEndpointsCommandInput, cb: (err: any, data?: ListDevEndpointsCommandOutput) => void): void;
            listDevEndpoints(args: ListDevEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevEndpointsCommandOutput) => void): void;
            /**
                * <p>Retrieves the names of all job resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p>
                *
                * 	        <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
                *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
                *       filtering, only resources with the tag are retrieved.</p>
                */
            listJobs(args: ListJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListJobsCommandOutput>;
            listJobs(args: ListJobsCommandInput, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            listJobs(args: ListJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            /**
                * <p> Retrieves a sortable, filterable list of existing Glue machine learning transforms in this Amazon Web Services account,
                *        or the resources with the specified tag. This operation takes the optional <code>Tags</code> field, which you can use as
                *        a filter of the responses so that tagged resources can be retrieved as a group. If you choose to use tag
                *        filtering, only resources with the tags are retrieved.
                *      </p>
                */
            listMLTransforms(args: ListMLTransformsCommandInput, options?: __HttpHandlerOptions): Promise<ListMLTransformsCommandOutput>;
            listMLTransforms(args: ListMLTransformsCommandInput, cb: (err: any, data?: ListMLTransformsCommandOutput) => void): void;
            listMLTransforms(args: ListMLTransformsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMLTransformsCommandOutput) => void): void;
            /**
                * <p>Returns a list of registries that you have created, with minimal registry information. Registries in the <code>Deleting</code> status will not be included in the results. Empty results will be returned if there are no registries available.</p>
                */
            listRegistries(args: ListRegistriesCommandInput, options?: __HttpHandlerOptions): Promise<ListRegistriesCommandOutput>;
            listRegistries(args: ListRegistriesCommandInput, cb: (err: any, data?: ListRegistriesCommandOutput) => void): void;
            listRegistries(args: ListRegistriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRegistriesCommandOutput) => void): void;
            /**
                * <p>Returns a list of schemas with minimal details. Schemas in Deleting status will not be included in the results. Empty results will be returned if there are no schemas available.</p>
                *          <p>When the <code>RegistryId</code> is not provided, all the schemas across registries will be part of the API response.</p>
                */
            listSchemas(args: ListSchemasCommandInput, options?: __HttpHandlerOptions): Promise<ListSchemasCommandOutput>;
            listSchemas(args: ListSchemasCommandInput, cb: (err: any, data?: ListSchemasCommandOutput) => void): void;
            listSchemas(args: ListSchemasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSchemasCommandOutput) => void): void;
            /**
                * <p>Returns a list of schema versions that you have created, with minimal information. Schema versions in Deleted status will not be included in the results. Empty results will be returned if there are no schema versions available.</p>
                */
            listSchemaVersions(args: ListSchemaVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListSchemaVersionsCommandOutput>;
            listSchemaVersions(args: ListSchemaVersionsCommandInput, cb: (err: any, data?: ListSchemaVersionsCommandOutput) => void): void;
            listSchemaVersions(args: ListSchemaVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSchemaVersionsCommandOutput) => void): void;
            /**
                * <p>Retrieve a list of sessions.</p>
                */
            listSessions(args: ListSessionsCommandInput, options?: __HttpHandlerOptions): Promise<ListSessionsCommandOutput>;
            listSessions(args: ListSessionsCommandInput, cb: (err: any, data?: ListSessionsCommandOutput) => void): void;
            listSessions(args: ListSessionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSessionsCommandOutput) => void): void;
            /**
                * <p>Lists statements for the session.</p>
                */
            listStatements(args: ListStatementsCommandInput, options?: __HttpHandlerOptions): Promise<ListStatementsCommandOutput>;
            listStatements(args: ListStatementsCommandInput, cb: (err: any, data?: ListStatementsCommandOutput) => void): void;
            listStatements(args: ListStatementsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStatementsCommandOutput) => void): void;
            /**
                * <p>Retrieves the names of all trigger resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p>
                *
                *          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
                *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
                *       filtering, only resources with the tag are retrieved.</p>
                */
            listTriggers(args: ListTriggersCommandInput, options?: __HttpHandlerOptions): Promise<ListTriggersCommandOutput>;
            listTriggers(args: ListTriggersCommandInput, cb: (err: any, data?: ListTriggersCommandOutput) => void): void;
            listTriggers(args: ListTriggersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTriggersCommandOutput) => void): void;
            /**
                * <p>Lists names of workflows created in the account.</p>
                */
            listWorkflows(args: ListWorkflowsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkflowsCommandOutput>;
            listWorkflows(args: ListWorkflowsCommandInput, cb: (err: any, data?: ListWorkflowsCommandOutput) => void): void;
            listWorkflows(args: ListWorkflowsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkflowsCommandOutput) => void): void;
            /**
                * <p>Sets the security configuration for a specified catalog. After the configuration has been
                *       set, the specified encryption is applied to every catalog write thereafter.</p>
                */
            putDataCatalogEncryptionSettings(args: PutDataCatalogEncryptionSettingsCommandInput, options?: __HttpHandlerOptions): Promise<PutDataCatalogEncryptionSettingsCommandOutput>;
            putDataCatalogEncryptionSettings(args: PutDataCatalogEncryptionSettingsCommandInput, cb: (err: any, data?: PutDataCatalogEncryptionSettingsCommandOutput) => void): void;
            putDataCatalogEncryptionSettings(args: PutDataCatalogEncryptionSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDataCatalogEncryptionSettingsCommandOutput) => void): void;
            /**
                * <p>Sets the Data Catalog resource policy for access control.</p>
                */
            putResourcePolicy(args: PutResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutResourcePolicyCommandOutput>;
            putResourcePolicy(args: PutResourcePolicyCommandInput, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            putResourcePolicy(args: PutResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Puts the metadata key value pair for a specified schema version ID. A maximum of 10 key value pairs will be allowed per schema version. They can be added over one or more calls.</p>
                */
            putSchemaVersionMetadata(args: PutSchemaVersionMetadataCommandInput, options?: __HttpHandlerOptions): Promise<PutSchemaVersionMetadataCommandOutput>;
            putSchemaVersionMetadata(args: PutSchemaVersionMetadataCommandInput, cb: (err: any, data?: PutSchemaVersionMetadataCommandOutput) => void): void;
            putSchemaVersionMetadata(args: PutSchemaVersionMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutSchemaVersionMetadataCommandOutput) => void): void;
            /**
                * <p>Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.</p>
                */
            putWorkflowRunProperties(args: PutWorkflowRunPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<PutWorkflowRunPropertiesCommandOutput>;
            putWorkflowRunProperties(args: PutWorkflowRunPropertiesCommandInput, cb: (err: any, data?: PutWorkflowRunPropertiesCommandOutput) => void): void;
            putWorkflowRunProperties(args: PutWorkflowRunPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutWorkflowRunPropertiesCommandOutput) => void): void;
            /**
                * <p>Queries for the schema version metadata information. </p>
                */
            querySchemaVersionMetadata(args: QuerySchemaVersionMetadataCommandInput, options?: __HttpHandlerOptions): Promise<QuerySchemaVersionMetadataCommandOutput>;
            querySchemaVersionMetadata(args: QuerySchemaVersionMetadataCommandInput, cb: (err: any, data?: QuerySchemaVersionMetadataCommandOutput) => void): void;
            querySchemaVersionMetadata(args: QuerySchemaVersionMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: QuerySchemaVersionMetadataCommandOutput) => void): void;
            /**
                * <p>Adds a new version to the existing schema. Returns an error if new version of schema does not meet the compatibility requirements of the schema set. This API will not create a new schema set and will return a 404 error if the schema set is not already present in the Schema Registry.</p>
                *          <p>If this is the first schema definition to be registered in the Schema Registry, this API will store the schema version and return immediately. Otherwise, this call has the potential to run longer than other operations due to compatibility modes. You can call the <code>GetSchemaVersion</code> API with the <code>SchemaVersionId</code> to check compatibility modes.</p>
                * 	        <p>If the same schema definition is already stored in Schema Registry as a version, the schema ID of the existing schema is returned to the caller.</p>
                */
            registerSchemaVersion(args: RegisterSchemaVersionCommandInput, options?: __HttpHandlerOptions): Promise<RegisterSchemaVersionCommandOutput>;
            registerSchemaVersion(args: RegisterSchemaVersionCommandInput, cb: (err: any, data?: RegisterSchemaVersionCommandOutput) => void): void;
            registerSchemaVersion(args: RegisterSchemaVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterSchemaVersionCommandOutput) => void): void;
            /**
                * <p>Removes a key value pair from the schema version metadata for the specified schema version ID.</p>
                */
            removeSchemaVersionMetadata(args: RemoveSchemaVersionMetadataCommandInput, options?: __HttpHandlerOptions): Promise<RemoveSchemaVersionMetadataCommandOutput>;
            removeSchemaVersionMetadata(args: RemoveSchemaVersionMetadataCommandInput, cb: (err: any, data?: RemoveSchemaVersionMetadataCommandOutput) => void): void;
            removeSchemaVersionMetadata(args: RemoveSchemaVersionMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveSchemaVersionMetadataCommandOutput) => void): void;
            /**
                * <p>Resets a bookmark entry.</p>
                */
            resetJobBookmark(args: ResetJobBookmarkCommandInput, options?: __HttpHandlerOptions): Promise<ResetJobBookmarkCommandOutput>;
            resetJobBookmark(args: ResetJobBookmarkCommandInput, cb: (err: any, data?: ResetJobBookmarkCommandOutput) => void): void;
            resetJobBookmark(args: ResetJobBookmarkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetJobBookmarkCommandOutput) => void): void;
            /**
                * <p>Restarts selected nodes of a previous partially completed workflow run and resumes the workflow run. The selected nodes and all nodes that are downstream from the selected nodes are run.</p>
                */
            resumeWorkflowRun(args: ResumeWorkflowRunCommandInput, options?: __HttpHandlerOptions): Promise<ResumeWorkflowRunCommandOutput>;
            resumeWorkflowRun(args: ResumeWorkflowRunCommandInput, cb: (err: any, data?: ResumeWorkflowRunCommandOutput) => void): void;
            resumeWorkflowRun(args: ResumeWorkflowRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResumeWorkflowRunCommandOutput) => void): void;
            /**
                * <p>Executes the statement.</p>
                */
            runStatement(args: RunStatementCommandInput, options?: __HttpHandlerOptions): Promise<RunStatementCommandOutput>;
            runStatement(args: RunStatementCommandInput, cb: (err: any, data?: RunStatementCommandOutput) => void): void;
            runStatement(args: RunStatementCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RunStatementCommandOutput) => void): void;
            /**
                * <p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p>
                *          <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p>
                */
            searchTables(args: SearchTablesCommandInput, options?: __HttpHandlerOptions): Promise<SearchTablesCommandOutput>;
            searchTables(args: SearchTablesCommandInput, cb: (err: any, data?: SearchTablesCommandOutput) => void): void;
            searchTables(args: SearchTablesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchTablesCommandOutput) => void): void;
            /**
                * <p>Starts a new run of the specified blueprint.</p>
                */
            startBlueprintRun(args: StartBlueprintRunCommandInput, options?: __HttpHandlerOptions): Promise<StartBlueprintRunCommandOutput>;
            startBlueprintRun(args: StartBlueprintRunCommandInput, cb: (err: any, data?: StartBlueprintRunCommandOutput) => void): void;
            startBlueprintRun(args: StartBlueprintRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartBlueprintRunCommandOutput) => void): void;
            /**
                * <p>Starts a crawl using the specified crawler, regardless
                *       of what is scheduled. If the crawler is already running, returns a
                *       <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException">CrawlerRunningException</a>.</p>
                */
            startCrawler(args: StartCrawlerCommandInput, options?: __HttpHandlerOptions): Promise<StartCrawlerCommandOutput>;
            startCrawler(args: StartCrawlerCommandInput, cb: (err: any, data?: StartCrawlerCommandOutput) => void): void;
            startCrawler(args: StartCrawlerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartCrawlerCommandOutput) => void): void;
            /**
                * <p>Changes the schedule state of the specified crawler to
                *       <code>SCHEDULED</code>, unless the crawler is already running or the
                *       schedule state is already <code>SCHEDULED</code>.</p>
                */
            startCrawlerSchedule(args: StartCrawlerScheduleCommandInput, options?: __HttpHandlerOptions): Promise<StartCrawlerScheduleCommandOutput>;
            startCrawlerSchedule(args: StartCrawlerScheduleCommandInput, cb: (err: any, data?: StartCrawlerScheduleCommandOutput) => void): void;
            startCrawlerSchedule(args: StartCrawlerScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartCrawlerScheduleCommandOutput) => void): void;
            /**
                * <p>Begins an asynchronous task to export all labeled data for a particular transform. This
                *       task is the only label-related API call that is not part of the typical active learning
                *       workflow. You typically use <code>StartExportLabelsTaskRun</code> when you want to work with
                *       all of your existing labels at the same time, such as when you want to remove or change labels
                *       that were previously submitted as truth. This API operation accepts the
                *         <code>TransformId</code> whose labels you want to export and an Amazon Simple Storage
                *       Service (Amazon S3) path to export the labels to. The operation returns a
                *         <code>TaskRunId</code>. You can check on the status of your task run by calling the
                *         <code>GetMLTaskRun</code> API.</p>
                */
            startExportLabelsTaskRun(args: StartExportLabelsTaskRunCommandInput, options?: __HttpHandlerOptions): Promise<StartExportLabelsTaskRunCommandOutput>;
            startExportLabelsTaskRun(args: StartExportLabelsTaskRunCommandInput, cb: (err: any, data?: StartExportLabelsTaskRunCommandOutput) => void): void;
            startExportLabelsTaskRun(args: StartExportLabelsTaskRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartExportLabelsTaskRunCommandOutput) => void): void;
            /**
                * <p>Enables you to provide additional labels (examples of truth) to be used to teach the
                *       machine learning transform and improve its quality. This API operation is generally used as
                *       part of the active learning workflow that starts with the
                *         <code>StartMLLabelingSetGenerationTaskRun</code> call and that ultimately results in
                *       improving the quality of your machine learning transform. </p>
                *
                *          <p>After the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue machine learning
                *       will have generated a series of questions for humans to answer. (Answering these questions is
                *       often called 'labeling' in the machine learning workflows). In the case of the
                *         <code>FindMatches</code> transform, these questions are of the form, “What is the correct
                *       way to group these rows together into groups composed entirely of matching records?” After the
                *       labeling process is finished, users upload their answers/labels with a call to
                *         <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes,
                *       all future runs of the machine learning transform use the new and improved labels and perform
                *       a higher-quality transformation.</p>
                *
                *          <p>By default, <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from and
                *       combines all labels that you upload unless you set <code>Replace</code> to true. If you set
                *         <code>Replace</code> to true, <code>StartImportLabelsTaskRun</code> deletes and forgets all
                *       previously uploaded labels and learns only from the exact set that you upload. Replacing
                *       labels can be helpful if you realize that you previously uploaded incorrect labels, and you
                *       believe that they are having a negative effect on your transform quality.</p>
                *
                *          <p>You can check on the status of your task run by calling the <code>GetMLTaskRun</code>
                *       operation. </p>
                */
            startImportLabelsTaskRun(args: StartImportLabelsTaskRunCommandInput, options?: __HttpHandlerOptions): Promise<StartImportLabelsTaskRunCommandOutput>;
            startImportLabelsTaskRun(args: StartImportLabelsTaskRunCommandInput, cb: (err: any, data?: StartImportLabelsTaskRunCommandOutput) => void): void;
            startImportLabelsTaskRun(args: StartImportLabelsTaskRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartImportLabelsTaskRunCommandOutput) => void): void;
            /**
                * <p>Starts a job run using a job definition.</p>
                */
            startJobRun(args: StartJobRunCommandInput, options?: __HttpHandlerOptions): Promise<StartJobRunCommandOutput>;
            startJobRun(args: StartJobRunCommandInput, cb: (err: any, data?: StartJobRunCommandOutput) => void): void;
            startJobRun(args: StartJobRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartJobRunCommandOutput) => void): void;
            /**
                * <p>Starts a task to estimate the quality of the transform. </p>
                *
                * 	        <p>When you provide label sets as examples of truth, Glue machine learning uses some of
                *       those examples to learn from them. The rest of the labels are used as a test to estimate
                *       quality.</p>
                *
                * 	        <p>Returns a unique identifier for the run. You can call <code>GetMLTaskRun</code> to get more
                *       information about the stats of the <code>EvaluationTaskRun</code>.</p>
                */
            startMLEvaluationTaskRun(args: StartMLEvaluationTaskRunCommandInput, options?: __HttpHandlerOptions): Promise<StartMLEvaluationTaskRunCommandOutput>;
            startMLEvaluationTaskRun(args: StartMLEvaluationTaskRunCommandInput, cb: (err: any, data?: StartMLEvaluationTaskRunCommandOutput) => void): void;
            startMLEvaluationTaskRun(args: StartMLEvaluationTaskRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMLEvaluationTaskRunCommandOutput) => void): void;
            /**
                * <p>Starts the active learning workflow for your machine learning transform to improve the
                *       transform's quality by generating label sets and adding labels.</p>
                *
                * 	        <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue will have
                *       generated a "labeling set" or a set of questions for humans to answer.</p>
                *
                *          <p>In the case of the <code>FindMatches</code> transform, these questions are of the form,
                *       “What is the correct way to group these rows together into groups composed entirely of
                *       matching records?” </p>
                *
                *          <p>After the labeling process is finished, you can upload your labels with a call to
                *         <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes,
                *       all future runs of the machine learning transform will use the new and improved labels and
                *       perform a higher-quality transformation.</p>
                */
            startMLLabelingSetGenerationTaskRun(args: StartMLLabelingSetGenerationTaskRunCommandInput, options?: __HttpHandlerOptions): Promise<StartMLLabelingSetGenerationTaskRunCommandOutput>;
            startMLLabelingSetGenerationTaskRun(args: StartMLLabelingSetGenerationTaskRunCommandInput, cb: (err: any, data?: StartMLLabelingSetGenerationTaskRunCommandOutput) => void): void;
            startMLLabelingSetGenerationTaskRun(args: StartMLLabelingSetGenerationTaskRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMLLabelingSetGenerationTaskRunCommandOutput) => void): void;
            /**
                * <p>Starts an existing trigger. See <a href="https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html">Triggering
                *       Jobs</a> for information about how different types of trigger are
                *       started.</p>
                */
            startTrigger(args: StartTriggerCommandInput, options?: __HttpHandlerOptions): Promise<StartTriggerCommandOutput>;
            startTrigger(args: StartTriggerCommandInput, cb: (err: any, data?: StartTriggerCommandOutput) => void): void;
            startTrigger(args: StartTriggerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartTriggerCommandOutput) => void): void;
            /**
                * <p>Starts a new run of the specified workflow.</p>
                */
            startWorkflowRun(args: StartWorkflowRunCommandInput, options?: __HttpHandlerOptions): Promise<StartWorkflowRunCommandOutput>;
            startWorkflowRun(args: StartWorkflowRunCommandInput, cb: (err: any, data?: StartWorkflowRunCommandOutput) => void): void;
            startWorkflowRun(args: StartWorkflowRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartWorkflowRunCommandOutput) => void): void;
            /**
                * <p>If the specified crawler is running, stops the crawl.</p>
                */
            stopCrawler(args: StopCrawlerCommandInput, options?: __HttpHandlerOptions): Promise<StopCrawlerCommandOutput>;
            stopCrawler(args: StopCrawlerCommandInput, cb: (err: any, data?: StopCrawlerCommandOutput) => void): void;
            stopCrawler(args: StopCrawlerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopCrawlerCommandOutput) => void): void;
            /**
                * <p>Sets the schedule state of the specified crawler to
                *       <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is
                *       already running.</p>
                */
            stopCrawlerSchedule(args: StopCrawlerScheduleCommandInput, options?: __HttpHandlerOptions): Promise<StopCrawlerScheduleCommandOutput>;
            stopCrawlerSchedule(args: StopCrawlerScheduleCommandInput, cb: (err: any, data?: StopCrawlerScheduleCommandOutput) => void): void;
            stopCrawlerSchedule(args: StopCrawlerScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopCrawlerScheduleCommandOutput) => void): void;
            /**
                * <p>Stops the session.</p>
                */
            stopSession(args: StopSessionCommandInput, options?: __HttpHandlerOptions): Promise<StopSessionCommandOutput>;
            stopSession(args: StopSessionCommandInput, cb: (err: any, data?: StopSessionCommandOutput) => void): void;
            stopSession(args: StopSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopSessionCommandOutput) => void): void;
            /**
                * <p>Stops a specified trigger.</p>
                */
            stopTrigger(args: StopTriggerCommandInput, options?: __HttpHandlerOptions): Promise<StopTriggerCommandOutput>;
            stopTrigger(args: StopTriggerCommandInput, cb: (err: any, data?: StopTriggerCommandOutput) => void): void;
            stopTrigger(args: StopTriggerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopTriggerCommandOutput) => void): void;
            /**
                * <p>Stops the execution of the specified workflow run.</p>
                */
            stopWorkflowRun(args: StopWorkflowRunCommandInput, options?: __HttpHandlerOptions): Promise<StopWorkflowRunCommandOutput>;
            stopWorkflowRun(args: StopWorkflowRunCommandInput, cb: (err: any, data?: StopWorkflowRunCommandOutput) => void): void;
            stopWorkflowRun(args: StopWorkflowRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopWorkflowRunCommandOutput) => void): void;
            /**
                * <p>Adds tags to a resource. A tag is a label you can assign to an Amazon Web Services resource.
                *       In Glue, you can tag only certain resources. For information about what
                *       resources you can tag, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates a registered blueprint.</p>
                */
            updateBlueprint(args: UpdateBlueprintCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBlueprintCommandOutput>;
            updateBlueprint(args: UpdateBlueprintCommandInput, cb: (err: any, data?: UpdateBlueprintCommandOutput) => void): void;
            updateBlueprint(args: UpdateBlueprintCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBlueprintCommandOutput) => void): void;
            /**
                * <p>Modifies an existing classifier (a <code>GrokClassifier</code>,
                *       an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on
                *       which field is present).</p>
                */
            updateClassifier(args: UpdateClassifierCommandInput, options?: __HttpHandlerOptions): Promise<UpdateClassifierCommandOutput>;
            updateClassifier(args: UpdateClassifierCommandInput, cb: (err: any, data?: UpdateClassifierCommandOutput) => void): void;
            updateClassifier(args: UpdateClassifierCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateClassifierCommandOutput) => void): void;
            /**
                * <p>Creates or updates partition statistics of columns.</p>
                *
                *          <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdatePartition</code>.</p>
                */
            updateColumnStatisticsForPartition(args: UpdateColumnStatisticsForPartitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateColumnStatisticsForPartitionCommandOutput>;
            updateColumnStatisticsForPartition(args: UpdateColumnStatisticsForPartitionCommandInput, cb: (err: any, data?: UpdateColumnStatisticsForPartitionCommandOutput) => void): void;
            updateColumnStatisticsForPartition(args: UpdateColumnStatisticsForPartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateColumnStatisticsForPartitionCommandOutput) => void): void;
            /**
                * <p>Creates or updates table statistics of columns.</p>
                *
                * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdateTable</code>.</p>
                */
            updateColumnStatisticsForTable(args: UpdateColumnStatisticsForTableCommandInput, options?: __HttpHandlerOptions): Promise<UpdateColumnStatisticsForTableCommandOutput>;
            updateColumnStatisticsForTable(args: UpdateColumnStatisticsForTableCommandInput, cb: (err: any, data?: UpdateColumnStatisticsForTableCommandOutput) => void): void;
            updateColumnStatisticsForTable(args: UpdateColumnStatisticsForTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateColumnStatisticsForTableCommandOutput) => void): void;
            /**
                * <p>Updates a connection definition in the Data Catalog.</p>
                */
            updateConnection(args: UpdateConnectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectionCommandOutput>;
            updateConnection(args: UpdateConnectionCommandInput, cb: (err: any, data?: UpdateConnectionCommandOutput) => void): void;
            updateConnection(args: UpdateConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectionCommandOutput) => void): void;
            /**
                * <p>Updates a crawler. If a crawler is
                *       running, you must stop it using <code>StopCrawler</code> before updating
                *       it.</p>
                */
            updateCrawler(args: UpdateCrawlerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCrawlerCommandOutput>;
            updateCrawler(args: UpdateCrawlerCommandInput, cb: (err: any, data?: UpdateCrawlerCommandOutput) => void): void;
            updateCrawler(args: UpdateCrawlerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCrawlerCommandOutput) => void): void;
            /**
                * <p>Updates the schedule of a crawler using a <code>cron</code> expression. </p>
                */
            updateCrawlerSchedule(args: UpdateCrawlerScheduleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCrawlerScheduleCommandOutput>;
            updateCrawlerSchedule(args: UpdateCrawlerScheduleCommandInput, cb: (err: any, data?: UpdateCrawlerScheduleCommandOutput) => void): void;
            updateCrawlerSchedule(args: UpdateCrawlerScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCrawlerScheduleCommandOutput) => void): void;
            /**
                * <p>Updates an existing database definition in a Data Catalog.</p>
                */
            updateDatabase(args: UpdateDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDatabaseCommandOutput>;
            updateDatabase(args: UpdateDatabaseCommandInput, cb: (err: any, data?: UpdateDatabaseCommandOutput) => void): void;
            updateDatabase(args: UpdateDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDatabaseCommandOutput) => void): void;
            /**
                * <p>Updates a specified development endpoint.</p>
                */
            updateDevEndpoint(args: UpdateDevEndpointCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDevEndpointCommandOutput>;
            updateDevEndpoint(args: UpdateDevEndpointCommandInput, cb: (err: any, data?: UpdateDevEndpointCommandOutput) => void): void;
            updateDevEndpoint(args: UpdateDevEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDevEndpointCommandOutput) => void): void;
            /**
                * <p>Updates an existing job definition. The previous job definition is completely overwritten by this information.</p>
                */
            updateJob(args: UpdateJobCommandInput, options?: __HttpHandlerOptions): Promise<UpdateJobCommandOutput>;
            updateJob(args: UpdateJobCommandInput, cb: (err: any, data?: UpdateJobCommandOutput) => void): void;
            updateJob(args: UpdateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateJobCommandOutput) => void): void;
            /**
                * <p>Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.</p>
                *
                *          <p>After calling this operation, you can call the <code>StartMLEvaluationTaskRun</code>
                *       operation to assess how well your new parameters achieved your goals (such as improving the
                *       quality of your machine learning transform, or making it more cost-effective).</p>
                */
            updateMLTransform(args: UpdateMLTransformCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMLTransformCommandOutput>;
            updateMLTransform(args: UpdateMLTransformCommandInput, cb: (err: any, data?: UpdateMLTransformCommandOutput) => void): void;
            updateMLTransform(args: UpdateMLTransformCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMLTransformCommandOutput) => void): void;
            /**
                * <p>Updates a partition.</p>
                */
            updatePartition(args: UpdatePartitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePartitionCommandOutput>;
            updatePartition(args: UpdatePartitionCommandInput, cb: (err: any, data?: UpdatePartitionCommandOutput) => void): void;
            updatePartition(args: UpdatePartitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePartitionCommandOutput) => void): void;
            /**
                * <p>Updates an existing registry which is used to hold a collection of schemas. The updated properties relate to the registry, and do not modify any of the schemas within the registry. </p>
                */
            updateRegistry(args: UpdateRegistryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRegistryCommandOutput>;
            updateRegistry(args: UpdateRegistryCommandInput, cb: (err: any, data?: UpdateRegistryCommandOutput) => void): void;
            updateRegistry(args: UpdateRegistryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRegistryCommandOutput) => void): void;
            /**
                * <p>Updates the description, compatibility setting, or version checkpoint for a schema set.</p>
                * 	        <p>For updating the compatibility setting, the call will not validate compatibility for the entire set of schema versions with the new compatibility setting. If the value for <code>Compatibility</code> is provided, the <code>VersionNumber</code> (a checkpoint) is also required. The API will validate the checkpoint version number for consistency.</p>
                *          <p>If the value for the <code>VersionNumber</code> (checkpoint) is provided, <code>Compatibility</code> is optional and this can be used to set/reset a checkpoint for the schema.</p>
                * 	        <p>This update will happen only if the schema is in the AVAILABLE state.</p>
                */
            updateSchema(args: UpdateSchemaCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSchemaCommandOutput>;
            updateSchema(args: UpdateSchemaCommandInput, cb: (err: any, data?: UpdateSchemaCommandOutput) => void): void;
            updateSchema(args: UpdateSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSchemaCommandOutput) => void): void;
            /**
                * <p>Updates a metadata table in the Data Catalog.</p>
                */
            updateTable(args: UpdateTableCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTableCommandOutput>;
            updateTable(args: UpdateTableCommandInput, cb: (err: any, data?: UpdateTableCommandOutput) => void): void;
            updateTable(args: UpdateTableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTableCommandOutput) => void): void;
            /**
                * <p>Updates a trigger definition.</p>
                */
            updateTrigger(args: UpdateTriggerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTriggerCommandOutput>;
            updateTrigger(args: UpdateTriggerCommandInput, cb: (err: any, data?: UpdateTriggerCommandOutput) => void): void;
            updateTrigger(args: UpdateTriggerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTriggerCommandOutput) => void): void;
            /**
                * <p>Updates an existing function definition in the Data Catalog.</p>
                */
            updateUserDefinedFunction(args: UpdateUserDefinedFunctionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserDefinedFunctionCommandOutput>;
            updateUserDefinedFunction(args: UpdateUserDefinedFunctionCommandInput, cb: (err: any, data?: UpdateUserDefinedFunctionCommandOutput) => void): void;
            updateUserDefinedFunction(args: UpdateUserDefinedFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserDefinedFunctionCommandOutput) => void): void;
            /**
                * <p>Updates an existing workflow.</p>
                */
            updateWorkflow(args: UpdateWorkflowCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkflowCommandOutput>;
            updateWorkflow(args: UpdateWorkflowCommandInput, cb: (err: any, data?: UpdateWorkflowCommandOutput) => void): void;
            updateWorkflow(args: UpdateWorkflowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkflowCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchCreatePartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchCreatePartitionRequest, BatchCreatePartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchCreatePartitionCommandInput extends BatchCreatePartitionRequest {
    }
    export interface BatchCreatePartitionCommandOutput extends BatchCreatePartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates one or more partitions in a batch operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchCreatePartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchCreatePartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchCreatePartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchCreatePartitionCommandInput} for command's `input` shape.
        * @see {@link BatchCreatePartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchCreatePartitionCommand extends $Command<BatchCreatePartitionCommandInput, BatchCreatePartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchCreatePartitionCommandInput;
            constructor(input: BatchCreatePartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchCreatePartitionCommandInput, BatchCreatePartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchDeleteConnectionRequest, BatchDeleteConnectionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchDeleteConnectionCommandInput extends BatchDeleteConnectionRequest {
    }
    export interface BatchDeleteConnectionCommandOutput extends BatchDeleteConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a list of connection definitions from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchDeleteConnectionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchDeleteConnectionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchDeleteConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteConnectionCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteConnectionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchDeleteConnectionCommand extends $Command<BatchDeleteConnectionCommandInput, BatchDeleteConnectionCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchDeleteConnectionCommandInput;
            constructor(input: BatchDeleteConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteConnectionCommandInput, BatchDeleteConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeletePartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchDeletePartitionRequest, BatchDeletePartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchDeletePartitionCommandInput extends BatchDeletePartitionRequest {
    }
    export interface BatchDeletePartitionCommandOutput extends BatchDeletePartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes one or more partitions in a batch operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchDeletePartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchDeletePartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchDeletePartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeletePartitionCommandInput} for command's `input` shape.
        * @see {@link BatchDeletePartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchDeletePartitionCommand extends $Command<BatchDeletePartitionCommandInput, BatchDeletePartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchDeletePartitionCommandInput;
            constructor(input: BatchDeletePartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeletePartitionCommandInput, BatchDeletePartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchDeleteTableRequest, BatchDeleteTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchDeleteTableCommandInput extends BatchDeleteTableRequest {
    }
    export interface BatchDeleteTableCommandOutput extends BatchDeleteTableResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes multiple tables at once.</p>
        *          <note>
        *             <p>After completing this operation, you no longer have access to the table versions and
        *         partitions that belong to the deleted table. Glue deletes these "orphaned" resources
        *         asynchronously in a timely manner, at the discretion of the service.</p>
        *             <p>To ensure the immediate deletion of all related resources, before calling
        *           <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or
        *           <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or
        *           <code>BatchDeletePartition</code>, to delete any resources that belong to the
        *         table.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchDeleteTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchDeleteTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchDeleteTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteTableCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchDeleteTableCommand extends $Command<BatchDeleteTableCommandInput, BatchDeleteTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchDeleteTableCommandInput;
            constructor(input: BatchDeleteTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteTableCommandInput, BatchDeleteTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteTableVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchDeleteTableVersionRequest, BatchDeleteTableVersionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchDeleteTableVersionCommandInput extends BatchDeleteTableVersionRequest {
    }
    export interface BatchDeleteTableVersionCommandOutput extends BatchDeleteTableVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified batch of versions of a table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchDeleteTableVersionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchDeleteTableVersionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchDeleteTableVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteTableVersionCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteTableVersionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchDeleteTableVersionCommand extends $Command<BatchDeleteTableVersionCommandInput, BatchDeleteTableVersionCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchDeleteTableVersionCommandInput;
            constructor(input: BatchDeleteTableVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteTableVersionCommandInput, BatchDeleteTableVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetBlueprintsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetBlueprintsRequest, BatchGetBlueprintsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchGetBlueprintsCommandInput extends BatchGetBlueprintsRequest {
    }
    export interface BatchGetBlueprintsCommandOutput extends BatchGetBlueprintsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a list of blueprints.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetBlueprintsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetBlueprintsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetBlueprintsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetBlueprintsCommandInput} for command's `input` shape.
        * @see {@link BatchGetBlueprintsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetBlueprintsCommand extends $Command<BatchGetBlueprintsCommandInput, BatchGetBlueprintsCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetBlueprintsCommandInput;
            constructor(input: BatchGetBlueprintsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetBlueprintsCommandInput, BatchGetBlueprintsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetCrawlersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetCrawlersRequest, BatchGetCrawlersResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchGetCrawlersCommandInput extends BatchGetCrawlersRequest {
    }
    export interface BatchGetCrawlersCommandOutput extends BatchGetCrawlersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of resource metadata for a given list of crawler names. After calling the <code>ListCrawlers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetCrawlersCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetCrawlersCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetCrawlersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetCrawlersCommandInput} for command's `input` shape.
        * @see {@link BatchGetCrawlersCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetCrawlersCommand extends $Command<BatchGetCrawlersCommandInput, BatchGetCrawlersCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetCrawlersCommandInput;
            constructor(input: BatchGetCrawlersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetCrawlersCommandInput, BatchGetCrawlersCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetCustomEntityTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetCustomEntityTypesRequest, BatchGetCustomEntityTypesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchGetCustomEntityTypesCommandInput extends BatchGetCustomEntityTypesRequest {
    }
    export interface BatchGetCustomEntityTypesCommandOutput extends BatchGetCustomEntityTypesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details for the custom patterns specified by a list of names.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetCustomEntityTypesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetCustomEntityTypesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetCustomEntityTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetCustomEntityTypesCommandInput} for command's `input` shape.
        * @see {@link BatchGetCustomEntityTypesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetCustomEntityTypesCommand extends $Command<BatchGetCustomEntityTypesCommandInput, BatchGetCustomEntityTypesCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetCustomEntityTypesCommandInput;
            constructor(input: BatchGetCustomEntityTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetCustomEntityTypesCommandInput, BatchGetCustomEntityTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetDevEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetDevEndpointsRequest, BatchGetDevEndpointsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchGetDevEndpointsCommandInput extends BatchGetDevEndpointsRequest {
    }
    export interface BatchGetDevEndpointsCommandOutput extends BatchGetDevEndpointsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of resource metadata for a given list of development endpoint names. After
        *       calling the <code>ListDevEndpoints</code> operation, you can call this operation to access the
        *       data to which you have been granted permissions. This operation supports all IAM permissions,
        *       including permission conditions that uses tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetDevEndpointsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetDevEndpointsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetDevEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetDevEndpointsCommandInput} for command's `input` shape.
        * @see {@link BatchGetDevEndpointsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetDevEndpointsCommand extends $Command<BatchGetDevEndpointsCommandInput, BatchGetDevEndpointsCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetDevEndpointsCommandInput;
            constructor(input: BatchGetDevEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetDevEndpointsCommandInput, BatchGetDevEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetJobsRequest } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    import { BatchGetJobsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface BatchGetJobsCommandInput extends BatchGetJobsRequest {
    }
    export interface BatchGetJobsCommandOutput extends BatchGetJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of resource metadata for a given list of job names. After calling the <code>ListJobs</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.
        * </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetJobsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetJobsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetJobsCommandInput} for command's `input` shape.
        * @see {@link BatchGetJobsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetJobsCommand extends $Command<BatchGetJobsCommandInput, BatchGetJobsCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetJobsCommandInput;
            constructor(input: BatchGetJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetJobsCommandInput, BatchGetJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetPartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetPartitionRequest, BatchGetPartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchGetPartitionCommandInput extends BatchGetPartitionRequest {
    }
    export interface BatchGetPartitionCommandOutput extends BatchGetPartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves partitions in a batch request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetPartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetPartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetPartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetPartitionCommandInput} for command's `input` shape.
        * @see {@link BatchGetPartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetPartitionCommand extends $Command<BatchGetPartitionCommandInput, BatchGetPartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetPartitionCommandInput;
            constructor(input: BatchGetPartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetPartitionCommandInput, BatchGetPartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetTriggersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetTriggersRequest, BatchGetTriggersResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchGetTriggersCommandInput extends BatchGetTriggersRequest {
    }
    export interface BatchGetTriggersCommandOutput extends BatchGetTriggersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of resource metadata for a given list of trigger names. After calling the <code>ListTriggers</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetTriggersCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetTriggersCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetTriggersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetTriggersCommandInput} for command's `input` shape.
        * @see {@link BatchGetTriggersCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetTriggersCommand extends $Command<BatchGetTriggersCommandInput, BatchGetTriggersCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetTriggersCommandInput;
            constructor(input: BatchGetTriggersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetTriggersCommandInput, BatchGetTriggersCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetWorkflowsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchGetWorkflowsRequest, BatchGetWorkflowsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchGetWorkflowsCommandInput extends BatchGetWorkflowsRequest {
    }
    export interface BatchGetWorkflowsCommandOutput extends BatchGetWorkflowsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of resource metadata for a given list of workflow names. After calling the <code>ListWorkflows</code> operation, you can call this operation to access the data to which you have been granted permissions. This operation supports all IAM permissions, including permission conditions that uses tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchGetWorkflowsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchGetWorkflowsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchGetWorkflowsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetWorkflowsCommandInput} for command's `input` shape.
        * @see {@link BatchGetWorkflowsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchGetWorkflowsCommand extends $Command<BatchGetWorkflowsCommandInput, BatchGetWorkflowsCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchGetWorkflowsCommandInput;
            constructor(input: BatchGetWorkflowsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetWorkflowsCommandInput, BatchGetWorkflowsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchStopJobRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchStopJobRunRequest, BatchStopJobRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchStopJobRunCommandInput extends BatchStopJobRunRequest {
    }
    export interface BatchStopJobRunCommandOutput extends BatchStopJobRunResponse, __MetadataBearer {
    }
    /**
        * <p>Stops one or more job runs for a specified job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchStopJobRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchStopJobRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchStopJobRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchStopJobRunCommandInput} for command's `input` shape.
        * @see {@link BatchStopJobRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchStopJobRunCommand extends $Command<BatchStopJobRunCommandInput, BatchStopJobRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchStopJobRunCommandInput;
            constructor(input: BatchStopJobRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchStopJobRunCommandInput, BatchStopJobRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchUpdatePartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { BatchUpdatePartitionRequest, BatchUpdatePartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface BatchUpdatePartitionCommandInput extends BatchUpdatePartitionRequest {
    }
    export interface BatchUpdatePartitionCommandOutput extends BatchUpdatePartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates one or more partitions in a batch operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, BatchUpdatePartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, BatchUpdatePartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new BatchUpdatePartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchUpdatePartitionCommandInput} for command's `input` shape.
        * @see {@link BatchUpdatePartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class BatchUpdatePartitionCommand extends $Command<BatchUpdatePartitionCommandInput, BatchUpdatePartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: BatchUpdatePartitionCommandInput;
            constructor(input: BatchUpdatePartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchUpdatePartitionCommandInput, BatchUpdatePartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CancelMLTaskRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CancelMLTaskRunRequest, CancelMLTaskRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CancelMLTaskRunCommandInput extends CancelMLTaskRunRequest {
    }
    export interface CancelMLTaskRunCommandOutput extends CancelMLTaskRunResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels (stops) a task run. Machine learning task runs are asynchronous tasks that Glue runs on your behalf as part of various machine learning workflows. You can cancel a
        *       machine learning task run at any time by calling <code>CancelMLTaskRun</code> with a task
        *       run's parent transform's <code>TransformID</code> and the task run's <code>TaskRunId</code>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CancelMLTaskRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CancelMLTaskRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CancelMLTaskRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelMLTaskRunCommandInput} for command's `input` shape.
        * @see {@link CancelMLTaskRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CancelMLTaskRunCommand extends $Command<CancelMLTaskRunCommandInput, CancelMLTaskRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: CancelMLTaskRunCommandInput;
            constructor(input: CancelMLTaskRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelMLTaskRunCommandInput, CancelMLTaskRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CancelStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CancelStatementRequest, CancelStatementResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CancelStatementCommandInput extends CancelStatementRequest {
    }
    export interface CancelStatementCommandOutput extends CancelStatementResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the statement.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CancelStatementCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CancelStatementCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CancelStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelStatementCommandInput} for command's `input` shape.
        * @see {@link CancelStatementCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CancelStatementCommand extends $Command<CancelStatementCommandInput, CancelStatementCommandOutput, GlueClientResolvedConfig> {
            readonly input: CancelStatementCommandInput;
            constructor(input: CancelStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelStatementCommandInput, CancelStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CheckSchemaVersionValidityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CheckSchemaVersionValidityInput, CheckSchemaVersionValidityResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CheckSchemaVersionValidityCommandInput extends CheckSchemaVersionValidityInput {
    }
    export interface CheckSchemaVersionValidityCommandOutput extends CheckSchemaVersionValidityResponse, __MetadataBearer {
    }
    /**
        * <p>Validates the supplied schema. This call has no side effects, it simply validates using the supplied schema using <code>DataFormat</code> as the format. Since it does not take a schema set name, no compatibility checks are performed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CheckSchemaVersionValidityCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CheckSchemaVersionValidityCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CheckSchemaVersionValidityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CheckSchemaVersionValidityCommandInput} for command's `input` shape.
        * @see {@link CheckSchemaVersionValidityCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CheckSchemaVersionValidityCommand extends $Command<CheckSchemaVersionValidityCommandInput, CheckSchemaVersionValidityCommandOutput, GlueClientResolvedConfig> {
            readonly input: CheckSchemaVersionValidityCommandInput;
            constructor(input: CheckSchemaVersionValidityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CheckSchemaVersionValidityCommandInput, CheckSchemaVersionValidityCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateBlueprintCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateBlueprintRequest, CreateBlueprintResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateBlueprintCommandInput extends CreateBlueprintRequest {
    }
    export interface CreateBlueprintCommandOutput extends CreateBlueprintResponse, __MetadataBearer {
    }
    /**
        * <p>Registers a blueprint with Glue.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateBlueprintCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateBlueprintCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateBlueprintCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBlueprintCommandInput} for command's `input` shape.
        * @see {@link CreateBlueprintCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateBlueprintCommand extends $Command<CreateBlueprintCommandInput, CreateBlueprintCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateBlueprintCommandInput;
            constructor(input: CreateBlueprintCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBlueprintCommandInput, CreateBlueprintCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateClassifierRequest, CreateClassifierResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateClassifierCommandInput extends CreateClassifierRequest {
    }
    export interface CreateClassifierCommandOutput extends CreateClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a classifier in the user's account. This can be a <code>GrokClassifier</code>, an
        *         <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>,
        *       depending on which field of the request is present.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateClassifierCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateClassifierCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateClassifierCommandInput} for command's `input` shape.
        * @see {@link CreateClassifierCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateClassifierCommand extends $Command<CreateClassifierCommandInput, CreateClassifierCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateClassifierCommandInput;
            constructor(input: CreateClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateClassifierCommandInput, CreateClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateConnectionRequest, CreateConnectionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateConnectionCommandInput extends CreateConnectionRequest {
    }
    export interface CreateConnectionCommandOutput extends CreateConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a connection definition in the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateConnectionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateConnectionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectionCommandInput} for command's `input` shape.
        * @see {@link CreateConnectionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateConnectionCommand extends $Command<CreateConnectionCommandInput, CreateConnectionCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateConnectionCommandInput;
            constructor(input: CreateConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectionCommandInput, CreateConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateCrawlerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateCrawlerRequest, CreateCrawlerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateCrawlerCommandInput extends CreateCrawlerRequest {
    }
    export interface CreateCrawlerCommandOutput extends CreateCrawlerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new crawler with specified targets, role, configuration, and optional schedule.
        *       At least one crawl target must be specified, in the <code>s3Targets</code> field, the
        *         <code>jdbcTargets</code> field, or the <code>DynamoDBTargets</code> field.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateCrawlerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateCrawlerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateCrawlerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCrawlerCommandInput} for command's `input` shape.
        * @see {@link CreateCrawlerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateCrawlerCommand extends $Command<CreateCrawlerCommandInput, CreateCrawlerCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateCrawlerCommandInput;
            constructor(input: CreateCrawlerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCrawlerCommandInput, CreateCrawlerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateCustomEntityTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateCustomEntityTypeRequest, CreateCustomEntityTypeResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateCustomEntityTypeCommandInput extends CreateCustomEntityTypeRequest {
    }
    export interface CreateCustomEntityTypeCommandOutput extends CreateCustomEntityTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a custom pattern that is used to detect sensitive data across the columns and rows of your structured data.</p>
        *
        * 	        <p>Each custom pattern you create specifies a regular expression and an optional list of context words. If no context words are passed only a regular expression is checked.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateCustomEntityTypeCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateCustomEntityTypeCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateCustomEntityTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCustomEntityTypeCommandInput} for command's `input` shape.
        * @see {@link CreateCustomEntityTypeCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateCustomEntityTypeCommand extends $Command<CreateCustomEntityTypeCommandInput, CreateCustomEntityTypeCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateCustomEntityTypeCommandInput;
            constructor(input: CreateCustomEntityTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCustomEntityTypeCommandInput, CreateCustomEntityTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateDatabaseRequest, CreateDatabaseResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateDatabaseCommandInput extends CreateDatabaseRequest {
    }
    export interface CreateDatabaseCommandOutput extends CreateDatabaseResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new database in a Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateDatabaseCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateDatabaseCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDatabaseCommandInput} for command's `input` shape.
        * @see {@link CreateDatabaseCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateDatabaseCommand extends $Command<CreateDatabaseCommandInput, CreateDatabaseCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateDatabaseCommandInput;
            constructor(input: CreateDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDatabaseCommandInput, CreateDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateDevEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateDevEndpointRequest, CreateDevEndpointResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateDevEndpointCommandInput extends CreateDevEndpointRequest {
    }
    export interface CreateDevEndpointCommandOutput extends CreateDevEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new development endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateDevEndpointCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateDevEndpointCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateDevEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDevEndpointCommandInput} for command's `input` shape.
        * @see {@link CreateDevEndpointCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateDevEndpointCommand extends $Command<CreateDevEndpointCommandInput, CreateDevEndpointCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateDevEndpointCommandInput;
            constructor(input: CreateDevEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDevEndpointCommandInput, CreateDevEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateJobResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    import { CreateJobRequest } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface CreateJobCommandInput extends CreateJobRequest {
    }
    export interface CreateJobCommandOutput extends CreateJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateJobCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateJobCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateJobCommandInput} for command's `input` shape.
        * @see {@link CreateJobCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateJobCommand extends $Command<CreateJobCommandInput, CreateJobCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateJobCommandInput;
            constructor(input: CreateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateJobCommandInput, CreateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateMLTransformCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateMLTransformRequest, CreateMLTransformResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateMLTransformCommandInput extends CreateMLTransformRequest {
    }
    export interface CreateMLTransformCommandOutput extends CreateMLTransformResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Glue machine learning transform. This operation creates the transform and
        *       all the necessary parameters to train it.</p>
        *
        * 	        <p>Call this operation as the first step in the process of using a machine learning transform
        *       (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an
        *       optional <code>Description</code>, in addition to the parameters that you want to use for your
        *       algorithm.</p>
        *
        *          <p>You must also specify certain parameters for the tasks that Glue runs on your
        *       behalf as part of learning from your data and creating a high-quality machine learning
        *       transform. These parameters include <code>Role</code>, and optionally,
        *         <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more
        *       information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html">Jobs</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateMLTransformCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateMLTransformCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateMLTransformCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMLTransformCommandInput} for command's `input` shape.
        * @see {@link CreateMLTransformCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateMLTransformCommand extends $Command<CreateMLTransformCommandInput, CreateMLTransformCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateMLTransformCommandInput;
            constructor(input: CreateMLTransformCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMLTransformCommandInput, CreateMLTransformCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreatePartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreatePartitionRequest, CreatePartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreatePartitionCommandInput extends CreatePartitionRequest {
    }
    export interface CreatePartitionCommandOutput extends CreatePartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new partition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreatePartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreatePartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreatePartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePartitionCommandInput} for command's `input` shape.
        * @see {@link CreatePartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreatePartitionCommand extends $Command<CreatePartitionCommandInput, CreatePartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreatePartitionCommandInput;
            constructor(input: CreatePartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePartitionCommandInput, CreatePartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreatePartitionIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreatePartitionIndexRequest, CreatePartitionIndexResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreatePartitionIndexCommandInput extends CreatePartitionIndexRequest {
    }
    export interface CreatePartitionIndexCommandOutput extends CreatePartitionIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a specified partition index in an existing table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreatePartitionIndexCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreatePartitionIndexCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreatePartitionIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePartitionIndexCommandInput} for command's `input` shape.
        * @see {@link CreatePartitionIndexCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreatePartitionIndexCommand extends $Command<CreatePartitionIndexCommandInput, CreatePartitionIndexCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreatePartitionIndexCommandInput;
            constructor(input: CreatePartitionIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePartitionIndexCommandInput, CreatePartitionIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateRegistryInput, CreateRegistryResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateRegistryCommandInput extends CreateRegistryInput {
    }
    export interface CreateRegistryCommandOutput extends CreateRegistryResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new registry which may be used to hold a collection of schemas.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateRegistryCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateRegistryCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRegistryCommandInput} for command's `input` shape.
        * @see {@link CreateRegistryCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateRegistryCommand extends $Command<CreateRegistryCommandInput, CreateRegistryCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateRegistryCommandInput;
            constructor(input: CreateRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRegistryCommandInput, CreateRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateSchemaInput, CreateSchemaResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateSchemaCommandInput extends CreateSchemaInput {
    }
    export interface CreateSchemaCommandOutput extends CreateSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new schema set and registers the schema definition. Returns an error if the schema set already exists without actually registering the version.</p>
        *          <p>When the schema set is created, a version checkpoint will be set to the first version. Compatibility mode "DISABLED" restricts any additional schema versions from being added after the first schema version. For all other compatibility modes, validation of compatibility settings will be applied only from the second version onwards when the <code>RegisterSchemaVersion</code> API is used.</p>
        *          <p>When this API is called without a <code>RegistryId</code>, this will create an entry for a "default-registry" in the registry database tables, if it is not already present.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateSchemaCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateSchemaCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSchemaCommandInput} for command's `input` shape.
        * @see {@link CreateSchemaCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateSchemaCommand extends $Command<CreateSchemaCommandInput, CreateSchemaCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateSchemaCommandInput;
            constructor(input: CreateSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSchemaCommandInput, CreateSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateScriptCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateScriptRequest, CreateScriptResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateScriptCommandInput extends CreateScriptRequest {
    }
    export interface CreateScriptCommandOutput extends CreateScriptResponse, __MetadataBearer {
    }
    /**
        * <p>Transforms a directed acyclic graph (DAG) into code.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateScriptCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateScriptCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateScriptCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateScriptCommandInput} for command's `input` shape.
        * @see {@link CreateScriptCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateScriptCommand extends $Command<CreateScriptCommandInput, CreateScriptCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateScriptCommandInput;
            constructor(input: CreateScriptCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateScriptCommandInput, CreateScriptCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSecurityConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateSecurityConfigurationRequest, CreateSecurityConfigurationResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateSecurityConfigurationCommandInput extends CreateSecurityConfigurationRequest {
    }
    export interface CreateSecurityConfigurationCommandOutput extends CreateSecurityConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new security configuration. A security configuration is a set of security properties that can be used by Glue. You can use a security configuration to encrypt data at rest. For information about using security configurations in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/encryption-security-configuration.html">Encrypting Data Written by Crawlers, Jobs, and Development Endpoints</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateSecurityConfigurationCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateSecurityConfigurationCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateSecurityConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSecurityConfigurationCommandInput} for command's `input` shape.
        * @see {@link CreateSecurityConfigurationCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateSecurityConfigurationCommand extends $Command<CreateSecurityConfigurationCommandInput, CreateSecurityConfigurationCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateSecurityConfigurationCommandInput;
            constructor(input: CreateSecurityConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSecurityConfigurationCommandInput, CreateSecurityConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateSessionRequest, CreateSessionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateSessionCommandInput extends CreateSessionRequest {
    }
    export interface CreateSessionCommandOutput extends CreateSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateSessionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateSessionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSessionCommandInput} for command's `input` shape.
        * @see {@link CreateSessionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateSessionCommand extends $Command<CreateSessionCommandInput, CreateSessionCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateSessionCommandInput;
            constructor(input: CreateSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSessionCommandInput, CreateSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateTableRequest, CreateTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateTableCommandInput extends CreateTableRequest {
    }
    export interface CreateTableCommandOutput extends CreateTableResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new table definition in the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTableCommandInput} for command's `input` shape.
        * @see {@link CreateTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateTableCommand extends $Command<CreateTableCommandInput, CreateTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateTableCommandInput;
            constructor(input: CreateTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTableCommandInput, CreateTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateTriggerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateTriggerRequest, CreateTriggerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateTriggerCommandInput extends CreateTriggerRequest {
    }
    export interface CreateTriggerCommandOutput extends CreateTriggerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new trigger.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateTriggerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateTriggerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateTriggerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTriggerCommandInput} for command's `input` shape.
        * @see {@link CreateTriggerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateTriggerCommand extends $Command<CreateTriggerCommandInput, CreateTriggerCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateTriggerCommandInput;
            constructor(input: CreateTriggerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTriggerCommandInput, CreateTriggerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateUserDefinedFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateUserDefinedFunctionRequest, CreateUserDefinedFunctionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateUserDefinedFunctionCommandInput extends CreateUserDefinedFunctionRequest {
    }
    export interface CreateUserDefinedFunctionCommandOutput extends CreateUserDefinedFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new function definition in the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateUserDefinedFunctionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateUserDefinedFunctionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateUserDefinedFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserDefinedFunctionCommandInput} for command's `input` shape.
        * @see {@link CreateUserDefinedFunctionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateUserDefinedFunctionCommand extends $Command<CreateUserDefinedFunctionCommandInput, CreateUserDefinedFunctionCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateUserDefinedFunctionCommandInput;
            constructor(input: CreateUserDefinedFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserDefinedFunctionCommandInput, CreateUserDefinedFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateWorkflowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { CreateWorkflowRequest, CreateWorkflowResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface CreateWorkflowCommandInput extends CreateWorkflowRequest {
    }
    export interface CreateWorkflowCommandOutput extends CreateWorkflowResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new workflow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, CreateWorkflowCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, CreateWorkflowCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new CreateWorkflowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkflowCommandInput} for command's `input` shape.
        * @see {@link CreateWorkflowCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class CreateWorkflowCommand extends $Command<CreateWorkflowCommandInput, CreateWorkflowCommandOutput, GlueClientResolvedConfig> {
            readonly input: CreateWorkflowCommandInput;
            constructor(input: CreateWorkflowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkflowCommandInput, CreateWorkflowCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteBlueprintCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteBlueprintRequest, DeleteBlueprintResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface DeleteBlueprintCommandInput extends DeleteBlueprintRequest {
    }
    export interface DeleteBlueprintCommandOutput extends DeleteBlueprintResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing blueprint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteBlueprintCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteBlueprintCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteBlueprintCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBlueprintCommandInput} for command's `input` shape.
        * @see {@link DeleteBlueprintCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteBlueprintCommand extends $Command<DeleteBlueprintCommandInput, DeleteBlueprintCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteBlueprintCommandInput;
            constructor(input: DeleteBlueprintCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBlueprintCommandInput, DeleteBlueprintCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteClassifierRequest } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    import { DeleteClassifierResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteClassifierCommandInput extends DeleteClassifierRequest {
    }
    export interface DeleteClassifierCommandOutput extends DeleteClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a classifier from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteClassifierCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteClassifierCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteClassifierCommandInput} for command's `input` shape.
        * @see {@link DeleteClassifierCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteClassifierCommand extends $Command<DeleteClassifierCommandInput, DeleteClassifierCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteClassifierCommandInput;
            constructor(input: DeleteClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteClassifierCommandInput, DeleteClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteColumnStatisticsForPartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteColumnStatisticsForPartitionRequest, DeleteColumnStatisticsForPartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteColumnStatisticsForPartitionCommandInput extends DeleteColumnStatisticsForPartitionRequest {
    }
    export interface DeleteColumnStatisticsForPartitionCommandOutput extends DeleteColumnStatisticsForPartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Delete the partition column statistics of a column.</p>
        *
        * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeletePartition</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteColumnStatisticsForPartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteColumnStatisticsForPartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteColumnStatisticsForPartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteColumnStatisticsForPartitionCommandInput} for command's `input` shape.
        * @see {@link DeleteColumnStatisticsForPartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteColumnStatisticsForPartitionCommand extends $Command<DeleteColumnStatisticsForPartitionCommandInput, DeleteColumnStatisticsForPartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteColumnStatisticsForPartitionCommandInput;
            constructor(input: DeleteColumnStatisticsForPartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteColumnStatisticsForPartitionCommandInput, DeleteColumnStatisticsForPartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteColumnStatisticsForTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteColumnStatisticsForTableRequest, DeleteColumnStatisticsForTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteColumnStatisticsForTableCommandInput extends DeleteColumnStatisticsForTableRequest {
    }
    export interface DeleteColumnStatisticsForTableCommandOutput extends DeleteColumnStatisticsForTableResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves table statistics of columns.</p>
        *
        * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>DeleteTable</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteColumnStatisticsForTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteColumnStatisticsForTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteColumnStatisticsForTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteColumnStatisticsForTableCommandInput} for command's `input` shape.
        * @see {@link DeleteColumnStatisticsForTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteColumnStatisticsForTableCommand extends $Command<DeleteColumnStatisticsForTableCommandInput, DeleteColumnStatisticsForTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteColumnStatisticsForTableCommandInput;
            constructor(input: DeleteColumnStatisticsForTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteColumnStatisticsForTableCommandInput, DeleteColumnStatisticsForTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteConnectionRequest, DeleteConnectionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteConnectionCommandInput extends DeleteConnectionRequest {
    }
    export interface DeleteConnectionCommandOutput extends DeleteConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a connection from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteConnectionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteConnectionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectionCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteConnectionCommand extends $Command<DeleteConnectionCommandInput, DeleteConnectionCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteConnectionCommandInput;
            constructor(input: DeleteConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectionCommandInput, DeleteConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteCrawlerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteCrawlerRequest, DeleteCrawlerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteCrawlerCommandInput extends DeleteCrawlerRequest {
    }
    export interface DeleteCrawlerCommandOutput extends DeleteCrawlerResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a specified crawler from the Glue Data Catalog, unless the crawler state is
        *         <code>RUNNING</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteCrawlerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteCrawlerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteCrawlerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCrawlerCommandInput} for command's `input` shape.
        * @see {@link DeleteCrawlerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteCrawlerCommand extends $Command<DeleteCrawlerCommandInput, DeleteCrawlerCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteCrawlerCommandInput;
            constructor(input: DeleteCrawlerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCrawlerCommandInput, DeleteCrawlerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteCustomEntityTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteCustomEntityTypeRequest, DeleteCustomEntityTypeResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteCustomEntityTypeCommandInput extends DeleteCustomEntityTypeRequest {
    }
    export interface DeleteCustomEntityTypeCommandOutput extends DeleteCustomEntityTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a custom pattern by specifying its name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteCustomEntityTypeCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteCustomEntityTypeCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteCustomEntityTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCustomEntityTypeCommandInput} for command's `input` shape.
        * @see {@link DeleteCustomEntityTypeCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteCustomEntityTypeCommand extends $Command<DeleteCustomEntityTypeCommandInput, DeleteCustomEntityTypeCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteCustomEntityTypeCommandInput;
            constructor(input: DeleteCustomEntityTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCustomEntityTypeCommandInput, DeleteCustomEntityTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteDatabaseRequest, DeleteDatabaseResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteDatabaseCommandInput extends DeleteDatabaseRequest {
    }
    export interface DeleteDatabaseCommandOutput extends DeleteDatabaseResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a specified database from a Data Catalog.</p>
        *          <note>
        *             <p>After completing this operation, you no longer have access to the tables (and all table
        *         versions and partitions that might belong to the tables) and the user-defined functions in
        *         the deleted database. Glue deletes these "orphaned" resources asynchronously in a timely
        *         manner, at the discretion of the service.</p>
        *             <p>To ensure the immediate deletion of all related resources, before calling
        *           <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or
        *           <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or
        *           <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and
        *           <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that
        *         belong to the database.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteDatabaseCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteDatabaseCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDatabaseCommandInput} for command's `input` shape.
        * @see {@link DeleteDatabaseCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteDatabaseCommand extends $Command<DeleteDatabaseCommandInput, DeleteDatabaseCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteDatabaseCommandInput;
            constructor(input: DeleteDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDatabaseCommandInput, DeleteDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteDevEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteDevEndpointRequest, DeleteDevEndpointResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteDevEndpointCommandInput extends DeleteDevEndpointRequest {
    }
    export interface DeleteDevEndpointCommandOutput extends DeleteDevEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified development endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteDevEndpointCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteDevEndpointCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteDevEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDevEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteDevEndpointCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteDevEndpointCommand extends $Command<DeleteDevEndpointCommandInput, DeleteDevEndpointCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteDevEndpointCommandInput;
            constructor(input: DeleteDevEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDevEndpointCommandInput, DeleteDevEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteJobRequest, DeleteJobResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteJobCommandInput extends DeleteJobRequest {
    }
    export interface DeleteJobCommandOutput extends DeleteJobResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified job definition. If the job definition
        *       is not found, no exception is thrown.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteJobCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteJobCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteJobCommandInput} for command's `input` shape.
        * @see {@link DeleteJobCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteJobCommand extends $Command<DeleteJobCommandInput, DeleteJobCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteJobCommandInput;
            constructor(input: DeleteJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteJobCommandInput, DeleteJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteMLTransformCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteMLTransformRequest, DeleteMLTransformResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteMLTransformCommandInput extends DeleteMLTransformRequest {
    }
    export interface DeleteMLTransformCommandOutput extends DeleteMLTransformResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an Glue machine learning transform. Machine learning transforms are a special
        *       type of transform that use machine learning to learn the details of the transformation to be
        *       performed by learning from examples provided by humans. These transformations are then saved
        *       by Glue. If you no longer need a transform, you can delete it by calling
        *         <code>DeleteMLTransforms</code>. However, any Glue jobs that still reference the deleted
        *       transform will no longer succeed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteMLTransformCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteMLTransformCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteMLTransformCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMLTransformCommandInput} for command's `input` shape.
        * @see {@link DeleteMLTransformCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteMLTransformCommand extends $Command<DeleteMLTransformCommandInput, DeleteMLTransformCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteMLTransformCommandInput;
            constructor(input: DeleteMLTransformCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMLTransformCommandInput, DeleteMLTransformCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeletePartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeletePartitionRequest, DeletePartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeletePartitionCommandInput extends DeletePartitionRequest {
    }
    export interface DeletePartitionCommandOutput extends DeletePartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified partition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeletePartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeletePartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeletePartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePartitionCommandInput} for command's `input` shape.
        * @see {@link DeletePartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeletePartitionCommand extends $Command<DeletePartitionCommandInput, DeletePartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeletePartitionCommandInput;
            constructor(input: DeletePartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePartitionCommandInput, DeletePartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeletePartitionIndexCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeletePartitionIndexRequest, DeletePartitionIndexResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeletePartitionIndexCommandInput extends DeletePartitionIndexRequest {
    }
    export interface DeletePartitionIndexCommandOutput extends DeletePartitionIndexResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified partition index from an existing table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeletePartitionIndexCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeletePartitionIndexCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeletePartitionIndexCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePartitionIndexCommandInput} for command's `input` shape.
        * @see {@link DeletePartitionIndexCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeletePartitionIndexCommand extends $Command<DeletePartitionIndexCommandInput, DeletePartitionIndexCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeletePartitionIndexCommandInput;
            constructor(input: DeletePartitionIndexCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePartitionIndexCommandInput, DeletePartitionIndexCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteRegistryInput, DeleteRegistryResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteRegistryCommandInput extends DeleteRegistryInput {
    }
    export interface DeleteRegistryCommandOutput extends DeleteRegistryResponse, __MetadataBearer {
    }
    /**
        * <p>Delete the entire registry including schema and all of its versions. To get the status of the delete operation, you can call the <code>GetRegistry</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the registry such as the <code>UpdateRegistry</code>, <code>CreateSchema</code>, <code>UpdateSchema</code>, and <code>RegisterSchemaVersion</code> APIs. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteRegistryCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteRegistryCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRegistryCommandInput} for command's `input` shape.
        * @see {@link DeleteRegistryCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteRegistryCommand extends $Command<DeleteRegistryCommandInput, DeleteRegistryCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteRegistryCommandInput;
            constructor(input: DeleteRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRegistryCommandInput, DeleteRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteResourcePolicyRequest, DeleteResourcePolicyResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteResourcePolicyCommandInput extends DeleteResourcePolicyRequest {
    }
    export interface DeleteResourcePolicyCommandOutput extends DeleteResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteResourcePolicyCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteResourcePolicyCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteResourcePolicyCommand extends $Command<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteResourcePolicyCommandInput;
            constructor(input: DeleteResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteSchemaInput, DeleteSchemaResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteSchemaCommandInput extends DeleteSchemaInput {
    }
    export interface DeleteSchemaCommandOutput extends DeleteSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the entire schema set, including the schema set and all of its versions. To get the status of the delete operation, you can call <code>GetSchema</code> API after the asynchronous call. Deleting a registry will deactivate all online operations for the schema, such as the <code>GetSchemaByDefinition</code>, and <code>RegisterSchemaVersion</code> APIs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteSchemaCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteSchemaCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSchemaCommandInput} for command's `input` shape.
        * @see {@link DeleteSchemaCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteSchemaCommand extends $Command<DeleteSchemaCommandInput, DeleteSchemaCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteSchemaCommandInput;
            constructor(input: DeleteSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSchemaCommandInput, DeleteSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSchemaVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteSchemaVersionsInput, DeleteSchemaVersionsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteSchemaVersionsCommandInput extends DeleteSchemaVersionsInput {
    }
    export interface DeleteSchemaVersionsCommandOutput extends DeleteSchemaVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Remove versions from the specified schema. A version number or range may be supplied. If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.  Calling the <code>GetSchemaVersions</code> API after this call will list the status of the deleted versions.</p>
        *          <p>When the range of version numbers contain check pointed version, the API will return a 409 conflict and will not proceed with the deletion. You have to remove the checkpoint first using the <code>DeleteSchemaCheckpoint</code> API before using this API.</p>
        *          <p>You cannot use the <code>DeleteSchemaVersions</code> API to delete the first schema version in the schema set. The first schema version can only be deleted by the <code>DeleteSchema</code> API. This operation will also delete the attached <code>SchemaVersionMetadata</code> under the schema versions. Hard deletes will be enforced on the database.</p>
        *          <p>If the compatibility mode forbids deleting of a version that is necessary, such as BACKWARDS_FULL, an error is returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteSchemaVersionsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteSchemaVersionsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteSchemaVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSchemaVersionsCommandInput} for command's `input` shape.
        * @see {@link DeleteSchemaVersionsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteSchemaVersionsCommand extends $Command<DeleteSchemaVersionsCommandInput, DeleteSchemaVersionsCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteSchemaVersionsCommandInput;
            constructor(input: DeleteSchemaVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSchemaVersionsCommandInput, DeleteSchemaVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSecurityConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteSecurityConfigurationRequest, DeleteSecurityConfigurationResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteSecurityConfigurationCommandInput extends DeleteSecurityConfigurationRequest {
    }
    export interface DeleteSecurityConfigurationCommandOutput extends DeleteSecurityConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified security configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteSecurityConfigurationCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteSecurityConfigurationCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteSecurityConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSecurityConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteSecurityConfigurationCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteSecurityConfigurationCommand extends $Command<DeleteSecurityConfigurationCommandInput, DeleteSecurityConfigurationCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteSecurityConfigurationCommandInput;
            constructor(input: DeleteSecurityConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSecurityConfigurationCommandInput, DeleteSecurityConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteSessionRequest, DeleteSessionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteSessionCommandInput extends DeleteSessionRequest {
    }
    export interface DeleteSessionCommandOutput extends DeleteSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteSessionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteSessionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSessionCommandInput} for command's `input` shape.
        * @see {@link DeleteSessionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteSessionCommand extends $Command<DeleteSessionCommandInput, DeleteSessionCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteSessionCommandInput;
            constructor(input: DeleteSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSessionCommandInput, DeleteSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteTableRequest, DeleteTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteTableCommandInput extends DeleteTableRequest {
    }
    export interface DeleteTableCommandOutput extends DeleteTableResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a table definition from the Data Catalog.</p>
        *          <note>
        *             <p>After completing this operation, you no longer have access to the table versions and
        *         partitions that belong to the deleted table. Glue deletes these "orphaned" resources
        *         asynchronously in a timely manner, at the discretion of the service.</p>
        *             <p>To ensure the immediate deletion of all related resources, before calling
        *           <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or
        *           <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or
        *           <code>BatchDeletePartition</code>, to delete any resources that belong to the
        *         table.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTableCommandInput} for command's `input` shape.
        * @see {@link DeleteTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteTableCommand extends $Command<DeleteTableCommandInput, DeleteTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteTableCommandInput;
            constructor(input: DeleteTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTableCommandInput, DeleteTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTableVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteTableVersionRequest, DeleteTableVersionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteTableVersionCommandInput extends DeleteTableVersionRequest {
    }
    export interface DeleteTableVersionCommandOutput extends DeleteTableVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified version of a table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteTableVersionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteTableVersionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteTableVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTableVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteTableVersionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteTableVersionCommand extends $Command<DeleteTableVersionCommandInput, DeleteTableVersionCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteTableVersionCommandInput;
            constructor(input: DeleteTableVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTableVersionCommandInput, DeleteTableVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTriggerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteTriggerRequest, DeleteTriggerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteTriggerCommandInput extends DeleteTriggerRequest {
    }
    export interface DeleteTriggerCommandOutput extends DeleteTriggerResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified trigger. If the trigger is not found, no
        *       exception is thrown.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteTriggerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteTriggerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteTriggerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTriggerCommandInput} for command's `input` shape.
        * @see {@link DeleteTriggerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteTriggerCommand extends $Command<DeleteTriggerCommandInput, DeleteTriggerCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteTriggerCommandInput;
            constructor(input: DeleteTriggerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTriggerCommandInput, DeleteTriggerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteUserDefinedFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteUserDefinedFunctionRequest, DeleteUserDefinedFunctionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteUserDefinedFunctionCommandInput extends DeleteUserDefinedFunctionRequest {
    }
    export interface DeleteUserDefinedFunctionCommandOutput extends DeleteUserDefinedFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing function definition from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteUserDefinedFunctionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteUserDefinedFunctionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteUserDefinedFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserDefinedFunctionCommandInput} for command's `input` shape.
        * @see {@link DeleteUserDefinedFunctionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteUserDefinedFunctionCommand extends $Command<DeleteUserDefinedFunctionCommandInput, DeleteUserDefinedFunctionCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteUserDefinedFunctionCommandInput;
            constructor(input: DeleteUserDefinedFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserDefinedFunctionCommandInput, DeleteUserDefinedFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteWorkflowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { DeleteWorkflowRequest, DeleteWorkflowResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface DeleteWorkflowCommandInput extends DeleteWorkflowRequest {
    }
    export interface DeleteWorkflowCommandOutput extends DeleteWorkflowResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a workflow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, DeleteWorkflowCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, DeleteWorkflowCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new DeleteWorkflowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkflowCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkflowCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class DeleteWorkflowCommand extends $Command<DeleteWorkflowCommandInput, DeleteWorkflowCommandOutput, GlueClientResolvedConfig> {
            readonly input: DeleteWorkflowCommandInput;
            constructor(input: DeleteWorkflowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkflowCommandInput, DeleteWorkflowCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetBlueprintRequest, GetBlueprintResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetBlueprintCommandInput extends GetBlueprintRequest {
    }
    export interface GetBlueprintCommandOutput extends GetBlueprintResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details of a blueprint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetBlueprintCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetBlueprintCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetBlueprintCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBlueprintCommandInput} for command's `input` shape.
        * @see {@link GetBlueprintCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetBlueprintCommand extends $Command<GetBlueprintCommandInput, GetBlueprintCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetBlueprintCommandInput;
            constructor(input: GetBlueprintCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBlueprintCommandInput, GetBlueprintCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetBlueprintRunRequest, GetBlueprintRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetBlueprintRunCommandInput extends GetBlueprintRunRequest {
    }
    export interface GetBlueprintRunCommandOutput extends GetBlueprintRunResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details of a blueprint run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetBlueprintRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetBlueprintRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetBlueprintRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBlueprintRunCommandInput} for command's `input` shape.
        * @see {@link GetBlueprintRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetBlueprintRunCommand extends $Command<GetBlueprintRunCommandInput, GetBlueprintRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetBlueprintRunCommandInput;
            constructor(input: GetBlueprintRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBlueprintRunCommandInput, GetBlueprintRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetBlueprintRunsRequest, GetBlueprintRunsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetBlueprintRunsCommandInput extends GetBlueprintRunsRequest {
    }
    export interface GetBlueprintRunsCommandOutput extends GetBlueprintRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details of blueprint runs for a specified blueprint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetBlueprintRunsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetBlueprintRunsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetBlueprintRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBlueprintRunsCommandInput} for command's `input` shape.
        * @see {@link GetBlueprintRunsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetBlueprintRunsCommand extends $Command<GetBlueprintRunsCommandInput, GetBlueprintRunsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetBlueprintRunsCommandInput;
            constructor(input: GetBlueprintRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBlueprintRunsCommandInput, GetBlueprintRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCatalogImportStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetCatalogImportStatusRequest, GetCatalogImportStatusResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetCatalogImportStatusCommandInput extends GetCatalogImportStatusRequest {
    }
    export interface GetCatalogImportStatusCommandOutput extends GetCatalogImportStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the status of a migration operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetCatalogImportStatusCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetCatalogImportStatusCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetCatalogImportStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCatalogImportStatusCommandInput} for command's `input` shape.
        * @see {@link GetCatalogImportStatusCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetCatalogImportStatusCommand extends $Command<GetCatalogImportStatusCommandInput, GetCatalogImportStatusCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetCatalogImportStatusCommandInput;
            constructor(input: GetCatalogImportStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCatalogImportStatusCommandInput, GetCatalogImportStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetClassifierRequest, GetClassifierResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetClassifierCommandInput extends GetClassifierRequest {
    }
    export interface GetClassifierCommandOutput extends GetClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve a classifier by name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetClassifierCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetClassifierCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetClassifierCommandInput} for command's `input` shape.
        * @see {@link GetClassifierCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetClassifierCommand extends $Command<GetClassifierCommandInput, GetClassifierCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetClassifierCommandInput;
            constructor(input: GetClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetClassifierCommandInput, GetClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetClassifiersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetClassifiersRequest, GetClassifiersResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetClassifiersCommandInput extends GetClassifiersRequest {
    }
    export interface GetClassifiersCommandOutput extends GetClassifiersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all classifier objects in the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetClassifiersCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetClassifiersCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetClassifiersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetClassifiersCommandInput} for command's `input` shape.
        * @see {@link GetClassifiersCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetClassifiersCommand extends $Command<GetClassifiersCommandInput, GetClassifiersCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetClassifiersCommandInput;
            constructor(input: GetClassifiersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetClassifiersCommandInput, GetClassifiersCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetColumnStatisticsForPartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetColumnStatisticsForPartitionRequest, GetColumnStatisticsForPartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetColumnStatisticsForPartitionCommandInput extends GetColumnStatisticsForPartitionRequest {
    }
    export interface GetColumnStatisticsForPartitionCommandOutput extends GetColumnStatisticsForPartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves partition statistics of columns.</p>
        *
        * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetPartition</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetColumnStatisticsForPartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetColumnStatisticsForPartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetColumnStatisticsForPartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetColumnStatisticsForPartitionCommandInput} for command's `input` shape.
        * @see {@link GetColumnStatisticsForPartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetColumnStatisticsForPartitionCommand extends $Command<GetColumnStatisticsForPartitionCommandInput, GetColumnStatisticsForPartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetColumnStatisticsForPartitionCommandInput;
            constructor(input: GetColumnStatisticsForPartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetColumnStatisticsForPartitionCommandInput, GetColumnStatisticsForPartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetColumnStatisticsForTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetColumnStatisticsForTableRequest, GetColumnStatisticsForTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetColumnStatisticsForTableCommandInput extends GetColumnStatisticsForTableRequest {
    }
    export interface GetColumnStatisticsForTableCommandOutput extends GetColumnStatisticsForTableResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves table statistics of columns.</p>
        *
        *          <p>The Identity and Access Management (IAM) permission required for this operation is <code>GetTable</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetColumnStatisticsForTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetColumnStatisticsForTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetColumnStatisticsForTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetColumnStatisticsForTableCommandInput} for command's `input` shape.
        * @see {@link GetColumnStatisticsForTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetColumnStatisticsForTableCommand extends $Command<GetColumnStatisticsForTableCommandInput, GetColumnStatisticsForTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetColumnStatisticsForTableCommandInput;
            constructor(input: GetColumnStatisticsForTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetColumnStatisticsForTableCommandInput, GetColumnStatisticsForTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetConnectionRequest, GetConnectionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetConnectionCommandInput extends GetConnectionRequest {
    }
    export interface GetConnectionCommandOutput extends GetConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a connection definition from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetConnectionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetConnectionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectionCommandInput} for command's `input` shape.
        * @see {@link GetConnectionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetConnectionCommand extends $Command<GetConnectionCommandInput, GetConnectionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetConnectionCommandInput;
            constructor(input: GetConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectionCommandInput, GetConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetConnectionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetConnectionsRequest, GetConnectionsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetConnectionsCommandInput extends GetConnectionsRequest {
    }
    export interface GetConnectionsCommandOutput extends GetConnectionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of connection definitions from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetConnectionsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetConnectionsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetConnectionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectionsCommandInput} for command's `input` shape.
        * @see {@link GetConnectionsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetConnectionsCommand extends $Command<GetConnectionsCommandInput, GetConnectionsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetConnectionsCommandInput;
            constructor(input: GetConnectionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectionsCommandInput, GetConnectionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetCrawlerRequest, GetCrawlerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetCrawlerCommandInput extends GetCrawlerRequest {
    }
    export interface GetCrawlerCommandOutput extends GetCrawlerResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata for a specified crawler.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetCrawlerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetCrawlerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetCrawlerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCrawlerCommandInput} for command's `input` shape.
        * @see {@link GetCrawlerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetCrawlerCommand extends $Command<GetCrawlerCommandInput, GetCrawlerCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetCrawlerCommandInput;
            constructor(input: GetCrawlerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCrawlerCommandInput, GetCrawlerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlerMetricsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetCrawlerMetricsRequest, GetCrawlerMetricsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetCrawlerMetricsCommandInput extends GetCrawlerMetricsRequest {
    }
    export interface GetCrawlerMetricsCommandOutput extends GetCrawlerMetricsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metrics about specified crawlers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetCrawlerMetricsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetCrawlerMetricsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetCrawlerMetricsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCrawlerMetricsCommandInput} for command's `input` shape.
        * @see {@link GetCrawlerMetricsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetCrawlerMetricsCommand extends $Command<GetCrawlerMetricsCommandInput, GetCrawlerMetricsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetCrawlerMetricsCommandInput;
            constructor(input: GetCrawlerMetricsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCrawlerMetricsCommandInput, GetCrawlerMetricsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetCrawlersRequest, GetCrawlersResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetCrawlersCommandInput extends GetCrawlersRequest {
    }
    export interface GetCrawlersCommandOutput extends GetCrawlersResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata for all crawlers defined in the customer
        *       account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetCrawlersCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetCrawlersCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetCrawlersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCrawlersCommandInput} for command's `input` shape.
        * @see {@link GetCrawlersCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetCrawlersCommand extends $Command<GetCrawlersCommandInput, GetCrawlersCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetCrawlersCommandInput;
            constructor(input: GetCrawlersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCrawlersCommandInput, GetCrawlersCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCustomEntityTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetCustomEntityTypeRequest, GetCustomEntityTypeResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetCustomEntityTypeCommandInput extends GetCustomEntityTypeRequest {
    }
    export interface GetCustomEntityTypeCommandOutput extends GetCustomEntityTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details of a custom pattern by specifying its name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetCustomEntityTypeCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetCustomEntityTypeCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetCustomEntityTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCustomEntityTypeCommandInput} for command's `input` shape.
        * @see {@link GetCustomEntityTypeCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetCustomEntityTypeCommand extends $Command<GetCustomEntityTypeCommandInput, GetCustomEntityTypeCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetCustomEntityTypeCommandInput;
            constructor(input: GetCustomEntityTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCustomEntityTypeCommandInput, GetCustomEntityTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetDatabaseRequest, GetDatabaseResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetDatabaseCommandInput extends GetDatabaseRequest {
    }
    export interface GetDatabaseCommandOutput extends GetDatabaseResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the definition of a specified database.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetDatabaseCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetDatabaseCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDatabaseCommandInput} for command's `input` shape.
        * @see {@link GetDatabaseCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetDatabaseCommand extends $Command<GetDatabaseCommandInput, GetDatabaseCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetDatabaseCommandInput;
            constructor(input: GetDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDatabaseCommandInput, GetDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDatabasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetDatabasesRequest, GetDatabasesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetDatabasesCommandInput extends GetDatabasesRequest {
    }
    export interface GetDatabasesCommandOutput extends GetDatabasesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves all databases defined in a given Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetDatabasesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetDatabasesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetDatabasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDatabasesCommandInput} for command's `input` shape.
        * @see {@link GetDatabasesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetDatabasesCommand extends $Command<GetDatabasesCommandInput, GetDatabasesCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetDatabasesCommandInput;
            constructor(input: GetDatabasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDatabasesCommandInput, GetDatabasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDataCatalogEncryptionSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetDataCatalogEncryptionSettingsRequest, GetDataCatalogEncryptionSettingsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetDataCatalogEncryptionSettingsCommandInput extends GetDataCatalogEncryptionSettingsRequest {
    }
    export interface GetDataCatalogEncryptionSettingsCommandOutput extends GetDataCatalogEncryptionSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the security configuration for a specified catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetDataCatalogEncryptionSettingsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetDataCatalogEncryptionSettingsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetDataCatalogEncryptionSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDataCatalogEncryptionSettingsCommandInput} for command's `input` shape.
        * @see {@link GetDataCatalogEncryptionSettingsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetDataCatalogEncryptionSettingsCommand extends $Command<GetDataCatalogEncryptionSettingsCommandInput, GetDataCatalogEncryptionSettingsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetDataCatalogEncryptionSettingsCommandInput;
            constructor(input: GetDataCatalogEncryptionSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDataCatalogEncryptionSettingsCommandInput, GetDataCatalogEncryptionSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDataflowGraphCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetDataflowGraphRequest, GetDataflowGraphResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetDataflowGraphCommandInput extends GetDataflowGraphRequest {
    }
    export interface GetDataflowGraphCommandOutput extends GetDataflowGraphResponse, __MetadataBearer {
    }
    /**
        * <p>Transforms a Python script into a directed acyclic graph (DAG). </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetDataflowGraphCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetDataflowGraphCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetDataflowGraphCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDataflowGraphCommandInput} for command's `input` shape.
        * @see {@link GetDataflowGraphCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetDataflowGraphCommand extends $Command<GetDataflowGraphCommandInput, GetDataflowGraphCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetDataflowGraphCommandInput;
            constructor(input: GetDataflowGraphCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDataflowGraphCommandInput, GetDataflowGraphCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDevEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetDevEndpointRequest, GetDevEndpointResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetDevEndpointCommandInput extends GetDevEndpointRequest {
    }
    export interface GetDevEndpointCommandOutput extends GetDevEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a specified development endpoint.</p>
        *          <note>
        *             <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only
        *         a private IP address, and the public IP address field is not populated. When you create a
        *         non-VPC development endpoint, Glue returns only a public IP address.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetDevEndpointCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetDevEndpointCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetDevEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDevEndpointCommandInput} for command's `input` shape.
        * @see {@link GetDevEndpointCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetDevEndpointCommand extends $Command<GetDevEndpointCommandInput, GetDevEndpointCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetDevEndpointCommandInput;
            constructor(input: GetDevEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDevEndpointCommandInput, GetDevEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDevEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetDevEndpointsRequest, GetDevEndpointsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetDevEndpointsCommandInput extends GetDevEndpointsRequest {
    }
    export interface GetDevEndpointsCommandOutput extends GetDevEndpointsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves all the development endpoints in this AWS account.</p>
        *          <note>
        *             <p>When you create a development endpoint in a virtual private cloud (VPC), Glue returns only a private IP address
        *       and the public IP address field is not populated. When you create a non-VPC development
        *       endpoint, Glue returns only a public IP address.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetDevEndpointsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetDevEndpointsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetDevEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDevEndpointsCommandInput} for command's `input` shape.
        * @see {@link GetDevEndpointsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetDevEndpointsCommand extends $Command<GetDevEndpointsCommandInput, GetDevEndpointsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetDevEndpointsCommandInput;
            constructor(input: GetDevEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDevEndpointsCommandInput, GetDevEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobBookmarkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetJobBookmarkRequest, GetJobBookmarkResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetJobBookmarkCommandInput extends GetJobBookmarkRequest {
    }
    export interface GetJobBookmarkCommandOutput extends GetJobBookmarkResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information on a job bookmark entry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetJobBookmarkCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetJobBookmarkCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetJobBookmarkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobBookmarkCommandInput} for command's `input` shape.
        * @see {@link GetJobBookmarkCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetJobBookmarkCommand extends $Command<GetJobBookmarkCommandInput, GetJobBookmarkCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetJobBookmarkCommandInput;
            constructor(input: GetJobBookmarkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobBookmarkCommandInput, GetJobBookmarkCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetJobRequest } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    import { GetJobResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface GetJobCommandInput extends GetJobRequest {
    }
    export interface GetJobCommandOutput extends GetJobResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an existing job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetJobCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetJobCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobCommandInput} for command's `input` shape.
        * @see {@link GetJobCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetJobCommand extends $Command<GetJobCommandInput, GetJobCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetJobCommandInput;
            constructor(input: GetJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobCommandInput, GetJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetJobRunRequest, GetJobRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetJobRunCommandInput extends GetJobRunRequest {
    }
    export interface GetJobRunCommandOutput extends GetJobRunResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the metadata for a given job run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetJobRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetJobRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetJobRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobRunCommandInput} for command's `input` shape.
        * @see {@link GetJobRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetJobRunCommand extends $Command<GetJobRunCommandInput, GetJobRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetJobRunCommandInput;
            constructor(input: GetJobRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobRunCommandInput, GetJobRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetJobRunsRequest, GetJobRunsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetJobRunsCommandInput extends GetJobRunsRequest {
    }
    export interface GetJobRunsCommandOutput extends GetJobRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata for all runs of a given job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetJobRunsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetJobRunsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetJobRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobRunsCommandInput} for command's `input` shape.
        * @see {@link GetJobRunsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetJobRunsCommand extends $Command<GetJobRunsCommandInput, GetJobRunsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetJobRunsCommandInput;
            constructor(input: GetJobRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobRunsCommandInput, GetJobRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetJobsRequest } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    import { GetJobsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface GetJobsCommandInput extends GetJobsRequest {
    }
    export interface GetJobsCommandOutput extends GetJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves all current job definitions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetJobsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetJobsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobsCommandInput} for command's `input` shape.
        * @see {@link GetJobsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetJobsCommand extends $Command<GetJobsCommandInput, GetJobsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetJobsCommandInput;
            constructor(input: GetJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobsCommandInput, GetJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetMappingRequest, GetMappingResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetMappingCommandInput extends GetMappingRequest {
    }
    export interface GetMappingCommandOutput extends GetMappingResponse, __MetadataBearer {
    }
    /**
        * <p>Creates mappings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetMappingCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetMappingCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMappingCommandInput} for command's `input` shape.
        * @see {@link GetMappingCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetMappingCommand extends $Command<GetMappingCommandInput, GetMappingCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetMappingCommandInput;
            constructor(input: GetMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMappingCommandInput, GetMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTaskRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetMLTaskRunRequest, GetMLTaskRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetMLTaskRunCommandInput extends GetMLTaskRunRequest {
    }
    export interface GetMLTaskRunCommandOutput extends GetMLTaskRunResponse, __MetadataBearer {
    }
    /**
        * <p>Gets details for a specific task run on a machine learning transform. Machine learning
        *       task runs are asynchronous tasks that Glue runs on your behalf as part of various machine
        *       learning workflows. You can check the stats of any task run by calling
        *         <code>GetMLTaskRun</code> with the <code>TaskRunID</code> and its parent transform's
        *         <code>TransformID</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetMLTaskRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetMLTaskRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetMLTaskRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMLTaskRunCommandInput} for command's `input` shape.
        * @see {@link GetMLTaskRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetMLTaskRunCommand extends $Command<GetMLTaskRunCommandInput, GetMLTaskRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetMLTaskRunCommandInput;
            constructor(input: GetMLTaskRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMLTaskRunCommandInput, GetMLTaskRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTaskRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetMLTaskRunsRequest, GetMLTaskRunsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetMLTaskRunsCommandInput extends GetMLTaskRunsRequest {
    }
    export interface GetMLTaskRunsCommandOutput extends GetMLTaskRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of runs for a machine learning transform. Machine learning task runs are
        *       asynchronous tasks that Glue runs on your behalf as part of various machine learning
        *       workflows. You can get a sortable, filterable list of machine learning task runs by calling
        *         <code>GetMLTaskRuns</code> with their parent transform's <code>TransformID</code> and other
        *       optional parameters as documented in this section.</p>
        *
        * 	        <p>This operation returns a list of historic runs and must be paginated.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetMLTaskRunsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetMLTaskRunsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetMLTaskRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMLTaskRunsCommandInput} for command's `input` shape.
        * @see {@link GetMLTaskRunsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetMLTaskRunsCommand extends $Command<GetMLTaskRunsCommandInput, GetMLTaskRunsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetMLTaskRunsCommandInput;
            constructor(input: GetMLTaskRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMLTaskRunsCommandInput, GetMLTaskRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTransformCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetMLTransformRequest, GetMLTransformResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetMLTransformCommandInput extends GetMLTransformRequest {
    }
    export interface GetMLTransformCommandOutput extends GetMLTransformResponse, __MetadataBearer {
    }
    /**
        * <p>Gets an Glue machine learning transform artifact and all its corresponding metadata.
        *       Machine learning transforms are a special type of transform that use machine learning to learn
        *       the details of the transformation to be performed by learning from examples provided by
        *       humans. These transformations are then saved by Glue. You can retrieve their metadata by
        *       calling <code>GetMLTransform</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetMLTransformCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetMLTransformCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetMLTransformCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMLTransformCommandInput} for command's `input` shape.
        * @see {@link GetMLTransformCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetMLTransformCommand extends $Command<GetMLTransformCommandInput, GetMLTransformCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetMLTransformCommandInput;
            constructor(input: GetMLTransformCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMLTransformCommandInput, GetMLTransformCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTransformsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetMLTransformsRequest, GetMLTransformsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetMLTransformsCommandInput extends GetMLTransformsRequest {
    }
    export interface GetMLTransformsCommandOutput extends GetMLTransformsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a sortable, filterable list of existing Glue machine learning transforms. Machine
        *       learning transforms are a special type of transform that use machine learning to learn the
        *       details of the transformation to be performed by learning from examples provided by humans.
        *       These transformations are then saved by Glue, and you can retrieve their metadata by
        *       calling <code>GetMLTransforms</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetMLTransformsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetMLTransformsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetMLTransformsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMLTransformsCommandInput} for command's `input` shape.
        * @see {@link GetMLTransformsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetMLTransformsCommand extends $Command<GetMLTransformsCommandInput, GetMLTransformsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetMLTransformsCommandInput;
            constructor(input: GetMLTransformsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMLTransformsCommandInput, GetMLTransformsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetPartitionRequest, GetPartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetPartitionCommandInput extends GetPartitionRequest {
    }
    export interface GetPartitionCommandOutput extends GetPartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a specified partition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetPartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetPartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetPartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPartitionCommandInput} for command's `input` shape.
        * @see {@link GetPartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetPartitionCommand extends $Command<GetPartitionCommandInput, GetPartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetPartitionCommandInput;
            constructor(input: GetPartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPartitionCommandInput, GetPartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionIndexesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetPartitionIndexesRequest, GetPartitionIndexesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetPartitionIndexesCommandInput extends GetPartitionIndexesRequest {
    }
    export interface GetPartitionIndexesCommandOutput extends GetPartitionIndexesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the partition indexes associated with a table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetPartitionIndexesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetPartitionIndexesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetPartitionIndexesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPartitionIndexesCommandInput} for command's `input` shape.
        * @see {@link GetPartitionIndexesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetPartitionIndexesCommand extends $Command<GetPartitionIndexesCommandInput, GetPartitionIndexesCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetPartitionIndexesCommandInput;
            constructor(input: GetPartitionIndexesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPartitionIndexesCommandInput, GetPartitionIndexesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetPartitionsRequest, GetPartitionsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetPartitionsCommandInput extends GetPartitionsRequest {
    }
    export interface GetPartitionsCommandOutput extends GetPartitionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the partitions in a table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetPartitionsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetPartitionsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetPartitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPartitionsCommandInput} for command's `input` shape.
        * @see {@link GetPartitionsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetPartitionsCommand extends $Command<GetPartitionsCommandInput, GetPartitionsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetPartitionsCommandInput;
            constructor(input: GetPartitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPartitionsCommandInput, GetPartitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPlanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetPlanRequest, GetPlanResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetPlanCommandInput extends GetPlanRequest {
    }
    export interface GetPlanCommandOutput extends GetPlanResponse, __MetadataBearer {
    }
    /**
        * <p>Gets code to perform a specified mapping.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetPlanCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetPlanCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetPlanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPlanCommandInput} for command's `input` shape.
        * @see {@link GetPlanCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetPlanCommand extends $Command<GetPlanCommandInput, GetPlanCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetPlanCommandInput;
            constructor(input: GetPlanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPlanCommandInput, GetPlanCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetRegistryInput, GetRegistryResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetRegistryCommandInput extends GetRegistryInput {
    }
    export interface GetRegistryCommandOutput extends GetRegistryResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the specified registry in detail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetRegistryCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetRegistryCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRegistryCommandInput} for command's `input` shape.
        * @see {@link GetRegistryCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetRegistryCommand extends $Command<GetRegistryCommandInput, GetRegistryCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetRegistryCommandInput;
            constructor(input: GetRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRegistryCommandInput, GetRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetResourcePoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetResourcePoliciesRequest, GetResourcePoliciesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetResourcePoliciesCommandInput extends GetResourcePoliciesRequest {
    }
    export interface GetResourcePoliciesCommandOutput extends GetResourcePoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the resource policies set on individual resources by Resource Access Manager
        *       during cross-account permission grants. Also retrieves the Data Catalog resource
        *       policy.</p>
        *          <p>If you enabled metadata encryption in Data Catalog settings, and you do not have
        *       permission on the KMS key, the operation can't return the Data Catalog resource
        *       policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetResourcePoliciesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetResourcePoliciesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetResourcePoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourcePoliciesCommandInput} for command's `input` shape.
        * @see {@link GetResourcePoliciesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetResourcePoliciesCommand extends $Command<GetResourcePoliciesCommandInput, GetResourcePoliciesCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetResourcePoliciesCommandInput;
            constructor(input: GetResourcePoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourcePoliciesCommandInput, GetResourcePoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetResourcePolicyRequest, GetResourcePolicyResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetResourcePolicyCommandInput extends GetResourcePolicyRequest {
    }
    export interface GetResourcePolicyCommandOutput extends GetResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a specified resource policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetResourcePolicyCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetResourcePolicyCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link GetResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetResourcePolicyCommand extends $Command<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetResourcePolicyCommandInput;
            constructor(input: GetResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaByDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetSchemaByDefinitionInput, GetSchemaByDefinitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetSchemaByDefinitionCommandInput extends GetSchemaByDefinitionInput {
    }
    export interface GetSchemaByDefinitionCommandOutput extends GetSchemaByDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a schema by the <code>SchemaDefinition</code>. The schema definition is sent to the Schema Registry, canonicalized, and hashed. If the hash is matched within the scope of the <code>SchemaName</code> or ARN (or the default registry, if none is supplied), that schema’s metadata is returned. Otherwise, a 404 or NotFound error is returned. Schema versions in <code>Deleted</code> statuses will not be included in the results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetSchemaByDefinitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetSchemaByDefinitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetSchemaByDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSchemaByDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetSchemaByDefinitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetSchemaByDefinitionCommand extends $Command<GetSchemaByDefinitionCommandInput, GetSchemaByDefinitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetSchemaByDefinitionCommandInput;
            constructor(input: GetSchemaByDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSchemaByDefinitionCommandInput, GetSchemaByDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetSchemaInput, GetSchemaResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetSchemaCommandInput extends GetSchemaInput {
    }
    export interface GetSchemaCommandOutput extends GetSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the specified schema in detail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetSchemaCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetSchemaCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSchemaCommandInput} for command's `input` shape.
        * @see {@link GetSchemaCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetSchemaCommand extends $Command<GetSchemaCommandInput, GetSchemaCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetSchemaCommandInput;
            constructor(input: GetSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSchemaCommandInput, GetSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetSchemaVersionInput, GetSchemaVersionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetSchemaVersionCommandInput extends GetSchemaVersionInput {
    }
    export interface GetSchemaVersionCommandOutput extends GetSchemaVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Get the specified schema by its unique ID assigned when a version of the schema is created or registered. Schema versions in Deleted status will not be included in the results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetSchemaVersionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetSchemaVersionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetSchemaVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSchemaVersionCommandInput} for command's `input` shape.
        * @see {@link GetSchemaVersionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetSchemaVersionCommand extends $Command<GetSchemaVersionCommandInput, GetSchemaVersionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetSchemaVersionCommandInput;
            constructor(input: GetSchemaVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSchemaVersionCommandInput, GetSchemaVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaVersionsDiffCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetSchemaVersionsDiffInput, GetSchemaVersionsDiffResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetSchemaVersionsDiffCommandInput extends GetSchemaVersionsDiffInput {
    }
    export interface GetSchemaVersionsDiffCommandOutput extends GetSchemaVersionsDiffResponse, __MetadataBearer {
    }
    /**
        * <p>Fetches the schema version difference in the specified difference type between two stored schema versions in the Schema Registry.</p>
        *          <p>This API allows you to compare two schema versions between two schema definitions under the same schema.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetSchemaVersionsDiffCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetSchemaVersionsDiffCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetSchemaVersionsDiffCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSchemaVersionsDiffCommandInput} for command's `input` shape.
        * @see {@link GetSchemaVersionsDiffCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetSchemaVersionsDiffCommand extends $Command<GetSchemaVersionsDiffCommandInput, GetSchemaVersionsDiffCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetSchemaVersionsDiffCommandInput;
            constructor(input: GetSchemaVersionsDiffCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSchemaVersionsDiffCommandInput, GetSchemaVersionsDiffCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSecurityConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetSecurityConfigurationRequest, GetSecurityConfigurationResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetSecurityConfigurationCommandInput extends GetSecurityConfigurationRequest {
    }
    export interface GetSecurityConfigurationCommandOutput extends GetSecurityConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a specified security configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetSecurityConfigurationCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetSecurityConfigurationCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetSecurityConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSecurityConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetSecurityConfigurationCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetSecurityConfigurationCommand extends $Command<GetSecurityConfigurationCommandInput, GetSecurityConfigurationCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetSecurityConfigurationCommandInput;
            constructor(input: GetSecurityConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSecurityConfigurationCommandInput, GetSecurityConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSecurityConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetSecurityConfigurationsRequest, GetSecurityConfigurationsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetSecurityConfigurationsCommandInput extends GetSecurityConfigurationsRequest {
    }
    export interface GetSecurityConfigurationsCommandOutput extends GetSecurityConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of all security configurations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetSecurityConfigurationsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetSecurityConfigurationsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetSecurityConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSecurityConfigurationsCommandInput} for command's `input` shape.
        * @see {@link GetSecurityConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetSecurityConfigurationsCommand extends $Command<GetSecurityConfigurationsCommandInput, GetSecurityConfigurationsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetSecurityConfigurationsCommandInput;
            constructor(input: GetSecurityConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSecurityConfigurationsCommandInput, GetSecurityConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetSessionRequest, GetSessionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetSessionCommandInput extends GetSessionRequest {
    }
    export interface GetSessionCommandOutput extends GetSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetSessionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetSessionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSessionCommandInput} for command's `input` shape.
        * @see {@link GetSessionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetSessionCommand extends $Command<GetSessionCommandInput, GetSessionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetSessionCommandInput;
            constructor(input: GetSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSessionCommandInput, GetSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetStatementRequest, GetStatementResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetStatementCommandInput extends GetStatementRequest {
    }
    export interface GetStatementCommandOutput extends GetStatementResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the statement.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetStatementCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetStatementCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStatementCommandInput} for command's `input` shape.
        * @see {@link GetStatementCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetStatementCommand extends $Command<GetStatementCommandInput, GetStatementCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetStatementCommandInput;
            constructor(input: GetStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStatementCommandInput, GetStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetTableRequest, GetTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetTableCommandInput extends GetTableRequest {
    }
    export interface GetTableCommandOutput extends GetTableResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the <code>Table</code> definition in a Data Catalog for
        *       a specified table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTableCommandInput} for command's `input` shape.
        * @see {@link GetTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetTableCommand extends $Command<GetTableCommandInput, GetTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetTableCommandInput;
            constructor(input: GetTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTableCommandInput, GetTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTablesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetTablesRequest, GetTablesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetTablesCommandInput extends GetTablesRequest {
    }
    export interface GetTablesCommandOutput extends GetTablesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the definitions of some or all of the tables in a given
        *       <code>Database</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetTablesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetTablesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetTablesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTablesCommandInput} for command's `input` shape.
        * @see {@link GetTablesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetTablesCommand extends $Command<GetTablesCommandInput, GetTablesCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetTablesCommandInput;
            constructor(input: GetTablesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTablesCommandInput, GetTablesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetTableVersionRequest, GetTableVersionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetTableVersionCommandInput extends GetTableVersionRequest {
    }
    export interface GetTableVersionCommandOutput extends GetTableVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a specified version of a table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetTableVersionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetTableVersionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetTableVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTableVersionCommandInput} for command's `input` shape.
        * @see {@link GetTableVersionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetTableVersionCommand extends $Command<GetTableVersionCommandInput, GetTableVersionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetTableVersionCommandInput;
            constructor(input: GetTableVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTableVersionCommandInput, GetTableVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetTableVersionsRequest, GetTableVersionsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetTableVersionsCommandInput extends GetTableVersionsRequest {
    }
    export interface GetTableVersionsCommandOutput extends GetTableVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of strings that identify available versions of
        *       a specified table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetTableVersionsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetTableVersionsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetTableVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTableVersionsCommandInput} for command's `input` shape.
        * @see {@link GetTableVersionsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetTableVersionsCommand extends $Command<GetTableVersionsCommandInput, GetTableVersionsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetTableVersionsCommandInput;
            constructor(input: GetTableVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTableVersionsCommandInput, GetTableVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetTagsRequest, GetTagsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetTagsCommandInput extends GetTagsRequest {
    }
    export interface GetTagsCommandOutput extends GetTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of tags associated with a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetTagsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetTagsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTagsCommandInput} for command's `input` shape.
        * @see {@link GetTagsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetTagsCommand extends $Command<GetTagsCommandInput, GetTagsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetTagsCommandInput;
            constructor(input: GetTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTagsCommandInput, GetTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTriggerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetTriggerRequest, GetTriggerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetTriggerCommandInput extends GetTriggerRequest {
    }
    export interface GetTriggerCommandOutput extends GetTriggerResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the definition of a trigger.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetTriggerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetTriggerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetTriggerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTriggerCommandInput} for command's `input` shape.
        * @see {@link GetTriggerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetTriggerCommand extends $Command<GetTriggerCommandInput, GetTriggerCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetTriggerCommandInput;
            constructor(input: GetTriggerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTriggerCommandInput, GetTriggerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTriggersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetTriggersRequest, GetTriggersResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetTriggersCommandInput extends GetTriggersRequest {
    }
    export interface GetTriggersCommandOutput extends GetTriggersResponse, __MetadataBearer {
    }
    /**
        * <p>Gets all the triggers associated with a job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetTriggersCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetTriggersCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetTriggersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTriggersCommandInput} for command's `input` shape.
        * @see {@link GetTriggersCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetTriggersCommand extends $Command<GetTriggersCommandInput, GetTriggersCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetTriggersCommandInput;
            constructor(input: GetTriggersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTriggersCommandInput, GetTriggersCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredPartitionMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetUnfilteredPartitionMetadataRequest, GetUnfilteredPartitionMetadataResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetUnfilteredPartitionMetadataCommandInput extends GetUnfilteredPartitionMetadataRequest {
    }
    export interface GetUnfilteredPartitionMetadataCommandOutput extends GetUnfilteredPartitionMetadataResponse, __MetadataBearer {
    }
    export class GetUnfilteredPartitionMetadataCommand extends $Command<GetUnfilteredPartitionMetadataCommandInput, GetUnfilteredPartitionMetadataCommandOutput, GlueClientResolvedConfig> {
        readonly input: GetUnfilteredPartitionMetadataCommandInput;
        constructor(input: GetUnfilteredPartitionMetadataCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUnfilteredPartitionMetadataCommandInput, GetUnfilteredPartitionMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredPartitionsMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetUnfilteredPartitionsMetadataRequest, GetUnfilteredPartitionsMetadataResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetUnfilteredPartitionsMetadataCommandInput extends GetUnfilteredPartitionsMetadataRequest {
    }
    export interface GetUnfilteredPartitionsMetadataCommandOutput extends GetUnfilteredPartitionsMetadataResponse, __MetadataBearer {
    }
    export class GetUnfilteredPartitionsMetadataCommand extends $Command<GetUnfilteredPartitionsMetadataCommandInput, GetUnfilteredPartitionsMetadataCommandOutput, GlueClientResolvedConfig> {
        readonly input: GetUnfilteredPartitionsMetadataCommandInput;
        constructor(input: GetUnfilteredPartitionsMetadataCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUnfilteredPartitionsMetadataCommandInput, GetUnfilteredPartitionsMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredTableMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetUnfilteredTableMetadataRequest, GetUnfilteredTableMetadataResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetUnfilteredTableMetadataCommandInput extends GetUnfilteredTableMetadataRequest {
    }
    export interface GetUnfilteredTableMetadataCommandOutput extends GetUnfilteredTableMetadataResponse, __MetadataBearer {
    }
    export class GetUnfilteredTableMetadataCommand extends $Command<GetUnfilteredTableMetadataCommandInput, GetUnfilteredTableMetadataCommandOutput, GlueClientResolvedConfig> {
        readonly input: GetUnfilteredTableMetadataCommandInput;
        constructor(input: GetUnfilteredTableMetadataCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUnfilteredTableMetadataCommandInput, GetUnfilteredTableMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUserDefinedFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetUserDefinedFunctionRequest, GetUserDefinedFunctionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetUserDefinedFunctionCommandInput extends GetUserDefinedFunctionRequest {
    }
    export interface GetUserDefinedFunctionCommandOutput extends GetUserDefinedFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a specified function definition from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetUserDefinedFunctionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetUserDefinedFunctionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetUserDefinedFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUserDefinedFunctionCommandInput} for command's `input` shape.
        * @see {@link GetUserDefinedFunctionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetUserDefinedFunctionCommand extends $Command<GetUserDefinedFunctionCommandInput, GetUserDefinedFunctionCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetUserDefinedFunctionCommandInput;
            constructor(input: GetUserDefinedFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUserDefinedFunctionCommandInput, GetUserDefinedFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUserDefinedFunctionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetUserDefinedFunctionsRequest, GetUserDefinedFunctionsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetUserDefinedFunctionsCommandInput extends GetUserDefinedFunctionsRequest {
    }
    export interface GetUserDefinedFunctionsCommandOutput extends GetUserDefinedFunctionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves multiple function definitions from the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetUserDefinedFunctionsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetUserDefinedFunctionsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetUserDefinedFunctionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUserDefinedFunctionsCommandInput} for command's `input` shape.
        * @see {@link GetUserDefinedFunctionsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetUserDefinedFunctionsCommand extends $Command<GetUserDefinedFunctionsCommandInput, GetUserDefinedFunctionsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetUserDefinedFunctionsCommandInput;
            constructor(input: GetUserDefinedFunctionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUserDefinedFunctionsCommandInput, GetUserDefinedFunctionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetWorkflowRequest, GetWorkflowResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetWorkflowCommandInput extends GetWorkflowRequest {
    }
    export interface GetWorkflowCommandOutput extends GetWorkflowResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves resource metadata for a workflow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetWorkflowCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetWorkflowCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetWorkflowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkflowCommandInput} for command's `input` shape.
        * @see {@link GetWorkflowCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetWorkflowCommand extends $Command<GetWorkflowCommandInput, GetWorkflowCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetWorkflowCommandInput;
            constructor(input: GetWorkflowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkflowCommandInput, GetWorkflowCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetWorkflowRunRequest, GetWorkflowRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetWorkflowRunCommandInput extends GetWorkflowRunRequest {
    }
    export interface GetWorkflowRunCommandOutput extends GetWorkflowRunResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the metadata for a given workflow run. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetWorkflowRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetWorkflowRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetWorkflowRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkflowRunCommandInput} for command's `input` shape.
        * @see {@link GetWorkflowRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetWorkflowRunCommand extends $Command<GetWorkflowRunCommandInput, GetWorkflowRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetWorkflowRunCommandInput;
            constructor(input: GetWorkflowRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkflowRunCommandInput, GetWorkflowRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetWorkflowRunPropertiesRequest, GetWorkflowRunPropertiesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetWorkflowRunPropertiesCommandInput extends GetWorkflowRunPropertiesRequest {
    }
    export interface GetWorkflowRunPropertiesCommandOutput extends GetWorkflowRunPropertiesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the workflow run properties which were set during the run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetWorkflowRunPropertiesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetWorkflowRunPropertiesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetWorkflowRunPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkflowRunPropertiesCommandInput} for command's `input` shape.
        * @see {@link GetWorkflowRunPropertiesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetWorkflowRunPropertiesCommand extends $Command<GetWorkflowRunPropertiesCommandInput, GetWorkflowRunPropertiesCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetWorkflowRunPropertiesCommandInput;
            constructor(input: GetWorkflowRunPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkflowRunPropertiesCommandInput, GetWorkflowRunPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { GetWorkflowRunsRequest, GetWorkflowRunsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface GetWorkflowRunsCommandInput extends GetWorkflowRunsRequest {
    }
    export interface GetWorkflowRunsCommandOutput extends GetWorkflowRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata for all runs of a given workflow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, GetWorkflowRunsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, GetWorkflowRunsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new GetWorkflowRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorkflowRunsCommandInput} for command's `input` shape.
        * @see {@link GetWorkflowRunsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class GetWorkflowRunsCommand extends $Command<GetWorkflowRunsCommandInput, GetWorkflowRunsCommandOutput, GlueClientResolvedConfig> {
            readonly input: GetWorkflowRunsCommandInput;
            constructor(input: GetWorkflowRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorkflowRunsCommandInput, GetWorkflowRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ImportCatalogToGlueCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ImportCatalogToGlueRequest, ImportCatalogToGlueResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ImportCatalogToGlueCommandInput extends ImportCatalogToGlueRequest {
    }
    export interface ImportCatalogToGlueCommandOutput extends ImportCatalogToGlueResponse, __MetadataBearer {
    }
    /**
        * <p>Imports an existing Amazon Athena Data Catalog to Glue.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ImportCatalogToGlueCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ImportCatalogToGlueCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ImportCatalogToGlueCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportCatalogToGlueCommandInput} for command's `input` shape.
        * @see {@link ImportCatalogToGlueCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ImportCatalogToGlueCommand extends $Command<ImportCatalogToGlueCommandInput, ImportCatalogToGlueCommandOutput, GlueClientResolvedConfig> {
            readonly input: ImportCatalogToGlueCommandInput;
            constructor(input: ImportCatalogToGlueCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportCatalogToGlueCommandInput, ImportCatalogToGlueCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListBlueprintsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListBlueprintsRequest, ListBlueprintsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListBlueprintsCommandInput extends ListBlueprintsRequest {
    }
    export interface ListBlueprintsCommandOutput extends ListBlueprintsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the blueprint names in an account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListBlueprintsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListBlueprintsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListBlueprintsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListBlueprintsCommandInput} for command's `input` shape.
        * @see {@link ListBlueprintsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListBlueprintsCommand extends $Command<ListBlueprintsCommandInput, ListBlueprintsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListBlueprintsCommandInput;
            constructor(input: ListBlueprintsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListBlueprintsCommandInput, ListBlueprintsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCrawlersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListCrawlersRequest, ListCrawlersResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListCrawlersCommandInput extends ListCrawlersRequest {
    }
    export interface ListCrawlersCommandOutput extends ListCrawlersResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the names of all crawler resources in this Amazon Web Services account, or the
        *       resources with the specified tag. This operation allows you to see which
        *       resources are available in your account, and their names.</p>
        *
        *          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
        *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
        *       filtering, only resources with the tag are retrieved.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListCrawlersCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListCrawlersCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListCrawlersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCrawlersCommandInput} for command's `input` shape.
        * @see {@link ListCrawlersCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListCrawlersCommand extends $Command<ListCrawlersCommandInput, ListCrawlersCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListCrawlersCommandInput;
            constructor(input: ListCrawlersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCrawlersCommandInput, ListCrawlersCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCrawlsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListCrawlsRequest, ListCrawlsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListCrawlsCommandInput extends ListCrawlsRequest {
    }
    export interface ListCrawlsCommandOutput extends ListCrawlsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all the crawls of a specified crawler. Returns only the crawls that have occurred since the launch date of the crawler history feature, and only retains up to 12 months of crawls. Older crawls will not be returned.</p>
        *
        * 	        <p>You may use this API to:</p>
        * 	        <ul>
        *             <li>
        *                <p>Retrive all the crawls of a specified crawler.</p>
        *             </li>
        *             <li>
        *                <p>Retrieve all the crawls of a specified crawler within a limited count.</p>
        *             </li>
        *             <li>
        *                <p>Retrieve all the crawls of a specified crawler in a specific time range.</p>
        *             </li>
        *             <li>
        *                <p>Retrieve all the crawls of a specified crawler with a particular state, crawl ID, or DPU hour value.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListCrawlsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListCrawlsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListCrawlsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCrawlsCommandInput} for command's `input` shape.
        * @see {@link ListCrawlsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListCrawlsCommand extends $Command<ListCrawlsCommandInput, ListCrawlsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListCrawlsCommandInput;
            constructor(input: ListCrawlsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCrawlsCommandInput, ListCrawlsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCustomEntityTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListCustomEntityTypesRequest, ListCustomEntityTypesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListCustomEntityTypesCommandInput extends ListCustomEntityTypesRequest {
    }
    export interface ListCustomEntityTypesCommandOutput extends ListCustomEntityTypesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the custom patterns that have been created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListCustomEntityTypesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListCustomEntityTypesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListCustomEntityTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCustomEntityTypesCommandInput} for command's `input` shape.
        * @see {@link ListCustomEntityTypesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListCustomEntityTypesCommand extends $Command<ListCustomEntityTypesCommandInput, ListCustomEntityTypesCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListCustomEntityTypesCommandInput;
            constructor(input: ListCustomEntityTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCustomEntityTypesCommandInput, ListCustomEntityTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListDevEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListDevEndpointsRequest, ListDevEndpointsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListDevEndpointsCommandInput extends ListDevEndpointsRequest {
    }
    export interface ListDevEndpointsCommandOutput extends ListDevEndpointsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the names of all <code>DevEndpoint</code> resources in this Amazon Web Services account, or the
        *       resources with the specified tag. This operation allows you to see which resources are
        *       available in your account, and their names.</p>
        *
        *          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
        *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
        *       filtering, only resources with the tag are retrieved.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListDevEndpointsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListDevEndpointsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListDevEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevEndpointsCommandInput} for command's `input` shape.
        * @see {@link ListDevEndpointsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListDevEndpointsCommand extends $Command<ListDevEndpointsCommandInput, ListDevEndpointsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListDevEndpointsCommandInput;
            constructor(input: ListDevEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevEndpointsCommandInput, ListDevEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListJobsRequest, ListJobsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListJobsCommandInput extends ListJobsRequest {
    }
    export interface ListJobsCommandOutput extends ListJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the names of all job resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p>
        *
        * 	        <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
        *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
        *       filtering, only resources with the tag are retrieved.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListJobsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListJobsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJobsCommandInput} for command's `input` shape.
        * @see {@link ListJobsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListJobsCommand extends $Command<ListJobsCommandInput, ListJobsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListJobsCommandInput;
            constructor(input: ListJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJobsCommandInput, ListJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListMLTransformsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListMLTransformsRequest, ListMLTransformsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListMLTransformsCommandInput extends ListMLTransformsRequest {
    }
    export interface ListMLTransformsCommandOutput extends ListMLTransformsResponse, __MetadataBearer {
    }
    /**
        * <p> Retrieves a sortable, filterable list of existing Glue machine learning transforms in this Amazon Web Services account,
        *        or the resources with the specified tag. This operation takes the optional <code>Tags</code> field, which you can use as
        *        a filter of the responses so that tagged resources can be retrieved as a group. If you choose to use tag
        *        filtering, only resources with the tags are retrieved.
        *      </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListMLTransformsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListMLTransformsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListMLTransformsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMLTransformsCommandInput} for command's `input` shape.
        * @see {@link ListMLTransformsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListMLTransformsCommand extends $Command<ListMLTransformsCommandInput, ListMLTransformsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListMLTransformsCommandInput;
            constructor(input: ListMLTransformsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMLTransformsCommandInput, ListMLTransformsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListRegistriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListRegistriesInput, ListRegistriesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListRegistriesCommandInput extends ListRegistriesInput {
    }
    export interface ListRegistriesCommandOutput extends ListRegistriesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of registries that you have created, with minimal registry information. Registries in the <code>Deleting</code> status will not be included in the results. Empty results will be returned if there are no registries available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListRegistriesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListRegistriesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListRegistriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRegistriesCommandInput} for command's `input` shape.
        * @see {@link ListRegistriesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListRegistriesCommand extends $Command<ListRegistriesCommandInput, ListRegistriesCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListRegistriesCommandInput;
            constructor(input: ListRegistriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRegistriesCommandInput, ListRegistriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSchemasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListSchemasInput, ListSchemasResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListSchemasCommandInput extends ListSchemasInput {
    }
    export interface ListSchemasCommandOutput extends ListSchemasResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of schemas with minimal details. Schemas in Deleting status will not be included in the results. Empty results will be returned if there are no schemas available.</p>
        *          <p>When the <code>RegistryId</code> is not provided, all the schemas across registries will be part of the API response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListSchemasCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListSchemasCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListSchemasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSchemasCommandInput} for command's `input` shape.
        * @see {@link ListSchemasCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListSchemasCommand extends $Command<ListSchemasCommandInput, ListSchemasCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListSchemasCommandInput;
            constructor(input: ListSchemasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSchemasCommandInput, ListSchemasCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSchemaVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListSchemaVersionsInput, ListSchemaVersionsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListSchemaVersionsCommandInput extends ListSchemaVersionsInput {
    }
    export interface ListSchemaVersionsCommandOutput extends ListSchemaVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of schema versions that you have created, with minimal information. Schema versions in Deleted status will not be included in the results. Empty results will be returned if there are no schema versions available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListSchemaVersionsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListSchemaVersionsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListSchemaVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSchemaVersionsCommandInput} for command's `input` shape.
        * @see {@link ListSchemaVersionsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListSchemaVersionsCommand extends $Command<ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListSchemaVersionsCommandInput;
            constructor(input: ListSchemaVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSessionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListSessionsRequest, ListSessionsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListSessionsCommandInput extends ListSessionsRequest {
    }
    export interface ListSessionsCommandOutput extends ListSessionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieve a list of sessions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListSessionsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListSessionsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListSessionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSessionsCommandInput} for command's `input` shape.
        * @see {@link ListSessionsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListSessionsCommand extends $Command<ListSessionsCommandInput, ListSessionsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListSessionsCommandInput;
            constructor(input: ListSessionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSessionsCommandInput, ListSessionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListStatementsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListStatementsRequest, ListStatementsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListStatementsCommandInput extends ListStatementsRequest {
    }
    export interface ListStatementsCommandOutput extends ListStatementsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists statements for the session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListStatementsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListStatementsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListStatementsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStatementsCommandInput} for command's `input` shape.
        * @see {@link ListStatementsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListStatementsCommand extends $Command<ListStatementsCommandInput, ListStatementsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListStatementsCommandInput;
            constructor(input: ListStatementsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStatementsCommandInput, ListStatementsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListTriggersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListTriggersRequest, ListTriggersResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListTriggersCommandInput extends ListTriggersRequest {
    }
    export interface ListTriggersCommandOutput extends ListTriggersResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the names of all trigger resources in this Amazon Web Services account, or the resources with the specified tag. This operation allows you to see which resources are available in your account, and their names.</p>
        *
        *          <p>This operation takes the optional <code>Tags</code> field, which you can use as a filter on
        *       the response so that tagged resources can be retrieved as a group. If you choose to use tags
        *       filtering, only resources with the tag are retrieved.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListTriggersCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListTriggersCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListTriggersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTriggersCommandInput} for command's `input` shape.
        * @see {@link ListTriggersCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListTriggersCommand extends $Command<ListTriggersCommandInput, ListTriggersCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListTriggersCommandInput;
            constructor(input: ListTriggersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTriggersCommandInput, ListTriggersCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListWorkflowsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ListWorkflowsRequest, ListWorkflowsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface ListWorkflowsCommandInput extends ListWorkflowsRequest {
    }
    export interface ListWorkflowsCommandOutput extends ListWorkflowsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists names of workflows created in the account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ListWorkflowsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ListWorkflowsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ListWorkflowsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkflowsCommandInput} for command's `input` shape.
        * @see {@link ListWorkflowsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ListWorkflowsCommand extends $Command<ListWorkflowsCommandInput, ListWorkflowsCommandOutput, GlueClientResolvedConfig> {
            readonly input: ListWorkflowsCommandInput;
            constructor(input: ListWorkflowsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkflowsCommandInput, ListWorkflowsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutDataCatalogEncryptionSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { PutDataCatalogEncryptionSettingsRequest, PutDataCatalogEncryptionSettingsResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface PutDataCatalogEncryptionSettingsCommandInput extends PutDataCatalogEncryptionSettingsRequest {
    }
    export interface PutDataCatalogEncryptionSettingsCommandOutput extends PutDataCatalogEncryptionSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the security configuration for a specified catalog. After the configuration has been
        *       set, the specified encryption is applied to every catalog write thereafter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, PutDataCatalogEncryptionSettingsCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, PutDataCatalogEncryptionSettingsCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new PutDataCatalogEncryptionSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDataCatalogEncryptionSettingsCommandInput} for command's `input` shape.
        * @see {@link PutDataCatalogEncryptionSettingsCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class PutDataCatalogEncryptionSettingsCommand extends $Command<PutDataCatalogEncryptionSettingsCommandInput, PutDataCatalogEncryptionSettingsCommandOutput, GlueClientResolvedConfig> {
            readonly input: PutDataCatalogEncryptionSettingsCommandInput;
            constructor(input: PutDataCatalogEncryptionSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDataCatalogEncryptionSettingsCommandInput, PutDataCatalogEncryptionSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { PutResourcePolicyRequest, PutResourcePolicyResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface PutResourcePolicyCommandInput extends PutResourcePolicyRequest {
    }
    export interface PutResourcePolicyCommandOutput extends PutResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the Data Catalog resource policy for access control.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, PutResourcePolicyCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, PutResourcePolicyCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new PutResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link PutResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class PutResourcePolicyCommand extends $Command<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput, GlueClientResolvedConfig> {
            readonly input: PutResourcePolicyCommandInput;
            constructor(input: PutResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutSchemaVersionMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { PutSchemaVersionMetadataInput, PutSchemaVersionMetadataResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface PutSchemaVersionMetadataCommandInput extends PutSchemaVersionMetadataInput {
    }
    export interface PutSchemaVersionMetadataCommandOutput extends PutSchemaVersionMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Puts the metadata key value pair for a specified schema version ID. A maximum of 10 key value pairs will be allowed per schema version. They can be added over one or more calls.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, PutSchemaVersionMetadataCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, PutSchemaVersionMetadataCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new PutSchemaVersionMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutSchemaVersionMetadataCommandInput} for command's `input` shape.
        * @see {@link PutSchemaVersionMetadataCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class PutSchemaVersionMetadataCommand extends $Command<PutSchemaVersionMetadataCommandInput, PutSchemaVersionMetadataCommandOutput, GlueClientResolvedConfig> {
            readonly input: PutSchemaVersionMetadataCommandInput;
            constructor(input: PutSchemaVersionMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutSchemaVersionMetadataCommandInput, PutSchemaVersionMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutWorkflowRunPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { PutWorkflowRunPropertiesRequest, PutWorkflowRunPropertiesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface PutWorkflowRunPropertiesCommandInput extends PutWorkflowRunPropertiesRequest {
    }
    export interface PutWorkflowRunPropertiesCommandOutput extends PutWorkflowRunPropertiesResponse, __MetadataBearer {
    }
    /**
        * <p>Puts the specified workflow run properties for the given workflow run. If a property already exists for the specified run, then it overrides the value otherwise adds the property to existing properties.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, PutWorkflowRunPropertiesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, PutWorkflowRunPropertiesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new PutWorkflowRunPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutWorkflowRunPropertiesCommandInput} for command's `input` shape.
        * @see {@link PutWorkflowRunPropertiesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class PutWorkflowRunPropertiesCommand extends $Command<PutWorkflowRunPropertiesCommandInput, PutWorkflowRunPropertiesCommandOutput, GlueClientResolvedConfig> {
            readonly input: PutWorkflowRunPropertiesCommandInput;
            constructor(input: PutWorkflowRunPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutWorkflowRunPropertiesCommandInput, PutWorkflowRunPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/QuerySchemaVersionMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { QuerySchemaVersionMetadataInput, QuerySchemaVersionMetadataResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface QuerySchemaVersionMetadataCommandInput extends QuerySchemaVersionMetadataInput {
    }
    export interface QuerySchemaVersionMetadataCommandOutput extends QuerySchemaVersionMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Queries for the schema version metadata information. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, QuerySchemaVersionMetadataCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, QuerySchemaVersionMetadataCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new QuerySchemaVersionMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link QuerySchemaVersionMetadataCommandInput} for command's `input` shape.
        * @see {@link QuerySchemaVersionMetadataCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class QuerySchemaVersionMetadataCommand extends $Command<QuerySchemaVersionMetadataCommandInput, QuerySchemaVersionMetadataCommandOutput, GlueClientResolvedConfig> {
            readonly input: QuerySchemaVersionMetadataCommandInput;
            constructor(input: QuerySchemaVersionMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<QuerySchemaVersionMetadataCommandInput, QuerySchemaVersionMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RegisterSchemaVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { RegisterSchemaVersionInput, RegisterSchemaVersionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface RegisterSchemaVersionCommandInput extends RegisterSchemaVersionInput {
    }
    export interface RegisterSchemaVersionCommandOutput extends RegisterSchemaVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a new version to the existing schema. Returns an error if new version of schema does not meet the compatibility requirements of the schema set. This API will not create a new schema set and will return a 404 error if the schema set is not already present in the Schema Registry.</p>
        *          <p>If this is the first schema definition to be registered in the Schema Registry, this API will store the schema version and return immediately. Otherwise, this call has the potential to run longer than other operations due to compatibility modes. You can call the <code>GetSchemaVersion</code> API with the <code>SchemaVersionId</code> to check compatibility modes.</p>
        * 	        <p>If the same schema definition is already stored in Schema Registry as a version, the schema ID of the existing schema is returned to the caller.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, RegisterSchemaVersionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, RegisterSchemaVersionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new RegisterSchemaVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterSchemaVersionCommandInput} for command's `input` shape.
        * @see {@link RegisterSchemaVersionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class RegisterSchemaVersionCommand extends $Command<RegisterSchemaVersionCommandInput, RegisterSchemaVersionCommandOutput, GlueClientResolvedConfig> {
            readonly input: RegisterSchemaVersionCommandInput;
            constructor(input: RegisterSchemaVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterSchemaVersionCommandInput, RegisterSchemaVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RemoveSchemaVersionMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { RemoveSchemaVersionMetadataInput, RemoveSchemaVersionMetadataResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface RemoveSchemaVersionMetadataCommandInput extends RemoveSchemaVersionMetadataInput {
    }
    export interface RemoveSchemaVersionMetadataCommandOutput extends RemoveSchemaVersionMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a key value pair from the schema version metadata for the specified schema version ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, RemoveSchemaVersionMetadataCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, RemoveSchemaVersionMetadataCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new RemoveSchemaVersionMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveSchemaVersionMetadataCommandInput} for command's `input` shape.
        * @see {@link RemoveSchemaVersionMetadataCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class RemoveSchemaVersionMetadataCommand extends $Command<RemoveSchemaVersionMetadataCommandInput, RemoveSchemaVersionMetadataCommandOutput, GlueClientResolvedConfig> {
            readonly input: RemoveSchemaVersionMetadataCommandInput;
            constructor(input: RemoveSchemaVersionMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveSchemaVersionMetadataCommandInput, RemoveSchemaVersionMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ResetJobBookmarkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ResetJobBookmarkRequest, ResetJobBookmarkResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface ResetJobBookmarkCommandInput extends ResetJobBookmarkRequest {
    }
    export interface ResetJobBookmarkCommandOutput extends ResetJobBookmarkResponse, __MetadataBearer {
    }
    /**
        * <p>Resets a bookmark entry.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ResetJobBookmarkCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ResetJobBookmarkCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ResetJobBookmarkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetJobBookmarkCommandInput} for command's `input` shape.
        * @see {@link ResetJobBookmarkCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ResetJobBookmarkCommand extends $Command<ResetJobBookmarkCommandInput, ResetJobBookmarkCommandOutput, GlueClientResolvedConfig> {
            readonly input: ResetJobBookmarkCommandInput;
            constructor(input: ResetJobBookmarkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetJobBookmarkCommandInput, ResetJobBookmarkCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ResumeWorkflowRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { ResumeWorkflowRunRequest, ResumeWorkflowRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface ResumeWorkflowRunCommandInput extends ResumeWorkflowRunRequest {
    }
    export interface ResumeWorkflowRunCommandOutput extends ResumeWorkflowRunResponse, __MetadataBearer {
    }
    /**
        * <p>Restarts selected nodes of a previous partially completed workflow run and resumes the workflow run. The selected nodes and all nodes that are downstream from the selected nodes are run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, ResumeWorkflowRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, ResumeWorkflowRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new ResumeWorkflowRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResumeWorkflowRunCommandInput} for command's `input` shape.
        * @see {@link ResumeWorkflowRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class ResumeWorkflowRunCommand extends $Command<ResumeWorkflowRunCommandInput, ResumeWorkflowRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: ResumeWorkflowRunCommandInput;
            constructor(input: ResumeWorkflowRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResumeWorkflowRunCommandInput, ResumeWorkflowRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RunStatementCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { RunStatementRequest, RunStatementResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface RunStatementCommandInput extends RunStatementRequest {
    }
    export interface RunStatementCommandOutput extends RunStatementResponse, __MetadataBearer {
    }
    /**
        * <p>Executes the statement.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, RunStatementCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, RunStatementCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new RunStatementCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RunStatementCommandInput} for command's `input` shape.
        * @see {@link RunStatementCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class RunStatementCommand extends $Command<RunStatementCommandInput, RunStatementCommandOutput, GlueClientResolvedConfig> {
            readonly input: RunStatementCommandInput;
            constructor(input: RunStatementCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RunStatementCommandInput, RunStatementCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/SearchTablesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { SearchTablesRequest, SearchTablesResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface SearchTablesCommandInput extends SearchTablesRequest {
    }
    export interface SearchTablesCommandOutput extends SearchTablesResponse, __MetadataBearer {
    }
    /**
        * <p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p>
        *          <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, SearchTablesCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, SearchTablesCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new SearchTablesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchTablesCommandInput} for command's `input` shape.
        * @see {@link SearchTablesCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class SearchTablesCommand extends $Command<SearchTablesCommandInput, SearchTablesCommandOutput, GlueClientResolvedConfig> {
            readonly input: SearchTablesCommandInput;
            constructor(input: SearchTablesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchTablesCommandInput, SearchTablesCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartBlueprintRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartBlueprintRunRequest, StartBlueprintRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartBlueprintRunCommandInput extends StartBlueprintRunRequest {
    }
    export interface StartBlueprintRunCommandOutput extends StartBlueprintRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a new run of the specified blueprint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartBlueprintRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartBlueprintRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartBlueprintRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartBlueprintRunCommandInput} for command's `input` shape.
        * @see {@link StartBlueprintRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartBlueprintRunCommand extends $Command<StartBlueprintRunCommandInput, StartBlueprintRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartBlueprintRunCommandInput;
            constructor(input: StartBlueprintRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartBlueprintRunCommandInput, StartBlueprintRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartCrawlerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartCrawlerRequest, StartCrawlerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartCrawlerCommandInput extends StartCrawlerRequest {
    }
    export interface StartCrawlerCommandOutput extends StartCrawlerResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a crawl using the specified crawler, regardless
        *       of what is scheduled. If the crawler is already running, returns a
        *       <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException">CrawlerRunningException</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartCrawlerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartCrawlerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartCrawlerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartCrawlerCommandInput} for command's `input` shape.
        * @see {@link StartCrawlerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartCrawlerCommand extends $Command<StartCrawlerCommandInput, StartCrawlerCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartCrawlerCommandInput;
            constructor(input: StartCrawlerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartCrawlerCommandInput, StartCrawlerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartCrawlerScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartCrawlerScheduleRequest, StartCrawlerScheduleResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartCrawlerScheduleCommandInput extends StartCrawlerScheduleRequest {
    }
    export interface StartCrawlerScheduleCommandOutput extends StartCrawlerScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Changes the schedule state of the specified crawler to
        *       <code>SCHEDULED</code>, unless the crawler is already running or the
        *       schedule state is already <code>SCHEDULED</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartCrawlerScheduleCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartCrawlerScheduleCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartCrawlerScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartCrawlerScheduleCommandInput} for command's `input` shape.
        * @see {@link StartCrawlerScheduleCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartCrawlerScheduleCommand extends $Command<StartCrawlerScheduleCommandInput, StartCrawlerScheduleCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartCrawlerScheduleCommandInput;
            constructor(input: StartCrawlerScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartCrawlerScheduleCommandInput, StartCrawlerScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartExportLabelsTaskRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartExportLabelsTaskRunRequest, StartExportLabelsTaskRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartExportLabelsTaskRunCommandInput extends StartExportLabelsTaskRunRequest {
    }
    export interface StartExportLabelsTaskRunCommandOutput extends StartExportLabelsTaskRunResponse, __MetadataBearer {
    }
    /**
        * <p>Begins an asynchronous task to export all labeled data for a particular transform. This
        *       task is the only label-related API call that is not part of the typical active learning
        *       workflow. You typically use <code>StartExportLabelsTaskRun</code> when you want to work with
        *       all of your existing labels at the same time, such as when you want to remove or change labels
        *       that were previously submitted as truth. This API operation accepts the
        *         <code>TransformId</code> whose labels you want to export and an Amazon Simple Storage
        *       Service (Amazon S3) path to export the labels to. The operation returns a
        *         <code>TaskRunId</code>. You can check on the status of your task run by calling the
        *         <code>GetMLTaskRun</code> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartExportLabelsTaskRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartExportLabelsTaskRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartExportLabelsTaskRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartExportLabelsTaskRunCommandInput} for command's `input` shape.
        * @see {@link StartExportLabelsTaskRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartExportLabelsTaskRunCommand extends $Command<StartExportLabelsTaskRunCommandInput, StartExportLabelsTaskRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartExportLabelsTaskRunCommandInput;
            constructor(input: StartExportLabelsTaskRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartExportLabelsTaskRunCommandInput, StartExportLabelsTaskRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartImportLabelsTaskRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartImportLabelsTaskRunRequest, StartImportLabelsTaskRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartImportLabelsTaskRunCommandInput extends StartImportLabelsTaskRunRequest {
    }
    export interface StartImportLabelsTaskRunCommandOutput extends StartImportLabelsTaskRunResponse, __MetadataBearer {
    }
    /**
        * <p>Enables you to provide additional labels (examples of truth) to be used to teach the
        *       machine learning transform and improve its quality. This API operation is generally used as
        *       part of the active learning workflow that starts with the
        *         <code>StartMLLabelingSetGenerationTaskRun</code> call and that ultimately results in
        *       improving the quality of your machine learning transform. </p>
        *
        *          <p>After the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue machine learning
        *       will have generated a series of questions for humans to answer. (Answering these questions is
        *       often called 'labeling' in the machine learning workflows). In the case of the
        *         <code>FindMatches</code> transform, these questions are of the form, “What is the correct
        *       way to group these rows together into groups composed entirely of matching records?” After the
        *       labeling process is finished, users upload their answers/labels with a call to
        *         <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes,
        *       all future runs of the machine learning transform use the new and improved labels and perform
        *       a higher-quality transformation.</p>
        *
        *          <p>By default, <code>StartMLLabelingSetGenerationTaskRun</code> continually learns from and
        *       combines all labels that you upload unless you set <code>Replace</code> to true. If you set
        *         <code>Replace</code> to true, <code>StartImportLabelsTaskRun</code> deletes and forgets all
        *       previously uploaded labels and learns only from the exact set that you upload. Replacing
        *       labels can be helpful if you realize that you previously uploaded incorrect labels, and you
        *       believe that they are having a negative effect on your transform quality.</p>
        *
        *          <p>You can check on the status of your task run by calling the <code>GetMLTaskRun</code>
        *       operation. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartImportLabelsTaskRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartImportLabelsTaskRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartImportLabelsTaskRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartImportLabelsTaskRunCommandInput} for command's `input` shape.
        * @see {@link StartImportLabelsTaskRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartImportLabelsTaskRunCommand extends $Command<StartImportLabelsTaskRunCommandInput, StartImportLabelsTaskRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartImportLabelsTaskRunCommandInput;
            constructor(input: StartImportLabelsTaskRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartImportLabelsTaskRunCommandInput, StartImportLabelsTaskRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartJobRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartJobRunRequest, StartJobRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartJobRunCommandInput extends StartJobRunRequest {
    }
    export interface StartJobRunCommandOutput extends StartJobRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a job run using a job definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartJobRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartJobRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartJobRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartJobRunCommandInput} for command's `input` shape.
        * @see {@link StartJobRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartJobRunCommand extends $Command<StartJobRunCommandInput, StartJobRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartJobRunCommandInput;
            constructor(input: StartJobRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartJobRunCommandInput, StartJobRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartMLEvaluationTaskRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartMLEvaluationTaskRunRequest, StartMLEvaluationTaskRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartMLEvaluationTaskRunCommandInput extends StartMLEvaluationTaskRunRequest {
    }
    export interface StartMLEvaluationTaskRunCommandOutput extends StartMLEvaluationTaskRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a task to estimate the quality of the transform. </p>
        *
        * 	        <p>When you provide label sets as examples of truth, Glue machine learning uses some of
        *       those examples to learn from them. The rest of the labels are used as a test to estimate
        *       quality.</p>
        *
        * 	        <p>Returns a unique identifier for the run. You can call <code>GetMLTaskRun</code> to get more
        *       information about the stats of the <code>EvaluationTaskRun</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartMLEvaluationTaskRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartMLEvaluationTaskRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartMLEvaluationTaskRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartMLEvaluationTaskRunCommandInput} for command's `input` shape.
        * @see {@link StartMLEvaluationTaskRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartMLEvaluationTaskRunCommand extends $Command<StartMLEvaluationTaskRunCommandInput, StartMLEvaluationTaskRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartMLEvaluationTaskRunCommandInput;
            constructor(input: StartMLEvaluationTaskRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartMLEvaluationTaskRunCommandInput, StartMLEvaluationTaskRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartMLLabelingSetGenerationTaskRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartMLLabelingSetGenerationTaskRunRequest, StartMLLabelingSetGenerationTaskRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartMLLabelingSetGenerationTaskRunCommandInput extends StartMLLabelingSetGenerationTaskRunRequest {
    }
    export interface StartMLLabelingSetGenerationTaskRunCommandOutput extends StartMLLabelingSetGenerationTaskRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the active learning workflow for your machine learning transform to improve the
        *       transform's quality by generating label sets and adding labels.</p>
        *
        * 	        <p>When the <code>StartMLLabelingSetGenerationTaskRun</code> finishes, Glue will have
        *       generated a "labeling set" or a set of questions for humans to answer.</p>
        *
        *          <p>In the case of the <code>FindMatches</code> transform, these questions are of the form,
        *       “What is the correct way to group these rows together into groups composed entirely of
        *       matching records?” </p>
        *
        *          <p>After the labeling process is finished, you can upload your labels with a call to
        *         <code>StartImportLabelsTaskRun</code>. After <code>StartImportLabelsTaskRun</code> finishes,
        *       all future runs of the machine learning transform will use the new and improved labels and
        *       perform a higher-quality transformation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartMLLabelingSetGenerationTaskRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartMLLabelingSetGenerationTaskRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartMLLabelingSetGenerationTaskRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartMLLabelingSetGenerationTaskRunCommandInput} for command's `input` shape.
        * @see {@link StartMLLabelingSetGenerationTaskRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartMLLabelingSetGenerationTaskRunCommand extends $Command<StartMLLabelingSetGenerationTaskRunCommandInput, StartMLLabelingSetGenerationTaskRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartMLLabelingSetGenerationTaskRunCommandInput;
            constructor(input: StartMLLabelingSetGenerationTaskRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartMLLabelingSetGenerationTaskRunCommandInput, StartMLLabelingSetGenerationTaskRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartTriggerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartTriggerRequest, StartTriggerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartTriggerCommandInput extends StartTriggerRequest {
    }
    export interface StartTriggerCommandOutput extends StartTriggerResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an existing trigger. See <a href="https://docs.aws.amazon.com/glue/latest/dg/trigger-job.html">Triggering
        *       Jobs</a> for information about how different types of trigger are
        *       started.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartTriggerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartTriggerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartTriggerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartTriggerCommandInput} for command's `input` shape.
        * @see {@link StartTriggerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartTriggerCommand extends $Command<StartTriggerCommandInput, StartTriggerCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartTriggerCommandInput;
            constructor(input: StartTriggerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartTriggerCommandInput, StartTriggerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartWorkflowRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StartWorkflowRunRequest, StartWorkflowRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StartWorkflowRunCommandInput extends StartWorkflowRunRequest {
    }
    export interface StartWorkflowRunCommandOutput extends StartWorkflowRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a new run of the specified workflow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StartWorkflowRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StartWorkflowRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StartWorkflowRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartWorkflowRunCommandInput} for command's `input` shape.
        * @see {@link StartWorkflowRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StartWorkflowRunCommand extends $Command<StartWorkflowRunCommandInput, StartWorkflowRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StartWorkflowRunCommandInput;
            constructor(input: StartWorkflowRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartWorkflowRunCommandInput, StartWorkflowRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopCrawlerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StopCrawlerRequest, StopCrawlerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StopCrawlerCommandInput extends StopCrawlerRequest {
    }
    export interface StopCrawlerCommandOutput extends StopCrawlerResponse, __MetadataBearer {
    }
    /**
        * <p>If the specified crawler is running, stops the crawl.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StopCrawlerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StopCrawlerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StopCrawlerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopCrawlerCommandInput} for command's `input` shape.
        * @see {@link StopCrawlerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StopCrawlerCommand extends $Command<StopCrawlerCommandInput, StopCrawlerCommandOutput, GlueClientResolvedConfig> {
            readonly input: StopCrawlerCommandInput;
            constructor(input: StopCrawlerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopCrawlerCommandInput, StopCrawlerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopCrawlerScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StopCrawlerScheduleRequest, StopCrawlerScheduleResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StopCrawlerScheduleCommandInput extends StopCrawlerScheduleRequest {
    }
    export interface StopCrawlerScheduleCommandOutput extends StopCrawlerScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the schedule state of the specified crawler to
        *       <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is
        *       already running.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StopCrawlerScheduleCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StopCrawlerScheduleCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StopCrawlerScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopCrawlerScheduleCommandInput} for command's `input` shape.
        * @see {@link StopCrawlerScheduleCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StopCrawlerScheduleCommand extends $Command<StopCrawlerScheduleCommandInput, StopCrawlerScheduleCommandOutput, GlueClientResolvedConfig> {
            readonly input: StopCrawlerScheduleCommandInput;
            constructor(input: StopCrawlerScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopCrawlerScheduleCommandInput, StopCrawlerScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StopSessionRequest, StopSessionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StopSessionCommandInput extends StopSessionRequest {
    }
    export interface StopSessionCommandOutput extends StopSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StopSessionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StopSessionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StopSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopSessionCommandInput} for command's `input` shape.
        * @see {@link StopSessionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StopSessionCommand extends $Command<StopSessionCommandInput, StopSessionCommandOutput, GlueClientResolvedConfig> {
            readonly input: StopSessionCommandInput;
            constructor(input: StopSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopSessionCommandInput, StopSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopTriggerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StopTriggerRequest, StopTriggerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StopTriggerCommandInput extends StopTriggerRequest {
    }
    export interface StopTriggerCommandOutput extends StopTriggerResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a specified trigger.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StopTriggerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StopTriggerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StopTriggerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopTriggerCommandInput} for command's `input` shape.
        * @see {@link StopTriggerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StopTriggerCommand extends $Command<StopTriggerCommandInput, StopTriggerCommandOutput, GlueClientResolvedConfig> {
            readonly input: StopTriggerCommandInput;
            constructor(input: StopTriggerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopTriggerCommandInput, StopTriggerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopWorkflowRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { StopWorkflowRunRequest, StopWorkflowRunResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface StopWorkflowRunCommandInput extends StopWorkflowRunRequest {
    }
    export interface StopWorkflowRunCommandOutput extends StopWorkflowRunResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the execution of the specified workflow run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, StopWorkflowRunCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, StopWorkflowRunCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new StopWorkflowRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopWorkflowRunCommandInput} for command's `input` shape.
        * @see {@link StopWorkflowRunCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class StopWorkflowRunCommand extends $Command<StopWorkflowRunCommandInput, StopWorkflowRunCommandOutput, GlueClientResolvedConfig> {
            readonly input: StopWorkflowRunCommandInput;
            constructor(input: StopWorkflowRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopWorkflowRunCommandInput, StopWorkflowRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds tags to a resource. A tag is a label you can assign to an Amazon Web Services resource.
        *       In Glue, you can tag only certain resources. For information about what
        *       resources you can tag, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, TagResourceCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, TagResourceCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, GlueClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UntagResourceCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UntagResourceCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, GlueClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateBlueprintCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateBlueprintRequest, UpdateBlueprintResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateBlueprintCommandInput extends UpdateBlueprintRequest {
    }
    export interface UpdateBlueprintCommandOutput extends UpdateBlueprintResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a registered blueprint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateBlueprintCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateBlueprintCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateBlueprintCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBlueprintCommandInput} for command's `input` shape.
        * @see {@link UpdateBlueprintCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateBlueprintCommand extends $Command<UpdateBlueprintCommandInput, UpdateBlueprintCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateBlueprintCommandInput;
            constructor(input: UpdateBlueprintCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBlueprintCommandInput, UpdateBlueprintCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateClassifierCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateClassifierRequest, UpdateClassifierResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateClassifierCommandInput extends UpdateClassifierRequest {
    }
    export interface UpdateClassifierCommandOutput extends UpdateClassifierResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing classifier (a <code>GrokClassifier</code>,
        *       an <code>XMLClassifier</code>, a <code>JsonClassifier</code>, or a <code>CsvClassifier</code>, depending on
        *       which field is present).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateClassifierCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateClassifierCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateClassifierCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateClassifierCommandInput} for command's `input` shape.
        * @see {@link UpdateClassifierCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateClassifierCommand extends $Command<UpdateClassifierCommandInput, UpdateClassifierCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateClassifierCommandInput;
            constructor(input: UpdateClassifierCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateClassifierCommandInput, UpdateClassifierCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateColumnStatisticsForPartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateColumnStatisticsForPartitionRequest, UpdateColumnStatisticsForPartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateColumnStatisticsForPartitionCommandInput extends UpdateColumnStatisticsForPartitionRequest {
    }
    export interface UpdateColumnStatisticsForPartitionCommandOutput extends UpdateColumnStatisticsForPartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates partition statistics of columns.</p>
        *
        *          <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdatePartition</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateColumnStatisticsForPartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateColumnStatisticsForPartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateColumnStatisticsForPartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateColumnStatisticsForPartitionCommandInput} for command's `input` shape.
        * @see {@link UpdateColumnStatisticsForPartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateColumnStatisticsForPartitionCommand extends $Command<UpdateColumnStatisticsForPartitionCommandInput, UpdateColumnStatisticsForPartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateColumnStatisticsForPartitionCommandInput;
            constructor(input: UpdateColumnStatisticsForPartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateColumnStatisticsForPartitionCommandInput, UpdateColumnStatisticsForPartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateColumnStatisticsForTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateColumnStatisticsForTableRequest, UpdateColumnStatisticsForTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateColumnStatisticsForTableCommandInput extends UpdateColumnStatisticsForTableRequest {
    }
    export interface UpdateColumnStatisticsForTableCommandOutput extends UpdateColumnStatisticsForTableResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates table statistics of columns.</p>
        *
        * 	        <p>The Identity and Access Management (IAM) permission required for this operation is <code>UpdateTable</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateColumnStatisticsForTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateColumnStatisticsForTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateColumnStatisticsForTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateColumnStatisticsForTableCommandInput} for command's `input` shape.
        * @see {@link UpdateColumnStatisticsForTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateColumnStatisticsForTableCommand extends $Command<UpdateColumnStatisticsForTableCommandInput, UpdateColumnStatisticsForTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateColumnStatisticsForTableCommandInput;
            constructor(input: UpdateColumnStatisticsForTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateColumnStatisticsForTableCommandInput, UpdateColumnStatisticsForTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateConnectionRequest, UpdateConnectionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateConnectionCommandInput extends UpdateConnectionRequest {
    }
    export interface UpdateConnectionCommandOutput extends UpdateConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a connection definition in the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateConnectionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateConnectionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectionCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateConnectionCommand extends $Command<UpdateConnectionCommandInput, UpdateConnectionCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateConnectionCommandInput;
            constructor(input: UpdateConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectionCommandInput, UpdateConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateCrawlerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateCrawlerRequest, UpdateCrawlerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateCrawlerCommandInput extends UpdateCrawlerRequest {
    }
    export interface UpdateCrawlerCommandOutput extends UpdateCrawlerResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a crawler. If a crawler is
        *       running, you must stop it using <code>StopCrawler</code> before updating
        *       it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateCrawlerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateCrawlerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateCrawlerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCrawlerCommandInput} for command's `input` shape.
        * @see {@link UpdateCrawlerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateCrawlerCommand extends $Command<UpdateCrawlerCommandInput, UpdateCrawlerCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateCrawlerCommandInput;
            constructor(input: UpdateCrawlerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCrawlerCommandInput, UpdateCrawlerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateCrawlerScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateCrawlerScheduleRequest, UpdateCrawlerScheduleResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateCrawlerScheduleCommandInput extends UpdateCrawlerScheduleRequest {
    }
    export interface UpdateCrawlerScheduleCommandOutput extends UpdateCrawlerScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the schedule of a crawler using a <code>cron</code> expression. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateCrawlerScheduleCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateCrawlerScheduleCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateCrawlerScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCrawlerScheduleCommandInput} for command's `input` shape.
        * @see {@link UpdateCrawlerScheduleCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateCrawlerScheduleCommand extends $Command<UpdateCrawlerScheduleCommandInput, UpdateCrawlerScheduleCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateCrawlerScheduleCommandInput;
            constructor(input: UpdateCrawlerScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCrawlerScheduleCommandInput, UpdateCrawlerScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateDatabaseRequest, UpdateDatabaseResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateDatabaseCommandInput extends UpdateDatabaseRequest {
    }
    export interface UpdateDatabaseCommandOutput extends UpdateDatabaseResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing database definition in a Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateDatabaseCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateDatabaseCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDatabaseCommandInput} for command's `input` shape.
        * @see {@link UpdateDatabaseCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateDatabaseCommand extends $Command<UpdateDatabaseCommandInput, UpdateDatabaseCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateDatabaseCommandInput;
            constructor(input: UpdateDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDatabaseCommandInput, UpdateDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateDevEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateDevEndpointRequest, UpdateDevEndpointResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateDevEndpointCommandInput extends UpdateDevEndpointRequest {
    }
    export interface UpdateDevEndpointCommandOutput extends UpdateDevEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a specified development endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateDevEndpointCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateDevEndpointCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateDevEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDevEndpointCommandInput} for command's `input` shape.
        * @see {@link UpdateDevEndpointCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateDevEndpointCommand extends $Command<UpdateDevEndpointCommandInput, UpdateDevEndpointCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateDevEndpointCommandInput;
            constructor(input: UpdateDevEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDevEndpointCommandInput, UpdateDevEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateJobRequest, UpdateJobResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateJobCommandInput extends UpdateJobRequest {
    }
    export interface UpdateJobCommandOutput extends UpdateJobResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing job definition. The previous job definition is completely overwritten by this information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateJobCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateJobCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateJobCommandInput} for command's `input` shape.
        * @see {@link UpdateJobCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateJobCommand extends $Command<UpdateJobCommandInput, UpdateJobCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateJobCommandInput;
            constructor(input: UpdateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateJobCommandInput, UpdateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateMLTransformCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateMLTransformRequest, UpdateMLTransformResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateMLTransformCommandInput extends UpdateMLTransformRequest {
    }
    export interface UpdateMLTransformCommandOutput extends UpdateMLTransformResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing machine learning transform. Call this operation to tune the algorithm parameters to achieve better results.</p>
        *
        *          <p>After calling this operation, you can call the <code>StartMLEvaluationTaskRun</code>
        *       operation to assess how well your new parameters achieved your goals (such as improving the
        *       quality of your machine learning transform, or making it more cost-effective).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateMLTransformCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateMLTransformCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateMLTransformCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMLTransformCommandInput} for command's `input` shape.
        * @see {@link UpdateMLTransformCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateMLTransformCommand extends $Command<UpdateMLTransformCommandInput, UpdateMLTransformCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateMLTransformCommandInput;
            constructor(input: UpdateMLTransformCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMLTransformCommandInput, UpdateMLTransformCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdatePartitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdatePartitionRequest, UpdatePartitionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdatePartitionCommandInput extends UpdatePartitionRequest {
    }
    export interface UpdatePartitionCommandOutput extends UpdatePartitionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a partition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdatePartitionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdatePartitionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdatePartitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePartitionCommandInput} for command's `input` shape.
        * @see {@link UpdatePartitionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdatePartitionCommand extends $Command<UpdatePartitionCommandInput, UpdatePartitionCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdatePartitionCommandInput;
            constructor(input: UpdatePartitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePartitionCommandInput, UpdatePartitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateRegistryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateRegistryInput, UpdateRegistryResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateRegistryCommandInput extends UpdateRegistryInput {
    }
    export interface UpdateRegistryCommandOutput extends UpdateRegistryResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing registry which is used to hold a collection of schemas. The updated properties relate to the registry, and do not modify any of the schemas within the registry. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateRegistryCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateRegistryCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateRegistryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRegistryCommandInput} for command's `input` shape.
        * @see {@link UpdateRegistryCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateRegistryCommand extends $Command<UpdateRegistryCommandInput, UpdateRegistryCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateRegistryCommandInput;
            constructor(input: UpdateRegistryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRegistryCommandInput, UpdateRegistryCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateSchemaInput, UpdateSchemaResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateSchemaCommandInput extends UpdateSchemaInput {
    }
    export interface UpdateSchemaCommandOutput extends UpdateSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the description, compatibility setting, or version checkpoint for a schema set.</p>
        * 	        <p>For updating the compatibility setting, the call will not validate compatibility for the entire set of schema versions with the new compatibility setting. If the value for <code>Compatibility</code> is provided, the <code>VersionNumber</code> (a checkpoint) is also required. The API will validate the checkpoint version number for consistency.</p>
        *          <p>If the value for the <code>VersionNumber</code> (checkpoint) is provided, <code>Compatibility</code> is optional and this can be used to set/reset a checkpoint for the schema.</p>
        * 	        <p>This update will happen only if the schema is in the AVAILABLE state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateSchemaCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateSchemaCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSchemaCommandInput} for command's `input` shape.
        * @see {@link UpdateSchemaCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateSchemaCommand extends $Command<UpdateSchemaCommandInput, UpdateSchemaCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateSchemaCommandInput;
            constructor(input: UpdateSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSchemaCommandInput, UpdateSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateTableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateTableRequest, UpdateTableResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateTableCommandInput extends UpdateTableRequest {
    }
    export interface UpdateTableCommandOutput extends UpdateTableResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a metadata table in the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateTableCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateTableCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateTableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTableCommandInput} for command's `input` shape.
        * @see {@link UpdateTableCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateTableCommand extends $Command<UpdateTableCommandInput, UpdateTableCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateTableCommandInput;
            constructor(input: UpdateTableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTableCommandInput, UpdateTableCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateTriggerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateTriggerRequest, UpdateTriggerResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateTriggerCommandInput extends UpdateTriggerRequest {
    }
    export interface UpdateTriggerCommandOutput extends UpdateTriggerResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a trigger definition.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateTriggerCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateTriggerCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateTriggerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTriggerCommandInput} for command's `input` shape.
        * @see {@link UpdateTriggerCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateTriggerCommand extends $Command<UpdateTriggerCommandInput, UpdateTriggerCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateTriggerCommandInput;
            constructor(input: UpdateTriggerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTriggerCommandInput, UpdateTriggerCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateUserDefinedFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateUserDefinedFunctionRequest, UpdateUserDefinedFunctionResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateUserDefinedFunctionCommandInput extends UpdateUserDefinedFunctionRequest {
    }
    export interface UpdateUserDefinedFunctionCommandOutput extends UpdateUserDefinedFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing function definition in the Data Catalog.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateUserDefinedFunctionCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateUserDefinedFunctionCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateUserDefinedFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserDefinedFunctionCommandInput} for command's `input` shape.
        * @see {@link UpdateUserDefinedFunctionCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateUserDefinedFunctionCommand extends $Command<UpdateUserDefinedFunctionCommandInput, UpdateUserDefinedFunctionCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateUserDefinedFunctionCommandInput;
            constructor(input: UpdateUserDefinedFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserDefinedFunctionCommandInput, UpdateUserDefinedFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateWorkflowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GlueClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient";
    import { UpdateWorkflowRequest, UpdateWorkflowResponse } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2";
    export interface UpdateWorkflowCommandInput extends UpdateWorkflowRequest {
    }
    export interface UpdateWorkflowCommandOutput extends UpdateWorkflowResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing workflow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GlueClient, UpdateWorkflowCommand } from "@aws-sdk/client-glue"; // ES Modules import
        * // const { GlueClient, UpdateWorkflowCommand } = require("@aws-sdk/client-glue"); // CommonJS import
        * const client = new GlueClient(config);
        * const command = new UpdateWorkflowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkflowCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkflowCommandOutput} for command's `response` shape.
        * @see {@link GlueClientResolvedConfig | config} for GlueClient's `config` shape.
        *
        */
    export class UpdateWorkflowCommand extends $Command<UpdateWorkflowCommandInput, UpdateWorkflowCommandOutput, GlueClientResolvedConfig> {
            readonly input: UpdateWorkflowCommandInput;
            constructor(input: UpdateWorkflowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GlueClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkflowCommandInput, UpdateWorkflowCommandOutput>;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/GlueClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchCreatePartitionCommandInput, BatchCreatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchCreatePartitionCommand";
    import { BatchDeleteConnectionCommandInput, BatchDeleteConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteConnectionCommand";
    import { BatchDeletePartitionCommandInput, BatchDeletePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeletePartitionCommand";
    import { BatchDeleteTableCommandInput, BatchDeleteTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteTableCommand";
    import { BatchDeleteTableVersionCommandInput, BatchDeleteTableVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchDeleteTableVersionCommand";
    import { BatchGetBlueprintsCommandInput, BatchGetBlueprintsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetBlueprintsCommand";
    import { BatchGetCrawlersCommandInput, BatchGetCrawlersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetCrawlersCommand";
    import { BatchGetCustomEntityTypesCommandInput, BatchGetCustomEntityTypesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetCustomEntityTypesCommand";
    import { BatchGetDevEndpointsCommandInput, BatchGetDevEndpointsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetDevEndpointsCommand";
    import { BatchGetJobsCommandInput, BatchGetJobsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetJobsCommand";
    import { BatchGetPartitionCommandInput, BatchGetPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetPartitionCommand";
    import { BatchGetTriggersCommandInput, BatchGetTriggersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetTriggersCommand";
    import { BatchGetWorkflowsCommandInput, BatchGetWorkflowsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchGetWorkflowsCommand";
    import { BatchStopJobRunCommandInput, BatchStopJobRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchStopJobRunCommand";
    import { BatchUpdatePartitionCommandInput, BatchUpdatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/BatchUpdatePartitionCommand";
    import { CancelMLTaskRunCommandInput, CancelMLTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CancelMLTaskRunCommand";
    import { CancelStatementCommandInput, CancelStatementCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CancelStatementCommand";
    import { CheckSchemaVersionValidityCommandInput, CheckSchemaVersionValidityCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CheckSchemaVersionValidityCommand";
    import { CreateBlueprintCommandInput, CreateBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateBlueprintCommand";
    import { CreateClassifierCommandInput, CreateClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateClassifierCommand";
    import { CreateConnectionCommandInput, CreateConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateConnectionCommand";
    import { CreateCrawlerCommandInput, CreateCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateCrawlerCommand";
    import { CreateCustomEntityTypeCommandInput, CreateCustomEntityTypeCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateCustomEntityTypeCommand";
    import { CreateDatabaseCommandInput, CreateDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateDatabaseCommand";
    import { CreateDevEndpointCommandInput, CreateDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateDevEndpointCommand";
    import { CreateJobCommandInput, CreateJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateJobCommand";
    import { CreateMLTransformCommandInput, CreateMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateMLTransformCommand";
    import { CreatePartitionCommandInput, CreatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreatePartitionCommand";
    import { CreatePartitionIndexCommandInput, CreatePartitionIndexCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreatePartitionIndexCommand";
    import { CreateRegistryCommandInput, CreateRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateRegistryCommand";
    import { CreateSchemaCommandInput, CreateSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSchemaCommand";
    import { CreateScriptCommandInput, CreateScriptCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateScriptCommand";
    import { CreateSecurityConfigurationCommandInput, CreateSecurityConfigurationCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSecurityConfigurationCommand";
    import { CreateSessionCommandInput, CreateSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateSessionCommand";
    import { CreateTableCommandInput, CreateTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateTableCommand";
    import { CreateTriggerCommandInput, CreateTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateTriggerCommand";
    import { CreateUserDefinedFunctionCommandInput, CreateUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateUserDefinedFunctionCommand";
    import { CreateWorkflowCommandInput, CreateWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/CreateWorkflowCommand";
    import { DeleteBlueprintCommandInput, DeleteBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteBlueprintCommand";
    import { DeleteClassifierCommandInput, DeleteClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteClassifierCommand";
    import { DeleteColumnStatisticsForPartitionCommandInput, DeleteColumnStatisticsForPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteColumnStatisticsForPartitionCommand";
    import { DeleteColumnStatisticsForTableCommandInput, DeleteColumnStatisticsForTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteColumnStatisticsForTableCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteConnectionCommand";
    import { DeleteCrawlerCommandInput, DeleteCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteCrawlerCommand";
    import { DeleteCustomEntityTypeCommandInput, DeleteCustomEntityTypeCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteCustomEntityTypeCommand";
    import { DeleteDatabaseCommandInput, DeleteDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteDatabaseCommand";
    import { DeleteDevEndpointCommandInput, DeleteDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteDevEndpointCommand";
    import { DeleteJobCommandInput, DeleteJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteJobCommand";
    import { DeleteMLTransformCommandInput, DeleteMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteMLTransformCommand";
    import { DeletePartitionCommandInput, DeletePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeletePartitionCommand";
    import { DeletePartitionIndexCommandInput, DeletePartitionIndexCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeletePartitionIndexCommand";
    import { DeleteRegistryCommandInput, DeleteRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteRegistryCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSchemaCommandInput, DeleteSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSchemaCommand";
    import { DeleteSchemaVersionsCommandInput, DeleteSchemaVersionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSchemaVersionsCommand";
    import { DeleteSecurityConfigurationCommandInput, DeleteSecurityConfigurationCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSecurityConfigurationCommand";
    import { DeleteSessionCommandInput, DeleteSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteSessionCommand";
    import { DeleteTableCommandInput, DeleteTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTableCommand";
    import { DeleteTableVersionCommandInput, DeleteTableVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTableVersionCommand";
    import { DeleteTriggerCommandInput, DeleteTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteTriggerCommand";
    import { DeleteUserDefinedFunctionCommandInput, DeleteUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteUserDefinedFunctionCommand";
    import { DeleteWorkflowCommandInput, DeleteWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/DeleteWorkflowCommand";
    import { GetBlueprintCommandInput, GetBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintCommand";
    import { GetBlueprintRunCommandInput, GetBlueprintRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintRunCommand";
    import { GetBlueprintRunsCommandInput, GetBlueprintRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetBlueprintRunsCommand";
    import { GetCatalogImportStatusCommandInput, GetCatalogImportStatusCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCatalogImportStatusCommand";
    import { GetClassifierCommandInput, GetClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetClassifierCommand";
    import { GetClassifiersCommandInput, GetClassifiersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetClassifiersCommand";
    import { GetColumnStatisticsForPartitionCommandInput, GetColumnStatisticsForPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetColumnStatisticsForPartitionCommand";
    import { GetColumnStatisticsForTableCommandInput, GetColumnStatisticsForTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetColumnStatisticsForTableCommand";
    import { GetConnectionCommandInput, GetConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetConnectionCommand";
    import { GetConnectionsCommandInput, GetConnectionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetConnectionsCommand";
    import { GetCrawlerCommandInput, GetCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlerCommand";
    import { GetCrawlerMetricsCommandInput, GetCrawlerMetricsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlerMetricsCommand";
    import { GetCrawlersCommandInput, GetCrawlersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCrawlersCommand";
    import { GetCustomEntityTypeCommandInput, GetCustomEntityTypeCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetCustomEntityTypeCommand";
    import { GetDatabaseCommandInput, GetDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDatabaseCommand";
    import { GetDatabasesCommandInput, GetDatabasesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDatabasesCommand";
    import { GetDataCatalogEncryptionSettingsCommandInput, GetDataCatalogEncryptionSettingsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDataCatalogEncryptionSettingsCommand";
    import { GetDataflowGraphCommandInput, GetDataflowGraphCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDataflowGraphCommand";
    import { GetDevEndpointCommandInput, GetDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDevEndpointCommand";
    import { GetDevEndpointsCommandInput, GetDevEndpointsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetDevEndpointsCommand";
    import { GetJobBookmarkCommandInput, GetJobBookmarkCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobBookmarkCommand";
    import { GetJobCommandInput, GetJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobCommand";
    import { GetJobRunCommandInput, GetJobRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobRunCommand";
    import { GetJobRunsCommandInput, GetJobRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobRunsCommand";
    import { GetJobsCommandInput, GetJobsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetJobsCommand";
    import { GetMappingCommandInput, GetMappingCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMappingCommand";
    import { GetMLTaskRunCommandInput, GetMLTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTaskRunCommand";
    import { GetMLTaskRunsCommandInput, GetMLTaskRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTaskRunsCommand";
    import { GetMLTransformCommandInput, GetMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTransformCommand";
    import { GetMLTransformsCommandInput, GetMLTransformsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetMLTransformsCommand";
    import { GetPartitionCommandInput, GetPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionCommand";
    import { GetPartitionIndexesCommandInput, GetPartitionIndexesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionIndexesCommand";
    import { GetPartitionsCommandInput, GetPartitionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPartitionsCommand";
    import { GetPlanCommandInput, GetPlanCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetPlanCommand";
    import { GetRegistryCommandInput, GetRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetRegistryCommand";
    import { GetResourcePoliciesCommandInput, GetResourcePoliciesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetResourcePoliciesCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetResourcePolicyCommand";
    import { GetSchemaByDefinitionCommandInput, GetSchemaByDefinitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaByDefinitionCommand";
    import { GetSchemaCommandInput, GetSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaCommand";
    import { GetSchemaVersionCommandInput, GetSchemaVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaVersionCommand";
    import { GetSchemaVersionsDiffCommandInput, GetSchemaVersionsDiffCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSchemaVersionsDiffCommand";
    import { GetSecurityConfigurationCommandInput, GetSecurityConfigurationCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSecurityConfigurationCommand";
    import { GetSecurityConfigurationsCommandInput, GetSecurityConfigurationsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSecurityConfigurationsCommand";
    import { GetSessionCommandInput, GetSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetSessionCommand";
    import { GetStatementCommandInput, GetStatementCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetStatementCommand";
    import { GetTableCommandInput, GetTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableCommand";
    import { GetTablesCommandInput, GetTablesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTablesCommand";
    import { GetTableVersionCommandInput, GetTableVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableVersionCommand";
    import { GetTableVersionsCommandInput, GetTableVersionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTableVersionsCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTagsCommand";
    import { GetTriggerCommandInput, GetTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTriggerCommand";
    import { GetTriggersCommandInput, GetTriggersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetTriggersCommand";
    import { GetUnfilteredPartitionMetadataCommandInput, GetUnfilteredPartitionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredPartitionMetadataCommand";
    import { GetUnfilteredPartitionsMetadataCommandInput, GetUnfilteredPartitionsMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredPartitionsMetadataCommand";
    import { GetUnfilteredTableMetadataCommandInput, GetUnfilteredTableMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUnfilteredTableMetadataCommand";
    import { GetUserDefinedFunctionCommandInput, GetUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUserDefinedFunctionCommand";
    import { GetUserDefinedFunctionsCommandInput, GetUserDefinedFunctionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetUserDefinedFunctionsCommand";
    import { GetWorkflowCommandInput, GetWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowCommand";
    import { GetWorkflowRunCommandInput, GetWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunCommand";
    import { GetWorkflowRunPropertiesCommandInput, GetWorkflowRunPropertiesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunPropertiesCommand";
    import { GetWorkflowRunsCommandInput, GetWorkflowRunsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/GetWorkflowRunsCommand";
    import { ImportCatalogToGlueCommandInput, ImportCatalogToGlueCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ImportCatalogToGlueCommand";
    import { ListBlueprintsCommandInput, ListBlueprintsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListBlueprintsCommand";
    import { ListCrawlersCommandInput, ListCrawlersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCrawlersCommand";
    import { ListCrawlsCommandInput, ListCrawlsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCrawlsCommand";
    import { ListCustomEntityTypesCommandInput, ListCustomEntityTypesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListCustomEntityTypesCommand";
    import { ListDevEndpointsCommandInput, ListDevEndpointsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListDevEndpointsCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListJobsCommand";
    import { ListMLTransformsCommandInput, ListMLTransformsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListMLTransformsCommand";
    import { ListRegistriesCommandInput, ListRegistriesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListRegistriesCommand";
    import { ListSchemasCommandInput, ListSchemasCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSchemasCommand";
    import { ListSchemaVersionsCommandInput, ListSchemaVersionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSchemaVersionsCommand";
    import { ListSessionsCommandInput, ListSessionsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListSessionsCommand";
    import { ListStatementsCommandInput, ListStatementsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListStatementsCommand";
    import { ListTriggersCommandInput, ListTriggersCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListTriggersCommand";
    import { ListWorkflowsCommandInput, ListWorkflowsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ListWorkflowsCommand";
    import { PutDataCatalogEncryptionSettingsCommandInput, PutDataCatalogEncryptionSettingsCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutDataCatalogEncryptionSettingsCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutResourcePolicyCommand";
    import { PutSchemaVersionMetadataCommandInput, PutSchemaVersionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutSchemaVersionMetadataCommand";
    import { PutWorkflowRunPropertiesCommandInput, PutWorkflowRunPropertiesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/PutWorkflowRunPropertiesCommand";
    import { QuerySchemaVersionMetadataCommandInput, QuerySchemaVersionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/QuerySchemaVersionMetadataCommand";
    import { RegisterSchemaVersionCommandInput, RegisterSchemaVersionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RegisterSchemaVersionCommand";
    import { RemoveSchemaVersionMetadataCommandInput, RemoveSchemaVersionMetadataCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RemoveSchemaVersionMetadataCommand";
    import { ResetJobBookmarkCommandInput, ResetJobBookmarkCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ResetJobBookmarkCommand";
    import { ResumeWorkflowRunCommandInput, ResumeWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/ResumeWorkflowRunCommand";
    import { RunStatementCommandInput, RunStatementCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/RunStatementCommand";
    import { SearchTablesCommandInput, SearchTablesCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/SearchTablesCommand";
    import { StartBlueprintRunCommandInput, StartBlueprintRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartBlueprintRunCommand";
    import { StartCrawlerCommandInput, StartCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartCrawlerCommand";
    import { StartCrawlerScheduleCommandInput, StartCrawlerScheduleCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartCrawlerScheduleCommand";
    import { StartExportLabelsTaskRunCommandInput, StartExportLabelsTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartExportLabelsTaskRunCommand";
    import { StartImportLabelsTaskRunCommandInput, StartImportLabelsTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartImportLabelsTaskRunCommand";
    import { StartJobRunCommandInput, StartJobRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartJobRunCommand";
    import { StartMLEvaluationTaskRunCommandInput, StartMLEvaluationTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartMLEvaluationTaskRunCommand";
    import { StartMLLabelingSetGenerationTaskRunCommandInput, StartMLLabelingSetGenerationTaskRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartMLLabelingSetGenerationTaskRunCommand";
    import { StartTriggerCommandInput, StartTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartTriggerCommand";
    import { StartWorkflowRunCommandInput, StartWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StartWorkflowRunCommand";
    import { StopCrawlerCommandInput, StopCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopCrawlerCommand";
    import { StopCrawlerScheduleCommandInput, StopCrawlerScheduleCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopCrawlerScheduleCommand";
    import { StopSessionCommandInput, StopSessionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopSessionCommand";
    import { StopTriggerCommandInput, StopTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopTriggerCommand";
    import { StopWorkflowRunCommandInput, StopWorkflowRunCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/StopWorkflowRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UntagResourceCommand";
    import { UpdateBlueprintCommandInput, UpdateBlueprintCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateBlueprintCommand";
    import { UpdateClassifierCommandInput, UpdateClassifierCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateClassifierCommand";
    import { UpdateColumnStatisticsForPartitionCommandInput, UpdateColumnStatisticsForPartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateColumnStatisticsForPartitionCommand";
    import { UpdateColumnStatisticsForTableCommandInput, UpdateColumnStatisticsForTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateColumnStatisticsForTableCommand";
    import { UpdateConnectionCommandInput, UpdateConnectionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateConnectionCommand";
    import { UpdateCrawlerCommandInput, UpdateCrawlerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateCrawlerCommand";
    import { UpdateCrawlerScheduleCommandInput, UpdateCrawlerScheduleCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateCrawlerScheduleCommand";
    import { UpdateDatabaseCommandInput, UpdateDatabaseCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateDatabaseCommand";
    import { UpdateDevEndpointCommandInput, UpdateDevEndpointCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateDevEndpointCommand";
    import { UpdateJobCommandInput, UpdateJobCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateJobCommand";
    import { UpdateMLTransformCommandInput, UpdateMLTransformCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateMLTransformCommand";
    import { UpdatePartitionCommandInput, UpdatePartitionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdatePartitionCommand";
    import { UpdateRegistryCommandInput, UpdateRegistryCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateRegistryCommand";
    import { UpdateSchemaCommandInput, UpdateSchemaCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateSchemaCommand";
    import { UpdateTableCommandInput, UpdateTableCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateTableCommand";
    import { UpdateTriggerCommandInput, UpdateTriggerCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateTriggerCommand";
    import { UpdateUserDefinedFunctionCommandInput, UpdateUserDefinedFunctionCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateUserDefinedFunctionCommand";
    import { UpdateWorkflowCommandInput, UpdateWorkflowCommandOutput } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/commands/UpdateWorkflowCommand";
    export type ServiceInputTypes = BatchCreatePartitionCommandInput | BatchDeleteConnectionCommandInput | BatchDeletePartitionCommandInput | BatchDeleteTableCommandInput | BatchDeleteTableVersionCommandInput | BatchGetBlueprintsCommandInput | BatchGetCrawlersCommandInput | BatchGetCustomEntityTypesCommandInput | BatchGetDevEndpointsCommandInput | BatchGetJobsCommandInput | BatchGetPartitionCommandInput | BatchGetTriggersCommandInput | BatchGetWorkflowsCommandInput | BatchStopJobRunCommandInput | BatchUpdatePartitionCommandInput | CancelMLTaskRunCommandInput | CancelStatementCommandInput | CheckSchemaVersionValidityCommandInput | CreateBlueprintCommandInput | CreateClassifierCommandInput | CreateConnectionCommandInput | CreateCrawlerCommandInput | CreateCustomEntityTypeCommandInput | CreateDatabaseCommandInput | CreateDevEndpointCommandInput | CreateJobCommandInput | CreateMLTransformCommandInput | CreatePartitionCommandInput | CreatePartitionIndexCommandInput | CreateRegistryCommandInput | CreateSchemaCommandInput | CreateScriptCommandInput | CreateSecurityConfigurationCommandInput | CreateSessionCommandInput | CreateTableCommandInput | CreateTriggerCommandInput | CreateUserDefinedFunctionCommandInput | CreateWorkflowCommandInput | DeleteBlueprintCommandInput | DeleteClassifierCommandInput | DeleteColumnStatisticsForPartitionCommandInput | DeleteColumnStatisticsForTableCommandInput | DeleteConnectionCommandInput | DeleteCrawlerCommandInput | DeleteCustomEntityTypeCommandInput | DeleteDatabaseCommandInput | DeleteDevEndpointCommandInput | DeleteJobCommandInput | DeleteMLTransformCommandInput | DeletePartitionCommandInput | DeletePartitionIndexCommandInput | DeleteRegistryCommandInput | DeleteResourcePolicyCommandInput | DeleteSchemaCommandInput | DeleteSchemaVersionsCommandInput | DeleteSecurityConfigurationCommandInput | DeleteSessionCommandInput | DeleteTableCommandInput | DeleteTableVersionCommandInput | DeleteTriggerCommandInput | DeleteUserDefinedFunctionCommandInput | DeleteWorkflowCommandInput | GetBlueprintCommandInput | GetBlueprintRunCommandInput | GetBlueprintRunsCommandInput | GetCatalogImportStatusCommandInput | GetClassifierCommandInput | GetClassifiersCommandInput | GetColumnStatisticsForPartitionCommandInput | GetColumnStatisticsForTableCommandInput | GetConnectionCommandInput | GetConnectionsCommandInput | GetCrawlerCommandInput | GetCrawlerMetricsCommandInput | GetCrawlersCommandInput | GetCustomEntityTypeCommandInput | GetDataCatalogEncryptionSettingsCommandInput | GetDatabaseCommandInput | GetDatabasesCommandInput | GetDataflowGraphCommandInput | GetDevEndpointCommandInput | GetDevEndpointsCommandInput | GetJobBookmarkCommandInput | GetJobCommandInput | GetJobRunCommandInput | GetJobRunsCommandInput | GetJobsCommandInput | GetMLTaskRunCommandInput | GetMLTaskRunsCommandInput | GetMLTransformCommandInput | GetMLTransformsCommandInput | GetMappingCommandInput | GetPartitionCommandInput | GetPartitionIndexesCommandInput | GetPartitionsCommandInput | GetPlanCommandInput | GetRegistryCommandInput | GetResourcePoliciesCommandInput | GetResourcePolicyCommandInput | GetSchemaByDefinitionCommandInput | GetSchemaCommandInput | GetSchemaVersionCommandInput | GetSchemaVersionsDiffCommandInput | GetSecurityConfigurationCommandInput | GetSecurityConfigurationsCommandInput | GetSessionCommandInput | GetStatementCommandInput | GetTableCommandInput | GetTableVersionCommandInput | GetTableVersionsCommandInput | GetTablesCommandInput | GetTagsCommandInput | GetTriggerCommandInput | GetTriggersCommandInput | GetUnfilteredPartitionMetadataCommandInput | GetUnfilteredPartitionsMetadataCommandInput | GetUnfilteredTableMetadataCommandInput | GetUserDefinedFunctionCommandInput | GetUserDefinedFunctionsCommandInput | GetWorkflowCommandInput | GetWorkflowRunCommandInput | GetWorkflowRunPropertiesCommandInput | GetWorkflowRunsCommandInput | ImportCatalogToGlueCommandInput | ListBlueprintsCommandInput | ListCrawlersCommandInput | ListCrawlsCommandInput | ListCustomEntityTypesCommandInput | ListDevEndpointsCommandInput | ListJobsCommandInput | ListMLTransformsCommandInput | ListRegistriesCommandInput | ListSchemaVersionsCommandInput | ListSchemasCommandInput | ListSessionsCommandInput | ListStatementsCommandInput | ListTriggersCommandInput | ListWorkflowsCommandInput | PutDataCatalogEncryptionSettingsCommandInput | PutResourcePolicyCommandInput | PutSchemaVersionMetadataCommandInput | PutWorkflowRunPropertiesCommandInput | QuerySchemaVersionMetadataCommandInput | RegisterSchemaVersionCommandInput | RemoveSchemaVersionMetadataCommandInput | ResetJobBookmarkCommandInput | ResumeWorkflowRunCommandInput | RunStatementCommandInput | SearchTablesCommandInput | StartBlueprintRunCommandInput | StartCrawlerCommandInput | StartCrawlerScheduleCommandInput | StartExportLabelsTaskRunCommandInput | StartImportLabelsTaskRunCommandInput | StartJobRunCommandInput | StartMLEvaluationTaskRunCommandInput | StartMLLabelingSetGenerationTaskRunCommandInput | StartTriggerCommandInput | StartWorkflowRunCommandInput | StopCrawlerCommandInput | StopCrawlerScheduleCommandInput | StopSessionCommandInput | StopTriggerCommandInput | StopWorkflowRunCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateBlueprintCommandInput | UpdateClassifierCommandInput | UpdateColumnStatisticsForPartitionCommandInput | UpdateColumnStatisticsForTableCommandInput | UpdateConnectionCommandInput | UpdateCrawlerCommandInput | UpdateCrawlerScheduleCommandInput | UpdateDatabaseCommandInput | UpdateDevEndpointCommandInput | UpdateJobCommandInput | UpdateMLTransformCommandInput | UpdatePartitionCommandInput | UpdateRegistryCommandInput | UpdateSchemaCommandInput | UpdateTableCommandInput | UpdateTriggerCommandInput | UpdateUserDefinedFunctionCommandInput | UpdateWorkflowCommandInput;
    export type ServiceOutputTypes = BatchCreatePartitionCommandOutput | BatchDeleteConnectionCommandOutput | BatchDeletePartitionCommandOutput | BatchDeleteTableCommandOutput | BatchDeleteTableVersionCommandOutput | BatchGetBlueprintsCommandOutput | BatchGetCrawlersCommandOutput | BatchGetCustomEntityTypesCommandOutput | BatchGetDevEndpointsCommandOutput | BatchGetJobsCommandOutput | BatchGetPartitionCommandOutput | BatchGetTriggersCommandOutput | BatchGetWorkflowsCommandOutput | BatchStopJobRunCommandOutput | BatchUpdatePartitionCommandOutput | CancelMLTaskRunCommandOutput | CancelStatementCommandOutput | CheckSchemaVersionValidityCommandOutput | CreateBlueprintCommandOutput | CreateClassifierCommandOutput | CreateConnectionCommandOutput | CreateCrawlerCommandOutput | CreateCustomEntityTypeCommandOutput | CreateDatabaseCommandOutput | CreateDevEndpointCommandOutput | CreateJobCommandOutput | CreateMLTransformCommandOutput | CreatePartitionCommandOutput | CreatePartitionIndexCommandOutput | CreateRegistryCommandOutput | CreateSchemaCommandOutput | CreateScriptCommandOutput | CreateSecurityConfigurationCommandOutput | CreateSessionCommandOutput | CreateTableCommandOutput | CreateTriggerCommandOutput | CreateUserDefinedFunctionCommandOutput | CreateWorkflowCommandOutput | DeleteBlueprintCommandOutput | DeleteClassifierCommandOutput | DeleteColumnStatisticsForPartitionCommandOutput | DeleteColumnStatisticsForTableCommandOutput | DeleteConnectionCommandOutput | DeleteCrawlerCommandOutput | DeleteCustomEntityTypeCommandOutput | DeleteDatabaseCommandOutput | DeleteDevEndpointCommandOutput | DeleteJobCommandOutput | DeleteMLTransformCommandOutput | DeletePartitionCommandOutput | DeletePartitionIndexCommandOutput | DeleteRegistryCommandOutput | DeleteResourcePolicyCommandOutput | DeleteSchemaCommandOutput | DeleteSchemaVersionsCommandOutput | DeleteSecurityConfigurationCommandOutput | DeleteSessionCommandOutput | DeleteTableCommandOutput | DeleteTableVersionCommandOutput | DeleteTriggerCommandOutput | DeleteUserDefinedFunctionCommandOutput | DeleteWorkflowCommandOutput | GetBlueprintCommandOutput | GetBlueprintRunCommandOutput | GetBlueprintRunsCommandOutput | GetCatalogImportStatusCommandOutput | GetClassifierCommandOutput | GetClassifiersCommandOutput | GetColumnStatisticsForPartitionCommandOutput | GetColumnStatisticsForTableCommandOutput | GetConnectionCommandOutput | GetConnectionsCommandOutput | GetCrawlerCommandOutput | GetCrawlerMetricsCommandOutput | GetCrawlersCommandOutput | GetCustomEntityTypeCommandOutput | GetDataCatalogEncryptionSettingsCommandOutput | GetDatabaseCommandOutput | GetDatabasesCommandOutput | GetDataflowGraphCommandOutput | GetDevEndpointCommandOutput | GetDevEndpointsCommandOutput | GetJobBookmarkCommandOutput | GetJobCommandOutput | GetJobRunCommandOutput | GetJobRunsCommandOutput | GetJobsCommandOutput | GetMLTaskRunCommandOutput | GetMLTaskRunsCommandOutput | GetMLTransformCommandOutput | GetMLTransformsCommandOutput | GetMappingCommandOutput | GetPartitionCommandOutput | GetPartitionIndexesCommandOutput | GetPartitionsCommandOutput | GetPlanCommandOutput | GetRegistryCommandOutput | GetResourcePoliciesCommandOutput | GetResourcePolicyCommandOutput | GetSchemaByDefinitionCommandOutput | GetSchemaCommandOutput | GetSchemaVersionCommandOutput | GetSchemaVersionsDiffCommandOutput | GetSecurityConfigurationCommandOutput | GetSecurityConfigurationsCommandOutput | GetSessionCommandOutput | GetStatementCommandOutput | GetTableCommandOutput | GetTableVersionCommandOutput | GetTableVersionsCommandOutput | GetTablesCommandOutput | GetTagsCommandOutput | GetTriggerCommandOutput | GetTriggersCommandOutput | GetUnfilteredPartitionMetadataCommandOutput | GetUnfilteredPartitionsMetadataCommandOutput | GetUnfilteredTableMetadataCommandOutput | GetUserDefinedFunctionCommandOutput | GetUserDefinedFunctionsCommandOutput | GetWorkflowCommandOutput | GetWorkflowRunCommandOutput | GetWorkflowRunPropertiesCommandOutput | GetWorkflowRunsCommandOutput | ImportCatalogToGlueCommandOutput | ListBlueprintsCommandOutput | ListCrawlersCommandOutput | ListCrawlsCommandOutput | ListCustomEntityTypesCommandOutput | ListDevEndpointsCommandOutput | ListJobsCommandOutput | ListMLTransformsCommandOutput | ListRegistriesCommandOutput | ListSchemaVersionsCommandOutput | ListSchemasCommandOutput | ListSessionsCommandOutput | ListStatementsCommandOutput | ListTriggersCommandOutput | ListWorkflowsCommandOutput | PutDataCatalogEncryptionSettingsCommandOutput | PutResourcePolicyCommandOutput | PutSchemaVersionMetadataCommandOutput | PutWorkflowRunPropertiesCommandOutput | QuerySchemaVersionMetadataCommandOutput | RegisterSchemaVersionCommandOutput | RemoveSchemaVersionMetadataCommandOutput | ResetJobBookmarkCommandOutput | ResumeWorkflowRunCommandOutput | RunStatementCommandOutput | SearchTablesCommandOutput | StartBlueprintRunCommandOutput | StartCrawlerCommandOutput | StartCrawlerScheduleCommandOutput | StartExportLabelsTaskRunCommandOutput | StartImportLabelsTaskRunCommandOutput | StartJobRunCommandOutput | StartMLEvaluationTaskRunCommandOutput | StartMLLabelingSetGenerationTaskRunCommandOutput | StartTriggerCommandOutput | StartWorkflowRunCommandOutput | StopCrawlerCommandOutput | StopCrawlerScheduleCommandOutput | StopSessionCommandOutput | StopTriggerCommandOutput | StopWorkflowRunCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateBlueprintCommandOutput | UpdateClassifierCommandOutput | UpdateColumnStatisticsForPartitionCommandOutput | UpdateColumnStatisticsForTableCommandOutput | UpdateConnectionCommandOutput | UpdateCrawlerCommandOutput | UpdateCrawlerScheduleCommandOutput | UpdateDatabaseCommandOutput | UpdateDevEndpointCommandOutput | UpdateJobCommandOutput | UpdateMLTransformCommandOutput | UpdatePartitionCommandOutput | UpdateRegistryCommandOutput | UpdateSchemaCommandOutput | UpdateTableCommandOutput | UpdateTriggerCommandOutput | UpdateUserDefinedFunctionCommandOutput | UpdateWorkflowCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type GlueClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of GlueClient class constructor that set the region, credentials and other options.
        */
    export interface GlueClientConfig extends GlueClientConfigType {
    }
    type GlueClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of GlueClient class. This is resolved and normalized from the {@link GlueClientConfig | constructor configuration interface}.
        */
    export interface GlueClientResolvedConfig extends GlueClientResolvedConfigType {
    }
    /**
        * <fullname>Glue</fullname>
        *          <p>Defines the public endpoint for the Glue service.</p>
        */
    export class GlueClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, GlueClientResolvedConfig> {
            /**
                * The resolved configuration of GlueClient class. This is resolved and normalized from the {@link GlueClientConfig | constructor configuration interface}.
                */
            readonly config: GlueClientResolvedConfig;
            constructor(configuration: GlueClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { GlueServiceException as __BaseException } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/GlueServiceException";
    /**
        * <p>Access to a resource was denied.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Specifies configuration properties of a notification.</p>
        */
    export interface NotificationProperty {
            /**
                * <p>After a job run starts, the number of minutes to wait before
                *       sending a job run delay notification.</p>
                */
            NotifyDelayAfter?: number;
    }
    export namespace NotificationProperty {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationProperty) => any;
    }
    /**
        * <p>Defines an action to be initiated by a trigger.</p>
        */
    export interface Action {
            /**
                * <p>The name of a job to be run.</p>
                */
            JobName?: string;
            /**
                * <p>The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.</p>
                *          <p>You can specify arguments here that your own job-execution script
                *       consumes, as well as arguments that Glue itself consumes.</p>
                *          <p>For information about how to specify and consume your own Job arguments, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling Glue APIs in Python</a> topic in the developer guide.</p>
                *          <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by Glue</a> topic in the developer guide.</p>
                */
            Arguments?: Record<string, string>;
            /**
                * <p>The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can
                *       consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default
                *       is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.</p>
                */
            Timeout?: number;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this
                *       action.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>Specifies configuration properties of a job run notification.</p>
                */
            NotificationProperty?: NotificationProperty;
            /**
                * <p>The name of the crawler to be used with this action.</p>
                */
            CrawlerName?: string;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    export enum AggFunction {
            avg = "avg",
            count = "count",
            countDistinct = "countDistinct",
            first = "first",
            kurtosis = "kurtosis",
            last = "last",
            max = "max",
            min = "min",
            skewness = "skewness",
            stddev_pop = "stddev_pop",
            stddev_samp = "stddev_samp",
            sum = "sum",
            sumDistinct = "sumDistinct",
            var_pop = "var_pop",
            var_samp = "var_samp"
    }
    /**
        * <p>Specifies the set of parameters needed to perform aggregation in the aggregate transform.</p>
        */
    export interface AggregateOperation {
            /**
                * <p>Specifies the column on the data set on which the aggregation function will be applied.</p>
                */
            Column: string[] | undefined;
            /**
                * <p>Specifies the aggregation function to apply.</p>
                *          <p>Possible aggregation functions include: avg countDistinct, count, first, last, kurtosis, max, min, skewness,
                *       stddev_samp, stddev_pop, sum, sumDistinct, var_samp, var_pop</p>
                */
            AggFunc: AggFunction | string | undefined;
    }
    export namespace AggregateOperation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregateOperation) => any;
    }
    /**
        * <p>Specifies a transform that groups rows by chosen fields and computes the aggregated value by specified function.</p>
        */
    export interface Aggregate {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies the fields and rows to use as inputs for the aggregate transform.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Specifies the fields to group by.</p>
                */
            Groups: string[][] | undefined;
            /**
                * <p>Specifies the aggregate functions to be performed on specified fields. </p>
                */
            Aggs: AggregateOperation[] | undefined;
    }
    export namespace Aggregate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Aggregate) => any;
    }
    /**
        * <p>A resource to be created or added already exists.</p>
        */
    export class AlreadyExistsException extends __BaseException {
            readonly name: "AlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Specifies a single column in a Glue schema definition.</p>
        */
    export interface GlueStudioSchemaColumn {
            /**
                * <p>The name of the column in the Glue Studio schema.</p>
                */
            Name: string | undefined;
            /**
                * <p>The hive type for this column in the Glue Studio schema.</p>
                */
            Type?: string;
    }
    export namespace GlueStudioSchemaColumn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlueStudioSchemaColumn) => any;
    }
    /**
        * <p>Specifies a user-defined schema when a schema cannot be determined by AWS Glue.</p>
        */
    export interface GlueSchema {
            /**
                * <p>Specifies the column definitions that make up a Glue schema.</p>
                */
            Columns?: GlueStudioSchemaColumn[];
    }
    export namespace GlueSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlueSchema) => any;
    }
    /**
        * <p>Specifies a connector to an Amazon Athena data source.</p>
        */
    export interface AthenaConnectorSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the connection that is associated with the connector.</p>
                */
            ConnectionName: string | undefined;
            /**
                * <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
                */
            ConnectorName: string | undefined;
            /**
                * <p>The type of connection, such as marketplace.athena or custom.athena, designating a connection to an Amazon Athena data store.</p>
                */
            ConnectionType: string | undefined;
            /**
                * <p>The name of the table in the data source.</p>
                */
            ConnectionTable?: string;
            /**
                * <p>The name of the Cloudwatch log group to read from. For example, <code>/aws-glue/jobs/output</code>.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>Specifies the data schema for the custom Athena source.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace AthenaConnectorSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AthenaConnectorSource) => any;
    }
    /**
        * <p>A structure containing information for audit.</p>
        */
    export interface AuditContext {
            /**
                * <p>The context for the audit..</p>
                */
            AdditionalAuditContext?: string;
            /**
                * <p>The requested columns for audit.</p>
                */
            RequestedColumns?: string[];
            /**
                * <p>All columns request for audit.</p>
                */
            AllColumnsRequested?: boolean;
    }
    export namespace AuditContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuditContext) => any;
    }
    /**
        * <p>A column in a <code>Table</code>.</p>
        */
    export interface Column {
            /**
                * <p>The name of the <code>Column</code>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data type of the <code>Column</code>.</p>
                */
            Type?: string;
            /**
                * <p>A free-form text comment.</p>
                */
            Comment?: string;
            /**
                * <p>These key-value pairs define properties associated with the column.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace Column {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Column) => any;
    }
    /**
        * <p>The unique ID of the schema in the Glue schema registry.</p>
        */
    export interface SchemaId {
            /**
                * <p>The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                */
            SchemaName?: string;
            /**
                * <p>The name of the schema registry that contains the schema.</p>
                */
            RegistryName?: string;
    }
    export namespace SchemaId {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaId) => any;
    }
    /**
        * <p>An object that references a schema stored in the Glue Schema Registry.</p>
        */
    export interface SchemaReference {
            /**
                * <p>A structure that contains schema identity fields. Either this or the <code>SchemaVersionId</code> has to be provided.</p>
                */
            SchemaId?: SchemaId;
            /**
                * <p>The unique ID assigned to a version of the schema. Either this or the <code>SchemaId</code> has to be provided.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersionNumber?: number;
    }
    export namespace SchemaReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaReference) => any;
    }
    /**
        * <p>Information about a serialization/deserialization program (SerDe) that serves as an
        *       extractor and loader.</p>
        */
    export interface SerDeInfo {
            /**
                * <p>Name of the SerDe.</p>
                */
            Name?: string;
            /**
                * <p>Usually the class that implements the SerDe. An example is
                *         <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>
                */
            SerializationLibrary?: string;
            /**
                * <p>These key-value pairs define initialization parameters for the SerDe.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace SerDeInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SerDeInfo) => any;
    }
    /**
        * <p>Specifies skewed values in a table. Skewed values are those that occur with very high
        *       frequency.</p>
        */
    export interface SkewedInfo {
            /**
                * <p>A list of names of columns that contain skewed values.</p>
                */
            SkewedColumnNames?: string[];
            /**
                * <p>A list of values that appear so frequently as to be considered
                *       skewed.</p>
                */
            SkewedColumnValues?: string[];
            /**
                * <p>A mapping of skewed values to the columns that contain them.</p>
                */
            SkewedColumnValueLocationMaps?: Record<string, string>;
    }
    export namespace SkewedInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SkewedInfo) => any;
    }
    /**
        * <p>Specifies the sort order of a sorted column.</p>
        */
    export interface Order {
            /**
                * <p>The name of the column.</p>
                */
            Column: string | undefined;
            /**
                * <p>Indicates that the column is sorted in ascending order
                *       (<code>== 1</code>), or in descending order (<code>==0</code>).</p>
                */
            SortOrder: number | undefined;
    }
    export namespace Order {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Order) => any;
    }
    /**
        * <p>Describes the physical storage of table data.</p>
        */
    export interface StorageDescriptor {
            /**
                * <p>A list of the <code>Columns</code> in the table.</p>
                */
            Columns?: Column[];
            /**
                * <p>The physical location of the table. By default, this takes the form of the warehouse
                *       location, followed by the database location in the warehouse, followed by the table
                *       name.</p>
                */
            Location?: string;
            /**
                * <p>A list of locations that point to the path where a Delta table is located.</p>
                */
            AdditionalLocations?: string[];
            /**
                * <p>The input format: <code>SequenceFileInputFormat</code> (binary),
                *       or <code>TextInputFormat</code>, or a custom format.</p>
                */
            InputFormat?: string;
            /**
                * <p>The output format: <code>SequenceFileOutputFormat</code> (binary),
                *       or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>
                */
            OutputFormat?: string;
            /**
                * <p>
                *             <code>True</code> if the data in the table is compressed, or <code>False</code> if
                *       not.</p>
                */
            Compressed?: boolean;
            /**
                * <p>Must be specified if the table contains any dimension columns.</p>
                */
            NumberOfBuckets?: number;
            /**
                * <p>The serialization/deserialization (SerDe) information.</p>
                */
            SerdeInfo?: SerDeInfo;
            /**
                * <p>A list of reducer grouping columns, clustering columns, and
                *       bucketing columns in the table.</p>
                */
            BucketColumns?: string[];
            /**
                * <p>A list specifying the sort order of each bucket in the table.</p>
                */
            SortColumns?: Order[];
            /**
                * <p>The user-supplied properties in key-value form.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>The information about values that appear frequently in a column (skewed values).</p>
                */
            SkewedInfo?: SkewedInfo;
            /**
                * <p>
                *             <code>True</code> if the table data is stored in subdirectories, or <code>False</code> if
                *       not.</p>
                */
            StoredAsSubDirectories?: boolean;
            /**
                * <p>An object that references a schema stored in the Glue Schema Registry.</p>
                *
                * 	        <p>When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference.</p>
                */
            SchemaReference?: SchemaReference;
    }
    export namespace StorageDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageDescriptor) => any;
    }
    /**
        * <p>The structure used to create and update a partition.</p>
        */
    export interface PartitionInput {
            /**
                * <p>The values of the partition. Although this parameter is not required by the SDK, you must specify this parameter for a valid input.</p>
                *
                * 	        <p>The values for the keys for the new partition must be passed as an array of String objects that must be ordered in the same order as the partition keys appearing in the Amazon S3 prefix. Otherwise Glue will add the values to the wrong keys.</p>
                */
            Values?: string[];
            /**
                * <p>The last time at which the partition was accessed.</p>
                */
            LastAccessTime?: Date;
            /**
                * <p>Provides information about the physical
                *       location where the partition is stored.</p>
                */
            StorageDescriptor?: StorageDescriptor;
            /**
                * <p>These key-value pairs define partition parameters.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>The last time at which column statistics were computed for this partition.</p>
                */
            LastAnalyzedTime?: Date;
    }
    export namespace PartitionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartitionInput) => any;
    }
    export interface BatchCreatePartitionRequest {
            /**
                * <p>The ID of the catalog in which the partition is to be created. Currently, this should be
                *       the Amazon Web Services account ID.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the metadata database in which the partition is
                *       to be created.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the metadata table in which the partition is to be created.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of <code>PartitionInput</code> structures that define
                *       the partitions to be created.</p>
                */
            PartitionInputList: PartitionInput[] | undefined;
    }
    export namespace BatchCreatePartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreatePartitionRequest) => any;
    }
    /**
        * <p>Contains details about an error.</p>
        */
    export interface ErrorDetail {
            /**
                * <p>The code associated with this error.</p>
                */
            ErrorCode?: string;
            /**
                * <p>A message describing the error.</p>
                */
            ErrorMessage?: string;
    }
    export namespace ErrorDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetail) => any;
    }
    /**
        * <p>Contains information about a partition error.</p>
        */
    export interface PartitionError {
            /**
                * <p>The values that define the partition.</p>
                */
            PartitionValues?: string[];
            /**
                * <p>The details about the partition error.</p>
                */
            ErrorDetail?: ErrorDetail;
    }
    export namespace PartitionError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartitionError) => any;
    }
    export interface BatchCreatePartitionResponse {
            /**
                * <p>The errors encountered when trying to create the requested partitions.</p>
                */
            Errors?: PartitionError[];
    }
    export namespace BatchCreatePartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreatePartitionResponse) => any;
    }
    /**
        * <p>A specified entity does not exist</p>
        */
    export class EntityNotFoundException extends __BaseException {
            readonly name: "EntityNotFoundException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntityNotFoundException, __BaseException>);
    }
    /**
        * <p>An encryption operation failed.</p>
        */
    export class GlueEncryptionException extends __BaseException {
            readonly name: "GlueEncryptionException";
            readonly $fault: "client";
            /**
                * <p>The message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlueEncryptionException, __BaseException>);
    }
    /**
        * <p>An internal service error occurred.</p>
        */
    export class InternalServiceException extends __BaseException {
            readonly name: "InternalServiceException";
            readonly $fault: "server";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceException, __BaseException>);
    }
    /**
        * <p>The input provided was not valid.</p>
        */
    export class InvalidInputException extends __BaseException {
            readonly name: "InvalidInputException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputException, __BaseException>);
    }
    /**
        * <p>The operation timed out.</p>
        */
    export class OperationTimeoutException extends __BaseException {
            readonly name: "OperationTimeoutException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationTimeoutException, __BaseException>);
    }
    /**
        * <p>A resource numerical limit was exceeded.</p>
        */
    export class ResourceNumberLimitExceededException extends __BaseException {
            readonly name: "ResourceNumberLimitExceededException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNumberLimitExceededException, __BaseException>);
    }
    export interface BatchDeleteConnectionRequest {
            /**
                * <p>The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>A list of names of the connections to delete.</p>
                */
            ConnectionNameList: string[] | undefined;
    }
    export namespace BatchDeleteConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteConnectionRequest) => any;
    }
    export interface BatchDeleteConnectionResponse {
            /**
                * <p>A list of names of the connection definitions that were
                *        successfully deleted.</p>
                */
            Succeeded?: string[];
            /**
                * <p>A map of the names of connections that were not successfully
                *        deleted to error details.</p>
                */
            Errors?: Record<string, ErrorDetail>;
    }
    export namespace BatchDeleteConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteConnectionResponse) => any;
    }
    /**
        * <p>Contains a list of values defining partitions.</p>
        */
    export interface PartitionValueList {
            /**
                * <p>The list of values.</p>
                */
            Values: string[] | undefined;
    }
    export namespace PartitionValueList {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartitionValueList) => any;
    }
    export interface BatchDeletePartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partition to be deleted resides. If none is provided,
                *       the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database in which the table in question
                *       resides.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table that contains the partitions to be deleted.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of <code>PartitionInput</code> structures that define
                *       the partitions to be deleted.</p>
                */
            PartitionsToDelete: PartitionValueList[] | undefined;
    }
    export namespace BatchDeletePartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeletePartitionRequest) => any;
    }
    export interface BatchDeletePartitionResponse {
            /**
                * <p>The errors encountered when trying to delete the requested partitions.</p>
                */
            Errors?: PartitionError[];
    }
    export namespace BatchDeletePartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeletePartitionResponse) => any;
    }
    export interface BatchDeleteTableRequest {
            /**
                * <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database in which the tables to delete reside. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>A list of the table to delete.</p>
                */
            TablesToDelete: string[] | undefined;
            /**
                * <p>The transaction ID at which to delete the table contents.</p>
                */
            TransactionId?: string;
    }
    export namespace BatchDeleteTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteTableRequest) => any;
    }
    /**
        * <p>An error record for table operations.</p>
        */
    export interface TableError {
            /**
                * <p>The name of the table. For Hive compatibility, this must be entirely lowercase.</p>
                */
            TableName?: string;
            /**
                * <p>The details about the error.</p>
                */
            ErrorDetail?: ErrorDetail;
    }
    export namespace TableError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableError) => any;
    }
    export interface BatchDeleteTableResponse {
            /**
                * <p>A list of errors encountered in attempting to delete the specified tables.</p>
                */
            Errors?: TableError[];
    }
    export namespace BatchDeleteTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteTableResponse) => any;
    }
    /**
        * <p>A resource was not ready for a transaction.</p>
        */
    export class ResourceNotReadyException extends __BaseException {
            readonly name: "ResourceNotReadyException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotReadyException, __BaseException>);
    }
    export interface BatchDeleteTableVersionRequest {
            /**
                * <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database in the catalog in which the table resides. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table. For Hive compatibility,
                *       this name is entirely lowercase.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of the IDs of versions to be deleted. A <code>VersionId</code> is a string representation of an integer. Each version is incremented by 1.</p>
                */
            VersionIds: string[] | undefined;
    }
    export namespace BatchDeleteTableVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteTableVersionRequest) => any;
    }
    /**
        * <p>An error record for table-version operations.</p>
        */
    export interface TableVersionError {
            /**
                * <p>The name of the table in question.</p>
                */
            TableName?: string;
            /**
                * <p>The ID value of the version in question. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1.</p>
                */
            VersionId?: string;
            /**
                * <p>The details about the error.</p>
                */
            ErrorDetail?: ErrorDetail;
    }
    export namespace TableVersionError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableVersionError) => any;
    }
    export interface BatchDeleteTableVersionResponse {
            /**
                * <p>A list of errors encountered while trying to delete
                *       the specified table versions.</p>
                */
            Errors?: TableVersionError[];
    }
    export namespace BatchDeleteTableVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteTableVersionResponse) => any;
    }
    export interface BatchGetBlueprintsRequest {
            /**
                * <p>A list of blueprint names.</p>
                */
            Names: string[] | undefined;
            /**
                * <p>Specifies whether or not to include the blueprint in the response.</p>
                */
            IncludeBlueprint?: boolean;
            /**
                * <p>Specifies whether or not to include the parameters, as a JSON string, for the blueprint in the response.</p>
                */
            IncludeParameterSpec?: boolean;
    }
    export namespace BatchGetBlueprintsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetBlueprintsRequest) => any;
    }
    /**
        * <p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>
        */
    export interface LastActiveDefinition {
            /**
                * <p>The description of the blueprint.</p>
                */
            Description?: string;
            /**
                * <p>The date and time the blueprint was last modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>A JSON string specifying the parameters for the blueprint.</p>
                */
            ParameterSpec?: string;
            /**
                * <p>Specifies a path in Amazon S3 where the blueprint is published by the Glue developer.</p>
                */
            BlueprintLocation?: string;
            /**
                * <p>Specifies a path in Amazon S3 where the blueprint is copied when you create or update the blueprint.</p>
                */
            BlueprintServiceLocation?: string;
    }
    export namespace LastActiveDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LastActiveDefinition) => any;
    }
    export enum BlueprintStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            FAILED = "FAILED",
            UPDATING = "UPDATING"
    }
    /**
        * <p>The details of a blueprint.</p>
        */
    export interface Blueprint {
            /**
                * <p>The name of the blueprint.</p>
                */
            Name?: string;
            /**
                * <p>The description of the blueprint.</p>
                */
            Description?: string;
            /**
                * <p>The date and time the blueprint was registered.</p>
                */
            CreatedOn?: Date;
            /**
                * <p>The date and time the blueprint was last modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>A JSON string that indicates the list of parameter specifications for the blueprint.</p>
                */
            ParameterSpec?: string;
            /**
                * <p>Specifies the path in Amazon S3 where the blueprint is published.</p>
                */
            BlueprintLocation?: string;
            /**
                * <p>Specifies a path in Amazon S3 where the blueprint is copied when you call <code>CreateBlueprint/UpdateBlueprint</code> to register the blueprint in Glue.</p>
                */
            BlueprintServiceLocation?: string;
            /**
                * <p>The status of the blueprint registration.</p>
                *
                * 	        <ul>
                *             <li>
                *                <p>Creating — The blueprint registration is in progress.</p>
                *             </li>
                *             <li>
                *                <p>Active — The blueprint has been successfully registered.</p>
                *             </li>
                *             <li>
                *                <p>Updating — An update to the blueprint registration is in progress.</p>
                *             </li>
                *             <li>
                *                <p>Failed — The blueprint registration failed.</p>
                *             </li>
                *          </ul>
                */
            Status?: BlueprintStatus | string;
            /**
                * <p>An error message.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>When there are multiple versions of a blueprint and the latest version has some errors, this attribute indicates the last successful blueprint definition that is available with the service.</p>
                */
            LastActiveDefinition?: LastActiveDefinition;
    }
    export namespace Blueprint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Blueprint) => any;
    }
    export interface BatchGetBlueprintsResponse {
            /**
                * <p>Returns a list of blueprint as a <code>Blueprints</code> object.</p>
                */
            Blueprints?: Blueprint[];
            /**
                * <p>Returns a list of <code>BlueprintNames</code> that were not found.</p>
                */
            MissingBlueprints?: string[];
    }
    export namespace BatchGetBlueprintsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetBlueprintsResponse) => any;
    }
    export interface BatchGetCrawlersRequest {
            /**
                * <p>A list of crawler names, which might be the names returned from the
                *         <code>ListCrawlers</code> operation.</p>
                */
            CrawlerNames: string[] | undefined;
    }
    export namespace BatchGetCrawlersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetCrawlersRequest) => any;
    }
    /**
        * <p>Specifies Lake Formation configuration settings for the crawler.</p>
        */
    export interface LakeFormationConfiguration {
            /**
                * <p>Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>
                */
            UseLakeFormationCredentials?: boolean;
            /**
                * <p>Required for cross account crawls. For same account crawls as the target data, this can be left as null.</p>
                */
            AccountId?: string;
    }
    export namespace LakeFormationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LakeFormationConfiguration) => any;
    }
    export enum LastCrawlStatus {
            CANCELLED = "CANCELLED",
            FAILED = "FAILED",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>Status and error information about the most recent crawl.</p>
        */
    export interface LastCrawlInfo {
            /**
                * <p>Status of the last crawl.</p>
                */
            Status?: LastCrawlStatus | string;
            /**
                * <p>If an error occurred, the error information about the last crawl.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The log group for the last crawl.</p>
                */
            LogGroup?: string;
            /**
                * <p>The log stream for the last crawl.</p>
                */
            LogStream?: string;
            /**
                * <p>The prefix for a message about this crawl.</p>
                */
            MessagePrefix?: string;
            /**
                * <p>The time at which the crawl started.</p>
                */
            StartTime?: Date;
    }
    export namespace LastCrawlInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LastCrawlInfo) => any;
    }
    export enum CrawlerLineageSettings {
            DISABLE = "DISABLE",
            ENABLE = "ENABLE"
    }
    /**
        * <p>Specifies data lineage configuration settings for the crawler.</p>
        */
    export interface LineageConfiguration {
            /**
                * <p>Specifies whether data lineage is enabled for the crawler. Valid values are:</p>
                *
                * 	        <ul>
                *             <li>
                *                <p>ENABLE: enables data lineage for the crawler</p>
                *             </li>
                *             <li>
                *                <p>DISABLE: disables data lineage for the crawler</p>
                *             </li>
                *          </ul>
                */
            CrawlerLineageSettings?: CrawlerLineageSettings | string;
    }
    export namespace LineageConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LineageConfiguration) => any;
    }
    export enum RecrawlBehavior {
            CRAWL_EVENT_MODE = "CRAWL_EVENT_MODE",
            CRAWL_EVERYTHING = "CRAWL_EVERYTHING",
            CRAWL_NEW_FOLDERS_ONLY = "CRAWL_NEW_FOLDERS_ONLY"
    }
    /**
        * <p>When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/incremental-crawls.html">Incremental Crawls in Glue</a> in the developer guide.</p>
        */
    export interface RecrawlPolicy {
            /**
                * <p>Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run.</p>
                *
                * 	        <p>A value of <code>CRAWL_EVERYTHING</code> specifies crawling the entire dataset again.</p>
                *
                *          <p>A value of <code>CRAWL_NEW_FOLDERS_ONLY</code> specifies crawling only folders that were added since the last crawler run.</p>
                *
                * 	        <p>A value of <code>CRAWL_EVENT_MODE</code> specifies crawling only the changes identified by Amazon S3 events.</p>
                */
            RecrawlBehavior?: RecrawlBehavior | string;
    }
    export namespace RecrawlPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecrawlPolicy) => any;
    }
    export enum ScheduleState {
            NOT_SCHEDULED = "NOT_SCHEDULED",
            SCHEDULED = "SCHEDULED",
            TRANSITIONING = "TRANSITIONING"
    }
    /**
        * <p>A scheduling object using a <code>cron</code> statement to schedule an event.</p>
        */
    export interface Schedule {
            /**
                * <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run
                *       something every day at 12:15 UTC, you would specify:
                *       <code>cron(15 12 * * ? *)</code>.</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>The state of the schedule.</p>
                */
            State?: ScheduleState | string;
    }
    export namespace Schedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Schedule) => any;
    }
    export enum DeleteBehavior {
            DELETE_FROM_DATABASE = "DELETE_FROM_DATABASE",
            DEPRECATE_IN_DATABASE = "DEPRECATE_IN_DATABASE",
            LOG = "LOG"
    }
    export enum UpdateBehavior {
            LOG = "LOG",
            UPDATE_IN_DATABASE = "UPDATE_IN_DATABASE"
    }
    /**
        * <p>A policy that specifies update and deletion behaviors for the crawler.</p>
        */
    export interface SchemaChangePolicy {
            /**
                * <p>The update behavior when the crawler finds a changed schema.</p>
                */
            UpdateBehavior?: UpdateBehavior | string;
            /**
                * <p>The deletion behavior when the crawler finds a deleted object.</p>
                */
            DeleteBehavior?: DeleteBehavior | string;
    }
    export namespace SchemaChangePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaChangePolicy) => any;
    }
    export enum CrawlerState {
            READY = "READY",
            RUNNING = "RUNNING",
            STOPPING = "STOPPING"
    }
    /**
        * <p>Specifies an Glue Data Catalog target.</p>
        */
    export interface CatalogTarget {
            /**
                * <p>The name of the database to be synchronized.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>A list of the tables to be synchronized.</p>
                */
            Tables: string[] | undefined;
            /**
                * <p>The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type.</p>
                */
            ConnectionName?: string;
    }
    export namespace CatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogTarget) => any;
    }
    /**
        * <p>Specifies a Delta data store to crawl one or more Delta tables.</p>
        */
    export interface DeltaTarget {
            /**
                * <p>A list of the Amazon S3 paths to the Delta tables.</p>
                */
            DeltaTables?: string[];
            /**
                * <p>The name of the connection to use to connect to the Delta table target.</p>
                */
            ConnectionName?: string;
            /**
                * <p>Specifies whether to write the manifest files to the Delta table path.</p>
                */
            WriteManifest?: boolean;
    }
    export namespace DeltaTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeltaTarget) => any;
    }
    /**
        * <p>Specifies an Amazon DynamoDB table to crawl.</p>
        */
    export interface DynamoDBTarget {
            /**
                * <p>The name of the DynamoDB table to crawl.</p>
                */
            Path?: string;
            /**
                * <p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p>
                *
                * 	        <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>
                */
            scanAll?: boolean;
            /**
                * <p>The percentage of the configured read capacity units to use by the Glue crawler. Read capacity units is a term defined by DynamoDB, and is a numeric value that acts as rate limiter for the number of reads that can be performed on that table per second.</p>
                *
                * 	        <p>The valid values are null or a value between 0.1 to 1.5. A null value is used when user does not provide a value, and defaults to 0.5 of the configured Read Capacity Unit (for provisioned tables), or 0.25 of the max configured Read Capacity Unit (for tables using on-demand mode).</p>
                */
            scanRate?: number;
    }
    export namespace DynamoDBTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DynamoDBTarget) => any;
    }
    /**
        * <p>Specifies a JDBC data store to crawl.</p>
        */
    export interface JdbcTarget {
            /**
                * <p>The name of the connection to use to connect to the JDBC target.</p>
                */
            ConnectionName?: string;
            /**
                * <p>The path of the JDBC target.</p>
                */
            Path?: string;
            /**
                * <p>A list of glob patterns used to exclude from the crawl.
                *       For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>
                */
            Exclusions?: string[];
    }
    export namespace JdbcTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JdbcTarget) => any;
    }
    /**
        * <p>Specifies an Amazon DocumentDB or MongoDB data store to crawl.</p>
        */
    export interface MongoDBTarget {
            /**
                * <p>The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.</p>
                */
            ConnectionName?: string;
            /**
                * <p>The path of the Amazon DocumentDB or MongoDB target (database/collection).</p>
                */
            Path?: string;
            /**
                * <p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p>
                *
                * 	        <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>
                */
            ScanAll?: boolean;
    }
    export namespace MongoDBTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MongoDBTarget) => any;
    }
    /**
        * <p>Specifies a data store in Amazon Simple Storage Service (Amazon S3).</p>
        */
    export interface S3Target {
            /**
                * <p>The path to the Amazon S3 target.</p>
                */
            Path?: string;
            /**
                * <p>A list of glob patterns used to exclude from the crawl.
                *       For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>
                */
            Exclusions?: string[];
            /**
                * <p>The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC).</p>
                */
            ConnectionName?: string;
            /**
                * <p>Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.</p>
                */
            SampleSize?: number;
            /**
                * <p>A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>.</p>
                */
            EventQueueArn?: string;
            /**
                * <p>A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>.</p>
                */
            DlqEventQueueArn?: string;
    }
    export namespace S3Target {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Target) => any;
    }
    /**
        * <p>Specifies data stores to crawl.</p>
        */
    export interface CrawlerTargets {
            /**
                * <p>Specifies Amazon Simple Storage Service (Amazon S3) targets.</p>
                */
            S3Targets?: S3Target[];
            /**
                * <p>Specifies JDBC targets.</p>
                */
            JdbcTargets?: JdbcTarget[];
            /**
                * <p>Specifies Amazon DocumentDB or MongoDB targets.</p>
                */
            MongoDBTargets?: MongoDBTarget[];
            /**
                * <p>Specifies Amazon DynamoDB targets.</p>
                */
            DynamoDBTargets?: DynamoDBTarget[];
            /**
                * <p>Specifies Glue Data Catalog targets.</p>
                */
            CatalogTargets?: CatalogTarget[];
            /**
                * <p>Specifies Delta data store targets.</p>
                */
            DeltaTargets?: DeltaTarget[];
    }
    export namespace CrawlerTargets {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrawlerTargets) => any;
    }
    /**
        * <p>Specifies a crawler program that examines a data source and uses classifiers to try to
        *       determine its schema. If successful, the crawler records metadata concerning the data source
        *       in the Glue Data Catalog.</p>
        */
    export interface Crawler {
            /**
                * <p>The name of the crawler.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that's used to access customer resources,
                *       such as Amazon Simple Storage Service (Amazon S3) data.</p>
                */
            Role?: string;
            /**
                * <p>A collection of targets to crawl.</p>
                */
            Targets?: CrawlerTargets;
            /**
                * <p>The name of the database in which the crawler's output is stored.</p>
                */
            DatabaseName?: string;
            /**
                * <p>A description of the crawler.</p>
                */
            Description?: string;
            /**
                * <p>A list of UTF-8 strings that specify the custom classifiers that are associated
                *      with the crawler.</p>
                */
            Classifiers?: string[];
            /**
                * <p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>
                */
            RecrawlPolicy?: RecrawlPolicy;
            /**
                * <p>The policy that specifies update and delete behaviors for the crawler.</p>
                */
            SchemaChangePolicy?: SchemaChangePolicy;
            /**
                * <p>A configuration that specifies whether data lineage is enabled for the crawler.</p>
                */
            LineageConfiguration?: LineageConfiguration;
            /**
                * <p>Indicates whether the crawler is running, or whether a run is pending.</p>
                */
            State?: CrawlerState | string;
            /**
                * <p>The prefix added to the names of tables that are created.</p>
                */
            TablePrefix?: string;
            /**
                * <p>For scheduled crawlers, the schedule when the crawler runs.</p>
                */
            Schedule?: Schedule;
            /**
                * <p>If the crawler is running, contains the total time elapsed since the last crawl
                *       began.</p>
                */
            CrawlElapsedTime?: number;
            /**
                * <p>The time that the crawler was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that the crawler was last updated.</p>
                */
            LastUpdated?: Date;
            /**
                * <p>The status of the last crawl, and potentially error information if
                *       an error occurred.</p>
                */
            LastCrawl?: LastCrawlInfo;
            /**
                * <p>The version of the crawler.</p>
                */
            Version?: number;
            /**
                * <p>Crawler configuration information. This versioned JSON string allows users to specify
                *       aspects of a crawler's behavior. For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/define-crawler.html#crawler-data-stores-exclude">Include and Exclude
                *         Patterns</a>.</p>
                */
            Configuration?: string;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used by this
                *       crawler.</p>
                */
            CrawlerSecurityConfiguration?: string;
            /**
                * <p>Specifies whether the crawler should use Lake Formation credentials for the crawler instead of the IAM role credentials.</p>
                */
            LakeFormationConfiguration?: LakeFormationConfiguration;
    }
    export namespace Crawler {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Crawler) => any;
    }
    export interface BatchGetCrawlersResponse {
            /**
                * <p>A list of crawler definitions.</p>
                */
            Crawlers?: Crawler[];
            /**
                * <p>A list of names of crawlers that were not found.</p>
                */
            CrawlersNotFound?: string[];
    }
    export namespace BatchGetCrawlersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetCrawlersResponse) => any;
    }
    export interface BatchGetCustomEntityTypesRequest {
            /**
                * <p>A list of names of the custom patterns that you want to retrieve.</p>
                */
            Names: string[] | undefined;
    }
    export namespace BatchGetCustomEntityTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetCustomEntityTypesRequest) => any;
    }
    /**
        * <p>An object representing a custom pattern for detecting sensitive data across the columns and rows of your structured data.</p>
        */
    export interface CustomEntityType {
            /**
                * <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
                */
            Name: string | undefined;
            /**
                * <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
                */
            RegexString: string | undefined;
            /**
                * <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
                *
                * 	        <p>If no context words are passed only a regular expression is checked.</p>
                */
            ContextWords?: string[];
    }
    export namespace CustomEntityType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomEntityType) => any;
    }
    export interface BatchGetCustomEntityTypesResponse {
            /**
                * <p>A list of <code>CustomEntityType</code> objects representing the custom patterns that have been created.</p>
                */
            CustomEntityTypes?: CustomEntityType[];
            /**
                * <p>A list of the names of custom patterns that were not found.</p>
                */
            CustomEntityTypesNotFound?: string[];
    }
    export namespace BatchGetCustomEntityTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetCustomEntityTypesResponse) => any;
    }
    export interface BatchGetDevEndpointsRequest {
            /**
                * <p>The list of <code>DevEndpoint</code> names, which might be the names returned from the
                *         <code>ListDevEndpoint</code> operation.</p>
                */
            DevEndpointNames: string[] | undefined;
    }
    export namespace BatchGetDevEndpointsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDevEndpointsRequest) => any;
    }
    export type WorkerType = "G.025X" | "G.1X" | "G.2X" | "Standard";
    /**
        * <p>A development endpoint where a developer can remotely debug extract, transform, and load
        *       (ETL) scripts.</p>
        */
    export interface DevEndpoint {
            /**
                * <p>The name of the <code>DevEndpoint</code>.</p>
                */
            EndpointName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used in this
                *       <code>DevEndpoint</code>.</p>
                */
            RoleArn?: string;
            /**
                * <p>A list of security group identifiers used in this <code>DevEndpoint</code>.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>The subnet ID for this <code>DevEndpoint</code>.</p>
                */
            SubnetId?: string;
            /**
                * <p>The YARN endpoint address used by this <code>DevEndpoint</code>.</p>
                */
            YarnEndpointAddress?: string;
            /**
                * <p>A private IP address to access the <code>DevEndpoint</code> within a VPC if the
                *         <code>DevEndpoint</code> is created within one. The <code>PrivateAddress</code> field is
                *       present only when you create the <code>DevEndpoint</code> within your VPC.</p>
                */
            PrivateAddress?: string;
            /**
                * <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
                */
            ZeppelinRemoteSparkInterpreterPort?: number;
            /**
                * <p>The public IP address used by this <code>DevEndpoint</code>. The
                *         <code>PublicAddress</code> field is present only when you create a non-virtual private cloud
                *       (VPC) <code>DevEndpoint</code>.</p>
                */
            PublicAddress?: string;
            /**
                * <p>The current status of this <code>DevEndpoint</code>.</p>
                */
            Status?: string;
            /**
                * <p>The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *          </ul>
                *
                * 	        <p>Known issue: when a development endpoint is created with the <code>G.2X</code>
                *             <code>WorkerType</code> configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk. </p>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
                *
                *          <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
                *
                * 	        <p>Development endpoints that are created without specifying a Glue version default to Glue 0.9.</p>
                *
                * 	        <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
                *
                * 		       <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The number of Glue Data Processing Units (DPUs) allocated to this
                *         <code>DevEndpoint</code>.</p>
                */
            NumberOfNodes?: number;
            /**
                * <p>The AWS Availability Zone where this <code>DevEndpoint</code> is located.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
                */
            VpcId?: string;
            /**
                * <p>The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
                *       your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a
                *       comma.</p>
                *
                *          <note>
                *             <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on
                *         C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data
                *         analysis library, are not currently supported.</p>
                *          </note>
                */
            ExtraPythonLibsS3Path?: string;
            /**
                * <p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded
                *       in your <code>DevEndpoint</code>.</p>
                *          <note>
                *             <p>You can only use pure Java/Scala libraries with a <code>DevEndpoint</code>.</p>
                *          </note>
                */
            ExtraJarsS3Path?: string;
            /**
                * <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
                */
            FailureReason?: string;
            /**
                * <p>The status of the last update.</p>
                */
            LastUpdateStatus?: string;
            /**
                * <p>The point in time at which this DevEndpoint was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The point in time at which this <code>DevEndpoint</code> was last modified.</p>
                */
            LastModifiedTimestamp?: Date;
            /**
                * <p>The public key to be used by this <code>DevEndpoint</code> for authentication. This
                *       attribute is provided for backward compatibility because the recommended attribute to use is
                *       public keys.</p>
                */
            PublicKey?: string;
            /**
                * <p>A list of public keys to be used by the <code>DevEndpoints</code> for authentication.
                *       Using this attribute is preferred over a single public key because the public keys allow you
                *       to have a different private key per client.</p>
                *          <note>
                *             <p>If you previously created an endpoint with a public key, you must remove that key to be
                *         able to set a list of public keys. Call the <code>UpdateDevEndpoint</code> API operation
                *         with the public key content in the <code>deletePublicKeys</code> attribute, and the list of
                *         new keys in the <code>addPublicKeys</code> attribute.</p>
                *          </note>
                */
            PublicKeys?: string[];
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this
                *         <code>DevEndpoint</code>.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>A map of arguments used to configure the <code>DevEndpoint</code>.</p>
                *          <p>Valid arguments are:</p>
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>"--enable-glue-datacatalog": ""</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
                */
            Arguments?: Record<string, string>;
    }
    export namespace DevEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DevEndpoint) => any;
    }
    export interface BatchGetDevEndpointsResponse {
            /**
                * <p>A list of <code>DevEndpoint</code> definitions.</p>
                */
            DevEndpoints?: DevEndpoint[];
            /**
                * <p>A list of <code>DevEndpoints</code> not found.</p>
                */
            DevEndpointsNotFound?: string[];
    }
    export namespace BatchGetDevEndpointsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetDevEndpointsResponse) => any;
    }
    export interface BatchGetJobsRequest {
            /**
                * <p>A list of job names, which might be the names returned from the <code>ListJobs</code>
                *       operation.</p>
                */
            JobNames: string[] | undefined;
    }
    export namespace BatchGetJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetJobsRequest) => any;
    }
    /**
        * <p>Specifies options related to data preview for viewing a sample of your data.</p>
        */
    export interface StreamingDataPreviewOptions {
            /**
                * <p>The polling time in milliseconds.</p>
                */
            PollingTime?: number;
            /**
                * <p>The limit to the number of records polled.</p>
                */
            RecordPollingLimit?: number;
    }
    export namespace StreamingDataPreviewOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamingDataPreviewOptions) => any;
    }
    /**
        * <p>Additional options for streaming.</p>
        */
    export interface KafkaStreamingSourceOptions {
            /**
                * <p>A list of bootstrap server URLs, for example, as <code>b-1.vpc-test-2.o4q88o.c6.kafka.us-east-1.amazonaws.com:9094</code>. This option must be specified in the API call or defined in the table metadata in the Data Catalog.</p>
                */
            BootstrapServers?: string;
            /**
                * <p>The protocol used to communicate with brokers. The possible values are <code>"SSL"</code> or <code>"PLAINTEXT"</code>.</p>
                */
            SecurityProtocol?: string;
            /**
                * <p>The name of the connection.</p>
                */
            ConnectionName?: string;
            /**
                * <p>The topic name as specified in Apache Kafka. You must specify at least one of <code>"topicName"</code>, <code>"assign"</code> or <code>"subscribePattern"</code>.</p>
                */
            TopicName?: string;
            /**
                * <p>The specific <code>TopicPartitions</code> to consume. You must specify at least one of <code>"topicName"</code>, <code>"assign"</code> or <code>"subscribePattern"</code>.</p>
                */
            Assign?: string;
            /**
                * <p>A Java regex string that identifies the topic list to subscribe to. You must specify at least one of <code>"topicName"</code>, <code>"assign"</code> or <code>"subscribePattern"</code>.</p>
                */
            SubscribePattern?: string;
            /**
                * <p>An optional classification.</p>
                */
            Classification?: string;
            /**
                * <p>Specifies the delimiter character.</p>
                */
            Delimiter?: string;
            /**
                * <p>The starting position in the Kafka topic to read data from. The possible values are <code>"earliest"</code> or <code>"latest"</code>. The default value is <code>"latest"</code>.</p>
                */
            StartingOffsets?: string;
            /**
                * <p>The end point when a batch query is ended. Possible values are either <code>"latest"</code> or a JSON string that specifies an ending offset for each <code>TopicPartition</code>.</p>
                */
            EndingOffsets?: string;
            /**
                * <p>The timeout in milliseconds to poll data from Kafka in Spark job executors. The default value is <code>512</code>.</p>
                */
            PollTimeoutMs?: number;
            /**
                * <p>The number of times to retry before failing to fetch Kafka offsets. The default value is <code>3</code>.</p>
                */
            NumRetries?: number;
            /**
                * <p>The time in milliseconds to wait before retrying to fetch Kafka offsets. The default value is <code>10</code>.</p>
                */
            RetryIntervalMs?: number;
            /**
                * <p>The rate limit on the maximum number of offsets that are processed per trigger interval. The specified total number of offsets is proportionally split across <code>topicPartitions</code> of different volumes. The default value is null, which means that the consumer reads all offsets until the known latest offset.</p>
                */
            MaxOffsetsPerTrigger?: number;
            /**
                * <p>The desired minimum number of partitions to read from Kafka. The default value is null, which means that the number of spark partitions is equal to the number of Kafka partitions.</p>
                */
            MinPartitions?: number;
    }
    export namespace KafkaStreamingSourceOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaStreamingSourceOptions) => any;
    }
    /**
        * <p>Specifies an Apache Kafka data store in the Data Catalog.</p>
        */
    export interface CatalogKafkaSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>The amount of time to spend processing each micro batch.</p>
                */
            WindowSize?: number;
            /**
                * <p>Whether to automatically determine the schema from the incoming data.</p>
                */
            DetectSchema?: boolean;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>Specifies the streaming options.</p>
                */
            StreamingOptions?: KafkaStreamingSourceOptions;
            /**
                * <p>Specifies options related to data preview for viewing a sample of your data.</p>
                */
            DataPreviewOptions?: StreamingDataPreviewOptions;
    }
    export namespace CatalogKafkaSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogKafkaSource) => any;
    }
    export enum StartingPosition {
            EARLIEST = "earliest",
            LATEST = "latest",
            TRIM_HORIZON = "trim_horizon"
    }
    /**
        * <p>Additional options for the Amazon Kinesis streaming data source.</p>
        */
    export interface KinesisStreamingSourceOptions {
            /**
                * <p>The URL of the Kinesis endpoint.</p>
                */
            EndpointUrl?: string;
            /**
                * <p>The name of the Kinesis data stream.</p>
                */
            StreamName?: string;
            /**
                * <p>An optional classification.</p>
                */
            Classification?: string;
            /**
                * <p>Specifies the delimiter character.</p>
                */
            Delimiter?: string;
            /**
                * <p>The starting position in the Kinesis data stream to read data from. The possible values are <code>"latest"</code>, <code>"trim_horizon"</code>, or <code>"earliest"</code>. The default value is <code>"latest"</code>.</p>
                */
            StartingPosition?: StartingPosition | string;
            /**
                * <p>The maximum time spent in the job executor to fetch a record from the Kinesis data stream per shard, specified in milliseconds (ms). The default value is <code>1000</code>.</p>
                */
            MaxFetchTimeInMs?: number;
            /**
                * <p>The maximum number of records to fetch per shard in the Kinesis data stream. The default value is <code>100000</code>.</p>
                */
            MaxFetchRecordsPerShard?: number;
            /**
                * <p>The maximum number of records to fetch from the Kinesis data stream in each getRecords operation. The default value is <code>10000</code>.</p>
                */
            MaxRecordPerRead?: number;
            /**
                * <p>Adds a time delay between two consecutive getRecords operations. The default value is <code>"False"</code>. This option is only configurable for Glue version 2.0 and above.</p>
                */
            AddIdleTimeBetweenReads?: boolean;
            /**
                * <p>The minimum time delay between two consecutive getRecords operations, specified in ms. The default value is <code>1000</code>. This option is only configurable for Glue version 2.0 and above.</p>
                */
            IdleTimeBetweenReadsInMs?: number;
            /**
                * <p>The minimum time interval between two ListShards API calls for your script to consider resharding. The default value is <code>1s</code>.</p>
                */
            DescribeShardInterval?: number;
            /**
                * <p>The maximum number of retries for Kinesis Data Streams API requests. The default value is <code>3</code>.</p>
                */
            NumRetries?: number;
            /**
                * <p>The cool-off time period (specified in ms) before retrying the Kinesis Data Streams API call. The default value is <code>1000</code>.</p>
                */
            RetryIntervalMs?: number;
            /**
                * <p>The maximum cool-off time period (specified in ms) between two retries of a Kinesis Data Streams API call. The default value is <code>10000</code>.</p>
                */
            MaxRetryIntervalMs?: number;
            /**
                * <p>Avoids creating an empty microbatch job by checking for unread data in the Kinesis data stream before the batch is started. The default value is <code>"False"</code>.</p>
                */
            AvoidEmptyBatches?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the Kinesis data stream.</p>
                */
            StreamArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role to assume using AWS Security Token Service (AWS STS). This role must have permissions for describe or read record operations for the Kinesis data stream. You must use this parameter when accessing a data stream in a different account. Used in conjunction with <code>"awsSTSSessionName"</code>.</p>
                */
            RoleArn?: string;
            /**
                * <p>An identifier for the session assuming the role using AWS STS. You must use this parameter when accessing a data stream in a different account. Used in conjunction with <code>"awsSTSRoleARN"</code>.</p>
                */
            RoleSessionName?: string;
    }
    export namespace KinesisStreamingSourceOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KinesisStreamingSourceOptions) => any;
    }
    /**
        * <p>Specifies a Kinesis data source in the Glue Data Catalog.</p>
        */
    export interface CatalogKinesisSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The amount of time to spend processing each micro batch.</p>
                */
            WindowSize?: number;
            /**
                * <p>Whether to automatically determine the schema from the incoming data.</p>
                */
            DetectSchema?: boolean;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>Additional options for the Kinesis streaming data source.</p>
                */
            StreamingOptions?: KinesisStreamingSourceOptions;
            /**
                * <p>Additional options for data preview.</p>
                */
            DataPreviewOptions?: StreamingDataPreviewOptions;
    }
    export namespace CatalogKinesisSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogKinesisSource) => any;
    }
    /**
        * <p>Specifies a data store in the Glue Data Catalog.</p>
        */
    export interface CatalogSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
    }
    export namespace CatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogSource) => any;
    }
    /**
        * <p>Specifies a target that uses a Glue Data Catalog table.</p>
        */
    export interface BasicCatalogTarget {
            /**
                * <p>The name of your data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The database that contains the table you want to use as the target. This database must already exist in the Data Catalog.</p>
                */
            Database: string | undefined;
            /**
                * <p>The table that defines the schema of your output data. This table must already exist in the Data Catalog.</p>
                */
            Table: string | undefined;
    }
    export namespace BasicCatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BasicCatalogTarget) => any;
    }
    /**
        * <p>Specifies a transform that uses custom code you provide to perform the data transformation. The output is a collection of DynamicFrames.</p>
        */
    export interface CustomCode {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The custom code that is used to perform the data transformation.</p>
                */
            Code: string | undefined;
            /**
                * <p>The name defined for the custom code node class.</p>
                */
            ClassName: string | undefined;
            /**
                * <p>Specifies the data schema for the custom code transform.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace CustomCode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomCode) => any;
    }
    /**
        * <p>Specifies an Apache Kafka data store.</p>
        */
    export interface DirectKafkaSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies the streaming options.</p>
                */
            StreamingOptions?: KafkaStreamingSourceOptions;
            /**
                * <p>The amount of time to spend processing each micro batch.</p>
                */
            WindowSize?: number;
            /**
                * <p>Whether to automatically determine the schema from the incoming data.</p>
                */
            DetectSchema?: boolean;
            /**
                * <p>Specifies options related to data preview for viewing a sample of your data.</p>
                */
            DataPreviewOptions?: StreamingDataPreviewOptions;
    }
    export namespace DirectKafkaSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DirectKafkaSource) => any;
    }
    /**
        * <p>Specifies a direct Amazon Kinesis data source.</p>
        */
    export interface DirectKinesisSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The amount of time to spend processing each micro batch.</p>
                */
            WindowSize?: number;
            /**
                * <p>Whether to automatically determine the schema from the incoming data.</p>
                */
            DetectSchema?: boolean;
            /**
                * <p>Additional options for the Kinesis streaming data source.</p>
                */
            StreamingOptions?: KinesisStreamingSourceOptions;
            /**
                * <p>Additional options for data preview.</p>
                */
            DataPreviewOptions?: StreamingDataPreviewOptions;
    }
    export namespace DirectKinesisSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DirectKinesisSource) => any;
    }
    /**
        * <p>Specifies a transform that removes rows of repeating data from a data set. </p>
        */
    export interface DropDuplicates {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of the columns to be merged or removed if repeating.</p>
                */
            Columns?: string[][];
    }
    export namespace DropDuplicates {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DropDuplicates) => any;
    }
    /**
        * <p>Specifies a transform that chooses the data property keys that you want to drop.</p>
        */
    export interface DropFields {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A JSON path to a variable in the data structure.</p>
                */
            Paths: string[][] | undefined;
    }
    export namespace DropFields {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DropFields) => any;
    }
    /**
        * <p>Represents whether certain values are recognized as null values for removal.</p>
        */
    export interface NullCheckBoxList {
            /**
                * <p>Specifies that an empty string is considered as a null value.</p>
                */
            IsEmpty?: boolean;
            /**
                * <p>Specifies that a value spelling out the word 'null' is considered as a null value.</p>
                */
            IsNullString?: boolean;
            /**
                * <p>Specifies that an integer value of -1 is considered as a null value.</p>
                */
            IsNegOne?: boolean;
    }
    export namespace NullCheckBoxList {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NullCheckBoxList) => any;
    }
    /**
        * <p>A structure representing the datatype of the value.</p>
        */
    export interface Datatype {
            /**
                * <p>The datatype of the value.</p>
                */
            Id: string | undefined;
            /**
                * <p>A label assigned to the datatype.</p>
                */
            Label: string | undefined;
    }
    export namespace Datatype {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Datatype) => any;
    }
    /**
        * <p>Represents a custom null value such as a zeros or other value being used as a null placeholder unique to the dataset.</p>
        */
    export interface NullValueField {
            /**
                * <p>The value of the null placeholder.</p>
                */
            Value: string | undefined;
            /**
                * <p>The datatype of the value.</p>
                */
            Datatype: Datatype | undefined;
    }
    export namespace NullValueField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NullValueField) => any;
    }
    /**
        * <p>Specifies a transform that removes columns from the dataset if all values in the column are 'null'. By default, Glue Studio will recognize null objects, but some values such as empty strings, strings that are "null", -1 integers or other placeholders such as zeros, are not automatically recognized as nulls.</p>
        */
    export interface DropNullFields {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A structure that represents whether certain values are recognized as null values for removal.</p>
                */
            NullCheckBoxList?: NullCheckBoxList;
            /**
                * <p>A structure that specifies a list of NullValueField structures that represent a custom null value such as zero or other value being used as a null placeholder unique to the dataset.</p>
                *
                *          <p>The <code>DropNullFields</code> transform removes custom null values only if both the value of the null placeholder and the datatype match the data.</p>
                */
            NullTextList?: NullValueField[];
    }
    export namespace DropNullFields {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DropNullFields) => any;
    }
    /**
        * <p>Specifies a DynamoDB data source in the Glue Data Catalog.</p>
        */
    export interface DynamoDBCatalogSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
    }
    export namespace DynamoDBCatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DynamoDBCatalogSource) => any;
    }
    /**
        * <p>Specifies a transform that locates records in the dataset that have missing values and adds a new field with a value determined by imputation. The input data set is used to train the machine learning model that determines what the missing value should be.</p>
        */
    export interface FillMissingValues {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A JSON path to a variable in the data structure for the dataset that is imputed.</p>
                */
            ImputedPath: string | undefined;
            /**
                * <p>A JSON path to a variable in the data structure for the dataset that is filled.</p>
                */
            FilledPath?: string;
    }
    export namespace FillMissingValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FillMissingValues) => any;
    }
    export enum FilterOperation {
            EQ = "EQ",
            GT = "GT",
            GTE = "GTE",
            ISNULL = "ISNULL",
            LT = "LT",
            LTE = "LTE",
            REGEX = "REGEX"
    }
    export enum FilterValueType {
            COLUMNEXTRACTED = "COLUMNEXTRACTED",
            CONSTANT = "CONSTANT"
    }
    /**
        * <p>Represents a single entry in the list of values for a <code>FilterExpression</code>. </p>
        */
    export interface FilterValue {
            /**
                * <p>The type of filter value.</p>
                */
            Type: FilterValueType | string | undefined;
            /**
                * <p>The value to be associated.</p>
                */
            Value: string[] | undefined;
    }
    export namespace FilterValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterValue) => any;
    }
    /**
        * <p>Specifies a filter expression.</p>
        */
    export interface FilterExpression {
            /**
                * <p>The type of operation to perform in the expression.</p>
                */
            Operation: FilterOperation | string | undefined;
            /**
                * <p>Whether the expression is to be negated.</p>
                */
            Negated?: boolean;
            /**
                * <p>A list of filter values.</p>
                */
            Values: FilterValue[] | undefined;
    }
    export namespace FilterExpression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterExpression) => any;
    }
    export enum FilterLogicalOperator {
            AND = "AND",
            OR = "OR"
    }
    /**
        * <p>Specifies a transform that splits a dataset into two, based on a filter condition.</p>
        */
    export interface Filter {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The operator used to filter rows by comparing the key value to a specified value.</p>
                */
            LogicalOperator: FilterLogicalOperator | string | undefined;
            /**
                * <p>Specifies a filter expression.</p>
                */
            Filters: FilterExpression[] | undefined;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>Specifies additional connection options for the Amazon S3 data store.</p>
        */
    export interface S3SourceAdditionalOptions {
            /**
                * <p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>
                */
            BoundedSize?: number;
            /**
                * <p>Sets the upper limit for the target number of files that will be processed.</p>
                */
            BoundedFiles?: number;
    }
    export namespace S3SourceAdditionalOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3SourceAdditionalOptions) => any;
    }
    /**
        * <p>Specifies the data store in the governed Glue Data Catalog.</p>
        */
    export interface GovernedCatalogSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>The database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The database table to read from.</p>
                */
            Table: string | undefined;
            /**
                * <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
                */
            PartitionPredicate?: string;
            /**
                * <p>Specifies additional connection options.</p>
                */
            AdditionalOptions?: S3SourceAdditionalOptions;
    }
    export namespace GovernedCatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GovernedCatalogSource) => any;
    }
    export enum UpdateCatalogBehavior {
            LOG = "LOG",
            UPDATE_IN_DATABASE = "UPDATE_IN_DATABASE"
    }
    /**
        * <p>A policy that specifies update behavior for the crawler.</p>
        */
    export interface CatalogSchemaChangePolicy {
            /**
                * <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
                */
            EnableUpdateCatalog?: boolean;
            /**
                * <p>The update behavior when the crawler finds a changed schema.</p>
                */
            UpdateBehavior?: UpdateCatalogBehavior | string;
    }
    export namespace CatalogSchemaChangePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogSchemaChangePolicy) => any;
    }
    /**
        * <p>Specifies a data target that writes to Amazon S3 using the Glue Data Catalog.</p>
        */
    export interface GovernedCatalogTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Specifies native partitioning using a sequence of keys.</p>
                */
            PartitionKeys?: string[][];
            /**
                * <p>The name of the table in the database to write to.</p>
                */
            Table: string | undefined;
            /**
                * <p>The name of the database to write to.</p>
                */
            Database: string | undefined;
            /**
                * <p>A policy that specifies update behavior for the governed catalog.</p>
                */
            SchemaChangePolicy?: CatalogSchemaChangePolicy;
    }
    export namespace GovernedCatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GovernedCatalogTarget) => any;
    }
    export enum JDBCDataType {
            ARRAY = "ARRAY",
            BIGINT = "BIGINT",
            BINARY = "BINARY",
            BIT = "BIT",
            BLOB = "BLOB",
            BOOLEAN = "BOOLEAN",
            CHAR = "CHAR",
            CLOB = "CLOB",
            DATALINK = "DATALINK",
            DATE = "DATE",
            DECIMAL = "DECIMAL",
            DISTINCT = "DISTINCT",
            DOUBLE = "DOUBLE",
            FLOAT = "FLOAT",
            INTEGER = "INTEGER",
            JAVA_OBJECT = "JAVA_OBJECT",
            LONGNVARCHAR = "LONGNVARCHAR",
            LONGVARBINARY = "LONGVARBINARY",
            LONGVARCHAR = "LONGVARCHAR",
            NCHAR = "NCHAR",
            NCLOB = "NCLOB",
            NULL = "NULL",
            NUMERIC = "NUMERIC",
            NVARCHAR = "NVARCHAR",
            OTHER = "OTHER",
            REAL = "REAL",
            REF = "REF",
            REF_CURSOR = "REF_CURSOR",
            ROWID = "ROWID",
            SMALLINT = "SMALLINT",
            SQLXML = "SQLXML",
            STRUCT = "STRUCT",
            TIME = "TIME",
            TIMESTAMP = "TIMESTAMP",
            TIMESTAMP_WITH_TIMEZONE = "TIMESTAMP_WITH_TIMEZONE",
            TIME_WITH_TIMEZONE = "TIME_WITH_TIMEZONE",
            TINYINT = "TINYINT",
            VARBINARY = "VARBINARY",
            VARCHAR = "VARCHAR"
    }
    export enum GlueRecordType {
            BIGDECIMAL = "BIGDECIMAL",
            BYTE = "BYTE",
            DATE = "DATE",
            DOUBLE = "DOUBLE",
            FLOAT = "FLOAT",
            INT = "INT",
            LONG = "LONG",
            SHORT = "SHORT",
            STRING = "STRING",
            TIMESTAMP = "TIMESTAMP"
    }
    /**
        * <p>Additional connection options for the connector.</p>
        */
    export interface JDBCConnectorOptions {
            /**
                * <p>Extra condition clause to filter data from source. For example:</p>
                *
                * 	        <p>
                *             <code>BillingCity='Mountain View'</code>
                *          </p>
                *
                * 	        <p>When using a query instead of a table name, you should validate that the query works with the specified <code>filterPredicate</code>.</p>
                */
            FilterPredicate?: string;
            /**
                * <p>The name of an integer column that is used for partitioning. This option works only when it's included with <code>lowerBound</code>, <code>upperBound</code>, and <code>numPartitions</code>. This option works the same way as in the Spark SQL JDBC reader.</p>
                */
            PartitionColumn?: string;
            /**
                * <p>The minimum value of <code>partitionColumn</code> that is used to decide partition stride.</p>
                */
            LowerBound?: number;
            /**
                * <p>The maximum value of <code>partitionColumn</code> that is used to decide partition stride.</p>
                */
            UpperBound?: number;
            /**
                * <p>The number of partitions. This value, along with <code>lowerBound</code> (inclusive) and <code>upperBound</code> (exclusive), form partition strides for generated <code>WHERE</code> clause expressions that are used to split the <code>partitionColumn</code>.</p>
                */
            NumPartitions?: number;
            /**
                * <p>The name of the job bookmark keys on which to sort.</p>
                */
            JobBookmarkKeys?: string[];
            /**
                * <p>Specifies an ascending or descending sort order.</p>
                */
            JobBookmarkKeysSortOrder?: string;
            /**
                * <p>Custom data type mapping that builds a mapping from a JDBC data type to an Glue data type. For example, the option <code>"dataTypeMapping":{"FLOAT":"STRING"}</code> maps data fields of JDBC type <code>FLOAT</code> into the Java <code>String</code> type by calling the <code>ResultSet.getString()</code> method of the driver, and uses it to build the Glue record. The <code>ResultSet</code> object is implemented by each driver, so the behavior is specific to the driver you use. Refer to the documentation for your JDBC driver to understand how the driver performs the conversions.</p>
                */
            DataTypeMapping?: Record<string, GlueRecordType | string>;
    }
    export namespace JDBCConnectorOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JDBCConnectorOptions) => any;
    }
    /**
        * <p>Specifies a connector to a JDBC data source.</p>
        */
    export interface JDBCConnectorSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the connection that is associated with the connector.</p>
                */
            ConnectionName: string | undefined;
            /**
                * <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
                */
            ConnectorName: string | undefined;
            /**
                * <p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data store.</p>
                */
            ConnectionType: string | undefined;
            /**
                * <p>Additional connection options for the connector.</p>
                */
            AdditionalOptions?: JDBCConnectorOptions;
            /**
                * <p>The name of the table in the data source.</p>
                */
            ConnectionTable?: string;
            /**
                * <p>The table or SQL query to get the data from. You can specify either <code>ConnectionTable</code> or <code>query</code>, but not both.</p>
                */
            Query?: string;
            /**
                * <p>Specifies the data schema for the custom JDBC source.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace JDBCConnectorSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JDBCConnectorSource) => any;
    }
    /**
        * <p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>
        */
    export interface JDBCConnectorTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of the connection that is associated with the connector.</p>
                */
            ConnectionName: string | undefined;
            /**
                * <p>The name of the table in the data target.</p>
                */
            ConnectionTable: string | undefined;
            /**
                * <p>The name of a connector that will be used.</p>
                */
            ConnectorName: string | undefined;
            /**
                * <p>The type of connection, such as marketplace.jdbc or custom.jdbc, designating a connection to a JDBC data target.</p>
                */
            ConnectionType: string | undefined;
            /**
                * <p>Additional connection options for the connector.</p>
                */
            AdditionalOptions?: Record<string, string>;
            /**
                * <p>Specifies the data schema for the JDBC target.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace JDBCConnectorTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JDBCConnectorTarget) => any;
    }
    /**
        * <p>Specifies a column to be joined.</p>
        */
    export interface JoinColumn {
            /**
                * <p>The column to be joined.</p>
                */
            From: string | undefined;
            /**
                * <p>The key of the column to be joined.</p>
                */
            Keys: string[][] | undefined;
    }
    export namespace JoinColumn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JoinColumn) => any;
    }
    export enum JoinType {
            EQUIJOIN = "equijoin",
            LEFT = "left",
            LEFT_ANTI = "leftanti",
            LEFT_SEMI = "leftsemi",
            OUTER = "outer",
            RIGHT = "right"
    }
    /**
        * <p>Specifies a transform that joins two datasets into one dataset using a comparison phrase on the specified data property keys. You can use inner, outer, left, right, left semi, and left anti joins.</p>
        */
    export interface Join {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Specifies the type of join to be performed on the datasets.</p>
                */
            JoinType: JoinType | string | undefined;
            /**
                * <p>A list of the two columns to be joined.</p>
                */
            Columns: JoinColumn[] | undefined;
    }
    export namespace Join {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Join) => any;
    }
    /**
        * <p>Specifies a transform that merges a <code>DynamicFrame</code> with a staging <code>DynamicFrame</code> based on the specified primary keys to identify records. Duplicate records (records with the same primary keys) are not de-duplicated. </p>
        */
    export interface Merge {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The source <code>DynamicFrame</code> that will be merged with a staging <code>DynamicFrame</code>.</p>
                */
            Source: string | undefined;
            /**
                * <p>The list of primary key fields to match records from the source and staging dynamic frames.</p>
                */
            PrimaryKeys: string[][] | undefined;
    }
    export namespace Merge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Merge) => any;
    }
    /**
        * <p>Specifies a Microsoft SQL server data source in the Glue Data Catalog.</p>
        */
    export interface MicrosoftSQLServerCatalogSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
    }
    export namespace MicrosoftSQLServerCatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MicrosoftSQLServerCatalogSource) => any;
    }
    /**
        * <p>Specifies a target that uses Microsoft SQL.</p>
        */
    export interface MicrosoftSQLServerCatalogTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of the database to write to.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to write to.</p>
                */
            Table: string | undefined;
    }
    export namespace MicrosoftSQLServerCatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MicrosoftSQLServerCatalogTarget) => any;
    }
    /**
        * <p>Specifies a MySQL data source in the Glue Data Catalog.</p>
        */
    export interface MySQLCatalogSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
    }
    export namespace MySQLCatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MySQLCatalogSource) => any;
    }
    /**
        * <p>Specifies a target that uses MySQL.</p>
        */
    export interface MySQLCatalogTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of the database to write to.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to write to.</p>
                */
            Table: string | undefined;
    }
    export namespace MySQLCatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MySQLCatalogTarget) => any;
    }
    /**
        * <p>Specifies an Oracle data source in the Glue Data Catalog.</p>
        */
    export interface OracleSQLCatalogSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
    }
    export namespace OracleSQLCatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OracleSQLCatalogSource) => any;
    }
    /**
        * <p>Specifies a target that uses Oracle SQL.</p>
        */
    export interface OracleSQLCatalogTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of the database to write to.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to write to.</p>
                */
            Table: string | undefined;
    }
    export namespace OracleSQLCatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OracleSQLCatalogTarget) => any;
    }
    export enum PiiType {
            ColumnAudit = "ColumnAudit",
            ColumnMasking = "ColumnMasking",
            RowAudit = "RowAudit",
            RowMasking = "RowMasking"
    }
    /**
        * <p>Specifies a transform that identifies, removes or masks PII data.</p>
        */
    export interface PIIDetection {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The node ID inputs to the transform.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Indicates the type of PIIDetection transform. </p>
                */
            PiiType: PiiType | string | undefined;
            /**
                * <p>Indicates the types of entities the PIIDetection transform will identify as PII data. </p>
                *          <p>
                *        PII type entities include: PERSON_NAME, DATE, USA_SNN, EMAIL, USA_ITIN, USA_PASSPORT_NUMBER, PHONE_NUMBER, BANK_ACCOUNT,
                *        IP_ADDRESS, MAC_ADDRESS, USA_CPT_CODE, USA_HCPCS_CODE, USA_NATIONAL_DRUG_CODE, USA_MEDICARE_BENEFICIARY_IDENTIFIER,
                *        USA_HEALTH_INSURANCE_CLAIM_NUMBER,CREDIT_CARD,USA_NATIONAL_PROVIDER_IDENTIFIER,USA_DEA_NUMBER,USA_DRIVING_LICENSE
                *     </p>
                */
            EntityTypesToDetect: string[] | undefined;
            /**
                * <p>Indicates the output column name that will contain any entity type detected in that row. </p>
                */
            OutputColumnName?: string;
            /**
                * <p>Indicates the fraction of the data to sample when scanning for PII entities. </p>
                */
            SampleFraction?: number;
            /**
                * <p>Indicates the fraction of the data that must be met in order for a column to be identified as PII data. </p>
                */
            ThresholdFraction?: number;
            /**
                * <p>Indicates the value that will replace the detected entity. </p>
                */
            MaskValue?: string;
    }
    export namespace PIIDetection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PIIDetection) => any;
    }
    /**
        * <p>Specifies a PostgresSQL data source in the Glue Data Catalog.</p>
        */
    export interface PostgreSQLCatalogSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
    }
    export namespace PostgreSQLCatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostgreSQLCatalogSource) => any;
    }
    /**
        * <p>Specifies a target that uses Postgres SQL.</p>
        */
    export interface PostgreSQLCatalogTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of the database to write to.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to write to.</p>
                */
            Table: string | undefined;
    }
    export namespace PostgreSQLCatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostgreSQLCatalogTarget) => any;
    }
    /**
        * <p>Specifies an Amazon Redshift data store.</p>
        */
    export interface RedshiftSource {
            /**
                * <p>The name of the Amazon Redshift data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>The database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The database table to read from.</p>
                */
            Table: string | undefined;
            /**
                * <p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>
                */
            RedshiftTmpDir?: string;
            /**
                * <p>The IAM role with permissions.</p>
                */
            TmpDirIAMRole?: string;
    }
    export namespace RedshiftSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedshiftSource) => any;
    }
    /**
        * <p>The options to configure an upsert operation when writing to a Redshift target .</p>
        */
    export interface UpsertRedshiftTargetOptions {
            /**
                * <p>The physical location of the Redshift table.</p>
                */
            TableLocation?: string;
            /**
                * <p>The name of the connection to use to write to Redshift.</p>
                */
            ConnectionName?: string;
            /**
                * <p>The keys used to determine whether to perform an update or insert.</p>
                */
            UpsertKeys?: string[];
    }
    export namespace UpsertRedshiftTargetOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpsertRedshiftTargetOptions) => any;
    }
    /**
        * <p>Specifies a target that uses Amazon Redshift.</p>
        */
    export interface RedshiftTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of the database to write to.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to write to.</p>
                */
            Table: string | undefined;
            /**
                * <p>The Amazon S3 path where temporary data can be staged when copying out of the database.</p>
                */
            RedshiftTmpDir?: string;
            /**
                * <p>The IAM role with permissions.</p>
                */
            TmpDirIAMRole?: string;
            /**
                * <p>The set of options to configure an upsert operation when writing to a Redshift target.</p>
                */
            UpsertRedshiftOptions?: UpsertRedshiftTargetOptions;
    }
    export namespace RedshiftTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedshiftTarget) => any;
    }
    /**
        * <p>Specifies a Relational database data source in the Glue Data Catalog.</p>
        */
    export interface RelationalCatalogSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The name of the table in the database to read from.</p>
                */
            Table: string | undefined;
    }
    export namespace RelationalCatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalCatalogSource) => any;
    }
    /**
        * <p>Specifies a transform that renames a single data property key.</p>
        */
    export interface RenameField {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A JSON path to a variable in the data structure for the source data.</p>
                */
            SourcePath: string[] | undefined;
            /**
                * <p>A JSON path to a variable in the data structure for the target data.</p>
                */
            TargetPath: string[] | undefined;
    }
    export namespace RenameField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenameField) => any;
    }
    /**
        * <p>Specifies an Amazon S3 data store in the Glue Data Catalog.</p>
        */
    export interface S3CatalogSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>The database to read from.</p>
                */
            Database: string | undefined;
            /**
                * <p>The database table to read from.</p>
                */
            Table: string | undefined;
            /**
                * <p>Partitions satisfying this predicate are deleted. Files within the retention period in these partitions are not deleted. Set to <code>""</code> – empty by default.</p>
                */
            PartitionPredicate?: string;
            /**
                * <p>Specifies additional connection options.</p>
                */
            AdditionalOptions?: S3SourceAdditionalOptions;
    }
    export namespace S3CatalogSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3CatalogSource) => any;
    }
    /**
        * <p>Specifies a data target that writes to Amazon S3 using the Glue Data Catalog.</p>
        */
    export interface S3CatalogTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Specifies native partitioning using a sequence of keys.</p>
                */
            PartitionKeys?: string[][];
            /**
                * <p>The name of the table in the database to write to.</p>
                */
            Table: string | undefined;
            /**
                * <p>The name of the database to write to.</p>
                */
            Database: string | undefined;
            /**
                * <p>A policy that specifies update behavior for the crawler.</p>
                */
            SchemaChangePolicy?: CatalogSchemaChangePolicy;
    }
    export namespace S3CatalogTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3CatalogTarget) => any;
    }
    /**
        * <p>Specifies additional connection options for the Amazon S3 data store.</p>
        */
    export interface S3DirectSourceAdditionalOptions {
            /**
                * <p>Sets the upper limit for the target size of the dataset in bytes that will be processed.</p>
                */
            BoundedSize?: number;
            /**
                * <p>Sets the upper limit for the target number of files that will be processed.</p>
                */
            BoundedFiles?: number;
            /**
                * <p>Sets option to enable a sample path.</p>
                */
            EnableSamplePath?: boolean;
            /**
                * <p>If enabled, specifies the sample path.</p>
                */
            SamplePath?: string;
    }
    export namespace S3DirectSourceAdditionalOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3DirectSourceAdditionalOptions) => any;
    }
    export enum CompressionType {
            BZIP2 = "bzip2",
            GZIP = "gzip"
    }
    export enum QuoteChar {
            DISABLED = "disabled",
            QUILLEMET = "quillemet",
            QUOTE = "quote",
            SINGLE_QUOTE = "single_quote"
    }
    export enum Separator {
            COMMA = "comma",
            CTRLA = "ctrla",
            PIPE = "pipe",
            SEMICOLON = "semicolon",
            TAB = "tab"
    }
    /**
        * <p>Specifies a command-separated value (CSV) data store stored in Amazon S3.</p>
        */
    export interface S3CsvSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of the Amazon S3 paths to read from.</p>
                */
            Paths: string[] | undefined;
            /**
                * <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
                */
            CompressionType?: CompressionType | string;
            /**
                * <p>A string containing a JSON list of Unix-style glob patterns to exclude. For example, "[\"**.pdf\"]" excludes all PDF files. </p>
                */
            Exclusions?: string[];
            /**
                * <p>The target group size in bytes. The default is computed based on the input data size and the size of your cluster. When there are fewer than 50,000 input files, <code>"groupFiles"</code> must be set to <code>"inPartition"</code> for this to take effect.</p>
                */
            GroupSize?: string;
            /**
                * <p>Grouping files is turned on by default when the input contains more than 50,000 files. To turn on grouping with fewer than 50,000 files, set this parameter to "inPartition". To disable grouping when there are more than 50,000 files, set this parameter to <code>"none"</code>.</p>
                */
            GroupFiles?: string;
            /**
                * <p>If set to true, recursively reads files in all subdirectories under the specified paths.</p>
                */
            Recurse?: boolean;
            /**
                * <p>This option controls the duration in milliseconds after which the s3 listing is likely to be consistent. Files with modification timestamps falling within the last maxBand milliseconds are tracked specially when using JobBookmarks to account for Amazon S3 eventual consistency. Most users don't need to set this option. The default is 900000 milliseconds, or 15 minutes.</p>
                */
            MaxBand?: number;
            /**
                * <p>This option specifies the maximum number of files to save from the last maxBand seconds. If this number is exceeded, extra files are skipped and only processed in the next job run.</p>
                */
            MaxFilesInBand?: number;
            /**
                * <p>Specifies additional connection options.</p>
                */
            AdditionalOptions?: S3DirectSourceAdditionalOptions;
            /**
                * <p>Specifies the delimiter character. The default is a comma: ",", but any other character can be specified.</p>
                */
            Separator: Separator | string | undefined;
            /**
                * <p>Specifies a character to use for escaping. This option is used only when reading CSV files. The default value is <code>none</code>. If enabled, the character which immediately follows is used as-is, except for a small set of well-known escapes (<code>\n</code>, <code>\r</code>, <code>\t</code>, and <code>\0</code>).</p>
                */
            Escaper?: string;
            /**
                * <p>Specifies the character to use for quoting. The default is a double quote: <code>'"'</code>. Set this to <code>-1</code> to turn off quoting entirely.</p>
                */
            QuoteChar: QuoteChar | string | undefined;
            /**
                * <p>A Boolean value that specifies whether a single record can span multiple lines. This can occur when a field contains a quoted new-line character. You must set this option to True if any record spans multiple lines. The default value is <code>False</code>, which allows for more aggressive file-splitting during parsing.</p>
                */
            Multiline?: boolean;
            /**
                * <p>A Boolean value that specifies whether to treat the first line as a header. The default value is <code>False</code>.</p>
                */
            WithHeader?: boolean;
            /**
                * <p>A Boolean value that specifies whether to write the header to output. The default value is <code>True</code>. </p>
                */
            WriteHeader?: boolean;
            /**
                * <p>A Boolean value that specifies whether to skip the first data line. The default value is <code>False</code>.</p>
                */
            SkipFirst?: boolean;
            /**
                * <p>A Boolean value that specifies whether to use the advanced SIMD CSV reader along with Apache Arrow based columnar memory formats. Only available in Glue version 3.0.</p>
                */
            OptimizePerformance?: boolean;
            /**
                * <p>Specifies the data schema for the S3 CSV source.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace S3CsvSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3CsvSource) => any;
    }
    export enum TargetFormat {
            AVRO = "avro",
            CSV = "csv",
            JSON = "json",
            ORC = "orc",
            PARQUET = "parquet"
    }
    /**
        * <p>A policy that specifies update behavior for the crawler.</p>
        */
    export interface DirectSchemaChangePolicy {
            /**
                * <p>Whether to use the specified update behavior when the crawler finds a changed schema.</p>
                */
            EnableUpdateCatalog?: boolean;
            /**
                * <p>The update behavior when the crawler finds a changed schema.</p>
                */
            UpdateBehavior?: UpdateCatalogBehavior | string;
            /**
                * <p>Specifies the table in the database that the schema change policy applies to.</p>
                */
            Table?: string;
            /**
                * <p>Specifies the database that the schema change policy applies to.</p>
                */
            Database?: string;
    }
    export namespace DirectSchemaChangePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DirectSchemaChangePolicy) => any;
    }
    /**
        * <p>Specifies a data target that writes to Amazon S3.</p>
        */
    export interface S3DirectTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Specifies native partitioning using a sequence of keys.</p>
                */
            PartitionKeys?: string[][];
            /**
                * <p>A single Amazon S3 path to write to.</p>
                */
            Path: string | undefined;
            /**
                * <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
                */
            Compression?: string;
            /**
                * <p>Specifies the data output format for the target.</p>
                */
            Format: TargetFormat | string | undefined;
            /**
                * <p>A policy that specifies update behavior for the crawler.</p>
                */
            SchemaChangePolicy?: DirectSchemaChangePolicy;
    }
    export namespace S3DirectTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3DirectTarget) => any;
    }
    export enum ParquetCompressionType {
            GZIP = "gzip",
            LZO = "lzo",
            NONE = "none",
            SNAPPY = "snappy",
            UNCOMPRESSED = "uncompressed"
    }
    /**
        * <p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>
        */
    export interface S3GlueParquetTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Specifies native partitioning using a sequence of keys.</p>
                */
            PartitionKeys?: string[][];
            /**
                * <p>A single Amazon S3 path to write to.</p>
                */
            Path: string | undefined;
            /**
                * <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
                */
            Compression?: ParquetCompressionType | string;
            /**
                * <p>A policy that specifies update behavior for the crawler.</p>
                */
            SchemaChangePolicy?: DirectSchemaChangePolicy;
    }
    export namespace S3GlueParquetTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3GlueParquetTarget) => any;
    }
    /**
        * <p>Specifies a JSON data store stored in Amazon S3.</p>
        */
    export interface S3JsonSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of the Amazon S3 paths to read from.</p>
                */
            Paths: string[] | undefined;
            /**
                * <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
                */
            CompressionType?: CompressionType | string;
            /**
                * <p>A string containing a JSON list of Unix-style glob patterns to exclude. For example, "[\"**.pdf\"]" excludes all PDF files. </p>
                */
            Exclusions?: string[];
            /**
                * <p>The target group size in bytes. The default is computed based on the input data size and the size of your cluster. When there are fewer than 50,000 input files, <code>"groupFiles"</code> must be set to <code>"inPartition"</code> for this to take effect.</p>
                */
            GroupSize?: string;
            /**
                * <p>Grouping files is turned on by default when the input contains more than 50,000 files. To turn on grouping with fewer than 50,000 files, set this parameter to "inPartition". To disable grouping when there are more than 50,000 files, set this parameter to <code>"none"</code>.</p>
                */
            GroupFiles?: string;
            /**
                * <p>If set to true, recursively reads files in all subdirectories under the specified paths.</p>
                */
            Recurse?: boolean;
            /**
                * <p>This option controls the duration in milliseconds after which the s3 listing is likely to be consistent. Files with modification timestamps falling within the last maxBand milliseconds are tracked specially when using JobBookmarks to account for Amazon S3 eventual consistency. Most users don't need to set this option. The default is 900000 milliseconds, or 15 minutes.</p>
                */
            MaxBand?: number;
            /**
                * <p>This option specifies the maximum number of files to save from the last maxBand seconds. If this number is exceeded, extra files are skipped and only processed in the next job run.</p>
                */
            MaxFilesInBand?: number;
            /**
                * <p>Specifies additional connection options.</p>
                */
            AdditionalOptions?: S3DirectSourceAdditionalOptions;
            /**
                * <p>A JsonPath string defining the JSON data.</p>
                */
            JsonPath?: string;
            /**
                * <p>A Boolean value that specifies whether a single record can span multiple lines. This can occur when a field contains a quoted new-line character. You must set this option to True if any record spans multiple lines. The default value is <code>False</code>, which allows for more aggressive file-splitting during parsing.</p>
                */
            Multiline?: boolean;
            /**
                * <p>Specifies the data schema for the S3 JSON source.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace S3JsonSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3JsonSource) => any;
    }
    /**
        * <p>Specifies an Apache Parquet data store stored in Amazon S3.</p>
        */
    export interface S3ParquetSource {
            /**
                * <p>The name of the data store.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of the Amazon S3 paths to read from.</p>
                */
            Paths: string[] | undefined;
            /**
                * <p>Specifies how the data is compressed. This is generally not necessary if the data has a standard file extension. Possible values are <code>"gzip"</code> and <code>"bzip"</code>).</p>
                */
            CompressionType?: ParquetCompressionType | string;
            /**
                * <p>A string containing a JSON list of Unix-style glob patterns to exclude. For example, "[\"**.pdf\"]" excludes all PDF files. </p>
                */
            Exclusions?: string[];
            /**
                * <p>The target group size in bytes. The default is computed based on the input data size and the size of your cluster. When there are fewer than 50,000 input files, <code>"groupFiles"</code> must be set to <code>"inPartition"</code> for this to take effect.</p>
                */
            GroupSize?: string;
            /**
                * <p>Grouping files is turned on by default when the input contains more than 50,000 files. To turn on grouping with fewer than 50,000 files, set this parameter to "inPartition". To disable grouping when there are more than 50,000 files, set this parameter to <code>"none"</code>.</p>
                */
            GroupFiles?: string;
            /**
                * <p>If set to true, recursively reads files in all subdirectories under the specified paths.</p>
                */
            Recurse?: boolean;
            /**
                * <p>This option controls the duration in milliseconds after which the s3 listing is likely to be consistent. Files with modification timestamps falling within the last maxBand milliseconds are tracked specially when using JobBookmarks to account for Amazon S3 eventual consistency. Most users don't need to set this option. The default is 900000 milliseconds, or 15 minutes.</p>
                */
            MaxBand?: number;
            /**
                * <p>This option specifies the maximum number of files to save from the last maxBand seconds. If this number is exceeded, extra files are skipped and only processed in the next job run.</p>
                */
            MaxFilesInBand?: number;
            /**
                * <p>Specifies additional connection options.</p>
                */
            AdditionalOptions?: S3DirectSourceAdditionalOptions;
            /**
                * <p>Specifies the data schema for the S3 Parquet source.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace S3ParquetSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3ParquetSource) => any;
    }
    /**
        * <p>Specifies a transform that chooses the data property keys that you want to keep.</p>
        */
    export interface SelectFields {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A JSON path to a variable in the data structure.</p>
                */
            Paths: string[][] | undefined;
    }
    export namespace SelectFields {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelectFields) => any;
    }
    /**
        * <p>Specifies a transform that chooses one <code>DynamicFrame</code> from a collection of <code>DynamicFrames</code>. The output is the selected <code>DynamicFrame</code>
        *          </p>
        */
    export interface SelectFromCollection {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The index for the DynamicFrame to be selected.</p>
                */
            Index: number | undefined;
    }
    export namespace SelectFromCollection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelectFromCollection) => any;
    }
    /**
        * <p>Specifies a connector to an Apache Spark data source.</p>
        */
    export interface SparkConnectorSource {
            /**
                * <p>The name of the data source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the connection that is associated with the connector.</p>
                */
            ConnectionName: string | undefined;
            /**
                * <p>The name of a connector that assists with accessing the data store in Glue Studio.</p>
                */
            ConnectorName: string | undefined;
            /**
                * <p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>
                */
            ConnectionType: string | undefined;
            /**
                * <p>Additional connection options for the connector.</p>
                */
            AdditionalOptions?: Record<string, string>;
            /**
                * <p>Specifies data schema for the custom spark source.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace SparkConnectorSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SparkConnectorSource) => any;
    }
    /**
        * <p>Specifies a target that uses an Apache Spark connector.</p>
        */
    export interface SparkConnectorTarget {
            /**
                * <p>The name of the data target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The nodes that are inputs to the data target.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>The name of a connection for an Apache Spark connector.</p>
                */
            ConnectionName: string | undefined;
            /**
                * <p>The name of an Apache Spark connector.</p>
                */
            ConnectorName: string | undefined;
            /**
                * <p>The type of connection, such as marketplace.spark or custom.spark, designating a connection to an Apache Spark data store.</p>
                */
            ConnectionType: string | undefined;
            /**
                * <p>Additional connection options for the connector.</p>
                */
            AdditionalOptions?: Record<string, string>;
            /**
                * <p>Specifies the data schema for the custom spark target.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace SparkConnectorTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SparkConnectorTarget) => any;
    }
    /**
        * <p>Represents a single entry in the list of values for <code>SqlAliases</code>. </p>
        */
    export interface SqlAlias {
            /**
                * <p>A table, or a column in a table.</p>
                */
            From: string | undefined;
            /**
                * <p>A temporary name given to a table, or a column in a table.</p>
                */
            Alias: string | undefined;
    }
    export namespace SqlAlias {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SqlAlias) => any;
    }
    /**
        * <p>Specifies a transform where you enter a SQL query using Spark SQL syntax to transform the data. The output is a single <code>DynamicFrame</code>.</p>
        */
    export interface SparkSQL {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names. You can associate a table name with each input node to use in the SQL query. The name you choose must meet the Spark SQL naming restrictions.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A SQL query that must use Spark SQL syntax and return a single data set.</p>
                */
            SqlQuery: string | undefined;
            /**
                * <p>A list of aliases. An alias allows you to specify what name to use in the SQL for a given input. For example, you have a datasource named "MyDataSource". If you specify <code>From</code> as MyDataSource, and <code>Alias</code> as SqlName, then in your SQL you can do:</p>
                *
                *          <p>
                *             <code>select *
                * from SqlName</code>
                *          </p>
                *
                *          <p>and that gets data from MyDataSource.</p>
                */
            SqlAliases: SqlAlias[] | undefined;
            /**
                * <p>Specifies the data schema for the SparkSQL transform.</p>
                */
            OutputSchemas?: GlueSchema[];
    }
    export namespace SparkSQL {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SparkSQL) => any;
    }
    /**
        * <p>Specifies a transform that writes samples of the data to an Amazon S3 bucket.</p>
        */
    export interface Spigot {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A path in Amazon S3 where the transform will write a subset of records from the dataset to a JSON file in an Amazon S3 bucket.</p>
                */
            Path: string | undefined;
            /**
                * <p>Specifies a number of records to write starting from the beginning of the dataset.</p>
                */
            Topk?: number;
            /**
                * <p>The probability (a decimal value with a maximum value of 1) of picking any given record. A value of 1 indicates that each row read from the dataset should be included in the sample output.</p>
                */
            Prob?: number;
    }
    export namespace Spigot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Spigot) => any;
    }
    /**
        * <p>Specifies a transform that splits data property keys into two <code>DynamicFrames</code>. The output is a collection of <code>DynamicFrames</code>: one with selected data property keys, and one with the remaining data property keys.</p>
        */
    export interface SplitFields {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>A JSON path to a variable in the data structure.</p>
                */
            Paths: string[][] | undefined;
    }
    export namespace SplitFields {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SplitFields) => any;
    }
    export enum UnionType {
            ALL = "ALL",
            DISTINCT = "DISTINCT"
    }
    /**
        * <p>Specifies a transform that combines the rows from two or more datasets into a single result.</p>
        */
    export interface Union {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The node ID inputs to the transform.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Indicates the type of Union transform. </p>
                *
                * 	        <p>Specify <code>ALL</code> to join all rows from data sources to the resulting DynamicFrame. The resulting union does not remove duplicate rows.</p>
                *
                *          <p>Specify <code>DISTINCT</code> to remove duplicate rows in the resulting DynamicFrame.</p>
                */
            UnionType: UnionType | string | undefined;
    }
    export namespace Union {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Union) => any;
    }
    /**
        * <p>Specifies code that runs when a job is run.</p>
        */
    export interface JobCommand {
            /**
                * <p>The name of the job command. For an Apache Spark ETL job, this must be
                *       <code>glueetl</code>. For a Python shell job, it must be <code>pythonshell</code>.
                *       For an Apache Spark streaming ETL job, this must be <code>gluestreaming</code>.</p>
                */
            Name?: string;
            /**
                * <p>Specifies the Amazon Simple Storage Service (Amazon S3) path to a script that runs a
                *       job.</p>
                */
            ScriptLocation?: string;
            /**
                * <p>The Python version being used to run a Python shell job. Allowed values are 2 or 3.</p>
                */
            PythonVersion?: string;
    }
    export namespace JobCommand {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobCommand) => any;
    }
    /**
        * <p>Specifies the connections used by a job.</p>
        */
    export interface ConnectionsList {
            /**
                * <p>A list of connections used by the job.</p>
                */
            Connections?: string[];
    }
    export namespace ConnectionsList {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionsList) => any;
    }
    /**
        * <p>An execution property of a job.</p>
        */
    export interface ExecutionProperty {
            /**
                * <p>The maximum number of concurrent runs allowed for the job.
                *       The default is 1. An error is returned when this threshold is reached.
                *       The maximum value you can specify is controlled by a service limit.</p>
                */
            MaxConcurrentRuns?: number;
    }
    export namespace ExecutionProperty {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionProperty) => any;
    }
    export interface BatchGetPartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of partition values identifying the partitions to retrieve.</p>
                */
            PartitionsToGet: PartitionValueList[] | undefined;
    }
    export namespace BatchGetPartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetPartitionRequest) => any;
    }
    /**
        * <p>Represents a slice of table data.</p>
        */
    export interface Partition {
            /**
                * <p>The values of the partition.</p>
                */
            Values?: string[];
            /**
                * <p>The name of the catalog database in which to create the partition.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The name of the database table in which to create the partition.</p>
                */
            TableName?: string;
            /**
                * <p>The time at which the partition was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The last time at which the partition was accessed.</p>
                */
            LastAccessTime?: Date;
            /**
                * <p>Provides information about the physical
                *       location where the partition is stored.</p>
                */
            StorageDescriptor?: StorageDescriptor;
            /**
                * <p>These key-value pairs define partition parameters.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>The last time at which column statistics were computed for this
                *       partition.</p>
                */
            LastAnalyzedTime?: Date;
            /**
                * <p>The ID of the Data Catalog in which the partition resides.</p>
                */
            CatalogId?: string;
    }
    export namespace Partition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Partition) => any;
    }
    export interface BatchGetPartitionResponse {
            /**
                * <p>A list of the requested partitions.</p>
                */
            Partitions?: Partition[];
            /**
                * <p>A list of the partition values in the request for which partitions were not
                *       returned.</p>
                */
            UnprocessedKeys?: PartitionValueList[];
    }
    export namespace BatchGetPartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetPartitionResponse) => any;
    }
    /**
        * <p>An error that indicates your data is in an invalid state.</p>
        */
    export class InvalidStateException extends __BaseException {
            readonly name: "InvalidStateException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidStateException, __BaseException>);
    }
    export interface BatchGetTriggersRequest {
            /**
                * <p>A list of trigger names, which may be the names returned from the <code>ListTriggers</code> operation.</p>
                */
            TriggerNames: string[] | undefined;
    }
    export namespace BatchGetTriggersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetTriggersRequest) => any;
    }
    /**
        * <p>Batch condition that must be met (specified number of events received or batch time window expired)
        *       before EventBridge event trigger fires.</p>
        */
    export interface EventBatchingCondition {
            /**
                * <p>Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires.</p>
                */
            BatchSize: number | undefined;
            /**
                * <p>Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received.</p>
                */
            BatchWindow?: number;
    }
    export namespace EventBatchingCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventBatchingCondition) => any;
    }
    export enum CrawlState {
            CANCELLED = "CANCELLED",
            CANCELLING = "CANCELLING",
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            SUCCEEDED = "SUCCEEDED"
    }
    export enum LogicalOperator {
            EQUALS = "EQUALS"
    }
    export enum JobRunState {
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            STARTING = "STARTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING",
            SUCCEEDED = "SUCCEEDED",
            TIMEOUT = "TIMEOUT"
    }
    /**
        * <p>Defines a condition under which a trigger fires.</p>
        */
    export interface Condition {
            /**
                * <p>A logical operator.</p>
                */
            LogicalOperator?: LogicalOperator | string;
            /**
                * <p>The name of the job whose <code>JobRuns</code> this condition applies to, and on which
                *       this trigger waits.</p>
                */
            JobName?: string;
            /**
                * <p>The condition state. Currently, the only job states that a trigger can listen for are <code>SUCCEEDED</code>, <code>STOPPED</code>, <code>FAILED</code>, and <code>TIMEOUT</code>. The only crawler states that a trigger can listen for are <code>SUCCEEDED</code>, <code>FAILED</code>, and <code>CANCELLED</code>.</p>
                */
            State?: JobRunState | string;
            /**
                * <p>The name of the crawler to which this condition applies.</p>
                */
            CrawlerName?: string;
            /**
                * <p>The state of the crawler to which this condition applies.</p>
                */
            CrawlState?: CrawlState | string;
    }
    export namespace Condition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Condition) => any;
    }
    export enum Logical {
            AND = "AND",
            ANY = "ANY"
    }
    /**
        * <p>Defines the predicate of the trigger, which determines when it fires.</p>
        */
    export interface Predicate {
            /**
                * <p>An optional field if only one condition is listed. If multiple conditions are listed, then
                *       this field is required.</p>
                */
            Logical?: Logical | string;
            /**
                * <p>A list of the conditions that determine when the trigger will fire.</p>
                */
            Conditions?: Condition[];
    }
    export namespace Predicate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Predicate) => any;
    }
    export enum TriggerState {
            ACTIVATED = "ACTIVATED",
            ACTIVATING = "ACTIVATING",
            CREATED = "CREATED",
            CREATING = "CREATING",
            DEACTIVATED = "DEACTIVATED",
            DEACTIVATING = "DEACTIVATING",
            DELETING = "DELETING",
            UPDATING = "UPDATING"
    }
    export enum TriggerType {
            CONDITIONAL = "CONDITIONAL",
            EVENT = "EVENT",
            ON_DEMAND = "ON_DEMAND",
            SCHEDULED = "SCHEDULED"
    }
    /**
        * <p>Information about a specific trigger.</p>
        */
    export interface Trigger {
            /**
                * <p>The name of the trigger.</p>
                */
            Name?: string;
            /**
                * <p>The name of the workflow associated with the trigger.</p>
                */
            WorkflowName?: string;
            /**
                * <p>Reserved for future use.</p>
                */
            Id?: string;
            /**
                * <p>The type of trigger that this is.</p>
                */
            Type?: TriggerType | string;
            /**
                * <p>The current state of the trigger.</p>
                */
            State?: TriggerState | string;
            /**
                * <p>A description of this trigger.</p>
                */
            Description?: string;
            /**
                * <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based
                *       Schedules for Jobs and Crawlers</a>. For example, to run
                *       something every day at 12:15 UTC, you would specify:
                *       <code>cron(15 12 * * ? *)</code>.</p>
                */
            Schedule?: string;
            /**
                * <p>The actions initiated by this trigger.</p>
                */
            Actions?: Action[];
            /**
                * <p>The predicate of this trigger, which defines when it will fire.</p>
                */
            Predicate?: Predicate;
            /**
                * <p>Batch condition that must be met (specified number of events received or batch time window expired)
                *       before EventBridge event trigger fires.</p>
                */
            EventBatchingCondition?: EventBatchingCondition;
    }
    export namespace Trigger {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Trigger) => any;
    }
    export interface BatchGetTriggersResponse {
            /**
                * <p>A list of trigger definitions.</p>
                */
            Triggers?: Trigger[];
            /**
                * <p>A list of names of triggers not found.</p>
                */
            TriggersNotFound?: string[];
    }
    export namespace BatchGetTriggersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetTriggersResponse) => any;
    }
    export interface BatchGetWorkflowsRequest {
            /**
                * <p>A list of workflow names, which may be the names returned from the <code>ListWorkflows</code> operation.</p>
                */
            Names: string[] | undefined;
            /**
                * <p>Specifies whether to include a graph when returning the workflow resource metadata.</p>
                */
            IncludeGraph?: boolean;
    }
    export namespace BatchGetWorkflowsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetWorkflowsRequest) => any;
    }
    /**
        * <p>The details of a blueprint.</p>
        */
    export interface BlueprintDetails {
            /**
                * <p>The name of the blueprint.</p>
                */
            BlueprintName?: string;
            /**
                * <p>The run ID for this blueprint.</p>
                */
            RunId?: string;
    }
    export namespace BlueprintDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BlueprintDetails) => any;
    }
    /**
        * <p>An edge represents a directed connection between two Glue components that are part of the workflow the
        *       edge belongs to.</p>
        */
    export interface Edge {
            /**
                * <p>The unique of the node within the workflow where the edge starts.</p>
                */
            SourceId?: string;
            /**
                * <p>The unique of the node within the workflow where the edge ends.</p>
                */
            DestinationId?: string;
    }
    export namespace Edge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Edge) => any;
    }
    /**
        * <p>The details of a crawl in the workflow.</p>
        */
    export interface Crawl {
            /**
                * <p>The state of the crawler.</p>
                */
            State?: CrawlState | string;
            /**
                * <p>The date and time on which the crawl started.</p>
                */
            StartedOn?: Date;
            /**
                * <p>The date and time on which the crawl completed.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>The error message associated with the crawl.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The log group associated with the crawl.</p>
                */
            LogGroup?: string;
            /**
                * <p>The log stream associated with the crawl.</p>
                */
            LogStream?: string;
    }
    export namespace Crawl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Crawl) => any;
    }
    /**
        * <p>The details of a Crawler node present in the workflow.</p>
        */
    export interface CrawlerNodeDetails {
            /**
                * <p>A list of crawls represented by the crawl node.</p>
                */
            Crawls?: Crawl[];
    }
    export namespace CrawlerNodeDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrawlerNodeDetails) => any;
    }
    /**
        * <p>A job run that was used in the predicate of a conditional trigger
        *       that triggered this job run.</p>
        */
    export interface Predecessor {
            /**
                * <p>The name of the job definition used by the predecessor job run.</p>
                */
            JobName?: string;
            /**
                * <p>The job-run ID of the predecessor job run.</p>
                */
            RunId?: string;
    }
    export namespace Predecessor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Predecessor) => any;
    }
    /**
        * <p>Contains information about a job run.</p>
        */
    export interface JobRun {
            /**
                * <p>The ID of this job run.</p>
                */
            Id?: string;
            /**
                * <p>The number of the attempt to run this job.</p>
                */
            Attempt?: number;
            /**
                * <p>The ID of the previous run of this job. For example, the <code>JobRunId</code> specified
                *       in the <code>StartJobRun</code> action.</p>
                */
            PreviousRunId?: string;
            /**
                * <p>The name of the trigger that started this job run.</p>
                */
            TriggerName?: string;
            /**
                * <p>The name of the job definition being used in this run.</p>
                */
            JobName?: string;
            /**
                * <p>The date and time at which this job run was started.</p>
                */
            StartedOn?: Date;
            /**
                * <p>The last time that this job run was modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>The date and time that this job run completed.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>The current state of the job run. For more information about the statuses of jobs that have terminated abnormally, see <a href="https://docs.aws.amazon.com/glue/latest/dg/job-run-statuses.html">Glue Job Run Statuses</a>.</p>
                */
            JobRunState?: JobRunState | string;
            /**
                * <p>The job arguments associated with this run. For this job run, they replace the default arguments set in the job definition itself.</p>
                *          <p>You can specify arguments here that your own job-execution script
                *       consumes, as well as arguments that Glue itself consumes.</p>
                *          <p>For information about how to specify and consume your own job arguments, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling Glue APIs in Python</a> topic in the developer guide.</p>
                *          <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by Glue</a> topic in the developer guide.</p>
                */
            Arguments?: Record<string, string>;
            /**
                * <p>An error message associated with this job run.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>A list of predecessors to this job run.</p>
                */
            PredecessorRuns?: Predecessor[];
            /**
                * @deprecated
                *
                * <p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p>
                *
                *          <p>The number of Glue data processing units (DPUs) allocated to this JobRun.
                *       From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure
                *       of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
                *       For more information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue
                *         pricing page</a>.</p>
                */
            AllocatedCapacity?: number;
            /**
                * <p>The amount of time (in seconds) that the job run consumed resources.</p>
                */
            ExecutionTime?: number;
            /**
                * <p>The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can
                *       consume resources before it is terminated and enters <code>TIMEOUT</code> status. This value overrides the timeout value set in the parent job.</p>
                *
                *          <p>Streaming jobs do not have a timeout. The default for non-streaming jobs is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>The number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure
                *       of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
                *       For more information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue
                *         pricing page</a>.</p>
                *
                *          <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p>
                *
                *          <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are
                *       running a Python shell job or an Apache Spark ETL job:</p>
                *          <ul>
                *             <li>
                *                <p>When you specify a Python shell job (<code>JobCommand.Name</code>="pythonshell"), you can
                *         allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p>
                *             </li>
                *             <li>
                *                <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>="glueetl"), you can allocate a minimum of 2 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p>
                *             </li>
                *          </ul>
                */
            MaxCapacity?: number;
            /**
                * <p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
                *          <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this job
                *       run.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>The name of the log group for secure logging that can be server-side encrypted in Amazon
                *       CloudWatch using KMS. This name can be <code>/aws-glue/jobs/</code>, in which case the
                *       default encryption is <code>NONE</code>. If you add a role name and
                *       <code>SecurityConfiguration</code> name (in other words,
                *       <code>/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/</code>), then that security
                *       configuration is used to encrypt the log group.</p>
                */
            LogGroupName?: string;
            /**
                * <p>Specifies configuration properties of a job run notification.</p>
                */
            NotificationProperty?: NotificationProperty;
            /**
                * <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p>
                *
                *          <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
                *
                * 	        <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>
                */
            GlueVersion?: string;
            /**
                * <p>This field populates only for Auto Scaling job runs, and represents the total time each executor ran during the lifecycle of a job run in seconds, multiplied by a DPU factor (1 for <code>G.1X</code>, 2 for <code>G.2X</code>, or 0.25 for <code>G.025X</code> workers). This value may be different than the <code>executionEngineRuntime</code> * <code>MaxCapacity</code> as in the case of Auto Scaling jobs, as the number of executors running at a given time may be less than the <code>MaxCapacity</code>. Therefore, it is possible that the value of <code>DPUSeconds</code> is less than <code>executionEngineRuntime</code> * <code>MaxCapacity</code>.</p>
                */
            DPUSeconds?: number;
    }
    export namespace JobRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobRun) => any;
    }
    /**
        * <p>The details of a Job node present in the workflow.</p>
        */
    export interface JobNodeDetails {
            /**
                * <p>The information for the job runs represented by the job node.</p>
                */
            JobRuns?: JobRun[];
    }
    export namespace JobNodeDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobNodeDetails) => any;
    }
    /**
        * <p>The details of a Trigger node present in the workflow.</p>
        */
    export interface TriggerNodeDetails {
            /**
                * <p>The information of the trigger represented by the trigger node.</p>
                */
            Trigger?: Trigger;
    }
    export namespace TriggerNodeDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TriggerNodeDetails) => any;
    }
    export enum NodeType {
            CRAWLER = "CRAWLER",
            JOB = "JOB",
            TRIGGER = "TRIGGER"
    }
    /**
        * <p>A node represents an Glue component (trigger, crawler, or job) on a workflow graph.</p>
        */
    export interface Node {
            /**
                * <p>The type of Glue component represented by the node.</p>
                */
            Type?: NodeType | string;
            /**
                * <p>The name of the Glue component represented by the node.</p>
                */
            Name?: string;
            /**
                * <p>The unique Id assigned to the node within the workflow.</p>
                */
            UniqueId?: string;
            /**
                * <p>Details of the Trigger when the node represents a Trigger.</p>
                */
            TriggerDetails?: TriggerNodeDetails;
            /**
                * <p>Details of the Job when the node represents a Job.</p>
                */
            JobDetails?: JobNodeDetails;
            /**
                * <p>Details of the crawler when the node represents a crawler.</p>
                */
            CrawlerDetails?: CrawlerNodeDetails;
    }
    export namespace Node {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Node) => any;
    }
    /**
        * <p>A workflow graph represents the complete workflow containing all the Glue components present in the
        *       workflow and all the directed connections between them.</p>
        */
    export interface WorkflowGraph {
            /**
                * <p>A list of the the Glue components belong to the workflow represented as nodes.</p>
                */
            Nodes?: Node[];
            /**
                * <p>A list of all the directed connections between the nodes belonging to the workflow.</p>
                */
            Edges?: Edge[];
    }
    export namespace WorkflowGraph {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkflowGraph) => any;
    }
    /**
        * <p>The batch condition that started the workflow run. Either the number of events in the batch size arrived,
        *       in which case the BatchSize member is non-zero, or the batch window expired, in which case the BatchWindow
        *       member is non-zero.</p>
        */
    export interface StartingEventBatchCondition {
            /**
                * <p>Number of events in the batch.</p>
                */
            BatchSize?: number;
            /**
                * <p>Duration of the batch window in seconds.</p>
                */
            BatchWindow?: number;
    }
    export namespace StartingEventBatchCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartingEventBatchCondition) => any;
    }
    /**
        * <p>Workflow run statistics provides statistics about the workflow run.</p>
        */
    export interface WorkflowRunStatistics {
            /**
                * <p>Total number of Actions in the workflow run.</p>
                */
            TotalActions?: number;
            /**
                * <p>Total number of Actions that timed out.</p>
                */
            TimeoutActions?: number;
            /**
                * <p>Total number of Actions that have failed.</p>
                */
            FailedActions?: number;
            /**
                * <p>Total number of Actions that have stopped.</p>
                */
            StoppedActions?: number;
            /**
                * <p>Total number of Actions that have succeeded.</p>
                */
            SucceededActions?: number;
            /**
                * <p>Total number Actions in running state.</p>
                */
            RunningActions?: number;
    }
    export namespace WorkflowRunStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkflowRunStatistics) => any;
    }
    export enum WorkflowRunStatus {
            COMPLETED = "COMPLETED",
            ERROR = "ERROR",
            RUNNING = "RUNNING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING"
    }
    /**
        * <p>A workflow run is an execution of a workflow providing all the runtime information.</p>
        */
    export interface WorkflowRun {
            /**
                * <p>Name of the workflow that was run.</p>
                */
            Name?: string;
            /**
                * <p>The ID of this workflow run.</p>
                */
            WorkflowRunId?: string;
            /**
                * <p>The ID of the previous workflow run.</p>
                */
            PreviousRunId?: string;
            /**
                * <p>The workflow run properties which were set during the run.</p>
                */
            WorkflowRunProperties?: Record<string, string>;
            /**
                * <p>The date and time when the workflow run was started.</p>
                */
            StartedOn?: Date;
            /**
                * <p>The date and time when the workflow run completed.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>The status of the workflow run.</p>
                */
            Status?: WorkflowRunStatus | string;
            /**
                * <p>This error message describes any error that may have occurred in starting the workflow run. Currently the only error message is "Concurrent runs exceeded for workflow: <code>foo</code>."</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The statistics of the run.</p>
                */
            Statistics?: WorkflowRunStatistics;
            /**
                * <p>The graph representing all the Glue components that belong to the workflow as nodes and directed
                *       connections between them as edges.</p>
                */
            Graph?: WorkflowGraph;
            /**
                * <p>The batch condition that started the workflow run.</p>
                */
            StartingEventBatchCondition?: StartingEventBatchCondition;
    }
    export namespace WorkflowRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkflowRun) => any;
    }
    /**
        * <p>A workflow is a collection of multiple dependent Glue
        *       jobs and crawlers that are run to complete a complex ETL task. A
        *       workflow manages the execution and monitoring of all its jobs and crawlers.</p>
        */
    export interface Workflow {
            /**
                * <p>The name of the workflow.</p>
                */
            Name?: string;
            /**
                * <p>A description of the workflow.</p>
                */
            Description?: string;
            /**
                * <p>A collection of properties to be used as part of each execution of the workflow.
                *     The run properties are made available to each job in the workflow. A job can modify
                *     the properties for the next jobs in the flow.</p>
                */
            DefaultRunProperties?: Record<string, string>;
            /**
                * <p>The date and time when the workflow was created.</p>
                */
            CreatedOn?: Date;
            /**
                * <p>The date and time when the workflow was last modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>The information about the last execution of the workflow.</p>
                */
            LastRun?: WorkflowRun;
            /**
                * <p>The graph representing all the Glue components that belong to the workflow as nodes and directed
                *       connections between them as edges.</p>
                */
            Graph?: WorkflowGraph;
            /**
                * <p>You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.</p>
                */
            MaxConcurrentRuns?: number;
            /**
                * <p>This structure indicates the details of the blueprint that this particular workflow is created from.</p>
                */
            BlueprintDetails?: BlueprintDetails;
    }
    export namespace Workflow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Workflow) => any;
    }
    export interface BatchGetWorkflowsResponse {
            /**
                * <p>A list of workflow resource metadata.</p>
                */
            Workflows?: Workflow[];
            /**
                * <p>A list of names of workflows not found.</p>
                */
            MissingWorkflows?: string[];
    }
    export namespace BatchGetWorkflowsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetWorkflowsResponse) => any;
    }
    export interface BatchStopJobRunRequest {
            /**
                * <p>The name of the job definition for which to stop job runs.</p>
                */
            JobName: string | undefined;
            /**
                * <p>A list of the <code>JobRunIds</code> that should be stopped for that job
                *       definition.</p>
                */
            JobRunIds: string[] | undefined;
    }
    export namespace BatchStopJobRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchStopJobRunRequest) => any;
    }
    /**
        * <p>Records an error that occurred when attempting to stop a
        *       specified job run.</p>
        */
    export interface BatchStopJobRunError {
            /**
                * <p>The name of the job definition that is used in the job run in question.</p>
                */
            JobName?: string;
            /**
                * <p>The <code>JobRunId</code> of the job run in question.</p>
                */
            JobRunId?: string;
            /**
                * <p>Specifies details about the error that was encountered.</p>
                */
            ErrorDetail?: ErrorDetail;
    }
    export namespace BatchStopJobRunError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchStopJobRunError) => any;
    }
    /**
        * <p>Records a successful request to stop a specified <code>JobRun</code>.</p>
        */
    export interface BatchStopJobRunSuccessfulSubmission {
            /**
                * <p>The name of the job definition used in the job run that was stopped.</p>
                */
            JobName?: string;
            /**
                * <p>The <code>JobRunId</code> of the job run that was stopped.</p>
                */
            JobRunId?: string;
    }
    export namespace BatchStopJobRunSuccessfulSubmission {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchStopJobRunSuccessfulSubmission) => any;
    }
    export interface BatchStopJobRunResponse {
            /**
                * <p>A list of the JobRuns that were successfully submitted for stopping.</p>
                */
            SuccessfulSubmissions?: BatchStopJobRunSuccessfulSubmission[];
            /**
                * <p>A list of the errors that were encountered in trying to stop <code>JobRuns</code>,
                *       including the <code>JobRunId</code> for which each error was encountered and details about the
                *       error.</p>
                */
            Errors?: BatchStopJobRunError[];
    }
    export namespace BatchStopJobRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchStopJobRunResponse) => any;
    }
    /**
        * <p>A structure that contains the values and structure used to update a partition.</p>
        */
    export interface BatchUpdatePartitionRequestEntry {
            /**
                * <p>A list of values defining the partitions.</p>
                */
            PartitionValueList: string[] | undefined;
            /**
                * <p>The structure used to update a partition.</p>
                */
            PartitionInput: PartitionInput | undefined;
    }
    export namespace BatchUpdatePartitionRequestEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdatePartitionRequestEntry) => any;
    }
    export interface BatchUpdatePartitionRequest {
            /**
                * <p>The ID of the catalog in which the partition is to be updated. Currently, this should be
                *       the Amazon Web Services account ID.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the metadata database in which the partition is
                *       to be updated.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the metadata table in which the partition is to be updated.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of up to 100 <code>BatchUpdatePartitionRequestEntry</code> objects to update.</p>
                */
            Entries: BatchUpdatePartitionRequestEntry[] | undefined;
    }
    export namespace BatchUpdatePartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdatePartitionRequest) => any;
    }
    /**
        * <p>Contains information about a batch update partition error.</p>
        */
    export interface BatchUpdatePartitionFailureEntry {
            /**
                * <p>A list of values defining the partitions.</p>
                */
            PartitionValueList?: string[];
            /**
                * <p>The details about the batch update partition error.</p>
                */
            ErrorDetail?: ErrorDetail;
    }
    export namespace BatchUpdatePartitionFailureEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdatePartitionFailureEntry) => any;
    }
    export interface BatchUpdatePartitionResponse {
            /**
                * <p>The errors encountered when trying to update the requested partitions. A list of <code>BatchUpdatePartitionFailureEntry</code> objects.</p>
                */
            Errors?: BatchUpdatePartitionFailureEntry[];
    }
    export namespace BatchUpdatePartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdatePartitionResponse) => any;
    }
    export interface CancelMLTaskRunRequest {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId: string | undefined;
            /**
                * <p>A unique identifier for the task run.</p>
                */
            TaskRunId: string | undefined;
    }
    export namespace CancelMLTaskRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelMLTaskRunRequest) => any;
    }
    export enum TaskStatusType {
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            STARTING = "STARTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING",
            SUCCEEDED = "SUCCEEDED",
            TIMEOUT = "TIMEOUT"
    }
    export interface CancelMLTaskRunResponse {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId?: string;
            /**
                * <p>The unique identifier for the task run.</p>
                */
            TaskRunId?: string;
            /**
                * <p>The status for this run.</p>
                */
            Status?: TaskStatusType | string;
    }
    export namespace CancelMLTaskRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelMLTaskRunResponse) => any;
    }
    export interface CancelStatementRequest {
            /**
                * <p>The Session ID of the statement to be cancelled.</p>
                */
            SessionId: string | undefined;
            /**
                * <p>The ID of the statement to be cancelled.</p>
                */
            Id: number | undefined;
            /**
                * <p>The origin of the request to cancel the statement.</p>
                */
            RequestOrigin?: string;
    }
    export namespace CancelStatementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelStatementRequest) => any;
    }
    export interface CancelStatementResponse {
    }
    export namespace CancelStatementResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelStatementResponse) => any;
    }
    /**
        * <p>The session is in an invalid state to perform a requested operation.</p>
        */
    export class IllegalSessionStateException extends __BaseException {
            readonly name: "IllegalSessionStateException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IllegalSessionStateException, __BaseException>);
    }
    export enum DataFormat {
            AVRO = "AVRO",
            JSON = "JSON",
            PROTOBUF = "PROTOBUF"
    }
    export interface CheckSchemaVersionValidityInput {
            /**
                * <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
                */
            DataFormat: DataFormat | string | undefined;
            /**
                * <p>The definition of the schema that has to be validated.</p>
                */
            SchemaDefinition: string | undefined;
    }
    export namespace CheckSchemaVersionValidityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckSchemaVersionValidityInput) => any;
    }
    export interface CheckSchemaVersionValidityResponse {
            /**
                * <p>Return true, if the schema is valid and false otherwise.</p>
                */
            Valid?: boolean;
            /**
                * <p>A validation failure error message.</p>
                */
            Error?: string;
    }
    export namespace CheckSchemaVersionValidityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckSchemaVersionValidityResponse) => any;
    }
    export interface CreateBlueprintRequest {
            /**
                * <p>The name of the blueprint.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the blueprint.</p>
                */
            Description?: string;
            /**
                * <p>Specifies a path in Amazon S3 where the blueprint is published.</p>
                */
            BlueprintLocation: string | undefined;
            /**
                * <p>The tags to be applied to this blueprint.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateBlueprintRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBlueprintRequest) => any;
    }
    export interface CreateBlueprintResponse {
            /**
                * <p>Returns the name of the blueprint that was registered.</p>
                */
            Name?: string;
    }
    export namespace CreateBlueprintResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBlueprintResponse) => any;
    }
    export enum CsvHeaderOption {
            ABSENT = "ABSENT",
            PRESENT = "PRESENT",
            UNKNOWN = "UNKNOWN"
    }
    /**
        * <p>Specifies a custom CSV classifier for <code>CreateClassifier</code> to create.</p>
        */
    export interface CreateCsvClassifierRequest {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>A custom symbol to denote what separates each column entry in the row.</p>
                */
            Delimiter?: string;
            /**
                * <p>A custom symbol to denote what combines content into a single column value. Must be different from the column delimiter.</p>
                */
            QuoteSymbol?: string;
            /**
                * <p>Indicates whether the CSV file contains a header.</p>
                */
            ContainsHeader?: CsvHeaderOption | string;
            /**
                * <p>A list of strings representing column names.</p>
                */
            Header?: string[];
            /**
                * <p>Specifies not to trim values before identifying the type of column values. The default value is true.</p>
                */
            DisableValueTrimming?: boolean;
            /**
                * <p>Enables the processing of files that contain only one column.</p>
                */
            AllowSingleColumn?: boolean;
    }
    export namespace CreateCsvClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCsvClassifierRequest) => any;
    }
    /**
        * <p>Specifies a <code>grok</code> classifier for <code>CreateClassifier</code>
        *       to create.</p>
        */
    export interface CreateGrokClassifierRequest {
            /**
                * <p>An identifier of the data format that the classifier matches,
                *       such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>
                */
            Classification: string | undefined;
            /**
                * <p>The name of the new classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>The grok pattern used by this classifier.</p>
                */
            GrokPattern: string | undefined;
            /**
                * <p>Optional custom grok patterns used by this classifier.</p>
                */
            CustomPatterns?: string;
    }
    export namespace CreateGrokClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGrokClassifierRequest) => any;
    }
    /**
        * <p>Specifies a JSON classifier for <code>CreateClassifier</code> to create.</p>
        */
    export interface CreateJsonClassifierRequest {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.
                *       Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.</p>
                */
            JsonPath: string | undefined;
    }
    export namespace CreateJsonClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJsonClassifierRequest) => any;
    }
    /**
        * <p>Specifies an XML classifier for <code>CreateClassifier</code> to create.</p>
        */
    export interface CreateXMLClassifierRequest {
            /**
                * <p>An identifier of the data format that the classifier matches.</p>
                */
            Classification: string | undefined;
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>The XML tag designating the element that contains each record in an XML document being
                *       parsed. This can't identify a self-closing element (closed by <code>/></code>). An empty
                *       row element that contains only attributes can be parsed as long as it ends with a closing tag
                *       (for example, <code><row item_a="A" item_b="B"></row></code> is okay, but
                *         <code><row item_a="A" item_b="B" /></code> is not).</p>
                */
            RowTag?: string;
    }
    export namespace CreateXMLClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateXMLClassifierRequest) => any;
    }
    export interface CreateClassifierRequest {
            /**
                * <p>A <code>GrokClassifier</code> object specifying the classifier
                *       to create.</p>
                */
            GrokClassifier?: CreateGrokClassifierRequest;
            /**
                * <p>An <code>XMLClassifier</code> object specifying the classifier
                *       to create.</p>
                */
            XMLClassifier?: CreateXMLClassifierRequest;
            /**
                * <p>A <code>JsonClassifier</code> object specifying the classifier
                *       to create.</p>
                */
            JsonClassifier?: CreateJsonClassifierRequest;
            /**
                * <p>A <code>CsvClassifier</code> object specifying the classifier
                *       to create.</p>
                */
            CsvClassifier?: CreateCsvClassifierRequest;
    }
    export namespace CreateClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClassifierRequest) => any;
    }
    export interface CreateClassifierResponse {
    }
    export namespace CreateClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClassifierResponse) => any;
    }
    export enum ConnectionPropertyKey {
            CONFIG_FILES = "CONFIG_FILES",
            CONNECTION_URL = "CONNECTION_URL",
            CONNECTOR_CLASS_NAME = "CONNECTOR_CLASS_NAME",
            CONNECTOR_TYPE = "CONNECTOR_TYPE",
            CONNECTOR_URL = "CONNECTOR_URL",
            CUSTOM_JDBC_CERT = "CUSTOM_JDBC_CERT",
            CUSTOM_JDBC_CERT_STRING = "CUSTOM_JDBC_CERT_STRING",
            ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD = "ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD",
            ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD = "ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD",
            ENCRYPTED_PASSWORD = "ENCRYPTED_PASSWORD",
            HOST = "HOST",
            INSTANCE_ID = "INSTANCE_ID",
            JDBC_CONNECTION_URL = "JDBC_CONNECTION_URL",
            JDBC_DRIVER_CLASS_NAME = "JDBC_DRIVER_CLASS_NAME",
            JDBC_DRIVER_JAR_URI = "JDBC_DRIVER_JAR_URI",
            JDBC_ENFORCE_SSL = "JDBC_ENFORCE_SSL",
            JDBC_ENGINE = "JDBC_ENGINE",
            JDBC_ENGINE_VERSION = "JDBC_ENGINE_VERSION",
            KAFKA_BOOTSTRAP_SERVERS = "KAFKA_BOOTSTRAP_SERVERS",
            KAFKA_CLIENT_KEYSTORE = "KAFKA_CLIENT_KEYSTORE",
            KAFKA_CLIENT_KEYSTORE_PASSWORD = "KAFKA_CLIENT_KEYSTORE_PASSWORD",
            KAFKA_CLIENT_KEY_PASSWORD = "KAFKA_CLIENT_KEY_PASSWORD",
            KAFKA_CUSTOM_CERT = "KAFKA_CUSTOM_CERT",
            KAFKA_SKIP_CUSTOM_CERT_VALIDATION = "KAFKA_SKIP_CUSTOM_CERT_VALIDATION",
            KAFKA_SSL_ENABLED = "KAFKA_SSL_ENABLED",
            PASSWORD = "PASSWORD",
            PORT = "PORT",
            SECRET_ID = "SECRET_ID",
            SKIP_CUSTOM_JDBC_CERT_VALIDATION = "SKIP_CUSTOM_JDBC_CERT_VALIDATION",
            USER_NAME = "USERNAME"
    }
    export enum ConnectionType {
            CUSTOM = "CUSTOM",
            JDBC = "JDBC",
            KAFKA = "KAFKA",
            MARKETPLACE = "MARKETPLACE",
            MONGODB = "MONGODB",
            NETWORK = "NETWORK",
            SFTP = "SFTP"
    }
    /**
        * <p>Specifies the physical requirements for a connection.</p>
        */
    export interface PhysicalConnectionRequirements {
            /**
                * <p>The subnet ID used by the connection.</p>
                */
            SubnetId?: string;
            /**
                * <p>The security group ID list used by the connection.</p>
                */
            SecurityGroupIdList?: string[];
            /**
                * <p>The connection's Availability Zone. This field is redundant because the specified subnet
                *       implies the Availability Zone to be used. Currently the field must be populated, but it will
                *       be deprecated in the future.</p>
                */
            AvailabilityZone?: string;
    }
    export namespace PhysicalConnectionRequirements {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PhysicalConnectionRequirements) => any;
    }
    /**
        * <p>A structure that is used to specify a connection to create or update.</p>
        */
    export interface ConnectionInput {
            /**
                * <p>The name of the connection.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the connection.</p>
                */
            Description?: string;
            /**
                * <p>The type of the connection. Currently, these types are supported:</p>
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>JDBC</code> - Designates a connection to a database through Java Database Connectivity (JDBC).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA</code> - Designates a connection to an Apache Kafka streaming platform.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MONGODB</code> - Designates a connection to a MongoDB document database.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NETWORK</code> - Designates a network connection to a data source within an Amazon Virtual Private Cloud environment (Amazon VPC).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MARKETPLACE</code> - Uses configuration settings contained in a connector purchased from Amazon Web Services Marketplace to read from and write to data stores that are not natively supported by Glue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CUSTOM</code> - Uses configuration settings contained in a custom connector to read from and write to data stores that are not natively supported by Glue.</p>
                *             </li>
                *          </ul>
                *          <p>SFTP is not supported.</p>
                */
            ConnectionType: ConnectionType | string | undefined;
            /**
                * <p>A list of criteria that can be used in selecting this connection.</p>
                */
            MatchCriteria?: string[];
            /**
                * <p>These key-value pairs define parameters for the connection.</p>
                */
            ConnectionProperties: Record<string, string> | undefined;
            /**
                * <p>A map of physical connection requirements, such as virtual private cloud (VPC) and
                *         <code>SecurityGroup</code>, that are needed to successfully make this connection.</p>
                */
            PhysicalConnectionRequirements?: PhysicalConnectionRequirements;
    }
    export namespace ConnectionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionInput) => any;
    }
    export interface CreateConnectionRequest {
            /**
                * <p>The ID of the Data Catalog in which to create the connection. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>A <code>ConnectionInput</code> object defining the connection
                *       to create.</p>
                */
            ConnectionInput: ConnectionInput | undefined;
            /**
                * <p>The tags you assign to the connection.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionRequest) => any;
    }
    export interface CreateConnectionResponse {
    }
    export namespace CreateConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionResponse) => any;
    }
    export interface CreateCrawlerRequest {
            /**
                * <p>Name of the new crawler.</p>
                */
            Name: string | undefined;
            /**
                * <p>The IAM role or Amazon Resource Name (ARN) of an IAM role used by the new crawler to
                *       access customer resources.</p>
                */
            Role: string | undefined;
            /**
                * <p>The Glue database where results are written, such as:
                *         <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
                */
            DatabaseName?: string;
            /**
                * <p>A description of the new crawler.</p>
                */
            Description?: string;
            /**
                * <p>A list of collection of targets to crawl.</p>
                */
            Targets: CrawlerTargets | undefined;
            /**
                * <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run
                *       something every day at 12:15 UTC, you would specify:
                *       <code>cron(15 12 * * ? *)</code>.</p>
                */
            Schedule?: string;
            /**
                * <p>A list of custom classifiers that the user has registered. By default, all built-in
                *       classifiers are included in a crawl, but these custom classifiers always override the default
                *       classifiers for a given classification.</p>
                */
            Classifiers?: string[];
            /**
                * <p>The table prefix used for catalog tables that are created.</p>
                */
            TablePrefix?: string;
            /**
                * <p>The policy for the crawler's update and deletion behavior.</p>
                */
            SchemaChangePolicy?: SchemaChangePolicy;
            /**
                * <p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>
                */
            RecrawlPolicy?: RecrawlPolicy;
            /**
                * <p>Specifies data lineage configuration settings for the crawler.</p>
                */
            LineageConfiguration?: LineageConfiguration;
            /**
                * <p>Specifies Lake Formation configuration settings for the crawler.</p>
                */
            LakeFormationConfiguration?: LakeFormationConfiguration;
            /**
                * <p>Crawler configuration information. This versioned JSON
                *       string allows users to specify aspects of a crawler's behavior.
                *       For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html">Configuring a Crawler</a>.</p>
                */
            Configuration?: string;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used by this
                *       crawler.</p>
                */
            CrawlerSecurityConfiguration?: string;
            /**
                * <p>The tags to use with this crawler request. You may use tags to limit access to the
                *             crawler. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer
                *             guide.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateCrawlerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCrawlerRequest) => any;
    }
    export interface CreateCrawlerResponse {
    }
    export namespace CreateCrawlerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCrawlerResponse) => any;
    }
    export interface CreateCustomEntityTypeRequest {
            /**
                * <p>A name for the custom pattern that allows it to be retrieved or deleted later. This name must be unique per Amazon Web Services account.</p>
                */
            Name: string | undefined;
            /**
                * <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
                */
            RegexString: string | undefined;
            /**
                * <p>A list of context words. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
                *
                * 	        <p>If no context words are passed only a regular expression is checked.</p>
                */
            ContextWords?: string[];
    }
    export namespace CreateCustomEntityTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomEntityTypeRequest) => any;
    }
    export interface CreateCustomEntityTypeResponse {
            /**
                * <p>The name of the custom pattern you created.</p>
                */
            Name?: string;
    }
    export namespace CreateCustomEntityTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomEntityTypeResponse) => any;
    }
    /**
        * <p>The same unique identifier was associated with two different records.</p>
        */
    export class IdempotentParameterMismatchException extends __BaseException {
            readonly name: "IdempotentParameterMismatchException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IdempotentParameterMismatchException, __BaseException>);
    }
    /**
        * <p>Two processes are trying to modify a resource simultaneously.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    export enum Permission {
            ALL = "ALL",
            ALTER = "ALTER",
            CREATE_DATABASE = "CREATE_DATABASE",
            CREATE_TABLE = "CREATE_TABLE",
            DATA_LOCATION_ACCESS = "DATA_LOCATION_ACCESS",
            DELETE = "DELETE",
            DROP = "DROP",
            INSERT = "INSERT",
            SELECT = "SELECT"
    }
    /**
        * <p>The Lake Formation principal.</p>
        */
    export interface DataLakePrincipal {
            /**
                * <p>An identifier for the Lake Formation principal.</p>
                */
            DataLakePrincipalIdentifier?: string;
    }
    export namespace DataLakePrincipal {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataLakePrincipal) => any;
    }
    /**
        * <p>Permissions granted to a principal.</p>
        */
    export interface PrincipalPermissions {
            /**
                * <p>The principal who is granted permissions.</p>
                */
            Principal?: DataLakePrincipal;
            /**
                * <p>The permissions that are granted to the principal.</p>
                */
            Permissions?: (Permission | string)[];
    }
    export namespace PrincipalPermissions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrincipalPermissions) => any;
    }
    /**
        * <p>A structure that describes a target database for resource linking.</p>
        */
    export interface DatabaseIdentifier {
            /**
                * <p>The ID of the Data Catalog in which the database resides.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database.</p>
                */
            DatabaseName?: string;
    }
    export namespace DatabaseIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseIdentifier) => any;
    }
    /**
        * <p>The structure used to create or update a database.</p>
        */
    export interface DatabaseInput {
            /**
                * <p>The name of the database. For Hive compatibility, this is folded to lowercase when it is
                *       stored.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the database.</p>
                */
            Description?: string;
            /**
                * <p>The location of the database (for example, an HDFS path). </p>
                */
            LocationUri?: string;
            /**
                * <p>These key-value pairs define parameters and properties
                *       of the database.</p>
                *          <p>These key-value pairs define parameters and properties of the database.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>Creates a set of default permissions on the table for principals. </p>
                */
            CreateTableDefaultPermissions?: PrincipalPermissions[];
            /**
                * <p>A <code>DatabaseIdentifier</code> structure that describes a target database for resource linking.</p>
                */
            TargetDatabase?: DatabaseIdentifier;
    }
    export namespace DatabaseInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseInput) => any;
    }
    export interface CreateDatabaseRequest {
            /**
                * <p>The ID of the Data Catalog in which to create the database. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The metadata for the database.</p>
                */
            DatabaseInput: DatabaseInput | undefined;
            /**
                * <p>The tags you assign to the database.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatabaseRequest) => any;
    }
    export interface CreateDatabaseResponse {
    }
    export namespace CreateDatabaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatabaseResponse) => any;
    }
    export interface CreateDevEndpointRequest {
            /**
                * <p>The name to be assigned to the new <code>DevEndpoint</code>.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The IAM role for the <code>DevEndpoint</code>.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Security group IDs for the security groups to be used by the new
                *       <code>DevEndpoint</code>.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>The subnet ID for the new <code>DevEndpoint</code> to use.</p>
                */
            SubnetId?: string;
            /**
                * <p>The public key to be used by this <code>DevEndpoint</code> for authentication. This
                *       attribute is provided for backward compatibility because the recommended attribute to use is
                *       public keys.</p>
                */
            PublicKey?: string;
            /**
                * <p>A list of public keys to be used by the development endpoints for authentication. The use
                *       of this attribute is preferred over a single public key because the public keys allow you to
                *       have a different private key per client.</p>
                *
                *          <note>
                *             <p>If you previously created an endpoint with a public key, you must remove that key to be able
                *         to set a list of public keys. Call the <code>UpdateDevEndpoint</code> API with the public
                *         key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the
                *           <code>addPublicKeys</code> attribute.</p>
                *          </note>
                */
            PublicKeys?: string[];
            /**
                * <p>The number of Glue Data Processing Units (DPUs) to allocate to this
                *         <code>DevEndpoint</code>.</p>
                */
            NumberOfNodes?: number;
            /**
                * <p>The type of predefined worker that is allocated to the development endpoint. Accepts a value of Standard, G.1X, or G.2X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *          </ul>
                * 	        <p>Known issue: when a development endpoint is created with the <code>G.2X</code>
                *             <code>WorkerType</code> configuration, the Spark drivers for the development endpoint will run on 4 vCPU, 16 GB of memory, and a 64 GB disk. </p>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
                *
                *          <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
                *
                * 	        <p>Development endpoints that are created without specifying a Glue version default to Glue 0.9.</p>
                *
                * 	        <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
                *
                * 	        <p>The maximum number of workers you can define are 299 for <code>G.1X</code>, and 149 for <code>G.2X</code>. </p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The paths to one or more Python libraries in an Amazon S3 bucket that should be loaded in
                *       your <code>DevEndpoint</code>. Multiple values must be complete paths separated by a
                *       comma.</p>
                *          <note>
                *             <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on
                *         C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data
                *         analysis library, are not yet supported.</p>
                *          </note>
                */
            ExtraPythonLibsS3Path?: string;
            /**
                * <p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded
                *       in your <code>DevEndpoint</code>.</p>
                */
            ExtraJarsS3Path?: string;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this
                *         <code>DevEndpoint</code>.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>The tags to use with this DevEndpoint. You may use tags to limit access to the DevEndpoint. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A map of arguments used to configure the <code>DevEndpoint</code>.</p>
                */
            Arguments?: Record<string, string>;
    }
    export namespace CreateDevEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDevEndpointRequest) => any;
    }
    export interface CreateDevEndpointResponse {
            /**
                * <p>The name assigned to the new <code>DevEndpoint</code>.</p>
                */
            EndpointName?: string;
            /**
                * <p>The current status of the new <code>DevEndpoint</code>.</p>
                */
            Status?: string;
            /**
                * <p>The security groups assigned to the new <code>DevEndpoint</code>.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>The subnet ID assigned to the new <code>DevEndpoint</code>.</p>
                */
            SubnetId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role assigned to the new
                *       <code>DevEndpoint</code>.</p>
                */
            RoleArn?: string;
            /**
                * <p>The address of the YARN endpoint used by this <code>DevEndpoint</code>.</p>
                */
            YarnEndpointAddress?: string;
            /**
                * <p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>
                */
            ZeppelinRemoteSparkInterpreterPort?: number;
            /**
                * <p>The number of Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>
                */
            NumberOfNodes?: number;
            /**
                * <p>The type of predefined worker that is allocated to the development endpoint. May be a value of Standard, G.1X, or G.2X.</p>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for running your ETL scripts on development endpoints. </p>
                *
                *          <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated to the development endpoint.</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The AWS Availability Zone where this <code>DevEndpoint</code> is located.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The ID of the virtual private cloud (VPC) used by this <code>DevEndpoint</code>.</p>
                */
            VpcId?: string;
            /**
                * <p>The paths to one or more Python libraries in an S3 bucket that will be loaded in your
                *         <code>DevEndpoint</code>.</p>
                */
            ExtraPythonLibsS3Path?: string;
            /**
                * <p>Path to one or more Java <code>.jar</code> files in an S3 bucket that will be loaded in
                *       your <code>DevEndpoint</code>.</p>
                */
            ExtraJarsS3Path?: string;
            /**
                * <p>The reason for a current failure in this <code>DevEndpoint</code>.</p>
                */
            FailureReason?: string;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure being used with this
                *         <code>DevEndpoint</code>.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>The point in time at which this <code>DevEndpoint</code> was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The map of arguments used to configure this <code>DevEndpoint</code>.</p>
                *
                * 	        <p>Valid arguments are:</p>
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>"--enable-glue-datacatalog": ""</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
                */
            Arguments?: Record<string, string>;
    }
    export namespace CreateDevEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDevEndpointResponse) => any;
    }
    /**
        * <p>A value could not be validated.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface CreateJobResponse {
            /**
                * <p>The unique name that was provided for this job definition.</p>
                */
            Name?: string;
    }
    export namespace CreateJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobResponse) => any;
    }
    /**
        * <p>The database and table in the Glue Data Catalog that is used for input or output data.</p>
        */
    export interface GlueTable {
            /**
                * <p>A database name in the Glue Data Catalog.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>A table name in the Glue Data Catalog.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A unique identifier for the Glue Data Catalog.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the connection to the Glue Data Catalog.</p>
                */
            ConnectionName?: string;
    }
    export namespace GlueTable {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlueTable) => any;
    }
    /**
        * <p>The parameters to configure the find matches transform.</p>
        */
    export interface FindMatchesParameters {
            /**
                * <p>The name of a column that uniquely identifies rows in the source table. Used to help identify matching records.</p>
                */
            PrimaryKeyColumnName?: string;
            /**
                * <p>The value selected when tuning your transform for a balance between precision and recall.
                *       A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a
                *       value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0
                *       means very low recall, and choosing values close to 0.0 results in very low precision.</p>
                *
                * 	        <p>The precision metric indicates how often your model is correct when it predicts a match. </p>
                *
                * 	        <p>The recall metric indicates that for an actual match, how often your model predicts the
                *       match.</p>
                */
            PrecisionRecallTradeoff?: number;
            /**
                * <p>The value that is selected when tuning your transform for a balance between accuracy and
                *       cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0
                *       means a bias purely for accuracy, which typically results in a higher cost, sometimes
                *       substantially higher. A value of 0.0 means a bias purely for cost, which results in a less
                *       accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p>
                *
                * 	        <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p>
                *
                * 	        <p>Cost measures how many compute resources, and thus money, are consumed to run the
                *       transform.</p>
                */
            AccuracyCostTradeoff?: number;
            /**
                * <p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p>
                *          <p>Note that setting this value to true may increase the conflation execution time.</p>
                */
            EnforceProvidedLabels?: boolean;
    }
    export namespace FindMatchesParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindMatchesParameters) => any;
    }
    export enum TransformType {
            FIND_MATCHES = "FIND_MATCHES"
    }
    /**
        * <p>The algorithm-specific parameters that are associated with the machine learning
        *       transform.</p>
        */
    export interface TransformParameters {
            /**
                * <p>The type of machine learning transform.</p>
                * 	        <p>For information about the types of machine learning transforms, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html">Creating Machine Learning Transforms</a>.</p>
                */
            TransformType: TransformType | string | undefined;
            /**
                * <p>The parameters for the find matches algorithm.</p>
                */
            FindMatchesParameters?: FindMatchesParameters;
    }
    export namespace TransformParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformParameters) => any;
    }
    export enum MLUserDataEncryptionModeString {
            DISABLED = "DISABLED",
            SSEKMS = "SSE-KMS"
    }
    /**
        * <p>The encryption-at-rest settings of the transform that apply to accessing user data.</p>
        */
    export interface MLUserDataEncryption {
            /**
                * <p>The encryption mode applied to user data. Valid values are:</p>
                *
                * 	        <ul>
                *             <li>
                *                <p>DISABLED: encryption is disabled</p>
                *             </li>
                *             <li>
                *                <p>SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p>
                *             </li>
                *          </ul>
                */
            MlUserDataEncryptionMode: MLUserDataEncryptionModeString | string | undefined;
            /**
                * <p>The ID for the customer-provided KMS key.</p>
                */
            KmsKeyId?: string;
    }
    export namespace MLUserDataEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MLUserDataEncryption) => any;
    }
    /**
        * <p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>
        *
        * 	        <p>Additionally, imported labels and trained transforms can now be encrypted using a customer provided KMS key.</p>
        */
    export interface TransformEncryption {
            /**
                * <p>An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID.</p>
                */
            MlUserDataEncryption?: MLUserDataEncryption;
            /**
                * <p>The name of the security configuration.</p>
                */
            TaskRunSecurityConfigurationName?: string;
    }
    export namespace TransformEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformEncryption) => any;
    }
    export interface CreateMLTransformRequest {
            /**
                * <p>The unique name that you give the transform when you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the machine learning transform that is being defined. The default is an
                *       empty string.</p>
                */
            Description?: string;
            /**
                * <p>A list of Glue table definitions used by the transform.</p>
                */
            InputRecordTables: GlueTable[] | undefined;
            /**
                * <p>The algorithmic parameters that are specific to the transform type used. Conditionally
                *       dependent on the transform type.</p>
                */
            Parameters: TransformParameters | undefined;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform. </p>
                *
                * 		       <ul>
                *             <li>
                *                <p>This role needs Glue service role permissions to allow access to resources in Glue. See <a href="https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html">Attach a Policy to IAM Users That Access Glue</a>.</p>
                *             </li>
                *             <li>
                *                <p>This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.</p>
                *             </li>
                *          </ul>
                */
            Role: string | undefined;
            /**
                * <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9.  For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
                *       processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                *       information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue pricing
                *         page</a>. </p>
                *
                * 			      <p>
                *             <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p>
                *         <ul>
                *             <li>
                *                <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p>
                *             </li>
                *          </ul>
                *
                * 	        <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>
                *
                *
                *          <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p>
                *             </li>
                *          </ul>
                *
                * 	        <p>
                *             <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p>
                *         <ul>
                *             <li>
                *                <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p>
                *
                * 		       <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The timeout of the task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>The maximum number of times to retry a task for this transform after a task run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>The tags to use with this machine learning transform. You may use tags to limit access to the machine learning transform. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>
                */
            TransformEncryption?: TransformEncryption;
    }
    export namespace CreateMLTransformRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMLTransformRequest) => any;
    }
    export interface CreateMLTransformResponse {
            /**
                * <p>A unique identifier that is generated for the transform.</p>
                */
            TransformId?: string;
    }
    export namespace CreateMLTransformResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMLTransformResponse) => any;
    }
    export interface CreatePartitionRequest {
            /**
                * <p>The Amazon Web Services account ID of the catalog in which the partition is to be created.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the metadata database in which the partition is
                *       to be created.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the metadata table in which the partition is to be created.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A <code>PartitionInput</code> structure defining the partition
                *       to be created.</p>
                */
            PartitionInput: PartitionInput | undefined;
    }
    export namespace CreatePartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePartitionRequest) => any;
    }
    export interface CreatePartitionResponse {
    }
    export namespace CreatePartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePartitionResponse) => any;
    }
    /**
        * <p>A structure for a partition index.</p>
        */
    export interface PartitionIndex {
            /**
                * <p>The keys for the partition index.</p>
                */
            Keys: string[] | undefined;
            /**
                * <p>The name of the partition index.</p>
                */
            IndexName: string | undefined;
    }
    export namespace PartitionIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartitionIndex) => any;
    }
    export interface CreatePartitionIndexRequest {
            /**
                * <p>The catalog ID where the table resides.</p>
                */
            CatalogId?: string;
            /**
                * <p>Specifies the name of a database in which you want to create a partition index.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>Specifies the name of a table in which you want to create a partition index.</p>
                */
            TableName: string | undefined;
            /**
                * <p>Specifies a <code>PartitionIndex</code> structure to create a partition index in an existing table.</p>
                */
            PartitionIndex: PartitionIndex | undefined;
    }
    export namespace CreatePartitionIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePartitionIndexRequest) => any;
    }
    export interface CreatePartitionIndexResponse {
    }
    export namespace CreatePartitionIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePartitionIndexResponse) => any;
    }
    export interface CreateRegistryInput {
            /**
                * <p>Name of the registry to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark.  No whitespace.</p>
                */
            RegistryName: string | undefined;
            /**
                * <p>A description of the registry. If description is not provided, there will not be any default value for this.</p>
                */
            Description?: string;
            /**
                * <p>Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateRegistryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRegistryInput) => any;
    }
    export interface CreateRegistryResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the newly created registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>A description of the registry.</p>
                */
            Description?: string;
            /**
                * <p>The tags for the registry.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateRegistryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRegistryResponse) => any;
    }
    export enum Compatibility {
            BACKWARD = "BACKWARD",
            BACKWARD_ALL = "BACKWARD_ALL",
            DISABLED = "DISABLED",
            FORWARD = "FORWARD",
            FORWARD_ALL = "FORWARD_ALL",
            FULL = "FULL",
            FULL_ALL = "FULL_ALL",
            NONE = "NONE"
    }
    /**
        * <p>A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
        */
    export interface RegistryId {
            /**
                * <p>Name of the registry. Used only for lookup. One of <code>RegistryArn</code> or <code>RegistryName</code> has to be provided. </p>
                */
            RegistryName?: string;
            /**
                * <p>Arn of the registry to be updated. One of <code>RegistryArn</code> or <code>RegistryName</code> has to be provided.</p>
                */
            RegistryArn?: string;
    }
    export namespace RegistryId {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegistryId) => any;
    }
    export interface CreateSchemaInput {
            /**
                * <p> This is a wrapper shape to contain the registry identity fields. If this is not provided, the default registry will be used. The ARN format for the same will be: <code>arn:aws:glue:us-east-2:<customer id>:registry/default-registry:random-5-letter-id</code>.</p>
                */
            RegistryId?: RegistryId;
            /**
                * <p>Name of the schema to be created of max length of 255, and may only contain letters, numbers, hyphen, underscore, dollar sign, or hash mark. No whitespace.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
                */
            DataFormat: DataFormat | string | undefined;
            /**
                * <p>The compatibility mode of the schema. The possible values are:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <i>NONE</i>: No compatibility mode applies. You can use this choice in development scenarios or if you do not know the compatibility mode that you want to apply to schemas. Any new version added will be accepted without undergoing a compatibility check.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>DISABLED</i>: This compatibility choice prevents versioning for a particular schema. You can use this choice to prevent future versioning of a schema.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>BACKWARD</i>: This compatibility choice is recommended as it allows data receivers to read both the current and one previous schema version. This means that for instance, a new schema version cannot drop data fields or change the type of these fields, so they can't be read by readers using the previous version.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>BACKWARD_ALL</i>: This compatibility choice allows data receivers to read both the current and all previous schema versions. You can use this choice when you need to delete fields or add optional fields, and check compatibility against all previous schema versions. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>FORWARD</i>: This compatibility choice allows data receivers to read both the current and one next schema version, but not necessarily later versions. You can use this choice when you need to add fields or delete optional fields, but only check compatibility against the last schema version.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>FORWARD_ALL</i>: This compatibility choice allows data receivers to read written by producers of any new registered schema. You can use this choice when you need to add fields or delete optional fields, and check compatibility against all previous schema versions.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>FULL</i>: This compatibility choice allows data receivers to read data written by producers using the previous or next version of the schema, but not necessarily earlier or later versions. You can use this choice when you need to add or remove optional fields, but only check compatibility against the last schema version.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>FULL_ALL</i>: This compatibility choice allows data receivers to read data written by producers using all previous schema versions. You can use this choice when you need to add or remove optional fields, and check compatibility against all previous schema versions.</p>
                *             </li>
                *          </ul>
                */
            Compatibility?: Compatibility | string;
            /**
                * <p>An optional description of the schema. If description is not provided, there will not be any automatic default value for this.</p>
                */
            Description?: string;
            /**
                * <p>Amazon Web Services tags that contain a key value pair and may be searched by console, command line, or API. If specified, follows the Amazon Web Services tags-on-create pattern.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The schema definition using the <code>DataFormat</code> setting for <code>SchemaName</code>.</p>
                */
            SchemaDefinition?: string;
    }
    export namespace CreateSchemaInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSchemaInput) => any;
    }
    export enum SchemaStatus {
            AVAILABLE = "AVAILABLE",
            DELETING = "DELETING",
            PENDING = "PENDING"
    }
    export enum SchemaVersionStatus {
            AVAILABLE = "AVAILABLE",
            DELETING = "DELETING",
            FAILURE = "FAILURE",
            PENDING = "PENDING"
    }
    export interface CreateSchemaResponse {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>A description of the schema if specified when created.</p>
                */
            Description?: string;
            /**
                * <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
                */
            DataFormat?: DataFormat | string;
            /**
                * <p>The schema compatibility mode.</p>
                */
            Compatibility?: Compatibility | string;
            /**
                * <p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>
                */
            SchemaCheckpoint?: number;
            /**
                * <p>The latest version of the schema associated with the returned schema definition.</p>
                */
            LatestSchemaVersion?: number;
            /**
                * <p>The next version of the schema associated with the returned schema definition.</p>
                */
            NextSchemaVersion?: number;
            /**
                * <p>The status of the schema. </p>
                */
            SchemaStatus?: SchemaStatus | string;
            /**
                * <p>The tags for the schema.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The unique identifier of the first schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The status of the first schema version created.</p>
                */
            SchemaVersionStatus?: SchemaVersionStatus | string;
    }
    export namespace CreateSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSchemaResponse) => any;
    }
    /**
        * <p>Represents a directional edge in a directed acyclic graph (DAG).</p>
        */
    export interface CodeGenEdge {
            /**
                * <p>The ID of the node at which the edge starts.</p>
                */
            Source: string | undefined;
            /**
                * <p>The ID of the node at which the edge ends.</p>
                */
            Target: string | undefined;
            /**
                * <p>The target of the edge.</p>
                */
            TargetParameter?: string;
    }
    export namespace CodeGenEdge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeGenEdge) => any;
    }
    /**
        * <p>An argument or property of a node.</p>
        */
    export interface CodeGenNodeArg {
            /**
                * <p>The name of the argument or property.</p>
                */
            Name: string | undefined;
            /**
                * <p>The value of the argument or property.</p>
                */
            Value: string | undefined;
            /**
                * <p>True if the value is used as a parameter.</p>
                */
            Param?: boolean;
    }
    export namespace CodeGenNodeArg {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeGenNodeArg) => any;
    }
    /**
        * <p>Represents a node in a directed acyclic graph (DAG)</p>
        */
    export interface CodeGenNode {
            /**
                * <p>A node identifier that is unique within the node's graph.</p>
                */
            Id: string | undefined;
            /**
                * <p>The type of node that this is.</p>
                */
            NodeType: string | undefined;
            /**
                * <p>Properties of the node, in the form of name-value pairs.</p>
                */
            Args: CodeGenNodeArg[] | undefined;
            /**
                * <p>The line number of the node.</p>
                */
            LineNumber?: number;
    }
    export namespace CodeGenNode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeGenNode) => any;
    }
    export enum Language {
            PYTHON = "PYTHON",
            SCALA = "SCALA"
    }
    export interface CreateScriptRequest {
            /**
                * <p>A list of the nodes in the DAG.</p>
                */
            DagNodes?: CodeGenNode[];
            /**
                * <p>A list of the edges in the DAG.</p>
                */
            DagEdges?: CodeGenEdge[];
            /**
                * <p>The programming language of the resulting code from the DAG.</p>
                */
            Language?: Language | string;
    }
    export namespace CreateScriptRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateScriptRequest) => any;
    }
    export interface CreateScriptResponse {
            /**
                * <p>The Python script generated from the DAG.</p>
                */
            PythonScript?: string;
            /**
                * <p>The Scala code generated from the DAG.</p>
                */
            ScalaCode?: string;
    }
    export namespace CreateScriptResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateScriptResponse) => any;
    }
    export enum CloudWatchEncryptionMode {
            DISABLED = "DISABLED",
            SSEKMS = "SSE-KMS"
    }
    /**
        * <p>Specifies how Amazon CloudWatch data should be encrypted.</p>
        */
    export interface CloudWatchEncryption {
            /**
                * <p>The encryption mode to use for CloudWatch data.</p>
                */
            CloudWatchEncryptionMode?: CloudWatchEncryptionMode | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
                */
            KmsKeyArn?: string;
    }
    export namespace CloudWatchEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchEncryption) => any;
    }
    export enum JobBookmarksEncryptionMode {
            CSEKMS = "CSE-KMS",
            DISABLED = "DISABLED"
    }
    /**
        * <p>Specifies how job bookmark data should be encrypted.</p>
        */
    export interface JobBookmarksEncryption {
            /**
                * <p>The encryption mode to use for job bookmarks data.</p>
                */
            JobBookmarksEncryptionMode?: JobBookmarksEncryptionMode | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
                */
            KmsKeyArn?: string;
    }
    export namespace JobBookmarksEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobBookmarksEncryption) => any;
    }
    export enum S3EncryptionMode {
            DISABLED = "DISABLED",
            SSEKMS = "SSE-KMS",
            SSES3 = "SSE-S3"
    }
    /**
        * <p>Specifies how Amazon Simple Storage Service (Amazon S3) data should be encrypted.</p>
        */
    export interface S3Encryption {
            /**
                * <p>The encryption mode to use for Amazon S3 data.</p>
                */
            S3EncryptionMode?: S3EncryptionMode | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.</p>
                */
            KmsKeyArn?: string;
    }
    export namespace S3Encryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Encryption) => any;
    }
    /**
        * <p>Specifies an encryption configuration.</p>
        */
    export interface EncryptionConfiguration {
            /**
                * <p>The encryption configuration for Amazon Simple Storage Service (Amazon S3) data.</p>
                */
            S3Encryption?: S3Encryption[];
            /**
                * <p>The encryption configuration for Amazon CloudWatch.</p>
                */
            CloudWatchEncryption?: CloudWatchEncryption;
            /**
                * <p>The encryption configuration for job bookmarks.</p>
                */
            JobBookmarksEncryption?: JobBookmarksEncryption;
    }
    export namespace EncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionConfiguration) => any;
    }
    export interface CreateSecurityConfigurationRequest {
            /**
                * <p>The name for the new security configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The encryption configuration for the new security configuration.</p>
                */
            EncryptionConfiguration: EncryptionConfiguration | undefined;
    }
    export namespace CreateSecurityConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSecurityConfigurationRequest) => any;
    }
    export interface CreateSecurityConfigurationResponse {
            /**
                * <p>The name assigned to the new security configuration.</p>
                */
            Name?: string;
            /**
                * <p>The time at which the new security configuration was created.</p>
                */
            CreatedTimestamp?: Date;
    }
    export namespace CreateSecurityConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSecurityConfigurationResponse) => any;
    }
    /**
        * <p>The <code>SessionCommand</code> that runs the job.</p>
        */
    export interface SessionCommand {
            /**
                * <p>Specifies the name of the SessionCommand. Can be 'glueetl' or 'gluestreaming'.</p>
                */
            Name?: string;
            /**
                * <p>Specifies the Python version. The Python version indicates the version supported for jobs of type Spark.</p>
                */
            PythonVersion?: string;
    }
    export namespace SessionCommand {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SessionCommand) => any;
    }
    /**
        * <p>Request to create a new session.</p>
        */
    export interface CreateSessionRequest {
            /**
                * <p>The ID of the session request. </p>
                */
            Id: string | undefined;
            /**
                * <p>The description of the session. </p>
                */
            Description?: string;
            /**
                * <p>The IAM Role ARN </p>
                */
            Role: string | undefined;
            /**
                * <p>The <code>SessionCommand</code> that runs the job. </p>
                */
            Command: SessionCommand | undefined;
            /**
                * <p>The number of seconds before request times out. </p>
                */
            Timeout?: number;
            /**
                * <p>The number of seconds when idle before request times out. </p>
                */
            IdleTimeout?: number;
            /**
                * <p>A map array of key-value pairs. Max is 75 pairs. </p>
                */
            DefaultArguments?: Record<string, string>;
            /**
                * <p>The number of connections to use for the session. </p>
                */
            Connections?: ConnectionsList;
            /**
                * <p>The number of Glue data processing units (DPUs) that can be allocated when the job runs.
                *       A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB memory. </p>
                */
            MaxCapacity?: number;
            /**
                * <p>The number of workers of a defined <code>WorkerType</code> to use for the session. </p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The type of predefined worker that is allocated to use for the session. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The name of the SecurityConfiguration structure to be used with the session </p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>The Glue version determines the versions of Apache Spark and Python that Glue supports.
                *       The GlueVersion must be greater than 2.0. </p>
                */
            GlueVersion?: string;
            /**
                * <p>The map of key value pairs (tags) belonging to the session.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The origin of the request. </p>
                */
            RequestOrigin?: string;
    }
    export namespace CreateSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSessionRequest) => any;
    }
    export enum SessionStatus {
            FAILED = "FAILED",
            PROVISIONING = "PROVISIONING",
            READY = "READY",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING",
            TIMEOUT = "TIMEOUT"
    }
    /**
        * <p>The period in which a remote Spark runtime environment is running.</p>
        */
    export interface Session {
            /**
                * <p>The ID of the session.</p>
                */
            Id?: string;
            /**
                * <p>The time and date when the session was created.</p>
                */
            CreatedOn?: Date;
            /**
                * <p>The session status. </p>
                */
            Status?: SessionStatus | string;
            /**
                * <p>The error message displayed during the session.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The description of the session.</p>
                */
            Description?: string;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role associated with the Session.</p>
                */
            Role?: string;
            /**
                * <p>The command object.See SessionCommand.</p>
                */
            Command?: SessionCommand;
            /**
                * <p>A map array of key-value pairs. Max is 75 pairs. </p>
                */
            DefaultArguments?: Record<string, string>;
            /**
                * <p>The number of connections used for the session.</p>
                */
            Connections?: ConnectionsList;
            /**
                * <p>The code execution progress of the session.</p>
                */
            Progress?: number;
            /**
                * <p>The number of Glue data processing units (DPUs) that can be allocated when the job runs.
                *       A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB memory. </p>
                */
            MaxCapacity?: number;
            /**
                * <p>The name of the SecurityConfiguration structure to be used with the session.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>The Glue version determines the versions of Apache Spark and Python that Glue supports.
                *       The GlueVersion must be greater than 2.0.</p>
                */
            GlueVersion?: string;
    }
    export namespace Session {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Session) => any;
    }
    export interface CreateSessionResponse {
            /**
                * <p>Returns the session object in the response.</p>
                */
            Session?: Session;
    }
    export namespace CreateSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSessionResponse) => any;
    }
    /**
        * <p>A structure that describes a target table for resource linking.</p>
        */
    export interface TableIdentifier {
            /**
                * <p>The ID of the Data Catalog in which the table resides.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database that contains the target table.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The name of the target table.</p>
                */
            Name?: string;
    }
    export namespace TableIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableIdentifier) => any;
    }
    /**
        * <p>A structure used to define a table.</p>
        */
    export interface TableInput {
            /**
                * <p>The table name. For Hive compatibility, this is folded to
                *       lowercase when it is stored.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the table.</p>
                */
            Description?: string;
            /**
                * <p>The table owner.</p>
                */
            Owner?: string;
            /**
                * <p>The last time that the table was accessed.</p>
                */
            LastAccessTime?: Date;
            /**
                * <p>The last time that column statistics were computed for this table.</p>
                */
            LastAnalyzedTime?: Date;
            /**
                * <p>The retention time for this table.</p>
                */
            Retention?: number;
            /**
                * <p>A storage descriptor containing information about the physical storage
                *       of this table.</p>
                */
            StorageDescriptor?: StorageDescriptor;
            /**
                * <p>A list of columns by which the table is partitioned. Only primitive
                *       types are supported as partition keys.</p>
                * 	        <p>When you create a table used by Amazon Athena, and you do not specify any
                *         <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to
                *       an empty list. For example:</p>
                *          <p>
                *             <code>"PartitionKeys": []</code>
                *          </p>
                */
            PartitionKeys?: Column[];
            /**
                * <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>
                */
            ViewOriginalText?: string;
            /**
                * <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>
                */
            ViewExpandedText?: string;
            /**
                * <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>
                */
            TableType?: string;
            /**
                * <p>These key-value pairs define properties associated with the table.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
                */
            TargetTable?: TableIdentifier;
    }
    export namespace TableInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableInput) => any;
    }
    export interface CreateTableRequest {
            /**
                * <p>The ID of the Data Catalog in which to create the <code>Table</code>.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The catalog database in which to create the new table. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The <code>TableInput</code> object that defines the metadata table
                *       to create in the catalog.</p>
                */
            TableInput: TableInput | undefined;
            /**
                * <p>A list of partition indexes, <code>PartitionIndex</code> structures, to create in the table.</p>
                */
            PartitionIndexes?: PartitionIndex[];
            /**
                * <p>The ID of the transaction.</p>
                */
            TransactionId?: string;
    }
    export namespace CreateTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTableRequest) => any;
    }
    export interface CreateTableResponse {
    }
    export namespace CreateTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTableResponse) => any;
    }
    export interface CreateTriggerRequest {
            /**
                * <p>The name of the trigger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the workflow associated with the trigger.</p>
                */
            WorkflowName?: string;
            /**
                * <p>The type of the new trigger.</p>
                */
            Type: TriggerType | string | undefined;
            /**
                * <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run
                *       something every day at 12:15 UTC, you would specify:
                *       <code>cron(15 12 * * ? *)</code>.</p>
                *          <p>This field is required when the trigger type is SCHEDULED.</p>
                */
            Schedule?: string;
            /**
                * <p>A predicate to specify when the new trigger should fire.</p>
                *          <p>This field is required when the trigger type is <code>CONDITIONAL</code>.</p>
                */
            Predicate?: Predicate;
            /**
                * <p>The actions initiated by this trigger when it fires.</p>
                */
            Actions: Action[] | undefined;
            /**
                * <p>A description of the new trigger.</p>
                */
            Description?: string;
            /**
                * <p>Set to <code>true</code> to start <code>SCHEDULED</code> and <code>CONDITIONAL</code>
                *       triggers when created. True is not supported for <code>ON_DEMAND</code> triggers.</p>
                */
            StartOnCreation?: boolean;
            /**
                * <p>The tags to use with this trigger. You may use tags to limit access to the trigger.
                *       For more information about tags in Glue, see
                *       <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide. </p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Batch condition that must be met (specified number of events received or batch time window expired)
                *       before EventBridge event trigger fires.</p>
                */
            EventBatchingCondition?: EventBatchingCondition;
    }
    export namespace CreateTriggerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTriggerRequest) => any;
    }
    export interface CreateTriggerResponse {
            /**
                * <p>The name of the trigger.</p>
                */
            Name?: string;
    }
    export namespace CreateTriggerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTriggerResponse) => any;
    }
    export enum PrincipalType {
            GROUP = "GROUP",
            ROLE = "ROLE",
            USER = "USER"
    }
    export enum ResourceType {
            ARCHIVE = "ARCHIVE",
            FILE = "FILE",
            JAR = "JAR"
    }
    /**
        * <p>The URIs for function resources.</p>
        */
    export interface ResourceUri {
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType?: ResourceType | string;
            /**
                * <p>The URI for accessing the resource.</p>
                */
            Uri?: string;
    }
    export namespace ResourceUri {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceUri) => any;
    }
    /**
        * <p>A structure used to create or update a user-defined function.</p>
        */
    export interface UserDefinedFunctionInput {
            /**
                * <p>The name of the function.</p>
                */
            FunctionName?: string;
            /**
                * <p>The Java class that contains the function code.</p>
                */
            ClassName?: string;
            /**
                * <p>The owner of the function.</p>
                */
            OwnerName?: string;
            /**
                * <p>The owner type.</p>
                */
            OwnerType?: PrincipalType | string;
            /**
                * <p>The resource URIs for the function.</p>
                */
            ResourceUris?: ResourceUri[];
    }
    export namespace UserDefinedFunctionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserDefinedFunctionInput) => any;
    }
    export interface CreateUserDefinedFunctionRequest {
            /**
                * <p>The ID of the Data Catalog in which to create the function. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database in which to create the function.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>A <code>FunctionInput</code> object that defines the function
                *       to create in the Data Catalog.</p>
                */
            FunctionInput: UserDefinedFunctionInput | undefined;
    }
    export namespace CreateUserDefinedFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserDefinedFunctionRequest) => any;
    }
    export interface CreateUserDefinedFunctionResponse {
    }
    export namespace CreateUserDefinedFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserDefinedFunctionResponse) => any;
    }
    export interface CreateWorkflowRequest {
            /**
                * <p>The name to be assigned to the workflow. It should be unique within your account.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the workflow.</p>
                */
            Description?: string;
            /**
                * <p>A collection of properties to be used as part of each execution of the workflow.</p>
                */
            DefaultRunProperties?: Record<string, string>;
            /**
                * <p>The tags to be used with this workflow.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.</p>
                */
            MaxConcurrentRuns?: number;
    }
    export namespace CreateWorkflowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkflowRequest) => any;
    }
    export interface CreateWorkflowResponse {
            /**
                * <p>The name of the workflow which was provided as part of the request.</p>
                */
            Name?: string;
    }
    export namespace CreateWorkflowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkflowResponse) => any;
    }
    export interface DeleteBlueprintRequest {
            /**
                * <p>The name of the blueprint to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteBlueprintRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBlueprintRequest) => any;
    }
    export interface DeleteBlueprintResponse {
            /**
                * <p>Returns the name of the blueprint that was deleted.</p>
                */
            Name?: string;
    }
    export namespace DeleteBlueprintResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBlueprintResponse) => any;
    }
    export interface DeleteClassifierRequest {
            /**
                * <p>Name of the classifier to remove.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteClassifierRequest) => any;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_2' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { GlueServiceException as __BaseException } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/GlueServiceException";
    import { Action, Aggregate, AthenaConnectorSource, BasicCatalogTarget, CatalogKafkaSource, CatalogKinesisSource, CatalogSource, Compatibility, ConnectionInput, ConnectionsList, CrawlerTargets, CsvHeaderOption, CustomCode, DatabaseInput, DirectKafkaSource, DirectKinesisSource, DropDuplicates, DropFields, DropNullFields, DynamoDBCatalogSource, ErrorDetail, EventBatchingCondition, ExecutionProperty, FillMissingValues, Filter, GovernedCatalogSource, GovernedCatalogTarget, JDBCConnectorSource, JDBCConnectorTarget, JobCommand, Join, LakeFormationConfiguration, LineageConfiguration, Merge, MicrosoftSQLServerCatalogSource, MicrosoftSQLServerCatalogTarget, MySQLCatalogSource, MySQLCatalogTarget, NotificationProperty, OracleSQLCatalogSource, OracleSQLCatalogTarget, PartitionInput, PIIDetection, PostgreSQLCatalogSource, PostgreSQLCatalogTarget, Predicate, RecrawlPolicy, RedshiftSource, RedshiftTarget, RegistryId, RelationalCatalogSource, RenameField, S3CatalogSource, S3CatalogTarget, S3CsvSource, S3DirectTarget, S3GlueParquetTarget, S3JsonSource, S3ParquetSource, SchemaChangePolicy, SchemaId, SchemaVersionStatus, SelectFields, SelectFromCollection, SparkConnectorSource, SparkConnectorTarget, SparkSQL, Spigot, SplitFields, TableInput, TransformParameters, Trigger, Union, UserDefinedFunctionInput, WorkerType } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    import { ColumnStatistics, JobBookmarkEntry, MetadataKeyValuePair, ResourceShareType, SchemaVersionNumber, Table } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1";
    export interface RegisterSchemaVersionInput {
            /**
                * <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
                * 	        <ul>
                *             <li>
                *                <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *             <li>
                *                <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *          </ul>
                */
            SchemaId: SchemaId | undefined;
            /**
                * <p>The schema definition using the <code>DataFormat</code> setting for the <code>SchemaName</code>.</p>
                */
            SchemaDefinition: string | undefined;
    }
    export namespace RegisterSchemaVersionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterSchemaVersionInput) => any;
    }
    export interface RegisterSchemaVersionResponse {
            /**
                * <p>The unique ID that represents the version of this schema.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The version of this schema (for sync flow only, in case this is the first version).</p>
                */
            VersionNumber?: number;
            /**
                * <p>The status of the schema version.</p>
                */
            Status?: SchemaVersionStatus | string;
    }
    export namespace RegisterSchemaVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterSchemaVersionResponse) => any;
    }
    export interface RemoveSchemaVersionMetadataInput {
            /**
                * <p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
                */
            SchemaId?: SchemaId;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersionNumber?: SchemaVersionNumber;
            /**
                * <p>The unique version ID of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The value of the metadata key.</p>
                */
            MetadataKeyValue: MetadataKeyValuePair | undefined;
    }
    export namespace RemoveSchemaVersionMetadataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveSchemaVersionMetadataInput) => any;
    }
    export interface RemoveSchemaVersionMetadataResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The latest version of the schema.</p>
                */
            LatestVersion?: boolean;
            /**
                * <p>The version number of the schema.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The version ID for the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The metadata key.</p>
                */
            MetadataKey?: string;
            /**
                * <p>The value of the metadata key.</p>
                */
            MetadataValue?: string;
    }
    export namespace RemoveSchemaVersionMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveSchemaVersionMetadataResponse) => any;
    }
    export interface ResetJobBookmarkRequest {
            /**
                * <p>The name of the job in question.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The unique run identifier associated with this job run.</p>
                */
            RunId?: string;
    }
    export namespace ResetJobBookmarkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetJobBookmarkRequest) => any;
    }
    export interface ResetJobBookmarkResponse {
            /**
                * <p>The reset bookmark entry.</p>
                */
            JobBookmarkEntry?: JobBookmarkEntry;
    }
    export namespace ResetJobBookmarkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetJobBookmarkResponse) => any;
    }
    /**
        * <p>Too many jobs are being run concurrently.</p>
        */
    export class ConcurrentRunsExceededException extends __BaseException {
            readonly name: "ConcurrentRunsExceededException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentRunsExceededException, __BaseException>);
    }
    /**
        * <p>The workflow is in an invalid state to perform a requested operation.</p>
        */
    export class IllegalWorkflowStateException extends __BaseException {
            readonly name: "IllegalWorkflowStateException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IllegalWorkflowStateException, __BaseException>);
    }
    export interface ResumeWorkflowRunRequest {
            /**
                * <p>The name of the workflow to resume.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ID of the workflow run to resume.</p>
                */
            RunId: string | undefined;
            /**
                * <p>A list of the node IDs for the nodes you want to restart. The nodes that are to be restarted must have a run attempt in the original run.</p>
                */
            NodeIds: string[] | undefined;
    }
    export namespace ResumeWorkflowRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResumeWorkflowRunRequest) => any;
    }
    export interface ResumeWorkflowRunResponse {
            /**
                * <p>The new ID assigned to the resumed workflow run. Each resume of a workflow run will have a new run ID.</p>
                */
            RunId?: string;
            /**
                * <p>A list of the node IDs for the nodes that were actually restarted.</p>
                */
            NodeIds?: string[];
    }
    export namespace ResumeWorkflowRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResumeWorkflowRunResponse) => any;
    }
    export interface RunStatementRequest {
            /**
                * <p>The Session Id of the statement to be run.</p>
                */
            SessionId: string | undefined;
            /**
                * <p>The statement code to be run.</p>
                */
            Code: string | undefined;
            /**
                * <p>The origin of the request.</p>
                */
            RequestOrigin?: string;
    }
    export namespace RunStatementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RunStatementRequest) => any;
    }
    export interface RunStatementResponse {
            /**
                * <p>Returns the Id of the statement that was run.</p>
                */
            Id?: number;
    }
    export namespace RunStatementResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RunStatementResponse) => any;
    }
    export enum Comparator {
            EQUALS = "EQUALS",
            GREATER_THAN = "GREATER_THAN",
            GREATER_THAN_EQUALS = "GREATER_THAN_EQUALS",
            LESS_THAN = "LESS_THAN",
            LESS_THAN_EQUALS = "LESS_THAN_EQUALS"
    }
    /**
        * <p>Defines a property predicate.</p>
        */
    export interface PropertyPredicate {
            /**
                * <p>The key of the property.</p>
                */
            Key?: string;
            /**
                * <p>The value of the property.</p>
                */
            Value?: string;
            /**
                * <p>The comparator used to compare this property to others.</p>
                */
            Comparator?: Comparator | string;
    }
    export namespace PropertyPredicate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PropertyPredicate) => any;
    }
    export enum Sort {
            ASCENDING = "ASC",
            DESCENDING = "DESC"
    }
    /**
        * <p>Specifies a field to sort by and a sort order.</p>
        */
    export interface SortCriterion {
            /**
                * <p>The name of the field on which to sort.</p>
                */
            FieldName?: string;
            /**
                * <p>An ascending or descending sort.</p>
                */
            Sort?: Sort | string;
    }
    export namespace SortCriterion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SortCriterion) => any;
    }
    export interface SearchTablesRequest {
            /**
                * <p>A unique identifier, consisting of <code>
                *                <i>account_id</i>
                *             </code>.</p>
                */
            CatalogId?: string;
            /**
                * <p>A continuation token, included if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of key-value pairs, and a comparator used to filter the search results. Returns all entities matching the predicate.</p>
                *
                * 	        <p>The <code>Comparator</code> member of the <code>PropertyPredicate</code> struct is used only for time fields, and can be omitted for other field types. Also, when comparing string values, such as when <code>Key=Name</code>, a fuzzy match algorithm is used. The <code>Key</code> field (for example, the value of the <code>Name</code> field) is split on certain punctuation characters, for example, -, :, #, etc. into tokens. Then each token is exact-match compared with the <code>Value</code> member of <code>PropertyPredicate</code>. For example, if <code>Key=Name</code> and <code>Value=link</code>, tables named <code>customer-link</code> and <code>xx-link-yy</code> are returned, but <code>xxlinkyy</code> is not returned.</p>
                */
            Filters?: PropertyPredicate[];
            /**
                * <p>A string used for a text search.</p>
                * 	        <p>Specifying a value in quotes filters based on an exact match to the value.</p>
                */
            SearchText?: string;
            /**
                * <p>A list of criteria for sorting the results by a field name, in an ascending or descending order.</p>
                */
            SortCriteria?: SortCriterion[];
            /**
                * <p>The maximum number of tables to return in a single response.</p>
                */
            MaxResults?: number;
            /**
                * <p>Allows you to specify that you want to search the tables shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p>
                *
                * 	        <ul>
                *             <li>
                *                <p>If set to <code>FOREIGN</code>, will search the tables shared with your account. </p>
                *             </li>
                *             <li>
                *                <p>If set to <code>ALL</code>, will search the tables shared with your account, as well as the tables in yor local account. </p>
                *             </li>
                *          </ul>
                */
            ResourceShareType?: ResourceShareType | string;
    }
    export namespace SearchTablesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchTablesRequest) => any;
    }
    export interface SearchTablesResponse {
            /**
                * <p>A continuation token, present if the current list segment is not the last.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of the requested <code>Table</code> objects. The <code>SearchTables</code> response returns only the tables that you have access to.</p>
                */
            TableList?: Table[];
    }
    export namespace SearchTablesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchTablesResponse) => any;
    }
    /**
        * <p>The blueprint is in an invalid state to perform a requested operation.</p>
        */
    export class IllegalBlueprintStateException extends __BaseException {
            readonly name: "IllegalBlueprintStateException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IllegalBlueprintStateException, __BaseException>);
    }
    export interface StartBlueprintRunRequest {
            /**
                * <p>The name of the blueprint.</p>
                */
            BlueprintName: string | undefined;
            /**
                * <p>Specifies the parameters as a <code>BlueprintParameters</code> object.</p>
                */
            Parameters?: string;
            /**
                * <p>Specifies the IAM role used to create the workflow.</p>
                */
            RoleArn: string | undefined;
    }
    export namespace StartBlueprintRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartBlueprintRunRequest) => any;
    }
    export interface StartBlueprintRunResponse {
            /**
                * <p>The run ID for this blueprint run.</p>
                */
            RunId?: string;
    }
    export namespace StartBlueprintRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartBlueprintRunResponse) => any;
    }
    export interface StartCrawlerRequest {
            /**
                * <p>Name of the crawler to start.</p>
                */
            Name: string | undefined;
    }
    export namespace StartCrawlerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCrawlerRequest) => any;
    }
    export interface StartCrawlerResponse {
    }
    export namespace StartCrawlerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCrawlerResponse) => any;
    }
    /**
        * <p>There is no applicable schedule.</p>
        */
    export class NoScheduleException extends __BaseException {
            readonly name: "NoScheduleException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoScheduleException, __BaseException>);
    }
    /**
        * <p>The specified scheduler is already running.</p>
        */
    export class SchedulerRunningException extends __BaseException {
            readonly name: "SchedulerRunningException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SchedulerRunningException, __BaseException>);
    }
    export interface StartCrawlerScheduleRequest {
            /**
                * <p>Name of the crawler to schedule.</p>
                */
            CrawlerName: string | undefined;
    }
    export namespace StartCrawlerScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCrawlerScheduleRequest) => any;
    }
    export interface StartCrawlerScheduleResponse {
    }
    export namespace StartCrawlerScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartCrawlerScheduleResponse) => any;
    }
    export interface StartExportLabelsTaskRunRequest {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId: string | undefined;
            /**
                * <p>The Amazon S3 path where you export the labels.</p>
                */
            OutputS3Path: string | undefined;
    }
    export namespace StartExportLabelsTaskRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExportLabelsTaskRunRequest) => any;
    }
    export interface StartExportLabelsTaskRunResponse {
            /**
                * <p>The unique identifier for the task run.</p>
                */
            TaskRunId?: string;
    }
    export namespace StartExportLabelsTaskRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExportLabelsTaskRunResponse) => any;
    }
    export interface StartImportLabelsTaskRunRequest {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId: string | undefined;
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) path from where you import the
                *       labels.</p>
                */
            InputS3Path: string | undefined;
            /**
                * <p>Indicates whether to overwrite your existing labels.</p>
                */
            ReplaceAllLabels?: boolean;
    }
    export namespace StartImportLabelsTaskRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartImportLabelsTaskRunRequest) => any;
    }
    export interface StartImportLabelsTaskRunResponse {
            /**
                * <p>The unique identifier for the task run.</p>
                */
            TaskRunId?: string;
    }
    export namespace StartImportLabelsTaskRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartImportLabelsTaskRunResponse) => any;
    }
    export interface StartJobRunRequest {
            /**
                * <p>The name of the job definition to use.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The ID of a previous <code>JobRun</code> to retry.</p>
                */
            JobRunId?: string;
            /**
                * <p>The job arguments specifically for this run. For this job run, they replace the default arguments set in the job definition itself.</p>
                *          <p>You can specify arguments here that your own job-execution script
                *       consumes, as well as arguments that Glue itself consumes.</p>
                *          <p>Job arguments may be logged. Do not pass plaintext secrets as arguments.
                *     Retrieve secrets from a Glue Connection, Secrets Manager or
                *     other secret management mechanism if you intend to keep them within the Job.
                *     </p>
                *          <p>For information about how to specify and consume your own Job arguments, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling Glue APIs in Python</a> topic in the developer guide.</p>
                *          <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by Glue</a> topic in the developer guide.</p>
                */
            Arguments?: Record<string, string>;
            /**
                * @deprecated
                *
                * <p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p>
                *
                *          <p>The number of Glue data processing units (DPUs) to allocate to this JobRun.
                *       You can allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure
                *       of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
                *       For more information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue
                *         pricing page</a>.</p>
                */
            AllocatedCapacity?: number;
            /**
                * <p>The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can
                *       consume resources before it is terminated and enters <code>TIMEOUT</code> status. This value overrides the timeout value set in the parent job.</p>
                *
                *          <p>Streaming jobs do not have a timeout. The default for non-streaming jobs is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>The number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure
                *       of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
                *       For more information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue
                *         pricing page</a>.</p>
                *
                *          <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p>
                *
                *          <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are
                *       running a Python shell job, or an Apache Spark ETL job:</p>
                *          <ul>
                *             <li>
                *                <p>When you specify a Python shell job (<code>JobCommand.Name</code>="pythonshell"), you can
                *         allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p>
                *             </li>
                *             <li>
                *                <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>="glueetl"), you can allocate a minimum of 2 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p>
                *             </li>
                *          </ul>
                */
            MaxCapacity?: number;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this job
                *       run.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>Specifies configuration properties of a job run notification.</p>
                */
            NotificationProperty?: NotificationProperty;
            /**
                * <p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
                *          <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>
                */
            NumberOfWorkers?: number;
    }
    export namespace StartJobRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartJobRunRequest) => any;
    }
    export interface StartJobRunResponse {
            /**
                * <p>The ID assigned to this job run.</p>
                */
            JobRunId?: string;
    }
    export namespace StartJobRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartJobRunResponse) => any;
    }
    /**
        * <p>The machine learning transform is not ready to run.</p>
        */
    export class MLTransformNotReadyException extends __BaseException {
            readonly name: "MLTransformNotReadyException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MLTransformNotReadyException, __BaseException>);
    }
    export interface StartMLEvaluationTaskRunRequest {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId: string | undefined;
    }
    export namespace StartMLEvaluationTaskRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMLEvaluationTaskRunRequest) => any;
    }
    export interface StartMLEvaluationTaskRunResponse {
            /**
                * <p>The unique identifier associated with this run.</p>
                */
            TaskRunId?: string;
    }
    export namespace StartMLEvaluationTaskRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMLEvaluationTaskRunResponse) => any;
    }
    export interface StartMLLabelingSetGenerationTaskRunRequest {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId: string | undefined;
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) path where you generate the labeling
                *       set.</p>
                */
            OutputS3Path: string | undefined;
    }
    export namespace StartMLLabelingSetGenerationTaskRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMLLabelingSetGenerationTaskRunRequest) => any;
    }
    export interface StartMLLabelingSetGenerationTaskRunResponse {
            /**
                * <p>The unique run identifier that is associated with this task run.</p>
                */
            TaskRunId?: string;
    }
    export namespace StartMLLabelingSetGenerationTaskRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMLLabelingSetGenerationTaskRunResponse) => any;
    }
    export interface StartTriggerRequest {
            /**
                * <p>The name of the trigger to start.</p>
                */
            Name: string | undefined;
    }
    export namespace StartTriggerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTriggerRequest) => any;
    }
    export interface StartTriggerResponse {
            /**
                * <p>The name of the trigger that was started.</p>
                */
            Name?: string;
    }
    export namespace StartTriggerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartTriggerResponse) => any;
    }
    export interface StartWorkflowRunRequest {
            /**
                * <p>The name of the workflow to start.</p>
                */
            Name: string | undefined;
            /**
                * <p>The workflow run properties for the new workflow run.</p>
                */
            RunProperties?: Record<string, string>;
    }
    export namespace StartWorkflowRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartWorkflowRunRequest) => any;
    }
    export interface StartWorkflowRunResponse {
            /**
                * <p>An Id for the new run.</p>
                */
            RunId?: string;
    }
    export namespace StartWorkflowRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartWorkflowRunResponse) => any;
    }
    /**
        * <p>The specified crawler is not running.</p>
        */
    export class CrawlerNotRunningException extends __BaseException {
            readonly name: "CrawlerNotRunningException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CrawlerNotRunningException, __BaseException>);
    }
    /**
        * <p>The specified crawler is stopping.</p>
        */
    export class CrawlerStoppingException extends __BaseException {
            readonly name: "CrawlerStoppingException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CrawlerStoppingException, __BaseException>);
    }
    export interface StopCrawlerRequest {
            /**
                * <p>Name of the crawler to stop.</p>
                */
            Name: string | undefined;
    }
    export namespace StopCrawlerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopCrawlerRequest) => any;
    }
    export interface StopCrawlerResponse {
    }
    export namespace StopCrawlerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopCrawlerResponse) => any;
    }
    /**
        * <p>The specified scheduler is not running.</p>
        */
    export class SchedulerNotRunningException extends __BaseException {
            readonly name: "SchedulerNotRunningException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SchedulerNotRunningException, __BaseException>);
    }
    export interface StopCrawlerScheduleRequest {
            /**
                * <p>Name of the crawler whose schedule state to set.</p>
                */
            CrawlerName: string | undefined;
    }
    export namespace StopCrawlerScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopCrawlerScheduleRequest) => any;
    }
    export interface StopCrawlerScheduleResponse {
    }
    export namespace StopCrawlerScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopCrawlerScheduleResponse) => any;
    }
    export interface StopSessionRequest {
            /**
                * <p>The ID of the session to be stopped.</p>
                */
            Id: string | undefined;
            /**
                * <p>The origin of the request.</p>
                */
            RequestOrigin?: string;
    }
    export namespace StopSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSessionRequest) => any;
    }
    export interface StopSessionResponse {
            /**
                * <p>Returns the Id of the stopped session.</p>
                */
            Id?: string;
    }
    export namespace StopSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSessionResponse) => any;
    }
    export interface StopTriggerRequest {
            /**
                * <p>The name of the trigger to stop.</p>
                */
            Name: string | undefined;
    }
    export namespace StopTriggerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTriggerRequest) => any;
    }
    export interface StopTriggerResponse {
            /**
                * <p>The name of the trigger that was stopped.</p>
                */
            Name?: string;
    }
    export namespace StopTriggerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopTriggerResponse) => any;
    }
    export interface StopWorkflowRunRequest {
            /**
                * <p>The name of the workflow to stop.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ID of the workflow run to stop.</p>
                */
            RunId: string | undefined;
    }
    export namespace StopWorkflowRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopWorkflowRunRequest) => any;
    }
    export interface StopWorkflowRunResponse {
    }
    export namespace StopWorkflowRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopWorkflowRunResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the Glue resource to which to add the tags. For more
                *       information about Glue resource ARNs, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html#aws-glue-api-regex-aws-glue-arn-id">Glue ARN string pattern</a>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tags to add to this resource.</p>
                */
            TagsToAdd: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource from which to remove the tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tags to remove from this resource.</p>
                */
            TagsToRemove: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateBlueprintRequest {
            /**
                * <p>The name of the blueprint.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the blueprint.</p>
                */
            Description?: string;
            /**
                * <p>Specifies a path in Amazon S3 where the blueprint is published.</p>
                */
            BlueprintLocation: string | undefined;
    }
    export namespace UpdateBlueprintRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBlueprintRequest) => any;
    }
    export interface UpdateBlueprintResponse {
            /**
                * <p>Returns the name of the blueprint that was updated.</p>
                */
            Name?: string;
    }
    export namespace UpdateBlueprintResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBlueprintResponse) => any;
    }
    /**
        * <p>Specifies a custom CSV classifier to be updated.</p>
        */
    export interface UpdateCsvClassifierRequest {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>A custom symbol to denote what separates each column entry in the row.</p>
                */
            Delimiter?: string;
            /**
                * <p>A custom symbol to denote what combines content into a single column value. It must be
                *       different from the column delimiter.</p>
                */
            QuoteSymbol?: string;
            /**
                * <p>Indicates whether the CSV file contains a header.</p>
                */
            ContainsHeader?: CsvHeaderOption | string;
            /**
                * <p>A list of strings representing column names.</p>
                */
            Header?: string[];
            /**
                * <p>Specifies not to trim values before identifying the type of column values. The default value is true.</p>
                */
            DisableValueTrimming?: boolean;
            /**
                * <p>Enables the processing of files that contain only one column.</p>
                */
            AllowSingleColumn?: boolean;
    }
    export namespace UpdateCsvClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCsvClassifierRequest) => any;
    }
    /**
        * <p>Specifies a grok classifier to update when passed to
        *       <code>UpdateClassifier</code>.</p>
        */
    export interface UpdateGrokClassifierRequest {
            /**
                * <p>The name of the <code>GrokClassifier</code>.</p>
                */
            Name: string | undefined;
            /**
                * <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs,
                *       Amazon CloudWatch Logs, and so on.</p>
                */
            Classification?: string;
            /**
                * <p>The grok pattern used by this classifier.</p>
                */
            GrokPattern?: string;
            /**
                * <p>Optional custom grok patterns used by this classifier.</p>
                */
            CustomPatterns?: string;
    }
    export namespace UpdateGrokClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGrokClassifierRequest) => any;
    }
    /**
        * <p>Specifies a JSON classifier to be updated.</p>
        */
    export interface UpdateJsonClassifierRequest {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.
                *       Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.</p>
                */
            JsonPath?: string;
    }
    export namespace UpdateJsonClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateJsonClassifierRequest) => any;
    }
    /**
        * <p>Specifies an XML classifier to be updated.</p>
        */
    export interface UpdateXMLClassifierRequest {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>An identifier of the data format that the classifier matches.</p>
                */
            Classification?: string;
            /**
                * <p>The XML tag designating the element that contains each record in an XML document being
                *       parsed. This cannot identify a self-closing element (closed by <code>/></code>). An empty
                *       row element that contains only attributes can be parsed as long as it ends with a closing tag
                *       (for example, <code><row item_a="A" item_b="B"></row></code> is okay, but
                *         <code><row item_a="A" item_b="B" /></code> is not).</p>
                */
            RowTag?: string;
    }
    export namespace UpdateXMLClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateXMLClassifierRequest) => any;
    }
    export interface UpdateClassifierRequest {
            /**
                * <p>A <code>GrokClassifier</code> object with updated fields.</p>
                */
            GrokClassifier?: UpdateGrokClassifierRequest;
            /**
                * <p>An <code>XMLClassifier</code> object with updated fields.</p>
                */
            XMLClassifier?: UpdateXMLClassifierRequest;
            /**
                * <p>A <code>JsonClassifier</code> object with updated fields.</p>
                */
            JsonClassifier?: UpdateJsonClassifierRequest;
            /**
                * <p>A <code>CsvClassifier</code> object with updated fields.</p>
                */
            CsvClassifier?: UpdateCsvClassifierRequest;
    }
    export namespace UpdateClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClassifierRequest) => any;
    }
    export interface UpdateClassifierResponse {
    }
    export namespace UpdateClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClassifierResponse) => any;
    }
    /**
        * <p>There was a version conflict.</p>
        */
    export class VersionMismatchException extends __BaseException {
            readonly name: "VersionMismatchException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<VersionMismatchException, __BaseException>);
    }
    export interface UpdateColumnStatisticsForPartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of partition values identifying the partition.</p>
                */
            PartitionValues: string[] | undefined;
            /**
                * <p>A list of the column statistics.</p>
                */
            ColumnStatisticsList: ColumnStatistics[] | undefined;
    }
    export namespace UpdateColumnStatisticsForPartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateColumnStatisticsForPartitionRequest) => any;
    }
    /**
        * <p>Encapsulates a <code>ColumnStatistics</code> object that failed and the reason for failure.</p>
        */
    export interface ColumnStatisticsError {
            /**
                * <p>The <code>ColumnStatistics</code> of the column.</p>
                */
            ColumnStatistics?: ColumnStatistics;
            /**
                * <p>An error message with the reason for the failure of an operation.</p>
                */
            Error?: ErrorDetail;
    }
    export namespace ColumnStatisticsError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnStatisticsError) => any;
    }
    export interface UpdateColumnStatisticsForPartitionResponse {
            /**
                * <p>Error occurred during updating column statistics data.</p>
                */
            Errors?: ColumnStatisticsError[];
    }
    export namespace UpdateColumnStatisticsForPartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateColumnStatisticsForPartitionResponse) => any;
    }
    export interface UpdateColumnStatisticsForTableRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of the column statistics.</p>
                */
            ColumnStatisticsList: ColumnStatistics[] | undefined;
    }
    export namespace UpdateColumnStatisticsForTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateColumnStatisticsForTableRequest) => any;
    }
    export interface UpdateColumnStatisticsForTableResponse {
            /**
                * <p>List of ColumnStatisticsErrors.</p>
                */
            Errors?: ColumnStatisticsError[];
    }
    export namespace UpdateColumnStatisticsForTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateColumnStatisticsForTableResponse) => any;
    }
    export interface UpdateConnectionRequest {
            /**
                * <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the connection definition to update.</p>
                */
            Name: string | undefined;
            /**
                * <p>A <code>ConnectionInput</code> object that redefines the connection
                *       in question.</p>
                */
            ConnectionInput: ConnectionInput | undefined;
    }
    export namespace UpdateConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionRequest) => any;
    }
    export interface UpdateConnectionResponse {
    }
    export namespace UpdateConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionResponse) => any;
    }
    export interface UpdateCrawlerRequest {
            /**
                * <p>Name of the new crawler.</p>
                */
            Name: string | undefined;
            /**
                * <p>The IAM role or Amazon Resource Name (ARN) of an IAM role that is used by the new crawler
                *       to access customer resources.</p>
                */
            Role?: string;
            /**
                * <p>The Glue database where results are stored, such as:
                *         <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
                */
            DatabaseName?: string;
            /**
                * <p>A description of the new crawler.</p>
                */
            Description?: string;
            /**
                * <p>A list of targets to crawl.</p>
                */
            Targets?: CrawlerTargets;
            /**
                * <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run
                *       something every day at 12:15 UTC, you would specify:
                *       <code>cron(15 12 * * ? *)</code>.</p>
                */
            Schedule?: string;
            /**
                * <p>A list of custom classifiers that the user
                *       has registered. By default, all built-in classifiers are included in a crawl,
                *       but these custom classifiers always override the default classifiers
                *       for a given classification.</p>
                */
            Classifiers?: string[];
            /**
                * <p>The table prefix used for catalog tables that are created.</p>
                */
            TablePrefix?: string;
            /**
                * <p>The policy for the crawler's update and deletion behavior.</p>
                */
            SchemaChangePolicy?: SchemaChangePolicy;
            /**
                * <p>A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run.</p>
                */
            RecrawlPolicy?: RecrawlPolicy;
            /**
                * <p>Specifies data lineage configuration settings for the crawler.</p>
                */
            LineageConfiguration?: LineageConfiguration;
            /**
                * <p>Specifies Lake Formation configuration settings for the crawler.</p>
                */
            LakeFormationConfiguration?: LakeFormationConfiguration;
            /**
                * <p>Crawler configuration information. This versioned JSON string allows users
                *         to specify aspects of a crawler's behavior.
                *         For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html">Configuring a Crawler</a>.</p>
                */
            Configuration?: string;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used by this
                *       crawler.</p>
                */
            CrawlerSecurityConfiguration?: string;
    }
    export namespace UpdateCrawlerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCrawlerRequest) => any;
    }
    export interface UpdateCrawlerResponse {
    }
    export namespace UpdateCrawlerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCrawlerResponse) => any;
    }
    export interface UpdateCrawlerScheduleRequest {
            /**
                * <p>The name of the crawler whose schedule to update.</p>
                */
            CrawlerName: string | undefined;
            /**
                * <p>The updated <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run
                *       something every day at 12:15 UTC, you would specify:
                *       <code>cron(15 12 * * ? *)</code>.</p>
                */
            Schedule?: string;
    }
    export namespace UpdateCrawlerScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCrawlerScheduleRequest) => any;
    }
    export interface UpdateCrawlerScheduleResponse {
    }
    export namespace UpdateCrawlerScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCrawlerScheduleResponse) => any;
    }
    export interface UpdateDatabaseRequest {
            /**
                * <p>The ID of the Data Catalog in which the metadata database resides. If none is provided,
                *       the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the database to update in the catalog. For Hive
                *       compatibility, this is folded to lowercase.</p>
                */
            Name: string | undefined;
            /**
                * <p>A <code>DatabaseInput</code> object specifying the new definition
                *       of the metadata database in the catalog.</p>
                */
            DatabaseInput: DatabaseInput | undefined;
    }
    export namespace UpdateDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatabaseRequest) => any;
    }
    export interface UpdateDatabaseResponse {
    }
    export namespace UpdateDatabaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatabaseResponse) => any;
    }
    /**
        * <p>Custom libraries to be loaded into a development endpoint.</p>
        */
    export interface DevEndpointCustomLibraries {
            /**
                * <p>The paths to one or more Python libraries in an Amazon Simple Storage Service (Amazon S3)
                *       bucket that should be loaded in your <code>DevEndpoint</code>. Multiple values must be
                *       complete paths separated by a comma.</p>
                *          <note>
                *             <p>You can only use pure Python libraries with a <code>DevEndpoint</code>. Libraries that rely on
                *         C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data
                *         analysis library, are not currently supported.</p>
                *          </note>
                */
            ExtraPythonLibsS3Path?: string;
            /**
                * <p>The path to one or more Java <code>.jar</code> files in an S3 bucket that should be loaded
                *       in your <code>DevEndpoint</code>.</p>
                *          <note>
                *             <p>You can only use pure Java/Scala libraries with a <code>DevEndpoint</code>.</p>
                *          </note>
                */
            ExtraJarsS3Path?: string;
    }
    export namespace DevEndpointCustomLibraries {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DevEndpointCustomLibraries) => any;
    }
    export interface UpdateDevEndpointRequest {
            /**
                * <p>The name of the <code>DevEndpoint</code> to be updated.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The public key for the <code>DevEndpoint</code> to use.</p>
                */
            PublicKey?: string;
            /**
                * <p>The list of public keys for the <code>DevEndpoint</code> to use.</p>
                */
            AddPublicKeys?: string[];
            /**
                * <p>The list of public keys to be deleted from the <code>DevEndpoint</code>.</p>
                */
            DeletePublicKeys?: string[];
            /**
                * <p>Custom Python or Java libraries to be loaded in the <code>DevEndpoint</code>.</p>
                */
            CustomLibraries?: DevEndpointCustomLibraries;
            /**
                * <p>
                *             <code>True</code> if the list of custom libraries to be loaded in the development endpoint
                *       needs to be updated, or <code>False</code> if otherwise.</p>
                */
            UpdateEtlLibraries?: boolean;
            /**
                * <p>The list of argument keys to be deleted from the map of arguments used to configure the
                *         <code>DevEndpoint</code>.</p>
                */
            DeleteArguments?: string[];
            /**
                * <p>The map of arguments to add the map of arguments used to configure the
                *         <code>DevEndpoint</code>.</p>
                *
                * 	        <p>Valid arguments are:</p>
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>"--enable-glue-datacatalog": ""</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>You can specify a version of Python support for development endpoints by using the <code>Arguments</code> parameter in the <code>CreateDevEndpoint</code> or <code>UpdateDevEndpoint</code> APIs. If no arguments are provided, the version defaults to Python 2.</p>
                */
            AddArguments?: Record<string, string>;
    }
    export namespace UpdateDevEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDevEndpointRequest) => any;
    }
    export interface UpdateDevEndpointResponse {
    }
    export namespace UpdateDevEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDevEndpointResponse) => any;
    }
    export interface UpdateJobResponse {
            /**
                * <p>Returns the name of the updated job definition.</p>
                */
            JobName?: string;
    }
    export namespace UpdateJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateJobResponse) => any;
    }
    export interface UpdateMLTransformRequest {
            /**
                * <p>A unique identifier that was generated when the transform was created.</p>
                */
            TransformId: string | undefined;
            /**
                * <p>The unique name that you gave the transform when you created it.</p>
                */
            Name?: string;
            /**
                * <p>A description of the transform. The default is an empty string.</p>
                */
            Description?: string;
            /**
                * <p>The configuration parameters that are specific to the transform type (algorithm) used.
                *       Conditionally dependent on the transform type.</p>
                */
            Parameters?: TransformParameters;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role with the required
                *       permissions.</p>
                */
            Role?: string;
            /**
                * <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9.  For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
                *       processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                *       information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue pricing
                *         page</a>. </p>
                *
                *          <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>The maximum number of times to retry a task for this transform after a task run fails.</p>
                */
            MaxRetries?: number;
    }
    export namespace UpdateMLTransformRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMLTransformRequest) => any;
    }
    export interface UpdateMLTransformResponse {
            /**
                * <p>The unique identifier for the transform that was updated.</p>
                */
            TransformId?: string;
    }
    export namespace UpdateMLTransformResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMLTransformResponse) => any;
    }
    export interface UpdatePartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partition to be updated resides. If none is provided,
                *       the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database in which the table in question
                *       resides.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table in which the partition to be updated is located.</p>
                */
            TableName: string | undefined;
            /**
                * <p>List of partition key values that define the partition to update.</p>
                */
            PartitionValueList: string[] | undefined;
            /**
                * <p>The new partition object to update the partition to.</p>
                *
                * 	        <p>The <code>Values</code> property can't be changed. If you want to change the partition key values for a partition, delete and recreate the partition.</p>
                */
            PartitionInput: PartitionInput | undefined;
    }
    export namespace UpdatePartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePartitionRequest) => any;
    }
    export interface UpdatePartitionResponse {
    }
    export namespace UpdatePartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePartitionResponse) => any;
    }
    export interface UpdateRegistryInput {
            /**
                * <p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
                */
            RegistryId: RegistryId | undefined;
            /**
                * <p>A description of the registry. If description is not provided, this field will not be updated.</p>
                */
            Description: string | undefined;
    }
    export namespace UpdateRegistryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRegistryInput) => any;
    }
    export interface UpdateRegistryResponse {
            /**
                * <p>The name of the updated registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The Amazon Resource name (ARN) of the updated registry.</p>
                */
            RegistryArn?: string;
    }
    export namespace UpdateRegistryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRegistryResponse) => any;
    }
    export interface UpdateSchemaInput {
            /**
                * <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
                * 	        <ul>
                *             <li>
                *                <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                *             </li>
                *             <li>
                *                <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                *             </li>
                *          </ul>
                */
            SchemaId: SchemaId | undefined;
            /**
                * <p>Version number required for check pointing. One of <code>VersionNumber</code> or <code>Compatibility</code> has to be provided.</p>
                */
            SchemaVersionNumber?: SchemaVersionNumber;
            /**
                * <p>The new compatibility setting for the schema.</p>
                */
            Compatibility?: Compatibility | string;
            /**
                * <p>The new description for the schema.</p>
                */
            Description?: string;
    }
    export namespace UpdateSchemaInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSchemaInput) => any;
    }
    export interface UpdateSchemaResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The name of the registry that contains the schema.</p>
                */
            RegistryName?: string;
    }
    export namespace UpdateSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSchemaResponse) => any;
    }
    export interface UpdateTableRequest {
            /**
                * <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database in which the table resides. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>An updated <code>TableInput</code> object to define the metadata table
                *       in the catalog.</p>
                */
            TableInput: TableInput | undefined;
            /**
                * <p>By default, <code>UpdateTable</code> always creates an archived version of the table
                *       before updating it. However, if <code>skipArchive</code> is set to true,
                *         <code>UpdateTable</code> does not create the archived version.</p>
                */
            SkipArchive?: boolean;
            /**
                * <p>The transaction ID at which to update the table contents. </p>
                */
            TransactionId?: string;
            /**
                * <p>The version ID at which to update the table contents. </p>
                */
            VersionId?: string;
    }
    export namespace UpdateTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTableRequest) => any;
    }
    export interface UpdateTableResponse {
    }
    export namespace UpdateTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTableResponse) => any;
    }
    /**
        * <p>A structure used to provide information used to update a trigger. This object updates the
        *       previous trigger definition by overwriting it completely.</p>
        */
    export interface TriggerUpdate {
            /**
                * <p>Reserved for future use.</p>
                */
            Name?: string;
            /**
                * <p>A description of this trigger.</p>
                */
            Description?: string;
            /**
                * <p>A <code>cron</code> expression used to specify the schedule (see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based
                *       Schedules for Jobs and Crawlers</a>. For example, to run
                *       something every day at 12:15 UTC, you would specify:
                *       <code>cron(15 12 * * ? *)</code>.</p>
                */
            Schedule?: string;
            /**
                * <p>The actions initiated by this trigger.</p>
                */
            Actions?: Action[];
            /**
                * <p>The predicate of this trigger, which defines when it will fire.</p>
                */
            Predicate?: Predicate;
            /**
                * <p>Batch condition that must be met (specified number of events received or batch time window expired)
                *       before EventBridge event trigger fires.</p>
                */
            EventBatchingCondition?: EventBatchingCondition;
    }
    export namespace TriggerUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TriggerUpdate) => any;
    }
    export interface UpdateTriggerRequest {
            /**
                * <p>The name of the trigger to update.</p>
                */
            Name: string | undefined;
            /**
                * <p>The new values with which to update the trigger.</p>
                */
            TriggerUpdate: TriggerUpdate | undefined;
    }
    export namespace UpdateTriggerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTriggerRequest) => any;
    }
    export interface UpdateTriggerResponse {
            /**
                * <p>The resulting trigger definition.</p>
                */
            Trigger?: Trigger;
    }
    export namespace UpdateTriggerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTriggerResponse) => any;
    }
    export interface UpdateUserDefinedFunctionRequest {
            /**
                * <p>The ID of the Data Catalog where the function to be updated is located. If none is
                *       provided, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the function to be updated is
                *       located.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the function.</p>
                */
            FunctionName: string | undefined;
            /**
                * <p>A <code>FunctionInput</code> object that redefines the function in the Data
                *       Catalog.</p>
                */
            FunctionInput: UserDefinedFunctionInput | undefined;
    }
    export namespace UpdateUserDefinedFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserDefinedFunctionRequest) => any;
    }
    export interface UpdateUserDefinedFunctionResponse {
    }
    export namespace UpdateUserDefinedFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserDefinedFunctionResponse) => any;
    }
    export interface UpdateWorkflowRequest {
            /**
                * <p>Name of the workflow to be updated.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the workflow.</p>
                */
            Description?: string;
            /**
                * <p>A collection of properties to be used as part of each execution of the workflow.</p>
                */
            DefaultRunProperties?: Record<string, string>;
            /**
                * <p>You can use this parameter to prevent unwanted multiple updates to data, to control costs, or in some cases, to prevent exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.</p>
                */
            MaxConcurrentRuns?: number;
    }
    export namespace UpdateWorkflowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkflowRequest) => any;
    }
    export interface UpdateWorkflowResponse {
            /**
                * <p>The name of the workflow which was specified in input.</p>
                */
            Name?: string;
    }
    export namespace UpdateWorkflowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkflowResponse) => any;
    }
    /**
        * <p>Specifies the mapping of data property keys.</p>
        */
    export interface Mapping {
            /**
                * <p>After the apply mapping, what the name of the column should be. Can be the same as <code>FromPath</code>.</p>
                */
            ToKey?: string;
            /**
                * <p>The table or column to be modified.</p>
                */
            FromPath?: string[];
            /**
                * <p>The type of the data to be modified.</p>
                */
            FromType?: string;
            /**
                * <p>The data type that the data is to be modified to.</p>
                */
            ToType?: string;
            /**
                * <p>If true, then the column is removed.</p>
                */
            Dropped?: boolean;
            /**
                * <p>Only applicable to nested data structures. If you want to change the parent structure, but also one of its children, you can fill out this data strucutre. It is also <code>Mapping</code>, but its <code>FromPath</code> will be the parent's <code>FromPath</code> plus the <code>FromPath</code> from this structure.</p>
                *
                *          <p>For the children part, suppose you have the structure:</p>
                *
                * 	        <p>
                *             <code>{
                *   "FromPath": "OuterStructure",
                *   "ToKey": "OuterStructure",
                *   "ToType": "Struct",
                *   "Dropped": false,
                *   "Chidlren": [{
                *        "FromPath": "inner",
                *        "ToKey": "inner",
                *        "ToType": "Double",
                *       "Dropped": false,
                *   }]
                * }</code>
                *          </p>
                *
                *          <p>You can specify a <code>Mapping</code> that looks like:</p>
                *
                * 	        <p>
                *             <code>{
                *   "FromPath": "OuterStructure",
                *   "ToKey": "OuterStructure",
                *   "ToType": "Struct",
                *   "Dropped": false,
                *   "Chidlren": [{
                *        "FromPath": "inner",
                *        "ToKey": "inner",
                *        "ToType": "Double",
                *       "Dropped": false,
                *   }]
                * }</code>
                *          </p>
                */
            Children?: Mapping[];
    }
    export namespace Mapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Mapping) => any;
    }
    /**
        * <p>Specifies a transform that maps data property keys in the data source to data property keys in the data target. You can rename keys, modify the data types for keys, and choose which keys to drop from the dataset.</p>
        */
    export interface ApplyMapping {
            /**
                * <p>The name of the transform node.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data inputs identified by their node names.</p>
                */
            Inputs: string[] | undefined;
            /**
                * <p>Specifies the mapping of data property keys in the data source to data property keys in the data target.</p>
                */
            Mapping: Mapping[] | undefined;
    }
    export namespace ApplyMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyMapping) => any;
    }
    /**
        * <p>
        *             <code>CodeGenConfigurationNode</code> enumerates all valid Node types. One and only one of its member variables can be populated.</p>
        */
    export interface CodeGenConfigurationNode {
            /**
                * <p>Specifies a connector to an Amazon Athena data source.</p>
                */
            AthenaConnectorSource?: AthenaConnectorSource;
            /**
                * <p>Specifies a connector to a JDBC data source.</p>
                */
            JDBCConnectorSource?: JDBCConnectorSource;
            /**
                * <p>Specifies a connector to an Apache Spark data source.</p>
                */
            SparkConnectorSource?: SparkConnectorSource;
            /**
                * <p>Specifies a data store in the Glue Data Catalog.</p>
                */
            CatalogSource?: CatalogSource;
            /**
                * <p>Specifies an Amazon Redshift data store.</p>
                */
            RedshiftSource?: RedshiftSource;
            /**
                * <p>Specifies an Amazon S3 data store in the Glue Data Catalog.</p>
                */
            S3CatalogSource?: S3CatalogSource;
            /**
                * <p>Specifies a command-separated value (CSV) data store stored in Amazon S3.</p>
                */
            S3CsvSource?: S3CsvSource;
            /**
                * <p>Specifies a JSON data store stored in Amazon S3.</p>
                */
            S3JsonSource?: S3JsonSource;
            /**
                * <p>Specifies an Apache Parquet data store stored in Amazon S3.</p>
                */
            S3ParquetSource?: S3ParquetSource;
            /**
                * <p>Specifies a Relational database data source in the Glue Data Catalog.</p>
                */
            RelationalCatalogSource?: RelationalCatalogSource;
            /**
                * <p>Specifies a DynamoDB data source in the Glue Data Catalog.</p>
                */
            DynamoDBCatalogSource?: DynamoDBCatalogSource;
            /**
                * <p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>
                */
            JDBCConnectorTarget?: JDBCConnectorTarget;
            /**
                * <p>Specifies a target that uses an Apache Spark connector.</p>
                */
            SparkConnectorTarget?: SparkConnectorTarget;
            /**
                * <p>Specifies a target that uses a Glue Data Catalog table.</p>
                */
            CatalogTarget?: BasicCatalogTarget;
            /**
                * <p>Specifies a target that uses Amazon Redshift.</p>
                */
            RedshiftTarget?: RedshiftTarget;
            /**
                * <p>Specifies a data target that writes to Amazon S3 using the Glue Data Catalog.</p>
                */
            S3CatalogTarget?: S3CatalogTarget;
            /**
                * <p>Specifies a data target that writes to Amazon S3 in Apache Parquet columnar storage.</p>
                */
            S3GlueParquetTarget?: S3GlueParquetTarget;
            /**
                * <p>Specifies a data target that writes to Amazon S3.</p>
                */
            S3DirectTarget?: S3DirectTarget;
            /**
                * <p>Specifies a transform that maps data property keys in the data source to data property keys in the data target. You can rename keys, modify the data types for keys, and choose which keys to drop from the dataset.</p>
                */
            ApplyMapping?: ApplyMapping;
            /**
                * <p>Specifies a transform that chooses the data property keys that you want to keep.</p>
                */
            SelectFields?: SelectFields;
            /**
                * <p>Specifies a transform that chooses the data property keys that you want to drop.</p>
                */
            DropFields?: DropFields;
            /**
                * <p>Specifies a transform that renames a single data property key.</p>
                */
            RenameField?: RenameField;
            /**
                * <p>Specifies a transform that writes samples of the data to an Amazon S3 bucket.</p>
                */
            Spigot?: Spigot;
            /**
                * <p>Specifies a transform that joins two datasets into one dataset using a comparison phrase on the specified data property keys. You can use inner, outer, left, right, left semi, and left anti joins.</p>
                */
            Join?: Join;
            /**
                * <p>Specifies a transform that splits data property keys into two <code>DynamicFrames</code>. The output is a collection of <code>DynamicFrames</code>: one with selected data property keys, and one with the remaining data property keys.</p>
                */
            SplitFields?: SplitFields;
            /**
                * <p>Specifies a transform that chooses one <code>DynamicFrame</code> from a collection of <code>DynamicFrames</code>. The output is the selected <code>DynamicFrame</code>
                *          </p>
                */
            SelectFromCollection?: SelectFromCollection;
            /**
                * <p>Specifies a transform that locates records in the dataset that have missing values and adds a new field with a value determined by imputation. The input data set is used to train the machine learning model that determines what the missing value should be.</p>
                */
            FillMissingValues?: FillMissingValues;
            /**
                * <p>Specifies a transform that splits a dataset into two, based on a filter condition.</p>
                */
            Filter?: Filter;
            /**
                * <p>Specifies a transform that uses custom code you provide to perform the data transformation. The output is a collection of DynamicFrames.</p>
                */
            CustomCode?: CustomCode;
            /**
                * <p>Specifies a transform where you enter a SQL query using Spark SQL syntax to transform the data. The output is a single <code>DynamicFrame</code>.</p>
                */
            SparkSQL?: SparkSQL;
            /**
                * <p>Specifies a direct Amazon Kinesis data source.</p>
                */
            DirectKinesisSource?: DirectKinesisSource;
            /**
                * <p>Specifies an Apache Kafka data store.</p>
                */
            DirectKafkaSource?: DirectKafkaSource;
            /**
                * <p>Specifies a Kinesis data source in the Glue Data Catalog.</p>
                */
            CatalogKinesisSource?: CatalogKinesisSource;
            /**
                * <p>Specifies an Apache Kafka data store in the Data Catalog.</p>
                */
            CatalogKafkaSource?: CatalogKafkaSource;
            /**
                * <p>Specifies a transform that removes columns from the dataset if all values in the column are 'null'. By default, Glue Studio will recognize null objects, but some values such as empty strings, strings that are "null", -1 integers or other placeholders such as zeros, are not automatically recognized as nulls.</p>
                */
            DropNullFields?: DropNullFields;
            /**
                * <p>Specifies a transform that merges a <code>DynamicFrame</code> with a staging <code>DynamicFrame</code> based on the specified primary keys to identify records. Duplicate records (records with the same primary keys) are not de-duplicated. </p>
                */
            Merge?: Merge;
            /**
                * <p>Specifies a transform that combines the rows from two or more datasets into a single result.</p>
                */
            Union?: Union;
            /**
                * <p>Specifies a transform that identifies, removes or masks PII data.</p>
                */
            PIIDetection?: PIIDetection;
            /**
                * <p>Specifies a transform that groups rows by chosen fields and computes the aggregated value by specified function.</p>
                */
            Aggregate?: Aggregate;
            /**
                * <p>Specifies a transform that removes rows of repeating data from a data set.</p>
                */
            DropDuplicates?: DropDuplicates;
            /**
                * <p>Specifies a data target that writes to a goverened catalog.</p>
                */
            GovernedCatalogTarget?: GovernedCatalogTarget;
            /**
                * <p>Specifies a data source in a goverened Data Catalog.</p>
                */
            GovernedCatalogSource?: GovernedCatalogSource;
            /**
                * <p>Specifies a Microsoft SQL server data source in the Glue Data Catalog.</p>
                */
            MicrosoftSQLServerCatalogSource?: MicrosoftSQLServerCatalogSource;
            /**
                * <p>Specifies a MySQL data source in the Glue Data Catalog.</p>
                */
            MySQLCatalogSource?: MySQLCatalogSource;
            /**
                * <p>Specifies an Oracle data source in the Glue Data Catalog.</p>
                */
            OracleSQLCatalogSource?: OracleSQLCatalogSource;
            /**
                * <p>Specifies a PostgresSQL data source in the Glue Data Catalog.</p>
                */
            PostgreSQLCatalogSource?: PostgreSQLCatalogSource;
            /**
                * <p>Specifies a target that uses Microsoft SQL.</p>
                */
            MicrosoftSQLServerCatalogTarget?: MicrosoftSQLServerCatalogTarget;
            /**
                * <p>Specifies a target that uses MySQL.</p>
                */
            MySQLCatalogTarget?: MySQLCatalogTarget;
            /**
                * <p>Specifies a target that uses Oracle SQL.</p>
                */
            OracleSQLCatalogTarget?: OracleSQLCatalogTarget;
            /**
                * <p>Specifies a target that uses Postgres SQL.</p>
                */
            PostgreSQLCatalogTarget?: PostgreSQLCatalogTarget;
    }
    export namespace CodeGenConfigurationNode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeGenConfigurationNode) => any;
    }
    export interface CreateJobRequest {
            /**
                * <p>The name you assign to this job definition. It must be unique in your account.</p>
                */
            Name: string | undefined;
            /**
                * <p>Description of the job being defined.</p>
                */
            Description?: string;
            /**
                * <p>This field is reserved for future use.</p>
                */
            LogUri?: string;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
                */
            Role: string | undefined;
            /**
                * <p>An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed
                *       for this job.</p>
                */
            ExecutionProperty?: ExecutionProperty;
            /**
                * <p>The <code>JobCommand</code> that runs this job.</p>
                */
            Command: JobCommand | undefined;
            /**
                * <p>The default arguments for this job.</p>
                *          <p>You can specify arguments here that your own job-execution script
                *       consumes, as well as arguments that Glue itself consumes.</p>
                *          <p>Job arguments may be logged. Do not pass plaintext secrets as arguments.
                *     Retrieve secrets from a Glue Connection, Secrets Manager or
                *     other secret management mechanism if you intend to keep them within the Job.
                *     </p>
                *          <p>For information about how to specify and consume your own Job arguments, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling Glue APIs in Python</a> topic in the developer guide.</p>
                *
                *          <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by Glue</a> topic in the developer guide.</p>
                */
            DefaultArguments?: Record<string, string>;
            /**
                * <p>Non-overridable arguments for this job, specified as name-value pairs.</p>
                */
            NonOverridableArguments?: Record<string, string>;
            /**
                * <p>The connections used for this job.</p>
                */
            Connections?: ConnectionsList;
            /**
                * <p>The maximum number of times to retry this job if it fails.</p>
                */
            MaxRetries?: number;
            /**
                * @deprecated
                *
                * <p>This parameter is deprecated. Use <code>MaxCapacity</code> instead.</p>
                *
                *          <p>The number of Glue data processing units (DPUs) to allocate to this Job. You can
                *       allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing
                *       power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information,
                *       see the <a href="https://aws.amazon.com/glue/pricing/">Glue pricing
                *       page</a>.</p>
                */
            AllocatedCapacity?: number;
            /**
                * <p>The job timeout in minutes.  This is the maximum time that a job run
                *       can consume resources before it is terminated and enters <code>TIMEOUT</code>
                *       status. The default is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure
                *        of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
                *        For more information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue
                *          pricing page</a>.</p>
                *
                * 	        <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p>
                *
                *          <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are
                *       running a Python shell job or an Apache Spark ETL job:</p>
                *          <ul>
                *             <li>
                *                <p>When you specify a Python shell job (<code>JobCommand.Name</code>="pythonshell"), you can
                *           allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p>
                *             </li>
                *             <li>
                *                <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>="glueetl") or Apache
                *          Spark streaming ETL job (<code>JobCommand.Name</code>="gluestreaming"), you can allocate a minimum of 2 DPUs.
                *          The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p>
                *             </li>
                *          </ul>
                *          <p>For Glue version 2.0 jobs, you cannot instead specify a <code>Maximum capacity</code>. Instead, you should specify a <code>Worker type</code> and the <code>Number of workers</code>.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this
                *       job.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>The tags to use with this job. You may use tags to limit access to the job. For more information about tags in Glue, see <a href="https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html">Amazon Web Services Tags in Glue</a> in the developer guide.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Specifies configuration properties of a job notification.</p>
                */
            NotificationProperty?: NotificationProperty;
            /**
                * <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p>
                *
                *          <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
                *
                * 	        <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The representation of a directed acyclic graph on which both the Glue Studio visual component and Glue Studio code generation is based.</p>
                */
            CodeGenConfigurationNodes?: Record<string, CodeGenConfigurationNode>;
    }
    export namespace CreateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobRequest) => any;
    }
    /**
        * <p>Specifies a job definition.</p>
        */
    export interface Job {
            /**
                * <p>The name you assign to this job definition.</p>
                */
            Name?: string;
            /**
                * <p>A description of the job.</p>
                */
            Description?: string;
            /**
                * <p>This field is reserved for future use.</p>
                */
            LogUri?: string;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role associated with this job.</p>
                */
            Role?: string;
            /**
                * <p>The time and date that this job definition was created.</p>
                */
            CreatedOn?: Date;
            /**
                * <p>The last point in time when this job definition was modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed
                *       for this job.</p>
                */
            ExecutionProperty?: ExecutionProperty;
            /**
                * <p>The <code>JobCommand</code> that runs this job.</p>
                */
            Command?: JobCommand;
            /**
                * <p>The default arguments for this job, specified as name-value pairs.</p>
                *          <p>You can specify arguments here that your own job-execution script
                *       consumes, as well as arguments that Glue itself consumes.</p>
                *          <p>For information about how to specify and consume your own Job arguments, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling Glue APIs in Python</a> topic in the developer guide.</p>
                *          <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by Glue</a> topic in the developer guide.</p>
                */
            DefaultArguments?: Record<string, string>;
            /**
                * <p>Non-overridable arguments for this job, specified as name-value pairs.</p>
                */
            NonOverridableArguments?: Record<string, string>;
            /**
                * <p>The connections used for this job.</p>
                */
            Connections?: ConnectionsList;
            /**
                * <p>The maximum number of times to retry this job after a JobRun fails.</p>
                */
            MaxRetries?: number;
            /**
                * @deprecated
                *
                * <p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p>
                *
                *          <p>The number of Glue data processing units (DPUs) allocated to runs of this job. You can
                *       allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing
                *       power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information,
                *       see the <a href="https://aws.amazon.com/glue/pricing/">Glue pricing
                *       page</a>.</p>
                * 	        <p></p>
                */
            AllocatedCapacity?: number;
            /**
                * <p>The job timeout in minutes.  This is the maximum time that a job run
                *       can consume resources before it is terminated and enters <code>TIMEOUT</code>
                *       status. The default is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure
                *       of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.
                *       For more information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue
                *       pricing page</a>.</p>
                *
                * 	        <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p>
                *
                * 	        <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are
                *       running a Python shell job, an Apache Spark ETL job, or an Apache Spark streaming ETL
                *       job:</p>
                *         <ul>
                *             <li>
                *                <p>When you specify a Python shell job (<code>JobCommand.Name</code>="pythonshell"), you can
                *           allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p>
                *             </li>
                *             <li>
                *                <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>="glueetl") or Apache
                *             Spark streaming ETL job (<code>JobCommand.Name</code>="gluestreaming"), you can allocate a minimum of 2 DPUs.
                *             The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p>
                *             </li>
                *          </ul>
                *          <p>For Glue version 2.0 jobs, you cannot instead specify a <code>Maximum capacity</code>. Instead, you should specify a <code>Worker type</code> and the <code>Number of workers</code>.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this
                *       job.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>Specifies configuration properties of a job notification.</p>
                */
            NotificationProperty?: NotificationProperty;
            /**
                * <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p>
                *
                *          <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
                *
                * 	        <p>Jobs that are created without specifying a Glue version default to Glue 0.9.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The representation of a directed acyclic graph on which both the Glue Studio visual component and Glue Studio code generation is based.</p>
                */
            CodeGenConfigurationNodes?: Record<string, CodeGenConfigurationNode>;
    }
    export namespace Job {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Job) => any;
    }
    /**
        * <p>Specifies information used to update an existing job definition. The previous job
        *       definition is completely overwritten by this information.</p>
        */
    export interface JobUpdate {
            /**
                * <p>Description of the job being defined.</p>
                */
            Description?: string;
            /**
                * <p>This field is reserved for future use.</p>
                */
            LogUri?: string;
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role associated with this job
                *       (required).</p>
                */
            Role?: string;
            /**
                * <p>An <code>ExecutionProperty</code> specifying the maximum number of concurrent runs allowed
                *       for this job.</p>
                */
            ExecutionProperty?: ExecutionProperty;
            /**
                * <p>The <code>JobCommand</code> that runs this job (required).</p>
                */
            Command?: JobCommand;
            /**
                * <p>The default arguments for this job.</p>
                *          <p>You can specify arguments here that your own job-execution script
                *       consumes, as well as arguments that Glue itself consumes.</p>
                *          <p>For information about how to specify and consume your own Job arguments, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling Glue APIs in Python</a> topic in the developer guide.</p>
                *          <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by Glue</a> topic in the developer guide.</p>
                */
            DefaultArguments?: Record<string, string>;
            /**
                * <p>Non-overridable arguments for this job, specified as name-value pairs.</p>
                */
            NonOverridableArguments?: Record<string, string>;
            /**
                * <p>The connections used for this job.</p>
                */
            Connections?: ConnectionsList;
            /**
                * <p>The maximum number of times to retry this job if it fails.</p>
                */
            MaxRetries?: number;
            /**
                * @deprecated
                *
                * <p>This field is deprecated. Use <code>MaxCapacity</code> instead.</p>
                *
                *          <p>The number of Glue data processing units (DPUs) to allocate to this job. You can
                *       allocate a minimum of 2 DPUs; the default is 10. A DPU is a relative measure of processing
                *       power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information,
                *       see the <a href="https://aws.amazon.com/glue/pricing/">Glue pricing
                *       page</a>.</p>
                */
            AllocatedCapacity?: number;
            /**
                * <p>The job timeout in minutes.  This is the maximum time that a job run
                *       can consume resources before it is terminated and enters <code>TIMEOUT</code>
                *       status. The default is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>For Glue version 1.0 or earlier jobs, using the standard worker type, the number of Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure
                *      of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue pricing page</a>.</p>
                *
                * 	        <p>Do not set <code>Max Capacity</code> if using <code>WorkerType</code> and <code>NumberOfWorkers</code>.</p>
                *
                *          <p>The value that can be allocated for <code>MaxCapacity</code> depends on whether you are
                *       running a Python shell job or an Apache Spark ETL job:</p>
                *
                *          <ul>
                *             <li>
                *                <p>When you specify a Python shell job (<code>JobCommand.Name</code>="pythonshell"), you can
                *           allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.</p>
                *             </li>
                *             <li>
                *                <p>When you specify an Apache Spark ETL job (<code>JobCommand.Name</code>="glueetl") or Apache
                *            Spark streaming ETL job (<code>JobCommand.Name</code>="gluestreaming"), you can allocate a minimum of 2 DPUs.
                *            The default is 10 DPUs. This job type cannot have a fractional DPU allocation.</p>
                *             </li>
                *          </ul>
                * 	        <p>For Glue version 2.0 jobs, you cannot instead specify a <code>Maximum capacity</code>. Instead, you should specify a <code>Worker type</code> and the <code>Number of workers</code>.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The type of predefined worker that is allocated when a job runs. Accepts a value of Standard, G.1X, G.2X, or G.025X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker maps to 1 DPU (4 vCPU, 16 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker maps to 2 DPU (8 vCPU, 32 GB of memory, 128 GB disk), and provides 1 executor per worker. We recommend this worker type for memory-intensive jobs.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.025X</code> worker type, each worker maps to 0.25 DPU (2 vCPU, 4 GB of memory, 64 GB disk), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for Glue version 3.0 streaming jobs.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when a job runs.</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The name of the <code>SecurityConfiguration</code> structure to be used with this
                *       job.</p>
                */
            SecurityConfiguration?: string;
            /**
                * <p>Specifies the configuration properties of a job notification.</p>
                */
            NotificationProperty?: NotificationProperty;
            /**
                * <p>Glue version determines the versions of Apache Spark and Python that Glue supports. The Python version indicates the version supported for jobs of type Spark. </p>
                *
                *          <p>For more information about the available Glue versions and corresponding Spark and Python versions, see <a href="https://docs.aws.amazon.com/glue/latest/dg/add-job.html">Glue version</a> in the developer guide.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The representation of a directed acyclic graph on which both the Glue Studio visual component and Glue Studio code generation is based.</p>
                */
            CodeGenConfigurationNodes?: Record<string, CodeGenConfigurationNode>;
    }
    export namespace JobUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobUpdate) => any;
    }
    export interface GetJobResponse {
            /**
                * <p>The requested job definition.</p>
                */
            Job?: Job;
    }
    export namespace GetJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobResponse) => any;
    }
    export interface UpdateJobRequest {
            /**
                * <p>The name of the job definition to update.</p>
                */
            JobName: string | undefined;
            /**
                * <p>Specifies the values with which to update the job definition. Unspecified configuration is removed or reset to default values.</p>
                */
            JobUpdate: JobUpdate | undefined;
    }
    export namespace UpdateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateJobRequest) => any;
    }
    export interface BatchGetJobsResponse {
            /**
                * <p>A list of job definitions.</p>
                */
            Jobs?: Job[];
            /**
                * <p>A list of names of jobs not found.</p>
                */
            JobsNotFound?: string[];
    }
    export namespace BatchGetJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetJobsResponse) => any;
    }
    export interface GetJobsResponse {
            /**
                * <p>A list of job definitions.</p>
                */
            Jobs?: Job[];
            /**
                * <p>A continuation token, if not all job definitions have yet been returned.</p>
                */
            NextToken?: string;
    }
    export namespace GetJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobsResponse) => any;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { GlueServiceException as __BaseException } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/GlueServiceException";
    import { AuditContext, Blueprint, CodeGenEdge, CodeGenNode, CodeGenNodeArg, Column, Compatibility, ConnectionType, Crawler, CsvHeaderOption, CustomEntityType, DatabaseIdentifier, DataFormat, DevEndpoint, EncryptionConfiguration, ErrorDetail, GlueTable, JobRun, Language, Partition, PartitionValueList, PhysicalConnectionRequirements, PrincipalPermissions, PrincipalType, RegistryId, ResourceUri, SchemaId, SchemaStatus, SchemaVersionStatus, Session, StorageDescriptor, TableIdentifier, TaskStatusType, TransformEncryption, TransformParameters, TransformType, Trigger, WorkerType, Workflow, WorkflowRun } from "@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/models_0";
    export interface DeleteClassifierResponse {
    }
    export namespace DeleteClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteClassifierResponse) => any;
    }
    export interface DeleteColumnStatisticsForPartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of partition values identifying the partition.</p>
                */
            PartitionValues: string[] | undefined;
            /**
                * <p>Name of the column.</p>
                */
            ColumnName: string | undefined;
    }
    export namespace DeleteColumnStatisticsForPartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteColumnStatisticsForPartitionRequest) => any;
    }
    export interface DeleteColumnStatisticsForPartitionResponse {
    }
    export namespace DeleteColumnStatisticsForPartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteColumnStatisticsForPartitionResponse) => any;
    }
    export interface DeleteColumnStatisticsForTableRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The name of the column.</p>
                */
            ColumnName: string | undefined;
    }
    export namespace DeleteColumnStatisticsForTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteColumnStatisticsForTableRequest) => any;
    }
    export interface DeleteColumnStatisticsForTableResponse {
    }
    export namespace DeleteColumnStatisticsForTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteColumnStatisticsForTableResponse) => any;
    }
    export interface DeleteConnectionRequest {
            /**
                * <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the connection to delete.</p>
                */
            ConnectionName: string | undefined;
    }
    export namespace DeleteConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionRequest) => any;
    }
    export interface DeleteConnectionResponse {
    }
    export namespace DeleteConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionResponse) => any;
    }
    /**
        * <p>The operation cannot be performed because the crawler is already running.</p>
        */
    export class CrawlerRunningException extends __BaseException {
            readonly name: "CrawlerRunningException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CrawlerRunningException, __BaseException>);
    }
    export interface DeleteCrawlerRequest {
            /**
                * <p>The name of the crawler to remove.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteCrawlerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCrawlerRequest) => any;
    }
    export interface DeleteCrawlerResponse {
    }
    export namespace DeleteCrawlerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCrawlerResponse) => any;
    }
    /**
        * <p>The specified scheduler is transitioning.</p>
        */
    export class SchedulerTransitioningException extends __BaseException {
            readonly name: "SchedulerTransitioningException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SchedulerTransitioningException, __BaseException>);
    }
    export interface DeleteCustomEntityTypeRequest {
            /**
                * <p>The name of the custom pattern that you want to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteCustomEntityTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomEntityTypeRequest) => any;
    }
    export interface DeleteCustomEntityTypeResponse {
            /**
                * <p>The name of the custom pattern you deleted.</p>
                */
            Name?: string;
    }
    export namespace DeleteCustomEntityTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomEntityTypeResponse) => any;
    }
    export interface DeleteDatabaseRequest {
            /**
                * <p>The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the database to delete. For Hive compatibility, this must be all
                *       lowercase.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatabaseRequest) => any;
    }
    export interface DeleteDatabaseResponse {
    }
    export namespace DeleteDatabaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatabaseResponse) => any;
    }
    export interface DeleteDevEndpointRequest {
            /**
                * <p>The name of the <code>DevEndpoint</code>.</p>
                */
            EndpointName: string | undefined;
    }
    export namespace DeleteDevEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDevEndpointRequest) => any;
    }
    export interface DeleteDevEndpointResponse {
    }
    export namespace DeleteDevEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDevEndpointResponse) => any;
    }
    export interface DeleteJobRequest {
            /**
                * <p>The name of the job definition to delete.</p>
                */
            JobName: string | undefined;
    }
    export namespace DeleteJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteJobRequest) => any;
    }
    export interface DeleteJobResponse {
            /**
                * <p>The name of the job definition that was deleted.</p>
                */
            JobName?: string;
    }
    export namespace DeleteJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteJobResponse) => any;
    }
    export interface DeleteMLTransformRequest {
            /**
                * <p>The unique identifier of the transform to delete.</p>
                */
            TransformId: string | undefined;
    }
    export namespace DeleteMLTransformRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMLTransformRequest) => any;
    }
    export interface DeleteMLTransformResponse {
            /**
                * <p>The unique identifier of the transform that was deleted.</p>
                */
            TransformId?: string;
    }
    export namespace DeleteMLTransformResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMLTransformResponse) => any;
    }
    export interface DeletePartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partition to be deleted resides. If none is provided,
                *       the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database in which the table in question
                *       resides.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table that contains the partition to be deleted.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The values that define the partition.</p>
                */
            PartitionValues: string[] | undefined;
    }
    export namespace DeletePartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePartitionRequest) => any;
    }
    export interface DeletePartitionResponse {
    }
    export namespace DeletePartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePartitionResponse) => any;
    }
    /**
        * <p>The <code>CreatePartitions</code> API was called on a table that has indexes enabled.	</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface DeletePartitionIndexRequest {
            /**
                * <p>The catalog ID where the table resides.</p>
                */
            CatalogId?: string;
            /**
                * <p>Specifies the name of a database from which you want to delete a partition index.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>Specifies the name of a table from which you want to delete a partition index.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The name of the partition index to be deleted.</p>
                */
            IndexName: string | undefined;
    }
    export namespace DeletePartitionIndexRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePartitionIndexRequest) => any;
    }
    export interface DeletePartitionIndexResponse {
    }
    export namespace DeletePartitionIndexResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePartitionIndexResponse) => any;
    }
    export interface DeleteRegistryInput {
            /**
                * <p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
                */
            RegistryId: RegistryId | undefined;
    }
    export namespace DeleteRegistryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRegistryInput) => any;
    }
    export enum RegistryStatus {
            AVAILABLE = "AVAILABLE",
            DELETING = "DELETING"
    }
    export interface DeleteRegistryResponse {
            /**
                * <p>The name of the registry being deleted.</p>
                */
            RegistryName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the registry being deleted.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The status of the registry. A successful operation will return the <code>Deleting</code> status.</p>
                */
            Status?: RegistryStatus | string;
    }
    export namespace DeleteRegistryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRegistryResponse) => any;
    }
    /**
        * <p>A specified condition was not satisfied.</p>
        */
    export class ConditionCheckFailureException extends __BaseException {
            readonly name: "ConditionCheckFailureException";
            readonly $fault: "client";
            /**
                * <p>A message describing the problem.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConditionCheckFailureException, __BaseException>);
    }
    export interface DeleteResourcePolicyRequest {
            /**
                * <p>The hash value returned when this policy was set.</p>
                */
            PolicyHashCondition?: string;
            /**
                * <p>The ARN of the Glue resource for the resource policy to be deleted.</p>
                */
            ResourceArn?: string;
    }
    export namespace DeleteResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyRequest) => any;
    }
    export interface DeleteResourcePolicyResponse {
    }
    export namespace DeleteResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyResponse) => any;
    }
    export interface DeleteSchemaInput {
            /**
                * <p>This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
                */
            SchemaId: SchemaId | undefined;
    }
    export namespace DeleteSchemaInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaInput) => any;
    }
    export interface DeleteSchemaResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the schema being deleted.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name of the schema being deleted.</p>
                */
            SchemaName?: string;
            /**
                * <p>The status of the schema.</p>
                */
            Status?: SchemaStatus | string;
    }
    export namespace DeleteSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaResponse) => any;
    }
    export interface DeleteSchemaVersionsInput {
            /**
                * <p>This is a wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
                */
            SchemaId: SchemaId | undefined;
            /**
                * <p>A version range may be supplied which may be of the format:</p>
                * 	        <ul>
                *             <li>
                *                <p>a single version number, 5</p>
                *             </li>
                *             <li>
                *                <p>a range, 5-8 : deletes versions 5, 6, 7, 8</p>
                *             </li>
                *          </ul>
                */
            Versions: string | undefined;
    }
    export namespace DeleteSchemaVersionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaVersionsInput) => any;
    }
    /**
        * <p>An object containing error details.</p>
        */
    export interface ErrorDetails {
            /**
                * <p>The error code for an error.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message for an error.</p>
                */
            ErrorMessage?: string;
    }
    export namespace ErrorDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetails) => any;
    }
    /**
        * <p>An object that contains the error details for an operation on a schema version.</p>
        */
    export interface SchemaVersionErrorItem {
            /**
                * <p>The version number of the schema.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The details of the error for the schema version.</p>
                */
            ErrorDetails?: ErrorDetails;
    }
    export namespace SchemaVersionErrorItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaVersionErrorItem) => any;
    }
    export interface DeleteSchemaVersionsResponse {
            /**
                * <p>A list of <code>SchemaVersionErrorItem</code> objects, each containing an error and schema version.</p>
                */
            SchemaVersionErrors?: SchemaVersionErrorItem[];
    }
    export namespace DeleteSchemaVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSchemaVersionsResponse) => any;
    }
    export interface DeleteSecurityConfigurationRequest {
            /**
                * <p>The name of the security configuration to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteSecurityConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSecurityConfigurationRequest) => any;
    }
    export interface DeleteSecurityConfigurationResponse {
    }
    export namespace DeleteSecurityConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSecurityConfigurationResponse) => any;
    }
    export interface DeleteSessionRequest {
            /**
                * <p>The ID of the session to be deleted.</p>
                */
            Id: string | undefined;
            /**
                * <p>The name of the origin of the delete session request.</p>
                */
            RequestOrigin?: string;
    }
    export namespace DeleteSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSessionRequest) => any;
    }
    export interface DeleteSessionResponse {
            /**
                * <p>Returns the ID of the deleted session.</p>
                */
            Id?: string;
    }
    export namespace DeleteSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSessionResponse) => any;
    }
    export interface DeleteTableRequest {
            /**
                * <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database in which the table resides. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table to be deleted. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            Name: string | undefined;
            /**
                * <p>The transaction ID at which to delete the table contents.</p>
                */
            TransactionId?: string;
    }
    export namespace DeleteTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTableRequest) => any;
    }
    export interface DeleteTableResponse {
    }
    export namespace DeleteTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTableResponse) => any;
    }
    export interface DeleteTableVersionRequest {
            /**
                * <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database in the catalog in which the table resides. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table. For Hive compatibility,
                *       this name is entirely lowercase.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The ID of the table version to be deleted. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1.</p>
                */
            VersionId: string | undefined;
    }
    export namespace DeleteTableVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTableVersionRequest) => any;
    }
    export interface DeleteTableVersionResponse {
    }
    export namespace DeleteTableVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTableVersionResponse) => any;
    }
    export interface DeleteTriggerRequest {
            /**
                * <p>The name of the trigger to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteTriggerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTriggerRequest) => any;
    }
    export interface DeleteTriggerResponse {
            /**
                * <p>The name of the trigger that was deleted.</p>
                */
            Name?: string;
    }
    export namespace DeleteTriggerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTriggerResponse) => any;
    }
    export interface DeleteUserDefinedFunctionRequest {
            /**
                * <p>The ID of the Data Catalog where the function to be deleted is
                *       located. If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the function is located.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the function definition to be deleted.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace DeleteUserDefinedFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserDefinedFunctionRequest) => any;
    }
    export interface DeleteUserDefinedFunctionResponse {
    }
    export namespace DeleteUserDefinedFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserDefinedFunctionResponse) => any;
    }
    export interface DeleteWorkflowRequest {
            /**
                * <p>Name of the workflow to be deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteWorkflowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkflowRequest) => any;
    }
    export interface DeleteWorkflowResponse {
            /**
                * <p>Name of the workflow specified in input.</p>
                */
            Name?: string;
    }
    export namespace DeleteWorkflowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkflowResponse) => any;
    }
    export interface GetBlueprintRequest {
            /**
                * <p>The name of the blueprint.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether or not to include the blueprint in the response.</p>
                */
            IncludeBlueprint?: boolean;
            /**
                * <p>Specifies whether or not to include the parameter specification.</p>
                */
            IncludeParameterSpec?: boolean;
    }
    export namespace GetBlueprintRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintRequest) => any;
    }
    export interface GetBlueprintResponse {
            /**
                * <p>Returns a <code>Blueprint</code> object.</p>
                */
            Blueprint?: Blueprint;
    }
    export namespace GetBlueprintResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintResponse) => any;
    }
    export interface GetBlueprintRunRequest {
            /**
                * <p>The name of the blueprint.</p>
                */
            BlueprintName: string | undefined;
            /**
                * <p>The run ID for the blueprint run you want to retrieve.</p>
                */
            RunId: string | undefined;
    }
    export namespace GetBlueprintRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintRunRequest) => any;
    }
    export enum BlueprintRunState {
            FAILED = "FAILED",
            ROLLING_BACK = "ROLLING_BACK",
            RUNNING = "RUNNING",
            SUCCEEDED = "SUCCEEDED"
    }
    /**
        * <p>The details of a blueprint run.</p>
        */
    export interface BlueprintRun {
            /**
                * <p>The name of the blueprint.</p>
                */
            BlueprintName?: string;
            /**
                * <p>The run ID for this blueprint run.</p>
                */
            RunId?: string;
            /**
                * <p>The name of a workflow that is created as a result of a successful blueprint run. If a blueprint run has an error, there will not be a workflow created.</p>
                */
            WorkflowName?: string;
            /**
                * <p>The state of the blueprint run. Possible values are:</p>
                *
                * 	        <ul>
                *             <li>
                *                <p>Running — The blueprint run is in progress.</p>
                *             </li>
                *             <li>
                *                <p>Succeeded — The blueprint run completed successfully.</p>
                *             </li>
                *             <li>
                *                <p>Failed — The blueprint run failed and rollback is complete.</p>
                *             </li>
                *             <li>
                *                <p>Rolling Back — The blueprint run failed and rollback is in progress.</p>
                *             </li>
                *          </ul>
                */
            State?: BlueprintRunState | string;
            /**
                * <p>The date and time that the blueprint run started.</p>
                */
            StartedOn?: Date;
            /**
                * <p>The date and time that the blueprint run completed.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>Indicates any errors that are seen while running the blueprint.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>If there are any errors while creating the entities of a workflow, we try to roll back the created entities until that point and delete them. This attribute indicates the errors seen while trying to delete the entities that are created.</p>
                */
            RollbackErrorMessage?: string;
            /**
                * <p>The blueprint parameters as a string. You will have to provide a value for each key that is required from the parameter spec that is defined in the <code>Blueprint$ParameterSpec</code>.</p>
                */
            Parameters?: string;
            /**
                * <p>The role ARN. This role will be assumed by the Glue service and will be used to create the workflow and other entities of a workflow.</p>
                */
            RoleArn?: string;
    }
    export namespace BlueprintRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BlueprintRun) => any;
    }
    export interface GetBlueprintRunResponse {
            /**
                * <p>Returns a <code>BlueprintRun</code> object.</p>
                */
            BlueprintRun?: BlueprintRun;
    }
    export namespace GetBlueprintRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintRunResponse) => any;
    }
    export interface GetBlueprintRunsRequest {
            /**
                * <p>The name of the blueprint.</p>
                */
            BlueprintName: string | undefined;
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
    }
    export namespace GetBlueprintRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintRunsRequest) => any;
    }
    export interface GetBlueprintRunsResponse {
            /**
                * <p>Returns a list of <code>BlueprintRun</code> objects.</p>
                */
            BlueprintRuns?: BlueprintRun[];
            /**
                * <p>A continuation token, if not all blueprint runs have been returned.</p>
                */
            NextToken?: string;
    }
    export namespace GetBlueprintRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintRunsResponse) => any;
    }
    export interface GetCatalogImportStatusRequest {
            /**
                * <p>The ID of the catalog to migrate. Currently, this should be the Amazon Web Services account ID.</p>
                */
            CatalogId?: string;
    }
    export namespace GetCatalogImportStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCatalogImportStatusRequest) => any;
    }
    /**
        * <p>A structure containing migration status information.</p>
        */
    export interface CatalogImportStatus {
            /**
                * <p>
                *             <code>True</code> if the migration has completed, or <code>False</code> otherwise.</p>
                */
            ImportCompleted?: boolean;
            /**
                * <p>The time that the migration was started.</p>
                */
            ImportTime?: Date;
            /**
                * <p>The name of the person who initiated the migration.</p>
                */
            ImportedBy?: string;
    }
    export namespace CatalogImportStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogImportStatus) => any;
    }
    export interface GetCatalogImportStatusResponse {
            /**
                * <p>The status of the specified catalog migration.</p>
                */
            ImportStatus?: CatalogImportStatus;
    }
    export namespace GetCatalogImportStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCatalogImportStatusResponse) => any;
    }
    export interface GetClassifierRequest {
            /**
                * <p>Name of the classifier to retrieve.</p>
                */
            Name: string | undefined;
    }
    export namespace GetClassifierRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetClassifierRequest) => any;
    }
    /**
        * <p>A classifier for custom <code>CSV</code> content.</p>
        */
    export interface CsvClassifier {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>The time that this classifier was registered.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that this classifier was last updated.</p>
                */
            LastUpdated?: Date;
            /**
                * <p>The version of this classifier.</p>
                */
            Version?: number;
            /**
                * <p>A custom symbol to denote what separates each column entry in the row.</p>
                */
            Delimiter?: string;
            /**
                * <p>A custom symbol to denote what combines content into a single column value. It must be
                *       different from the column delimiter.</p>
                */
            QuoteSymbol?: string;
            /**
                * <p>Indicates whether the CSV file contains a header.</p>
                */
            ContainsHeader?: CsvHeaderOption | string;
            /**
                * <p>A list of strings representing column names.</p>
                */
            Header?: string[];
            /**
                * <p>Specifies not to trim values before identifying the type of column values. The default
                *       value is <code>true</code>.</p>
                */
            DisableValueTrimming?: boolean;
            /**
                * <p>Enables the processing of files that contain only one column.</p>
                */
            AllowSingleColumn?: boolean;
    }
    export namespace CsvClassifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CsvClassifier) => any;
    }
    /**
        * <p>A classifier that uses <code>grok</code> patterns.</p>
        */
    export interface GrokClassifier {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and
                *       so on.</p>
                */
            Classification: string | undefined;
            /**
                * <p>The time that this classifier was registered.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that this classifier was last updated.</p>
                */
            LastUpdated?: Date;
            /**
                * <p>The version of this classifier.</p>
                */
            Version?: number;
            /**
                * <p>The grok pattern applied to a data store by this classifier.
                *        For more information, see built-in patterns in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html">Writing Custom Classifiers</a>.</p>
                */
            GrokPattern: string | undefined;
            /**
                * <p>Optional custom grok patterns defined by this classifier.
                *       For more information, see custom patterns in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html">Writing Custom Classifiers</a>.</p>
                */
            CustomPatterns?: string;
    }
    export namespace GrokClassifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GrokClassifier) => any;
    }
    /**
        * <p>A classifier for <code>JSON</code> content.</p>
        */
    export interface JsonClassifier {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>The time that this classifier was registered.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that this classifier was last updated.</p>
                */
            LastUpdated?: Date;
            /**
                * <p>The version of this classifier.</p>
                */
            Version?: number;
            /**
                * <p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify.
                *       Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.</p>
                */
            JsonPath: string | undefined;
    }
    export namespace JsonClassifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JsonClassifier) => any;
    }
    /**
        * <p>A classifier for <code>XML</code> content.</p>
        */
    export interface XMLClassifier {
            /**
                * <p>The name of the classifier.</p>
                */
            Name: string | undefined;
            /**
                * <p>An identifier of the data format that the classifier matches.</p>
                */
            Classification: string | undefined;
            /**
                * <p>The time that this classifier was registered.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time that this classifier was last updated.</p>
                */
            LastUpdated?: Date;
            /**
                * <p>The version of this classifier.</p>
                */
            Version?: number;
            /**
                * <p>The XML tag designating the element that contains each record in an XML document being
                *       parsed. This can't identify a self-closing element (closed by <code>/></code>). An empty
                *       row element that contains only attributes can be parsed as long as it ends with a closing tag
                *       (for example, <code><row item_a="A" item_b="B"></row></code> is okay, but
                *         <code><row item_a="A" item_b="B" /></code> is not).</p>
                */
            RowTag?: string;
    }
    export namespace XMLClassifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: XMLClassifier) => any;
    }
    /**
        * <p>Classifiers are triggered during a crawl task. A classifier checks whether a given file is
        *       in a format it can handle. If it is, the classifier creates a schema in the form of a
        *         <code>StructType</code> object that matches that data format.</p>
        *          <p>You can use the standard classifiers that Glue provides, or you can write your own
        *       classifiers to best categorize your data sources and specify the appropriate schemas to use
        *       for them. A classifier can be a <code>grok</code> classifier, an <code>XML</code> classifier,
        *       a <code>JSON</code> classifier, or a custom <code>CSV</code> classifier, as specified in one
        *       of the fields in the <code>Classifier</code> object.</p>
        */
    export interface Classifier {
            /**
                * <p>A classifier that uses <code>grok</code>.</p>
                */
            GrokClassifier?: GrokClassifier;
            /**
                * <p>A classifier for XML content.</p>
                */
            XMLClassifier?: XMLClassifier;
            /**
                * <p>A classifier for JSON content.</p>
                */
            JsonClassifier?: JsonClassifier;
            /**
                * <p>A classifier for comma-separated values (CSV).</p>
                */
            CsvClassifier?: CsvClassifier;
    }
    export namespace Classifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Classifier) => any;
    }
    export interface GetClassifierResponse {
            /**
                * <p>The requested classifier.</p>
                */
            Classifier?: Classifier;
    }
    export namespace GetClassifierResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetClassifierResponse) => any;
    }
    export interface GetClassifiersRequest {
            /**
                * <p>The size of the list to return (optional).</p>
                */
            MaxResults?: number;
            /**
                * <p>An optional continuation token.</p>
                */
            NextToken?: string;
    }
    export namespace GetClassifiersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetClassifiersRequest) => any;
    }
    export interface GetClassifiersResponse {
            /**
                * <p>The requested list of classifier
                *       objects.</p>
                */
            Classifiers?: Classifier[];
            /**
                * <p>A continuation token.</p>
                */
            NextToken?: string;
    }
    export namespace GetClassifiersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetClassifiersResponse) => any;
    }
    export interface GetColumnStatisticsForPartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of partition values identifying the partition.</p>
                */
            PartitionValues: string[] | undefined;
            /**
                * <p>A list of the column names.</p>
                */
            ColumnNames: string[] | undefined;
    }
    export namespace GetColumnStatisticsForPartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetColumnStatisticsForPartitionRequest) => any;
    }
    /**
        * <p>Defines column statistics supported for bit sequence data values.</p>
        */
    export interface BinaryColumnStatisticsData {
            /**
                * <p>The size of the longest bit sequence in the column.</p>
                */
            MaximumLength: number | undefined;
            /**
                * <p>The average bit sequence length in the column.</p>
                */
            AverageLength: number | undefined;
            /**
                * <p>The number of null values in the column.</p>
                */
            NumberOfNulls: number | undefined;
    }
    export namespace BinaryColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BinaryColumnStatisticsData) => any;
    }
    /**
        * <p>Defines column statistics supported for Boolean data columns.</p>
        */
    export interface BooleanColumnStatisticsData {
            /**
                * <p>The number of true values in the column.</p>
                */
            NumberOfTrues: number | undefined;
            /**
                * <p>The number of false values in the column.</p>
                */
            NumberOfFalses: number | undefined;
            /**
                * <p>The number of null values in the column.</p>
                */
            NumberOfNulls: number | undefined;
    }
    export namespace BooleanColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BooleanColumnStatisticsData) => any;
    }
    /**
        * <p>Defines column statistics supported for timestamp data columns.</p>
        */
    export interface DateColumnStatisticsData {
            /**
                * <p>The lowest value in the column.</p>
                */
            MinimumValue?: Date;
            /**
                * <p>The highest value in the column.</p>
                */
            MaximumValue?: Date;
            /**
                * <p>The number of null values in the column.</p>
                */
            NumberOfNulls: number | undefined;
            /**
                * <p>The number of distinct values in a column.</p>
                */
            NumberOfDistinctValues: number | undefined;
    }
    export namespace DateColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DateColumnStatisticsData) => any;
    }
    /**
        * <p>Contains a numeric value in decimal format.</p>
        */
    export interface DecimalNumber {
            /**
                * <p>The unscaled numeric value.</p>
                */
            UnscaledValue: Uint8Array | undefined;
            /**
                * <p>The scale that determines where the decimal point falls in the
                *       unscaled value.</p>
                */
            Scale: number | undefined;
    }
    export namespace DecimalNumber {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DecimalNumber) => any;
    }
    /**
        * <p>Defines column statistics supported for fixed-point number data columns.</p>
        */
    export interface DecimalColumnStatisticsData {
            /**
                * <p>The lowest value in the column.</p>
                */
            MinimumValue?: DecimalNumber;
            /**
                * <p>The highest value in the column.</p>
                */
            MaximumValue?: DecimalNumber;
            /**
                * <p>The number of null values in the column.</p>
                */
            NumberOfNulls: number | undefined;
            /**
                * <p>The number of distinct values in a column.</p>
                */
            NumberOfDistinctValues: number | undefined;
    }
    export namespace DecimalColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DecimalColumnStatisticsData) => any;
    }
    /**
        * <p>Defines column statistics supported for floating-point number data columns.</p>
        */
    export interface DoubleColumnStatisticsData {
            /**
                * <p>The lowest value in the column.</p>
                */
            MinimumValue?: number;
            /**
                * <p>The highest value in the column.</p>
                */
            MaximumValue?: number;
            /**
                * <p>The number of null values in the column.</p>
                */
            NumberOfNulls: number | undefined;
            /**
                * <p>The number of distinct values in a column.</p>
                */
            NumberOfDistinctValues: number | undefined;
    }
    export namespace DoubleColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DoubleColumnStatisticsData) => any;
    }
    /**
        * <p>Defines column statistics supported for integer data columns.</p>
        */
    export interface LongColumnStatisticsData {
            /**
                * <p>The lowest value in the column.</p>
                */
            MinimumValue?: number;
            /**
                * <p>The highest value in the column.</p>
                */
            MaximumValue?: number;
            /**
                * <p>The number of null values in the column.</p>
                */
            NumberOfNulls: number | undefined;
            /**
                * <p>The number of distinct values in a column.</p>
                */
            NumberOfDistinctValues: number | undefined;
    }
    export namespace LongColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LongColumnStatisticsData) => any;
    }
    /**
        * <p>Defines column statistics supported for character sequence data values.</p>
        */
    export interface StringColumnStatisticsData {
            /**
                * <p>The size of the longest string in the column.</p>
                */
            MaximumLength: number | undefined;
            /**
                * <p>The average string length in the column.</p>
                */
            AverageLength: number | undefined;
            /**
                * <p>The number of null values in the column.</p>
                */
            NumberOfNulls: number | undefined;
            /**
                * <p>The number of distinct values in a column.</p>
                */
            NumberOfDistinctValues: number | undefined;
    }
    export namespace StringColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StringColumnStatisticsData) => any;
    }
    export enum ColumnStatisticsType {
            BINARY = "BINARY",
            BOOLEAN = "BOOLEAN",
            DATE = "DATE",
            DECIMAL = "DECIMAL",
            DOUBLE = "DOUBLE",
            LONG = "LONG",
            STRING = "STRING"
    }
    /**
        * <p>Contains the individual types of column statistics data. Only one data object should be set and indicated by the <code>Type</code> attribute.</p>
        */
    export interface ColumnStatisticsData {
            /**
                * <p>The type of column statistics data.</p>
                */
            Type: ColumnStatisticsType | string | undefined;
            /**
                * <p>Boolean column statistics data.</p>
                */
            BooleanColumnStatisticsData?: BooleanColumnStatisticsData;
            /**
                * <p>Date column statistics data.</p>
                */
            DateColumnStatisticsData?: DateColumnStatisticsData;
            /**
                * <p>Decimal column statistics data.</p>
                */
            DecimalColumnStatisticsData?: DecimalColumnStatisticsData;
            /**
                * <p>Double column statistics data.</p>
                */
            DoubleColumnStatisticsData?: DoubleColumnStatisticsData;
            /**
                * <p>Long column statistics data.</p>
                */
            LongColumnStatisticsData?: LongColumnStatisticsData;
            /**
                * <p>String column statistics data.</p>
                */
            StringColumnStatisticsData?: StringColumnStatisticsData;
            /**
                * <p>Binary column statistics data.</p>
                */
            BinaryColumnStatisticsData?: BinaryColumnStatisticsData;
    }
    export namespace ColumnStatisticsData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnStatisticsData) => any;
    }
    /**
        * <p>Represents the generated column-level statistics for a table or partition.</p>
        */
    export interface ColumnStatistics {
            /**
                * <p>Name of column which statistics belong to.</p>
                */
            ColumnName: string | undefined;
            /**
                * <p>The data type of the column.</p>
                */
            ColumnType: string | undefined;
            /**
                * <p>The timestamp of when column statistics were generated.</p>
                */
            AnalyzedTime: Date | undefined;
            /**
                * <p>A <code>ColumnStatisticData</code> object that contains the statistics data values.</p>
                */
            StatisticsData: ColumnStatisticsData | undefined;
    }
    export namespace ColumnStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnStatistics) => any;
    }
    /**
        * <p>Encapsulates a column name that failed and the reason for failure.</p>
        */
    export interface ColumnError {
            /**
                * <p>The name of the column that failed.</p>
                */
            ColumnName?: string;
            /**
                * <p>An error message with the reason for the failure of an operation.</p>
                */
            Error?: ErrorDetail;
    }
    export namespace ColumnError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnError) => any;
    }
    export interface GetColumnStatisticsForPartitionResponse {
            /**
                * <p>List of ColumnStatistics that failed to be retrieved.</p>
                */
            ColumnStatisticsList?: ColumnStatistics[];
            /**
                * <p>Error occurred during retrieving column statistics data.</p>
                */
            Errors?: ColumnError[];
    }
    export namespace GetColumnStatisticsForPartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetColumnStatisticsForPartitionResponse) => any;
    }
    export interface GetColumnStatisticsForTableRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside.
                *       If none is supplied, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A list of the column names.</p>
                */
            ColumnNames: string[] | undefined;
    }
    export namespace GetColumnStatisticsForTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetColumnStatisticsForTableRequest) => any;
    }
    export interface GetColumnStatisticsForTableResponse {
            /**
                * <p>List of ColumnStatistics that failed to be retrieved.</p>
                */
            ColumnStatisticsList?: ColumnStatistics[];
            /**
                * <p>List of ColumnStatistics that failed to be retrieved.</p>
                */
            Errors?: ColumnError[];
    }
    export namespace GetColumnStatisticsForTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetColumnStatisticsForTableResponse) => any;
    }
    export interface GetConnectionRequest {
            /**
                * <p>The ID of the Data Catalog in which the connection resides. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the connection definition to retrieve.</p>
                */
            Name: string | undefined;
            /**
                * <p>Allows you to retrieve the connection metadata without returning the password. For
                *       instance, the Glue console uses this flag to retrieve the connection, and does not display
                *       the password. Set this parameter when the caller might not have permission to use the KMS
                *       key to decrypt the password, but it does have permission to access the rest of the connection
                *       properties.</p>
                */
            HidePassword?: boolean;
    }
    export namespace GetConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionRequest) => any;
    }
    /**
        * <p>Defines a connection to a data source.</p>
        */
    export interface Connection {
            /**
                * <p>The name of the connection definition.</p>
                */
            Name?: string;
            /**
                * <p>The description of the connection.</p>
                */
            Description?: string;
            /**
                * <p>The type of the connection. Currently, SFTP is not supported.</p>
                */
            ConnectionType?: ConnectionType | string;
            /**
                * <p>A list of criteria that can be used in selecting this connection.</p>
                */
            MatchCriteria?: string[];
            /**
                * <p>These key-value pairs define parameters for the connection:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>HOST</code> - The host URI: either the
                *         fully qualified domain name (FQDN) or the IPv4 address of
                *         the database host.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PORT</code> - The port number, between
                *         1024 and 65535, of the port on which the database host is
                *         listening for database connections.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>USER_NAME</code> -  The name under which
                *         to log in to the database. The value string for <code>USER_NAME</code> is "<code>USERNAME</code>".</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PASSWORD</code> - A password,
                *         if one is used, for the user name.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ENCRYPTED_PASSWORD</code> - When you enable connection password protection by setting <code>ConnectionPasswordEncryption</code> in the Data Catalog encryption settings, this field stores the encrypted password.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>JDBC_DRIVER_JAR_URI</code> - The Amazon Simple Storage Service (Amazon S3) path of the
                *           JAR file that contains the JDBC driver to use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>JDBC_DRIVER_CLASS_NAME</code> - The class name of the JDBC driver to use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>JDBC_ENGINE</code> - The name of the JDBC engine to use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>JDBC_ENGINE_VERSION</code> - The version of the JDBC engine to use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CONFIG_FILES</code> - (Reserved for future use.)</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INSTANCE_ID</code> - The instance ID to use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>JDBC_CONNECTION_URL</code> - The URL for connecting to a JDBC data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>JDBC_ENFORCE_SSL</code> - A Boolean string (true, false) specifying whether Secure
                *           Sockets Layer (SSL) with hostname matching is enforced for the JDBC connection on the
                *           client. The default is false.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CUSTOM_JDBC_CERT</code> - An Amazon S3 location specifying the customer's root certificate. Glue uses this root certificate to validate the customer’s certificate when connecting to the customer database. Glue only handles X.509 certificates. The certificate provided must be DER-encoded and supplied in Base64 encoding PEM format.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SKIP_CUSTOM_JDBC_CERT_VALIDATION</code> - By default, this is <code>false</code>. Glue validates the Signature algorithm and Subject Public Key Algorithm for the customer certificate. The only permitted algorithms for the Signature algorithm are SHA256withRSA, SHA384withRSA or SHA512withRSA. For the Subject Public Key Algorithm, the key length must be at least 2048. You can set the value of this property to <code>true</code> to skip Glue’s validation of the customer certificate.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CUSTOM_JDBC_CERT_STRING</code> - A custom JDBC certificate string which is used for domain match or distinguished name match to prevent a man-in-the-middle attack. In Oracle database, this is used as the <code>SSL_SERVER_CERT_DN</code>; in Microsoft SQL Server, this is used as the <code>hostNameInCertificate</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CONNECTION_URL</code> - The URL for connecting to a general (non-JDBC) data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SECRET_ID</code> - The secret ID used for the secret manager of credentials.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CONNECTOR_URL</code> - The connector URL for a MARKETPLACE or CUSTOM connection.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CONNECTOR_TYPE</code> - The connector type for a MARKETPLACE or CUSTOM connection.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CONNECTOR_CLASS_NAME</code> - The connector class name for a MARKETPLACE or CUSTOM connection.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_BOOTSTRAP_SERVERS</code> - A comma-separated list of host and port pairs that are the addresses of the Apache Kafka brokers in a Kafka cluster to which a Kafka client will connect to and bootstrap itself.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SSL_ENABLED</code> - Whether to enable or disable SSL on an Apache Kafka connection. Default value is "true".</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_CUSTOM_CERT</code> - The Amazon S3 URL for the private CA cert file (.pem format). The default is an empty string.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SKIP_CUSTOM_CERT_VALIDATION</code> - Whether to skip the validation of the CA cert file or not. Glue validates for three algorithms: SHA256withRSA, SHA384withRSA and SHA512withRSA. Default value is "false".</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_CLIENT_KEYSTORE</code> - The Amazon S3 location of the client keystore file for Kafka client side authentication (Optional).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_CLIENT_KEYSTORE_PASSWORD</code> - The password to access the provided keystore (Optional).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_CLIENT_KEY_PASSWORD</code> - A keystore can consist of multiple keys, so this is the password to access the client key to be used with the Kafka server side key (Optional).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ENCRYPTED_KAFKA_CLIENT_KEYSTORE_PASSWORD</code> - The encrypted version of the Kafka client keystore password (if the user has the Glue encrypt passwords setting selected).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ENCRYPTED_KAFKA_CLIENT_KEY_PASSWORD</code> - The encrypted version of the Kafka client key password (if the user has the Glue encrypt passwords setting selected).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SASL_MECHANISM</code> - <code>"SCRAM-SHA-512"</code> or <code>"GSSAPI"</code>. These are the two supported <a href="https://www.iana.org/assignments/sasl-mechanisms/sasl-mechanisms.xhtml">SASL Mechanisms</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SASL_SCRAM_USERNAME</code> - A plaintext username used to authenticate with the "SCRAM-SHA-512" mechanism.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SASL_SCRAM_PASSWORD</code> - A plaintext password used to authenticate with the "SCRAM-SHA-512" mechanism.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ENCRYPTED_KAFKA_SASL_SCRAM_PASSWORD</code> - The encrypted version of the Kafka SASL SCRAM password (if the user has the Glue encrypt passwords setting selected).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SASL_GSSAPI_KEYTAB</code> - The S3 location of a Kerberos <code>keytab</code> file. A keytab stores long-term keys for one or more principals. For more information, see <a href="https://web.mit.edu/kerberos/krb5-latest/doc/basic/keytab_def.html">MIT Kerberos Documentation: Keytab</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SASL_GSSAPI_KRB5_CONF</code> - The S3 location of a Kerberos <code>krb5.conf</code> file. A krb5.conf stores Kerberos configuration information, such as the location of the KDC server. For more information, see <a href="https://web.mit.edu/kerberos/krb5-1.12/doc/admin/conf_files/krb5_conf.html">MIT Kerberos Documentation: krb5.conf</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SASL_GSSAPI_SERVICE</code> - The Kerberos service name, as set with <code>sasl.kerberos.service.name</code> in your <a href="https://kafka.apache.org/documentation/#brokerconfigs_sasl.kerberos.service.name">Kafka Configuration</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KAFKA_SASL_GSSAPI_PRINCIPAL</code> - The name of the Kerberos princial used by Glue. For more information, see <a href="https://kafka.apache.org/documentation/#security_sasl_kerberos_clientconfig">Kafka Documentation: Configuring Kafka Brokers</a>.</p>
                *             </li>
                *          </ul>
                */
            ConnectionProperties?: Record<string, string>;
            /**
                * <p>A map of physical connection requirements, such as virtual private cloud (VPC) and
                *         <code>SecurityGroup</code>, that are needed to make this connection successfully.</p>
                */
            PhysicalConnectionRequirements?: PhysicalConnectionRequirements;
            /**
                * <p>The time that this connection definition was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The last time that this connection definition was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>The user, group, or role that last updated this connection definition.</p>
                */
            LastUpdatedBy?: string;
    }
    export namespace Connection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Connection) => any;
    }
    export interface GetConnectionResponse {
            /**
                * <p>The requested connection definition.</p>
                */
            Connection?: Connection;
    }
    export namespace GetConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionResponse) => any;
    }
    /**
        * <p>Filters the connection definitions that are returned by the <code>GetConnections</code>
        *       API operation.</p>
        */
    export interface GetConnectionsFilter {
            /**
                * <p>A criteria string that must match the criteria recorded in the
                *        connection definition for that connection definition to be returned.</p>
                */
            MatchCriteria?: string[];
            /**
                * <p>The type of connections to return. Currently, SFTP is not supported.</p>
                */
            ConnectionType?: ConnectionType | string;
    }
    export namespace GetConnectionsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionsFilter) => any;
    }
    export interface GetConnectionsRequest {
            /**
                * <p>The ID of the Data Catalog in which the connections reside. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>A filter that controls which connections are returned.</p>
                */
            Filter?: GetConnectionsFilter;
            /**
                * <p>Allows you to retrieve the connection metadata without returning the password. For
                *       instance, the Glue console uses this flag to retrieve the connection, and does not display
                *       the password. Set this parameter when the caller might not have permission to use the KMS
                *       key to decrypt the password, but it does have permission to access the rest of the connection
                *       properties.</p>
                */
            HidePassword?: boolean;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of connections to return in one response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetConnectionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionsRequest) => any;
    }
    export interface GetConnectionsResponse {
            /**
                * <p>A list of requested connection definitions.</p>
                */
            ConnectionList?: Connection[];
            /**
                * <p>A continuation token, if the list of connections returned does not
                *       include the last of the filtered connections.</p>
                */
            NextToken?: string;
    }
    export namespace GetConnectionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionsResponse) => any;
    }
    export interface GetCrawlerRequest {
            /**
                * <p>The name of the crawler to retrieve metadata for.</p>
                */
            Name: string | undefined;
    }
    export namespace GetCrawlerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCrawlerRequest) => any;
    }
    export interface GetCrawlerResponse {
            /**
                * <p>The metadata for the specified crawler.</p>
                */
            Crawler?: Crawler;
    }
    export namespace GetCrawlerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCrawlerResponse) => any;
    }
    export interface GetCrawlerMetricsRequest {
            /**
                * <p>A list of the names of crawlers about which to retrieve metrics.</p>
                */
            CrawlerNameList?: string[];
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace GetCrawlerMetricsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCrawlerMetricsRequest) => any;
    }
    /**
        * <p>Metrics for a specified crawler.</p>
        */
    export interface CrawlerMetrics {
            /**
                * <p>The name of the crawler.</p>
                */
            CrawlerName?: string;
            /**
                * <p>The estimated time left to complete a running crawl.</p>
                */
            TimeLeftSeconds?: number;
            /**
                * <p>True if the crawler is still estimating how long it will take to complete this run.</p>
                */
            StillEstimating?: boolean;
            /**
                * <p>The duration of the crawler's most recent run, in seconds.</p>
                */
            LastRuntimeSeconds?: number;
            /**
                * <p>The median duration of this crawler's runs, in seconds.</p>
                */
            MedianRuntimeSeconds?: number;
            /**
                * <p>The number of tables created by this crawler.</p>
                */
            TablesCreated?: number;
            /**
                * <p>The number of tables updated by this crawler.</p>
                */
            TablesUpdated?: number;
            /**
                * <p>The number of tables deleted by this crawler.</p>
                */
            TablesDeleted?: number;
    }
    export namespace CrawlerMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrawlerMetrics) => any;
    }
    export interface GetCrawlerMetricsResponse {
            /**
                * <p>A list of metrics for the specified crawler.</p>
                */
            CrawlerMetricsList?: CrawlerMetrics[];
            /**
                * <p>A continuation token, if the returned list does not contain the
                *       last metric available.</p>
                */
            NextToken?: string;
    }
    export namespace GetCrawlerMetricsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCrawlerMetricsResponse) => any;
    }
    export interface GetCrawlersRequest {
            /**
                * <p>The number of crawlers to return on each call.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
    }
    export namespace GetCrawlersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCrawlersRequest) => any;
    }
    export interface GetCrawlersResponse {
            /**
                * <p>A list of crawler metadata.</p>
                */
            Crawlers?: Crawler[];
            /**
                * <p>A continuation token, if the returned list has not reached the end
                *       of those defined in this customer account.</p>
                */
            NextToken?: string;
    }
    export namespace GetCrawlersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCrawlersResponse) => any;
    }
    export interface GetCustomEntityTypeRequest {
            /**
                * <p>The name of the custom pattern that you want to retrieve.</p>
                */
            Name: string | undefined;
    }
    export namespace GetCustomEntityTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomEntityTypeRequest) => any;
    }
    export interface GetCustomEntityTypeResponse {
            /**
                * <p>The name of the custom pattern that you retrieved.</p>
                */
            Name?: string;
            /**
                * <p>A regular expression string that is used for detecting sensitive data in a custom pattern.</p>
                */
            RegexString?: string;
            /**
                * <p>A list of context words if specified when you created the custom pattern. If none of these context words are found within the vicinity of the regular expression the data will not be detected as sensitive data.</p>
                */
            ContextWords?: string[];
    }
    export namespace GetCustomEntityTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomEntityTypeResponse) => any;
    }
    export interface GetDatabaseRequest {
            /**
                * <p>The ID of the Data Catalog in which the database resides. If none is provided, the Amazon Web Services
                *       account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the database to retrieve. For Hive compatibility, this
                *       should be all lowercase.</p>
                */
            Name: string | undefined;
    }
    export namespace GetDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatabaseRequest) => any;
    }
    /**
        * <p>The <code>Database</code> object represents a logical grouping of tables that might reside
        *       in a Hive metastore or an RDBMS.</p>
        */
    export interface Database {
            /**
                * <p>The name of the database. For Hive compatibility, this is folded to lowercase when it is
                *       stored.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the database.</p>
                */
            Description?: string;
            /**
                * <p>The location of the database (for example, an HDFS path).</p>
                */
            LocationUri?: string;
            /**
                * <p>These key-value pairs define parameters and properties
                *       of the database.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>The time at which the metadata database was created in the catalog.</p>
                */
            CreateTime?: Date;
            /**
                * <p>Creates a set of default permissions on the table for principals. </p>
                */
            CreateTableDefaultPermissions?: PrincipalPermissions[];
            /**
                * <p>A <code>DatabaseIdentifier</code> structure that describes a target database for resource linking.</p>
                */
            TargetDatabase?: DatabaseIdentifier;
            /**
                * <p>The ID of the Data Catalog in which the database resides.</p>
                */
            CatalogId?: string;
    }
    export namespace Database {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Database) => any;
    }
    export interface GetDatabaseResponse {
            /**
                * <p>The definition of the specified database in the Data Catalog.</p>
                */
            Database?: Database;
    }
    export namespace GetDatabaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatabaseResponse) => any;
    }
    export enum ResourceShareType {
            ALL = "ALL",
            FOREIGN = "FOREIGN"
    }
    export interface GetDatabasesRequest {
            /**
                * <p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is
                *       provided, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of databases to return in one response.</p>
                */
            MaxResults?: number;
            /**
                * <p>Allows you to specify that you want to list the databases shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p>
                *
                * 	        <ul>
                *             <li>
                *                <p>If set to <code>FOREIGN</code>, will list the databases shared with your account. </p>
                *             </li>
                *             <li>
                *                <p>If set to <code>ALL</code>, will list the databases shared with your account, as well as the databases in yor local account. </p>
                *             </li>
                *          </ul>
                */
            ResourceShareType?: ResourceShareType | string;
    }
    export namespace GetDatabasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatabasesRequest) => any;
    }
    export interface GetDatabasesResponse {
            /**
                * <p>A list of <code>Database</code> objects from the specified catalog.</p>
                */
            DatabaseList: Database[] | undefined;
            /**
                * <p>A continuation token for paginating the returned list of tokens,
                *       returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace GetDatabasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDatabasesResponse) => any;
    }
    export interface GetDataCatalogEncryptionSettingsRequest {
            /**
                * <p>The ID of the Data Catalog to retrieve the security configuration for. If none is
                *       provided, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
    }
    export namespace GetDataCatalogEncryptionSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataCatalogEncryptionSettingsRequest) => any;
    }
    /**
        * <p>The data structure used by the Data Catalog to encrypt the password as part of
        *         <code>CreateConnection</code> or <code>UpdateConnection</code> and store it in the
        *         <code>ENCRYPTED_PASSWORD</code> field in the connection properties. You can enable catalog
        *       encryption or only password encryption.</p>
        *
        * 	        <p>When a <code>CreationConnection</code> request arrives containing a password, the Data
        *       Catalog first encrypts the password using your KMS key. It then encrypts the whole
        *       connection object again if catalog encryption is also enabled.</p>
        *
        *          <p>This encryption requires that you set KMS key permissions to enable or restrict access
        *       on the password key according to your security requirements. For example, you might want only
        *       administrators to have decrypt permission on the password key.</p>
        */
    export interface ConnectionPasswordEncryption {
            /**
                * <p>When the <code>ReturnConnectionPasswordEncrypted</code> flag is set to "true", passwords remain encrypted in the responses of <code>GetConnection</code> and <code>GetConnections</code>. This encryption takes effect independently from catalog encryption. </p>
                */
            ReturnConnectionPasswordEncrypted: boolean | undefined;
            /**
                * <p>An KMS key that is used to encrypt the connection password. </p>
                *
                *          <p>If connection password protection is enabled, the caller of <code>CreateConnection</code>
                *       and <code>UpdateConnection</code> needs at least <code>kms:Encrypt</code> permission on the
                *       specified KMS key, to encrypt passwords before storing them in the Data Catalog. </p>
                *
                * 	        <p>You can set the decrypt permission to enable or restrict access on the password key according to your security requirements.</p>
                */
            AwsKmsKeyId?: string;
    }
    export namespace ConnectionPasswordEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionPasswordEncryption) => any;
    }
    export enum CatalogEncryptionMode {
            DISABLED = "DISABLED",
            SSEKMS = "SSE-KMS"
    }
    /**
        * <p>Specifies the encryption-at-rest configuration for the Data Catalog.</p>
        */
    export interface EncryptionAtRest {
            /**
                * <p>The encryption-at-rest mode for encrypting Data Catalog data.</p>
                */
            CatalogEncryptionMode: CatalogEncryptionMode | string | undefined;
            /**
                * <p>The ID of the KMS key to use for encryption at rest.</p>
                */
            SseAwsKmsKeyId?: string;
    }
    export namespace EncryptionAtRest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionAtRest) => any;
    }
    /**
        * <p>Contains configuration information for maintaining Data Catalog security.</p>
        */
    export interface DataCatalogEncryptionSettings {
            /**
                * <p>Specifies the encryption-at-rest configuration for the Data Catalog.</p>
                */
            EncryptionAtRest?: EncryptionAtRest;
            /**
                * <p>When connection password protection is enabled, the Data Catalog uses a customer-provided
                *       key to encrypt the password as part of <code>CreateConnection</code> or
                *         <code>UpdateConnection</code> and store it in the <code>ENCRYPTED_PASSWORD</code> field in
                *       the connection properties. You can enable catalog encryption or only password
                *       encryption.</p>
                */
            ConnectionPasswordEncryption?: ConnectionPasswordEncryption;
    }
    export namespace DataCatalogEncryptionSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCatalogEncryptionSettings) => any;
    }
    export interface GetDataCatalogEncryptionSettingsResponse {
            /**
                * <p>The requested security configuration.</p>
                */
            DataCatalogEncryptionSettings?: DataCatalogEncryptionSettings;
    }
    export namespace GetDataCatalogEncryptionSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataCatalogEncryptionSettingsResponse) => any;
    }
    export interface GetDataflowGraphRequest {
            /**
                * <p>The Python script to transform.</p>
                */
            PythonScript?: string;
    }
    export namespace GetDataflowGraphRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataflowGraphRequest) => any;
    }
    export interface GetDataflowGraphResponse {
            /**
                * <p>A list of the nodes in the resulting DAG.</p>
                */
            DagNodes?: CodeGenNode[];
            /**
                * <p>A list of the edges in the resulting DAG.</p>
                */
            DagEdges?: CodeGenEdge[];
    }
    export namespace GetDataflowGraphResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataflowGraphResponse) => any;
    }
    export interface GetDevEndpointRequest {
            /**
                * <p>Name of the <code>DevEndpoint</code> to retrieve information for.</p>
                */
            EndpointName: string | undefined;
    }
    export namespace GetDevEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevEndpointRequest) => any;
    }
    export interface GetDevEndpointResponse {
            /**
                * <p>A <code>DevEndpoint</code> definition.</p>
                */
            DevEndpoint?: DevEndpoint;
    }
    export namespace GetDevEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevEndpointResponse) => any;
    }
    export interface GetDevEndpointsRequest {
            /**
                * <p>The maximum size of information to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace GetDevEndpointsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevEndpointsRequest) => any;
    }
    export interface GetDevEndpointsResponse {
            /**
                * <p>A list of <code>DevEndpoint</code> definitions.</p>
                */
            DevEndpoints?: DevEndpoint[];
            /**
                * <p>A continuation token, if not all <code>DevEndpoint</code> definitions have yet been
                *       returned.</p>
                */
            NextToken?: string;
    }
    export namespace GetDevEndpointsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDevEndpointsResponse) => any;
    }
    export interface GetJobRequest {
            /**
                * <p>The name of the job definition to retrieve.</p>
                */
            JobName: string | undefined;
    }
    export namespace GetJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobRequest) => any;
    }
    export interface GetJobBookmarkRequest {
            /**
                * <p>The name of the job in question.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The unique run identifier associated with this job run.</p>
                */
            RunId?: string;
    }
    export namespace GetJobBookmarkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobBookmarkRequest) => any;
    }
    /**
        * <p>Defines a point that a job can resume processing.</p>
        */
    export interface JobBookmarkEntry {
            /**
                * <p>The name of the job in question.</p>
                */
            JobName?: string;
            /**
                * <p>The version of the job.</p>
                */
            Version?: number;
            /**
                * <p>The run ID number.</p>
                */
            Run?: number;
            /**
                * <p>The attempt ID number.</p>
                */
            Attempt?: number;
            /**
                * <p>The unique run identifier associated with the previous job run.</p>
                */
            PreviousRunId?: string;
            /**
                * <p>The run ID number.</p>
                */
            RunId?: string;
            /**
                * <p>The bookmark itself.</p>
                */
            JobBookmark?: string;
    }
    export namespace JobBookmarkEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobBookmarkEntry) => any;
    }
    export interface GetJobBookmarkResponse {
            /**
                * <p>A structure that defines a point that a job can resume processing.</p>
                */
            JobBookmarkEntry?: JobBookmarkEntry;
    }
    export namespace GetJobBookmarkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobBookmarkResponse) => any;
    }
    export interface GetJobRunRequest {
            /**
                * <p>Name of the job definition being run.</p>
                */
            JobName: string | undefined;
            /**
                * <p>The ID of the job run.</p>
                */
            RunId: string | undefined;
            /**
                * <p>True if a list of predecessor runs should be returned.</p>
                */
            PredecessorsIncluded?: boolean;
    }
    export namespace GetJobRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobRunRequest) => any;
    }
    export interface GetJobRunResponse {
            /**
                * <p>The requested job-run metadata.</p>
                */
            JobRun?: JobRun;
    }
    export namespace GetJobRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobRunResponse) => any;
    }
    export interface GetJobRunsRequest {
            /**
                * <p>The name of the job definition for which to retrieve all job runs.</p>
                */
            JobName: string | undefined;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of the response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetJobRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobRunsRequest) => any;
    }
    export interface GetJobRunsResponse {
            /**
                * <p>A list of job-run metadata objects.</p>
                */
            JobRuns?: JobRun[];
            /**
                * <p>A continuation token, if not all requested job runs have been returned.</p>
                */
            NextToken?: string;
    }
    export namespace GetJobRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobRunsResponse) => any;
    }
    export interface GetJobsRequest {
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of the response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobsRequest) => any;
    }
    /**
        * <p>The location of resources.</p>
        */
    export interface Location {
            /**
                * <p>A JDBC location.</p>
                */
            Jdbc?: CodeGenNodeArg[];
            /**
                * <p>An Amazon Simple Storage Service (Amazon S3) location.</p>
                */
            S3?: CodeGenNodeArg[];
            /**
                * <p>An Amazon DynamoDB table location.</p>
                */
            DynamoDB?: CodeGenNodeArg[];
    }
    export namespace Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Location) => any;
    }
    /**
        * <p>Specifies a table definition in the Glue Data Catalog.</p>
        */
    export interface CatalogEntry {
            /**
                * <p>The database in which the table metadata resides.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table in question.</p>
                */
            TableName: string | undefined;
    }
    export namespace CatalogEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CatalogEntry) => any;
    }
    export interface GetMappingRequest {
            /**
                * <p>Specifies the source table.</p>
                */
            Source: CatalogEntry | undefined;
            /**
                * <p>A list of target tables.</p>
                */
            Sinks?: CatalogEntry[];
            /**
                * <p>Parameters for the mapping.</p>
                */
            Location?: Location;
    }
    export namespace GetMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMappingRequest) => any;
    }
    /**
        * <p>Defines a mapping.</p>
        */
    export interface MappingEntry {
            /**
                * <p>The name of the source table.</p>
                */
            SourceTable?: string;
            /**
                * <p>The source path.</p>
                */
            SourcePath?: string;
            /**
                * <p>The source type.</p>
                */
            SourceType?: string;
            /**
                * <p>The target table.</p>
                */
            TargetTable?: string;
            /**
                * <p>The target path.</p>
                */
            TargetPath?: string;
            /**
                * <p>The target type.</p>
                */
            TargetType?: string;
    }
    export namespace MappingEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MappingEntry) => any;
    }
    export interface GetMappingResponse {
            /**
                * <p>A list of mappings to the specified targets.</p>
                */
            Mapping: MappingEntry[] | undefined;
    }
    export namespace GetMappingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMappingResponse) => any;
    }
    export interface GetMLTaskRunRequest {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId: string | undefined;
            /**
                * <p>The unique identifier of the task run.</p>
                */
            TaskRunId: string | undefined;
    }
    export namespace GetMLTaskRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTaskRunRequest) => any;
    }
    /**
        * <p>Specifies configuration properties for an exporting labels task run.</p>
        */
    export interface ExportLabelsTaskRunProperties {
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) path where you will export the
                *       labels.</p>
                */
            OutputS3Path?: string;
    }
    export namespace ExportLabelsTaskRunProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportLabelsTaskRunProperties) => any;
    }
    /**
        * <p>Specifies configuration properties for a Find Matches task run.</p>
        */
    export interface FindMatchesTaskRunProperties {
            /**
                * <p>The job ID for the Find Matches task run.</p>
                */
            JobId?: string;
            /**
                * <p>The name assigned to the job for the Find Matches task run.</p>
                */
            JobName?: string;
            /**
                * <p>The job run ID for the Find Matches task run.</p>
                */
            JobRunId?: string;
    }
    export namespace FindMatchesTaskRunProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindMatchesTaskRunProperties) => any;
    }
    /**
        * <p>Specifies configuration properties for an importing labels task run.</p>
        */
    export interface ImportLabelsTaskRunProperties {
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) path from where you will import the
                *       labels.</p>
                */
            InputS3Path?: string;
            /**
                * <p>Indicates whether to overwrite your existing labels.</p>
                */
            Replace?: boolean;
    }
    export namespace ImportLabelsTaskRunProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportLabelsTaskRunProperties) => any;
    }
    /**
        * <p>Specifies configuration properties for a labeling set generation task run.</p>
        */
    export interface LabelingSetGenerationTaskRunProperties {
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) path where you will generate the labeling
                *       set.</p>
                */
            OutputS3Path?: string;
    }
    export namespace LabelingSetGenerationTaskRunProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelingSetGenerationTaskRunProperties) => any;
    }
    export enum TaskType {
            EVALUATION = "EVALUATION",
            EXPORT_LABELS = "EXPORT_LABELS",
            FIND_MATCHES = "FIND_MATCHES",
            IMPORT_LABELS = "IMPORT_LABELS",
            LABELING_SET_GENERATION = "LABELING_SET_GENERATION"
    }
    /**
        * <p>The configuration properties for the task run.</p>
        */
    export interface TaskRunProperties {
            /**
                * <p>The type of task run.</p>
                */
            TaskType?: TaskType | string;
            /**
                * <p>The configuration properties for an importing labels task run.</p>
                */
            ImportLabelsTaskRunProperties?: ImportLabelsTaskRunProperties;
            /**
                * <p>The configuration properties for an exporting labels task run.</p>
                */
            ExportLabelsTaskRunProperties?: ExportLabelsTaskRunProperties;
            /**
                * <p>The configuration properties for a labeling set generation task run.</p>
                */
            LabelingSetGenerationTaskRunProperties?: LabelingSetGenerationTaskRunProperties;
            /**
                * <p>The configuration properties for a find matches task run.</p>
                */
            FindMatchesTaskRunProperties?: FindMatchesTaskRunProperties;
    }
    export namespace TaskRunProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskRunProperties) => any;
    }
    export interface GetMLTaskRunResponse {
            /**
                * <p>The unique identifier of the task run.</p>
                */
            TransformId?: string;
            /**
                * <p>The unique run identifier associated with this run.</p>
                */
            TaskRunId?: string;
            /**
                * <p>The status for this task run.</p>
                */
            Status?: TaskStatusType | string;
            /**
                * <p>The names of the log groups that are associated with the task run.</p>
                */
            LogGroupName?: string;
            /**
                * <p>The list of properties that are associated with the task run.</p>
                */
            Properties?: TaskRunProperties;
            /**
                * <p>The error strings that are associated with the task run.</p>
                */
            ErrorString?: string;
            /**
                * <p>The date and time when this task run started.</p>
                */
            StartedOn?: Date;
            /**
                * <p>The date and time when this task run was last modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>The date and time when this task run was completed.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>The amount of time (in seconds) that the task run consumed resources.</p>
                */
            ExecutionTime?: number;
    }
    export namespace GetMLTaskRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTaskRunResponse) => any;
    }
    /**
        * <p>The criteria that are used to filter the task runs for the machine learning
        *       transform.</p>
        */
    export interface TaskRunFilterCriteria {
            /**
                * <p>The type of task run.</p>
                */
            TaskRunType?: TaskType | string;
            /**
                * <p>The current status of the task run.</p>
                */
            Status?: TaskStatusType | string;
            /**
                * <p>Filter on task runs started before this date.</p>
                */
            StartedBefore?: Date;
            /**
                * <p>Filter on task runs started after this date.</p>
                */
            StartedAfter?: Date;
    }
    export namespace TaskRunFilterCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskRunFilterCriteria) => any;
    }
    export enum TaskRunSortColumnType {
            STARTED = "STARTED",
            STATUS = "STATUS",
            TASK_RUN_TYPE = "TASK_RUN_TYPE"
    }
    export enum SortDirectionType {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    /**
        * <p>The sorting criteria that are used to sort the list of task runs for the machine learning
        *       transform.</p>
        */
    export interface TaskRunSortCriteria {
            /**
                * <p>The column to be used to sort the list of task runs for the machine learning
                *       transform.</p>
                */
            Column: TaskRunSortColumnType | string | undefined;
            /**
                * <p>The sort direction to be used to sort the list of task runs for the machine learning
                *       transform.</p>
                */
            SortDirection: SortDirectionType | string | undefined;
    }
    export namespace TaskRunSortCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskRunSortCriteria) => any;
    }
    export interface GetMLTaskRunsRequest {
            /**
                * <p>The unique identifier of the machine learning transform.</p>
                */
            TransformId: string | undefined;
            /**
                * <p>A token for pagination of the results. The default is empty.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return. </p>
                */
            MaxResults?: number;
            /**
                * <p>The filter criteria, in the <code>TaskRunFilterCriteria</code> structure, for the task run.</p>
                */
            Filter?: TaskRunFilterCriteria;
            /**
                * <p>The sorting criteria, in the <code>TaskRunSortCriteria</code> structure, for the task run.</p>
                */
            Sort?: TaskRunSortCriteria;
    }
    export namespace GetMLTaskRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTaskRunsRequest) => any;
    }
    /**
        * <p>The sampling parameters that are associated with the machine learning transform.</p>
        */
    export interface TaskRun {
            /**
                * <p>The unique identifier for the transform.</p>
                */
            TransformId?: string;
            /**
                * <p>The unique identifier for this task run.</p>
                */
            TaskRunId?: string;
            /**
                * <p>The current status of the requested task run.</p>
                */
            Status?: TaskStatusType | string;
            /**
                * <p>The names of the log group for secure logging, associated with this task run.</p>
                */
            LogGroupName?: string;
            /**
                * <p>Specifies configuration properties associated with this task run.</p>
                */
            Properties?: TaskRunProperties;
            /**
                * <p>The list of error strings associated with this task run.</p>
                */
            ErrorString?: string;
            /**
                * <p>The date and time that this task run started.</p>
                */
            StartedOn?: Date;
            /**
                * <p>The last point in time that the requested task run was updated.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>The last point in time that the requested task run was completed.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>The amount of time (in seconds) that the task run consumed resources.</p>
                */
            ExecutionTime?: number;
    }
    export namespace TaskRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskRun) => any;
    }
    export interface GetMLTaskRunsResponse {
            /**
                * <p>A list of task runs that are associated with the transform.</p>
                */
            TaskRuns?: TaskRun[];
            /**
                * <p>A pagination token, if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace GetMLTaskRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTaskRunsResponse) => any;
    }
    export interface GetMLTransformRequest {
            /**
                * <p>The unique identifier of the transform, generated at the time that the transform was
                *       created.</p>
                */
            TransformId: string | undefined;
    }
    export namespace GetMLTransformRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTransformRequest) => any;
    }
    /**
        * <p>A structure containing the column name and column importance score for a column. </p>
        *
        * 	        <p>Column importance helps you understand how columns contribute to your model, by identifying which columns in your records are more important than others.</p>
        */
    export interface ColumnImportance {
            /**
                * <p>The name of a column.</p>
                */
            ColumnName?: string;
            /**
                * <p>The column importance score for the column, as a decimal.</p>
                */
            Importance?: number;
    }
    export namespace ColumnImportance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnImportance) => any;
    }
    /**
        * <p>The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.</p>
        *
        * 	        <p>For more information, see <a href="https://en.wikipedia.org/wiki/Confusion_matrix">Confusion matrix</a> in Wikipedia.</p>
        */
    export interface ConfusionMatrix {
            /**
                * <p>The number of matches in the data that the transform correctly found, in the confusion matrix for your transform.</p>
                */
            NumTruePositives?: number;
            /**
                * <p>The number of nonmatches in the data that the transform incorrectly classified as a match,
                *       in the confusion matrix for your transform.</p>
                */
            NumFalsePositives?: number;
            /**
                * <p>The number of nonmatches in the data that the transform correctly rejected, in the
                *       confusion matrix for your transform.</p>
                */
            NumTrueNegatives?: number;
            /**
                * <p>The number of matches in the data that the transform didn't find, in the confusion matrix for your transform.</p>
                */
            NumFalseNegatives?: number;
    }
    export namespace ConfusionMatrix {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfusionMatrix) => any;
    }
    /**
        * <p>The evaluation metrics for the find matches algorithm. The quality of your machine
        *       learning transform is measured by getting your transform to predict some matches and comparing
        *       the results to known matches from the same dataset. The quality metrics are based on a subset
        *       of your data, so they are not precise.</p>
        */
    export interface FindMatchesMetrics {
            /**
                * <p>The area under the precision/recall curve (AUPRC) is a single number measuring the overall
                *       quality of the transform, that is independent of the choice made for precision vs. recall.
                *       Higher values indicate that you have a more attractive precision vs. recall tradeoff.</p>
                * 	        <p>For more information, see <a href="https://en.wikipedia.org/wiki/Precision_and_recall">Precision and recall</a> in Wikipedia.</p>
                */
            AreaUnderPRCurve?: number;
            /**
                * <p>The precision metric indicates when often your transform is correct when it predicts a match. Specifically, it measures how well the transform finds true positives from the total true positives possible.</p>
                *          <p>For more information, see <a href="https://en.wikipedia.org/wiki/Precision_and_recall">Precision and recall</a> in Wikipedia.</p>
                */
            Precision?: number;
            /**
                * <p>The recall metric indicates that for an actual match, how often your transform predicts
                *       the match. Specifically, it measures how well the transform finds true positives from the
                *       total records in the source data.</p>
                *          <p>For more information, see <a href="https://en.wikipedia.org/wiki/Precision_and_recall">Precision and recall</a> in Wikipedia.</p>
                */
            Recall?: number;
            /**
                * <p>The maximum F1 metric indicates the transform's accuracy between 0 and 1, where 1 is the best accuracy.</p>
                *          <p>For more information, see <a href="https://en.wikipedia.org/wiki/F1_score">F1 score</a> in Wikipedia.</p>
                */
            F1?: number;
            /**
                * <p>The confusion matrix shows you what your transform is predicting accurately and what types of errors it is making.</p>
                * 	        <p>For more information, see <a href="https://en.wikipedia.org/wiki/Confusion_matrix">Confusion matrix</a> in Wikipedia.</p>
                */
            ConfusionMatrix?: ConfusionMatrix;
            /**
                * <p>A list of <code>ColumnImportance</code> structures containing column importance metrics, sorted in order of descending importance.</p>
                */
            ColumnImportances?: ColumnImportance[];
    }
    export namespace FindMatchesMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindMatchesMetrics) => any;
    }
    /**
        * <p>Evaluation metrics provide an estimate of the quality of your machine learning transform.</p>
        */
    export interface EvaluationMetrics {
            /**
                * <p>The type of machine learning transform.</p>
                */
            TransformType: TransformType | string | undefined;
            /**
                * <p>The evaluation metrics for the find matches algorithm.</p>
                */
            FindMatchesMetrics?: FindMatchesMetrics;
    }
    export namespace EvaluationMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationMetrics) => any;
    }
    /**
        * <p>A key-value pair representing a column and data type that this transform can
        *       run against. The <code>Schema</code> parameter of the <code>MLTransform</code> may contain up to 100 of these structures.</p>
        */
    export interface SchemaColumn {
            /**
                * <p>The name of the column.</p>
                */
            Name?: string;
            /**
                * <p>The type of data in the column.</p>
                */
            DataType?: string;
    }
    export namespace SchemaColumn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaColumn) => any;
    }
    export enum TransformStatusType {
            DELETING = "DELETING",
            NOT_READY = "NOT_READY",
            READY = "READY"
    }
    export interface GetMLTransformResponse {
            /**
                * <p>The unique identifier of the transform, generated at the time that the transform was
                *       created.</p>
                */
            TransformId?: string;
            /**
                * <p>The unique name given to the transform when it was created.</p>
                */
            Name?: string;
            /**
                * <p>A description of the transform.</p>
                */
            Description?: string;
            /**
                * <p>The last known status of the transform (to indicate whether it can be used or not). One of "NOT_READY", "READY", or "DELETING".</p>
                */
            Status?: TransformStatusType | string;
            /**
                * <p>The date and time when the transform was created.</p>
                */
            CreatedOn?: Date;
            /**
                * <p>The date and time when the transform was last modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>A list of Glue table definitions used by the transform.</p>
                */
            InputRecordTables?: GlueTable[];
            /**
                * <p>The configuration parameters that are specific to the algorithm used.</p>
                */
            Parameters?: TransformParameters;
            /**
                * <p>The latest evaluation metrics.</p>
                */
            EvaluationMetrics?: EvaluationMetrics;
            /**
                * <p>The number of labels available for this transform.</p>
                */
            LabelCount?: number;
            /**
                * <p>The <code>Map<Column, Type></code> object that represents the schema that this
                *       transform accepts. Has an upper bound of 100 columns.</p>
                */
            Schema?: SchemaColumn[];
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role with the required
                *       permissions.</p>
                */
            Role?: string;
            /**
                * <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9.  For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
                *       processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                *       information, see the <a href="https://aws.amazon.com/glue/pricing/">Glue pricing
                *         page</a>. </p>
                *
                *          <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The timeout for a task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>
                */
            Timeout?: number;
            /**
                * <p>The maximum number of times to retry a task for this transform after a task run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>
                */
            TransformEncryption?: TransformEncryption;
    }
    export namespace GetMLTransformResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTransformResponse) => any;
    }
    /**
        * <p>The criteria used to filter the machine learning transforms.</p>
        */
    export interface TransformFilterCriteria {
            /**
                * <p>A unique transform name that is used to filter the machine learning transforms.</p>
                */
            Name?: string;
            /**
                * <p>The type of machine learning transform that is used to filter the machine learning
                *       transforms.</p>
                */
            TransformType?: TransformType | string;
            /**
                * <p>Filters the list of machine learning transforms by the last known status of the transforms (to indicate whether a transform can be used or not). One of "NOT_READY", "READY", or "DELETING".</p>
                */
            Status?: TransformStatusType | string;
            /**
                * <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9.  For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The time and date before which the transforms were created.</p>
                */
            CreatedBefore?: Date;
            /**
                * <p>The time and date after which the transforms were created.</p>
                */
            CreatedAfter?: Date;
            /**
                * <p>Filter on transforms last modified before this date.</p>
                */
            LastModifiedBefore?: Date;
            /**
                * <p>Filter on transforms last modified after this date.</p>
                */
            LastModifiedAfter?: Date;
            /**
                * <p>Filters on datasets with a specific schema. The <code>Map<Column, Type></code>
                *       object is an array of key-value pairs representing the schema this transform accepts, where
                *         <code>Column</code> is the name of a column, and <code>Type</code> is the type of the data
                *       such as an integer or string. Has an upper bound of 100 columns.</p>
                */
            Schema?: SchemaColumn[];
    }
    export namespace TransformFilterCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformFilterCriteria) => any;
    }
    export enum TransformSortColumnType {
            CREATED = "CREATED",
            LAST_MODIFIED = "LAST_MODIFIED",
            NAME = "NAME",
            STATUS = "STATUS",
            TRANSFORM_TYPE = "TRANSFORM_TYPE"
    }
    /**
        * <p>The sorting criteria that are associated with the machine learning transform.</p>
        */
    export interface TransformSortCriteria {
            /**
                * <p>The column to be used in the sorting criteria that are associated with the machine
                *       learning transform.</p>
                */
            Column: TransformSortColumnType | string | undefined;
            /**
                * <p>The sort direction to be used in the sorting criteria that are associated with the machine
                *       learning transform.</p>
                */
            SortDirection: SortDirectionType | string | undefined;
    }
    export namespace TransformSortCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TransformSortCriteria) => any;
    }
    export interface GetMLTransformsRequest {
            /**
                * <p>A paginated token to offset the results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The filter transformation criteria.</p>
                */
            Filter?: TransformFilterCriteria;
            /**
                * <p>The sorting criteria.</p>
                */
            Sort?: TransformSortCriteria;
    }
    export namespace GetMLTransformsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTransformsRequest) => any;
    }
    /**
        * <p>A structure for a machine learning transform.</p>
        */
    export interface MLTransform {
            /**
                * <p>The unique transform ID that is generated for the machine learning transform. The ID is
                *       guaranteed to be unique and does not change.</p>
                */
            TransformId?: string;
            /**
                * <p>A user-defined name for the machine learning transform. Names are not guaranteed unique
                *       and can be changed at any time.</p>
                */
            Name?: string;
            /**
                * <p>A user-defined, long-form description text for the machine learning transform.
                *       Descriptions are not guaranteed to be unique and can be changed at any time.</p>
                */
            Description?: string;
            /**
                * <p>The current status of the machine learning transform.</p>
                */
            Status?: TransformStatusType | string;
            /**
                * <p>A timestamp. The time and date that this machine learning transform was created.</p>
                */
            CreatedOn?: Date;
            /**
                * <p>A timestamp. The last point in time when this machine learning transform was modified.</p>
                */
            LastModifiedOn?: Date;
            /**
                * <p>A list of Glue table definitions used by the transform.</p>
                */
            InputRecordTables?: GlueTable[];
            /**
                * <p>A <code>TransformParameters</code> object. You can use parameters to tune (customize) the
                *       behavior of the machine learning transform by specifying what data it learns from and your
                *       preference on various tradeoffs (such as precious vs. recall, or accuracy vs. cost).</p>
                */
            Parameters?: TransformParameters;
            /**
                * <p>An <code>EvaluationMetrics</code> object. Evaluation metrics provide an estimate of the quality of your machine learning transform.</p>
                */
            EvaluationMetrics?: EvaluationMetrics;
            /**
                * <p>A count identifier for the labeling files generated by Glue for this transform. As you create a better transform, you can iteratively download, label, and upload the labeling file.</p>
                */
            LabelCount?: number;
            /**
                * <p>A map of key-value pairs representing the columns and data types that this transform can
                *       run against. Has an upper bound of 100 columns.</p>
                */
            Schema?: SchemaColumn[];
            /**
                * <p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform. </p>
                *
                * 		       <ul>
                *             <li>
                *                <p>This role needs Glue service role permissions to allow access to resources in Glue. See <a href="https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html">Attach a Policy to IAM Users That Access Glue</a>.</p>
                *             </li>
                *             <li>
                *                <p>This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.</p>
                *             </li>
                *          </ul>
                */
            Role?: string;
            /**
                * <p>This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9.  For more information, see <a href="https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions">Glue Versions</a> in the developer guide.</p>
                */
            GlueVersion?: string;
            /**
                * <p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of
                *       processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more
                *       information, see the <a href="http://aws.amazon.com/glue/pricing/">Glue pricing
                *         page</a>. </p>
                *
                * 		       <p>
                *             <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p>
                *         <ul>
                *             <li>
                *                <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p>
                *             </li>
                *          </ul>
                *
                * 	        <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The type of predefined worker that is allocated when a task of this transform runs. Accepts a value of Standard, G.1X, or G.2X.</p>
                * 	        <ul>
                *             <li>
                *                <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p>
                *             </li>
                *          </ul>
                *
                * 	        <p>
                *             <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p>
                *         <ul>
                *             <li>
                *                <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p>
                *             </li>
                *             <li>
                *                <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p>
                *             </li>
                *          </ul>
                */
            WorkerType?: WorkerType | string;
            /**
                * <p>The number of workers of a defined <code>workerType</code> that are allocated when a task of the transform runs.</p>
                *
                * 	        <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>
                */
            NumberOfWorkers?: number;
            /**
                * <p>The timeout in minutes of the machine learning transform.</p>
                */
            Timeout?: number;
            /**
                * <p>The maximum number of times to retry after an <code>MLTaskRun</code> of the machine
                *       learning transform fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p>
                */
            TransformEncryption?: TransformEncryption;
    }
    export namespace MLTransform {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MLTransform) => any;
    }
    export interface GetMLTransformsResponse {
            /**
                * <p>A list of machine learning transforms.</p>
                */
            Transforms: MLTransform[] | undefined;
            /**
                * <p>A pagination token, if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace GetMLTransformsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMLTransformsResponse) => any;
    }
    export interface GetPartitionRequest {
            /**
                * <p>The ID of the Data Catalog where the partition in question resides. If none is provided,
                *       the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partition resides.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partition's table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The values that define the partition.</p>
                */
            PartitionValues: string[] | undefined;
    }
    export namespace GetPartitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPartitionRequest) => any;
    }
    export interface GetPartitionResponse {
            /**
                * <p>The requested information, in the form of a <code>Partition</code>
                *       object.</p>
                */
            Partition?: Partition;
    }
    export namespace GetPartitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPartitionResponse) => any;
    }
    export interface GetPartitionIndexesRequest {
            /**
                * <p>The catalog ID where the table resides.</p>
                */
            CatalogId?: string;
            /**
                * <p>Specifies the name of a database from which you want to retrieve partition indexes.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>Specifies the name of a table for which you want to retrieve the partition indexes.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A continuation token, included if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace GetPartitionIndexesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPartitionIndexesRequest) => any;
    }
    export enum BackfillErrorCode {
            ENCRYPTED_PARTITION_ERROR = "ENCRYPTED_PARTITION_ERROR",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            INVALID_PARTITION_TYPE_DATA_ERROR = "INVALID_PARTITION_TYPE_DATA_ERROR",
            MISSING_PARTITION_VALUE_ERROR = "MISSING_PARTITION_VALUE_ERROR",
            UNSUPPORTED_PARTITION_CHARACTER_ERROR = "UNSUPPORTED_PARTITION_CHARACTER_ERROR"
    }
    /**
        * <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
        *
        * 	        <p>These errors give the details about why an index registration failed and provide a limited number of partitions in the response, so that you can fix the partitions at fault and try registering the index again. The most common set of errors that can occur are categorized as follows:</p>
        *
        * 	        <ul>
        *             <li>
        *                <p>EncryptedPartitionError: The partitions are encrypted.</p>
        *             </li>
        *             <li>
        *                <p>InvalidPartitionTypeDataError: The partition value doesn't match the data type for that partition column.</p>
        *             </li>
        *             <li>
        *                <p>MissingPartitionValueError: The partitions are encrypted.</p>
        *             </li>
        *             <li>
        *                <p>UnsupportedPartitionCharacterError: Characters inside the partition value are not supported. For example: U+0000 , U+0001, U+0002.</p>
        *             </li>
        *             <li>
        *                <p>InternalError: Any error which does not belong to other error codes.</p>
        *             </li>
        *          </ul>
        */
    export interface BackfillError {
            /**
                * <p>The error code for an error that occurred when registering partition indexes for an existing table.</p>
                */
            Code?: BackfillErrorCode | string;
            /**
                * <p>A list of a limited number of partitions in the response.</p>
                */
            Partitions?: PartitionValueList[];
    }
    export namespace BackfillError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BackfillError) => any;
    }
    export enum PartitionIndexStatus {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED"
    }
    /**
        * <p>A partition key pair consisting of a name and a type.</p>
        */
    export interface KeySchemaElement {
            /**
                * <p>The name of a partition key.</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of a partition key.</p>
                */
            Type: string | undefined;
    }
    export namespace KeySchemaElement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KeySchemaElement) => any;
    }
    /**
        * <p>A descriptor for a partition index in a table.</p>
        */
    export interface PartitionIndexDescriptor {
            /**
                * <p>The name of the partition index.</p>
                */
            IndexName: string | undefined;
            /**
                * <p>A list of one or more keys, as <code>KeySchemaElement</code> structures, for the partition index.</p>
                */
            Keys: KeySchemaElement[] | undefined;
            /**
                * <p>The status of the partition index. </p>
                *
                * 	        <p>The possible statuses are:</p>
                * 	        <ul>
                *             <li>
                *                <p>CREATING: The index is being created. When an index is in a CREATING state, the index or its table cannot be deleted.</p>
                *             </li>
                *             <li>
                *                <p>ACTIVE: The index creation succeeds.</p>
                *             </li>
                *             <li>
                *                <p>FAILED: The index creation fails. </p>
                *             </li>
                *             <li>
                *                <p>DELETING: The index is deleted from the list of indexes.</p>
                *             </li>
                *          </ul>
                */
            IndexStatus: PartitionIndexStatus | string | undefined;
            /**
                * <p>A list of errors that can occur when registering partition indexes for an existing table.</p>
                */
            BackfillErrors?: BackfillError[];
    }
    export namespace PartitionIndexDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartitionIndexDescriptor) => any;
    }
    export interface GetPartitionIndexesResponse {
            /**
                * <p>A list of index descriptors.</p>
                */
            PartitionIndexDescriptorList?: PartitionIndexDescriptor[];
            /**
                * <p>A continuation token, present if the current list segment is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace GetPartitionIndexesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPartitionIndexesResponse) => any;
    }
    /**
        * <p>Defines a non-overlapping region of a table's partitions, allowing
        *       multiple requests to be run in parallel.</p>
        */
    export interface Segment {
            /**
                * <p>The zero-based index number of the segment. For example, if the total number of segments
                *       is 4, <code>SegmentNumber</code> values range from 0 through 3.</p>
                */
            SegmentNumber: number | undefined;
            /**
                * <p>The total number of segments.</p>
                */
            TotalSegments: number | undefined;
    }
    export namespace Segment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Segment) => any;
    }
    export interface GetPartitionsRequest {
            /**
                * <p>The ID of the Data Catalog where the partitions in question reside. If none is provided,
                *       the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the partitions reside.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the partitions' table.</p>
                */
            TableName: string | undefined;
            /**
                * <p>An expression that filters the partitions to be returned.</p>
                *          <p>The expression uses SQL syntax similar to the SQL <code>WHERE</code> filter clause. The
                *       SQL statement parser <a href="http://jsqlparser.sourceforge.net/home.php">JSQLParser</a> parses the expression. </p>
                *          <p>
                *             <i>Operators</i>: The following are the operators that you can use in the
                *         <code>Expression</code> API call:</p>
                *          <dl>
                *             <dt>=</dt>
                *             <dd>
                *                <p>Checks whether the values of the two operands are equal; if yes, then the condition becomes
                *             true.</p>
                *                <p>Example: Assume 'variable a' holds 10 and 'variable b' holds 20. </p>
                *                <p>(a = b) is not true.</p>
                *             </dd>
                *             <dt>< ></dt>
                *             <dd>
                *                <p>Checks whether the values of two operands are equal; if the values are not equal,
                *             then the condition becomes true.</p>
                *                <p>Example: (a < > b) is true.</p>
                *             </dd>
                *             <dt>></dt>
                *             <dd>
                *                <p>Checks whether the value of the left operand is greater than the value of the right
                *             operand; if yes, then the condition becomes true.</p>
                *                <p>Example: (a > b) is not true.</p>
                *             </dd>
                *             <dt><</dt>
                *             <dd>
                *                <p>Checks whether the value of the left operand is less than the value of the right
                *             operand; if yes, then the condition becomes true.</p>
                *                <p>Example: (a < b) is true.</p>
                *             </dd>
                *             <dt>>=</dt>
                *             <dd>
                *                <p>Checks whether the value of the left operand is greater than or equal to the value
                *             of the right operand; if yes, then the condition becomes true.</p>
                *                <p>Example: (a >= b) is not true.</p>
                *             </dd>
                *             <dt><=</dt>
                *             <dd>
                *                <p>Checks whether the value of the left operand is less than or equal to the value of
                *             the right operand; if yes, then the condition becomes true.</p>
                *                <p>Example: (a <= b) is true.</p>
                *             </dd>
                *             <dt>AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL</dt>
                *             <dd>
                *                <p>Logical operators.</p>
                *             </dd>
                *          </dl>
                *          <p>
                *             <i>Supported Partition Key Types</i>: The following are the supported
                *       partition keys.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>string</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>date</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>timestamp</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>int</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>bigint</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>long</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>tinyint</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>smallint</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>decimal</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>If an type is encountered that is not valid, an exception is thrown. </p>
                *          <p>The following list shows the valid operators on each type. When you define a crawler, the
                *         <code>partitionKey</code> type is created as a <code>STRING</code>, to be compatible with the catalog
                *       partitions. </p>
                *
                *          <p>
                *             <i>Sample API Call</i>: </p>
                */
            Expression?: string;
            /**
                * <p>A continuation token, if this is not the first call to retrieve
                *       these partitions.</p>
                */
            NextToken?: string;
            /**
                * <p>The segment of the table's partitions to scan in this request.</p>
                */
            Segment?: Segment;
            /**
                * <p>The maximum number of partitions to return in a single response.</p>
                */
            MaxResults?: number;
            /**
                * <p>When true, specifies not returning the partition column schema. Useful when you are interested only in other partition attributes such as partition values or location. This approach avoids the problem of a large response by not returning duplicate data.</p>
                */
            ExcludeColumnSchema?: boolean;
            /**
                * <p>The transaction ID at which to read the partition contents.</p>
                */
            TransactionId?: string;
            /**
                * <p>The time as of when to read the partition contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
                */
            QueryAsOfTime?: Date;
    }
    export namespace GetPartitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPartitionsRequest) => any;
    }
    export interface GetPartitionsResponse {
            /**
                * <p>A list of requested partitions.</p>
                */
            Partitions?: Partition[];
            /**
                * <p>A continuation token, if the returned list of partitions does not include the last
                *       one.</p>
                */
            NextToken?: string;
    }
    export namespace GetPartitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPartitionsResponse) => any;
    }
    export interface GetPlanRequest {
            /**
                * <p>The list of mappings from a source table to target tables.</p>
                */
            Mapping: MappingEntry[] | undefined;
            /**
                * <p>The source table.</p>
                */
            Source: CatalogEntry | undefined;
            /**
                * <p>The target tables.</p>
                */
            Sinks?: CatalogEntry[];
            /**
                * <p>The parameters for the mapping.</p>
                */
            Location?: Location;
            /**
                * <p>The programming language of the code to perform the mapping.</p>
                */
            Language?: Language | string;
            /**
                * <p>A map to hold additional optional key-value parameters.</p>
                *
                * 	        <p>Currently, these key-value pairs are supported:</p>
                *
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>inferSchema</code>  —  Specifies whether to set <code>inferSchema</code> to true or false for the default script generated by an Glue job. For example, to set <code>inferSchema</code> to true, pass the following key value pair:</p>
                * 	              <p>
                *                   <code>--additional-plan-options-map '{"inferSchema":"true"}'</code>
                *                </p>
                * 	           </li>
                *          </ul>
                */
            AdditionalPlanOptionsMap?: Record<string, string>;
    }
    export namespace GetPlanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPlanRequest) => any;
    }
    export interface GetPlanResponse {
            /**
                * <p>A Python script to perform the mapping.</p>
                */
            PythonScript?: string;
            /**
                * <p>The Scala code to perform the mapping.</p>
                */
            ScalaCode?: string;
    }
    export namespace GetPlanResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPlanResponse) => any;
    }
    export interface GetRegistryInput {
            /**
                * <p>This is a wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
                */
            RegistryId: RegistryId | undefined;
    }
    export namespace GetRegistryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRegistryInput) => any;
    }
    export interface GetRegistryResponse {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>A description of the registry.</p>
                */
            Description?: string;
            /**
                * <p>The status of the registry.</p>
                */
            Status?: RegistryStatus | string;
            /**
                * <p>The date and time the registry was created.</p>
                */
            CreatedTime?: string;
            /**
                * <p>The date and time the registry was updated.</p>
                */
            UpdatedTime?: string;
    }
    export namespace GetRegistryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRegistryResponse) => any;
    }
    export interface GetResourcePoliciesRequest {
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
    }
    export namespace GetResourcePoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePoliciesRequest) => any;
    }
    /**
        * <p>A structure for returning a resource policy.</p>
        */
    export interface GluePolicy {
            /**
                * <p>Contains the requested policy document, in JSON format.</p>
                */
            PolicyInJson?: string;
            /**
                * <p>Contains the hash value associated with this policy.</p>
                */
            PolicyHash?: string;
            /**
                * <p>The date and time at which the policy was created.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The date and time at which the policy was last updated.</p>
                */
            UpdateTime?: Date;
    }
    export namespace GluePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GluePolicy) => any;
    }
    export interface GetResourcePoliciesResponse {
            /**
                * <p>A list of the individual resource policies and the account-level resource policy.</p>
                */
            GetResourcePoliciesResponseList?: GluePolicy[];
            /**
                * <p>A continuation token, if the returned list does not contain the last resource policy available.</p>
                */
            NextToken?: string;
    }
    export namespace GetResourcePoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePoliciesResponse) => any;
    }
    export interface GetResourcePolicyRequest {
            /**
                * <p>The ARN of the Glue resource for which to retrieve the resource policy. If not
                *       supplied, the Data Catalog resource policy is returned. Use <code>GetResourcePolicies</code>
                *       to view all existing resource policies. For more information see <a href="https://docs.aws.amazon.com/glue/latest/dg/glue-specifying-resource-arns.html">Specifying Glue Resource ARNs</a>.
                *     </p>
                */
            ResourceArn?: string;
    }
    export namespace GetResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyRequest) => any;
    }
    export interface GetResourcePolicyResponse {
            /**
                * <p>Contains the requested policy document, in JSON format.</p>
                */
            PolicyInJson?: string;
            /**
                * <p>Contains the hash value associated with this policy.</p>
                */
            PolicyHash?: string;
            /**
                * <p>The date and time at which the policy was created.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The date and time at which the policy was last updated.</p>
                */
            UpdateTime?: Date;
    }
    export namespace GetResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyResponse) => any;
    }
    export interface GetSchemaInput {
            /**
                * <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
                * 	        <ul>
                *             <li>
                *                <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *             <li>
                *                <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *          </ul>
                */
            SchemaId: SchemaId | undefined;
    }
    export namespace GetSchemaInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaInput) => any;
    }
    export interface GetSchemaResponse {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>A description of schema if specified when created</p>
                */
            Description?: string;
            /**
                * <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
                */
            DataFormat?: DataFormat | string;
            /**
                * <p>The compatibility mode of the schema.</p>
                */
            Compatibility?: Compatibility | string;
            /**
                * <p>The version number of the checkpoint (the last time the compatibility mode was changed).</p>
                */
            SchemaCheckpoint?: number;
            /**
                * <p>The latest version of the schema associated with the returned schema definition.</p>
                */
            LatestSchemaVersion?: number;
            /**
                * <p>The next version of the schema associated with the returned schema definition.</p>
                */
            NextSchemaVersion?: number;
            /**
                * <p>The status of the schema.</p>
                */
            SchemaStatus?: SchemaStatus | string;
            /**
                * <p>The date and time the schema was created.</p>
                */
            CreatedTime?: string;
            /**
                * <p>The date and time the schema was updated.</p>
                */
            UpdatedTime?: string;
    }
    export namespace GetSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaResponse) => any;
    }
    export interface GetSchemaByDefinitionInput {
            /**
                * <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
                * 	        <ul>
                *             <li>
                *                <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                *             </li>
                *             <li>
                *                <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                *             </li>
                *          </ul>
                */
            SchemaId: SchemaId | undefined;
            /**
                * <p>The definition of the schema for which schema details are required.</p>
                */
            SchemaDefinition: string | undefined;
    }
    export namespace GetSchemaByDefinitionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaByDefinitionInput) => any;
    }
    export interface GetSchemaByDefinitionResponse {
            /**
                * <p>The schema ID of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
                */
            DataFormat?: DataFormat | string;
            /**
                * <p>The status of the schema version.</p>
                */
            Status?: SchemaVersionStatus | string;
            /**
                * <p>The date and time the schema was created.</p>
                */
            CreatedTime?: string;
    }
    export namespace GetSchemaByDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaByDefinitionResponse) => any;
    }
    /**
        * <p>A structure containing the schema version information.</p>
        */
    export interface SchemaVersionNumber {
            /**
                * <p>The latest version available for the schema.</p>
                */
            LatestVersion?: boolean;
            /**
                * <p>The version number of the schema.</p>
                */
            VersionNumber?: number;
    }
    export namespace SchemaVersionNumber {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaVersionNumber) => any;
    }
    export interface GetSchemaVersionInput {
            /**
                * <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
                * 	        <ul>
                *             <li>
                *                <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *             <li>
                *                <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *          </ul>
                */
            SchemaId?: SchemaId;
            /**
                * <p>The <code>SchemaVersionId</code> of the schema version. This field is required for fetching by schema ID. Either this or the <code>SchemaId</code> wrapper has to be provided.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersionNumber?: SchemaVersionNumber;
    }
    export namespace GetSchemaVersionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaVersionInput) => any;
    }
    export interface GetSchemaVersionResponse {
            /**
                * <p>The <code>SchemaVersionId</code> of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The schema definition for the schema ID.</p>
                */
            SchemaDefinition?: string;
            /**
                * <p>The data format of the schema definition. Currently <code>AVRO</code>, <code>JSON</code> and <code>PROTOBUF</code> are supported.</p>
                */
            DataFormat?: DataFormat | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The version number of the schema.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The status of the schema version. </p>
                */
            Status?: SchemaVersionStatus | string;
            /**
                * <p>The date and time the schema version was created.</p>
                */
            CreatedTime?: string;
    }
    export namespace GetSchemaVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaVersionResponse) => any;
    }
    export enum SchemaDiffType {
            SYNTAX_DIFF = "SYNTAX_DIFF"
    }
    export interface GetSchemaVersionsDiffInput {
            /**
                * <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
                * 	        <ul>
                *             <li>
                *                <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                *             </li>
                *             <li>
                *                <p>SchemaId$SchemaName: The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided.</p>
                *             </li>
                *          </ul>
                */
            SchemaId: SchemaId | undefined;
            /**
                * <p>The first of the two schema versions to be compared.</p>
                */
            FirstSchemaVersionNumber: SchemaVersionNumber | undefined;
            /**
                * <p>The second of the two schema versions to be compared.</p>
                */
            SecondSchemaVersionNumber: SchemaVersionNumber | undefined;
            /**
                * <p>Refers to <code>SYNTAX_DIFF</code>, which is the currently supported diff type.</p>
                */
            SchemaDiffType: SchemaDiffType | string | undefined;
    }
    export namespace GetSchemaVersionsDiffInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaVersionsDiffInput) => any;
    }
    export interface GetSchemaVersionsDiffResponse {
            /**
                * <p>The difference between schemas as a string in JsonPatch format.</p>
                */
            Diff?: string;
    }
    export namespace GetSchemaVersionsDiffResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaVersionsDiffResponse) => any;
    }
    export interface GetSecurityConfigurationRequest {
            /**
                * <p>The name of the security configuration to retrieve.</p>
                */
            Name: string | undefined;
    }
    export namespace GetSecurityConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSecurityConfigurationRequest) => any;
    }
    /**
        * <p>Specifies a security configuration.</p>
        */
    export interface SecurityConfiguration {
            /**
                * <p>The name of the security configuration.</p>
                */
            Name?: string;
            /**
                * <p>The time at which this security configuration was created.</p>
                */
            CreatedTimeStamp?: Date;
            /**
                * <p>The encryption configuration associated with this security configuration.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
    }
    export namespace SecurityConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecurityConfiguration) => any;
    }
    export interface GetSecurityConfigurationResponse {
            /**
                * <p>The requested security configuration.</p>
                */
            SecurityConfiguration?: SecurityConfiguration;
    }
    export namespace GetSecurityConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSecurityConfigurationResponse) => any;
    }
    export interface GetSecurityConfigurationsRequest {
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace GetSecurityConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSecurityConfigurationsRequest) => any;
    }
    export interface GetSecurityConfigurationsResponse {
            /**
                * <p>A list of security configurations.</p>
                */
            SecurityConfigurations?: SecurityConfiguration[];
            /**
                * <p>A continuation token, if there are more security
                *       configurations to return.</p>
                */
            NextToken?: string;
    }
    export namespace GetSecurityConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSecurityConfigurationsResponse) => any;
    }
    export interface GetSessionRequest {
            /**
                * <p>The ID of the session. </p>
                */
            Id: string | undefined;
            /**
                * <p>The origin of the request. </p>
                */
            RequestOrigin?: string;
    }
    export namespace GetSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSessionRequest) => any;
    }
    export interface GetSessionResponse {
            /**
                * <p>The session object is returned in the response.</p>
                */
            Session?: Session;
    }
    export namespace GetSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSessionResponse) => any;
    }
    export interface GetStatementRequest {
            /**
                * <p>The Session ID of the statement.</p>
                */
            SessionId: string | undefined;
            /**
                * <p>The Id of the statement.</p>
                */
            Id: number | undefined;
            /**
                * <p>The origin of the request.</p>
                */
            RequestOrigin?: string;
    }
    export namespace GetStatementRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStatementRequest) => any;
    }
    /**
        * <p>The code execution output in JSON format.</p>
        */
    export interface StatementOutputData {
            /**
                * <p>The code execution output in text format.</p>
                */
            TextPlain?: string;
    }
    export namespace StatementOutputData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatementOutputData) => any;
    }
    export enum StatementState {
            AVAILABLE = "AVAILABLE",
            CANCELLED = "CANCELLED",
            CANCELLING = "CANCELLING",
            ERROR = "ERROR",
            RUNNING = "RUNNING",
            WAITING = "WAITING"
    }
    /**
        * <p>The code execution output in JSON format.</p>
        */
    export interface StatementOutput {
            /**
                * <p>The code execution output.</p>
                */
            Data?: StatementOutputData;
            /**
                * <p>The execution count of the output.</p>
                */
            ExecutionCount?: number;
            /**
                * <p>The status of the code execution output.</p>
                */
            Status?: StatementState | string;
            /**
                * <p>The name of the error in the output.</p>
                */
            ErrorName?: string;
            /**
                * <p>The error value of the output.</p>
                */
            ErrorValue?: string;
            /**
                * <p>The traceback of the output.</p>
                */
            Traceback?: string[];
    }
    export namespace StatementOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatementOutput) => any;
    }
    /**
        * <p>The statement or request for a particular action to occur in a session.</p>
        */
    export interface Statement {
            /**
                * <p>The ID of the statement.</p>
                */
            Id?: number;
            /**
                * <p>The execution code of the statement.</p>
                */
            Code?: string;
            /**
                * <p>The state while request is actioned.</p>
                */
            State?: StatementState | string;
            /**
                * <p>The output in JSON.</p>
                */
            Output?: StatementOutput;
            /**
                * <p>The code execution progress.</p>
                */
            Progress?: number;
            /**
                * <p>The unix time and date that the job definition was started.</p>
                */
            StartedOn?: number;
            /**
                * <p>The unix time and date that the job definition was completed.</p>
                */
            CompletedOn?: number;
    }
    export namespace Statement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Statement) => any;
    }
    export interface GetStatementResponse {
            /**
                * <p>Returns the statement.</p>
                */
            Statement?: Statement;
    }
    export namespace GetStatementResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStatementResponse) => any;
    }
    export interface GetTableRequest {
            /**
                * <p>The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the database in the catalog in which the table resides.
                *       For Hive compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table for which to retrieve the definition. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            Name: string | undefined;
            /**
                * <p>The transaction ID at which to read the table contents. </p>
                */
            TransactionId?: string;
            /**
                * <p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
                */
            QueryAsOfTime?: Date;
    }
    export namespace GetTableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableRequest) => any;
    }
    /**
        * <p>Represents a collection of related data organized in columns and rows.</p>
        */
    export interface Table {
            /**
                * <p>The table name. For Hive compatibility, this must be entirely
                *       lowercase.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the database where the table metadata resides.
                *       For Hive compatibility, this must be all lowercase.</p>
                */
            DatabaseName?: string;
            /**
                * <p>A description of the table.</p>
                */
            Description?: string;
            /**
                * <p>The owner of the table.</p>
                */
            Owner?: string;
            /**
                * <p>The time when the table definition was created in the Data Catalog.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The last time that the table was updated.</p>
                */
            UpdateTime?: Date;
            /**
                * <p>The last time that the table was accessed. This is usually taken from HDFS, and might not
                *       be reliable.</p>
                */
            LastAccessTime?: Date;
            /**
                * <p>The last time that column statistics were computed for this table.</p>
                */
            LastAnalyzedTime?: Date;
            /**
                * <p>The retention time for this table.</p>
                */
            Retention?: number;
            /**
                * <p>A storage descriptor containing information about the physical storage
                *       of this table.</p>
                */
            StorageDescriptor?: StorageDescriptor;
            /**
                * <p>A list of columns by which the table is partitioned. Only primitive
                *       types are supported as partition keys.</p>
                * 	        <p>When you create a table used by Amazon Athena, and you do not specify any
                *         <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to
                *       an empty list. For example:</p>
                *          <p>
                *             <code>"PartitionKeys": []</code>
                *          </p>
                */
            PartitionKeys?: Column[];
            /**
                * <p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>
                */
            ViewOriginalText?: string;
            /**
                * <p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>
                */
            ViewExpandedText?: string;
            /**
                * <p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>
                */
            TableType?: string;
            /**
                * <p>These key-value pairs define properties associated with the table.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>The person or entity who created the table.</p>
                */
            CreatedBy?: string;
            /**
                * <p>Indicates whether the table has been registered with Lake Formation.</p>
                */
            IsRegisteredWithLakeFormation?: boolean;
            /**
                * <p>A <code>TableIdentifier</code> structure that describes a target table for resource linking.</p>
                */
            TargetTable?: TableIdentifier;
            /**
                * <p>The ID of the Data Catalog in which the table resides.</p>
                */
            CatalogId?: string;
            /**
                * <p>The ID of the table version.</p>
                */
            VersionId?: string;
    }
    export namespace Table {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Table) => any;
    }
    export interface GetTableResponse {
            /**
                * <p>The <code>Table</code> object that defines the specified table.</p>
                */
            Table?: Table;
    }
    export namespace GetTableResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableResponse) => any;
    }
    export interface GetTablesRequest {
            /**
                * <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database in the catalog whose tables to list. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>A regular expression pattern. If present, only those tables
                *       whose names match the pattern are returned.</p>
                */
            Expression?: string;
            /**
                * <p>A continuation token, included if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of tables to return in a single response.</p>
                */
            MaxResults?: number;
            /**
                * <p>The transaction ID at which to read the table contents.</p>
                */
            TransactionId?: string;
            /**
                * <p>The time as of when to read the table contents. If not set, the most recent transaction commit time will be used. Cannot be specified along with <code>TransactionId</code>.</p>
                */
            QueryAsOfTime?: Date;
    }
    export namespace GetTablesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTablesRequest) => any;
    }
    export interface GetTablesResponse {
            /**
                * <p>A list of the requested <code>Table</code> objects.</p>
                */
            TableList?: Table[];
            /**
                * <p>A continuation token, present if the current list segment is
                *       not the last.</p>
                */
            NextToken?: string;
    }
    export namespace GetTablesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTablesResponse) => any;
    }
    export interface GetTableVersionRequest {
            /**
                * <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database in the catalog in which the table resides. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table. For Hive compatibility,
                *       this name is entirely lowercase.</p>
                */
            TableName: string | undefined;
            /**
                * <p>The ID value of the table version to be retrieved. A <code>VersionID</code> is a string representation of an integer. Each version is incremented by 1. </p>
                */
            VersionId?: string;
    }
    export namespace GetTableVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableVersionRequest) => any;
    }
    /**
        * <p>Specifies a version of a table.</p>
        */
    export interface TableVersion {
            /**
                * <p>The table in question.</p>
                */
            Table?: Table;
            /**
                * <p>The ID value that identifies this table version. A <code>VersionId</code> is a string representation of an integer. Each version is incremented by 1.</p>
                */
            VersionId?: string;
    }
    export namespace TableVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableVersion) => any;
    }
    export interface GetTableVersionResponse {
            /**
                * <p>The requested table version.</p>
                */
            TableVersion?: TableVersion;
    }
    export namespace GetTableVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableVersionResponse) => any;
    }
    export interface GetTableVersionsRequest {
            /**
                * <p>The ID of the Data Catalog where the tables reside. If none is provided, the Amazon Web Services account
                *       ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The database in the catalog in which the table resides. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the table. For Hive
                *       compatibility, this name is entirely lowercase.</p>
                */
            TableName: string | undefined;
            /**
                * <p>A continuation token, if this is not the first call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of table versions to return in one response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetTableVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableVersionsRequest) => any;
    }
    export interface GetTableVersionsResponse {
            /**
                * <p>A list of strings identifying available versions of the
                *       specified table.</p>
                */
            TableVersions?: TableVersion[];
            /**
                * <p>A continuation token, if the list of available versions does
                *       not include the last one.</p>
                */
            NextToken?: string;
    }
    export namespace GetTableVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTableVersionsResponse) => any;
    }
    export interface GetTagsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource for which to retrieve tags.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace GetTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTagsRequest) => any;
    }
    export interface GetTagsResponse {
            /**
                * <p>The requested tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace GetTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTagsResponse) => any;
    }
    export interface GetTriggerRequest {
            /**
                * <p>The name of the trigger to retrieve.</p>
                */
            Name: string | undefined;
    }
    export namespace GetTriggerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTriggerRequest) => any;
    }
    export interface GetTriggerResponse {
            /**
                * <p>The requested trigger definition.</p>
                */
            Trigger?: Trigger;
    }
    export namespace GetTriggerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTriggerResponse) => any;
    }
    export interface GetTriggersRequest {
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The name of the job to retrieve triggers for. The trigger that can start this job is
                *       returned, and if there is no such trigger, all triggers are returned.</p>
                */
            DependentJobName?: string;
            /**
                * <p>The maximum size of the response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetTriggersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTriggersRequest) => any;
    }
    export interface GetTriggersResponse {
            /**
                * <p>A list of triggers for the specified job.</p>
                */
            Triggers?: Trigger[];
            /**
                * <p>A continuation token, if not all the requested triggers
                *       have yet been returned.</p>
                */
            NextToken?: string;
    }
    export namespace GetTriggersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTriggersResponse) => any;
    }
    export enum PermissionType {
            CELL_FILTER_PERMISSION = "CELL_FILTER_PERMISSION",
            COLUMN_PERMISSION = "COLUMN_PERMISSION"
    }
    export interface GetUnfilteredPartitionMetadataRequest {
            CatalogId: string | undefined;
            DatabaseName: string | undefined;
            TableName: string | undefined;
            PartitionValues: string[] | undefined;
            /**
                * <p>A structure containing information for audit.</p>
                */
            AuditContext?: AuditContext;
            SupportedPermissionTypes: (PermissionType | string)[] | undefined;
    }
    export namespace GetUnfilteredPartitionMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUnfilteredPartitionMetadataRequest) => any;
    }
    export interface GetUnfilteredPartitionMetadataResponse {
            /**
                * <p>Represents a slice of table data.</p>
                */
            Partition?: Partition;
            AuthorizedColumns?: string[];
            IsRegisteredWithLakeFormation?: boolean;
    }
    export namespace GetUnfilteredPartitionMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUnfilteredPartitionMetadataResponse) => any;
    }
    export class PermissionTypeMismatchException extends __BaseException {
            readonly name: "PermissionTypeMismatchException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PermissionTypeMismatchException, __BaseException>);
    }
    export interface GetUnfilteredPartitionsMetadataRequest {
            CatalogId: string | undefined;
            DatabaseName: string | undefined;
            TableName: string | undefined;
            Expression?: string;
            /**
                * <p>A structure containing information for audit.</p>
                */
            AuditContext?: AuditContext;
            SupportedPermissionTypes: (PermissionType | string)[] | undefined;
            NextToken?: string;
            /**
                * <p>Defines a non-overlapping region of a table's partitions, allowing
                *       multiple requests to be run in parallel.</p>
                */
            Segment?: Segment;
            MaxResults?: number;
    }
    export namespace GetUnfilteredPartitionsMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUnfilteredPartitionsMetadataRequest) => any;
    }
    export interface UnfilteredPartition {
            /**
                * <p>Represents a slice of table data.</p>
                */
            Partition?: Partition;
            AuthorizedColumns?: string[];
            IsRegisteredWithLakeFormation?: boolean;
    }
    export namespace UnfilteredPartition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnfilteredPartition) => any;
    }
    export interface GetUnfilteredPartitionsMetadataResponse {
            UnfilteredPartitions?: UnfilteredPartition[];
            NextToken?: string;
    }
    export namespace GetUnfilteredPartitionsMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUnfilteredPartitionsMetadataResponse) => any;
    }
    export interface GetUnfilteredTableMetadataRequest {
            CatalogId: string | undefined;
            DatabaseName: string | undefined;
            Name: string | undefined;
            /**
                * <p>A structure containing information for audit.</p>
                */
            AuditContext?: AuditContext;
            SupportedPermissionTypes: (PermissionType | string)[] | undefined;
    }
    export namespace GetUnfilteredTableMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUnfilteredTableMetadataRequest) => any;
    }
    export interface ColumnRowFilter {
            ColumnName?: string;
            RowFilterExpression?: string;
    }
    export namespace ColumnRowFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnRowFilter) => any;
    }
    export interface GetUnfilteredTableMetadataResponse {
            /**
                * <p>Represents a collection of related data organized in columns and rows.</p>
                */
            Table?: Table;
            AuthorizedColumns?: string[];
            IsRegisteredWithLakeFormation?: boolean;
            CellFilters?: ColumnRowFilter[];
    }
    export namespace GetUnfilteredTableMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUnfilteredTableMetadataResponse) => any;
    }
    export interface GetUserDefinedFunctionRequest {
            /**
                * <p>The ID of the Data Catalog where the function to be retrieved is located. If none is
                *       provided, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the function is located.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of the function.</p>
                */
            FunctionName: string | undefined;
    }
    export namespace GetUserDefinedFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserDefinedFunctionRequest) => any;
    }
    /**
        * <p>Represents the equivalent of a Hive user-defined function
        *       (<code>UDF</code>) definition.</p>
        */
    export interface UserDefinedFunction {
            /**
                * <p>The name of the function.</p>
                */
            FunctionName?: string;
            /**
                * <p>The name of the catalog database that contains the function.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The Java class that contains the function code.</p>
                */
            ClassName?: string;
            /**
                * <p>The owner of the function.</p>
                */
            OwnerName?: string;
            /**
                * <p>The owner type.</p>
                */
            OwnerType?: PrincipalType | string;
            /**
                * <p>The time at which the function was created.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The resource URIs for the function.</p>
                */
            ResourceUris?: ResourceUri[];
            /**
                * <p>The ID of the Data Catalog in which the function resides.</p>
                */
            CatalogId?: string;
    }
    export namespace UserDefinedFunction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserDefinedFunction) => any;
    }
    export interface GetUserDefinedFunctionResponse {
            /**
                * <p>The requested function definition.</p>
                */
            UserDefinedFunction?: UserDefinedFunction;
    }
    export namespace GetUserDefinedFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserDefinedFunctionResponse) => any;
    }
    export interface GetUserDefinedFunctionsRequest {
            /**
                * <p>The ID of the Data Catalog where the functions to be retrieved are located. If none is
                *       provided, the Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of the catalog database where the functions are located. If none is provided, functions from all the
                *       databases across the catalog will be returned.</p>
                */
            DatabaseName?: string;
            /**
                * <p>An optional function-name pattern string that filters the function
                *       definitions returned.</p>
                */
            Pattern: string | undefined;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of functions to return in one response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetUserDefinedFunctionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserDefinedFunctionsRequest) => any;
    }
    export interface GetUserDefinedFunctionsResponse {
            /**
                * <p>A list of requested function definitions.</p>
                */
            UserDefinedFunctions?: UserDefinedFunction[];
            /**
                * <p>A continuation token, if the list of functions returned does
                *       not include the last requested function.</p>
                */
            NextToken?: string;
    }
    export namespace GetUserDefinedFunctionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserDefinedFunctionsResponse) => any;
    }
    export interface GetWorkflowRequest {
            /**
                * <p>The name of the workflow to retrieve.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether to include a graph when returning the workflow resource metadata.</p>
                */
            IncludeGraph?: boolean;
    }
    export namespace GetWorkflowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowRequest) => any;
    }
    export interface GetWorkflowResponse {
            /**
                * <p>The resource metadata for the workflow.</p>
                */
            Workflow?: Workflow;
    }
    export namespace GetWorkflowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowResponse) => any;
    }
    export interface GetWorkflowRunRequest {
            /**
                * <p>Name of the workflow being run.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ID of the workflow run.</p>
                */
            RunId: string | undefined;
            /**
                * <p>Specifies whether to include the workflow graph in response or not.</p>
                */
            IncludeGraph?: boolean;
    }
    export namespace GetWorkflowRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowRunRequest) => any;
    }
    export interface GetWorkflowRunResponse {
            /**
                * <p>The requested workflow run metadata.</p>
                */
            Run?: WorkflowRun;
    }
    export namespace GetWorkflowRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowRunResponse) => any;
    }
    export interface GetWorkflowRunPropertiesRequest {
            /**
                * <p>Name of the workflow which was run.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ID of the workflow run whose run properties should be returned.</p>
                */
            RunId: string | undefined;
    }
    export namespace GetWorkflowRunPropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowRunPropertiesRequest) => any;
    }
    export interface GetWorkflowRunPropertiesResponse {
            /**
                * <p>The workflow run properties which were set during the specified run.</p>
                */
            RunProperties?: Record<string, string>;
    }
    export namespace GetWorkflowRunPropertiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowRunPropertiesResponse) => any;
    }
    export interface GetWorkflowRunsRequest {
            /**
                * <p>Name of the workflow whose metadata of runs should be returned.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether to include the workflow graph in response or not.</p>
                */
            IncludeGraph?: boolean;
            /**
                * <p>The maximum size of the response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of workflow runs to be included in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetWorkflowRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowRunsRequest) => any;
    }
    export interface GetWorkflowRunsResponse {
            /**
                * <p>A list of workflow run metadata objects.</p>
                */
            Runs?: WorkflowRun[];
            /**
                * <p>A continuation token, if not all requested workflow runs have been returned.</p>
                */
            NextToken?: string;
    }
    export namespace GetWorkflowRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorkflowRunsResponse) => any;
    }
    export interface ImportCatalogToGlueRequest {
            /**
                * <p>The ID of the catalog to import. Currently, this should be the Amazon Web Services account ID.</p>
                */
            CatalogId?: string;
    }
    export namespace ImportCatalogToGlueRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportCatalogToGlueRequest) => any;
    }
    export interface ImportCatalogToGlueResponse {
    }
    export namespace ImportCatalogToGlueResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportCatalogToGlueResponse) => any;
    }
    export interface ListBlueprintsRequest {
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Filters the list by an Amazon Web Services resource tag.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListBlueprintsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBlueprintsRequest) => any;
    }
    export interface ListBlueprintsResponse {
            /**
                * <p>List of names of blueprints in the account.</p>
                */
            Blueprints?: string[];
            /**
                * <p>A continuation token, if not all blueprint names have been returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListBlueprintsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBlueprintsResponse) => any;
    }
    export interface ListCrawlersRequest {
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies to return only these tagged resources.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListCrawlersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCrawlersRequest) => any;
    }
    export interface ListCrawlersResponse {
            /**
                * <p>The names of all crawlers in the account, or the crawlers with the specified tags.</p>
                */
            CrawlerNames?: string[];
            /**
                * <p>A continuation token, if the returned list does not contain the
                *       last metric available.</p>
                */
            NextToken?: string;
    }
    export namespace ListCrawlersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCrawlersResponse) => any;
    }
    export enum FieldName {
            CRAWL_ID = "CRAWL_ID",
            DPU_HOUR = "DPU_HOUR",
            END_TIME = "END_TIME",
            START_TIME = "START_TIME",
            STATE = "STATE"
    }
    export enum FilterOperator {
            EQ = "EQ",
            GE = "GE",
            GT = "GT",
            LE = "LE",
            LT = "LT",
            NE = "NE"
    }
    /**
        * <p>A list of fields, comparators and value that you can use to filter the crawler runs for a specified crawler.</p>
        */
    export interface CrawlsFilter {
            /**
                * <p>A key used to filter the crawler runs for a specified crawler. Valid values for each of the field names are:</p>
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>CRAWL_ID</code>: A string representing the UUID identifier for a crawl.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>STATE</code>: A string representing the state of the crawl.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>START_TIME</code> and <code>END_TIME</code>: The epoch timestamp in milliseconds.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DPU_HOUR</code>: The number of data processing unit (DPU) hours used for the crawl.</p>
                *             </li>
                *          </ul>
                */
            FieldName?: FieldName | string;
            /**
                * <p>A defined comparator that operates on the value. The available operators are:</p>
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>GT</code>: Greater than.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>GE</code>: Greater than or equal to.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LT</code>: Less than.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LE</code>: Less than or equal to.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>EQ</code>: Equal to.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NE</code>: Not equal to.</p>
                *             </li>
                *          </ul>
                */
            FilterOperator?: FilterOperator | string;
            /**
                * <p>The value provided for comparison on the crawl field. </p>
                */
            FieldValue?: string;
    }
    export namespace CrawlsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrawlsFilter) => any;
    }
    export interface ListCrawlsRequest {
            /**
                * <p>The name of the crawler whose runs you want to retrieve.</p>
                */
            CrawlerName: string | undefined;
            /**
                * <p>The maximum number of results to return. The default is 20, and maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Filters the crawls by the criteria you specify in a list of <code>CrawlsFilter</code> objects.</p>
                */
            Filters?: CrawlsFilter[];
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace ListCrawlsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCrawlsRequest) => any;
    }
    export enum CrawlerHistoryState {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            STOPPED = "STOPPED"
    }
    /**
        * <p>Contains the information for a run of a crawler.</p>
        */
    export interface CrawlerHistory {
            /**
                * <p>A UUID identifier for each crawl.</p>
                */
            CrawlId?: string;
            /**
                * <p>The state of the crawl.</p>
                */
            State?: CrawlerHistoryState | string;
            /**
                * <p>The date and time on which the crawl started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The date and time on which the crawl ended.</p>
                */
            EndTime?: Date;
            /**
                * <p>A run summary for the specific crawl in JSON. Contains the catalog tables and partitions that were added, updated, or deleted.</p>
                */
            Summary?: string;
            /**
                * <p>If an error occurred, the error message associated with the crawl.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The log group associated with the crawl.</p>
                */
            LogGroup?: string;
            /**
                * <p>The log stream associated with the crawl.</p>
                */
            LogStream?: string;
            /**
                * <p>The prefix for a CloudWatch message about this crawl.</p>
                */
            MessagePrefix?: string;
            /**
                * <p>The number of data processing units (DPU) used in hours for the crawl.</p>
                */
            DPUHour?: number;
    }
    export namespace CrawlerHistory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrawlerHistory) => any;
    }
    export interface ListCrawlsResponse {
            /**
                * <p>A list of <code>CrawlerHistory</code> objects representing the crawl runs that meet your criteria.</p>
                */
            Crawls?: CrawlerHistory[];
            /**
                * <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace ListCrawlsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCrawlsResponse) => any;
    }
    export interface ListCustomEntityTypesRequest {
            /**
                * <p>A paginated token to offset the results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListCustomEntityTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCustomEntityTypesRequest) => any;
    }
    export interface ListCustomEntityTypesResponse {
            /**
                * <p>A list of <code>CustomEntityType</code> objects representing custom patterns.</p>
                */
            CustomEntityTypes?: CustomEntityType[];
            /**
                * <p>A pagination token, if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListCustomEntityTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCustomEntityTypesResponse) => any;
    }
    export interface ListDevEndpointsRequest {
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specifies to return only these tagged resources.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListDevEndpointsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevEndpointsRequest) => any;
    }
    export interface ListDevEndpointsResponse {
            /**
                * <p>The names of all the <code>DevEndpoint</code>s in the account, or the
                *         <code>DevEndpoint</code>s with the specified tags.</p>
                */
            DevEndpointNames?: string[];
            /**
                * <p>A continuation token, if the returned list does not contain the
                *       last metric available.</p>
                */
            NextToken?: string;
    }
    export namespace ListDevEndpointsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevEndpointsResponse) => any;
    }
    export interface ListJobsRequest {
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specifies to return only these tagged resources.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsRequest) => any;
    }
    export interface ListJobsResponse {
            /**
                * <p>The names of all jobs in the account, or the jobs with the specified tags.</p>
                */
            JobNames?: string[];
            /**
                * <p>A continuation token, if the returned list does not contain the
                *       last metric available.</p>
                */
            NextToken?: string;
    }
    export namespace ListJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsResponse) => any;
    }
    export interface ListMLTransformsRequest {
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>A <code>TransformFilterCriteria</code> used to filter the machine learning transforms.</p>
                */
            Filter?: TransformFilterCriteria;
            /**
                * <p>A <code>TransformSortCriteria</code> used to sort the machine learning transforms.</p>
                */
            Sort?: TransformSortCriteria;
            /**
                * <p>Specifies to return only these tagged resources.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListMLTransformsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMLTransformsRequest) => any;
    }
    export interface ListMLTransformsResponse {
            /**
                * <p>The identifiers of all the machine learning transforms in the account, or the
                *         machine learning transforms with the specified tags.</p>
                */
            TransformIds: string[] | undefined;
            /**
                * <p>A continuation token, if the returned list does not contain the
                *       last metric available.</p>
                */
            NextToken?: string;
    }
    export namespace ListMLTransformsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMLTransformsResponse) => any;
    }
    export interface ListRegistriesInput {
            /**
                * <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace ListRegistriesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRegistriesInput) => any;
    }
    /**
        * <p>A structure containing the details for a registry.</p>
        */
    export interface RegistryListItem {
            /**
                * <p>The name of the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the registry.</p>
                */
            RegistryArn?: string;
            /**
                * <p>A description of the registry.</p>
                */
            Description?: string;
            /**
                * <p>The status of the registry.</p>
                */
            Status?: RegistryStatus | string;
            /**
                * <p>The data the registry was created.</p>
                */
            CreatedTime?: string;
            /**
                * <p>The date the registry was updated.</p>
                */
            UpdatedTime?: string;
    }
    export namespace RegistryListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegistryListItem) => any;
    }
    export interface ListRegistriesResponse {
            /**
                * <p>An array of <code>RegistryDetailedListItem</code> objects containing minimal details of each registry.</p>
                */
            Registries?: RegistryListItem[];
            /**
                * <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace ListRegistriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRegistriesResponse) => any;
    }
    export interface ListSchemasInput {
            /**
                * <p>A wrapper structure that may contain the registry name and Amazon Resource Name (ARN).</p>
                */
            RegistryId?: RegistryId;
            /**
                * <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace ListSchemasInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemasInput) => any;
    }
    /**
        * <p>An object that contains minimal details for a schema.</p>
        */
    export interface SchemaListItem {
            /**
                * <p>the name of the registry where the schema resides.</p>
                */
            RegistryName?: string;
            /**
                * <p>The name of the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>A description for the schema.</p>
                */
            Description?: string;
            /**
                * <p>The status of the schema.</p>
                */
            SchemaStatus?: SchemaStatus | string;
            /**
                * <p>The date and time that a schema was created.</p>
                */
            CreatedTime?: string;
            /**
                * <p>The date and time that a schema was updated.</p>
                */
            UpdatedTime?: string;
    }
    export namespace SchemaListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaListItem) => any;
    }
    export interface ListSchemasResponse {
            /**
                * <p>An array of <code>SchemaListItem</code> objects containing details of each schema.</p>
                */
            Schemas?: SchemaListItem[];
            /**
                * <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace ListSchemasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemasResponse) => any;
    }
    export interface ListSchemaVersionsInput {
            /**
                * <p>This is a wrapper structure to contain schema identity fields. The structure contains:</p>
                * 	        <ul>
                *             <li>
                *                <p>SchemaId$SchemaArn: The Amazon Resource Name (ARN) of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *             <li>
                *                <p>SchemaId$SchemaName: The name of the schema. Either <code>SchemaArn</code> or <code>SchemaName</code> and <code>RegistryName</code> has to be provided.</p>
                *             </li>
                *          </ul>
                */
            SchemaId: SchemaId | undefined;
            /**
                * <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace ListSchemaVersionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemaVersionsInput) => any;
    }
    /**
        * <p>An object containing the details about a schema version.</p>
        */
    export interface SchemaVersionListItem {
            /**
                * <p>The Amazon Resource Name (ARN) of the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The unique identifier of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The version number of the schema.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The status of the schema version.</p>
                */
            Status?: SchemaVersionStatus | string;
            /**
                * <p>The date and time the schema version was created.</p>
                */
            CreatedTime?: string;
    }
    export namespace SchemaVersionListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaVersionListItem) => any;
    }
    export interface ListSchemaVersionsResponse {
            /**
                * <p>An array of <code>SchemaVersionList</code> objects containing details of each schema version.</p>
                */
            Schemas?: SchemaVersionListItem[];
            /**
                * <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace ListSchemaVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchemaVersionsResponse) => any;
    }
    export interface ListSessionsRequest {
            /**
                * <p>The token for the next set of results, or null if there are no more result. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results. </p>
                */
            MaxResults?: number;
            /**
                * <p>Tags belonging to the session. </p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The origin of the request. </p>
                */
            RequestOrigin?: string;
    }
    export namespace ListSessionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSessionsRequest) => any;
    }
    export interface ListSessionsResponse {
            /**
                * <p>Returns the ID of the session. </p>
                */
            Ids?: string[];
            /**
                * <p>Returns the session object. </p>
                */
            Sessions?: Session[];
            /**
                * <p>The token for the next set of results, or null if there are no more result. </p>
                */
            NextToken?: string;
    }
    export namespace ListSessionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSessionsResponse) => any;
    }
    export interface ListStatementsRequest {
            /**
                * <p>The Session ID of the statements.</p>
                */
            SessionId: string | undefined;
            /**
                * <p>The origin of the request to list statements.</p>
                */
            RequestOrigin?: string;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace ListStatementsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStatementsRequest) => any;
    }
    export interface ListStatementsResponse {
            /**
                * <p>Returns the list of statements.</p>
                */
            Statements?: Statement[];
            /**
                * <p>A continuation token, if not all statements have yet been returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListStatementsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStatementsResponse) => any;
    }
    export interface ListTriggersRequest {
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p> The name of the job for which to retrieve triggers. The trigger that can start this job
                *       is returned. If there is no such trigger, all triggers are returned.</p>
                */
            DependentJobName?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specifies to return only these tagged resources.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTriggersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTriggersRequest) => any;
    }
    export interface ListTriggersResponse {
            /**
                * <p>The names of all triggers in the account, or the triggers with the specified tags.</p>
                */
            TriggerNames?: string[];
            /**
                * <p>A continuation token, if the returned list does not contain the
                *       last metric available.</p>
                */
            NextToken?: string;
    }
    export namespace ListTriggersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTriggersResponse) => any;
    }
    export interface ListWorkflowsRequest {
            /**
                * <p>A continuation token, if this is a continuation request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum size of a list to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListWorkflowsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkflowsRequest) => any;
    }
    export interface ListWorkflowsResponse {
            /**
                * <p>List of names of workflows in the account.</p>
                */
            Workflows?: string[];
            /**
                * <p>A continuation token, if not all workflow names have been returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListWorkflowsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkflowsResponse) => any;
    }
    export interface PutDataCatalogEncryptionSettingsRequest {
            /**
                * <p>The ID of the Data Catalog to set the security configuration for. If none is provided, the
                *       Amazon Web Services account ID is used by default.</p>
                */
            CatalogId?: string;
            /**
                * <p>The security configuration to set.</p>
                */
            DataCatalogEncryptionSettings: DataCatalogEncryptionSettings | undefined;
    }
    export namespace PutDataCatalogEncryptionSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDataCatalogEncryptionSettingsRequest) => any;
    }
    export interface PutDataCatalogEncryptionSettingsResponse {
    }
    export namespace PutDataCatalogEncryptionSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDataCatalogEncryptionSettingsResponse) => any;
    }
    export enum EnableHybridValues {
            FALSE = "FALSE",
            TRUE = "TRUE"
    }
    export enum ExistCondition {
            MUST_EXIST = "MUST_EXIST",
            NONE = "NONE",
            NOT_EXIST = "NOT_EXIST"
    }
    export interface PutResourcePolicyRequest {
            /**
                * <p>Contains the policy document to set, in JSON format.</p>
                */
            PolicyInJson: string | undefined;
            /**
                * <p>Do not use. For internal use only.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The hash value returned when the previous policy was set using
                *         <code>PutResourcePolicy</code>. Its purpose is to prevent concurrent modifications of a
                *       policy. Do not use this parameter if no previous policy has been set.</p>
                */
            PolicyHashCondition?: string;
            /**
                * <p>A value of <code>MUST_EXIST</code> is used to update a policy. A value of
                *         <code>NOT_EXIST</code> is used to create a new policy. If a value of <code>NONE</code> or a
                *       null value is used, the call does not depend on the existence of a policy.</p>
                */
            PolicyExistsCondition?: ExistCondition | string;
            /**
                * <p>If <code>'TRUE'</code>, indicates that you are using both methods to grant cross-account
                *       access to Data Catalog resources:</p>
                *          <ul>
                *             <li>
                *                <p>By directly updating the resource policy with <code>PutResourePolicy</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>By using the <b>Grant permissions</b> command on the Amazon Web Services Management Console.</p>
                *             </li>
                *          </ul>
                *          <p>Must be set to <code>'TRUE'</code> if you have already used the Management Console to
                *       grant cross-account access, otherwise the call fails. Default is 'FALSE'.</p>
                */
            EnableHybrid?: EnableHybridValues | string;
    }
    export namespace PutResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyRequest) => any;
    }
    export interface PutResourcePolicyResponse {
            /**
                * <p>A hash of the policy that has just been set. This must
                *       be included in a subsequent call that overwrites or updates
                *       this policy.</p>
                */
            PolicyHash?: string;
    }
    export namespace PutResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyResponse) => any;
    }
    /**
        * <p>A structure containing a key value pair for metadata.</p>
        */
    export interface MetadataKeyValuePair {
            /**
                * <p>A metadata key.</p>
                */
            MetadataKey?: string;
            /**
                * <p>A metadata key’s corresponding value.</p>
                */
            MetadataValue?: string;
    }
    export namespace MetadataKeyValuePair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetadataKeyValuePair) => any;
    }
    export interface PutSchemaVersionMetadataInput {
            /**
                * <p>The unique ID for the schema.</p>
                */
            SchemaId?: SchemaId;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersionNumber?: SchemaVersionNumber;
            /**
                * <p>The unique version ID of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The metadata key's corresponding value.</p>
                */
            MetadataKeyValue: MetadataKeyValuePair | undefined;
    }
    export namespace PutSchemaVersionMetadataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSchemaVersionMetadataInput) => any;
    }
    export interface PutSchemaVersionMetadataResponse {
            /**
                * <p>The Amazon Resource Name (ARN) for the schema.</p>
                */
            SchemaArn?: string;
            /**
                * <p>The name for the schema.</p>
                */
            SchemaName?: string;
            /**
                * <p>The name for the registry.</p>
                */
            RegistryName?: string;
            /**
                * <p>The latest version of the schema.</p>
                */
            LatestVersion?: boolean;
            /**
                * <p>The version number of the schema.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The unique version ID of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>The metadata key.</p>
                */
            MetadataKey?: string;
            /**
                * <p>The value of the metadata key.</p>
                */
            MetadataValue?: string;
    }
    export namespace PutSchemaVersionMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSchemaVersionMetadataResponse) => any;
    }
    export interface PutWorkflowRunPropertiesRequest {
            /**
                * <p>Name of the workflow which was run.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ID of the workflow run for which the run properties should be updated.</p>
                */
            RunId: string | undefined;
            /**
                * <p>The properties to put for the specified run.</p>
                */
            RunProperties: Record<string, string> | undefined;
    }
    export namespace PutWorkflowRunPropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutWorkflowRunPropertiesRequest) => any;
    }
    export interface PutWorkflowRunPropertiesResponse {
    }
    export namespace PutWorkflowRunPropertiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutWorkflowRunPropertiesResponse) => any;
    }
    export interface QuerySchemaVersionMetadataInput {
            /**
                * <p>A wrapper structure that may contain the schema name and Amazon Resource Name (ARN).</p>
                */
            SchemaId?: SchemaId;
            /**
                * <p>The version number of the schema.</p>
                */
            SchemaVersionNumber?: SchemaVersionNumber;
            /**
                * <p>The unique version ID of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>Search key-value pairs for metadata, if they are not provided all the metadata information will be fetched.</p>
                */
            MetadataList?: MetadataKeyValuePair[];
            /**
                * <p>Maximum number of results required per page. If the value is not supplied, this will be defaulted to 25 per page.</p>
                */
            MaxResults?: number;
            /**
                * <p>A continuation token, if this is a continuation call.</p>
                */
            NextToken?: string;
    }
    export namespace QuerySchemaVersionMetadataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QuerySchemaVersionMetadataInput) => any;
    }
    /**
        * <p>A structure containing other metadata for a schema version belonging to the same metadata key.</p>
        */
    export interface OtherMetadataValueListItem {
            /**
                * <p>The metadata key’s corresponding value for the other metadata belonging to the same metadata key.</p>
                */
            MetadataValue?: string;
            /**
                * <p>The time at which the entry was created.</p>
                */
            CreatedTime?: string;
    }
    export namespace OtherMetadataValueListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OtherMetadataValueListItem) => any;
    }
    /**
        * <p>A structure containing metadata information for a schema version.</p>
        */
    export interface MetadataInfo {
            /**
                * <p>The metadata key’s corresponding value.</p>
                */
            MetadataValue?: string;
            /**
                * <p>The time at which the entry was created.</p>
                */
            CreatedTime?: string;
            /**
                * <p>Other metadata belonging to the same metadata key.</p>
                */
            OtherMetadataValueList?: OtherMetadataValueListItem[];
    }
    export namespace MetadataInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetadataInfo) => any;
    }
    export interface QuerySchemaVersionMetadataResponse {
            /**
                * <p>A map of a metadata key and associated values.</p>
                */
            MetadataInfoMap?: Record<string, MetadataInfo>;
            /**
                * <p>The unique version ID of the schema version.</p>
                */
            SchemaVersionId?: string;
            /**
                * <p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>
                */
            NextToken?: string;
    }
    export namespace QuerySchemaVersionMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QuerySchemaVersionMetadataResponse) => any;
    }
}

declare module '@aws-sdk/client-glue/node_modules/@aws-sdk/client-glue/dist-types/models/GlueServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Glue service.
        */
    export class GlueServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

