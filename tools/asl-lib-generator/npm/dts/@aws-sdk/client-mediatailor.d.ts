// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-mediatailor' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ConfigureLogsForPlaybackConfigurationCommandInput, ConfigureLogsForPlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ConfigureLogsForPlaybackConfigurationCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateChannelCommand";
    import { CreateLiveSourceCommandInput, CreateLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateLiveSourceCommand";
    import { CreatePrefetchScheduleCommandInput, CreatePrefetchScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreatePrefetchScheduleCommand";
    import { CreateProgramCommandInput, CreateProgramCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateProgramCommand";
    import { CreateSourceLocationCommandInput, CreateSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateSourceLocationCommand";
    import { CreateVodSourceCommandInput, CreateVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateVodSourceCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteChannelCommand";
    import { DeleteChannelPolicyCommandInput, DeleteChannelPolicyCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteChannelPolicyCommand";
    import { DeleteLiveSourceCommandInput, DeleteLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteLiveSourceCommand";
    import { DeletePlaybackConfigurationCommandInput, DeletePlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeletePlaybackConfigurationCommand";
    import { DeletePrefetchScheduleCommandInput, DeletePrefetchScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeletePrefetchScheduleCommand";
    import { DeleteProgramCommandInput, DeleteProgramCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteProgramCommand";
    import { DeleteSourceLocationCommandInput, DeleteSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteSourceLocationCommand";
    import { DeleteVodSourceCommandInput, DeleteVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteVodSourceCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeChannelCommand";
    import { DescribeLiveSourceCommandInput, DescribeLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeLiveSourceCommand";
    import { DescribeProgramCommandInput, DescribeProgramCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeProgramCommand";
    import { DescribeSourceLocationCommandInput, DescribeSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeSourceLocationCommand";
    import { DescribeVodSourceCommandInput, DescribeVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeVodSourceCommand";
    import { GetChannelPolicyCommandInput, GetChannelPolicyCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetChannelPolicyCommand";
    import { GetChannelScheduleCommandInput, GetChannelScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetChannelScheduleCommand";
    import { GetPlaybackConfigurationCommandInput, GetPlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetPlaybackConfigurationCommand";
    import { GetPrefetchScheduleCommandInput, GetPrefetchScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetPrefetchScheduleCommand";
    import { ListAlertsCommandInput, ListAlertsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListAlertsCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListChannelsCommand";
    import { ListLiveSourcesCommandInput, ListLiveSourcesCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListLiveSourcesCommand";
    import { ListPlaybackConfigurationsCommandInput, ListPlaybackConfigurationsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListPlaybackConfigurationsCommand";
    import { ListPrefetchSchedulesCommandInput, ListPrefetchSchedulesCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListPrefetchSchedulesCommand";
    import { ListSourceLocationsCommandInput, ListSourceLocationsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListSourceLocationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListTagsForResourceCommand";
    import { ListVodSourcesCommandInput, ListVodSourcesCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListVodSourcesCommand";
    import { PutChannelPolicyCommandInput, PutChannelPolicyCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/PutChannelPolicyCommand";
    import { PutPlaybackConfigurationCommandInput, PutPlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/PutPlaybackConfigurationCommand";
    import { StartChannelCommandInput, StartChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/StartChannelCommand";
    import { StopChannelCommandInput, StopChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/StopChannelCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateChannelCommand";
    import { UpdateLiveSourceCommandInput, UpdateLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateLiveSourceCommand";
    import { UpdateSourceLocationCommandInput, UpdateSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateSourceLocationCommand";
    import { UpdateVodSourceCommandInput, UpdateVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateVodSourceCommand";
    import { MediaTailorClient } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    /**
        * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
        */
    export class MediaTailor extends MediaTailorClient {
            /**
                * <p>Configures Amazon CloudWatch log settings for a playback configuration.</p>
                */
            configureLogsForPlaybackConfiguration(args: ConfigureLogsForPlaybackConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<ConfigureLogsForPlaybackConfigurationCommandOutput>;
            configureLogsForPlaybackConfiguration(args: ConfigureLogsForPlaybackConfigurationCommandInput, cb: (err: any, data?: ConfigureLogsForPlaybackConfigurationCommandOutput) => void): void;
            configureLogsForPlaybackConfiguration(args: ConfigureLogsForPlaybackConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfigureLogsForPlaybackConfigurationCommandOutput) => void): void;
            /**
                * <p>Creates a channel.</p>
                */
            createChannel(args: CreateChannelCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelCommandOutput>;
            createChannel(args: CreateChannelCommandInput, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            createChannel(args: CreateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            /**
                * <p>Creates name for a specific live source in a source location.</p>
                */
            createLiveSource(args: CreateLiveSourceCommandInput, options?: __HttpHandlerOptions): Promise<CreateLiveSourceCommandOutput>;
            createLiveSource(args: CreateLiveSourceCommandInput, cb: (err: any, data?: CreateLiveSourceCommandOutput) => void): void;
            createLiveSource(args: CreateLiveSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLiveSourceCommandOutput) => void): void;
            /**
                * <p>Creates a new prefetch schedule for the specified playback configuration.</p>
                */
            createPrefetchSchedule(args: CreatePrefetchScheduleCommandInput, options?: __HttpHandlerOptions): Promise<CreatePrefetchScheduleCommandOutput>;
            createPrefetchSchedule(args: CreatePrefetchScheduleCommandInput, cb: (err: any, data?: CreatePrefetchScheduleCommandOutput) => void): void;
            createPrefetchSchedule(args: CreatePrefetchScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePrefetchScheduleCommandOutput) => void): void;
            /**
                * <p>Creates a program.</p>
                */
            createProgram(args: CreateProgramCommandInput, options?: __HttpHandlerOptions): Promise<CreateProgramCommandOutput>;
            createProgram(args: CreateProgramCommandInput, cb: (err: any, data?: CreateProgramCommandOutput) => void): void;
            createProgram(args: CreateProgramCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProgramCommandOutput) => void): void;
            /**
                * <p>Creates a source location on a specific channel.</p>
                */
            createSourceLocation(args: CreateSourceLocationCommandInput, options?: __HttpHandlerOptions): Promise<CreateSourceLocationCommandOutput>;
            createSourceLocation(args: CreateSourceLocationCommandInput, cb: (err: any, data?: CreateSourceLocationCommandOutput) => void): void;
            createSourceLocation(args: CreateSourceLocationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSourceLocationCommandOutput) => void): void;
            /**
                * <p>Creates name for a specific VOD source in a source location.</p>
                */
            createVodSource(args: CreateVodSourceCommandInput, options?: __HttpHandlerOptions): Promise<CreateVodSourceCommandOutput>;
            createVodSource(args: CreateVodSourceCommandInput, cb: (err: any, data?: CreateVodSourceCommandOutput) => void): void;
            createVodSource(args: CreateVodSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVodSourceCommandOutput) => void): void;
            /**
                * <p>Deletes a channel. You must stop the channel before it can be deleted.</p>
                */
            deleteChannel(args: DeleteChannelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelCommandOutput>;
            deleteChannel(args: DeleteChannelCommandInput, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            deleteChannel(args: DeleteChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            /**
                * <p>Deletes a channel's IAM policy.</p>
                */
            deleteChannelPolicy(args: DeleteChannelPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelPolicyCommandOutput>;
            deleteChannelPolicy(args: DeleteChannelPolicyCommandInput, cb: (err: any, data?: DeleteChannelPolicyCommandOutput) => void): void;
            deleteChannelPolicy(args: DeleteChannelPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes a specific live source in a specific source location.</p>
                */
            deleteLiveSource(args: DeleteLiveSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLiveSourceCommandOutput>;
            deleteLiveSource(args: DeleteLiveSourceCommandInput, cb: (err: any, data?: DeleteLiveSourceCommandOutput) => void): void;
            deleteLiveSource(args: DeleteLiveSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLiveSourceCommandOutput) => void): void;
            /**
                * <p>Deletes the playback configuration for the specified name.</p>
                */
            deletePlaybackConfiguration(args: DeletePlaybackConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeletePlaybackConfigurationCommandOutput>;
            deletePlaybackConfiguration(args: DeletePlaybackConfigurationCommandInput, cb: (err: any, data?: DeletePlaybackConfigurationCommandOutput) => void): void;
            deletePlaybackConfiguration(args: DeletePlaybackConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePlaybackConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes a prefetch schedule for a specific playback configuration. If you call DeletePrefetchSchedule on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.</p>
                */
            deletePrefetchSchedule(args: DeletePrefetchScheduleCommandInput, options?: __HttpHandlerOptions): Promise<DeletePrefetchScheduleCommandOutput>;
            deletePrefetchSchedule(args: DeletePrefetchScheduleCommandInput, cb: (err: any, data?: DeletePrefetchScheduleCommandOutput) => void): void;
            deletePrefetchSchedule(args: DeletePrefetchScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePrefetchScheduleCommandOutput) => void): void;
            /**
                * <p>Deletes a specific program on a specific channel.</p>
                */
            deleteProgram(args: DeleteProgramCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProgramCommandOutput>;
            deleteProgram(args: DeleteProgramCommandInput, cb: (err: any, data?: DeleteProgramCommandOutput) => void): void;
            deleteProgram(args: DeleteProgramCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProgramCommandOutput) => void): void;
            /**
                * <p>Deletes a source location on a specific channel.</p>
                */
            deleteSourceLocation(args: DeleteSourceLocationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSourceLocationCommandOutput>;
            deleteSourceLocation(args: DeleteSourceLocationCommandInput, cb: (err: any, data?: DeleteSourceLocationCommandOutput) => void): void;
            deleteSourceLocation(args: DeleteSourceLocationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSourceLocationCommandOutput) => void): void;
            /**
                * <p>Deletes a specific VOD source in a specific source location.</p>
                */
            deleteVodSource(args: DeleteVodSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVodSourceCommandOutput>;
            deleteVodSource(args: DeleteVodSourceCommandInput, cb: (err: any, data?: DeleteVodSourceCommandOutput) => void): void;
            deleteVodSource(args: DeleteVodSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVodSourceCommandOutput) => void): void;
            /**
                * <p>Describes the properties of a specific channel.</p>
                */
            describeChannel(args: DescribeChannelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelCommandOutput>;
            describeChannel(args: DescribeChannelCommandInput, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            describeChannel(args: DescribeChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            /**
                * <p>Provides details about a specific live source in a specific source location.</p>
                */
            describeLiveSource(args: DescribeLiveSourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLiveSourceCommandOutput>;
            describeLiveSource(args: DescribeLiveSourceCommandInput, cb: (err: any, data?: DescribeLiveSourceCommandOutput) => void): void;
            describeLiveSource(args: DescribeLiveSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLiveSourceCommandOutput) => void): void;
            /**
                * <p>Retrieves the properties of the requested program.</p>
                */
            describeProgram(args: DescribeProgramCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProgramCommandOutput>;
            describeProgram(args: DescribeProgramCommandInput, cb: (err: any, data?: DescribeProgramCommandOutput) => void): void;
            describeProgram(args: DescribeProgramCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProgramCommandOutput) => void): void;
            /**
                * <p>Retrieves the properties of the requested source location.</p>
                */
            describeSourceLocation(args: DescribeSourceLocationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSourceLocationCommandOutput>;
            describeSourceLocation(args: DescribeSourceLocationCommandInput, cb: (err: any, data?: DescribeSourceLocationCommandOutput) => void): void;
            describeSourceLocation(args: DescribeSourceLocationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSourceLocationCommandOutput) => void): void;
            /**
                * <p>Provides details about a specific VOD source in a specific source location.</p>
                */
            describeVodSource(args: DescribeVodSourceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeVodSourceCommandOutput>;
            describeVodSource(args: DescribeVodSourceCommandInput, cb: (err: any, data?: DescribeVodSourceCommandOutput) => void): void;
            describeVodSource(args: DescribeVodSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeVodSourceCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a channel's IAM policy.</p>
                */
            getChannelPolicy(args: GetChannelPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetChannelPolicyCommandOutput>;
            getChannelPolicy(args: GetChannelPolicyCommandInput, cb: (err: any, data?: GetChannelPolicyCommandOutput) => void): void;
            getChannelPolicy(args: GetChannelPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetChannelPolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves information about your channel's schedule.</p>
                */
            getChannelSchedule(args: GetChannelScheduleCommandInput, options?: __HttpHandlerOptions): Promise<GetChannelScheduleCommandOutput>;
            getChannelSchedule(args: GetChannelScheduleCommandInput, cb: (err: any, data?: GetChannelScheduleCommandOutput) => void): void;
            getChannelSchedule(args: GetChannelScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetChannelScheduleCommandOutput) => void): void;
            /**
                * <p>Returns the playback configuration for the specified name.</p>
                */
            getPlaybackConfiguration(args: GetPlaybackConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetPlaybackConfigurationCommandOutput>;
            getPlaybackConfiguration(args: GetPlaybackConfigurationCommandInput, cb: (err: any, data?: GetPlaybackConfigurationCommandOutput) => void): void;
            getPlaybackConfiguration(args: GetPlaybackConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPlaybackConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns information about the prefetch schedule for a specific playback configuration. If you call GetPrefetchSchedule on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.</p>
                */
            getPrefetchSchedule(args: GetPrefetchScheduleCommandInput, options?: __HttpHandlerOptions): Promise<GetPrefetchScheduleCommandOutput>;
            getPrefetchSchedule(args: GetPrefetchScheduleCommandInput, cb: (err: any, data?: GetPrefetchScheduleCommandOutput) => void): void;
            getPrefetchSchedule(args: GetPrefetchScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPrefetchScheduleCommandOutput) => void): void;
            /**
                * <p>Returns a list of alerts for the given resource.</p>
                */
            listAlerts(args: ListAlertsCommandInput, options?: __HttpHandlerOptions): Promise<ListAlertsCommandOutput>;
            listAlerts(args: ListAlertsCommandInput, cb: (err: any, data?: ListAlertsCommandOutput) => void): void;
            listAlerts(args: ListAlertsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAlertsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of channels that are associated with this account.</p>
                */
            listChannels(args: ListChannelsCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelsCommandOutput>;
            listChannels(args: ListChannelsCommandInput, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            listChannels(args: ListChannelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            /**
                * <p>lists all the live sources in a source location.</p>
                */
            listLiveSources(args: ListLiveSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListLiveSourcesCommandOutput>;
            listLiveSources(args: ListLiveSourcesCommandInput, cb: (err: any, data?: ListLiveSourcesCommandOutput) => void): void;
            listLiveSources(args: ListLiveSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLiveSourcesCommandOutput) => void): void;
            /**
                * <p>Returns a list of the playback configurations defined in AWS Elemental MediaTailor. You can specify a maximum number of configurations to return at a time. The default maximum is 50. Results are returned in pagefuls. If MediaTailor has more configurations than the specified maximum, it provides parameters in the response that you can use to retrieve the next pageful.</p>
                */
            listPlaybackConfigurations(args: ListPlaybackConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListPlaybackConfigurationsCommandOutput>;
            listPlaybackConfigurations(args: ListPlaybackConfigurationsCommandInput, cb: (err: any, data?: ListPlaybackConfigurationsCommandOutput) => void): void;
            listPlaybackConfigurations(args: ListPlaybackConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPlaybackConfigurationsCommandOutput) => void): void;
            /**
                * <p>Creates a new prefetch schedule.</p>
                */
            listPrefetchSchedules(args: ListPrefetchSchedulesCommandInput, options?: __HttpHandlerOptions): Promise<ListPrefetchSchedulesCommandOutput>;
            listPrefetchSchedules(args: ListPrefetchSchedulesCommandInput, cb: (err: any, data?: ListPrefetchSchedulesCommandOutput) => void): void;
            listPrefetchSchedules(args: ListPrefetchSchedulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPrefetchSchedulesCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of source locations.</p>
                */
            listSourceLocations(args: ListSourceLocationsCommandInput, options?: __HttpHandlerOptions): Promise<ListSourceLocationsCommandOutput>;
            listSourceLocations(args: ListSourceLocationsCommandInput, cb: (err: any, data?: ListSourceLocationsCommandOutput) => void): void;
            listSourceLocations(args: ListSourceLocationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSourceLocationsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the tags assigned to the specified playback configuration resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists all the VOD sources in a source location.</p>
                */
            listVodSources(args: ListVodSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListVodSourcesCommandOutput>;
            listVodSources(args: ListVodSourcesCommandInput, cb: (err: any, data?: ListVodSourcesCommandOutput) => void): void;
            listVodSources(args: ListVodSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVodSourcesCommandOutput) => void): void;
            /**
                * <p>Creates an IAM policy for the channel.</p>
                */
            putChannelPolicy(args: PutChannelPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutChannelPolicyCommandOutput>;
            putChannelPolicy(args: PutChannelPolicyCommandInput, cb: (err: any, data?: PutChannelPolicyCommandOutput) => void): void;
            putChannelPolicy(args: PutChannelPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutChannelPolicyCommandOutput) => void): void;
            /**
                * <p>Adds a new playback configuration to AWS Elemental MediaTailor.</p>
                */
            putPlaybackConfiguration(args: PutPlaybackConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutPlaybackConfigurationCommandOutput>;
            putPlaybackConfiguration(args: PutPlaybackConfigurationCommandInput, cb: (err: any, data?: PutPlaybackConfigurationCommandOutput) => void): void;
            putPlaybackConfiguration(args: PutPlaybackConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPlaybackConfigurationCommandOutput) => void): void;
            /**
                * <p>Starts a specific channel.</p>
                */
            startChannel(args: StartChannelCommandInput, options?: __HttpHandlerOptions): Promise<StartChannelCommandOutput>;
            startChannel(args: StartChannelCommandInput, cb: (err: any, data?: StartChannelCommandOutput) => void): void;
            startChannel(args: StartChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartChannelCommandOutput) => void): void;
            /**
                * <p>Stops a specific channel.</p>
                */
            stopChannel(args: StopChannelCommandInput, options?: __HttpHandlerOptions): Promise<StopChannelCommandOutput>;
            stopChannel(args: StopChannelCommandInput, cb: (err: any, data?: StopChannelCommandOutput) => void): void;
            stopChannel(args: StopChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopChannelCommandOutput) => void): void;
            /**
                * <p>Adds tags to the specified playback configuration resource. You can specify one or more tags to add.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from the specified playback configuration resource. You can specify one or more tags to remove.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an existing channel.</p>
                */
            updateChannel(args: UpdateChannelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateChannelCommandOutput>;
            updateChannel(args: UpdateChannelCommandInput, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            updateChannel(args: UpdateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            /**
                * <p>Updates a specific live source in a specific source location.</p>
                */
            updateLiveSource(args: UpdateLiveSourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLiveSourceCommandOutput>;
            updateLiveSource(args: UpdateLiveSourceCommandInput, cb: (err: any, data?: UpdateLiveSourceCommandOutput) => void): void;
            updateLiveSource(args: UpdateLiveSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLiveSourceCommandOutput) => void): void;
            /**
                * <p>Updates a source location on a specific channel.</p>
                */
            updateSourceLocation(args: UpdateSourceLocationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSourceLocationCommandOutput>;
            updateSourceLocation(args: UpdateSourceLocationCommandInput, cb: (err: any, data?: UpdateSourceLocationCommandOutput) => void): void;
            updateSourceLocation(args: UpdateSourceLocationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSourceLocationCommandOutput) => void): void;
            /**
                * <p>Updates a specific VOD source in a specific source location.</p>
                */
            updateVodSource(args: UpdateVodSourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVodSourceCommandOutput>;
            updateVodSource(args: UpdateVodSourceCommandInput, cb: (err: any, data?: UpdateVodSourceCommandOutput) => void): void;
            updateVodSource(args: UpdateVodSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVodSourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ConfigureLogsForPlaybackConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ConfigureLogsForPlaybackConfigurationRequest, ConfigureLogsForPlaybackConfigurationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ConfigureLogsForPlaybackConfigurationCommandInput extends ConfigureLogsForPlaybackConfigurationRequest {
    }
    export interface ConfigureLogsForPlaybackConfigurationCommandOutput extends ConfigureLogsForPlaybackConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Configures Amazon CloudWatch log settings for a playback configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ConfigureLogsForPlaybackConfigurationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ConfigureLogsForPlaybackConfigurationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ConfigureLogsForPlaybackConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfigureLogsForPlaybackConfigurationCommandInput} for command's `input` shape.
        * @see {@link ConfigureLogsForPlaybackConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ConfigureLogsForPlaybackConfigurationCommand extends $Command<ConfigureLogsForPlaybackConfigurationCommandInput, ConfigureLogsForPlaybackConfigurationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ConfigureLogsForPlaybackConfigurationCommandInput;
            constructor(input: ConfigureLogsForPlaybackConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfigureLogsForPlaybackConfigurationCommandInput, ConfigureLogsForPlaybackConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { CreateChannelRequest, CreateChannelResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface CreateChannelCommandInput extends CreateChannelRequest {
    }
    export interface CreateChannelCommandOutput extends CreateChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, CreateChannelCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, CreateChannelCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new CreateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelCommandInput} for command's `input` shape.
        * @see {@link CreateChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class CreateChannelCommand extends $Command<CreateChannelCommandInput, CreateChannelCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: CreateChannelCommandInput;
            constructor(input: CreateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelCommandInput, CreateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateLiveSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { CreateLiveSourceRequest, CreateLiveSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface CreateLiveSourceCommandInput extends CreateLiveSourceRequest {
    }
    export interface CreateLiveSourceCommandOutput extends CreateLiveSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates name for a specific live source in a source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, CreateLiveSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, CreateLiveSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new CreateLiveSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLiveSourceCommandInput} for command's `input` shape.
        * @see {@link CreateLiveSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class CreateLiveSourceCommand extends $Command<CreateLiveSourceCommandInput, CreateLiveSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: CreateLiveSourceCommandInput;
            constructor(input: CreateLiveSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLiveSourceCommandInput, CreateLiveSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreatePrefetchScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { CreatePrefetchScheduleRequest, CreatePrefetchScheduleResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface CreatePrefetchScheduleCommandInput extends CreatePrefetchScheduleRequest {
    }
    export interface CreatePrefetchScheduleCommandOutput extends CreatePrefetchScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new prefetch schedule for the specified playback configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, CreatePrefetchScheduleCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, CreatePrefetchScheduleCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new CreatePrefetchScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePrefetchScheduleCommandInput} for command's `input` shape.
        * @see {@link CreatePrefetchScheduleCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class CreatePrefetchScheduleCommand extends $Command<CreatePrefetchScheduleCommandInput, CreatePrefetchScheduleCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: CreatePrefetchScheduleCommandInput;
            constructor(input: CreatePrefetchScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePrefetchScheduleCommandInput, CreatePrefetchScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateProgramCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { CreateProgramRequest, CreateProgramResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface CreateProgramCommandInput extends CreateProgramRequest {
    }
    export interface CreateProgramCommandOutput extends CreateProgramResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a program.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, CreateProgramCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, CreateProgramCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new CreateProgramCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProgramCommandInput} for command's `input` shape.
        * @see {@link CreateProgramCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class CreateProgramCommand extends $Command<CreateProgramCommandInput, CreateProgramCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: CreateProgramCommandInput;
            constructor(input: CreateProgramCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProgramCommandInput, CreateProgramCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateSourceLocationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { CreateSourceLocationRequest, CreateSourceLocationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface CreateSourceLocationCommandInput extends CreateSourceLocationRequest {
    }
    export interface CreateSourceLocationCommandOutput extends CreateSourceLocationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a source location on a specific channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, CreateSourceLocationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, CreateSourceLocationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new CreateSourceLocationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSourceLocationCommandInput} for command's `input` shape.
        * @see {@link CreateSourceLocationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class CreateSourceLocationCommand extends $Command<CreateSourceLocationCommandInput, CreateSourceLocationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: CreateSourceLocationCommandInput;
            constructor(input: CreateSourceLocationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSourceLocationCommandInput, CreateSourceLocationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateVodSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { CreateVodSourceRequest, CreateVodSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface CreateVodSourceCommandInput extends CreateVodSourceRequest {
    }
    export interface CreateVodSourceCommandOutput extends CreateVodSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates name for a specific VOD source in a source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, CreateVodSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, CreateVodSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new CreateVodSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVodSourceCommandInput} for command's `input` shape.
        * @see {@link CreateVodSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class CreateVodSourceCommand extends $Command<CreateVodSourceCommandInput, CreateVodSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: CreateVodSourceCommandInput;
            constructor(input: CreateVodSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVodSourceCommandInput, CreateVodSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeleteChannelRequest, DeleteChannelResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeleteChannelCommandInput extends DeleteChannelRequest {
    }
    export interface DeleteChannelCommandOutput extends DeleteChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a channel. You must stop the channel before it can be deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeleteChannelCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeleteChannelCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeleteChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeleteChannelCommand extends $Command<DeleteChannelCommandInput, DeleteChannelCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeleteChannelCommandInput;
            constructor(input: DeleteChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelCommandInput, DeleteChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteChannelPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeleteChannelPolicyRequest, DeleteChannelPolicyResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeleteChannelPolicyCommandInput extends DeleteChannelPolicyRequest {
    }
    export interface DeleteChannelPolicyCommandOutput extends DeleteChannelPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a channel's IAM policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeleteChannelPolicyCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeleteChannelPolicyCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeleteChannelPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeleteChannelPolicyCommand extends $Command<DeleteChannelPolicyCommandInput, DeleteChannelPolicyCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeleteChannelPolicyCommandInput;
            constructor(input: DeleteChannelPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelPolicyCommandInput, DeleteChannelPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteLiveSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeleteLiveSourceRequest, DeleteLiveSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeleteLiveSourceCommandInput extends DeleteLiveSourceRequest {
    }
    export interface DeleteLiveSourceCommandOutput extends DeleteLiveSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specific live source in a specific source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeleteLiveSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeleteLiveSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeleteLiveSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLiveSourceCommandInput} for command's `input` shape.
        * @see {@link DeleteLiveSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeleteLiveSourceCommand extends $Command<DeleteLiveSourceCommandInput, DeleteLiveSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeleteLiveSourceCommandInput;
            constructor(input: DeleteLiveSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLiveSourceCommandInput, DeleteLiveSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeletePlaybackConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeletePlaybackConfigurationRequest, DeletePlaybackConfigurationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeletePlaybackConfigurationCommandInput extends DeletePlaybackConfigurationRequest {
    }
    export interface DeletePlaybackConfigurationCommandOutput extends DeletePlaybackConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the playback configuration for the specified name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeletePlaybackConfigurationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeletePlaybackConfigurationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeletePlaybackConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePlaybackConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeletePlaybackConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeletePlaybackConfigurationCommand extends $Command<DeletePlaybackConfigurationCommandInput, DeletePlaybackConfigurationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeletePlaybackConfigurationCommandInput;
            constructor(input: DeletePlaybackConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePlaybackConfigurationCommandInput, DeletePlaybackConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeletePrefetchScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeletePrefetchScheduleRequest, DeletePrefetchScheduleResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeletePrefetchScheduleCommandInput extends DeletePrefetchScheduleRequest {
    }
    export interface DeletePrefetchScheduleCommandOutput extends DeletePrefetchScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a prefetch schedule for a specific playback configuration. If you call DeletePrefetchSchedule on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeletePrefetchScheduleCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeletePrefetchScheduleCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeletePrefetchScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePrefetchScheduleCommandInput} for command's `input` shape.
        * @see {@link DeletePrefetchScheduleCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeletePrefetchScheduleCommand extends $Command<DeletePrefetchScheduleCommandInput, DeletePrefetchScheduleCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeletePrefetchScheduleCommandInput;
            constructor(input: DeletePrefetchScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePrefetchScheduleCommandInput, DeletePrefetchScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteProgramCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeleteProgramRequest, DeleteProgramResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeleteProgramCommandInput extends DeleteProgramRequest {
    }
    export interface DeleteProgramCommandOutput extends DeleteProgramResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specific program on a specific channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeleteProgramCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeleteProgramCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeleteProgramCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProgramCommandInput} for command's `input` shape.
        * @see {@link DeleteProgramCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeleteProgramCommand extends $Command<DeleteProgramCommandInput, DeleteProgramCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeleteProgramCommandInput;
            constructor(input: DeleteProgramCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProgramCommandInput, DeleteProgramCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteSourceLocationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeleteSourceLocationRequest, DeleteSourceLocationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeleteSourceLocationCommandInput extends DeleteSourceLocationRequest {
    }
    export interface DeleteSourceLocationCommandOutput extends DeleteSourceLocationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a source location on a specific channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeleteSourceLocationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeleteSourceLocationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeleteSourceLocationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSourceLocationCommandInput} for command's `input` shape.
        * @see {@link DeleteSourceLocationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeleteSourceLocationCommand extends $Command<DeleteSourceLocationCommandInput, DeleteSourceLocationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeleteSourceLocationCommandInput;
            constructor(input: DeleteSourceLocationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSourceLocationCommandInput, DeleteSourceLocationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteVodSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DeleteVodSourceRequest, DeleteVodSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DeleteVodSourceCommandInput extends DeleteVodSourceRequest {
    }
    export interface DeleteVodSourceCommandOutput extends DeleteVodSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a specific VOD source in a specific source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DeleteVodSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DeleteVodSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DeleteVodSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVodSourceCommandInput} for command's `input` shape.
        * @see {@link DeleteVodSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DeleteVodSourceCommand extends $Command<DeleteVodSourceCommandInput, DeleteVodSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DeleteVodSourceCommandInput;
            constructor(input: DeleteVodSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVodSourceCommandInput, DeleteVodSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DescribeChannelRequest, DescribeChannelResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DescribeChannelCommandInput extends DescribeChannelRequest {
    }
    export interface DescribeChannelCommandOutput extends DescribeChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the properties of a specific channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DescribeChannelCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DescribeChannelCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DescribeChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DescribeChannelCommand extends $Command<DescribeChannelCommandInput, DescribeChannelCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DescribeChannelCommandInput;
            constructor(input: DescribeChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelCommandInput, DescribeChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeLiveSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DescribeLiveSourceRequest, DescribeLiveSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DescribeLiveSourceCommandInput extends DescribeLiveSourceRequest {
    }
    export interface DescribeLiveSourceCommandOutput extends DescribeLiveSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Provides details about a specific live source in a specific source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DescribeLiveSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DescribeLiveSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DescribeLiveSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLiveSourceCommandInput} for command's `input` shape.
        * @see {@link DescribeLiveSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DescribeLiveSourceCommand extends $Command<DescribeLiveSourceCommandInput, DescribeLiveSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DescribeLiveSourceCommandInput;
            constructor(input: DescribeLiveSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLiveSourceCommandInput, DescribeLiveSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeProgramCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DescribeProgramRequest, DescribeProgramResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DescribeProgramCommandInput extends DescribeProgramRequest {
    }
    export interface DescribeProgramCommandOutput extends DescribeProgramResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the properties of the requested program.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DescribeProgramCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DescribeProgramCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DescribeProgramCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProgramCommandInput} for command's `input` shape.
        * @see {@link DescribeProgramCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DescribeProgramCommand extends $Command<DescribeProgramCommandInput, DescribeProgramCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DescribeProgramCommandInput;
            constructor(input: DescribeProgramCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProgramCommandInput, DescribeProgramCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeSourceLocationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DescribeSourceLocationRequest, DescribeSourceLocationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DescribeSourceLocationCommandInput extends DescribeSourceLocationRequest {
    }
    export interface DescribeSourceLocationCommandOutput extends DescribeSourceLocationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the properties of the requested source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DescribeSourceLocationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DescribeSourceLocationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DescribeSourceLocationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSourceLocationCommandInput} for command's `input` shape.
        * @see {@link DescribeSourceLocationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DescribeSourceLocationCommand extends $Command<DescribeSourceLocationCommandInput, DescribeSourceLocationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DescribeSourceLocationCommandInput;
            constructor(input: DescribeSourceLocationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSourceLocationCommandInput, DescribeSourceLocationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeVodSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { DescribeVodSourceRequest, DescribeVodSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface DescribeVodSourceCommandInput extends DescribeVodSourceRequest {
    }
    export interface DescribeVodSourceCommandOutput extends DescribeVodSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Provides details about a specific VOD source in a specific source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, DescribeVodSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, DescribeVodSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new DescribeVodSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeVodSourceCommandInput} for command's `input` shape.
        * @see {@link DescribeVodSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class DescribeVodSourceCommand extends $Command<DescribeVodSourceCommandInput, DescribeVodSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: DescribeVodSourceCommandInput;
            constructor(input: DescribeVodSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeVodSourceCommandInput, DescribeVodSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetChannelPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { GetChannelPolicyRequest, GetChannelPolicyResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface GetChannelPolicyCommandInput extends GetChannelPolicyRequest {
    }
    export interface GetChannelPolicyCommandOutput extends GetChannelPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a channel's IAM policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, GetChannelPolicyCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, GetChannelPolicyCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new GetChannelPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetChannelPolicyCommandInput} for command's `input` shape.
        * @see {@link GetChannelPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class GetChannelPolicyCommand extends $Command<GetChannelPolicyCommandInput, GetChannelPolicyCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: GetChannelPolicyCommandInput;
            constructor(input: GetChannelPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetChannelPolicyCommandInput, GetChannelPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetChannelScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { GetChannelScheduleRequest, GetChannelScheduleResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface GetChannelScheduleCommandInput extends GetChannelScheduleRequest {
    }
    export interface GetChannelScheduleCommandOutput extends GetChannelScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about your channel's schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, GetChannelScheduleCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, GetChannelScheduleCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new GetChannelScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetChannelScheduleCommandInput} for command's `input` shape.
        * @see {@link GetChannelScheduleCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class GetChannelScheduleCommand extends $Command<GetChannelScheduleCommandInput, GetChannelScheduleCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: GetChannelScheduleCommandInput;
            constructor(input: GetChannelScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetChannelScheduleCommandInput, GetChannelScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetPlaybackConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { GetPlaybackConfigurationRequest, GetPlaybackConfigurationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface GetPlaybackConfigurationCommandInput extends GetPlaybackConfigurationRequest {
    }
    export interface GetPlaybackConfigurationCommandOutput extends GetPlaybackConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the playback configuration for the specified name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, GetPlaybackConfigurationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, GetPlaybackConfigurationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new GetPlaybackConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPlaybackConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetPlaybackConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class GetPlaybackConfigurationCommand extends $Command<GetPlaybackConfigurationCommandInput, GetPlaybackConfigurationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: GetPlaybackConfigurationCommandInput;
            constructor(input: GetPlaybackConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPlaybackConfigurationCommandInput, GetPlaybackConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetPrefetchScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { GetPrefetchScheduleRequest, GetPrefetchScheduleResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface GetPrefetchScheduleCommandInput extends GetPrefetchScheduleRequest {
    }
    export interface GetPrefetchScheduleCommandOutput extends GetPrefetchScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the prefetch schedule for a specific playback configuration. If you call GetPrefetchSchedule on an expired prefetch schedule, MediaTailor returns an HTTP 404 status code.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, GetPrefetchScheduleCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, GetPrefetchScheduleCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new GetPrefetchScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPrefetchScheduleCommandInput} for command's `input` shape.
        * @see {@link GetPrefetchScheduleCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class GetPrefetchScheduleCommand extends $Command<GetPrefetchScheduleCommandInput, GetPrefetchScheduleCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: GetPrefetchScheduleCommandInput;
            constructor(input: GetPrefetchScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPrefetchScheduleCommandInput, GetPrefetchScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListAlertsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListAlertsRequest, ListAlertsResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListAlertsCommandInput extends ListAlertsRequest {
    }
    export interface ListAlertsCommandOutput extends ListAlertsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of alerts for the given resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListAlertsCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListAlertsCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListAlertsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAlertsCommandInput} for command's `input` shape.
        * @see {@link ListAlertsCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListAlertsCommand extends $Command<ListAlertsCommandInput, ListAlertsCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListAlertsCommandInput;
            constructor(input: ListAlertsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAlertsCommandInput, ListAlertsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListChannelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListChannelsRequest, ListChannelsResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListChannelsCommandInput extends ListChannelsRequest {
    }
    export interface ListChannelsCommandOutput extends ListChannelsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of channels that are associated with this account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListChannelsCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListChannelsCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListChannelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelsCommandInput} for command's `input` shape.
        * @see {@link ListChannelsCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListChannelsCommand extends $Command<ListChannelsCommandInput, ListChannelsCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListChannelsCommandInput;
            constructor(input: ListChannelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelsCommandInput, ListChannelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListLiveSourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListLiveSourcesRequest, ListLiveSourcesResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListLiveSourcesCommandInput extends ListLiveSourcesRequest {
    }
    export interface ListLiveSourcesCommandOutput extends ListLiveSourcesResponse, __MetadataBearer {
    }
    /**
        * <p>lists all the live sources in a source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListLiveSourcesCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListLiveSourcesCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListLiveSourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLiveSourcesCommandInput} for command's `input` shape.
        * @see {@link ListLiveSourcesCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListLiveSourcesCommand extends $Command<ListLiveSourcesCommandInput, ListLiveSourcesCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListLiveSourcesCommandInput;
            constructor(input: ListLiveSourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLiveSourcesCommandInput, ListLiveSourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListPlaybackConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListPlaybackConfigurationsRequest, ListPlaybackConfigurationsResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListPlaybackConfigurationsCommandInput extends ListPlaybackConfigurationsRequest {
    }
    export interface ListPlaybackConfigurationsCommandOutput extends ListPlaybackConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the playback configurations defined in AWS Elemental MediaTailor. You can specify a maximum number of configurations to return at a time. The default maximum is 50. Results are returned in pagefuls. If MediaTailor has more configurations than the specified maximum, it provides parameters in the response that you can use to retrieve the next pageful.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListPlaybackConfigurationsCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListPlaybackConfigurationsCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListPlaybackConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPlaybackConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListPlaybackConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListPlaybackConfigurationsCommand extends $Command<ListPlaybackConfigurationsCommandInput, ListPlaybackConfigurationsCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListPlaybackConfigurationsCommandInput;
            constructor(input: ListPlaybackConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPlaybackConfigurationsCommandInput, ListPlaybackConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListPrefetchSchedulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListPrefetchSchedulesRequest, ListPrefetchSchedulesResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListPrefetchSchedulesCommandInput extends ListPrefetchSchedulesRequest {
    }
    export interface ListPrefetchSchedulesCommandOutput extends ListPrefetchSchedulesResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new prefetch schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListPrefetchSchedulesCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListPrefetchSchedulesCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListPrefetchSchedulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPrefetchSchedulesCommandInput} for command's `input` shape.
        * @see {@link ListPrefetchSchedulesCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListPrefetchSchedulesCommand extends $Command<ListPrefetchSchedulesCommandInput, ListPrefetchSchedulesCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListPrefetchSchedulesCommandInput;
            constructor(input: ListPrefetchSchedulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPrefetchSchedulesCommandInput, ListPrefetchSchedulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListSourceLocationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListSourceLocationsRequest, ListSourceLocationsResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListSourceLocationsCommandInput extends ListSourceLocationsRequest {
    }
    export interface ListSourceLocationsCommandOutput extends ListSourceLocationsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of source locations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListSourceLocationsCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListSourceLocationsCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListSourceLocationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSourceLocationsCommandInput} for command's `input` shape.
        * @see {@link ListSourceLocationsCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListSourceLocationsCommand extends $Command<ListSourceLocationsCommandInput, ListSourceLocationsCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListSourceLocationsCommandInput;
            constructor(input: ListSourceLocationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSourceLocationsCommandInput, ListSourceLocationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the tags assigned to the specified playback configuration resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListTagsForResourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListTagsForResourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListVodSourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { ListVodSourcesRequest, ListVodSourcesResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface ListVodSourcesCommandInput extends ListVodSourcesRequest {
    }
    export interface ListVodSourcesCommandOutput extends ListVodSourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the VOD sources in a source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, ListVodSourcesCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, ListVodSourcesCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new ListVodSourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListVodSourcesCommandInput} for command's `input` shape.
        * @see {@link ListVodSourcesCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class ListVodSourcesCommand extends $Command<ListVodSourcesCommandInput, ListVodSourcesCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: ListVodSourcesCommandInput;
            constructor(input: ListVodSourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListVodSourcesCommandInput, ListVodSourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/PutChannelPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { PutChannelPolicyRequest, PutChannelPolicyResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface PutChannelPolicyCommandInput extends PutChannelPolicyRequest {
    }
    export interface PutChannelPolicyCommandOutput extends PutChannelPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an IAM policy for the channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, PutChannelPolicyCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, PutChannelPolicyCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new PutChannelPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutChannelPolicyCommandInput} for command's `input` shape.
        * @see {@link PutChannelPolicyCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class PutChannelPolicyCommand extends $Command<PutChannelPolicyCommandInput, PutChannelPolicyCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: PutChannelPolicyCommandInput;
            constructor(input: PutChannelPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutChannelPolicyCommandInput, PutChannelPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/PutPlaybackConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { PutPlaybackConfigurationRequest, PutPlaybackConfigurationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface PutPlaybackConfigurationCommandInput extends PutPlaybackConfigurationRequest {
    }
    export interface PutPlaybackConfigurationCommandOutput extends PutPlaybackConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a new playback configuration to AWS Elemental MediaTailor.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, PutPlaybackConfigurationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, PutPlaybackConfigurationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new PutPlaybackConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPlaybackConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutPlaybackConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class PutPlaybackConfigurationCommand extends $Command<PutPlaybackConfigurationCommandInput, PutPlaybackConfigurationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: PutPlaybackConfigurationCommandInput;
            constructor(input: PutPlaybackConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPlaybackConfigurationCommandInput, PutPlaybackConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/StartChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { StartChannelRequest, StartChannelResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface StartChannelCommandInput extends StartChannelRequest {
    }
    export interface StartChannelCommandOutput extends StartChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a specific channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, StartChannelCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, StartChannelCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new StartChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartChannelCommandInput} for command's `input` shape.
        * @see {@link StartChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class StartChannelCommand extends $Command<StartChannelCommandInput, StartChannelCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: StartChannelCommandInput;
            constructor(input: StartChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartChannelCommandInput, StartChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/StopChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { StopChannelRequest, StopChannelResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface StopChannelCommandInput extends StopChannelRequest {
    }
    export interface StopChannelCommandOutput extends StopChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a specific channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, StopChannelCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, StopChannelCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new StopChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopChannelCommandInput} for command's `input` shape.
        * @see {@link StopChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class StopChannelCommand extends $Command<StopChannelCommandInput, StopChannelCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: StopChannelCommandInput;
            constructor(input: StopChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopChannelCommandInput, StopChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { TagResourceRequest } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds tags to the specified playback configuration resource. You can specify one or more tags to add.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, TagResourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, TagResourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { UntagResourceRequest } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes tags from the specified playback configuration resource. You can specify one or more tags to remove.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, UntagResourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, UntagResourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { UpdateChannelRequest, UpdateChannelResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface UpdateChannelCommandInput extends UpdateChannelRequest {
    }
    export interface UpdateChannelCommandOutput extends UpdateChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an existing channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, UpdateChannelCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, UpdateChannelCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new UpdateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateChannelCommandInput} for command's `input` shape.
        * @see {@link UpdateChannelCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class UpdateChannelCommand extends $Command<UpdateChannelCommandInput, UpdateChannelCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: UpdateChannelCommandInput;
            constructor(input: UpdateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateChannelCommandInput, UpdateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateLiveSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { UpdateLiveSourceRequest, UpdateLiveSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface UpdateLiveSourceCommandInput extends UpdateLiveSourceRequest {
    }
    export interface UpdateLiveSourceCommandOutput extends UpdateLiveSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a specific live source in a specific source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, UpdateLiveSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, UpdateLiveSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new UpdateLiveSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLiveSourceCommandInput} for command's `input` shape.
        * @see {@link UpdateLiveSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class UpdateLiveSourceCommand extends $Command<UpdateLiveSourceCommandInput, UpdateLiveSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: UpdateLiveSourceCommandInput;
            constructor(input: UpdateLiveSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLiveSourceCommandInput, UpdateLiveSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateSourceLocationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { UpdateSourceLocationRequest, UpdateSourceLocationResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface UpdateSourceLocationCommandInput extends UpdateSourceLocationRequest {
    }
    export interface UpdateSourceLocationCommandOutput extends UpdateSourceLocationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a source location on a specific channel.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, UpdateSourceLocationCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, UpdateSourceLocationCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new UpdateSourceLocationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSourceLocationCommandInput} for command's `input` shape.
        * @see {@link UpdateSourceLocationCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class UpdateSourceLocationCommand extends $Command<UpdateSourceLocationCommandInput, UpdateSourceLocationCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: UpdateSourceLocationCommandInput;
            constructor(input: UpdateSourceLocationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSourceLocationCommandInput, UpdateSourceLocationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateVodSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaTailorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient";
    import { UpdateVodSourceRequest, UpdateVodSourceResponse } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0";
    export interface UpdateVodSourceCommandInput extends UpdateVodSourceRequest {
    }
    export interface UpdateVodSourceCommandOutput extends UpdateVodSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a specific VOD source in a specific source location.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaTailorClient, UpdateVodSourceCommand } from "@aws-sdk/client-mediatailor"; // ES Modules import
        * // const { MediaTailorClient, UpdateVodSourceCommand } = require("@aws-sdk/client-mediatailor"); // CommonJS import
        * const client = new MediaTailorClient(config);
        * const command = new UpdateVodSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVodSourceCommandInput} for command's `input` shape.
        * @see {@link UpdateVodSourceCommandOutput} for command's `response` shape.
        * @see {@link MediaTailorClientResolvedConfig | config} for MediaTailorClient's `config` shape.
        *
        */
    export class UpdateVodSourceCommand extends $Command<UpdateVodSourceCommandInput, UpdateVodSourceCommandOutput, MediaTailorClientResolvedConfig> {
            readonly input: UpdateVodSourceCommandInput;
            constructor(input: UpdateVodSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaTailorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVodSourceCommandInput, UpdateVodSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/MediaTailorClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { ConfigureLogsForPlaybackConfigurationCommandInput, ConfigureLogsForPlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ConfigureLogsForPlaybackConfigurationCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateChannelCommand";
    import { CreateLiveSourceCommandInput, CreateLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateLiveSourceCommand";
    import { CreatePrefetchScheduleCommandInput, CreatePrefetchScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreatePrefetchScheduleCommand";
    import { CreateProgramCommandInput, CreateProgramCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateProgramCommand";
    import { CreateSourceLocationCommandInput, CreateSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateSourceLocationCommand";
    import { CreateVodSourceCommandInput, CreateVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/CreateVodSourceCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteChannelCommand";
    import { DeleteChannelPolicyCommandInput, DeleteChannelPolicyCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteChannelPolicyCommand";
    import { DeleteLiveSourceCommandInput, DeleteLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteLiveSourceCommand";
    import { DeletePlaybackConfigurationCommandInput, DeletePlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeletePlaybackConfigurationCommand";
    import { DeletePrefetchScheduleCommandInput, DeletePrefetchScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeletePrefetchScheduleCommand";
    import { DeleteProgramCommandInput, DeleteProgramCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteProgramCommand";
    import { DeleteSourceLocationCommandInput, DeleteSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteSourceLocationCommand";
    import { DeleteVodSourceCommandInput, DeleteVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DeleteVodSourceCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeChannelCommand";
    import { DescribeLiveSourceCommandInput, DescribeLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeLiveSourceCommand";
    import { DescribeProgramCommandInput, DescribeProgramCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeProgramCommand";
    import { DescribeSourceLocationCommandInput, DescribeSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeSourceLocationCommand";
    import { DescribeVodSourceCommandInput, DescribeVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/DescribeVodSourceCommand";
    import { GetChannelPolicyCommandInput, GetChannelPolicyCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetChannelPolicyCommand";
    import { GetChannelScheduleCommandInput, GetChannelScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetChannelScheduleCommand";
    import { GetPlaybackConfigurationCommandInput, GetPlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetPlaybackConfigurationCommand";
    import { GetPrefetchScheduleCommandInput, GetPrefetchScheduleCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/GetPrefetchScheduleCommand";
    import { ListAlertsCommandInput, ListAlertsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListAlertsCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListChannelsCommand";
    import { ListLiveSourcesCommandInput, ListLiveSourcesCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListLiveSourcesCommand";
    import { ListPlaybackConfigurationsCommandInput, ListPlaybackConfigurationsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListPlaybackConfigurationsCommand";
    import { ListPrefetchSchedulesCommandInput, ListPrefetchSchedulesCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListPrefetchSchedulesCommand";
    import { ListSourceLocationsCommandInput, ListSourceLocationsCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListSourceLocationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListTagsForResourceCommand";
    import { ListVodSourcesCommandInput, ListVodSourcesCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/ListVodSourcesCommand";
    import { PutChannelPolicyCommandInput, PutChannelPolicyCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/PutChannelPolicyCommand";
    import { PutPlaybackConfigurationCommandInput, PutPlaybackConfigurationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/PutPlaybackConfigurationCommand";
    import { StartChannelCommandInput, StartChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/StartChannelCommand";
    import { StopChannelCommandInput, StopChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/StopChannelCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateChannelCommand";
    import { UpdateLiveSourceCommandInput, UpdateLiveSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateLiveSourceCommand";
    import { UpdateSourceLocationCommandInput, UpdateSourceLocationCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateSourceLocationCommand";
    import { UpdateVodSourceCommandInput, UpdateVodSourceCommandOutput } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/commands/UpdateVodSourceCommand";
    export type ServiceInputTypes = ConfigureLogsForPlaybackConfigurationCommandInput | CreateChannelCommandInput | CreateLiveSourceCommandInput | CreatePrefetchScheduleCommandInput | CreateProgramCommandInput | CreateSourceLocationCommandInput | CreateVodSourceCommandInput | DeleteChannelCommandInput | DeleteChannelPolicyCommandInput | DeleteLiveSourceCommandInput | DeletePlaybackConfigurationCommandInput | DeletePrefetchScheduleCommandInput | DeleteProgramCommandInput | DeleteSourceLocationCommandInput | DeleteVodSourceCommandInput | DescribeChannelCommandInput | DescribeLiveSourceCommandInput | DescribeProgramCommandInput | DescribeSourceLocationCommandInput | DescribeVodSourceCommandInput | GetChannelPolicyCommandInput | GetChannelScheduleCommandInput | GetPlaybackConfigurationCommandInput | GetPrefetchScheduleCommandInput | ListAlertsCommandInput | ListChannelsCommandInput | ListLiveSourcesCommandInput | ListPlaybackConfigurationsCommandInput | ListPrefetchSchedulesCommandInput | ListSourceLocationsCommandInput | ListTagsForResourceCommandInput | ListVodSourcesCommandInput | PutChannelPolicyCommandInput | PutPlaybackConfigurationCommandInput | StartChannelCommandInput | StopChannelCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateChannelCommandInput | UpdateLiveSourceCommandInput | UpdateSourceLocationCommandInput | UpdateVodSourceCommandInput;
    export type ServiceOutputTypes = ConfigureLogsForPlaybackConfigurationCommandOutput | CreateChannelCommandOutput | CreateLiveSourceCommandOutput | CreatePrefetchScheduleCommandOutput | CreateProgramCommandOutput | CreateSourceLocationCommandOutput | CreateVodSourceCommandOutput | DeleteChannelCommandOutput | DeleteChannelPolicyCommandOutput | DeleteLiveSourceCommandOutput | DeletePlaybackConfigurationCommandOutput | DeletePrefetchScheduleCommandOutput | DeleteProgramCommandOutput | DeleteSourceLocationCommandOutput | DeleteVodSourceCommandOutput | DescribeChannelCommandOutput | DescribeLiveSourceCommandOutput | DescribeProgramCommandOutput | DescribeSourceLocationCommandOutput | DescribeVodSourceCommandOutput | GetChannelPolicyCommandOutput | GetChannelScheduleCommandOutput | GetPlaybackConfigurationCommandOutput | GetPrefetchScheduleCommandOutput | ListAlertsCommandOutput | ListChannelsCommandOutput | ListLiveSourcesCommandOutput | ListPlaybackConfigurationsCommandOutput | ListPrefetchSchedulesCommandOutput | ListSourceLocationsCommandOutput | ListTagsForResourceCommandOutput | ListVodSourcesCommandOutput | PutChannelPolicyCommandOutput | PutPlaybackConfigurationCommandOutput | StartChannelCommandOutput | StopChannelCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateChannelCommandOutput | UpdateLiveSourceCommandOutput | UpdateSourceLocationCommandOutput | UpdateVodSourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MediaTailorClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MediaTailorClient class constructor that set the region, credentials and other options.
        */
    export interface MediaTailorClientConfig extends MediaTailorClientConfigType {
    }
    type MediaTailorClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MediaTailorClient class. This is resolved and normalized from the {@link MediaTailorClientConfig | constructor configuration interface}.
        */
    export interface MediaTailorClientResolvedConfig extends MediaTailorClientResolvedConfigType {
    }
    /**
        * <p>Use the AWS Elemental MediaTailor SDKs and CLI to configure scalable ad insertion and linear channels. With MediaTailor, you can assemble existing content into a linear stream and serve targeted ads to viewers while maintaining broadcast quality in over-the-top (OTT) video applications. For information about using the service, including detailed information about the settings covered in this guide, see the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/">AWS Elemental MediaTailor User Guide</a>.</p> <p>Through the SDKs and the CLI you manage AWS Elemental MediaTailor configurations and channels the same as you do through the console. For example, you specify ad insertion behavior and mapping information for the origin server and the ad decision server (ADS).</p>
        */
    export class MediaTailorClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MediaTailorClientResolvedConfig> {
            /**
                * The resolved configuration of MediaTailorClient class. This is resolved and normalized from the {@link MediaTailorClientConfig | constructor configuration interface}.
                */
            readonly config: MediaTailorClientResolvedConfig;
            constructor(configuration: MediaTailorClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MediaTailorServiceException as __BaseException } from "@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/MediaTailorServiceException";
    export enum MessageType {
            SPLICE_INSERT = "SPLICE_INSERT"
    }
    /**
        * <p>Slate VOD source configuration.</p>
        */
    export interface SlateSource {
            /**
                * <p>The name of the source location where the slate VOD source is stored.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
                */
            VodSourceName?: string;
    }
    export namespace SlateSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SlateSource) => any;
    }
    /**
        * <p>Splice insert message configuration.</p>
        */
    export interface SpliceInsertMessage {
            /**
                * <p>This is written to splice_insert.avail_num, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.</p>
                */
            AvailNum?: number;
            /**
                * <p>This is written to splice_insert.avails_expected, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.</p>
                */
            AvailsExpected?: number;
            /**
                * <p>This is written to splice_insert.splice_event_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 1.</p>
                */
            SpliceEventId?: number;
            /**
                * <p>This is written to splice_insert.unique_program_id, as defined in section 9.7.3.1 of the SCTE-35 specification. The default value is 0. Values must be between 0 and 256, inclusive.</p>
                */
            UniqueProgramId?: number;
    }
    export namespace SpliceInsertMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SpliceInsertMessage) => any;
    }
    /**
        * <p>Ad break configuration parameters.</p>
        */
    export interface AdBreak {
            /**
                * <p>The SCTE-35 ad insertion type. Accepted value: SPLICE_INSERT.</p>
                */
            MessageType?: MessageType | string;
            /**
                * <p>How long (in milliseconds) after the beginning of the program that an ad starts. This value must fall within 100ms of a segment boundary, otherwise the ad break will be skipped.</p>
                */
            OffsetMillis?: number;
            /**
                * <p>Ad break slate configuration.</p>
                */
            Slate?: SlateSource;
            /**
                * <p>This defines the SCTE-35 splice_insert() message inserted around the ad. For information about using splice_insert(), see the SCTE-35 specficiaiton, section 9.7.3.1.</p>
                */
            SpliceInsertMessage?: SpliceInsertMessage;
    }
    export namespace AdBreak {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdBreak) => any;
    }
    /**
        * <p>Alert configuration parameters.</p>
        */
    export interface Alert {
            /**
                * <p>The code for the alert. For example, NOT_PROCESSED.</p>
                */
            AlertCode: string | undefined;
            /**
                * <p>If an alert is generated for a resource, an explanation of the reason for the alert.</p>
                */
            AlertMessage: string | undefined;
            /**
                * <p>The timestamp when the alert was last modified.</p>
                */
            LastModifiedTime: Date | undefined;
            /**
                * <p>The Amazon Resource Names (ARNs) related to this alert.</p>
                */
            RelatedResourceArns: string[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace Alert {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Alert) => any;
    }
    export enum Operator {
            EQUALS = "EQUALS"
    }
    /**
        * <p>MediaTailor only places (consumes) prefetched ads if the ad break meets the criteria defined by the dynamic variables. This gives you granular control over which ad break to place the prefetched ads into.</p> <p>As an example, let's say that you set DynamicVariable to scte.event_id and Operator to EQUALS, and your playback configuration has an ADS URL of https://my.ads.server.com/path?&amp;podId=[scte.avail_num]&amp;event=[scte.event_id]&amp;duration=[session.avail_duration_secs]. And the prefetch request to the ADS contains these values https://my.ads.server.com/path?&amp;podId=3&amp;event=my-awesome-event&amp;duration=30. MediaTailor will only insert the prefetched ads into the ad break if has a SCTE marker with an event id of my-awesome-event, since it must match the event id that MediaTailor uses to query the ADS.</p> <p>You can specify up to five AvailMatchingCriteria. If you specify multiple AvailMatchingCriteria, MediaTailor combines them to match using a logical AND. You can model logical OR combinations by creating multiple prefetch schedules.</p>
        */
    export interface AvailMatchingCriteria {
            /**
                * <p>The dynamic variable(s) that MediaTailor should use as avail matching criteria. MediaTailor only places the prefetched ads into the avail if the avail matches the criteria defined by the dynamic variable. For information about dynamic variables, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables.html">Using dynamic ad variables</a> in the <i>MediaTailor User Guide</i>.</p> <p>You can include up to 100 dynamic variables.</p>
                */
            DynamicVariable: string | undefined;
            /**
                * <p>For the DynamicVariable specified in AvailMatchingCriteria, the Operator that is used for the comparison.</p>
                */
            Operator: Operator | string | undefined;
    }
    export namespace AvailMatchingCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailMatchingCriteria) => any;
    }
    /**
        * <p>Dash manifest configuration parameters.</p>
        */
    export interface DashPlaylistSettings {
            /**
                * <p>The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.</p>
                */
            ManifestWindowSeconds?: number;
            /**
                * <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: 2 seconds. Maximum value: 60 seconds.</p>
                */
            MinBufferTimeSeconds?: number;
            /**
                * <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.</p>
                */
            MinUpdatePeriodSeconds?: number;
            /**
                * <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: 2 seconds. Maximum value: 60 seconds.</p>
                */
            SuggestedPresentationDelaySeconds?: number;
    }
    export namespace DashPlaylistSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashPlaylistSettings) => any;
    }
    /**
        * <p>HLS playlist configuration parameters.</p>
        */
    export interface HlsPlaylistSettings {
            /**
                * <p>The total duration (in seconds) of each manifest. Minimum value: 30 seconds. Maximum value: 3600 seconds.</p>
                */
            ManifestWindowSeconds?: number;
    }
    export namespace HlsPlaylistSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsPlaylistSettings) => any;
    }
    /**
        * <p>This response includes only the "property" : "type" property.</p>
        */
    export interface ResponseOutputItem {
            /**
                * <p>DASH manifest configuration settings.</p>
                */
            DashPlaylistSettings?: DashPlaylistSettings;
            /**
                * <p>HLS manifest configuration settings.</p>
                */
            HlsPlaylistSettings?: HlsPlaylistSettings;
            /**
                * <p>The name of the manifest for the channel that will appear in the channel output's playback URL.</p>
                */
            ManifestName: string | undefined;
            /**
                * <p>The URL used for playback by content players.</p>
                */
            PlaybackUrl: string | undefined;
            /**
                * <p>A string used to associate a package configuration source group with a channel output.</p>
                */
            SourceGroup: string | undefined;
    }
    export namespace ResponseOutputItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResponseOutputItem) => any;
    }
    /**
        * <p>The configuration parameters for a channel.</p>
        */
    export interface Channel {
            /**
                * <p>The ARN of the channel.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The name of the channel.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>Returns the state whether the channel is running or not.</p>
                */
            ChannelState: string | undefined;
            /**
                * <p>The timestamp of when the channel was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the LINEAR PlaybackMode. MediaTailor doesn't support filler slate for channels using the LOOP PlaybackMode.</p>
                */
            FillerSlate?: SlateSource;
            /**
                * <p>The timestamp of when the channel was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The channel's output properties.</p>
                */
            Outputs: ResponseOutputItem[] | undefined;
            /**
                * <p>The type of playback mode for this channel.</p> <p>LINEAR - Programs play back-to-back only once.</p> <p>LOOP - Programs play back-to-back in an endless loop. When the last program in the schedule plays, playback loops back to the first program in the schedule.</p>
                */
            PlaybackMode: string | undefined;
            /**
                * <p>The tags to assign to the channel.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The tier for this channel. STANDARD tier channels can contain live programs.</p>
                */
            Tier: string | undefined;
    }
    export namespace Channel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Channel) => any;
    }
    export enum Type {
            DASH = "DASH",
            HLS = "HLS"
    }
    /**
        * <p>The HTTP package configuration properties for the requested VOD source.</p>
        */
    export interface HttpPackageConfiguration {
            /**
                * <p>The relative path to the URL for this VOD source. This is combined with SourceLocation::HttpConfiguration::BaseUrl to form a valid URL.</p>
                */
            Path: string | undefined;
            /**
                * <p>The name of the source group. This has to match one of the Channel::Outputs::SourceGroup.</p>
                */
            SourceGroup: string | undefined;
            /**
                * <p>The streaming protocol for this package configuration. Supported values are HLS and DASH.</p>
                */
            Type: Type | string | undefined;
    }
    export namespace HttpPackageConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HttpPackageConfiguration) => any;
    }
    /**
        * <p>Live source configuration parameters.</p>
        */
    export interface LiveSource {
            /**
                * <p>The ARN for the live source.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The timestamp that indicates when the live source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations for the live source.</p>
                */
            HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
            /**
                * <p>The timestamp that indicates when the live source was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name that's used to refer to a live source.</p>
                */
            LiveSourceName: string | undefined;
            /**
                * <p>The name of the source location.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The tags assigned to the live source.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace LiveSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LiveSource) => any;
    }
    export enum Mode {
            BEHIND_LIVE_EDGE = "BEHIND_LIVE_EDGE",
            OFF = "OFF"
    }
    /**
        * <p>The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Suppression</a>.</p>
        */
    export interface AvailSuppression {
            /**
                * <p>Sets the ad suppression mode. By default, ad suppression is off and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.</p>
                */
            Mode?: Mode | string;
            /**
                * <p>A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.</p>
                */
            Value?: string;
    }
    export namespace AvailSuppression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailSuppression) => any;
    }
    /**
        * <p>The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html">Bumpers</a>.</p>
        */
    export interface Bumper {
            /**
                * <p>The URL for the end bumper asset.</p>
                */
            EndUrl?: string;
            /**
                * <p>The URL for the start bumper asset.</p>
                */
            StartUrl?: string;
    }
    export namespace Bumper {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Bumper) => any;
    }
    /**
        * <p>The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.</p>
        */
    export interface CdnConfiguration {
            /**
                * <p>A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&amp;lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.</p>
                */
            AdSegmentUrlPrefix?: string;
            /**
                * <p>A content delivery network (CDN) to cache content segments, so that content requests don’t always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.</p>
                */
            ContentSegmentUrlPrefix?: string;
    }
    export namespace CdnConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CdnConfiguration) => any;
    }
    export enum OriginManifestType {
            MULTI_PERIOD = "MULTI_PERIOD",
            SINGLE_PERIOD = "SINGLE_PERIOD"
    }
    /**
        * <p>The configuration for DASH content.</p>
        */
    export interface DashConfiguration {
            /**
                * <p>The URL generated by MediaTailor to initiate a playback session. The session uses server-side reporting. This setting is ignored in PUT operations.</p>
                */
            ManifestEndpointPrefix?: string;
            /**
                * <p>The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.</p>
                */
            MpdLocation?: string;
            /**
                * <p>The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.</p>
                */
            OriginManifestType?: OriginManifestType | string;
    }
    export namespace DashConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashConfiguration) => any;
    }
    /**
        * <p>The configuration for HLS content.</p>
        */
    export interface HlsConfiguration {
            /**
                * <p>The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.</p>
                */
            ManifestEndpointPrefix?: string;
    }
    export namespace HlsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsConfiguration) => any;
    }
    /**
        * <p>The configuration for pre-roll ad insertion.</p>
        */
    export interface LivePreRollConfiguration {
            /**
                * <p>The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
                */
            AdDecisionServerUrl?: string;
            /**
                * The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
                */
            MaxDurationSeconds?: number;
    }
    export namespace LivePreRollConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LivePreRollConfiguration) => any;
    }
    /**
        * <p>Returns Amazon CloudWatch log settings for a playback configuration.</p>
        */
    export interface LogConfiguration {
            /**
                * <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to 60, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p> <p>Valid values: 0 - 100</p>
                */
            PercentEnabled: number | undefined;
    }
    export namespace LogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogConfiguration) => any;
    }
    /**
        * <p>For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.</p> <p>No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.</p>
        */
    export interface AdMarkerPassthrough {
            /**
                * <p>Enables ad marker passthrough for your configuration.</p>
                */
            Enabled?: boolean;
    }
    export namespace AdMarkerPassthrough {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdMarkerPassthrough) => any;
    }
    /**
        * <p>The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.</p>
        */
    export interface ManifestProcessingRules {
            /**
                * <p>For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest.</p> <p>No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.</p>
                */
            AdMarkerPassthrough?: AdMarkerPassthrough;
    }
    export namespace ManifestProcessingRules {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManifestProcessingRules) => any;
    }
    /**
        * <p>Creates a playback configuration. For information about MediaTailor configurations, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/configurations.html">Working with configurations in AWS Elemental MediaTailor</a>.</p>
        */
    export interface PlaybackConfiguration {
            /**
                * <p>The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
                */
            AdDecisionServerUrl?: string;
            /**
                * <p>The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Suppression</a>.</p>
                */
            AvailSuppression?: AvailSuppression;
            /**
                * <p>The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html">Bumpers</a>.</p>
                */
            Bumper?: Bumper;
            /**
                * <p>The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.</p>
                */
            CdnConfiguration?: CdnConfiguration;
            /**
                * <p>The player parameters and aliases used as dynamic variables during session initialization. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html">Domain Variables</a>.</p>
                */
            ConfigurationAliases?: Record<string, Record<string, string>>;
            /**
                * <p>The configuration for a DASH source.</p>
                */
            DashConfiguration?: DashConfiguration;
            /**
                * <p>The configuration for HLS content.</p>
                */
            HlsConfiguration?: HlsConfiguration;
            /**
                * <p>The configuration for pre-roll ad insertion.</p>
                */
            LivePreRollConfiguration?: LivePreRollConfiguration;
            /**
                * <p>The Amazon CloudWatch log settings for a playback configuration.</p>
                */
            LogConfiguration?: LogConfiguration;
            /**
                * <p>The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.</p>
                */
            ManifestProcessingRules?: ManifestProcessingRules;
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name?: string;
            /**
                * <p>Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to <i>ad replacement</i> in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Behavior in AWS Elemental MediaTailor</a>.</p>
                */
            PersonalizationThresholdSeconds?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the playback configuration.</p>
                */
            PlaybackConfigurationArn?: string;
            /**
                * <p>The URL that the player accesses to get a manifest from AWS Elemental MediaTailor.</p>
                */
            PlaybackEndpointPrefix?: string;
            /**
                * <p>The URL that the player uses to initialize a session that uses client-side reporting.</p>
                */
            SessionInitializationEndpointPrefix?: string;
            /**
                * <p>The URL for a video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID playback configurations. For VPAID, the slate is required because MediaTailor provides it in the slots designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.</p>
                */
            SlateAdUrl?: string;
            /**
                * <p>The tags to assign to the playback configuration.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.</p>
                */
            TranscodeProfileName?: string;
            /**
                * <p>The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.</p>
                */
            VideoContentSourceUrl?: string;
    }
    export namespace PlaybackConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PlaybackConfiguration) => any;
    }
    /**
        * <p>A complex type that contains settings that determine how and when that MediaTailor places prefetched ads into upcoming ad breaks.</p>
        */
    export interface PrefetchConsumption {
            /**
                * <p>If you only want MediaTailor to insert prefetched ads into avails (ad breaks) that match specific dynamic variables, such as scte.event_id, set the avail matching criteria.</p>
                */
            AvailMatchingCriteria?: AvailMatchingCriteria[];
            /**
                * <p>The time when MediaTailor no longer considers the prefetched ads for use in an ad break. MediaTailor automatically deletes prefetch schedules no less than seven days after the end time. If you'd like to manually delete the prefetch schedule, you can call DeletePrefetchSchedule.</p>
                */
            EndTime: Date | undefined;
            /**
                * <p>The time when prefetched ads are considered for use in an ad break. If you don't specify StartTime, the prefetched ads are available after MediaTailor retrives them from the ad decision server.</p>
                */
            StartTime?: Date;
    }
    export namespace PrefetchConsumption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrefetchConsumption) => any;
    }
    /**
        * <p>A complex type that contains settings governing when MediaTailor prefetches ads, and which dynamic variables that MediaTailor includes in the request to the ad decision server.</p>
        */
    export interface PrefetchRetrieval {
            /**
                * <p>The dynamic variables to use for substitution during prefetch requests to the ad decision server (ADS).</p> <p>You intially configure <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables.html">dynamic variables</a> for the ADS URL when you set up your playback configuration. When you specify DynamicVariables for prefetch retrieval, MediaTailor includes the dynamic variables in the request to the ADS.</p>
                */
            DynamicVariables?: Record<string, string>;
            /**
                * <p>The time when prefetch retrieval ends for the ad break. Prefetching will be attempted for manifest requests that occur at or before this time.</p>
                */
            EndTime: Date | undefined;
            /**
                * <p>The time when prefetch retrievals can start for this break. Ad prefetching will be attempted for manifest requests that occur at or after this time. Defaults to the current time. If not specified, the prefetch retrieval starts as soon as possible.</p>
                */
            StartTime?: Date;
    }
    export namespace PrefetchRetrieval {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrefetchRetrieval) => any;
    }
    /**
        * <p>A complex type that contains prefetch schedule information.</p>
        */
    export interface PrefetchSchedule {
            /**
                * <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
                */
            Arn: string | undefined;
            /**
                * <p>Consumption settings determine how, and when, MediaTailor places the prefetched ads into ad breaks. Ad consumption occurs within a span of time that you define, called a <i>consumption window</i>. You can designate which ad breaks that MediaTailor fills with prefetch ads by setting avail matching criteria.</p>
                */
            Consumption: PrefetchConsumption | undefined;
            /**
                * <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the playback configuration to create the prefetch schedule for.</p>
                */
            PlaybackConfigurationName: string | undefined;
            /**
                * <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
                */
            Retrieval: PrefetchRetrieval | undefined;
            /**
                * <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
                */
            StreamId?: string;
    }
    export namespace PrefetchSchedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrefetchSchedule) => any;
    }
    /**
        * <p>The schedule's ad break properties.</p>
        */
    export interface ScheduleAdBreak {
            /**
                * <p>The approximate duration of the ad break, in seconds.</p>
                */
            ApproximateDurationSeconds?: number;
            /**
                * <p>The approximate time that the ad will start playing.</p>
                */
            ApproximateStartTime?: Date;
            /**
                * <p>The name of the source location containing the VOD source used for the ad break.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The name of the VOD source used for the ad break.</p>
                */
            VodSourceName?: string;
    }
    export namespace ScheduleAdBreak {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleAdBreak) => any;
    }
    export enum ScheduleEntryType {
            FILLER_SLATE = "FILLER_SLATE",
            PROGRAM = "PROGRAM"
    }
    /**
        * <p>The properties for a schedule.</p>
        */
    export interface ScheduleEntry {
            /**
                * <p>The approximate duration of this program, in seconds.</p>
                */
            ApproximateDurationSeconds?: number;
            /**
                * <p>The approximate time that the program will start playing.</p>
                */
            ApproximateStartTime?: Date;
            /**
                * <p>The ARN of the program.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The name of the channel that uses this schedule.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The name of the live source used for the program.</p>
                */
            LiveSourceName?: string;
            /**
                * <p>The name of the program.</p>
                */
            ProgramName: string | undefined;
            /**
                * <p>The schedule's ad break properties.</p>
                */
            ScheduleAdBreaks?: ScheduleAdBreak[];
            /**
                * <p>The type of schedule entry.</p> <p>Valid values: PROGRAM or FILLER_SLATE.</p>
                */
            ScheduleEntryType?: ScheduleEntryType | string;
            /**
                * <p>The name of the source location.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The name of the VOD source.</p>
                */
            VodSourceName?: string;
    }
    export namespace ScheduleEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleEntry) => any;
    }
    /**
        * <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as https://example.com/some/path. To use a relative URL specify the relative path, such as /some/path*.</p>
        */
    export interface SegmentDeliveryConfiguration {
            /**
                * <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as https://example.com/some/path. To use a relative URL specify the relative path, such as /some/path*.</p>
                */
            BaseUrl?: string;
            /**
                * <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
                */
            Name?: string;
    }
    export namespace SegmentDeliveryConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SegmentDeliveryConfiguration) => any;
    }
    export enum AccessType {
            S3_SIGV4 = "S3_SIGV4",
            SECRETS_MANAGER_ACCESS_TOKEN = "SECRETS_MANAGER_ACCESS_TOKEN"
    }
    /**
        * <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
        */
    export interface SecretsManagerAccessTokenConfiguration {
            /**
                * <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
                */
            HeaderName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
                */
            SecretArn?: string;
            /**
                * <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
                */
            SecretStringKey?: string;
    }
    export namespace SecretsManagerAccessTokenConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecretsManagerAccessTokenConfiguration) => any;
    }
    /**
        * <p>Access configuration parameters.</p>
        */
    export interface AccessConfiguration {
            /**
                * <p>The type of authentication used to access content from HttpConfiguration::BaseUrl on your source location. Accepted value: S3_SIGV4.</p> <p>S3_SIGV4 - AWS Signature Version 4 authentication for Amazon S3 hosted virtual-style access. If your source location base URL is an Amazon S3 bucket, MediaTailor can use AWS Signature Version 4 (SigV4) authentication to access the bucket where your source content is stored. Your MediaTailor source location baseURL must follow the S3 virtual hosted-style request URL format. For example, https://bucket-name.s3.Region.amazonaws.com/key-name.</p> <p>Before you can use S3_SIGV4, you must meet these requirements:</p> <p>• You must allow MediaTailor to access your S3 bucket by granting mediatailor.amazonaws.com principal access in IAM. For information about configuring access in IAM, see Access management in the IAM User Guide.</p> <p>• The mediatailor.amazonaws.com service principal must have permissions to read all top level manifests referenced by the VodSource packaging configurations.</p> <p>• The caller of the API must have s3:GetObject IAM permissions to read all top level manifests referenced by your MediaTailor VodSource packaging configurations.</p>
                */
            AccessType?: AccessType | string;
            /**
                * <p>AWS Secrets Manager access token configuration parameters.</p>
                */
            SecretsManagerAccessTokenConfiguration?: SecretsManagerAccessTokenConfiguration;
    }
    export namespace AccessConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessConfiguration) => any;
    }
    /**
        * <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
        */
    export interface DefaultSegmentDeliveryConfiguration {
            /**
                * <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
                */
            BaseUrl?: string;
    }
    export namespace DefaultSegmentDeliveryConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DefaultSegmentDeliveryConfiguration) => any;
    }
    /**
        * <p>The HTTP configuration for the source location.</p>
        */
    export interface HttpConfiguration {
            /**
                * <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
                */
            BaseUrl: string | undefined;
    }
    export namespace HttpConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HttpConfiguration) => any;
    }
    /**
        * <p>This response includes only the "type" : "object" property.</p>
        */
    export interface SourceLocation {
            /**
                * <p>The access configuration for the source location.</p>
                */
            AccessConfiguration?: AccessConfiguration;
            /**
                * <p>The ARN of the SourceLocation.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The timestamp that indicates when the source location was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The default segment delivery configuration.</p>
                */
            DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
            /**
                * <p>The HTTP configuration for the source location.</p>
                */
            HttpConfiguration: HttpConfiguration | undefined;
            /**
                * <p>The timestamp that indicates when the source location was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The segment delivery configurations for the source location.</p>
                */
            SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
            /**
                * <p>The name of the source location.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The tags assigned to the source location.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace SourceLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceLocation) => any;
    }
    /**
        * <p>VOD source configuration parameters.</p>
        */
    export interface VodSource {
            /**
                * <p>The ARN for the VOD source.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The timestamp that indicates when the VOD source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations for the VOD source.</p>
                */
            HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
            /**
                * <p>The timestamp that indicates when the VOD source was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of the source location that the VOD source is associated with.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The tags assigned to the VOD source.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name of the VOD source.</p>
                */
            VodSourceName: string | undefined;
    }
    export namespace VodSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VodSource) => any;
    }
    /**
        * Invalid request parameters.
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    export enum ChannelState {
            RUNNING = "RUNNING",
            STOPPED = "STOPPED"
    }
    /**
        * <p>Configures Amazon CloudWatch log settings for a playback configuration.</p>
        */
    export interface ConfigureLogsForPlaybackConfigurationRequest {
            /**
                * <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account. For example, if your playback configuration has 1000 sessions and percentEnabled is set to 60, MediaTailor sends logs for 600 of the sessions to CloudWatch Logs. MediaTailor decides at random which of the playback configuration sessions to send logs for. If you want to view logs for a specific session, you can use the <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/debug-log-mode.html">debug log mode</a>.</p> <p>Valid values: 0 - 100</p>
                */
            PercentEnabled: number | undefined;
            /**
                * <p>The name of the playback configuration.</p>
                */
            PlaybackConfigurationName: string | undefined;
    }
    export namespace ConfigureLogsForPlaybackConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureLogsForPlaybackConfigurationRequest) => any;
    }
    export interface ConfigureLogsForPlaybackConfigurationResponse {
            /**
                * <p>The percentage of session logs that MediaTailor sends to your Cloudwatch Logs account.</p>
                */
            PercentEnabled?: number;
            /**
                * <p>The name of the playback configuration.</p>
                */
            PlaybackConfigurationName?: string;
    }
    export namespace ConfigureLogsForPlaybackConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureLogsForPlaybackConfigurationResponse) => any;
    }
    /**
        * <p>The output configuration for this channel.</p>
        */
    export interface RequestOutputItem {
            /**
                * <p>DASH manifest configuration parameters.</p>
                */
            DashPlaylistSettings?: DashPlaylistSettings;
            /**
                * <p>HLS playlist configuration parameters.</p>
                */
            HlsPlaylistSettings?: HlsPlaylistSettings;
            /**
                * <p>The name of the manifest for the channel. The name appears in the PlaybackUrl.</p>
                */
            ManifestName: string | undefined;
            /**
                * <p>A string used to match which HttpPackageConfiguration is used for each VodSource.</p>
                */
            SourceGroup: string | undefined;
    }
    export namespace RequestOutputItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RequestOutputItem) => any;
    }
    export enum PlaybackMode {
            LINEAR = "LINEAR",
            LOOP = "LOOP"
    }
    export enum Tier {
            BASIC = "BASIC",
            STANDARD = "STANDARD"
    }
    export interface CreateChannelRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the LINEAR PlaybackMode. MediaTailor doesn't support filler slate for channels using the LOOP PlaybackMode.</p>
                */
            FillerSlate?: SlateSource;
            /**
                * <p>The channel's output properties.</p>
                */
            Outputs: RequestOutputItem[] | undefined;
            /**
                * <p>The type of playback mode to use for this channel.</p> <p>LINEAR - The programs in the schedule play once back-to-back in the schedule.</p> <p>LOOP - The programs in the schedule play back-to-back in an endless loop. When the last program in the schedule stops playing, playback loops back to the first program in the schedule.</p>
                */
            PlaybackMode: PlaybackMode | string | undefined;
            /**
                * <p>The tags to assign to the channel.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The tier of the channel.</p>
                */
            Tier?: Tier | string;
    }
    export namespace CreateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelRequest) => any;
    }
    export interface CreateChannelResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the channel.</p>
                */
            ChannelName?: string;
            /**
                * <p>Indicates whether the channel is in a running state or not.</p>
                */
            ChannelState?: ChannelState | string;
            /**
                * <p>The timestamp of when the channel was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
                */
            FillerSlate?: SlateSource;
            /**
                * <p>The timestamp of when the channel was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The channel's output properties.</p>
                */
            Outputs?: ResponseOutputItem[];
            /**
                * <p>The channel's playback mode.</p>
                */
            PlaybackMode?: string;
            /**
                * <p>The tags assigned to the channel.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The channel's tier.</p>
                */
            Tier?: string;
    }
    export namespace CreateChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelResponse) => any;
    }
    export interface CreateLiveSourceRequest {
            /**
                * <p>A list of HTTP package configuration parameters for this live source.</p>
                */
            HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
            /**
                * <p>The identifier for the live source you are working on.</p>
                */
            LiveSourceName: string | undefined;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The tags to assign to the live source.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateLiveSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLiveSourceRequest) => any;
    }
    export interface CreateLiveSourceResponse {
            /**
                * <p>The ARN of the live source.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the live source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations.</p>
                */
            HttpPackageConfigurations?: HttpPackageConfiguration[];
            /**
                * <p>The timestamp that indicates when the live source was modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of the live source.</p>
                */
            LiveSourceName?: string;
            /**
                * <p>The name of the source location associated with the VOD source.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the live source.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateLiveSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLiveSourceResponse) => any;
    }
    export interface CreatePrefetchScheduleRequest {
            /**
                * <p>The configuration settings for MediaTailor's <i>consumption</i> of the prefetched ads from the ad decision server. Each consumption configuration contains an end time and an optional start time that define the <i>consumption window</i>. Prefetch schedules automatically expire no earlier than seven days after the end time.</p>
                */
            Consumption: PrefetchConsumption | undefined;
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the playback configuration.</p>
                */
            PlaybackConfigurationName: string | undefined;
            /**
                * <p>The configuration settings for retrieval of prefetched ads from the ad decision server. Only one set of prefetched ads will be retrieved and subsequently consumed for each ad break.</p>
                */
            Retrieval: PrefetchRetrieval | undefined;
            /**
                * <p>An optional stream identifier that MediaTailor uses to prefetch ads for multiple streams that use the same playback configuration. If StreamId is specified, MediaTailor returns all of the prefetch schedules with an exact match on StreamId. If not specified, MediaTailor returns all of the prefetch schedules for the playback configuration, regardless of StreamId.</p>
                */
            StreamId?: string;
    }
    export namespace CreatePrefetchScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePrefetchScheduleRequest) => any;
    }
    export interface CreatePrefetchScheduleResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
                */
            Arn?: string;
            /**
                * <p>Consumption settings determine how, and when, MediaTailor places the prefetched ads into ad breaks. Ad consumption occurs within a span of time that you define, called a <i>consumption window</i>. You can designate which ad breaks that MediaTailor fills with prefetch ads by setting avail matching criteria.</p>
                */
            Consumption?: PrefetchConsumption;
            /**
                * <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
                */
            Name?: string;
            /**
                * <p>The name of the playback configuration to create the prefetch schedule for.</p>
                */
            PlaybackConfigurationName?: string;
            /**
                * <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
                */
            Retrieval?: PrefetchRetrieval;
            /**
                * <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
                */
            StreamId?: string;
    }
    export namespace CreatePrefetchScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePrefetchScheduleResponse) => any;
    }
    export enum RelativePosition {
            AFTER_PROGRAM = "AFTER_PROGRAM",
            BEFORE_PROGRAM = "BEFORE_PROGRAM"
    }
    /**
        * <p>Program transition configuration.</p>
        */
    export interface Transition {
            /**
                * <p>The duration of the live program in seconds.</p>
                */
            DurationMillis?: number;
            /**
                * <p>The position where this program will be inserted relative to the RelativePosition.</p>
                */
            RelativePosition: RelativePosition | string | undefined;
            /**
                * <p>The name of the program that this program will be inserted next to, as defined by RelativePosition.</p>
                */
            RelativeProgram?: string;
            /**
                * <p>The date and time that the program is scheduled to start, in epoch milliseconds.</p>
                */
            ScheduledStartTimeMillis?: number;
            /**
                * <p>Defines when the program plays in the schedule. You can set the value to ABSOLUTE or RELATIVE.</p> <p>ABSOLUTE - The program plays at a specific wall clock time. This setting can only be used for channels using the LINEAR PlaybackMode.</p> <p>Note the following considerations when using ABSOLUTE transitions:</p> <p>If the preceding program in the schedule has a duration that extends past the wall clock time, MediaTailor truncates the preceding program on a common segment boundary.</p> <p>If there are gaps in playback, MediaTailor plays the FillerSlate you configured for your linear channel.</p> <p>RELATIVE - The program is inserted into the schedule either before or after a program that you specify via RelativePosition.</p>
                */
            Type: string | undefined;
    }
    export namespace Transition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Transition) => any;
    }
    /**
        * <p>Schedule configuration parameters. A channel must be stopped before changes can be made to the schedule.</p>
        */
    export interface ScheduleConfiguration {
            /**
                * <p>Program transition configurations.</p>
                */
            Transition: Transition | undefined;
    }
    export namespace ScheduleConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduleConfiguration) => any;
    }
    export interface CreateProgramRequest {
            /**
                * <p>The ad break configuration settings.</p>
                */
            AdBreaks?: AdBreak[];
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The name of the LiveSource for this Program.</p>
                */
            LiveSourceName?: string;
            /**
                * <p>The identifier for the program you are working on.</p>
                */
            ProgramName: string | undefined;
            /**
                * <p>The schedule configuration settings.</p>
                */
            ScheduleConfiguration: ScheduleConfiguration | undefined;
            /**
                * <p>The name of the source location.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The name that's used to refer to a VOD source.</p>
                */
            VodSourceName?: string;
    }
    export namespace CreateProgramRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProgramRequest) => any;
    }
    export interface CreateProgramResponse {
            /**
                * <p>The ad break configuration settings.</p>
                */
            AdBreaks?: AdBreak[];
            /**
                * <p>The ARN of the program.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the channel that the program belongs to.</p>
                */
            ChannelName?: string;
            /**
                * <p>The timestamp of when the program was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The name of the LiveSource for this Program.</p>
                */
            LiveSourceName?: string;
            /**
                * <p>The name of the program.</p>
                */
            ProgramName?: string;
            /**
                * <p>The date and time that the program is scheduled to start in ISO 8601 format and Coordinated Universal Time (UTC). For example, the value 2021-03-27T17:48:16.751Z represents March 27, 2021 at 17:48:16.751 UTC.</p>
                */
            ScheduledStartTime?: Date;
            /**
                * <p>The source location name.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The name that's used to refer to a VOD source.</p>
                */
            VodSourceName?: string;
    }
    export namespace CreateProgramResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProgramResponse) => any;
    }
    export interface CreateSourceLocationRequest {
            /**
                * <p>Access configuration parameters. Configures the type of authentication used to access content from your source location.</p>
                */
            AccessConfiguration?: AccessConfiguration;
            /**
                * <p>The optional configuration for the server that serves segments.</p>
                */
            DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
            /**
                * <p>The source's HTTP package configurations.</p>
                */
            HttpConfiguration: HttpConfiguration | undefined;
            /**
                * <p>A list of the segment delivery configurations associated with this resource.</p>
                */
            SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The tags to assign to the source location.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateSourceLocationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSourceLocationRequest) => any;
    }
    export interface CreateSourceLocationResponse {
            /**
                * <p>The access configuration for the source location.</p>
                */
            AccessConfiguration?: AccessConfiguration;
            /**
                * <p>The ARN of the source location.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the source location was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The default segment delivery configuration settings.</p>
                */
            DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
            /**
                * <p>The HTTP package configuration settings for the source location.</p>
                */
            HttpConfiguration?: HttpConfiguration;
            /**
                * <p>The timestamp that indicates when the source location was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A list of the segment delivery configurations associated with this resource.</p>
                */
            SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
            /**
                * <p>The name of the source location.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the source location.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateSourceLocationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSourceLocationResponse) => any;
    }
    export interface CreateVodSourceRequest {
            /**
                * <p>A list of HTTP package configuration parameters for this VOD source.</p>
                */
            HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The tags to assign to the VOD source.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The identifier for the VOD source you are working on.</p>
                */
            VodSourceName: string | undefined;
    }
    export namespace CreateVodSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVodSourceRequest) => any;
    }
    export interface CreateVodSourceResponse {
            /**
                * <p>The ARN of the VOD source.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the VOD source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations.</p>
                */
            HttpPackageConfigurations?: HttpPackageConfiguration[];
            /**
                * <p>The last modified time of the VOD source.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of the source location associated with the VOD source.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the VOD source.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name of the VOD source.</p>
                */
            VodSourceName?: string;
    }
    export namespace CreateVodSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVodSourceResponse) => any;
    }
    /**
        * <p>The configuration for DASH PUT operations.</p>
        */
    export interface DashConfigurationForPut {
            /**
                * <p>The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.</p>
                */
            MpdLocation?: string;
            /**
                * <p>The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.</p>
                */
            OriginManifestType?: OriginManifestType | string;
    }
    export namespace DashConfigurationForPut {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashConfigurationForPut) => any;
    }
    export interface DeleteChannelRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
    }
    export namespace DeleteChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelRequest) => any;
    }
    export interface DeleteChannelResponse {
    }
    export namespace DeleteChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelResponse) => any;
    }
    export interface DeleteChannelPolicyRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
    }
    export namespace DeleteChannelPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelPolicyRequest) => any;
    }
    export interface DeleteChannelPolicyResponse {
    }
    export namespace DeleteChannelPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelPolicyResponse) => any;
    }
    export interface DeleteLiveSourceRequest {
            /**
                * <p>The identifier for the live source you are working on.</p>
                */
            LiveSourceName: string | undefined;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace DeleteLiveSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLiveSourceRequest) => any;
    }
    export interface DeleteLiveSourceResponse {
    }
    export namespace DeleteLiveSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLiveSourceResponse) => any;
    }
    export interface DeletePlaybackConfigurationRequest {
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name: string | undefined;
    }
    export namespace DeletePlaybackConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePlaybackConfigurationRequest) => any;
    }
    export interface DeletePlaybackConfigurationResponse {
    }
    export namespace DeletePlaybackConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePlaybackConfigurationResponse) => any;
    }
    export interface DeletePrefetchScheduleRequest {
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the playback configuration.</p>
                */
            PlaybackConfigurationName: string | undefined;
    }
    export namespace DeletePrefetchScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePrefetchScheduleRequest) => any;
    }
    export interface DeletePrefetchScheduleResponse {
    }
    export namespace DeletePrefetchScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePrefetchScheduleResponse) => any;
    }
    export interface DeleteProgramRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The identifier for the program you are working on.</p>
                */
            ProgramName: string | undefined;
    }
    export namespace DeleteProgramRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProgramRequest) => any;
    }
    export interface DeleteProgramResponse {
    }
    export namespace DeleteProgramResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProgramResponse) => any;
    }
    export interface DeleteSourceLocationRequest {
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace DeleteSourceLocationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSourceLocationRequest) => any;
    }
    export interface DeleteSourceLocationResponse {
    }
    export namespace DeleteSourceLocationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSourceLocationResponse) => any;
    }
    export interface DeleteVodSourceRequest {
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The identifier for the VOD source you are working on.</p>
                */
            VodSourceName: string | undefined;
    }
    export namespace DeleteVodSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVodSourceRequest) => any;
    }
    export interface DeleteVodSourceResponse {
    }
    export namespace DeleteVodSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVodSourceResponse) => any;
    }
    export interface DescribeChannelRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
    }
    export namespace DescribeChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelRequest) => any;
    }
    export interface DescribeChannelResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the channel.</p>
                */
            ChannelName?: string;
            /**
                * <p>Indicates whether the channel is in a running state or not.</p>
                */
            ChannelState?: ChannelState | string;
            /**
                * <p>The timestamp of when the channel was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
                */
            FillerSlate?: SlateSource;
            /**
                * <p>The timestamp of when the channel was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The channel's output properties.</p>
                */
            Outputs?: ResponseOutputItem[];
            /**
                * <p>The channel's playback mode.</p>
                */
            PlaybackMode?: string;
            /**
                * <p>The tags assigned to the channel.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The channel's tier.</p>
                */
            Tier?: string;
    }
    export namespace DescribeChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelResponse) => any;
    }
    export interface DescribeLiveSourceRequest {
            /**
                * <p>The identifier for the live source you are working on.</p>
                */
            LiveSourceName: string | undefined;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace DescribeLiveSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLiveSourceRequest) => any;
    }
    export interface DescribeLiveSourceResponse {
            /**
                * <p>The ARN of the live source.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the live source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations.</p>
                */
            HttpPackageConfigurations?: HttpPackageConfiguration[];
            /**
                * <p>The timestamp that indicates when the live source was modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of the live source.</p>
                */
            LiveSourceName?: string;
            /**
                * <p>The name of the source location associated with the VOD source.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the live source.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeLiveSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLiveSourceResponse) => any;
    }
    export interface DescribeProgramRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The identifier for the program you are working on.</p>
                */
            ProgramName: string | undefined;
    }
    export namespace DescribeProgramRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProgramRequest) => any;
    }
    export interface DescribeProgramResponse {
            /**
                * <p>The ad break configuration settings.</p>
                */
            AdBreaks?: AdBreak[];
            /**
                * <p>The ARN of the program.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the channel that the program belongs to.</p>
                */
            ChannelName?: string;
            /**
                * <p>The timestamp of when the program was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The name of the LiveSource for this Program.</p>
                */
            LiveSourceName?: string;
            /**
                * <p>The name of the program.</p>
                */
            ProgramName?: string;
            /**
                * <p>The date and time that the program is scheduled to start in ISO 8601 format and Coordinated Universal Time (UTC). For example, the value 2021-03-27T17:48:16.751Z represents March 27, 2021 at 17:48:16.751 UTC.</p>
                */
            ScheduledStartTime?: Date;
            /**
                * <p>The source location name.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The name that's used to refer to a VOD source.</p>
                */
            VodSourceName?: string;
    }
    export namespace DescribeProgramResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProgramResponse) => any;
    }
    export interface DescribeSourceLocationRequest {
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace DescribeSourceLocationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSourceLocationRequest) => any;
    }
    export interface DescribeSourceLocationResponse {
            /**
                * <p>The access configuration for the source location.</p>
                */
            AccessConfiguration?: AccessConfiguration;
            /**
                * <p>The ARN of the source location.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the source location was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The default segment delivery configuration settings.</p>
                */
            DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
            /**
                * <p>The HTTP package configuration settings for the source location.</p>
                */
            HttpConfiguration?: HttpConfiguration;
            /**
                * <p>The timestamp that indicates when the source location was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A list of the segment delivery configurations associated with this resource.</p>
                */
            SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
            /**
                * <p>The name of the source location.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the source location.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeSourceLocationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSourceLocationResponse) => any;
    }
    export interface DescribeVodSourceRequest {
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The identifier for the VOD source you are working on.</p>
                */
            VodSourceName: string | undefined;
    }
    export namespace DescribeVodSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeVodSourceRequest) => any;
    }
    export interface DescribeVodSourceResponse {
            /**
                * <p>The ARN of the VOD source.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the VOD source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations.</p>
                */
            HttpPackageConfigurations?: HttpPackageConfiguration[];
            /**
                * <p>The last modified time of the VOD source.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of the source location associated with the VOD source.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the VOD source.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name of the VOD source.</p>
                */
            VodSourceName?: string;
    }
    export namespace DescribeVodSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeVodSourceResponse) => any;
    }
    export interface GetChannelPolicyRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
    }
    export namespace GetChannelPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelPolicyRequest) => any;
    }
    export interface GetChannelPolicyResponse {
            /**
                * <p>The IAM policy for the channel.</p>
                */
            Policy?: string;
    }
    export namespace GetChannelPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelPolicyResponse) => any;
    }
    export interface GetChannelScheduleRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The schedule duration in minutes. The maximum duration is 4320 minutes (three days).</p>
                */
            DurationMinutes?: string;
            /**
                * <p>Upper bound on number of records to return. The maximum number of results is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Pagination token from the GET list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetChannelScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelScheduleRequest) => any;
    }
    export interface GetChannelScheduleResponse {
            /**
                * <p>A list of schedule entries for the channel.</p>
                */
            Items?: ScheduleEntry[];
            /**
                * <p>Pagination token from the GET list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetChannelScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelScheduleResponse) => any;
    }
    export interface GetPlaybackConfigurationRequest {
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name: string | undefined;
    }
    export namespace GetPlaybackConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPlaybackConfigurationRequest) => any;
    }
    export interface GetPlaybackConfigurationResponse {
            /**
                * <p>The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
                */
            AdDecisionServerUrl?: string;
            /**
                * <p>The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Suppression</a>.</p>
                */
            AvailSuppression?: AvailSuppression;
            /**
                * <p>The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html">Bumpers</a>.</p>
                */
            Bumper?: Bumper;
            /**
                * <p>The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.</p>
                */
            CdnConfiguration?: CdnConfiguration;
            /**
                * <p>The player parameters and aliases used as dynamic variables during session initialization. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html">Domain Variables</a>.</p>
                */
            ConfigurationAliases?: Record<string, Record<string, string>>;
            /**
                * <p>The configuration for DASH content.</p>
                */
            DashConfiguration?: DashConfiguration;
            /**
                * <p>The configuration for HLS content.</p>
                */
            HlsConfiguration?: HlsConfiguration;
            /**
                * <p>The configuration for pre-roll ad insertion.</p>
                */
            LivePreRollConfiguration?: LivePreRollConfiguration;
            /**
                * <p>The Amazon CloudWatch log settings for a playback configuration.</p>
                */
            LogConfiguration?: LogConfiguration;
            /**
                * <p>The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.</p>
                */
            ManifestProcessingRules?: ManifestProcessingRules;
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name?: string;
            /**
                * <p>Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to <i>ad replacement</i> in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Behavior in AWS Elemental MediaTailor</a>.</p>
                */
            PersonalizationThresholdSeconds?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the playback configuration.</p>
                */
            PlaybackConfigurationArn?: string;
            /**
                * <p>The URL that the player accesses to get a manifest from AWS Elemental MediaTailor. This session will use server-side reporting.</p>
                */
            PlaybackEndpointPrefix?: string;
            /**
                * <p>The URL that the player uses to initialize a session that uses client-side reporting.</p>
                */
            SessionInitializationEndpointPrefix?: string;
            /**
                * <p>The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID playback configurations. For VPAID, the slate is required because MediaTailor provides it in the slots designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.</p>
                */
            SlateAdUrl?: string;
            /**
                * <p>The tags assigned to the playback configuration.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.</p>
                */
            TranscodeProfileName?: string;
            /**
                * <p>The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.</p>
                */
            VideoContentSourceUrl?: string;
    }
    export namespace GetPlaybackConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPlaybackConfigurationResponse) => any;
    }
    export interface GetPrefetchScheduleRequest {
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of the playback configuration.</p>
                */
            PlaybackConfigurationName: string | undefined;
    }
    export namespace GetPrefetchScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPrefetchScheduleRequest) => any;
    }
    export interface GetPrefetchScheduleResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the prefetch schedule.</p>
                */
            Arn?: string;
            /**
                * <p>Consumption settings determine how, and when, MediaTailor places the prefetched ads into ad breaks. Ad consumption occurs within a span of time that you define, called a <i>consumption window</i>. You can designate which ad breaks that MediaTailor fills with prefetch ads by setting avail matching criteria.</p>
                */
            Consumption?: PrefetchConsumption;
            /**
                * <p>The name of the prefetch schedule. The name must be unique among all prefetch schedules that are associated with the specified playback configuration.</p>
                */
            Name?: string;
            /**
                * <p>The name of the playback configuration to create the prefetch schedule for.</p>
                */
            PlaybackConfigurationName?: string;
            /**
                * <p>A complex type that contains settings for prefetch retrieval from the ad decision server (ADS).</p>
                */
            Retrieval?: PrefetchRetrieval;
            /**
                * <p>An optional stream identifier that you can specify in order to prefetch for multiple streams that use the same playback configuration.</p>
                */
            StreamId?: string;
    }
    export namespace GetPrefetchScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPrefetchScheduleResponse) => any;
    }
    export interface ListAlertsRequest {
            /**
                * <p>Upper bound on number of records to return. The maximum number of results is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Pagination token from the GET list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListAlertsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAlertsRequest) => any;
    }
    export interface ListAlertsResponse {
            /**
                * <p>A list of alerts that are associated with this resource.</p>
                */
            Items?: Alert[];
            /**
                * <p>Pagination token from the list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAlertsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAlertsResponse) => any;
    }
    export interface ListChannelsRequest {
            /**
                * <p>Upper bound on number of records to return. The maximum number of results is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Pagination token from the GET list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsRequest) => any;
    }
    export interface ListChannelsResponse {
            /**
                * <p>A list of channels that are associated with this account.</p>
                */
            Items?: Channel[];
            /**
                * <p>Pagination token returned by the list request when results exceed the maximum allowed. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsResponse) => any;
    }
    export interface ListLiveSourcesRequest {
            /**
                * <p>Upper bound on number of records to return. The maximum number of results is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Pagination token from the GET list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace ListLiveSourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLiveSourcesRequest) => any;
    }
    export interface ListLiveSourcesResponse {
            /**
                * <p>Lists the live sources.</p>
                */
            Items?: LiveSource[];
            /**
                * <p>Pagination token from the list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListLiveSourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLiveSourcesResponse) => any;
    }
    export interface ListPlaybackConfigurationsRequest {
            /**
                * <p>Maximum number of records to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Pagination token returned by the GET list request when results exceed the maximum allowed. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlaybackConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlaybackConfigurationsRequest) => any;
    }
    export interface ListPlaybackConfigurationsResponse {
            /**
                * <p>Array of playback configurations. This might be all the available configurations or a subset, depending on the settings that you provide and the total number of configurations stored.</p>
                */
            Items?: PlaybackConfiguration[];
            /**
                * <p>Pagination token returned by the GET list request when results exceed the maximum allowed. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPlaybackConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPlaybackConfigurationsResponse) => any;
    }
    export interface ListPrefetchSchedulesRequest {
            /**
                * <p>The maximum number of prefetch schedules that you want MediaTailor to return in response to the current request. If the playback configuration has more than MaxResults prefetch schedules, use the value of NextToken in the response to get the next page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>(Optional) If the playback configuration has more than MaxResults prefetch schedules, use NextToken to get the second and subsequent pages of results.</p> <p>For the first ListPrefetchSchedulesRequest request, omit this value.</p> <p>For the second and subsequent requests, get the value of NextToken from the previous response and specify that value for NextToken in the request.</p> <p>If the previous response didn't include a NextToken element, there are no more prefetch schedules to get.</p>
                */
            NextToken?: string;
            /**
                * <p>The name of the playback configuration.</p>
                */
            PlaybackConfigurationName: string | undefined;
            /**
                * <p>An optional filtering parameter whereby MediaTailor filters the prefetch schedules to include only specific streams.</p>
                */
            StreamId?: string;
    }
    export namespace ListPrefetchSchedulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPrefetchSchedulesRequest) => any;
    }
    export interface ListPrefetchSchedulesResponse {
            /**
                * <p>Lists the prefetch schedules. An empty Items list doesn't mean there aren't more items to fetch, just that that page was empty.</p>
                */
            Items?: PrefetchSchedule[];
            /**
                * <p>The value that you will use forNextToken in the next ListPrefetchSchedulesRequest request.</p>
                */
            NextToken?: string;
    }
    export namespace ListPrefetchSchedulesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPrefetchSchedulesResponse) => any;
    }
    export interface ListSourceLocationsRequest {
            /**
                * <p>Upper bound on number of records to return. The maximum number of results is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Pagination token from the GET list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListSourceLocationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSourceLocationsRequest) => any;
    }
    export interface ListSourceLocationsResponse {
            /**
                * <p>A list of source locations.</p>
                */
            Items?: SourceLocation[];
            /**
                * <p>Pagination token from the list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListSourceLocationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSourceLocationsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the playback configuration. You can get this from the response to any playback configuration request.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A comma-separated list of tag key:value pairs.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListVodSourcesRequest {
            /**
                * <p>Upper bound on number of records to return. The maximum number of results is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>Pagination token from the GET list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace ListVodSourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVodSourcesRequest) => any;
    }
    export interface ListVodSourcesResponse {
            /**
                * <p>Lists the VOD sources.</p>
                */
            Items?: VodSource[];
            /**
                * <p>Pagination token from the list request. Use the token to fetch the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListVodSourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVodSourcesResponse) => any;
    }
    export interface PutChannelPolicyRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>Adds an IAM role that determines the permissions of your channel.</p>
                */
            Policy: string | undefined;
    }
    export namespace PutChannelPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutChannelPolicyRequest) => any;
    }
    export interface PutChannelPolicyResponse {
    }
    export namespace PutChannelPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutChannelPolicyResponse) => any;
    }
    export interface PutPlaybackConfigurationRequest {
            /**
                * <p>The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
                */
            AdDecisionServerUrl?: string;
            /**
                * <p>The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Suppression</a>.</p>
                */
            AvailSuppression?: AvailSuppression;
            /**
                * <p>The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html">Bumpers</a>.</p>
                */
            Bumper?: Bumper;
            /**
                * <p>The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.</p>
                */
            CdnConfiguration?: CdnConfiguration;
            /**
                * <p>The player parameters and aliases used as dynamic variables during session initialization. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html">Domain Variables</a>.</p>
                */
            ConfigurationAliases?: Record<string, Record<string, string>>;
            /**
                * <p>The configuration for DASH content.</p>
                */
            DashConfiguration?: DashConfigurationForPut;
            /**
                * <p>The configuration for pre-roll ad insertion.</p>
                */
            LivePreRollConfiguration?: LivePreRollConfiguration;
            /**
                * <p>The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.</p>
                */
            ManifestProcessingRules?: ManifestProcessingRules;
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name?: string;
            /**
                * <p>Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to <i>ad replacement</i> in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Behavior in AWS Elemental MediaTailor</a>.</p>
                */
            PersonalizationThresholdSeconds?: number;
            /**
                * <p>The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID configurations. For VPAID, the slate is required because MediaTailor provides it in the slots that are designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.</p>
                */
            SlateAdUrl?: string;
            /**
                * <p>The tags to assign to the playback configuration.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.</p>
                */
            TranscodeProfileName?: string;
            /**
                * <p>The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.</p>
                */
            VideoContentSourceUrl?: string;
    }
    export namespace PutPlaybackConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPlaybackConfigurationRequest) => any;
    }
    export interface PutPlaybackConfigurationResponse {
            /**
                * <p>The URL for the ad decision server (ADS). This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.</p>
                */
            AdDecisionServerUrl?: string;
            /**
                * <p>The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Suppression</a>.</p>
                */
            AvailSuppression?: AvailSuppression;
            /**
                * <p>The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html">Bumpers</a>.</p>
                */
            Bumper?: Bumper;
            /**
                * <p>The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.</p>
                */
            CdnConfiguration?: CdnConfiguration;
            /**
                * <p>The player parameters and aliases used as dynamic variables during session initialization. For more information, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/variables-domain.html">Domain Variables</a>.</p>
                */
            ConfigurationAliases?: Record<string, Record<string, string>>;
            /**
                * <p>The configuration for DASH content.</p>
                */
            DashConfiguration?: DashConfiguration;
            /**
                * <p>The configuration for HLS content.</p>
                */
            HlsConfiguration?: HlsConfiguration;
            /**
                * <p>The configuration for pre-roll ad insertion.</p>
                */
            LivePreRollConfiguration?: LivePreRollConfiguration;
            /**
                * <p>The Amazon CloudWatch log settings for a playback configuration.</p>
                */
            LogConfiguration?: LogConfiguration;
            /**
                * <p>The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.</p>
                */
            ManifestProcessingRules?: ManifestProcessingRules;
            /**
                * <p>The identifier for the playback configuration.</p>
                */
            Name?: string;
            /**
                * <p>Defines the maximum duration of underfilled ad time (in seconds) allowed in an ad break. If the duration of underfilled ad time exceeds the personalization threshold, then the personalization of the ad break is abandoned and the underlying content is shown. This feature applies to <i>ad replacement</i> in live and VOD streams, rather than ad insertion, because it relies on an underlying content stream. For more information about ad break behavior, including ad replacement and insertion, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html">Ad Behavior in AWS Elemental MediaTailor</a>.</p>
                */
            PersonalizationThresholdSeconds?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the playback configuration.</p>
                */
            PlaybackConfigurationArn?: string;
            /**
                * <p>The URL that the player accesses to get a manifest from AWS Elemental MediaTailor. This session will use server-side reporting.</p>
                */
            PlaybackEndpointPrefix?: string;
            /**
                * <p>The URL that the player uses to initialize a session that uses client-side reporting.</p>
                */
            SessionInitializationEndpointPrefix?: string;
            /**
                * <p>The URL for a high-quality video asset to transcode and use to fill in time that's not used by ads. AWS Elemental MediaTailor shows the slate to fill in gaps in media content. Configuring the slate is optional for non-VPAID playback configurations. For VPAID, the slate is required because MediaTailor provides it in the slots designated for dynamic ad content. The slate must be a high-quality asset that contains both audio and video.</p>
                */
            SlateAdUrl?: string;
            /**
                * <p>The tags assigned to the playback configuration.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name that is used to associate this playback configuration with a custom transcode profile. This overrides the dynamic transcoding defaults of MediaTailor. Use this only if you have already set up custom profiles with the help of AWS Support.</p>
                */
            TranscodeProfileName?: string;
            /**
                * <p>The URL prefix for the parent manifest for the stream, minus the asset ID. The maximum length is 512 characters.</p>
                */
            VideoContentSourceUrl?: string;
    }
    export namespace PutPlaybackConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPlaybackConfigurationResponse) => any;
    }
    export interface StartChannelRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
    }
    export namespace StartChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartChannelRequest) => any;
    }
    export interface StartChannelResponse {
    }
    export namespace StartChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartChannelResponse) => any;
    }
    export interface StopChannelRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
    }
    export namespace StopChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopChannelRequest) => any;
    }
    export interface StopChannelResponse {
    }
    export namespace StopChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopChannelResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the playback configuration. You can get this from the response to any playback configuration request.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A comma-separated list of tag key:value pairs.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the playback configuration. You can get this from the response to any playback configuration request.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A comma-separated list of the tag keys to remove from the playback configuration.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UpdateChannelRequest {
            /**
                * <p>The identifier for the channel you are working on.</p>
                */
            ChannelName: string | undefined;
            /**
                * <p>The slate used to fill gaps between programs in the schedule. You must configure filler slate if your channel uses the LINEAR PlaybackMode. MediaTailor doesn't support filler slate for channels using the LOOP PlaybackMode.</p>
                */
            FillerSlate?: SlateSource;
            /**
                * <p>The channel's output properties.</p>
                */
            Outputs: RequestOutputItem[] | undefined;
    }
    export namespace UpdateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelRequest) => any;
    }
    export interface UpdateChannelResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            Arn?: string;
            /**
                * <p>The name of the channel.</p>
                */
            ChannelName?: string;
            /**
                * <p>Indicates whether the channel is in a running state or not.</p>
                */
            ChannelState?: ChannelState | string;
            /**
                * <p>The timestamp of when the channel was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Contains information about the slate used to fill gaps between programs in the schedule.</p>
                */
            FillerSlate?: SlateSource;
            /**
                * <p>The timestamp of when the channel was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The channel's output properties.</p>
                */
            Outputs?: ResponseOutputItem[];
            /**
                * <p>The channel's playback mode.</p>
                */
            PlaybackMode?: string;
            /**
                * <p>The tags assigned to the channel.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The channel's tier.</p>
                */
            Tier?: string;
    }
    export namespace UpdateChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelResponse) => any;
    }
    export interface UpdateLiveSourceRequest {
            /**
                * <p>A list of HTTP package configurations for the live source on this account.</p>
                */
            HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
            /**
                * <p>The identifier for the live source you are working on.</p>
                */
            LiveSourceName: string | undefined;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace UpdateLiveSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLiveSourceRequest) => any;
    }
    export interface UpdateLiveSourceResponse {
            /**
                * <p>The ARN of the live source.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the live source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations.</p>
                */
            HttpPackageConfigurations?: HttpPackageConfiguration[];
            /**
                * <p>The timestamp that indicates when the live source was modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of the live source.</p>
                */
            LiveSourceName?: string;
            /**
                * <p>The name of the source location associated with the VOD source.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the live source.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdateLiveSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLiveSourceResponse) => any;
    }
    export interface UpdateSourceLocationRequest {
            /**
                * <p>Access configuration parameters. Configures the type of authentication used to access content from your source location.</p>
                */
            AccessConfiguration?: AccessConfiguration;
            /**
                * <p>The optional configuration for the host server that serves segments.</p>
                */
            DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
            /**
                * <p>The HTTP configuration for the source location.</p>
                */
            HttpConfiguration: HttpConfiguration | undefined;
            /**
                * <p>A list of the segment delivery configurations associated with this resource.</p>
                */
            SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
    }
    export namespace UpdateSourceLocationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSourceLocationRequest) => any;
    }
    export interface UpdateSourceLocationResponse {
            /**
                * <p>The access configuration for the source location.</p>
                */
            AccessConfiguration?: AccessConfiguration;
            /**
                * <p>The ARN of the source location.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the source location was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The default segment delivery configuration settings.</p>
                */
            DefaultSegmentDeliveryConfiguration?: DefaultSegmentDeliveryConfiguration;
            /**
                * <p>The HTTP package configuration settings for the source location.</p>
                */
            HttpConfiguration?: HttpConfiguration;
            /**
                * <p>The timestamp that indicates when the source location was last modified.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>A list of the segment delivery configurations associated with this resource.</p>
                */
            SegmentDeliveryConfigurations?: SegmentDeliveryConfiguration[];
            /**
                * <p>The name of the source location.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the source location.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdateSourceLocationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSourceLocationResponse) => any;
    }
    export interface UpdateVodSourceRequest {
            /**
                * <p>A list of HTTP package configurations for the VOD source on this account.</p>
                */
            HttpPackageConfigurations: HttpPackageConfiguration[] | undefined;
            /**
                * <p>The identifier for the source location you are working on.</p>
                */
            SourceLocationName: string | undefined;
            /**
                * <p>The identifier for the VOD source you are working on.</p>
                */
            VodSourceName: string | undefined;
    }
    export namespace UpdateVodSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVodSourceRequest) => any;
    }
    export interface UpdateVodSourceResponse {
            /**
                * <p>The ARN of the VOD source.</p>
                */
            Arn?: string;
            /**
                * <p>The timestamp that indicates when the VOD source was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The HTTP package configurations.</p>
                */
            HttpPackageConfigurations?: HttpPackageConfiguration[];
            /**
                * <p>The last modified time of the VOD source.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The name of the source location associated with the VOD source.</p>
                */
            SourceLocationName?: string;
            /**
                * <p>The tags assigned to the VOD source.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name of the VOD source.</p>
                */
            VodSourceName?: string;
    }
    export namespace UpdateVodSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVodSourceResponse) => any;
    }
}

declare module '@aws-sdk/client-mediatailor/node_modules/@aws-sdk/client-mediatailor/dist-types/models/MediaTailorServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from MediaTailor service.
        */
    export class MediaTailorServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

