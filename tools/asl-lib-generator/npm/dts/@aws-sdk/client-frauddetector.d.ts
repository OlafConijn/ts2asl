// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-frauddetector' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchCreateVariableCommandInput, BatchCreateVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/BatchCreateVariableCommand";
    import { BatchGetVariableCommandInput, BatchGetVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/BatchGetVariableCommand";
    import { CancelBatchImportJobCommandInput, CancelBatchImportJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CancelBatchImportJobCommand";
    import { CancelBatchPredictionJobCommandInput, CancelBatchPredictionJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CancelBatchPredictionJobCommand";
    import { CreateBatchImportJobCommandInput, CreateBatchImportJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateBatchImportJobCommand";
    import { CreateBatchPredictionJobCommandInput, CreateBatchPredictionJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateBatchPredictionJobCommand";
    import { CreateDetectorVersionCommandInput, CreateDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateDetectorVersionCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateModelCommand";
    import { CreateModelVersionCommandInput, CreateModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateModelVersionCommand";
    import { CreateRuleCommandInput, CreateRuleCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateRuleCommand";
    import { CreateVariableCommandInput, CreateVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateVariableCommand";
    import { DeleteBatchImportJobCommandInput, DeleteBatchImportJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteBatchImportJobCommand";
    import { DeleteBatchPredictionJobCommandInput, DeleteBatchPredictionJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteBatchPredictionJobCommand";
    import { DeleteDetectorCommandInput, DeleteDetectorCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteDetectorCommand";
    import { DeleteDetectorVersionCommandInput, DeleteDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteDetectorVersionCommand";
    import { DeleteEntityTypeCommandInput, DeleteEntityTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEntityTypeCommand";
    import { DeleteEventCommandInput, DeleteEventCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventCommand";
    import { DeleteEventsByEventTypeCommandInput, DeleteEventsByEventTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventsByEventTypeCommand";
    import { DeleteEventTypeCommandInput, DeleteEventTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventTypeCommand";
    import { DeleteExternalModelCommandInput, DeleteExternalModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteExternalModelCommand";
    import { DeleteLabelCommandInput, DeleteLabelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteLabelCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteModelCommand";
    import { DeleteModelVersionCommandInput, DeleteModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteModelVersionCommand";
    import { DeleteOutcomeCommandInput, DeleteOutcomeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteOutcomeCommand";
    import { DeleteRuleCommandInput, DeleteRuleCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteRuleCommand";
    import { DeleteVariableCommandInput, DeleteVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteVariableCommand";
    import { DescribeDetectorCommandInput, DescribeDetectorCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DescribeDetectorCommand";
    import { DescribeModelVersionsCommandInput, DescribeModelVersionsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DescribeModelVersionsCommand";
    import { GetBatchImportJobsCommandInput, GetBatchImportJobsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetBatchImportJobsCommand";
    import { GetBatchPredictionJobsCommandInput, GetBatchPredictionJobsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetBatchPredictionJobsCommand";
    import { GetDeleteEventsByEventTypeStatusCommandInput, GetDeleteEventsByEventTypeStatusCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDeleteEventsByEventTypeStatusCommand";
    import { GetDetectorsCommandInput, GetDetectorsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDetectorsCommand";
    import { GetDetectorVersionCommandInput, GetDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDetectorVersionCommand";
    import { GetEntityTypesCommandInput, GetEntityTypesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEntityTypesCommand";
    import { GetEventCommandInput, GetEventCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventCommand";
    import { GetEventPredictionCommandInput, GetEventPredictionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventPredictionCommand";
    import { GetEventPredictionMetadataCommandInput, GetEventPredictionMetadataCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventPredictionMetadataCommand";
    import { GetEventTypesCommandInput, GetEventTypesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventTypesCommand";
    import { GetExternalModelsCommandInput, GetExternalModelsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetExternalModelsCommand";
    import { GetKMSEncryptionKeyCommandInput, GetKMSEncryptionKeyCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetKMSEncryptionKeyCommand";
    import { GetLabelsCommandInput, GetLabelsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetLabelsCommand";
    import { GetModelsCommandInput, GetModelsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetModelsCommand";
    import { GetModelVersionCommandInput, GetModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetModelVersionCommand";
    import { GetOutcomesCommandInput, GetOutcomesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetOutcomesCommand";
    import { GetRulesCommandInput, GetRulesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetRulesCommand";
    import { GetVariablesCommandInput, GetVariablesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetVariablesCommand";
    import { ListEventPredictionsCommandInput, ListEventPredictionsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/ListEventPredictionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/ListTagsForResourceCommand";
    import { PutDetectorCommandInput, PutDetectorCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutDetectorCommand";
    import { PutEntityTypeCommandInput, PutEntityTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutEntityTypeCommand";
    import { PutEventTypeCommandInput, PutEventTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutEventTypeCommand";
    import { PutExternalModelCommandInput, PutExternalModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutExternalModelCommand";
    import { PutKMSEncryptionKeyCommandInput, PutKMSEncryptionKeyCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutKMSEncryptionKeyCommand";
    import { PutLabelCommandInput, PutLabelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutLabelCommand";
    import { PutOutcomeCommandInput, PutOutcomeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutOutcomeCommand";
    import { SendEventCommandInput, SendEventCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/SendEventCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UntagResourceCommand";
    import { UpdateDetectorVersionCommandInput, UpdateDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionCommand";
    import { UpdateDetectorVersionMetadataCommandInput, UpdateDetectorVersionMetadataCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionMetadataCommand";
    import { UpdateDetectorVersionStatusCommandInput, UpdateDetectorVersionStatusCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionStatusCommand";
    import { UpdateEventLabelCommandInput, UpdateEventLabelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateEventLabelCommand";
    import { UpdateModelCommandInput, UpdateModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelCommand";
    import { UpdateModelVersionCommandInput, UpdateModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelVersionCommand";
    import { UpdateModelVersionStatusCommandInput, UpdateModelVersionStatusCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelVersionStatusCommand";
    import { UpdateRuleMetadataCommandInput, UpdateRuleMetadataCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateRuleMetadataCommand";
    import { UpdateRuleVersionCommandInput, UpdateRuleVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateRuleVersionCommand";
    import { UpdateVariableCommandInput, UpdateVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateVariableCommand";
    import { FraudDetectorClient } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    /**
        * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need
        *             detailed information about Amazon Fraud Detector API actions, data types, and errors. For
        *             more information about Amazon Fraud Detector features, see the <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/">Amazon Fraud Detector User Guide</a>.</p>
        *
        *         <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p>
        *         <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries,
        *             sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over
        *             HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and
        *             handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, see <a href="https://docs.aws.amazon.com/https:/aws.amazon.com/tools/">Tools to build on AWS</a>.
        *             </p>
        */
    export class FraudDetector extends FraudDetectorClient {
            /**
                * <p>Creates a batch of variables.</p>
                */
            batchCreateVariable(args: BatchCreateVariableCommandInput, options?: __HttpHandlerOptions): Promise<BatchCreateVariableCommandOutput>;
            batchCreateVariable(args: BatchCreateVariableCommandInput, cb: (err: any, data?: BatchCreateVariableCommandOutput) => void): void;
            batchCreateVariable(args: BatchCreateVariableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchCreateVariableCommandOutput) => void): void;
            /**
                * <p>Gets a batch of variables.</p>
                */
            batchGetVariable(args: BatchGetVariableCommandInput, options?: __HttpHandlerOptions): Promise<BatchGetVariableCommandOutput>;
            batchGetVariable(args: BatchGetVariableCommandInput, cb: (err: any, data?: BatchGetVariableCommandOutput) => void): void;
            batchGetVariable(args: BatchGetVariableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchGetVariableCommandOutput) => void): void;
            /**
                * <p> Cancels an in-progress batch import job.</p>
                */
            cancelBatchImportJob(args: CancelBatchImportJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelBatchImportJobCommandOutput>;
            cancelBatchImportJob(args: CancelBatchImportJobCommandInput, cb: (err: any, data?: CancelBatchImportJobCommandOutput) => void): void;
            cancelBatchImportJob(args: CancelBatchImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelBatchImportJobCommandOutput) => void): void;
            /**
                * <p>Cancels the specified batch prediction job.</p>
                */
            cancelBatchPredictionJob(args: CancelBatchPredictionJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelBatchPredictionJobCommandOutput>;
            cancelBatchPredictionJob(args: CancelBatchPredictionJobCommandInput, cb: (err: any, data?: CancelBatchPredictionJobCommandOutput) => void): void;
            cancelBatchPredictionJob(args: CancelBatchPredictionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelBatchPredictionJobCommandOutput) => void): void;
            /**
                * <p>Creates a batch import job. </p>
                */
            createBatchImportJob(args: CreateBatchImportJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateBatchImportJobCommandOutput>;
            createBatchImportJob(args: CreateBatchImportJobCommandInput, cb: (err: any, data?: CreateBatchImportJobCommandOutput) => void): void;
            createBatchImportJob(args: CreateBatchImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBatchImportJobCommandOutput) => void): void;
            /**
                * <p>Creates a batch prediction job.</p>
                */
            createBatchPredictionJob(args: CreateBatchPredictionJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateBatchPredictionJobCommandOutput>;
            createBatchPredictionJob(args: CreateBatchPredictionJobCommandInput, cb: (err: any, data?: CreateBatchPredictionJobCommandOutput) => void): void;
            createBatchPredictionJob(args: CreateBatchPredictionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBatchPredictionJobCommandOutput) => void): void;
            /**
                * <p>Creates a detector version. The detector version starts in a <code>DRAFT</code> status.</p>
                */
            createDetectorVersion(args: CreateDetectorVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateDetectorVersionCommandOutput>;
            createDetectorVersion(args: CreateDetectorVersionCommandInput, cb: (err: any, data?: CreateDetectorVersionCommandOutput) => void): void;
            createDetectorVersion(args: CreateDetectorVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDetectorVersionCommandOutput) => void): void;
            /**
                * <p>Creates a model using the specified model type.</p>
                */
            createModel(args: CreateModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelCommandOutput>;
            createModel(args: CreateModelCommandInput, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            createModel(args: CreateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            /**
                * <p>Creates a version of the model using the specified model type and model id.
                *         </p>
                */
            createModelVersion(args: CreateModelVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelVersionCommandOutput>;
            createModelVersion(args: CreateModelVersionCommandInput, cb: (err: any, data?: CreateModelVersionCommandOutput) => void): void;
            createModelVersion(args: CreateModelVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelVersionCommandOutput) => void): void;
            /**
                * <p>Creates a rule for use with the specified detector. </p>
                */
            createRule(args: CreateRuleCommandInput, options?: __HttpHandlerOptions): Promise<CreateRuleCommandOutput>;
            createRule(args: CreateRuleCommandInput, cb: (err: any, data?: CreateRuleCommandOutput) => void): void;
            createRule(args: CreateRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRuleCommandOutput) => void): void;
            /**
                * <p>Creates a variable.</p>
                */
            createVariable(args: CreateVariableCommandInput, options?: __HttpHandlerOptions): Promise<CreateVariableCommandOutput>;
            createVariable(args: CreateVariableCommandInput, cb: (err: any, data?: CreateVariableCommandOutput) => void): void;
            createVariable(args: CreateVariableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVariableCommandOutput) => void): void;
            /**
                * <p>Deletes the specified batch import job ID record. This action does not delete the data that was batch imported.  </p>
                */
            deleteBatchImportJob(args: DeleteBatchImportJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBatchImportJobCommandOutput>;
            deleteBatchImportJob(args: DeleteBatchImportJobCommandInput, cb: (err: any, data?: DeleteBatchImportJobCommandOutput) => void): void;
            deleteBatchImportJob(args: DeleteBatchImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBatchImportJobCommandOutput) => void): void;
            /**
                * <p>Deletes a batch prediction job.</p>
                */
            deleteBatchPredictionJob(args: DeleteBatchPredictionJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBatchPredictionJobCommandOutput>;
            deleteBatchPredictionJob(args: DeleteBatchPredictionJobCommandInput, cb: (err: any, data?: DeleteBatchPredictionJobCommandOutput) => void): void;
            deleteBatchPredictionJob(args: DeleteBatchPredictionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBatchPredictionJobCommandOutput) => void): void;
            /**
                * <p>Deletes the detector. Before deleting a detector, you must first delete all detector versions and rule versions associated with the detector.</p>
                * 	        <p>When you delete a detector, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteDetector(args: DeleteDetectorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDetectorCommandOutput>;
            deleteDetector(args: DeleteDetectorCommandInput, cb: (err: any, data?: DeleteDetectorCommandOutput) => void): void;
            deleteDetector(args: DeleteDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDetectorCommandOutput) => void): void;
            /**
                * <p>Deletes the detector version. You cannot delete detector versions that are in <code>ACTIVE</code> status.</p>
                * 	  	     <p>When you delete a detector version, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteDetectorVersion(args: DeleteDetectorVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDetectorVersionCommandOutput>;
            deleteDetectorVersion(args: DeleteDetectorVersionCommandInput, cb: (err: any, data?: DeleteDetectorVersionCommandOutput) => void): void;
            deleteDetectorVersion(args: DeleteDetectorVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDetectorVersionCommandOutput) => void): void;
            /**
                * <p>Deletes an entity type.</p>
                * 	        <p>You cannot delete an entity type that is included in an event type.</p>
                * 	        <p>When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteEntityType(args: DeleteEntityTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEntityTypeCommandOutput>;
            deleteEntityType(args: DeleteEntityTypeCommandInput, cb: (err: any, data?: DeleteEntityTypeCommandOutput) => void): void;
            deleteEntityType(args: DeleteEntityTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEntityTypeCommandOutput) => void): void;
            /**
                * <p>Deletes the specified event.</p>
                * 	        <p>When you delete an event, Amazon Fraud Detector permanently deletes that event and the event data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteEvent(args: DeleteEventCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventCommandOutput>;
            deleteEvent(args: DeleteEventCommandInput, cb: (err: any, data?: DeleteEventCommandOutput) => void): void;
            deleteEvent(args: DeleteEventCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventCommandOutput) => void): void;
            /**
                * <p>Deletes all events of a particular event type.</p>
                */
            deleteEventsByEventType(args: DeleteEventsByEventTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventsByEventTypeCommandOutput>;
            deleteEventsByEventType(args: DeleteEventsByEventTypeCommandInput, cb: (err: any, data?: DeleteEventsByEventTypeCommandOutput) => void): void;
            deleteEventsByEventType(args: DeleteEventsByEventTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventsByEventTypeCommandOutput) => void): void;
            /**
                * <p>Deletes an event type.</p>
                * 	        <p>You cannot delete an event type that is used in a detector or a model.</p>
                * 	        <p>When you delete an event type, Amazon Fraud Detector permanently deletes that event type and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteEventType(args: DeleteEventTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventTypeCommandOutput>;
            deleteEventType(args: DeleteEventTypeCommandInput, cb: (err: any, data?: DeleteEventTypeCommandOutput) => void): void;
            deleteEventType(args: DeleteEventTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventTypeCommandOutput) => void): void;
            /**
                * <p>Removes a SageMaker model from Amazon Fraud Detector.</p>
                * 	        <p>You can remove an Amazon SageMaker model if it is not associated with a detector version. Removing a SageMaker model disconnects it from Amazon Fraud Detector, but the model remains available in SageMaker.</p>
                */
            deleteExternalModel(args: DeleteExternalModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExternalModelCommandOutput>;
            deleteExternalModel(args: DeleteExternalModelCommandInput, cb: (err: any, data?: DeleteExternalModelCommandOutput) => void): void;
            deleteExternalModel(args: DeleteExternalModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExternalModelCommandOutput) => void): void;
            /**
                * <p>Deletes a label.</p>
                * 	        <p>You cannot delete labels that are included in an event type in Amazon Fraud Detector.</p>
                *          <p>You cannot delete a label assigned to an event ID. You must first delete the relevant event ID.</p>
                *
                *          <p>When you delete a label, Amazon Fraud Detector permanently deletes that label and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteLabel(args: DeleteLabelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLabelCommandOutput>;
            deleteLabel(args: DeleteLabelCommandInput, cb: (err: any, data?: DeleteLabelCommandOutput) => void): void;
            deleteLabel(args: DeleteLabelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLabelCommandOutput) => void): void;
            /**
                * <p>Deletes a model.</p>
                * 	        <p>You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.</p>
                * 	        <p> When you delete a model, Amazon Fraud Detector permanently deletes that model and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteModel(args: DeleteModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelCommandOutput>;
            deleteModel(args: DeleteModelCommandInput, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            deleteModel(args: DeleteModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            /**
                * <p>Deletes a model version.</p>
                * 	        <p>You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.</p>
                * 	        <p> When you delete a model version, Amazon Fraud Detector permanently deletes that model version and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteModelVersion(args: DeleteModelVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelVersionCommandOutput>;
            deleteModelVersion(args: DeleteModelVersionCommandInput, cb: (err: any, data?: DeleteModelVersionCommandOutput) => void): void;
            deleteModelVersion(args: DeleteModelVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelVersionCommandOutput) => void): void;
            /**
                * <p>Deletes an outcome.</p>
                * 	        <p>You cannot delete an outcome that is used in a rule version.</p>
                * 	        <p>When you delete an outcome, Amazon Fraud Detector permanently deletes that outcome and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteOutcome(args: DeleteOutcomeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOutcomeCommandOutput>;
            deleteOutcome(args: DeleteOutcomeCommandInput, cb: (err: any, data?: DeleteOutcomeCommandOutput) => void): void;
            deleteOutcome(args: DeleteOutcomeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOutcomeCommandOutput) => void): void;
            /**
                * <p>Deletes the rule. You cannot delete a rule if it is used by an <code>ACTIVE</code> or <code>INACTIVE</code> detector version.</p>
                * 	  	     <p>When you delete a rule, Amazon Fraud Detector permanently deletes that rule and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteRule(args: DeleteRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRuleCommandOutput>;
            deleteRule(args: DeleteRuleCommandInput, cb: (err: any, data?: DeleteRuleCommandOutput) => void): void;
            deleteRule(args: DeleteRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRuleCommandOutput) => void): void;
            /**
                * <p>Deletes a variable.</p>
                * 	        <p>You can't delete variables that are included in an event type in Amazon Fraud Detector.</p>
                * 	        <p>Amazon Fraud Detector automatically deletes model output variables and SageMaker model output variables when you delete the model. You can't delete these variables manually.</p>
                * 	        <p>When you delete a variable, Amazon Fraud Detector permanently deletes that variable and the data is no longer stored in Amazon Fraud Detector.</p>
                */
            deleteVariable(args: DeleteVariableCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVariableCommandOutput>;
            deleteVariable(args: DeleteVariableCommandInput, cb: (err: any, data?: DeleteVariableCommandOutput) => void): void;
            deleteVariable(args: DeleteVariableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVariableCommandOutput) => void): void;
            /**
                * <p>Gets all versions for a specified detector.</p>
                */
            describeDetector(args: DescribeDetectorCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDetectorCommandOutput>;
            describeDetector(args: DescribeDetectorCommandInput, cb: (err: any, data?: DescribeDetectorCommandOutput) => void): void;
            describeDetector(args: DescribeDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDetectorCommandOutput) => void): void;
            /**
                * <p>Gets all of the model versions for the specified model type or for the specified model type and model ID. You can also get details for a single, specified model version. </p>
                */
            describeModelVersions(args: DescribeModelVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeModelVersionsCommandOutput>;
            describeModelVersions(args: DescribeModelVersionsCommandInput, cb: (err: any, data?: DescribeModelVersionsCommandOutput) => void): void;
            describeModelVersions(args: DescribeModelVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeModelVersionsCommandOutput) => void): void;
            /**
                * <p>Gets all batch import jobs or a specific job of the specified ID. This is a paginated API. If you provide a null <code>maxResults</code>,
                *          this action retrieves a maximum of 50 records per page. If you provide a <code>maxResults</code>, the value must be between 1 and 50.
                *          To get the next page results, provide the pagination token from the <code>GetBatchImportJobsResponse</code> as part of your request.
                *          A null pagination token fetches the records from the beginning.</p>
                */
            getBatchImportJobs(args: GetBatchImportJobsCommandInput, options?: __HttpHandlerOptions): Promise<GetBatchImportJobsCommandOutput>;
            getBatchImportJobs(args: GetBatchImportJobsCommandInput, cb: (err: any, data?: GetBatchImportJobsCommandOutput) => void): void;
            getBatchImportJobs(args: GetBatchImportJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBatchImportJobsCommandOutput) => void): void;
            /**
                * <p>Gets all batch prediction jobs or a specific job if you specify a job ID. This is a paginated API. If you provide a null maxResults, this action retrieves a maximum of 50 records per page. If you provide a maxResults, the value must be between 1 and 50. To get the next page results, provide the pagination token from the GetBatchPredictionJobsResponse as part of your request. A null pagination token fetches the records from the beginning.</p>
                */
            getBatchPredictionJobs(args: GetBatchPredictionJobsCommandInput, options?: __HttpHandlerOptions): Promise<GetBatchPredictionJobsCommandOutput>;
            getBatchPredictionJobs(args: GetBatchPredictionJobsCommandInput, cb: (err: any, data?: GetBatchPredictionJobsCommandOutput) => void): void;
            getBatchPredictionJobs(args: GetBatchPredictionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBatchPredictionJobsCommandOutput) => void): void;
            /**
                * <p>Retrieves the status of a <code>DeleteEventsByEventType</code> action.</p>
                */
            getDeleteEventsByEventTypeStatus(args: GetDeleteEventsByEventTypeStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetDeleteEventsByEventTypeStatusCommandOutput>;
            getDeleteEventsByEventTypeStatus(args: GetDeleteEventsByEventTypeStatusCommandInput, cb: (err: any, data?: GetDeleteEventsByEventTypeStatusCommandOutput) => void): void;
            getDeleteEventsByEventTypeStatus(args: GetDeleteEventsByEventTypeStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeleteEventsByEventTypeStatusCommandOutput) => void): void;
            /**
                * <p>Gets all detectors or a single detector if a <code>detectorId</code> is specified. This is a paginated API. If you
                *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
                *          per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10.
                *          To get the next page results, provide the pagination token from the
                *             <code>GetDetectorsResponse</code> as part of your request. A null pagination token
                *          fetches the records from the beginning. </p>
                */
            getDetectors(args: GetDetectorsCommandInput, options?: __HttpHandlerOptions): Promise<GetDetectorsCommandOutput>;
            getDetectors(args: GetDetectorsCommandInput, cb: (err: any, data?: GetDetectorsCommandOutput) => void): void;
            getDetectors(args: GetDetectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDetectorsCommandOutput) => void): void;
            /**
                * <p>Gets a particular detector version. </p>
                */
            getDetectorVersion(args: GetDetectorVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetDetectorVersionCommandOutput>;
            getDetectorVersion(args: GetDetectorVersionCommandInput, cb: (err: any, data?: GetDetectorVersionCommandOutput) => void): void;
            getDetectorVersion(args: GetDetectorVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDetectorVersionCommandOutput) => void): void;
            /**
                * <p>Gets all entity types or a specific entity type if a name is specified. This is a paginated API. If you
                *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
                *          per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10.
                *          To get the next page results, provide the pagination token from the
                *          <code>GetEntityTypesResponse</code> as part of your request. A null pagination token
                *          fetches the records from the beginning. </p>
                */
            getEntityTypes(args: GetEntityTypesCommandInput, options?: __HttpHandlerOptions): Promise<GetEntityTypesCommandOutput>;
            getEntityTypes(args: GetEntityTypesCommandInput, cb: (err: any, data?: GetEntityTypesCommandOutput) => void): void;
            getEntityTypes(args: GetEntityTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEntityTypesCommandOutput) => void): void;
            /**
                * <p>Retrieves details of events stored with Amazon Fraud Detector. This action does not retrieve prediction results.</p>
                */
            getEvent(args: GetEventCommandInput, options?: __HttpHandlerOptions): Promise<GetEventCommandOutput>;
            getEvent(args: GetEventCommandInput, cb: (err: any, data?: GetEventCommandOutput) => void): void;
            getEvent(args: GetEventCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEventCommandOutput) => void): void;
            /**
                * <p>Evaluates an event against a detector version. If a version ID is not provided, the detector’s (<code>ACTIVE</code>) version is used.</p>
                */
            getEventPrediction(args: GetEventPredictionCommandInput, options?: __HttpHandlerOptions): Promise<GetEventPredictionCommandOutput>;
            getEventPrediction(args: GetEventPredictionCommandInput, cb: (err: any, data?: GetEventPredictionCommandOutput) => void): void;
            getEventPrediction(args: GetEventPredictionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEventPredictionCommandOutput) => void): void;
            /**
                * <p>
                * Gets details of the past fraud predictions for the specified event ID, event type, detector ID, and detector version ID that was generated in the specified time period.
                * </p>
                */
            getEventPredictionMetadata(args: GetEventPredictionMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetEventPredictionMetadataCommandOutput>;
            getEventPredictionMetadata(args: GetEventPredictionMetadataCommandInput, cb: (err: any, data?: GetEventPredictionMetadataCommandOutput) => void): void;
            getEventPredictionMetadata(args: GetEventPredictionMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEventPredictionMetadataCommandOutput) => void): void;
            /**
                * <p>Gets all event types or a specific event type if name is provided. This is a paginated API. If you
                *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
                *          per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10.
                *          To get the next page results, provide the pagination token from the
                *             <code>GetEventTypesResponse</code> as part of your request. A null pagination token
                *          fetches the records from the beginning. </p>
                */
            getEventTypes(args: GetEventTypesCommandInput, options?: __HttpHandlerOptions): Promise<GetEventTypesCommandOutput>;
            getEventTypes(args: GetEventTypesCommandInput, cb: (err: any, data?: GetEventTypesCommandOutput) => void): void;
            getEventTypes(args: GetEventTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEventTypesCommandOutput) => void): void;
            /**
                * <p>Gets the details for one or more Amazon SageMaker models that have been imported into the
                *          service. This is a paginated API. If you provide a null <code>maxResults</code>, this
                *          actions retrieves a maximum of 10 records per page. If you provide a
                *             <code>maxResults</code>, the value must be between 5 and 10. To get the next page
                *          results, provide the pagination token from the <code>GetExternalModelsResult</code> as part
                *          of your request. A null pagination token fetches the records from the beginning. </p>
                */
            getExternalModels(args: GetExternalModelsCommandInput, options?: __HttpHandlerOptions): Promise<GetExternalModelsCommandOutput>;
            getExternalModels(args: GetExternalModelsCommandInput, cb: (err: any, data?: GetExternalModelsCommandOutput) => void): void;
            getExternalModels(args: GetExternalModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExternalModelsCommandOutput) => void): void;
            /**
                * <p>Gets the encryption key if a KMS key has been specified to be used to encrypt content in Amazon Fraud Detector.</p>
                */
            getKMSEncryptionKey(args: GetKMSEncryptionKeyCommandInput, options?: __HttpHandlerOptions): Promise<GetKMSEncryptionKeyCommandOutput>;
            getKMSEncryptionKey(args: GetKMSEncryptionKeyCommandInput, cb: (err: any, data?: GetKMSEncryptionKeyCommandOutput) => void): void;
            getKMSEncryptionKey(args: GetKMSEncryptionKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetKMSEncryptionKeyCommandOutput) => void): void;
            /**
                * <p>Gets all labels or a specific label if name is provided. This is a paginated API. If you
                *          provide a null <code>maxResults</code>, this action retrieves a maximum of 50 records
                *          per page. If you provide a <code>maxResults</code>, the value must be between 10 and 50.
                *          To get the next page results, provide the pagination token from the
                *          <code>GetGetLabelsResponse</code> as part of your request. A null pagination token
                *          fetches the records from the beginning. </p>
                */
            getLabels(args: GetLabelsCommandInput, options?: __HttpHandlerOptions): Promise<GetLabelsCommandOutput>;
            getLabels(args: GetLabelsCommandInput, cb: (err: any, data?: GetLabelsCommandOutput) => void): void;
            getLabels(args: GetLabelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLabelsCommandOutput) => void): void;
            /**
                * <p>Gets one or more models. Gets all models for the Amazon Web Services account if no model type and no model id provided. Gets all models for the Amazon Web Services account and model type, if the model type is specified but model id is not provided. Gets a specific model if (model type, model id) tuple is specified. </p>
                *          <p>This is a paginated API. If you
                *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
                *          per page. If you provide a <code>maxResults</code>, the value must be between 1 and 10.
                *          To get the next page results, provide the pagination token from the
                *             response as part of your request. A null pagination token
                *          fetches the records from the beginning.</p>
                */
            getModels(args: GetModelsCommandInput, options?: __HttpHandlerOptions): Promise<GetModelsCommandOutput>;
            getModels(args: GetModelsCommandInput, cb: (err: any, data?: GetModelsCommandOutput) => void): void;
            getModels(args: GetModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelsCommandOutput) => void): void;
            /**
                * <p>Gets the details of the specified model version.</p>
                */
            getModelVersion(args: GetModelVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetModelVersionCommandOutput>;
            getModelVersion(args: GetModelVersionCommandInput, cb: (err: any, data?: GetModelVersionCommandOutput) => void): void;
            getModelVersion(args: GetModelVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelVersionCommandOutput) => void): void;
            /**
                * <p>Gets one or more outcomes. This is a paginated
                *          API. If you provide a null <code>maxResults</code>, this actions retrieves a maximum of
                *          100 records per page. If you provide a <code>maxResults</code>, the value must be
                *          between 50 and 100. To get the next page results, provide the pagination token from the
                *         <code>GetOutcomesResult</code> as part of your request. A null pagination token
                *          fetches the records from the beginning. </p>
                */
            getOutcomes(args: GetOutcomesCommandInput, options?: __HttpHandlerOptions): Promise<GetOutcomesCommandOutput>;
            getOutcomes(args: GetOutcomesCommandInput, cb: (err: any, data?: GetOutcomesCommandOutput) => void): void;
            getOutcomes(args: GetOutcomesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOutcomesCommandOutput) => void): void;
            /**
                * <p>Get all rules for a detector (paginated) if <code>ruleId</code> and <code>ruleVersion</code> are not specified. Gets all rules for the detector and the <code>ruleId</code> if present (paginated). Gets a specific rule if both the <code>ruleId</code> and the <code>ruleVersion</code> are specified.</p>
                *          <p>This is a paginated API. Providing null maxResults results in retrieving maximum of 100 records per page. If you provide maxResults the value must be between 50 and 100. To get the next page result, a provide a pagination token from GetRulesResult as part of your request. Null pagination token fetches the records from the beginning.</p>
                */
            getRules(args: GetRulesCommandInput, options?: __HttpHandlerOptions): Promise<GetRulesCommandOutput>;
            getRules(args: GetRulesCommandInput, cb: (err: any, data?: GetRulesCommandOutput) => void): void;
            getRules(args: GetRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRulesCommandOutput) => void): void;
            /**
                * <p>Gets all of the variables or the specific variable. This is a
                *          paginated API. Providing null <code>maxSizePerPage</code> results in retrieving maximum of
                *          100 records per page. If you provide <code>maxSizePerPage</code> the value must be between
                *          50 and 100. To get the next page result, a provide a pagination token from
                *         <code>GetVariablesResult</code> as part of your request. Null pagination token
                *          fetches the records from the beginning. </p>
                */
            getVariables(args: GetVariablesCommandInput, options?: __HttpHandlerOptions): Promise<GetVariablesCommandOutput>;
            getVariables(args: GetVariablesCommandInput, cb: (err: any, data?: GetVariablesCommandOutput) => void): void;
            getVariables(args: GetVariablesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVariablesCommandOutput) => void): void;
            /**
                * <p>Gets a list of past predictions. The list can be filtered by detector ID, detector version ID, event ID, event type, or by specifying a time period.
                *     If filter is not specified, the most recent prediction is returned.</p>
                *
                *          <p>For example, the following filter lists all past predictions for <code>xyz</code> event type -
                *     <code>{
                *         "eventType":{
                *         "value": "xyz" }”
                *         }  </code>
                *          </p>
                *
                *          <p>This is a paginated API. If you provide a null <code>maxResults</code>, this action will retrieve a maximum of 10 records per page.
                *   If you provide a <code>maxResults</code>, the value must be between 50 and 100. To get the next page results, provide
                *   the <code>nextToken</code> from the response as part of your request. A null <code>nextToken</code> fetches the records from the beginning.
                * </p>
                */
            listEventPredictions(args: ListEventPredictionsCommandInput, options?: __HttpHandlerOptions): Promise<ListEventPredictionsCommandOutput>;
            listEventPredictions(args: ListEventPredictionsCommandInput, cb: (err: any, data?: ListEventPredictionsCommandOutput) => void): void;
            listEventPredictions(args: ListEventPredictionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEventPredictionsCommandOutput) => void): void;
            /**
                * <p>Lists all tags associated with the resource. This is a paginated API. To get the next page results, provide the pagination token from the
                *             response as part of your request. A null pagination token
                *          fetches the records from the beginning. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates or updates a detector. </p>
                */
            putDetector(args: PutDetectorCommandInput, options?: __HttpHandlerOptions): Promise<PutDetectorCommandOutput>;
            putDetector(args: PutDetectorCommandInput, cb: (err: any, data?: PutDetectorCommandOutput) => void): void;
            putDetector(args: PutDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutDetectorCommandOutput) => void): void;
            /**
                * <p>Creates or updates an entity type. An entity represents who is performing the event. As part of a fraud prediction, you pass the entity ID to indicate the specific entity who performed the event. An entity type classifies the entity. Example classifications include customer, merchant, or account.</p>
                */
            putEntityType(args: PutEntityTypeCommandInput, options?: __HttpHandlerOptions): Promise<PutEntityTypeCommandOutput>;
            putEntityType(args: PutEntityTypeCommandInput, cb: (err: any, data?: PutEntityTypeCommandOutput) => void): void;
            putEntityType(args: PutEntityTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEntityTypeCommandOutput) => void): void;
            /**
                * <p>Creates or updates an event type. An event is a business activity that is evaluated for fraud risk. With Amazon Fraud Detector, you generate fraud predictions for events. An event type defines the structure for an event sent to Amazon Fraud Detector. This includes the variables sent as part of the event, the entity performing the event (such as a customer), and the labels that classify the event. Example event types include online payment transactions, account registrations, and authentications.</p>
                */
            putEventType(args: PutEventTypeCommandInput, options?: __HttpHandlerOptions): Promise<PutEventTypeCommandOutput>;
            putEventType(args: PutEventTypeCommandInput, cb: (err: any, data?: PutEventTypeCommandOutput) => void): void;
            putEventType(args: PutEventTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutEventTypeCommandOutput) => void): void;
            /**
                * <p>Creates or updates an Amazon SageMaker model endpoint. You can also use this action to update the configuration of the model endpoint, including the IAM role and/or the mapped variables.  </p>
                */
            putExternalModel(args: PutExternalModelCommandInput, options?: __HttpHandlerOptions): Promise<PutExternalModelCommandOutput>;
            putExternalModel(args: PutExternalModelCommandInput, cb: (err: any, data?: PutExternalModelCommandOutput) => void): void;
            putExternalModel(args: PutExternalModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutExternalModelCommandOutput) => void): void;
            /**
                * <p>Specifies the KMS key to be used to encrypt content in Amazon Fraud Detector.</p>
                */
            putKMSEncryptionKey(args: PutKMSEncryptionKeyCommandInput, options?: __HttpHandlerOptions): Promise<PutKMSEncryptionKeyCommandOutput>;
            putKMSEncryptionKey(args: PutKMSEncryptionKeyCommandInput, cb: (err: any, data?: PutKMSEncryptionKeyCommandOutput) => void): void;
            putKMSEncryptionKey(args: PutKMSEncryptionKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutKMSEncryptionKeyCommandOutput) => void): void;
            /**
                * <p>Creates or updates label. A label classifies an event as fraudulent or legitimate. Labels are associated with event types and used to train supervised machine learning models in Amazon Fraud Detector. </p>
                */
            putLabel(args: PutLabelCommandInput, options?: __HttpHandlerOptions): Promise<PutLabelCommandOutput>;
            putLabel(args: PutLabelCommandInput, cb: (err: any, data?: PutLabelCommandOutput) => void): void;
            putLabel(args: PutLabelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutLabelCommandOutput) => void): void;
            /**
                * <p>Creates or updates an outcome. </p>
                */
            putOutcome(args: PutOutcomeCommandInput, options?: __HttpHandlerOptions): Promise<PutOutcomeCommandOutput>;
            putOutcome(args: PutOutcomeCommandInput, cb: (err: any, data?: PutOutcomeCommandOutput) => void): void;
            putOutcome(args: PutOutcomeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutOutcomeCommandOutput) => void): void;
            /**
                * <p>Stores events in Amazon Fraud Detector without generating fraud predictions for those events. For example, you can use <code>SendEvent</code> to upload a historical dataset, which you can then later use to train a model.</p>
                */
            sendEvent(args: SendEventCommandInput, options?: __HttpHandlerOptions): Promise<SendEventCommandOutput>;
            sendEvent(args: SendEventCommandInput, cb: (err: any, data?: SendEventCommandOutput) => void): void;
            sendEvent(args: SendEventCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendEventCommandOutput) => void): void;
            /**
                * <p>Assigns tags to a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p> Updates a detector version. The detector version attributes that you can update include models, external model endpoints, rules, rule execution mode, and description. You can only update a <code>DRAFT</code> detector version.</p>
                */
            updateDetectorVersion(args: UpdateDetectorVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDetectorVersionCommandOutput>;
            updateDetectorVersion(args: UpdateDetectorVersionCommandInput, cb: (err: any, data?: UpdateDetectorVersionCommandOutput) => void): void;
            updateDetectorVersion(args: UpdateDetectorVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDetectorVersionCommandOutput) => void): void;
            /**
                * <p>Updates the detector version's description. You can update the metadata for any detector version (<code>DRAFT, ACTIVE,</code> or
                *                 <code>INACTIVE</code>). </p>
                */
            updateDetectorVersionMetadata(args: UpdateDetectorVersionMetadataCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDetectorVersionMetadataCommandOutput>;
            updateDetectorVersionMetadata(args: UpdateDetectorVersionMetadataCommandInput, cb: (err: any, data?: UpdateDetectorVersionMetadataCommandOutput) => void): void;
            updateDetectorVersionMetadata(args: UpdateDetectorVersionMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDetectorVersionMetadataCommandOutput) => void): void;
            /**
                * <p>Updates the detector version’s status. You can perform the following promotions or
                *             demotions using <code>UpdateDetectorVersionStatus</code>: <code>DRAFT</code> to <code>ACTIVE</code>, <code>ACTIVE</code> to <code>INACTIVE</code>, and <code>INACTIVE</code> to <code>ACTIVE</code>.</p>
                */
            updateDetectorVersionStatus(args: UpdateDetectorVersionStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDetectorVersionStatusCommandOutput>;
            updateDetectorVersionStatus(args: UpdateDetectorVersionStatusCommandInput, cb: (err: any, data?: UpdateDetectorVersionStatusCommandOutput) => void): void;
            updateDetectorVersionStatus(args: UpdateDetectorVersionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDetectorVersionStatusCommandOutput) => void): void;
            /**
                * <p>Updates the specified event with a new label.</p>
                */
            updateEventLabel(args: UpdateEventLabelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEventLabelCommandOutput>;
            updateEventLabel(args: UpdateEventLabelCommandInput, cb: (err: any, data?: UpdateEventLabelCommandOutput) => void): void;
            updateEventLabel(args: UpdateEventLabelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEventLabelCommandOutput) => void): void;
            /**
                * <p>Updates model description.</p>
                */
            updateModel(args: UpdateModelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateModelCommandOutput>;
            updateModel(args: UpdateModelCommandInput, cb: (err: any, data?: UpdateModelCommandOutput) => void): void;
            updateModel(args: UpdateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateModelCommandOutput) => void): void;
            /**
                * <p>Updates a model version. Updating a model version retrains an existing model version using updated training data and produces a new minor version of the model. You can update the training data set location and data access role attributes using this action. This action creates and trains a new minor version of the model, for example version 1.01, 1.02, 1.03.</p>
                */
            updateModelVersion(args: UpdateModelVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateModelVersionCommandOutput>;
            updateModelVersion(args: UpdateModelVersionCommandInput, cb: (err: any, data?: UpdateModelVersionCommandOutput) => void): void;
            updateModelVersion(args: UpdateModelVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateModelVersionCommandOutput) => void): void;
            /**
                * <p>Updates the status of a model version.</p>
                *          <p>You can perform the following status updates:</p>
                *          <ol>
                *             <li>
                *                <p>Change the <code>TRAINING_IN_PROGRESS</code> status to <code>TRAINING_CANCELLED</code>.</p>
                *             </li>
                *             <li>
                *                <p>Change the <code>TRAINING_COMPLETE</code> status to <code>ACTIVE</code>.</p>
                *             </li>
                *             <li>
                *                <p>Change <code>ACTIVE</code> to <code>INACTIVE</code>.</p>
                *             </li>
                *          </ol>
                */
            updateModelVersionStatus(args: UpdateModelVersionStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateModelVersionStatusCommandOutput>;
            updateModelVersionStatus(args: UpdateModelVersionStatusCommandInput, cb: (err: any, data?: UpdateModelVersionStatusCommandOutput) => void): void;
            updateModelVersionStatus(args: UpdateModelVersionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateModelVersionStatusCommandOutput) => void): void;
            /**
                * <p>Updates a rule's metadata. The description attribute can be updated.</p>
                */
            updateRuleMetadata(args: UpdateRuleMetadataCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRuleMetadataCommandOutput>;
            updateRuleMetadata(args: UpdateRuleMetadataCommandInput, cb: (err: any, data?: UpdateRuleMetadataCommandOutput) => void): void;
            updateRuleMetadata(args: UpdateRuleMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRuleMetadataCommandOutput) => void): void;
            /**
                * <p>Updates a rule version resulting in a new rule version. Updates a rule version resulting in a new rule version (version 1, 2, 3 ...). </p>
                */
            updateRuleVersion(args: UpdateRuleVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRuleVersionCommandOutput>;
            updateRuleVersion(args: UpdateRuleVersionCommandInput, cb: (err: any, data?: UpdateRuleVersionCommandOutput) => void): void;
            updateRuleVersion(args: UpdateRuleVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRuleVersionCommandOutput) => void): void;
            /**
                * <p>Updates a variable.</p>
                */
            updateVariable(args: UpdateVariableCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVariableCommandOutput>;
            updateVariable(args: UpdateVariableCommandInput, cb: (err: any, data?: UpdateVariableCommandOutput) => void): void;
            updateVariable(args: UpdateVariableCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVariableCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/BatchCreateVariableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { BatchCreateVariableRequest, BatchCreateVariableResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface BatchCreateVariableCommandInput extends BatchCreateVariableRequest {
    }
    export interface BatchCreateVariableCommandOutput extends BatchCreateVariableResult, __MetadataBearer {
    }
    /**
        * <p>Creates a batch of variables.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, BatchCreateVariableCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, BatchCreateVariableCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new BatchCreateVariableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchCreateVariableCommandInput} for command's `input` shape.
        * @see {@link BatchCreateVariableCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class BatchCreateVariableCommand extends $Command<BatchCreateVariableCommandInput, BatchCreateVariableCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: BatchCreateVariableCommandInput;
            constructor(input: BatchCreateVariableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchCreateVariableCommandInput, BatchCreateVariableCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/BatchGetVariableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { BatchGetVariableRequest, BatchGetVariableResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface BatchGetVariableCommandInput extends BatchGetVariableRequest {
    }
    export interface BatchGetVariableCommandOutput extends BatchGetVariableResult, __MetadataBearer {
    }
    /**
        * <p>Gets a batch of variables.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, BatchGetVariableCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, BatchGetVariableCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new BatchGetVariableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchGetVariableCommandInput} for command's `input` shape.
        * @see {@link BatchGetVariableCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class BatchGetVariableCommand extends $Command<BatchGetVariableCommandInput, BatchGetVariableCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: BatchGetVariableCommandInput;
            constructor(input: BatchGetVariableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchGetVariableCommandInput, BatchGetVariableCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CancelBatchImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CancelBatchImportJobRequest, CancelBatchImportJobResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CancelBatchImportJobCommandInput extends CancelBatchImportJobRequest {
    }
    export interface CancelBatchImportJobCommandOutput extends CancelBatchImportJobResult, __MetadataBearer {
    }
    /**
        * <p> Cancels an in-progress batch import job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CancelBatchImportJobCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CancelBatchImportJobCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CancelBatchImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelBatchImportJobCommandInput} for command's `input` shape.
        * @see {@link CancelBatchImportJobCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CancelBatchImportJobCommand extends $Command<CancelBatchImportJobCommandInput, CancelBatchImportJobCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CancelBatchImportJobCommandInput;
            constructor(input: CancelBatchImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelBatchImportJobCommandInput, CancelBatchImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CancelBatchPredictionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CancelBatchPredictionJobRequest, CancelBatchPredictionJobResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CancelBatchPredictionJobCommandInput extends CancelBatchPredictionJobRequest {
    }
    export interface CancelBatchPredictionJobCommandOutput extends CancelBatchPredictionJobResult, __MetadataBearer {
    }
    /**
        * <p>Cancels the specified batch prediction job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CancelBatchPredictionJobCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CancelBatchPredictionJobCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CancelBatchPredictionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelBatchPredictionJobCommandInput} for command's `input` shape.
        * @see {@link CancelBatchPredictionJobCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CancelBatchPredictionJobCommand extends $Command<CancelBatchPredictionJobCommandInput, CancelBatchPredictionJobCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CancelBatchPredictionJobCommandInput;
            constructor(input: CancelBatchPredictionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelBatchPredictionJobCommandInput, CancelBatchPredictionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateBatchImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CreateBatchImportJobRequest, CreateBatchImportJobResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CreateBatchImportJobCommandInput extends CreateBatchImportJobRequest {
    }
    export interface CreateBatchImportJobCommandOutput extends CreateBatchImportJobResult, __MetadataBearer {
    }
    /**
        * <p>Creates a batch import job. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CreateBatchImportJobCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CreateBatchImportJobCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CreateBatchImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBatchImportJobCommandInput} for command's `input` shape.
        * @see {@link CreateBatchImportJobCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CreateBatchImportJobCommand extends $Command<CreateBatchImportJobCommandInput, CreateBatchImportJobCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CreateBatchImportJobCommandInput;
            constructor(input: CreateBatchImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBatchImportJobCommandInput, CreateBatchImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateBatchPredictionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CreateBatchPredictionJobRequest, CreateBatchPredictionJobResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CreateBatchPredictionJobCommandInput extends CreateBatchPredictionJobRequest {
    }
    export interface CreateBatchPredictionJobCommandOutput extends CreateBatchPredictionJobResult, __MetadataBearer {
    }
    /**
        * <p>Creates a batch prediction job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CreateBatchPredictionJobCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CreateBatchPredictionJobCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CreateBatchPredictionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBatchPredictionJobCommandInput} for command's `input` shape.
        * @see {@link CreateBatchPredictionJobCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CreateBatchPredictionJobCommand extends $Command<CreateBatchPredictionJobCommandInput, CreateBatchPredictionJobCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CreateBatchPredictionJobCommandInput;
            constructor(input: CreateBatchPredictionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBatchPredictionJobCommandInput, CreateBatchPredictionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateDetectorVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CreateDetectorVersionRequest, CreateDetectorVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CreateDetectorVersionCommandInput extends CreateDetectorVersionRequest {
    }
    export interface CreateDetectorVersionCommandOutput extends CreateDetectorVersionResult, __MetadataBearer {
    }
    /**
        * <p>Creates a detector version. The detector version starts in a <code>DRAFT</code> status.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CreateDetectorVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CreateDetectorVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CreateDetectorVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDetectorVersionCommandInput} for command's `input` shape.
        * @see {@link CreateDetectorVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CreateDetectorVersionCommand extends $Command<CreateDetectorVersionCommandInput, CreateDetectorVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CreateDetectorVersionCommandInput;
            constructor(input: CreateDetectorVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDetectorVersionCommandInput, CreateDetectorVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CreateModelRequest, CreateModelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CreateModelCommandInput extends CreateModelRequest {
    }
    export interface CreateModelCommandOutput extends CreateModelResult, __MetadataBearer {
    }
    /**
        * <p>Creates a model using the specified model type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CreateModelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CreateModelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CreateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelCommandInput} for command's `input` shape.
        * @see {@link CreateModelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CreateModelCommand extends $Command<CreateModelCommandInput, CreateModelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CreateModelCommandInput;
            constructor(input: CreateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelCommandInput, CreateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateModelVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CreateModelVersionRequest, CreateModelVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CreateModelVersionCommandInput extends CreateModelVersionRequest {
    }
    export interface CreateModelVersionCommandOutput extends CreateModelVersionResult, __MetadataBearer {
    }
    /**
        * <p>Creates a version of the model using the specified model type and model id.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CreateModelVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CreateModelVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CreateModelVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelVersionCommandInput} for command's `input` shape.
        * @see {@link CreateModelVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CreateModelVersionCommand extends $Command<CreateModelVersionCommandInput, CreateModelVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CreateModelVersionCommandInput;
            constructor(input: CreateModelVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelVersionCommandInput, CreateModelVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CreateRuleRequest, CreateRuleResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CreateRuleCommandInput extends CreateRuleRequest {
    }
    export interface CreateRuleCommandOutput extends CreateRuleResult, __MetadataBearer {
    }
    /**
        * <p>Creates a rule for use with the specified detector. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CreateRuleCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CreateRuleCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CreateRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRuleCommandInput} for command's `input` shape.
        * @see {@link CreateRuleCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CreateRuleCommand extends $Command<CreateRuleCommandInput, CreateRuleCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CreateRuleCommandInput;
            constructor(input: CreateRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRuleCommandInput, CreateRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateVariableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { CreateVariableRequest, CreateVariableResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface CreateVariableCommandInput extends CreateVariableRequest {
    }
    export interface CreateVariableCommandOutput extends CreateVariableResult, __MetadataBearer {
    }
    /**
        * <p>Creates a variable.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, CreateVariableCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, CreateVariableCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new CreateVariableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVariableCommandInput} for command's `input` shape.
        * @see {@link CreateVariableCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class CreateVariableCommand extends $Command<CreateVariableCommandInput, CreateVariableCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: CreateVariableCommandInput;
            constructor(input: CreateVariableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVariableCommandInput, CreateVariableCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteBatchImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteBatchImportJobRequest, DeleteBatchImportJobResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteBatchImportJobCommandInput extends DeleteBatchImportJobRequest {
    }
    export interface DeleteBatchImportJobCommandOutput extends DeleteBatchImportJobResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified batch import job ID record. This action does not delete the data that was batch imported.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteBatchImportJobCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteBatchImportJobCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteBatchImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBatchImportJobCommandInput} for command's `input` shape.
        * @see {@link DeleteBatchImportJobCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteBatchImportJobCommand extends $Command<DeleteBatchImportJobCommandInput, DeleteBatchImportJobCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteBatchImportJobCommandInput;
            constructor(input: DeleteBatchImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBatchImportJobCommandInput, DeleteBatchImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteBatchPredictionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteBatchPredictionJobRequest, DeleteBatchPredictionJobResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteBatchPredictionJobCommandInput extends DeleteBatchPredictionJobRequest {
    }
    export interface DeleteBatchPredictionJobCommandOutput extends DeleteBatchPredictionJobResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a batch prediction job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteBatchPredictionJobCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteBatchPredictionJobCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteBatchPredictionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBatchPredictionJobCommandInput} for command's `input` shape.
        * @see {@link DeleteBatchPredictionJobCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteBatchPredictionJobCommand extends $Command<DeleteBatchPredictionJobCommandInput, DeleteBatchPredictionJobCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteBatchPredictionJobCommandInput;
            constructor(input: DeleteBatchPredictionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBatchPredictionJobCommandInput, DeleteBatchPredictionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteDetectorRequest, DeleteDetectorResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteDetectorCommandInput extends DeleteDetectorRequest {
    }
    export interface DeleteDetectorCommandOutput extends DeleteDetectorResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the detector. Before deleting a detector, you must first delete all detector versions and rule versions associated with the detector.</p>
        * 	        <p>When you delete a detector, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteDetectorCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteDetectorCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDetectorCommandInput} for command's `input` shape.
        * @see {@link DeleteDetectorCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteDetectorCommand extends $Command<DeleteDetectorCommandInput, DeleteDetectorCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteDetectorCommandInput;
            constructor(input: DeleteDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDetectorCommandInput, DeleteDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteDetectorVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteDetectorVersionRequest, DeleteDetectorVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteDetectorVersionCommandInput extends DeleteDetectorVersionRequest {
    }
    export interface DeleteDetectorVersionCommandOutput extends DeleteDetectorVersionResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the detector version. You cannot delete detector versions that are in <code>ACTIVE</code> status.</p>
        * 	  	     <p>When you delete a detector version, Amazon Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteDetectorVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteDetectorVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteDetectorVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDetectorVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteDetectorVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteDetectorVersionCommand extends $Command<DeleteDetectorVersionCommandInput, DeleteDetectorVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteDetectorVersionCommandInput;
            constructor(input: DeleteDetectorVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDetectorVersionCommandInput, DeleteDetectorVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEntityTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteEntityTypeRequest, DeleteEntityTypeResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteEntityTypeCommandInput extends DeleteEntityTypeRequest {
    }
    export interface DeleteEntityTypeCommandOutput extends DeleteEntityTypeResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an entity type.</p>
        * 	        <p>You cannot delete an entity type that is included in an event type.</p>
        * 	        <p>When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteEntityTypeCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteEntityTypeCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteEntityTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEntityTypeCommandInput} for command's `input` shape.
        * @see {@link DeleteEntityTypeCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteEntityTypeCommand extends $Command<DeleteEntityTypeCommandInput, DeleteEntityTypeCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteEntityTypeCommandInput;
            constructor(input: DeleteEntityTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEntityTypeCommandInput, DeleteEntityTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteEventRequest, DeleteEventResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteEventCommandInput extends DeleteEventRequest {
    }
    export interface DeleteEventCommandOutput extends DeleteEventResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified event.</p>
        * 	        <p>When you delete an event, Amazon Fraud Detector permanently deletes that event and the event data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteEventCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteEventCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteEventCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventCommandInput} for command's `input` shape.
        * @see {@link DeleteEventCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteEventCommand extends $Command<DeleteEventCommandInput, DeleteEventCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteEventCommandInput;
            constructor(input: DeleteEventCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventCommandInput, DeleteEventCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventsByEventTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteEventsByEventTypeRequest, DeleteEventsByEventTypeResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteEventsByEventTypeCommandInput extends DeleteEventsByEventTypeRequest {
    }
    export interface DeleteEventsByEventTypeCommandOutput extends DeleteEventsByEventTypeResult, __MetadataBearer {
    }
    /**
        * <p>Deletes all events of a particular event type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteEventsByEventTypeCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteEventsByEventTypeCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteEventsByEventTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventsByEventTypeCommandInput} for command's `input` shape.
        * @see {@link DeleteEventsByEventTypeCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteEventsByEventTypeCommand extends $Command<DeleteEventsByEventTypeCommandInput, DeleteEventsByEventTypeCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteEventsByEventTypeCommandInput;
            constructor(input: DeleteEventsByEventTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventsByEventTypeCommandInput, DeleteEventsByEventTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteEventTypeRequest, DeleteEventTypeResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteEventTypeCommandInput extends DeleteEventTypeRequest {
    }
    export interface DeleteEventTypeCommandOutput extends DeleteEventTypeResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an event type.</p>
        * 	        <p>You cannot delete an event type that is used in a detector or a model.</p>
        * 	        <p>When you delete an event type, Amazon Fraud Detector permanently deletes that event type and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteEventTypeCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteEventTypeCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteEventTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventTypeCommandInput} for command's `input` shape.
        * @see {@link DeleteEventTypeCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteEventTypeCommand extends $Command<DeleteEventTypeCommandInput, DeleteEventTypeCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteEventTypeCommandInput;
            constructor(input: DeleteEventTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventTypeCommandInput, DeleteEventTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteExternalModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteExternalModelRequest, DeleteExternalModelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteExternalModelCommandInput extends DeleteExternalModelRequest {
    }
    export interface DeleteExternalModelCommandOutput extends DeleteExternalModelResult, __MetadataBearer {
    }
    /**
        * <p>Removes a SageMaker model from Amazon Fraud Detector.</p>
        * 	        <p>You can remove an Amazon SageMaker model if it is not associated with a detector version. Removing a SageMaker model disconnects it from Amazon Fraud Detector, but the model remains available in SageMaker.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteExternalModelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteExternalModelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteExternalModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteExternalModelCommandInput} for command's `input` shape.
        * @see {@link DeleteExternalModelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteExternalModelCommand extends $Command<DeleteExternalModelCommandInput, DeleteExternalModelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteExternalModelCommandInput;
            constructor(input: DeleteExternalModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteExternalModelCommandInput, DeleteExternalModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteLabelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteLabelRequest, DeleteLabelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteLabelCommandInput extends DeleteLabelRequest {
    }
    export interface DeleteLabelCommandOutput extends DeleteLabelResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a label.</p>
        * 	        <p>You cannot delete labels that are included in an event type in Amazon Fraud Detector.</p>
        *          <p>You cannot delete a label assigned to an event ID. You must first delete the relevant event ID.</p>
        *
        *          <p>When you delete a label, Amazon Fraud Detector permanently deletes that label and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteLabelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteLabelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteLabelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLabelCommandInput} for command's `input` shape.
        * @see {@link DeleteLabelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteLabelCommand extends $Command<DeleteLabelCommandInput, DeleteLabelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteLabelCommandInput;
            constructor(input: DeleteLabelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLabelCommandInput, DeleteLabelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteModelRequest, DeleteModelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteModelCommandInput extends DeleteModelRequest {
    }
    export interface DeleteModelCommandOutput extends DeleteModelResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a model.</p>
        * 	        <p>You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.</p>
        * 	        <p> When you delete a model, Amazon Fraud Detector permanently deletes that model and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteModelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteModelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelCommandInput} for command's `input` shape.
        * @see {@link DeleteModelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteModelCommand extends $Command<DeleteModelCommandInput, DeleteModelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteModelCommandInput;
            constructor(input: DeleteModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelCommandInput, DeleteModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteModelVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteModelVersionRequest, DeleteModelVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteModelVersionCommandInput extends DeleteModelVersionRequest {
    }
    export interface DeleteModelVersionCommandOutput extends DeleteModelVersionResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a model version.</p>
        * 	        <p>You can delete models and model versions in Amazon Fraud Detector, provided that they are not associated with a detector version.</p>
        * 	        <p> When you delete a model version, Amazon Fraud Detector permanently deletes that model version and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteModelVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteModelVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteModelVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteModelVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteModelVersionCommand extends $Command<DeleteModelVersionCommandInput, DeleteModelVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteModelVersionCommandInput;
            constructor(input: DeleteModelVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelVersionCommandInput, DeleteModelVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteOutcomeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteOutcomeRequest, DeleteOutcomeResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteOutcomeCommandInput extends DeleteOutcomeRequest {
    }
    export interface DeleteOutcomeCommandOutput extends DeleteOutcomeResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an outcome.</p>
        * 	        <p>You cannot delete an outcome that is used in a rule version.</p>
        * 	        <p>When you delete an outcome, Amazon Fraud Detector permanently deletes that outcome and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteOutcomeCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteOutcomeCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteOutcomeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOutcomeCommandInput} for command's `input` shape.
        * @see {@link DeleteOutcomeCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteOutcomeCommand extends $Command<DeleteOutcomeCommandInput, DeleteOutcomeCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteOutcomeCommandInput;
            constructor(input: DeleteOutcomeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOutcomeCommandInput, DeleteOutcomeCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteRuleRequest, DeleteRuleResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteRuleCommandInput extends DeleteRuleRequest {
    }
    export interface DeleteRuleCommandOutput extends DeleteRuleResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the rule. You cannot delete a rule if it is used by an <code>ACTIVE</code> or <code>INACTIVE</code> detector version.</p>
        * 	  	     <p>When you delete a rule, Amazon Fraud Detector permanently deletes that rule and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteRuleCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteRuleCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRuleCommandInput} for command's `input` shape.
        * @see {@link DeleteRuleCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteRuleCommand extends $Command<DeleteRuleCommandInput, DeleteRuleCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteRuleCommandInput;
            constructor(input: DeleteRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRuleCommandInput, DeleteRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteVariableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DeleteVariableRequest, DeleteVariableResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DeleteVariableCommandInput extends DeleteVariableRequest {
    }
    export interface DeleteVariableCommandOutput extends DeleteVariableResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a variable.</p>
        * 	        <p>You can't delete variables that are included in an event type in Amazon Fraud Detector.</p>
        * 	        <p>Amazon Fraud Detector automatically deletes model output variables and SageMaker model output variables when you delete the model. You can't delete these variables manually.</p>
        * 	        <p>When you delete a variable, Amazon Fraud Detector permanently deletes that variable and the data is no longer stored in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DeleteVariableCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DeleteVariableCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DeleteVariableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVariableCommandInput} for command's `input` shape.
        * @see {@link DeleteVariableCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DeleteVariableCommand extends $Command<DeleteVariableCommandInput, DeleteVariableCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DeleteVariableCommandInput;
            constructor(input: DeleteVariableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVariableCommandInput, DeleteVariableCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DescribeDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DescribeDetectorRequest, DescribeDetectorResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DescribeDetectorCommandInput extends DescribeDetectorRequest {
    }
    export interface DescribeDetectorCommandOutput extends DescribeDetectorResult, __MetadataBearer {
    }
    /**
        * <p>Gets all versions for a specified detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DescribeDetectorCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DescribeDetectorCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DescribeDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDetectorCommandInput} for command's `input` shape.
        * @see {@link DescribeDetectorCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DescribeDetectorCommand extends $Command<DescribeDetectorCommandInput, DescribeDetectorCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DescribeDetectorCommandInput;
            constructor(input: DescribeDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDetectorCommandInput, DescribeDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DescribeModelVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { DescribeModelVersionsRequest, DescribeModelVersionsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface DescribeModelVersionsCommandInput extends DescribeModelVersionsRequest {
    }
    export interface DescribeModelVersionsCommandOutput extends DescribeModelVersionsResult, __MetadataBearer {
    }
    /**
        * <p>Gets all of the model versions for the specified model type or for the specified model type and model ID. You can also get details for a single, specified model version. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, DescribeModelVersionsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, DescribeModelVersionsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new DescribeModelVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeModelVersionsCommandInput} for command's `input` shape.
        * @see {@link DescribeModelVersionsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class DescribeModelVersionsCommand extends $Command<DescribeModelVersionsCommandInput, DescribeModelVersionsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: DescribeModelVersionsCommandInput;
            constructor(input: DescribeModelVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeModelVersionsCommandInput, DescribeModelVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetBatchImportJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetBatchImportJobsRequest, GetBatchImportJobsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetBatchImportJobsCommandInput extends GetBatchImportJobsRequest {
    }
    export interface GetBatchImportJobsCommandOutput extends GetBatchImportJobsResult, __MetadataBearer {
    }
    /**
        * <p>Gets all batch import jobs or a specific job of the specified ID. This is a paginated API. If you provide a null <code>maxResults</code>,
        *          this action retrieves a maximum of 50 records per page. If you provide a <code>maxResults</code>, the value must be between 1 and 50.
        *          To get the next page results, provide the pagination token from the <code>GetBatchImportJobsResponse</code> as part of your request.
        *          A null pagination token fetches the records from the beginning.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetBatchImportJobsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetBatchImportJobsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetBatchImportJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBatchImportJobsCommandInput} for command's `input` shape.
        * @see {@link GetBatchImportJobsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetBatchImportJobsCommand extends $Command<GetBatchImportJobsCommandInput, GetBatchImportJobsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetBatchImportJobsCommandInput;
            constructor(input: GetBatchImportJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBatchImportJobsCommandInput, GetBatchImportJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetBatchPredictionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetBatchPredictionJobsRequest, GetBatchPredictionJobsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetBatchPredictionJobsCommandInput extends GetBatchPredictionJobsRequest {
    }
    export interface GetBatchPredictionJobsCommandOutput extends GetBatchPredictionJobsResult, __MetadataBearer {
    }
    /**
        * <p>Gets all batch prediction jobs or a specific job if you specify a job ID. This is a paginated API. If you provide a null maxResults, this action retrieves a maximum of 50 records per page. If you provide a maxResults, the value must be between 1 and 50. To get the next page results, provide the pagination token from the GetBatchPredictionJobsResponse as part of your request. A null pagination token fetches the records from the beginning.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetBatchPredictionJobsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetBatchPredictionJobsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetBatchPredictionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBatchPredictionJobsCommandInput} for command's `input` shape.
        * @see {@link GetBatchPredictionJobsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetBatchPredictionJobsCommand extends $Command<GetBatchPredictionJobsCommandInput, GetBatchPredictionJobsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetBatchPredictionJobsCommandInput;
            constructor(input: GetBatchPredictionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBatchPredictionJobsCommandInput, GetBatchPredictionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDeleteEventsByEventTypeStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetDeleteEventsByEventTypeStatusRequest, GetDeleteEventsByEventTypeStatusResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetDeleteEventsByEventTypeStatusCommandInput extends GetDeleteEventsByEventTypeStatusRequest {
    }
    export interface GetDeleteEventsByEventTypeStatusCommandOutput extends GetDeleteEventsByEventTypeStatusResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the status of a <code>DeleteEventsByEventType</code> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetDeleteEventsByEventTypeStatusCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetDeleteEventsByEventTypeStatusCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetDeleteEventsByEventTypeStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeleteEventsByEventTypeStatusCommandInput} for command's `input` shape.
        * @see {@link GetDeleteEventsByEventTypeStatusCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetDeleteEventsByEventTypeStatusCommand extends $Command<GetDeleteEventsByEventTypeStatusCommandInput, GetDeleteEventsByEventTypeStatusCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetDeleteEventsByEventTypeStatusCommandInput;
            constructor(input: GetDeleteEventsByEventTypeStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeleteEventsByEventTypeStatusCommandInput, GetDeleteEventsByEventTypeStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDetectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetDetectorsRequest, GetDetectorsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetDetectorsCommandInput extends GetDetectorsRequest {
    }
    export interface GetDetectorsCommandOutput extends GetDetectorsResult, __MetadataBearer {
    }
    /**
        * <p>Gets all detectors or a single detector if a <code>detectorId</code> is specified. This is a paginated API. If you
        *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
        *          per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10.
        *          To get the next page results, provide the pagination token from the
        *             <code>GetDetectorsResponse</code> as part of your request. A null pagination token
        *          fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetDetectorsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetDetectorsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetDetectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDetectorsCommandInput} for command's `input` shape.
        * @see {@link GetDetectorsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetDetectorsCommand extends $Command<GetDetectorsCommandInput, GetDetectorsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetDetectorsCommandInput;
            constructor(input: GetDetectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDetectorsCommandInput, GetDetectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDetectorVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetDetectorVersionRequest, GetDetectorVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetDetectorVersionCommandInput extends GetDetectorVersionRequest {
    }
    export interface GetDetectorVersionCommandOutput extends GetDetectorVersionResult, __MetadataBearer {
    }
    /**
        * <p>Gets a particular detector version. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetDetectorVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetDetectorVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetDetectorVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDetectorVersionCommandInput} for command's `input` shape.
        * @see {@link GetDetectorVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetDetectorVersionCommand extends $Command<GetDetectorVersionCommandInput, GetDetectorVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetDetectorVersionCommandInput;
            constructor(input: GetDetectorVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDetectorVersionCommandInput, GetDetectorVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEntityTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetEntityTypesRequest, GetEntityTypesResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetEntityTypesCommandInput extends GetEntityTypesRequest {
    }
    export interface GetEntityTypesCommandOutput extends GetEntityTypesResult, __MetadataBearer {
    }
    /**
        * <p>Gets all entity types or a specific entity type if a name is specified. This is a paginated API. If you
        *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
        *          per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10.
        *          To get the next page results, provide the pagination token from the
        *          <code>GetEntityTypesResponse</code> as part of your request. A null pagination token
        *          fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetEntityTypesCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetEntityTypesCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetEntityTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEntityTypesCommandInput} for command's `input` shape.
        * @see {@link GetEntityTypesCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetEntityTypesCommand extends $Command<GetEntityTypesCommandInput, GetEntityTypesCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetEntityTypesCommandInput;
            constructor(input: GetEntityTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEntityTypesCommandInput, GetEntityTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetEventRequest, GetEventResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetEventCommandInput extends GetEventRequest {
    }
    export interface GetEventCommandOutput extends GetEventResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves details of events stored with Amazon Fraud Detector. This action does not retrieve prediction results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetEventCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetEventCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetEventCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEventCommandInput} for command's `input` shape.
        * @see {@link GetEventCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetEventCommand extends $Command<GetEventCommandInput, GetEventCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetEventCommandInput;
            constructor(input: GetEventCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEventCommandInput, GetEventCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventPredictionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetEventPredictionRequest, GetEventPredictionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetEventPredictionCommandInput extends GetEventPredictionRequest {
    }
    export interface GetEventPredictionCommandOutput extends GetEventPredictionResult, __MetadataBearer {
    }
    /**
        * <p>Evaluates an event against a detector version. If a version ID is not provided, the detector’s (<code>ACTIVE</code>) version is used.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetEventPredictionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetEventPredictionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetEventPredictionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEventPredictionCommandInput} for command's `input` shape.
        * @see {@link GetEventPredictionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetEventPredictionCommand extends $Command<GetEventPredictionCommandInput, GetEventPredictionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetEventPredictionCommandInput;
            constructor(input: GetEventPredictionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEventPredictionCommandInput, GetEventPredictionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventPredictionMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetEventPredictionMetadataRequest, GetEventPredictionMetadataResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetEventPredictionMetadataCommandInput extends GetEventPredictionMetadataRequest {
    }
    export interface GetEventPredictionMetadataCommandOutput extends GetEventPredictionMetadataResult, __MetadataBearer {
    }
    /**
        * <p>
        * Gets details of the past fraud predictions for the specified event ID, event type, detector ID, and detector version ID that was generated in the specified time period.
        * </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetEventPredictionMetadataCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetEventPredictionMetadataCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetEventPredictionMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEventPredictionMetadataCommandInput} for command's `input` shape.
        * @see {@link GetEventPredictionMetadataCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetEventPredictionMetadataCommand extends $Command<GetEventPredictionMetadataCommandInput, GetEventPredictionMetadataCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetEventPredictionMetadataCommandInput;
            constructor(input: GetEventPredictionMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEventPredictionMetadataCommandInput, GetEventPredictionMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetEventTypesRequest, GetEventTypesResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetEventTypesCommandInput extends GetEventTypesRequest {
    }
    export interface GetEventTypesCommandOutput extends GetEventTypesResult, __MetadataBearer {
    }
    /**
        * <p>Gets all event types or a specific event type if name is provided. This is a paginated API. If you
        *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
        *          per page. If you provide a <code>maxResults</code>, the value must be between 5 and 10.
        *          To get the next page results, provide the pagination token from the
        *             <code>GetEventTypesResponse</code> as part of your request. A null pagination token
        *          fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetEventTypesCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetEventTypesCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetEventTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEventTypesCommandInput} for command's `input` shape.
        * @see {@link GetEventTypesCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetEventTypesCommand extends $Command<GetEventTypesCommandInput, GetEventTypesCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetEventTypesCommandInput;
            constructor(input: GetEventTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEventTypesCommandInput, GetEventTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetExternalModelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetExternalModelsRequest, GetExternalModelsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetExternalModelsCommandInput extends GetExternalModelsRequest {
    }
    export interface GetExternalModelsCommandOutput extends GetExternalModelsResult, __MetadataBearer {
    }
    /**
        * <p>Gets the details for one or more Amazon SageMaker models that have been imported into the
        *          service. This is a paginated API. If you provide a null <code>maxResults</code>, this
        *          actions retrieves a maximum of 10 records per page. If you provide a
        *             <code>maxResults</code>, the value must be between 5 and 10. To get the next page
        *          results, provide the pagination token from the <code>GetExternalModelsResult</code> as part
        *          of your request. A null pagination token fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetExternalModelsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetExternalModelsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetExternalModelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExternalModelsCommandInput} for command's `input` shape.
        * @see {@link GetExternalModelsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetExternalModelsCommand extends $Command<GetExternalModelsCommandInput, GetExternalModelsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetExternalModelsCommandInput;
            constructor(input: GetExternalModelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExternalModelsCommandInput, GetExternalModelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetKMSEncryptionKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetKMSEncryptionKeyResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetKMSEncryptionKeyCommandInput {
    }
    export interface GetKMSEncryptionKeyCommandOutput extends GetKMSEncryptionKeyResult, __MetadataBearer {
    }
    /**
        * <p>Gets the encryption key if a KMS key has been specified to be used to encrypt content in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetKMSEncryptionKeyCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetKMSEncryptionKeyCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetKMSEncryptionKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetKMSEncryptionKeyCommandInput} for command's `input` shape.
        * @see {@link GetKMSEncryptionKeyCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetKMSEncryptionKeyCommand extends $Command<GetKMSEncryptionKeyCommandInput, GetKMSEncryptionKeyCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetKMSEncryptionKeyCommandInput;
            constructor(input: GetKMSEncryptionKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetKMSEncryptionKeyCommandInput, GetKMSEncryptionKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetLabelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetLabelsRequest, GetLabelsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetLabelsCommandInput extends GetLabelsRequest {
    }
    export interface GetLabelsCommandOutput extends GetLabelsResult, __MetadataBearer {
    }
    /**
        * <p>Gets all labels or a specific label if name is provided. This is a paginated API. If you
        *          provide a null <code>maxResults</code>, this action retrieves a maximum of 50 records
        *          per page. If you provide a <code>maxResults</code>, the value must be between 10 and 50.
        *          To get the next page results, provide the pagination token from the
        *          <code>GetGetLabelsResponse</code> as part of your request. A null pagination token
        *          fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetLabelsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetLabelsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetLabelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLabelsCommandInput} for command's `input` shape.
        * @see {@link GetLabelsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetLabelsCommand extends $Command<GetLabelsCommandInput, GetLabelsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetLabelsCommandInput;
            constructor(input: GetLabelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLabelsCommandInput, GetLabelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetModelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetModelsRequest, GetModelsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetModelsCommandInput extends GetModelsRequest {
    }
    export interface GetModelsCommandOutput extends GetModelsResult, __MetadataBearer {
    }
    /**
        * <p>Gets one or more models. Gets all models for the Amazon Web Services account if no model type and no model id provided. Gets all models for the Amazon Web Services account and model type, if the model type is specified but model id is not provided. Gets a specific model if (model type, model id) tuple is specified. </p>
        *          <p>This is a paginated API. If you
        *          provide a null <code>maxResults</code>, this action retrieves a maximum of 10 records
        *          per page. If you provide a <code>maxResults</code>, the value must be between 1 and 10.
        *          To get the next page results, provide the pagination token from the
        *             response as part of your request. A null pagination token
        *          fetches the records from the beginning.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetModelsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetModelsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetModelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelsCommandInput} for command's `input` shape.
        * @see {@link GetModelsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetModelsCommand extends $Command<GetModelsCommandInput, GetModelsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetModelsCommandInput;
            constructor(input: GetModelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelsCommandInput, GetModelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetModelVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetModelVersionRequest, GetModelVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetModelVersionCommandInput extends GetModelVersionRequest {
    }
    export interface GetModelVersionCommandOutput extends GetModelVersionResult, __MetadataBearer {
    }
    /**
        * <p>Gets the details of the specified model version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetModelVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetModelVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetModelVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelVersionCommandInput} for command's `input` shape.
        * @see {@link GetModelVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetModelVersionCommand extends $Command<GetModelVersionCommandInput, GetModelVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetModelVersionCommandInput;
            constructor(input: GetModelVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelVersionCommandInput, GetModelVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetOutcomesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetOutcomesRequest, GetOutcomesResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetOutcomesCommandInput extends GetOutcomesRequest {
    }
    export interface GetOutcomesCommandOutput extends GetOutcomesResult, __MetadataBearer {
    }
    /**
        * <p>Gets one or more outcomes. This is a paginated
        *          API. If you provide a null <code>maxResults</code>, this actions retrieves a maximum of
        *          100 records per page. If you provide a <code>maxResults</code>, the value must be
        *          between 50 and 100. To get the next page results, provide the pagination token from the
        *         <code>GetOutcomesResult</code> as part of your request. A null pagination token
        *          fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetOutcomesCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetOutcomesCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetOutcomesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOutcomesCommandInput} for command's `input` shape.
        * @see {@link GetOutcomesCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetOutcomesCommand extends $Command<GetOutcomesCommandInput, GetOutcomesCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetOutcomesCommandInput;
            constructor(input: GetOutcomesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOutcomesCommandInput, GetOutcomesCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetRulesRequest, GetRulesResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetRulesCommandInput extends GetRulesRequest {
    }
    export interface GetRulesCommandOutput extends GetRulesResult, __MetadataBearer {
    }
    /**
        * <p>Get all rules for a detector (paginated) if <code>ruleId</code> and <code>ruleVersion</code> are not specified. Gets all rules for the detector and the <code>ruleId</code> if present (paginated). Gets a specific rule if both the <code>ruleId</code> and the <code>ruleVersion</code> are specified.</p>
        *          <p>This is a paginated API. Providing null maxResults results in retrieving maximum of 100 records per page. If you provide maxResults the value must be between 50 and 100. To get the next page result, a provide a pagination token from GetRulesResult as part of your request. Null pagination token fetches the records from the beginning.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetRulesCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetRulesCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRulesCommandInput} for command's `input` shape.
        * @see {@link GetRulesCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetRulesCommand extends $Command<GetRulesCommandInput, GetRulesCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetRulesCommandInput;
            constructor(input: GetRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRulesCommandInput, GetRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetVariablesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { GetVariablesRequest, GetVariablesResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface GetVariablesCommandInput extends GetVariablesRequest {
    }
    export interface GetVariablesCommandOutput extends GetVariablesResult, __MetadataBearer {
    }
    /**
        * <p>Gets all of the variables or the specific variable. This is a
        *          paginated API. Providing null <code>maxSizePerPage</code> results in retrieving maximum of
        *          100 records per page. If you provide <code>maxSizePerPage</code> the value must be between
        *          50 and 100. To get the next page result, a provide a pagination token from
        *         <code>GetVariablesResult</code> as part of your request. Null pagination token
        *          fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, GetVariablesCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, GetVariablesCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new GetVariablesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVariablesCommandInput} for command's `input` shape.
        * @see {@link GetVariablesCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class GetVariablesCommand extends $Command<GetVariablesCommandInput, GetVariablesCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: GetVariablesCommandInput;
            constructor(input: GetVariablesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVariablesCommandInput, GetVariablesCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/ListEventPredictionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { ListEventPredictionsRequest, ListEventPredictionsResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface ListEventPredictionsCommandInput extends ListEventPredictionsRequest {
    }
    export interface ListEventPredictionsCommandOutput extends ListEventPredictionsResult, __MetadataBearer {
    }
    /**
        * <p>Gets a list of past predictions. The list can be filtered by detector ID, detector version ID, event ID, event type, or by specifying a time period.
        *     If filter is not specified, the most recent prediction is returned.</p>
        *
        *          <p>For example, the following filter lists all past predictions for <code>xyz</code> event type -
        *     <code>{
        *         "eventType":{
        *         "value": "xyz" }”
        *         }  </code>
        *          </p>
        *
        *          <p>This is a paginated API. If you provide a null <code>maxResults</code>, this action will retrieve a maximum of 10 records per page.
        *   If you provide a <code>maxResults</code>, the value must be between 50 and 100. To get the next page results, provide
        *   the <code>nextToken</code> from the response as part of your request. A null <code>nextToken</code> fetches the records from the beginning.
        * </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, ListEventPredictionsCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, ListEventPredictionsCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new ListEventPredictionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEventPredictionsCommandInput} for command's `input` shape.
        * @see {@link ListEventPredictionsCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class ListEventPredictionsCommand extends $Command<ListEventPredictionsCommandInput, ListEventPredictionsCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: ListEventPredictionsCommandInput;
            constructor(input: ListEventPredictionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEventPredictionsCommandInput, ListEventPredictionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResult, __MetadataBearer {
    }
    /**
        * <p>Lists all tags associated with the resource. This is a paginated API. To get the next page results, provide the pagination token from the
        *             response as part of your request. A null pagination token
        *          fetches the records from the beginning. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, ListTagsForResourceCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, ListTagsForResourceCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { PutDetectorRequest, PutDetectorResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface PutDetectorCommandInput extends PutDetectorRequest {
    }
    export interface PutDetectorCommandOutput extends PutDetectorResult, __MetadataBearer {
    }
    /**
        * <p>Creates or updates a detector. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, PutDetectorCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, PutDetectorCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new PutDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutDetectorCommandInput} for command's `input` shape.
        * @see {@link PutDetectorCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class PutDetectorCommand extends $Command<PutDetectorCommandInput, PutDetectorCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: PutDetectorCommandInput;
            constructor(input: PutDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutDetectorCommandInput, PutDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutEntityTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { PutEntityTypeRequest, PutEntityTypeResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface PutEntityTypeCommandInput extends PutEntityTypeRequest {
    }
    export interface PutEntityTypeCommandOutput extends PutEntityTypeResult, __MetadataBearer {
    }
    /**
        * <p>Creates or updates an entity type. An entity represents who is performing the event. As part of a fraud prediction, you pass the entity ID to indicate the specific entity who performed the event. An entity type classifies the entity. Example classifications include customer, merchant, or account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, PutEntityTypeCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, PutEntityTypeCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new PutEntityTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEntityTypeCommandInput} for command's `input` shape.
        * @see {@link PutEntityTypeCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class PutEntityTypeCommand extends $Command<PutEntityTypeCommandInput, PutEntityTypeCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: PutEntityTypeCommandInput;
            constructor(input: PutEntityTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEntityTypeCommandInput, PutEntityTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutEventTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { PutEventTypeRequest, PutEventTypeResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface PutEventTypeCommandInput extends PutEventTypeRequest {
    }
    export interface PutEventTypeCommandOutput extends PutEventTypeResult, __MetadataBearer {
    }
    /**
        * <p>Creates or updates an event type. An event is a business activity that is evaluated for fraud risk. With Amazon Fraud Detector, you generate fraud predictions for events. An event type defines the structure for an event sent to Amazon Fraud Detector. This includes the variables sent as part of the event, the entity performing the event (such as a customer), and the labels that classify the event. Example event types include online payment transactions, account registrations, and authentications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, PutEventTypeCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, PutEventTypeCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new PutEventTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutEventTypeCommandInput} for command's `input` shape.
        * @see {@link PutEventTypeCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class PutEventTypeCommand extends $Command<PutEventTypeCommandInput, PutEventTypeCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: PutEventTypeCommandInput;
            constructor(input: PutEventTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutEventTypeCommandInput, PutEventTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutExternalModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { PutExternalModelRequest, PutExternalModelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface PutExternalModelCommandInput extends PutExternalModelRequest {
    }
    export interface PutExternalModelCommandOutput extends PutExternalModelResult, __MetadataBearer {
    }
    /**
        * <p>Creates or updates an Amazon SageMaker model endpoint. You can also use this action to update the configuration of the model endpoint, including the IAM role and/or the mapped variables.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, PutExternalModelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, PutExternalModelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new PutExternalModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutExternalModelCommandInput} for command's `input` shape.
        * @see {@link PutExternalModelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class PutExternalModelCommand extends $Command<PutExternalModelCommandInput, PutExternalModelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: PutExternalModelCommandInput;
            constructor(input: PutExternalModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutExternalModelCommandInput, PutExternalModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutKMSEncryptionKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { PutKMSEncryptionKeyRequest, PutKMSEncryptionKeyResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface PutKMSEncryptionKeyCommandInput extends PutKMSEncryptionKeyRequest {
    }
    export interface PutKMSEncryptionKeyCommandOutput extends PutKMSEncryptionKeyResult, __MetadataBearer {
    }
    /**
        * <p>Specifies the KMS key to be used to encrypt content in Amazon Fraud Detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, PutKMSEncryptionKeyCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, PutKMSEncryptionKeyCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new PutKMSEncryptionKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutKMSEncryptionKeyCommandInput} for command's `input` shape.
        * @see {@link PutKMSEncryptionKeyCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class PutKMSEncryptionKeyCommand extends $Command<PutKMSEncryptionKeyCommandInput, PutKMSEncryptionKeyCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: PutKMSEncryptionKeyCommandInput;
            constructor(input: PutKMSEncryptionKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutKMSEncryptionKeyCommandInput, PutKMSEncryptionKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutLabelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { PutLabelRequest, PutLabelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface PutLabelCommandInput extends PutLabelRequest {
    }
    export interface PutLabelCommandOutput extends PutLabelResult, __MetadataBearer {
    }
    /**
        * <p>Creates or updates label. A label classifies an event as fraudulent or legitimate. Labels are associated with event types and used to train supervised machine learning models in Amazon Fraud Detector. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, PutLabelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, PutLabelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new PutLabelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutLabelCommandInput} for command's `input` shape.
        * @see {@link PutLabelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class PutLabelCommand extends $Command<PutLabelCommandInput, PutLabelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: PutLabelCommandInput;
            constructor(input: PutLabelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutLabelCommandInput, PutLabelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutOutcomeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { PutOutcomeRequest, PutOutcomeResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface PutOutcomeCommandInput extends PutOutcomeRequest {
    }
    export interface PutOutcomeCommandOutput extends PutOutcomeResult, __MetadataBearer {
    }
    /**
        * <p>Creates or updates an outcome. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, PutOutcomeCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, PutOutcomeCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new PutOutcomeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutOutcomeCommandInput} for command's `input` shape.
        * @see {@link PutOutcomeCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class PutOutcomeCommand extends $Command<PutOutcomeCommandInput, PutOutcomeCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: PutOutcomeCommandInput;
            constructor(input: PutOutcomeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutOutcomeCommandInput, PutOutcomeCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/SendEventCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { SendEventRequest, SendEventResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface SendEventCommandInput extends SendEventRequest {
    }
    export interface SendEventCommandOutput extends SendEventResult, __MetadataBearer {
    }
    /**
        * <p>Stores events in Amazon Fraud Detector without generating fraud predictions for those events. For example, you can use <code>SendEvent</code> to upload a historical dataset, which you can then later use to train a model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, SendEventCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, SendEventCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new SendEventCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendEventCommandInput} for command's `input` shape.
        * @see {@link SendEventCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class SendEventCommand extends $Command<SendEventCommandInput, SendEventCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: SendEventCommandInput;
            constructor(input: SendEventCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendEventCommandInput, SendEventCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { TagResourceRequest, TagResourceResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Assigns tags to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, TagResourceCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, TagResourceCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UntagResourceRequest, UntagResourceResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UntagResourceCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UntagResourceCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateDetectorVersionRequest, UpdateDetectorVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateDetectorVersionCommandInput extends UpdateDetectorVersionRequest {
    }
    export interface UpdateDetectorVersionCommandOutput extends UpdateDetectorVersionResult, __MetadataBearer {
    }
    /**
        * <p> Updates a detector version. The detector version attributes that you can update include models, external model endpoints, rules, rule execution mode, and description. You can only update a <code>DRAFT</code> detector version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateDetectorVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateDetectorVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateDetectorVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDetectorVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateDetectorVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateDetectorVersionCommand extends $Command<UpdateDetectorVersionCommandInput, UpdateDetectorVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateDetectorVersionCommandInput;
            constructor(input: UpdateDetectorVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDetectorVersionCommandInput, UpdateDetectorVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateDetectorVersionMetadataRequest, UpdateDetectorVersionMetadataResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateDetectorVersionMetadataCommandInput extends UpdateDetectorVersionMetadataRequest {
    }
    export interface UpdateDetectorVersionMetadataCommandOutput extends UpdateDetectorVersionMetadataResult, __MetadataBearer {
    }
    /**
        * <p>Updates the detector version's description. You can update the metadata for any detector version (<code>DRAFT, ACTIVE,</code> or
        *                 <code>INACTIVE</code>). </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateDetectorVersionMetadataCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateDetectorVersionMetadataCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateDetectorVersionMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDetectorVersionMetadataCommandInput} for command's `input` shape.
        * @see {@link UpdateDetectorVersionMetadataCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateDetectorVersionMetadataCommand extends $Command<UpdateDetectorVersionMetadataCommandInput, UpdateDetectorVersionMetadataCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateDetectorVersionMetadataCommandInput;
            constructor(input: UpdateDetectorVersionMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDetectorVersionMetadataCommandInput, UpdateDetectorVersionMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateDetectorVersionStatusRequest, UpdateDetectorVersionStatusResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateDetectorVersionStatusCommandInput extends UpdateDetectorVersionStatusRequest {
    }
    export interface UpdateDetectorVersionStatusCommandOutput extends UpdateDetectorVersionStatusResult, __MetadataBearer {
    }
    /**
        * <p>Updates the detector version’s status. You can perform the following promotions or
        *             demotions using <code>UpdateDetectorVersionStatus</code>: <code>DRAFT</code> to <code>ACTIVE</code>, <code>ACTIVE</code> to <code>INACTIVE</code>, and <code>INACTIVE</code> to <code>ACTIVE</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateDetectorVersionStatusCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateDetectorVersionStatusCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateDetectorVersionStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDetectorVersionStatusCommandInput} for command's `input` shape.
        * @see {@link UpdateDetectorVersionStatusCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateDetectorVersionStatusCommand extends $Command<UpdateDetectorVersionStatusCommandInput, UpdateDetectorVersionStatusCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateDetectorVersionStatusCommandInput;
            constructor(input: UpdateDetectorVersionStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDetectorVersionStatusCommandInput, UpdateDetectorVersionStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateEventLabelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateEventLabelRequest, UpdateEventLabelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateEventLabelCommandInput extends UpdateEventLabelRequest {
    }
    export interface UpdateEventLabelCommandOutput extends UpdateEventLabelResult, __MetadataBearer {
    }
    /**
        * <p>Updates the specified event with a new label.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateEventLabelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateEventLabelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateEventLabelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEventLabelCommandInput} for command's `input` shape.
        * @see {@link UpdateEventLabelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateEventLabelCommand extends $Command<UpdateEventLabelCommandInput, UpdateEventLabelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateEventLabelCommandInput;
            constructor(input: UpdateEventLabelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEventLabelCommandInput, UpdateEventLabelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateModelRequest, UpdateModelResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateModelCommandInput extends UpdateModelRequest {
    }
    export interface UpdateModelCommandOutput extends UpdateModelResult, __MetadataBearer {
    }
    /**
        * <p>Updates model description.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateModelCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateModelCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateModelCommandInput} for command's `input` shape.
        * @see {@link UpdateModelCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateModelCommand extends $Command<UpdateModelCommandInput, UpdateModelCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateModelCommandInput;
            constructor(input: UpdateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateModelCommandInput, UpdateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateModelVersionRequest, UpdateModelVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateModelVersionCommandInput extends UpdateModelVersionRequest {
    }
    export interface UpdateModelVersionCommandOutput extends UpdateModelVersionResult, __MetadataBearer {
    }
    /**
        * <p>Updates a model version. Updating a model version retrains an existing model version using updated training data and produces a new minor version of the model. You can update the training data set location and data access role attributes using this action. This action creates and trains a new minor version of the model, for example version 1.01, 1.02, 1.03.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateModelVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateModelVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateModelVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateModelVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateModelVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateModelVersionCommand extends $Command<UpdateModelVersionCommandInput, UpdateModelVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateModelVersionCommandInput;
            constructor(input: UpdateModelVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateModelVersionCommandInput, UpdateModelVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelVersionStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateModelVersionStatusRequest, UpdateModelVersionStatusResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateModelVersionStatusCommandInput extends UpdateModelVersionStatusRequest {
    }
    export interface UpdateModelVersionStatusCommandOutput extends UpdateModelVersionStatusResult, __MetadataBearer {
    }
    /**
        * <p>Updates the status of a model version.</p>
        *          <p>You can perform the following status updates:</p>
        *          <ol>
        *             <li>
        *                <p>Change the <code>TRAINING_IN_PROGRESS</code> status to <code>TRAINING_CANCELLED</code>.</p>
        *             </li>
        *             <li>
        *                <p>Change the <code>TRAINING_COMPLETE</code> status to <code>ACTIVE</code>.</p>
        *             </li>
        *             <li>
        *                <p>Change <code>ACTIVE</code> to <code>INACTIVE</code>.</p>
        *             </li>
        *          </ol>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateModelVersionStatusCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateModelVersionStatusCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateModelVersionStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateModelVersionStatusCommandInput} for command's `input` shape.
        * @see {@link UpdateModelVersionStatusCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateModelVersionStatusCommand extends $Command<UpdateModelVersionStatusCommandInput, UpdateModelVersionStatusCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateModelVersionStatusCommandInput;
            constructor(input: UpdateModelVersionStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateModelVersionStatusCommandInput, UpdateModelVersionStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateRuleMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateRuleMetadataRequest, UpdateRuleMetadataResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateRuleMetadataCommandInput extends UpdateRuleMetadataRequest {
    }
    export interface UpdateRuleMetadataCommandOutput extends UpdateRuleMetadataResult, __MetadataBearer {
    }
    /**
        * <p>Updates a rule's metadata. The description attribute can be updated.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateRuleMetadataCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateRuleMetadataCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateRuleMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRuleMetadataCommandInput} for command's `input` shape.
        * @see {@link UpdateRuleMetadataCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateRuleMetadataCommand extends $Command<UpdateRuleMetadataCommandInput, UpdateRuleMetadataCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateRuleMetadataCommandInput;
            constructor(input: UpdateRuleMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRuleMetadataCommandInput, UpdateRuleMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateRuleVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateRuleVersionRequest, UpdateRuleVersionResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateRuleVersionCommandInput extends UpdateRuleVersionRequest {
    }
    export interface UpdateRuleVersionCommandOutput extends UpdateRuleVersionResult, __MetadataBearer {
    }
    /**
        * <p>Updates a rule version resulting in a new rule version. Updates a rule version resulting in a new rule version (version 1, 2, 3 ...). </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateRuleVersionCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateRuleVersionCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateRuleVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRuleVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateRuleVersionCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateRuleVersionCommand extends $Command<UpdateRuleVersionCommandInput, UpdateRuleVersionCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateRuleVersionCommandInput;
            constructor(input: UpdateRuleVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRuleVersionCommandInput, UpdateRuleVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateVariableCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FraudDetectorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient";
    import { UpdateVariableRequest, UpdateVariableResult } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0";
    export interface UpdateVariableCommandInput extends UpdateVariableRequest {
    }
    export interface UpdateVariableCommandOutput extends UpdateVariableResult, __MetadataBearer {
    }
    /**
        * <p>Updates a variable.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FraudDetectorClient, UpdateVariableCommand } from "@aws-sdk/client-frauddetector"; // ES Modules import
        * // const { FraudDetectorClient, UpdateVariableCommand } = require("@aws-sdk/client-frauddetector"); // CommonJS import
        * const client = new FraudDetectorClient(config);
        * const command = new UpdateVariableCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVariableCommandInput} for command's `input` shape.
        * @see {@link UpdateVariableCommandOutput} for command's `response` shape.
        * @see {@link FraudDetectorClientResolvedConfig | config} for FraudDetectorClient's `config` shape.
        *
        */
    export class UpdateVariableCommand extends $Command<UpdateVariableCommandInput, UpdateVariableCommandOutput, FraudDetectorClientResolvedConfig> {
            readonly input: UpdateVariableCommandInput;
            constructor(input: UpdateVariableCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FraudDetectorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVariableCommandInput, UpdateVariableCommandOutput>;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/FraudDetectorClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchCreateVariableCommandInput, BatchCreateVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/BatchCreateVariableCommand";
    import { BatchGetVariableCommandInput, BatchGetVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/BatchGetVariableCommand";
    import { CancelBatchImportJobCommandInput, CancelBatchImportJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CancelBatchImportJobCommand";
    import { CancelBatchPredictionJobCommandInput, CancelBatchPredictionJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CancelBatchPredictionJobCommand";
    import { CreateBatchImportJobCommandInput, CreateBatchImportJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateBatchImportJobCommand";
    import { CreateBatchPredictionJobCommandInput, CreateBatchPredictionJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateBatchPredictionJobCommand";
    import { CreateDetectorVersionCommandInput, CreateDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateDetectorVersionCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateModelCommand";
    import { CreateModelVersionCommandInput, CreateModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateModelVersionCommand";
    import { CreateRuleCommandInput, CreateRuleCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateRuleCommand";
    import { CreateVariableCommandInput, CreateVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/CreateVariableCommand";
    import { DeleteBatchImportJobCommandInput, DeleteBatchImportJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteBatchImportJobCommand";
    import { DeleteBatchPredictionJobCommandInput, DeleteBatchPredictionJobCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteBatchPredictionJobCommand";
    import { DeleteDetectorCommandInput, DeleteDetectorCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteDetectorCommand";
    import { DeleteDetectorVersionCommandInput, DeleteDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteDetectorVersionCommand";
    import { DeleteEntityTypeCommandInput, DeleteEntityTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEntityTypeCommand";
    import { DeleteEventCommandInput, DeleteEventCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventCommand";
    import { DeleteEventsByEventTypeCommandInput, DeleteEventsByEventTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventsByEventTypeCommand";
    import { DeleteEventTypeCommandInput, DeleteEventTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteEventTypeCommand";
    import { DeleteExternalModelCommandInput, DeleteExternalModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteExternalModelCommand";
    import { DeleteLabelCommandInput, DeleteLabelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteLabelCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteModelCommand";
    import { DeleteModelVersionCommandInput, DeleteModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteModelVersionCommand";
    import { DeleteOutcomeCommandInput, DeleteOutcomeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteOutcomeCommand";
    import { DeleteRuleCommandInput, DeleteRuleCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteRuleCommand";
    import { DeleteVariableCommandInput, DeleteVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DeleteVariableCommand";
    import { DescribeDetectorCommandInput, DescribeDetectorCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DescribeDetectorCommand";
    import { DescribeModelVersionsCommandInput, DescribeModelVersionsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/DescribeModelVersionsCommand";
    import { GetBatchImportJobsCommandInput, GetBatchImportJobsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetBatchImportJobsCommand";
    import { GetBatchPredictionJobsCommandInput, GetBatchPredictionJobsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetBatchPredictionJobsCommand";
    import { GetDeleteEventsByEventTypeStatusCommandInput, GetDeleteEventsByEventTypeStatusCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDeleteEventsByEventTypeStatusCommand";
    import { GetDetectorsCommandInput, GetDetectorsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDetectorsCommand";
    import { GetDetectorVersionCommandInput, GetDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetDetectorVersionCommand";
    import { GetEntityTypesCommandInput, GetEntityTypesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEntityTypesCommand";
    import { GetEventCommandInput, GetEventCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventCommand";
    import { GetEventPredictionCommandInput, GetEventPredictionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventPredictionCommand";
    import { GetEventPredictionMetadataCommandInput, GetEventPredictionMetadataCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventPredictionMetadataCommand";
    import { GetEventTypesCommandInput, GetEventTypesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetEventTypesCommand";
    import { GetExternalModelsCommandInput, GetExternalModelsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetExternalModelsCommand";
    import { GetKMSEncryptionKeyCommandInput, GetKMSEncryptionKeyCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetKMSEncryptionKeyCommand";
    import { GetLabelsCommandInput, GetLabelsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetLabelsCommand";
    import { GetModelsCommandInput, GetModelsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetModelsCommand";
    import { GetModelVersionCommandInput, GetModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetModelVersionCommand";
    import { GetOutcomesCommandInput, GetOutcomesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetOutcomesCommand";
    import { GetRulesCommandInput, GetRulesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetRulesCommand";
    import { GetVariablesCommandInput, GetVariablesCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/GetVariablesCommand";
    import { ListEventPredictionsCommandInput, ListEventPredictionsCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/ListEventPredictionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/ListTagsForResourceCommand";
    import { PutDetectorCommandInput, PutDetectorCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutDetectorCommand";
    import { PutEntityTypeCommandInput, PutEntityTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutEntityTypeCommand";
    import { PutEventTypeCommandInput, PutEventTypeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutEventTypeCommand";
    import { PutExternalModelCommandInput, PutExternalModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutExternalModelCommand";
    import { PutKMSEncryptionKeyCommandInput, PutKMSEncryptionKeyCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutKMSEncryptionKeyCommand";
    import { PutLabelCommandInput, PutLabelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutLabelCommand";
    import { PutOutcomeCommandInput, PutOutcomeCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/PutOutcomeCommand";
    import { SendEventCommandInput, SendEventCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/SendEventCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UntagResourceCommand";
    import { UpdateDetectorVersionCommandInput, UpdateDetectorVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionCommand";
    import { UpdateDetectorVersionMetadataCommandInput, UpdateDetectorVersionMetadataCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionMetadataCommand";
    import { UpdateDetectorVersionStatusCommandInput, UpdateDetectorVersionStatusCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateDetectorVersionStatusCommand";
    import { UpdateEventLabelCommandInput, UpdateEventLabelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateEventLabelCommand";
    import { UpdateModelCommandInput, UpdateModelCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelCommand";
    import { UpdateModelVersionCommandInput, UpdateModelVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelVersionCommand";
    import { UpdateModelVersionStatusCommandInput, UpdateModelVersionStatusCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateModelVersionStatusCommand";
    import { UpdateRuleMetadataCommandInput, UpdateRuleMetadataCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateRuleMetadataCommand";
    import { UpdateRuleVersionCommandInput, UpdateRuleVersionCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateRuleVersionCommand";
    import { UpdateVariableCommandInput, UpdateVariableCommandOutput } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/commands/UpdateVariableCommand";
    export type ServiceInputTypes = BatchCreateVariableCommandInput | BatchGetVariableCommandInput | CancelBatchImportJobCommandInput | CancelBatchPredictionJobCommandInput | CreateBatchImportJobCommandInput | CreateBatchPredictionJobCommandInput | CreateDetectorVersionCommandInput | CreateModelCommandInput | CreateModelVersionCommandInput | CreateRuleCommandInput | CreateVariableCommandInput | DeleteBatchImportJobCommandInput | DeleteBatchPredictionJobCommandInput | DeleteDetectorCommandInput | DeleteDetectorVersionCommandInput | DeleteEntityTypeCommandInput | DeleteEventCommandInput | DeleteEventTypeCommandInput | DeleteEventsByEventTypeCommandInput | DeleteExternalModelCommandInput | DeleteLabelCommandInput | DeleteModelCommandInput | DeleteModelVersionCommandInput | DeleteOutcomeCommandInput | DeleteRuleCommandInput | DeleteVariableCommandInput | DescribeDetectorCommandInput | DescribeModelVersionsCommandInput | GetBatchImportJobsCommandInput | GetBatchPredictionJobsCommandInput | GetDeleteEventsByEventTypeStatusCommandInput | GetDetectorVersionCommandInput | GetDetectorsCommandInput | GetEntityTypesCommandInput | GetEventCommandInput | GetEventPredictionCommandInput | GetEventPredictionMetadataCommandInput | GetEventTypesCommandInput | GetExternalModelsCommandInput | GetKMSEncryptionKeyCommandInput | GetLabelsCommandInput | GetModelVersionCommandInput | GetModelsCommandInput | GetOutcomesCommandInput | GetRulesCommandInput | GetVariablesCommandInput | ListEventPredictionsCommandInput | ListTagsForResourceCommandInput | PutDetectorCommandInput | PutEntityTypeCommandInput | PutEventTypeCommandInput | PutExternalModelCommandInput | PutKMSEncryptionKeyCommandInput | PutLabelCommandInput | PutOutcomeCommandInput | SendEventCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateDetectorVersionCommandInput | UpdateDetectorVersionMetadataCommandInput | UpdateDetectorVersionStatusCommandInput | UpdateEventLabelCommandInput | UpdateModelCommandInput | UpdateModelVersionCommandInput | UpdateModelVersionStatusCommandInput | UpdateRuleMetadataCommandInput | UpdateRuleVersionCommandInput | UpdateVariableCommandInput;
    export type ServiceOutputTypes = BatchCreateVariableCommandOutput | BatchGetVariableCommandOutput | CancelBatchImportJobCommandOutput | CancelBatchPredictionJobCommandOutput | CreateBatchImportJobCommandOutput | CreateBatchPredictionJobCommandOutput | CreateDetectorVersionCommandOutput | CreateModelCommandOutput | CreateModelVersionCommandOutput | CreateRuleCommandOutput | CreateVariableCommandOutput | DeleteBatchImportJobCommandOutput | DeleteBatchPredictionJobCommandOutput | DeleteDetectorCommandOutput | DeleteDetectorVersionCommandOutput | DeleteEntityTypeCommandOutput | DeleteEventCommandOutput | DeleteEventTypeCommandOutput | DeleteEventsByEventTypeCommandOutput | DeleteExternalModelCommandOutput | DeleteLabelCommandOutput | DeleteModelCommandOutput | DeleteModelVersionCommandOutput | DeleteOutcomeCommandOutput | DeleteRuleCommandOutput | DeleteVariableCommandOutput | DescribeDetectorCommandOutput | DescribeModelVersionsCommandOutput | GetBatchImportJobsCommandOutput | GetBatchPredictionJobsCommandOutput | GetDeleteEventsByEventTypeStatusCommandOutput | GetDetectorVersionCommandOutput | GetDetectorsCommandOutput | GetEntityTypesCommandOutput | GetEventCommandOutput | GetEventPredictionCommandOutput | GetEventPredictionMetadataCommandOutput | GetEventTypesCommandOutput | GetExternalModelsCommandOutput | GetKMSEncryptionKeyCommandOutput | GetLabelsCommandOutput | GetModelVersionCommandOutput | GetModelsCommandOutput | GetOutcomesCommandOutput | GetRulesCommandOutput | GetVariablesCommandOutput | ListEventPredictionsCommandOutput | ListTagsForResourceCommandOutput | PutDetectorCommandOutput | PutEntityTypeCommandOutput | PutEventTypeCommandOutput | PutExternalModelCommandOutput | PutKMSEncryptionKeyCommandOutput | PutLabelCommandOutput | PutOutcomeCommandOutput | SendEventCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateDetectorVersionCommandOutput | UpdateDetectorVersionMetadataCommandOutput | UpdateDetectorVersionStatusCommandOutput | UpdateEventLabelCommandOutput | UpdateModelCommandOutput | UpdateModelVersionCommandOutput | UpdateModelVersionStatusCommandOutput | UpdateRuleMetadataCommandOutput | UpdateRuleVersionCommandOutput | UpdateVariableCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type FraudDetectorClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of FraudDetectorClient class constructor that set the region, credentials and other options.
        */
    export interface FraudDetectorClientConfig extends FraudDetectorClientConfigType {
    }
    type FraudDetectorClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of FraudDetectorClient class. This is resolved and normalized from the {@link FraudDetectorClientConfig | constructor configuration interface}.
        */
    export interface FraudDetectorClientResolvedConfig extends FraudDetectorClientResolvedConfigType {
    }
    /**
        * <p>This is the Amazon Fraud Detector API Reference. This guide is for developers who need
        *             detailed information about Amazon Fraud Detector API actions, data types, and errors. For
        *             more information about Amazon Fraud Detector features, see the <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/">Amazon Fraud Detector User Guide</a>.</p>
        *
        *         <p>We provide the Query API as well as AWS software development kits (SDK) for Amazon Fraud Detector in Java and Python programming languages.</p>
        *         <p>The Amazon Fraud Detector Query API provides HTTPS requests that use the HTTP verb GET or POST and a Query parameter <code>Action</code>. AWS SDK provides libraries,
        *             sample code, tutorials, and other resources for software developers who prefer to build applications using language-specific APIs instead of submitting a request over
        *             HTTP or HTTPS. These libraries provide basic functions that automatically take care of tasks such as cryptographically signing your requests, retrying requests, and
        *             handling error responses, so that it is easier for you to get started. For more information about the AWS SDKs, see <a href="https://docs.aws.amazon.com/https:/aws.amazon.com/tools/">Tools to build on AWS</a>.
        *             </p>
        */
    export class FraudDetectorClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, FraudDetectorClientResolvedConfig> {
            /**
                * The resolved configuration of FraudDetectorClient class. This is resolved and normalized from the {@link FraudDetectorClientConfig | constructor configuration interface}.
                */
            readonly config: FraudDetectorClientResolvedConfig;
            constructor(configuration: FraudDetectorClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { FraudDetectorServiceException as __BaseException } from "@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/FraudDetectorServiceException";
    /**
        * <p>An exception indicating Amazon Fraud Detector does not have the needed permissions. This can occur if you submit a request, such as <code>PutExternalModel</code>, that specifies a role that is not in your account.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>The log odds metric details.</p>
        *
        *         <p>Account Takeover Insights (ATI) model uses event variables from the login data you
        *             provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, your ATI model might calculate the number of times an user has logged in using the same IP address.
        *             In this case, event variables used to derive the aggregated variables are <code>IP address</code> and <code>user</code>.</p>
        */
    export interface AggregatedLogOddsMetric {
            /**
                * <p>
                *             The names of all the variables.
                *         </p>
                */
            variableNames: string[] | undefined;
            /**
                * <p>
                *             The relative importance of the variables in the list to the other event variable.
                *         </p>
                */
            aggregatedVariablesImportance: number | undefined;
    }
    export namespace AggregatedLogOddsMetric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregatedLogOddsMetric) => any;
    }
    /**
        * <p>
        *             The details of the impact of aggregated variables on the prediction score. </p>
        *
        *         <p>Account Takeover Insights (ATI) model  uses the login data you
        *             provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, the model might calculate the number of times an user has logged in using the same IP address.
        *             In this case, event variables used to derive the aggregated variables are <code>IP address</code> and <code>user</code>.</p>
        */
    export interface AggregatedVariablesImpactExplanation {
            /**
                * <p>
                *             The names of all the event variables that were used to derive the aggregated variables.
                *         </p>
                */
            eventVariableNames?: string[];
            /**
                * <p>
                *             The relative impact of the aggregated variables in terms of magnitude on the prediction scores.
                *         </p>
                */
            relativeImpact?: string;
            /**
                * <p>
                *             The raw, uninterpreted value represented as log-odds of the fraud.  These values are usually between -10 to +10, but range from -infinity to +infinity.</p>
                *             <ul>
                *             <li>
                *                <p>A positive value indicates that the variables drove the risk score up.</p>
                *             </li>
                *             <li>
                *                <p>A negative value indicates that the variables drove the risk score down.</p>
                *             </li>
                *          </ul>
                */
            logOddsImpact?: number;
    }
    export namespace AggregatedVariablesImpactExplanation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregatedVariablesImpactExplanation) => any;
    }
    /**
        * <p>The details of the relative importance of the aggregated variables.</p>
        *
        *         <p>Account Takeover Insights (ATI) model uses event variables from the login data you
        *             provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, your ATI model might calculate the number of times an user has logged in using the same IP address.
        *             In this case, event variables used to derive the aggregated variables are <code>IP address</code> and <code>user</code>.</p>
        */
    export interface AggregatedVariablesImportanceMetrics {
            /**
                * <p>
                *             List of variables' metrics.
                *         </p>
                */
            logOddsMetrics?: AggregatedLogOddsMetric[];
    }
    export namespace AggregatedVariablesImportanceMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AggregatedVariablesImportanceMetrics) => any;
    }
    export enum AsyncJobStatus {
            CANCELED = "CANCELED",
            CANCEL_IN_PROGRESS = "CANCEL_IN_PROGRESS",
            COMPLETE = "COMPLETE",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            IN_PROGRESS_INITIALIZING = "IN_PROGRESS_INITIALIZING"
    }
    /**
        * <p>
        *             The Account Takeover Insights (ATI) model performance metrics data points.
        *         </p>
        */
    export interface ATIMetricDataPoint {
            /**
                * <p>
                *           The challenge rate. This indicates the percentage of login events that the model recommends to challenge such as
                *           one-time password, multi-factor authentication, and investigations.
                *         </p>
                */
            cr?: number;
            /**
                * <p>
                *             The anomaly discovery rate. This metric quantifies the percentage of anomalies that can be detected by the model at the selected score threshold.
                *             A lower score threshold increases the percentage of anomalies captured by the model, but would also require challenging a larger percentage of
                *             login events, leading to a higher customer friction.
                *         </p>
                */
            adr?: number;
            /**
                * <p>
                *             The model's threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is
                *             labeled as fraud.
                *         </p>
                */
            threshold?: number;
            /**
                * <p>
                *             The account takeover discovery rate. This metric quantifies the percentage of account compromise events that can be detected by the model at the selected score threshold.
                *             This metric is only available if 50 or more entities with at-least one labeled account takeover event is present in the ingested dataset.
                *         </p>
                */
            atodr?: number;
    }
    export namespace ATIMetricDataPoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ATIMetricDataPoint) => any;
    }
    /**
        * <p>
        *             The Account Takeover Insights (ATI) model performance score.
        *         </p>
        */
    export interface ATIModelPerformance {
            /**
                * <p>
                *             The anomaly separation index (ASI) score. This metric summarizes the overall ability of the model to separate anomalous activities from the normal behavior. Depending on the business, a
                *             large fraction of these anomalous activities can be malicious and correspond to the account takeover attacks. A model with no separability power will have the lowest possible
                *             ASI score of 0.5, whereas the a model with a high separability power will have the highest possible ASI score of 1.0
                *         </p>
                */
            asi?: number;
    }
    export namespace ATIModelPerformance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ATIModelPerformance) => any;
    }
    /**
        * <p>
        *             The Account Takeover Insights (ATI) model training metric details.
        *         </p>
        */
    export interface ATITrainingMetricsValue {
            /**
                * <p>
                *             The model's performance metrics data points.
                *         </p>
                */
            metricDataPoints?: ATIMetricDataPoint[];
            /**
                * <p>
                *             The model's overall performance scores.
                *         </p>
                */
            modelPerformance?: ATIModelPerformance;
    }
    export namespace ATITrainingMetricsValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ATITrainingMetricsValue) => any;
    }
    /**
        * <p>A key and value pair. </p>
        */
    export interface Tag {
            /**
                * <p>A tag key.</p>
                */
            key: string | undefined;
            /**
                * <p>A value assigned to a tag key.</p>
                */
            value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>A variable in the list of variables for the batch create variable request.</p>
        */
    export interface VariableEntry {
            /**
                * <p>The name of the variable.</p>
                */
            name?: string;
            /**
                * <p>The data type of the variable.</p>
                */
            dataType?: string;
            /**
                * <p>The data source of the variable.</p>
                */
            dataSource?: string;
            /**
                * <p>The default value of the variable.</p>
                */
            defaultValue?: string;
            /**
                * <p>The description of the variable.</p>
                */
            description?: string;
            /**
                * <p>The type of the variable. For more information see <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types">Variable types</a>.</p>
                *          <p>Valid Values: <code>AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT </code>
                *          </p>
                */
            variableType?: string;
    }
    export namespace VariableEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VariableEntry) => any;
    }
    export interface BatchCreateVariableRequest {
            /**
                * <p>The list of variables for the batch create variable request.</p>
                */
            variableEntries: VariableEntry[] | undefined;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace BatchCreateVariableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateVariableRequest) => any;
    }
    /**
        * <p>Provides the error of the batch create variable API.</p>
        */
    export interface BatchCreateVariableError {
            /**
                * <p>The name.</p>
                */
            name?: string;
            /**
                * <p>The error code. </p>
                */
            code?: number;
            /**
                * <p>The error message.</p>
                */
            message?: string;
    }
    export namespace BatchCreateVariableError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateVariableError) => any;
    }
    export interface BatchCreateVariableResult {
            /**
                * <p>Provides the errors for the <code>BatchCreateVariable</code> request.</p>
                */
            errors?: BatchCreateVariableError[];
    }
    export namespace BatchCreateVariableResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateVariableResult) => any;
    }
    /**
        * <p>An exception indicating an internal server error.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>An exception indicating a throttling error.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>An exception indicating a specified value is not allowed.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface BatchGetVariableRequest {
            /**
                * <p>The list of variable names to get.</p>
                */
            names: string[] | undefined;
    }
    export namespace BatchGetVariableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetVariableRequest) => any;
    }
    /**
        * <p>Provides the error of the batch get variable API.</p>
        */
    export interface BatchGetVariableError {
            /**
                * <p>The error name. </p>
                */
            name?: string;
            /**
                * <p>The error code. </p>
                */
            code?: number;
            /**
                * <p>The error message.</p>
                */
            message?: string;
    }
    export namespace BatchGetVariableError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetVariableError) => any;
    }
    export enum DataSource {
            EVENT = "EVENT",
            EXTERNAL_MODEL_SCORE = "EXTERNAL_MODEL_SCORE",
            MODEL_SCORE = "MODEL_SCORE"
    }
    export enum DataType {
            BOOLEAN = "BOOLEAN",
            FLOAT = "FLOAT",
            INTEGER = "INTEGER",
            STRING = "STRING"
    }
    /**
        * <p>The variable.</p>
        */
    export interface Variable {
            /**
                * <p>The name of the variable.</p>
                */
            name?: string;
            /**
                * <p>The data type of the variable. For more information see <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types">Variable types</a>.</p>
                */
            dataType?: DataType | string;
            /**
                * <p>The data source of the variable.</p>
                */
            dataSource?: DataSource | string;
            /**
                * <p>The default value of the variable.</p>
                */
            defaultValue?: string;
            /**
                * <p>The description of the variable. </p>
                */
            description?: string;
            /**
                * <p>The variable type of the variable.</p>
                *          <p>Valid Values: <code>AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT </code>
                *          </p>
                */
            variableType?: string;
            /**
                * <p>The time when variable was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>The time when the variable was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The ARN of the variable.</p>
                */
            arn?: string;
    }
    export namespace Variable {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Variable) => any;
    }
    export interface BatchGetVariableResult {
            /**
                * <p>The returned variables.</p>
                */
            variables?: Variable[];
            /**
                * <p>The errors from the request.</p>
                */
            errors?: BatchGetVariableError[];
    }
    export namespace BatchGetVariableResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchGetVariableResult) => any;
    }
    export interface CancelBatchImportJobRequest {
            /**
                * <p> The ID of an in-progress batch import job to cancel. </p>
                *          <p>Amazon Fraud Detector will throw an error if the batch import job is in <code>FAILED</code>, <code>CANCELED</code>, or  <code>COMPLETED</code> state.</p>
                */
            jobId: string | undefined;
    }
    export namespace CancelBatchImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelBatchImportJobRequest) => any;
    }
    export interface CancelBatchImportJobResult {
    }
    export namespace CancelBatchImportJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelBatchImportJobResult) => any;
    }
    /**
        * <p>An exception indicating the specified resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface CancelBatchPredictionJobRequest {
            /**
                * <p>The ID of the batch prediction job to cancel.</p>
                */
            jobId: string | undefined;
    }
    export namespace CancelBatchPredictionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelBatchPredictionJobRequest) => any;
    }
    export interface CancelBatchPredictionJobResult {
    }
    export namespace CancelBatchPredictionJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelBatchPredictionJobResult) => any;
    }
    export interface CreateBatchImportJobRequest {
            /**
                * <p>The ID of the batch import job. The ID cannot be of a past job, unless the job exists in <code>CREATE_FAILED</code> state.</p>
                */
            jobId: string | undefined;
            /**
                * <p>The URI that points to the Amazon S3 location of your data file.</p>
                */
            inputPath: string | undefined;
            /**
                * <p>The URI that points to the Amazon S3 location for storing your results. </p>
                */
            outputPath: string | undefined;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>The ARN of the IAM role created for Amazon S3 bucket that holds your data file.
                *          The IAM role must have read and write permissions to both input and output S3 buckets.</p>
                */
            iamRoleArn: string | undefined;
            /**
                * <p>A collection of key-value pairs associated with this request.  </p>
                */
            tags?: Tag[];
    }
    export namespace CreateBatchImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBatchImportJobRequest) => any;
    }
    export interface CreateBatchImportJobResult {
    }
    export namespace CreateBatchImportJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBatchImportJobResult) => any;
    }
    export interface CreateBatchPredictionJobRequest {
            /**
                * <p>The ID of the batch prediction job.</p>
                */
            jobId: string | undefined;
            /**
                * <p>The Amazon S3 location of your training file.</p>
                */
            inputPath: string | undefined;
            /**
                * <p>The Amazon S3 location of your output file.</p>
                */
            outputPath: string | undefined;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>The name of the detector.</p>
                */
            detectorName: string | undefined;
            /**
                * <p>The detector version.</p>
                */
            detectorVersion?: string;
            /**
                * <p>The ARN of the IAM role to use for this job request.</p>
                */
            iamRoleArn: string | undefined;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateBatchPredictionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBatchPredictionJobRequest) => any;
    }
    export interface CreateBatchPredictionJobResult {
    }
    export namespace CreateBatchPredictionJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBatchPredictionJobResult) => any;
    }
    export enum ModelTypeEnum {
            ACCOUNT_TAKEOVER_INSIGHTS = "ACCOUNT_TAKEOVER_INSIGHTS",
            ONLINE_FRAUD_INSIGHTS = "ONLINE_FRAUD_INSIGHTS",
            TRANSACTION_FRAUD_INSIGHTS = "TRANSACTION_FRAUD_INSIGHTS"
    }
    /**
        * <p>The model version.</p>
        */
    export interface ModelVersion {
            /**
                * <p>The model ID.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The model version number.</p>
                */
            modelVersionNumber: string | undefined;
            /**
                * <p>The model version ARN.</p>
                */
            arn?: string;
    }
    export namespace ModelVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelVersion) => any;
    }
    export enum RuleExecutionMode {
            ALL_MATCHED = "ALL_MATCHED",
            FIRST_MATCHED = "FIRST_MATCHED"
    }
    /**
        * <p>A rule.</p>
        */
    export interface Rule {
            /**
                * <p>The detector for which the rule is associated.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The rule ID.</p>
                */
            ruleId: string | undefined;
            /**
                * <p>The rule version.</p>
                */
            ruleVersion: string | undefined;
    }
    export namespace Rule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    export interface CreateDetectorVersionRequest {
            /**
                * <p>The ID of the detector under which you want to create a new version.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The description of the detector version.</p>
                */
            description?: string;
            /**
                * <p>The Amazon Sagemaker model endpoints to include in the detector version.</p>
                */
            externalModelEndpoints?: string[];
            /**
                * <p>The rules to include in the detector version.</p>
                */
            rules: Rule[] | undefined;
            /**
                * <p>The model versions to include in the detector version.</p>
                */
            modelVersions?: ModelVersion[];
            /**
                * <p>The rule execution mode for the rules included in the detector version.</p>
                * 	        <p>You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
                * 	        <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
                * 	        <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. </p>
                *          <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
                */
            ruleExecutionMode?: RuleExecutionMode | string;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateDetectorVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDetectorVersionRequest) => any;
    }
    export enum DetectorVersionStatus {
            ACTIVE = "ACTIVE",
            DRAFT = "DRAFT",
            INACTIVE = "INACTIVE"
    }
    export interface CreateDetectorVersionResult {
            /**
                * <p>The ID for the created version's parent detector.</p>
                */
            detectorId?: string;
            /**
                * <p>The ID for the created detector. </p>
                */
            detectorVersionId?: string;
            /**
                * <p>The status of the detector version.</p>
                */
            status?: DetectorVersionStatus | string;
    }
    export namespace CreateDetectorVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDetectorVersionResult) => any;
    }
    export interface CreateModelRequest {
            /**
                * <p>The model ID.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type. </p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The model description. </p>
                */
            description?: string;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelRequest) => any;
    }
    export interface CreateModelResult {
    }
    export namespace CreateModelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelResult) => any;
    }
    /**
        * <p>Details for the external events data used for model version training.</p>
        */
    export interface ExternalEventsDetail {
            /**
                * <p>The Amazon S3 bucket location for the data.</p>
                */
            dataLocation: string | undefined;
            /**
                * <p>The ARN of the role that provides Amazon Fraud Detector access to the data location.</p>
                */
            dataAccessRoleArn: string | undefined;
    }
    export namespace ExternalEventsDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExternalEventsDetail) => any;
    }
    /**
        * <p>The start and stop time of the ingested events.</p>
        */
    export interface IngestedEventsTimeWindow {
            /**
                * <p>Timestamp of the first ingensted event.</p>
                */
            startTime: string | undefined;
            /**
                * <p>Timestamp of the final ingested event.</p>
                */
            endTime: string | undefined;
    }
    export namespace IngestedEventsTimeWindow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IngestedEventsTimeWindow) => any;
    }
    /**
        * <p>The details of the ingested event.</p>
        */
    export interface IngestedEventsDetail {
            /**
                * <p>The start and stop time of the ingested events.</p>
                */
            ingestedEventsTimeWindow: IngestedEventsTimeWindow | undefined;
    }
    export namespace IngestedEventsDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IngestedEventsDetail) => any;
    }
    export enum UnlabeledEventsTreatment {
            FRAUD = "FRAUD",
            IGNORE = "IGNORE",
            LEGIT = "LEGIT"
    }
    /**
        * <p>The label schema.</p>
        */
    export interface LabelSchema {
            /**
                * <p>The label mapper maps the Amazon Fraud Detector supported model classification labels (<code>FRAUD</code>, <code>LEGIT</code>) to the appropriate event type labels. For example, if "<code>FRAUD</code>" and "<code>LEGIT</code>" are Amazon Fraud Detector supported labels, this mapper could be: <code>{"FRAUD" => ["0"]</code>, <code>"LEGIT" => ["1"]}</code> or <code>{"FRAUD" => ["false"]</code>, <code>"LEGIT" => ["true"]}</code> or <code>{"FRAUD" => ["fraud", "abuse"]</code>, <code>"LEGIT" => ["legit", "safe"]}</code>. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label.
                *         </p>
                */
            labelMapper?: Record<string, string[]>;
            /**
                * <p>The action to take for unlabeled events.</p>
                */
            unlabeledEventsTreatment?: UnlabeledEventsTreatment | string;
    }
    export namespace LabelSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelSchema) => any;
    }
    /**
        * <p>The training data schema.</p>
        */
    export interface TrainingDataSchema {
            /**
                * <p>The training data schema variables.</p>
                */
            modelVariables: string[] | undefined;
            /**
                * <p>The label schema.</p>
                */
            labelSchema?: LabelSchema;
    }
    export namespace TrainingDataSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingDataSchema) => any;
    }
    export enum TrainingDataSourceEnum {
            EXTERNAL_EVENTS = "EXTERNAL_EVENTS",
            INGESTED_EVENTS = "INGESTED_EVENTS"
    }
    export interface CreateModelVersionRequest {
            /**
                * <p>The model ID. </p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The training data source location in Amazon S3. </p>
                */
            trainingDataSource: TrainingDataSourceEnum | string | undefined;
            /**
                * <p>The training data schema.</p>
                */
            trainingDataSchema: TrainingDataSchema | undefined;
            /**
                * <p>Details of the external events data used for model version training. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>.</p>
                */
            externalEventsDetail?: ExternalEventsDetail;
            /**
                * <p>Details of the ingested events data used for model version training. Required if <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
                */
            ingestedEventsDetail?: IngestedEventsDetail;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateModelVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelVersionRequest) => any;
    }
    export interface CreateModelVersionResult {
            /**
                * <p>The model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The model type.</p>
                */
            modelType?: ModelTypeEnum | string;
            /**
                * <p>The model version number of the model version created.</p>
                */
            modelVersionNumber?: string;
            /**
                * <p>The model version status. </p>
                */
            status?: string;
    }
    export namespace CreateModelVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelVersionResult) => any;
    }
    export enum Language {
            DETECTORPL = "DETECTORPL"
    }
    export interface CreateRuleRequest {
            /**
                * <p>The rule ID.</p>
                */
            ruleId: string | undefined;
            /**
                * <p>The detector ID for the rule's parent detector.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The rule description.</p>
                */
            description?: string;
            /**
                * <p>The rule expression.</p>
                */
            expression: string | undefined;
            /**
                * <p>The language of the rule.</p>
                */
            language: Language | string | undefined;
            /**
                * <p>The outcome or outcomes returned when the rule expression matches.</p>
                */
            outcomes: string[] | undefined;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleRequest) => any;
    }
    export interface CreateRuleResult {
            /**
                * <p>The created rule.</p>
                */
            rule?: Rule;
    }
    export namespace CreateRuleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleResult) => any;
    }
    export interface CreateVariableRequest {
            /**
                * <p>The name of the variable.</p>
                */
            name: string | undefined;
            /**
                * <p>The data type.</p>
                */
            dataType: DataType | string | undefined;
            /**
                * <p>The source of the data.</p>
                */
            dataSource: DataSource | string | undefined;
            /**
                * <p>The default value for the variable when no value is received.</p>
                */
            defaultValue: string | undefined;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The variable type. For more information see <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types">Variable types</a>.
                * 				</p>
                *          <p>Valid Values: <code>AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY | BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN | CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT | IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY | SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY | SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT</code>
                *          </p>
                */
            variableType?: string;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateVariableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVariableRequest) => any;
    }
    export interface CreateVariableResult {
    }
    export namespace CreateVariableResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVariableResult) => any;
    }
    export interface DeleteBatchImportJobRequest {
            /**
                * <p>The ID of the batch import job to delete. </p>
                */
            jobId: string | undefined;
    }
    export namespace DeleteBatchImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBatchImportJobRequest) => any;
    }
    export interface DeleteBatchImportJobResult {
    }
    export namespace DeleteBatchImportJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBatchImportJobResult) => any;
    }
    export interface DeleteBatchPredictionJobRequest {
            /**
                * <p>The ID of the batch prediction job to delete.</p>
                */
            jobId: string | undefined;
    }
    export namespace DeleteBatchPredictionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBatchPredictionJobRequest) => any;
    }
    export interface DeleteBatchPredictionJobResult {
    }
    export namespace DeleteBatchPredictionJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBatchPredictionJobResult) => any;
    }
    /**
        * <p>An exception indicating there was a conflict during a delete operation.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface DeleteDetectorRequest {
            /**
                * <p>The ID of the detector to delete.</p>
                */
            detectorId: string | undefined;
    }
    export namespace DeleteDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDetectorRequest) => any;
    }
    export interface DeleteDetectorResult {
    }
    export namespace DeleteDetectorResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDetectorResult) => any;
    }
    export interface DeleteDetectorVersionRequest {
            /**
                * <p>The ID of the parent detector for the detector version to delete.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The ID of the detector version to delete.</p>
                */
            detectorVersionId: string | undefined;
    }
    export namespace DeleteDetectorVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDetectorVersionRequest) => any;
    }
    export interface DeleteDetectorVersionResult {
    }
    export namespace DeleteDetectorVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDetectorVersionResult) => any;
    }
    export interface DeleteEntityTypeRequest {
            /**
                * <p>The name of the entity type to delete.</p>
                */
            name: string | undefined;
    }
    export namespace DeleteEntityTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntityTypeRequest) => any;
    }
    export interface DeleteEntityTypeResult {
    }
    export namespace DeleteEntityTypeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEntityTypeResult) => any;
    }
    export interface DeleteEventRequest {
            /**
                * <p>The ID of the event to delete.</p>
                */
            eventId: string | undefined;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>Specifies whether or not to delete any predictions associated with the event.</p>
                */
            deleteAuditHistory?: boolean;
    }
    export namespace DeleteEventRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventRequest) => any;
    }
    export interface DeleteEventResult {
    }
    export namespace DeleteEventResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventResult) => any;
    }
    export interface DeleteEventsByEventTypeRequest {
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName: string | undefined;
    }
    export namespace DeleteEventsByEventTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventsByEventTypeRequest) => any;
    }
    export interface DeleteEventsByEventTypeResult {
            /**
                * <p>Name of event type for which to delete the events.</p>
                */
            eventTypeName?: string;
            /**
                * <p>The status of the delete request.</p>
                */
            eventsDeletionStatus?: string;
    }
    export namespace DeleteEventsByEventTypeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventsByEventTypeResult) => any;
    }
    export interface DeleteEventTypeRequest {
            /**
                * <p>The name of the event type to delete.</p>
                */
            name: string | undefined;
    }
    export namespace DeleteEventTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventTypeRequest) => any;
    }
    export interface DeleteEventTypeResult {
    }
    export namespace DeleteEventTypeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventTypeResult) => any;
    }
    export interface DeleteExternalModelRequest {
            /**
                * <p>The endpoint of the Amazon Sagemaker model to delete.</p>
                */
            modelEndpoint: string | undefined;
    }
    export namespace DeleteExternalModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExternalModelRequest) => any;
    }
    export interface DeleteExternalModelResult {
    }
    export namespace DeleteExternalModelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExternalModelResult) => any;
    }
    export interface DeleteLabelRequest {
            /**
                * <p>The name of the label to delete.</p>
                */
            name: string | undefined;
    }
    export namespace DeleteLabelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLabelRequest) => any;
    }
    export interface DeleteLabelResult {
    }
    export namespace DeleteLabelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLabelResult) => any;
    }
    export interface DeleteModelRequest {
            /**
                * <p>The model ID of the model to delete.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type of the model to delete.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
    }
    export namespace DeleteModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelRequest) => any;
    }
    export interface DeleteModelResult {
    }
    export namespace DeleteModelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelResult) => any;
    }
    export interface DeleteModelVersionRequest {
            /**
                * <p>The model ID of the model version to delete.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type of the model version to delete.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The model version number of the model version to delete.</p>
                */
            modelVersionNumber: string | undefined;
    }
    export namespace DeleteModelVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelVersionRequest) => any;
    }
    export interface DeleteModelVersionResult {
    }
    export namespace DeleteModelVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelVersionResult) => any;
    }
    export interface DeleteOutcomeRequest {
            /**
                * <p>The name of the outcome to delete.</p>
                */
            name: string | undefined;
    }
    export namespace DeleteOutcomeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOutcomeRequest) => any;
    }
    export interface DeleteOutcomeResult {
    }
    export namespace DeleteOutcomeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOutcomeResult) => any;
    }
    export interface DeleteRuleRequest {
            /**
                * <p>A rule.</p>
                */
            rule: Rule | undefined;
    }
    export namespace DeleteRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleRequest) => any;
    }
    export interface DeleteRuleResult {
    }
    export namespace DeleteRuleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleResult) => any;
    }
    export interface DeleteVariableRequest {
            /**
                * <p>The name of the variable to delete.</p>
                */
            name: string | undefined;
    }
    export namespace DeleteVariableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVariableRequest) => any;
    }
    export interface DeleteVariableResult {
    }
    export namespace DeleteVariableResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVariableResult) => any;
    }
    export interface DescribeDetectorRequest {
            /**
                * <p>The detector ID.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The next token from the previous response.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return for the request.</p>
                */
            maxResults?: number;
    }
    export namespace DescribeDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDetectorRequest) => any;
    }
    /**
        * <p>The summary of the detector version.</p>
        */
    export interface DetectorVersionSummary {
            /**
                * <p>The detector version ID. </p>
                */
            detectorVersionId?: string;
            /**
                * <p>The detector version status. </p>
                */
            status?: DetectorVersionStatus | string;
            /**
                * <p>The detector version description. </p>
                */
            description?: string;
            /**
                * <p>Timestamp of when the detector version was last updated.</p>
                */
            lastUpdatedTime?: string;
    }
    export namespace DetectorVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectorVersionSummary) => any;
    }
    export interface DescribeDetectorResult {
            /**
                * <p>The detector ID.</p>
                */
            detectorId?: string;
            /**
                * <p>The status and description for each detector version.</p>
                */
            detectorVersionSummaries?: DetectorVersionSummary[];
            /**
                * <p>The next token to be used for subsequent requests.</p>
                */
            nextToken?: string;
            /**
                * <p>The detector ARN.</p>
                */
            arn?: string;
    }
    export namespace DescribeDetectorResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDetectorResult) => any;
    }
    export interface DescribeModelVersionsRequest {
            /**
                * <p>The model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The model version number.</p>
                */
            modelVersionNumber?: string;
            /**
                * <p>The model type.</p>
                */
            modelType?: ModelTypeEnum | string;
            /**
                * <p>The next token from the previous results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            maxResults?: number;
    }
    export namespace DescribeModelVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelVersionsRequest) => any;
    }
    /**
        * <p>The message details.</p>
        */
    export interface FieldValidationMessage {
            /**
                * <p>The field name.</p>
                */
            fieldName?: string;
            /**
                * <p>The message ID.</p>
                */
            identifier?: string;
            /**
                * <p>The message title.</p>
                */
            title?: string;
            /**
                * <p>The message content.</p>
                */
            content?: string;
            /**
                * <p>The message type.</p>
                */
            type?: string;
    }
    export namespace FieldValidationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FieldValidationMessage) => any;
    }
    /**
        * <p>The message details.</p>
        */
    export interface FileValidationMessage {
            /**
                * <p>The message title.</p>
                */
            title?: string;
            /**
                * <p>The message content.</p>
                */
            content?: string;
            /**
                * <p>The message type.</p>
                */
            type?: string;
    }
    export namespace FileValidationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileValidationMessage) => any;
    }
    /**
        * <p>The model training data validation metrics.</p>
        */
    export interface DataValidationMetrics {
            /**
                * <p>The file-specific model training data validation messages.</p>
                */
            fileLevelMessages?: FileValidationMessage[];
            /**
                * <p>The field-specific model training validation messages.</p>
                */
            fieldLevelMessages?: FieldValidationMessage[];
    }
    export namespace DataValidationMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataValidationMetrics) => any;
    }
    /**
        * <p>Model performance metrics data points.</p>
        */
    export interface MetricDataPoint {
            /**
                * <p>The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.</p>
                */
            fpr?: number;
            /**
                * <p>The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.</p>
                */
            precision?: number;
            /**
                * <p>The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.</p>
                */
            tpr?: number;
            /**
                * <p>The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.</p>
                */
            threshold?: number;
    }
    export namespace MetricDataPoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDataPoint) => any;
    }
    /**
        * <p>The training metric details.</p>
        */
    export interface TrainingMetrics {
            /**
                * <p>The area under the curve. This summarizes true positive rate (TPR) and false positive rate (FPR) across all possible model score thresholds. A model with no predictive power has an AUC of 0.5, whereas a perfect model has a score of 1.0.</p>
                */
            auc?: number;
            /**
                * <p>The data points details.</p>
                */
            metricDataPoints?: MetricDataPoint[];
    }
    export namespace TrainingMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingMetrics) => any;
    }
    /**
        * <p>The log odds metric details.</p>
        */
    export interface LogOddsMetric {
            /**
                * <p>The name of the variable.</p>
                */
            variableName: string | undefined;
            /**
                * <p>The type of variable.</p>
                */
            variableType: string | undefined;
            /**
                * <p>The relative importance of the variable. For more information, see <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/model-variable-importance.html">Model variable importance</a>.</p>
                */
            variableImportance: number | undefined;
    }
    export namespace LogOddsMetric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogOddsMetric) => any;
    }
    /**
        * <p>The variable importance metrics details.</p>
        */
    export interface VariableImportanceMetrics {
            /**
                * <p>List of variable metrics.</p>
                */
            logOddsMetrics?: LogOddsMetric[];
    }
    export namespace VariableImportanceMetrics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VariableImportanceMetrics) => any;
    }
    /**
        * <p>The training result details.</p>
        */
    export interface TrainingResult {
            /**
                * <p>The validation metrics.</p>
                */
            dataValidationMetrics?: DataValidationMetrics;
            /**
                * <p>The training metric details.</p>
                */
            trainingMetrics?: TrainingMetrics;
            /**
                * <p>The variable importance metrics.</p>
                */
            variableImportanceMetrics?: VariableImportanceMetrics;
    }
    export namespace TrainingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingResult) => any;
    }
    /**
        * <p>
        *             The Online Fraud Insights (OFI) model performance metrics data points.
        *         </p>
        */
    export interface OFIMetricDataPoint {
            /**
                * <p>
                *             The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.
                *         </p>
                */
            fpr?: number;
            /**
                * <p>
                *             The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.
                *         </p>
                */
            precision?: number;
            /**
                * <p>
                *             The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.
                *         </p>
                */
            tpr?: number;
            /**
                * <p>
                *             The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any model score 500 or above is labeled as fraud.
                *         </p>
                */
            threshold?: number;
    }
    export namespace OFIMetricDataPoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OFIMetricDataPoint) => any;
    }
    /**
        * <p>
        *             The Online Fraud Insights (OFI) model performance score.
        *         </p>
        */
    export interface OFIModelPerformance {
            /**
                * <p>
                *             The area under the curve (auc). This summarizes the total positive rate (tpr) and false positive rate (FPR) across all possible model score thresholds.
                *         </p>
                */
            auc?: number;
    }
    export namespace OFIModelPerformance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OFIModelPerformance) => any;
    }
    /**
        * <p>
        *             The Online Fraud Insights (OFI) model training metric details.
        *         </p>
        */
    export interface OFITrainingMetricsValue {
            /**
                * <p>
                *             The model's performance metrics data points.
                *         </p>
                */
            metricDataPoints?: OFIMetricDataPoint[];
            /**
                * <p>
                *             The model's overall performance score.
                *         </p>
                */
            modelPerformance?: OFIModelPerformance;
    }
    export namespace OFITrainingMetricsValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OFITrainingMetricsValue) => any;
    }
    /**
        * <p>
        *             The performance metrics data points for Transaction Fraud Insights (TFI) model.
        *         </p>
        */
    export interface TFIMetricDataPoint {
            /**
                * <p>
                *             The false positive rate. This is the percentage of total legitimate events that are incorrectly predicted as fraud.
                *         </p>
                */
            fpr?: number;
            /**
                * <p>
                *             The percentage of fraud events correctly predicted as fraudulent as compared to all events predicted as fraudulent.
                *         </p>
                */
            precision?: number;
            /**
                * <p>
                *             The true positive rate. This is the percentage of total fraud the model detects. Also known as capture rate.
                *         </p>
                */
            tpr?: number;
            /**
                * <p>
                *             The model threshold that specifies an acceptable fraud capture rate. For example, a threshold of 500 means any
                *             model score 500 or above is labeled as fraud.
                *         </p>
                */
            threshold?: number;
    }
    export namespace TFIMetricDataPoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TFIMetricDataPoint) => any;
    }
    /**
        * <p>
        *             The Transaction Fraud Insights (TFI) model performance score.
        *         </p>
        */
    export interface TFIModelPerformance {
            /**
                * <p>
                *             The area under the curve (auc). This summarizes the total positive rate (tpr) and false positive rate (FPR) across all possible model score thresholds.
                *         </p>
                */
            auc?: number;
    }
    export namespace TFIModelPerformance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TFIModelPerformance) => any;
    }
    /**
        * <p>
        *             The Transaction Fraud Insights (TFI) model training metric details.
        *         </p>
        */
    export interface TFITrainingMetricsValue {
            /**
                * <p>
                *             The model's performance metrics data points.
                *         </p>
                */
            metricDataPoints?: TFIMetricDataPoint[];
            /**
                * <p>
                *             The model performance score.
                *         </p>
                */
            modelPerformance?: TFIModelPerformance;
    }
    export namespace TFITrainingMetricsValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TFITrainingMetricsValue) => any;
    }
    /**
        * <p>
        *             The training metrics details.
        *         </p>
        */
    export interface TrainingMetricsV2 {
            /**
                * <p>
                *             The Online Fraud Insights (OFI) model training metric details.
                *         </p>
                */
            ofi?: OFITrainingMetricsValue;
            /**
                * <p>
                *             The Transaction Fraud Insights (TFI) model training metric details.
                *         </p>
                */
            tfi?: TFITrainingMetricsValue;
            /**
                * <p>
                *             The Account Takeover Insights (ATI) model training metric details.
                *         </p>
                */
            ati?: ATITrainingMetricsValue;
    }
    export namespace TrainingMetricsV2 {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingMetricsV2) => any;
    }
    /**
        * <p>
        *             The training result details.
        *         </p>
        */
    export interface TrainingResultV2 {
            /**
                * <p>The model training data validation metrics.</p>
                */
            dataValidationMetrics?: DataValidationMetrics;
            /**
                * <p>
                *             The training metric details.
                *         </p>
                */
            trainingMetricsV2?: TrainingMetricsV2;
            /**
                * <p>The variable importance metrics details.</p>
                */
            variableImportanceMetrics?: VariableImportanceMetrics;
            /**
                * <p>
                *             The variable importance metrics of the aggregated variables.
                *         </p>
                *         <p>Account Takeover Insights (ATI) model uses event variables from the login data you
                *             provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, your ATI model might calculate the number of times an user has logged in using the same IP address.
                *             In this case, event variables used to derive the aggregated variables are <code>IP address</code> and <code>user</code>.</p>
                */
            aggregatedVariablesImportanceMetrics?: AggregatedVariablesImportanceMetrics;
    }
    export namespace TrainingResultV2 {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrainingResultV2) => any;
    }
    /**
        * <p>The details of the model version.</p>
        */
    export interface ModelVersionDetail {
            /**
                * <p>The model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The model type.</p>
                */
            modelType?: ModelTypeEnum | string;
            /**
                * <p>The model version number.</p>
                */
            modelVersionNumber?: string;
            /**
                * <p>The status of the model version.</p>
                */
            status?: string;
            /**
                * <p>The model version training data source.</p>
                */
            trainingDataSource?: TrainingDataSourceEnum | string;
            /**
                * <p>The training data schema.</p>
                */
            trainingDataSchema?: TrainingDataSchema;
            /**
                * <p>The external events data details. This will be populated if the <code>trainingDataSource</code> for the model version is specified as  <code>EXTERNAL_EVENTS</code>.</p>
                */
            externalEventsDetail?: ExternalEventsDetail;
            /**
                * <p>The ingested events data details. This will be populated if the <code>trainingDataSource</code> for the model version is specified as  <code>INGESTED_EVENTS</code>.</p>
                */
            ingestedEventsDetail?: IngestedEventsDetail;
            /**
                * <p>The training results.</p>
                */
            trainingResult?: TrainingResult;
            /**
                * <p>The timestamp when the model was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>The timestamp when the model was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The model version ARN.</p>
                */
            arn?: string;
            /**
                * <p>
                *             The training result details. The details include the relative importance of the variables.
                *         </p>
                */
            trainingResultV2?: TrainingResultV2;
    }
    export namespace ModelVersionDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelVersionDetail) => any;
    }
    export interface DescribeModelVersionsResult {
            /**
                * <p>The model version details.</p>
                */
            modelVersionDetails?: ModelVersionDetail[];
            /**
                * <p>The next token.</p>
                */
            nextToken?: string;
    }
    export namespace DescribeModelVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeModelVersionsResult) => any;
    }
    export interface GetBatchImportJobsRequest {
            /**
                * <p>The ID of the batch import job to get.</p>
                */
            jobId?: string;
            /**
                * <p>The maximum number of objects to return for request.</p>
                */
            maxResults?: number;
            /**
                * <p>The next token from the previous request.</p>
                */
            nextToken?: string;
    }
    export namespace GetBatchImportJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBatchImportJobsRequest) => any;
    }
    /**
        * <p>The batch import job details.</p>
        */
    export interface BatchImport {
            /**
                * <p>The ID of the batch import job. </p>
                */
            jobId?: string;
            /**
                * <p>The status of the batch import job.</p>
                */
            status?: AsyncJobStatus | string;
            /**
                * <p>The reason batch import job failed.</p>
                */
            failureReason?: string;
            /**
                * <p>Timestamp of when the batch import job started.</p>
                */
            startTime?: string;
            /**
                * <p>Timestamp of when batch import job completed.</p>
                */
            completionTime?: string;
            /**
                * <p>The Amazon S3 location of your data file for batch import.</p>
                */
            inputPath?: string;
            /**
                * <p>The Amazon S3 location of your output file.</p>
                */
            outputPath?: string;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName?: string;
            /**
                * <p>The ARN of the IAM role to use for this job request.</p>
                */
            iamRoleArn?: string;
            /**
                * <p>The ARN of the batch import job.</p>
                */
            arn?: string;
            /**
                * <p>The number of records processed by batch import job.</p>
                */
            processedRecordsCount?: number;
            /**
                * <p>The number of records that failed to import. </p>
                */
            failedRecordsCount?: number;
            /**
                * <p>The total number of records in the batch import job.</p>
                */
            totalRecordsCount?: number;
    }
    export namespace BatchImport {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchImport) => any;
    }
    export interface GetBatchImportJobsResult {
            /**
                * <p>An array containing the details of each batch import job.</p>
                */
            batchImports?: BatchImport[];
            /**
                * <p>The next token for the subsequent resquest.</p>
                */
            nextToken?: string;
    }
    export namespace GetBatchImportJobsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBatchImportJobsResult) => any;
    }
    export interface GetBatchPredictionJobsRequest {
            /**
                * <p>The batch prediction job for which to get the details.</p>
                */
            jobId?: string;
            /**
                * <p>The maximum number of objects to return for the request.</p>
                */
            maxResults?: number;
            /**
                * <p>The next token from the previous request.</p>
                */
            nextToken?: string;
    }
    export namespace GetBatchPredictionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBatchPredictionJobsRequest) => any;
    }
    /**
        * <p>The batch prediction details.</p>
        */
    export interface BatchPrediction {
            /**
                * <p>The job ID for the batch prediction.</p>
                */
            jobId?: string;
            /**
                * <p>The batch prediction status.</p>
                */
            status?: AsyncJobStatus | string;
            /**
                * <p>The reason a batch prediction job failed.</p>
                */
            failureReason?: string;
            /**
                * <p>Timestamp of when the batch prediction job started.</p>
                */
            startTime?: string;
            /**
                * <p>Timestamp of when the batch prediction job completed.</p>
                */
            completionTime?: string;
            /**
                * <p>Timestamp of most recent heartbeat indicating the batch prediction job was making progress.</p>
                */
            lastHeartbeatTime?: string;
            /**
                * <p>The Amazon S3 location of your training file.</p>
                */
            inputPath?: string;
            /**
                * <p>The Amazon S3 location of your output file.</p>
                */
            outputPath?: string;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName?: string;
            /**
                * <p>The name of the detector.</p>
                */
            detectorName?: string;
            /**
                * <p>The detector version. </p>
                */
            detectorVersion?: string;
            /**
                * <p>The ARN of the IAM role to use for this job request.</p>
                */
            iamRoleArn?: string;
            /**
                * <p>The ARN of batch prediction job.</p>
                */
            arn?: string;
            /**
                * <p>The number of records processed by the batch prediction job.</p>
                */
            processedRecordsCount?: number;
            /**
                * <p>The total number of records in the batch prediction job.</p>
                */
            totalRecordsCount?: number;
    }
    export namespace BatchPrediction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPrediction) => any;
    }
    export interface GetBatchPredictionJobsResult {
            /**
                * <p>An array containing the details of each batch prediction job.</p>
                */
            batchPredictions?: BatchPrediction[];
            /**
                * <p>The next token for the subsequent request.</p>
                */
            nextToken?: string;
    }
    export namespace GetBatchPredictionJobsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBatchPredictionJobsResult) => any;
    }
    export interface GetDeleteEventsByEventTypeStatusRequest {
            /**
                * <p>Name of event type for which to get the deletion status.</p>
                */
            eventTypeName: string | undefined;
    }
    export namespace GetDeleteEventsByEventTypeStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeleteEventsByEventTypeStatusRequest) => any;
    }
    export interface GetDeleteEventsByEventTypeStatusResult {
            /**
                * <p>The event type name.</p>
                */
            eventTypeName?: string;
            /**
                * <p>The deletion status.</p>
                */
            eventsDeletionStatus?: AsyncJobStatus | string;
    }
    export namespace GetDeleteEventsByEventTypeStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeleteEventsByEventTypeStatusResult) => any;
    }
    export interface GetDetectorsRequest {
            /**
                * <p>The detector ID.</p>
                */
            detectorId?: string;
            /**
                * <p>The next token for the subsequent request.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request.</p>
                */
            maxResults?: number;
    }
    export namespace GetDetectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDetectorsRequest) => any;
    }
    /**
        * <p>The detector.</p>
        */
    export interface Detector {
            /**
                * <p>The detector ID.</p>
                */
            detectorId?: string;
            /**
                * <p>The detector description.</p>
                */
            description?: string;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName?: string;
            /**
                * <p>Timestamp of when the detector was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>Timestamp of when the detector was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The detector ARN.</p>
                */
            arn?: string;
    }
    export namespace Detector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Detector) => any;
    }
    export interface GetDetectorsResult {
            /**
                * <p>The detectors.</p>
                */
            detectors?: Detector[];
            /**
                * <p>The next page token.</p>
                */
            nextToken?: string;
    }
    export namespace GetDetectorsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDetectorsResult) => any;
    }
    export interface GetDetectorVersionRequest {
            /**
                * <p>The detector ID.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The detector version ID.</p>
                */
            detectorVersionId: string | undefined;
    }
    export namespace GetDetectorVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDetectorVersionRequest) => any;
    }
    export interface GetDetectorVersionResult {
            /**
                * <p>The detector ID.</p>
                */
            detectorId?: string;
            /**
                * <p>The detector version ID.</p>
                */
            detectorVersionId?: string;
            /**
                * <p>The detector version description.</p>
                */
            description?: string;
            /**
                * <p>The Amazon SageMaker model endpoints included in the detector version.</p>
                */
            externalModelEndpoints?: string[];
            /**
                * <p>The model versions included in the detector version. </p>
                */
            modelVersions?: ModelVersion[];
            /**
                * <p>The rules included in the detector version.</p>
                */
            rules?: Rule[];
            /**
                * <p>The status of the detector version.</p>
                */
            status?: DetectorVersionStatus | string;
            /**
                * <p>The timestamp when the detector version was last updated.
                *         </p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>The timestamp when the detector version was created. </p>
                */
            createdTime?: string;
            /**
                * <p>The execution mode of the rule in the dectector</p>
                * 	        <p>
                *             <code>FIRST_MATCHED</code> indicates that Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
                * 	        <p>
                *             <code>ALL_MATCHED</code> indicates that Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
                */
            ruleExecutionMode?: RuleExecutionMode | string;
            /**
                * <p>The detector version ARN.</p>
                */
            arn?: string;
    }
    export namespace GetDetectorVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDetectorVersionResult) => any;
    }
    export interface GetEntityTypesRequest {
            /**
                * <p>The name.</p>
                */
            name?: string;
            /**
                * <p>The next token for the subsequent request.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request.</p>
                */
            maxResults?: number;
    }
    export namespace GetEntityTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEntityTypesRequest) => any;
    }
    /**
        * <p>The entity type details.</p>
        */
    export interface EntityType {
            /**
                * <p>The entity type name.</p>
                */
            name?: string;
            /**
                * <p>The entity type description.</p>
                */
            description?: string;
            /**
                * <p>Timestamp of when the entity type was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>Timestamp of when the entity type was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The entity type ARN.</p>
                */
            arn?: string;
    }
    export namespace EntityType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityType) => any;
    }
    export interface GetEntityTypesResult {
            /**
                * <p>An array of entity types.</p>
                */
            entityTypes?: EntityType[];
            /**
                * <p>The next page token.</p>
                */
            nextToken?: string;
    }
    export namespace GetEntityTypesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEntityTypesResult) => any;
    }
    export interface GetEventRequest {
            /**
                * <p>The ID of the event to retrieve.</p>
                */
            eventId: string | undefined;
            /**
                * <p>The event type of the event to retrieve.</p>
                */
            eventTypeName: string | undefined;
    }
    export namespace GetEventRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventRequest) => any;
    }
    /**
        * <p>The entity details. </p>
        */
    export interface Entity {
            /**
                * <p>The entity type.</p>
                */
            entityType: string | undefined;
            /**
                * <p>The entity ID. If you do not know the <code>entityId</code>, you can pass <code>unknown</code>, which is areserved string literal.</p>
                */
            entityId: string | undefined;
    }
    export namespace Entity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Entity) => any;
    }
    /**
        * <p>The event details.</p>
        */
    export interface Event {
            /**
                * <p>The event ID.</p>
                */
            eventId?: string;
            /**
                * <p>The event type.</p>
                */
            eventTypeName?: string;
            /**
                * <p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
                */
            eventTimestamp?: string;
            /**
                * <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p>
                */
            eventVariables?: Record<string, string>;
            /**
                * <p>The label associated with the event.</p>
                */
            currentLabel?: string;
            /**
                * <p>The timestamp associated with the label to update. The timestamp must be specified using ISO 8601 standard in UTC.</p>
                */
            labelTimestamp?: string;
            /**
                * <p>The event entities.</p>
                */
            entities?: Entity[];
    }
    export namespace Event {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Event) => any;
    }
    export interface GetEventResult {
            /**
                * <p>The details of the event.</p>
                */
            event?: Event;
    }
    export namespace GetEventResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventResult) => any;
    }
    /**
        * <p>A pre-formed Amazon SageMaker model input you can include if your detector version includes an imported Amazon SageMaker model endpoint with pass-through input configuration.</p>
        */
    export interface ModelEndpointDataBlob {
            /**
                * <p>The byte buffer of the Amazon SageMaker model endpoint input data blob.</p>
                */
            byteBuffer?: Uint8Array;
            /**
                * <p>The content type of the Amazon SageMaker model endpoint input data blob. </p>
                */
            contentType?: string;
    }
    export namespace ModelEndpointDataBlob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelEndpointDataBlob) => any;
    }
    export interface GetEventPredictionRequest {
            /**
                * <p>The detector ID.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The detector version ID.</p>
                */
            detectorVersionId?: string;
            /**
                * <p>The unique ID used to identify the event.</p>
                */
            eventId: string | undefined;
            /**
                * <p>The event type associated with the detector specified for the prediction.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>The entity type (associated with the detector's event type) and specific entity ID representing who performed the event. If an entity id is not available, use "UNKNOWN."</p>
                */
            entities: Entity[] | undefined;
            /**
                * <p>Timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
                */
            eventTimestamp: string | undefined;
            /**
                * <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and
                *          their corresponding values for the event you are sending for evaluation.</p>
                *          <important>
                *             <p>You must provide at least one eventVariable</p>
                *          </important>
                *
                *          <p>To ensure most accurate fraud prediction and to simplify your data preparation, Amazon Fraud Detector will replace all missing variables or values as follows:</p>
                *
                *          <p>
                *             <b>For Amazon Fraud Detector trained models:</b>
                *          </p>
                *          <p>If a null value is provided explicitly for a variable or if a variable is missing, model will replace the null value or the missing variable (no variable name in the eventVariables map)
                *          with calculated default mean/medians for numeric variables and with special values for categorical variables.</p>
                *
                *          <p>
                *             <b>For imported SageMaker models:</b>
                *          </p>
                *          <p>If a null value is provided explicitly for a variable, the model and rules will use “null” as the value. If a variable is not provided (no variable name in the eventVariables map), model and rules
                *          will use the default value that is provided for the variable. </p>
                */
            eventVariables: Record<string, string> | undefined;
            /**
                * <p>The Amazon SageMaker model endpoint input data blobs.</p>
                */
            externalModelEndpointDataBlobs?: Record<string, ModelEndpointDataBlob>;
    }
    export namespace GetEventPredictionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventPredictionRequest) => any;
    }
    export enum ModelSource {
            SAGEMAKER = "SAGEMAKER"
    }
    /**
        * <p>The Amazon SageMaker model.</p>
        */
    export interface ExternalModelSummary {
            /**
                * <p>The endpoint of the Amazon SageMaker model.</p>
                */
            modelEndpoint?: string;
            /**
                * <p>The source of the model.</p>
                */
            modelSource?: ModelSource | string;
    }
    export namespace ExternalModelSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExternalModelSummary) => any;
    }
    /**
        * <p>The fraud prediction scores from Amazon SageMaker model.</p>
        */
    export interface ExternalModelOutputs {
            /**
                * <p>The Amazon SageMaker model.</p>
                */
            externalModel?: ExternalModelSummary;
            /**
                * <p>The fraud prediction scores from Amazon SageMaker model.</p>
                */
            outputs?: Record<string, string>;
    }
    export namespace ExternalModelOutputs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExternalModelOutputs) => any;
    }
    /**
        * <p>The fraud prediction scores.</p>
        */
    export interface ModelScores {
            /**
                * <p>The model version.</p>
                */
            modelVersion?: ModelVersion;
            /**
                * <p>The model's fraud prediction scores.</p>
                */
            scores?: Record<string, number>;
    }
    export namespace ModelScores {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelScores) => any;
    }
    /**
        * <p>The rule results.</p>
        */
    export interface RuleResult {
            /**
                * <p>The rule ID that was matched, based on the rule execution mode.</p>
                */
            ruleId?: string;
            /**
                * <p>The outcomes of the matched rule, based on the rule execution mode.</p>
                */
            outcomes?: string[];
    }
    export namespace RuleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleResult) => any;
    }
    export interface GetEventPredictionResult {
            /**
                * <p>The model scores. Amazon Fraud Detector generates model scores between 0 and 1000, where 0 is low fraud risk and 1000 is high fraud risk. Model scores are directly related to the false positive rate (FPR). For example, a score of 600 corresponds to an estimated 10% false positive rate whereas a score of 900 corresponds to an estimated 2% false positive rate.</p>
                */
            modelScores?: ModelScores[];
            /**
                * <p>The results from the rules.</p>
                */
            ruleResults?: RuleResult[];
            /**
                * <p>The model scores for Amazon SageMaker models.</p>
                */
            externalModelOutputs?: ExternalModelOutputs[];
    }
    export namespace GetEventPredictionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventPredictionResult) => any;
    }
    /**
        * <p>An exception indicating that the attached customer-owned (external) model threw an exception when Amazon Fraud Detector invoked the model.</p>
        */
    export class ResourceUnavailableException extends __BaseException {
            readonly name: "ResourceUnavailableException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>);
    }
    export interface GetEventPredictionMetadataRequest {
            /**
                * <p>
                * The event ID.
                * </p>
                */
            eventId: string | undefined;
            /**
                * <p>
                * The event type associated with the detector specified for the prediction.
                * </p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>
                * The detector ID.
                * </p>
                */
            detectorId: string | undefined;
            /**
                * <p>
                * The detector version ID.
                * </p>
                */
            detectorVersionId: string | undefined;
            /**
                * <p>
                *     The timestamp that defines when the prediction was generated. The timestamp must be specified using ISO 8601 standard in UTC.</p>
                *          <p>We recommend calling <a href="https://docs.aws.amazon.com/frauddetector/latest/api/API_ListEventPredictions.html">ListEventPredictions</a>
                *         first, and using the <code>predictionTimestamp</code> value in the response to provide an accurate prediction timestamp value.</p>
                */
            predictionTimestamp: string | undefined;
    }
    export namespace GetEventPredictionMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventPredictionMetadataRequest) => any;
    }
    /**
        * <p>
        * The details of the external (Amazon Sagemaker) model evaluated for generating predictions.
        * </p>
        */
    export interface EvaluatedExternalModel {
            /**
                * <p>
                * The endpoint of the external (Amazon Sagemaker) model.
                * </p>
                */
            modelEndpoint?: string;
            /**
                * <p>
                * Indicates whether event variables were used to generate predictions.
                * </p>
                */
            useEventVariables?: boolean;
            /**
                * <p>
                * Input variables use for generating predictions.
                * </p>
                */
            inputVariables?: Record<string, string>;
            /**
                * <p>
                * Output variables.
                * </p>
                */
            outputVariables?: Record<string, string>;
    }
    export namespace EvaluatedExternalModel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluatedExternalModel) => any;
    }
    /**
        * <p>
        * The details of the event variable's impact on the prediction score.
        * </p>
        */
    export interface VariableImpactExplanation {
            /**
                * <p>
                * The event variable name.
                * </p>
                */
            eventVariableName?: string;
            /**
                * <p>
                *     The event variable's relative impact in terms of magnitude on the prediction scores.
                *     The relative impact values consist of a numerical rating (0-5, 5 being the highest) and direction (increased/decreased) impact of the fraud risk.
                * </p>
                */
            relativeImpact?: string;
            /**
                * <p>
                *     The raw, uninterpreted value represented as log-odds of the fraud. These values are usually between -10 to +10, but range from - infinity to + infinity.</p>
                *          <ul>
                *             <li>
                *                <p>A positive value indicates that the variable drove the risk score up.</p>
                *             </li>
                *             <li>
                *                <p>A negative value indicates that the variable drove the risk score down.</p>
                *             </li>
                *          </ul>
                */
            logOddsImpact?: number;
    }
    export namespace VariableImpactExplanation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VariableImpactExplanation) => any;
    }
    /**
        * <p>
        * The prediction explanations that provide insight into how each event variable impacted the model version's fraud prediction score.
        * </p>
        */
    export interface PredictionExplanations {
            /**
                * <p>
                * The details of the event variable's impact on the prediction score.
                * </p>
                */
            variableImpactExplanations?: VariableImpactExplanation[];
            /**
                * <p>
                *             The details of the aggregated variables impact on the prediction score.
                *         </p>
                *
                *         <p>Account Takeover Insights (ATI) model uses event variables from the login data you
                *             provide to continuously calculate a set of variables (aggregated variables) based on historical events. For example, your ATI model might calculate the number of times an user has logged in using the same IP address.
                *             In this case, event variables used to derive the aggregated variables are <code>IP address</code> and <code>user</code>.</p>
                */
            aggregatedVariablesImpactExplanations?: AggregatedVariablesImpactExplanation[];
    }
    export namespace PredictionExplanations {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PredictionExplanations) => any;
    }
    /**
        * <p>
        * The model version evalutions.
        * </p>
        */
    export interface ModelVersionEvaluation {
            /**
                * <p>
                * The output variable name.
                * </p>
                */
            outputVariableName?: string;
            /**
                * <p>
                * The evaluation score generated for the model version.
                * </p>
                */
            evaluationScore?: string;
            /**
                * <p>
                * The prediction explanations generated for the model version.
                * </p>
                */
            predictionExplanations?: PredictionExplanations;
    }
    export namespace ModelVersionEvaluation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelVersionEvaluation) => any;
    }
    /**
        * <p>
        * The model version evaluated for generating prediction.
        * </p>
        */
    export interface EvaluatedModelVersion {
            /**
                * <p>
                * The model ID.
                * </p>
                */
            modelId?: string;
            /**
                * <p>
                * The model version.
                * </p>
                */
            modelVersion?: string;
            /**
                * <p>The model type. </p>
                *          <p>Valid values: <code>ONLINE_FRAUD_INSIGHTS</code> | <code>TRANSACTION_FRAUD_INSIGHTS</code>
                *          </p>
                */
            modelType?: string;
            /**
                * <p>
                * Evaluations generated for the model version.
                * </p>
                */
            evaluations?: ModelVersionEvaluation[];
    }
    export namespace EvaluatedModelVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluatedModelVersion) => any;
    }
    /**
        * <p>
        * Information about the summary of an event variable that was evaluated for generating prediction.
        * </p>
        */
    export interface EventVariableSummary {
            /**
                * <p>
                * The event variable name.
                * </p>
                */
            name?: string;
            /**
                * <p>
                * The value of the event variable.
                * </p>
                */
            value?: string;
            /**
                * <p>
                * The event variable source.
                * </p>
                */
            source?: string;
    }
    export namespace EventVariableSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventVariableSummary) => any;
    }
    /**
        * <p>
        * The details of the rule used for evaluating variable values.
        * </p>
        */
    export interface EvaluatedRule {
            /**
                * <p>
                * The rule ID.
                * </p>
                */
            ruleId?: string;
            /**
                * <p>
                * The rule version.
                * </p>
                */
            ruleVersion?: string;
            /**
                * <p>
                * The rule expression.
                * </p>
                */
            expression?: string;
            /**
                * <p>
                * The rule expression value.
                * </p>
                */
            expressionWithValues?: string;
            /**
                * <p>
                * The rule outcome.
                * </p>
                */
            outcomes?: string[];
            /**
                * <p>
                * Indicates whether the rule was evaluated.
                * </p>
                */
            evaluated?: boolean;
            /**
                * <p>
                * Indicates whether the rule matched.
                * </p>
                */
            matched?: boolean;
    }
    export namespace EvaluatedRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluatedRule) => any;
    }
    export interface GetEventPredictionMetadataResult {
            /**
                * <p>
                * The event ID.
                * </p>
                */
            eventId?: string;
            /**
                * <p>
                * The event type associated with the detector specified for this prediction.
                * </p>
                */
            eventTypeName?: string;
            /**
                * <p>
                * The entity ID.
                * </p>
                */
            entityId?: string;
            /**
                * <p>
                * The entity type.
                * </p>
                */
            entityType?: string;
            /**
                * <p>
                * The timestamp for when the prediction was generated for the associated event ID.
                * </p>
                */
            eventTimestamp?: string;
            /**
                * <p>
                * The detector ID.
                * </p>
                */
            detectorId?: string;
            /**
                * <p>
                * The detector version ID.
                * </p>
                */
            detectorVersionId?: string;
            /**
                * <p>
                * The status of the detector version.
                * </p>
                */
            detectorVersionStatus?: string;
            /**
                * <p>
                * A list of event variables that influenced the prediction scores.
                * </p>
                */
            eventVariables?: EventVariableSummary[];
            /**
                * <p>
                * List of rules associated with the detector version that were used for evaluating variable values.
                * </p>
                */
            rules?: EvaluatedRule[];
            /**
                * <p>
                * The execution mode of the rule used for evaluating variable values.
                * </p>
                */
            ruleExecutionMode?: RuleExecutionMode | string;
            /**
                * <p>
                * The outcomes of the matched rule, based on the rule execution mode.
                * </p>
                */
            outcomes?: string[];
            /**
                * <p>
                * Model versions that were evaluated for generating predictions.
                * </p>
                */
            evaluatedModelVersions?: EvaluatedModelVersion[];
            /**
                * <p>
                * External (Amazon SageMaker) models that were evaluated for generating predictions.
                * </p>
                */
            evaluatedExternalModels?: EvaluatedExternalModel[];
            /**
                * <p>The timestamp that defines when the prediction was generated. </p>
                */
            predictionTimestamp?: string;
    }
    export namespace GetEventPredictionMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventPredictionMetadataResult) => any;
    }
    export interface GetEventTypesRequest {
            /**
                * <p>The name.</p>
                */
            name?: string;
            /**
                * <p>The next token for the subsequent request.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request.</p>
                */
            maxResults?: number;
    }
    export namespace GetEventTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventTypesRequest) => any;
    }
    export enum EventIngestion {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Data about the stored events.</p>
        */
    export interface IngestedEventStatistics {
            /**
                * <p>The number of stored events.</p>
                */
            numberOfEvents?: number;
            /**
                * <p>The total size of the stored events.</p>
                */
            eventDataSizeInBytes?: number;
            /**
                * <p>The oldest stored event.</p>
                */
            leastRecentEvent?: string;
            /**
                * <p>The newest stored event.</p>
                */
            mostRecentEvent?: string;
            /**
                * <p>Timestamp of when the stored event was last updated.
                *       </p>
                */
            lastUpdatedTime?: string;
    }
    export namespace IngestedEventStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IngestedEventStatistics) => any;
    }
    /**
        * <p>The event type details.</p>
        */
    export interface EventType {
            /**
                * <p>The event type name.</p>
                */
            name?: string;
            /**
                * <p>The event type description.</p>
                */
            description?: string;
            /**
                * <p>The event type event variables.</p>
                */
            eventVariables?: string[];
            /**
                * <p>The event type labels.</p>
                */
            labels?: string[];
            /**
                * <p>The event type entity types.</p>
                */
            entityTypes?: string[];
            /**
                * <p>If <code>Enabled</code>, Amazon Fraud Detector stores event data when you generate a prediction and uses that data to update calculated variables in near real-time. Amazon Fraud Detector uses this data, known as <code>INGESTED_EVENTS</code>, to train your model and  improve fraud predictions.</p>
                */
            eventIngestion?: EventIngestion | string;
            /**
                * <p>Data about the stored events.</p>
                */
            ingestedEventStatistics?: IngestedEventStatistics;
            /**
                * <p>Timestamp of when the event type was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>Timestamp of when the event type was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The entity type ARN.</p>
                */
            arn?: string;
    }
    export namespace EventType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventType) => any;
    }
    export interface GetEventTypesResult {
            /**
                * <p>An array of event types.</p>
                */
            eventTypes?: EventType[];
            /**
                * <p>The next page token.</p>
                */
            nextToken?: string;
    }
    export namespace GetEventTypesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEventTypesResult) => any;
    }
    export interface GetExternalModelsRequest {
            /**
                * <p>The Amazon SageMaker model endpoint.</p>
                */
            modelEndpoint?: string;
            /**
                * <p>The next page token for the request.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request.</p>
                */
            maxResults?: number;
    }
    export namespace GetExternalModelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExternalModelsRequest) => any;
    }
    export enum ModelInputDataFormat {
            CSV = "TEXT_CSV",
            JSON = "APPLICATION_JSON"
    }
    /**
        * <p>The Amazon SageMaker model input configuration.</p>
        */
    export interface ModelInputConfiguration {
            /**
                * <p>The event type name.</p>
                */
            eventTypeName?: string;
            /**
                * <p> The format of the model input configuration. The format differs depending on if it is
                *             passed through to SageMaker or constructed by Amazon Fraud Detector.</p>
                */
            format?: ModelInputDataFormat | string;
            /**
                * <p>The event variables.</p>
                */
            useEventVariables: boolean | undefined;
            /**
                * <p> Template for constructing the JSON input-data sent to SageMaker. At event-evaluation,
                *             the placeholders for variable names in the template will be replaced with the variable
                *             values before being sent to SageMaker. </p>
                */
            jsonInputTemplate?: string;
            /**
                * <p> Template for constructing the CSV input-data sent to SageMaker. At event-evaluation,
                *             the placeholders for variable-names in the template will be replaced with the variable
                *             values before being sent to SageMaker. </p>
                */
            csvInputTemplate?: string;
    }
    export namespace ModelInputConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelInputConfiguration) => any;
    }
    export enum ModelEndpointStatus {
            ASSOCIATED = "ASSOCIATED",
            DISSOCIATED = "DISSOCIATED"
    }
    export enum ModelOutputDataFormat {
            CSV = "TEXT_CSV",
            JSONLINES = "APPLICATION_JSONLINES"
    }
    /**
        * <p>Provides the Amazon Sagemaker model output configuration.</p>
        */
    export interface ModelOutputConfiguration {
            /**
                * <p>The format of the model output configuration.</p>
                */
            format: ModelOutputDataFormat | string | undefined;
            /**
                * <p>A map of JSON keys in response from SageMaker to the Amazon Fraud Detector variables. </p>
                */
            jsonKeyToVariableMap?: Record<string, string>;
            /**
                * <p>A map of CSV index values in the SageMaker response to the Amazon Fraud Detector variables. </p>
                */
            csvIndexToVariableMap?: Record<string, string>;
    }
    export namespace ModelOutputConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModelOutputConfiguration) => any;
    }
    /**
        * <p>The Amazon SageMaker model.</p>
        */
    export interface ExternalModel {
            /**
                * <p>The Amazon SageMaker model endpoints.</p>
                */
            modelEndpoint?: string;
            /**
                * <p>The source of the model.</p>
                */
            modelSource?: ModelSource | string;
            /**
                * <p>The role used to invoke the model. </p>
                */
            invokeModelEndpointRoleArn?: string;
            /**
                * <p>The input configuration.</p>
                */
            inputConfiguration?: ModelInputConfiguration;
            /**
                * <p>The output configuration.</p>
                */
            outputConfiguration?: ModelOutputConfiguration;
            /**
                * <p>The Amazon Fraud Detector status for the external model endpoint</p>
                */
            modelEndpointStatus?: ModelEndpointStatus | string;
            /**
                * <p>Timestamp of when the model was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>Timestamp of when the model was last created.</p>
                */
            createdTime?: string;
            /**
                * <p>The model ARN.</p>
                */
            arn?: string;
    }
    export namespace ExternalModel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExternalModel) => any;
    }
    export interface GetExternalModelsResult {
            /**
                * <p>Gets the Amazon SageMaker models.</p>
                */
            externalModels?: ExternalModel[];
            /**
                * <p>The next page token to be used in subsequent requests.</p>
                */
            nextToken?: string;
    }
    export namespace GetExternalModelsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExternalModelsResult) => any;
    }
    /**
        * <p>The KMS key details.</p>
        */
    export interface KMSKey {
            /**
                * <p>The encryption key ARN.</p>
                */
            kmsEncryptionKeyArn?: string;
    }
    export namespace KMSKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KMSKey) => any;
    }
    export interface GetKMSEncryptionKeyResult {
            /**
                * <p>The KMS encryption key.</p>
                */
            kmsKey?: KMSKey;
    }
    export namespace GetKMSEncryptionKeyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetKMSEncryptionKeyResult) => any;
    }
    export interface GetLabelsRequest {
            /**
                * <p>The name of the label or labels to get.</p>
                */
            name?: string;
            /**
                * <p>The next token for the subsequent request.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request.</p>
                */
            maxResults?: number;
    }
    export namespace GetLabelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLabelsRequest) => any;
    }
    /**
        * <p>The label details.</p>
        */
    export interface Label {
            /**
                * <p>The label name.</p>
                */
            name?: string;
            /**
                * <p>The label description.</p>
                */
            description?: string;
            /**
                * <p>Timestamp of when the label was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>Timestamp of when the event type was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The label ARN.</p>
                */
            arn?: string;
    }
    export namespace Label {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Label) => any;
    }
    export interface GetLabelsResult {
            /**
                * <p>An array of labels.</p>
                */
            labels?: Label[];
            /**
                * <p>The next page token.</p>
                */
            nextToken?: string;
    }
    export namespace GetLabelsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLabelsResult) => any;
    }
    export interface GetModelsRequest {
            /**
                * <p>The model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The model type.</p>
                */
            modelType?: ModelTypeEnum | string;
            /**
                * <p>The next token for the subsequent request.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request. </p>
                */
            maxResults?: number;
    }
    export namespace GetModelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelsRequest) => any;
    }
    /**
        * <p>The model.</p>
        */
    export interface Model {
            /**
                * <p>The model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The model type.</p>
                */
            modelType?: ModelTypeEnum | string;
            /**
                * <p>The model description.</p>
                */
            description?: string;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName?: string;
            /**
                * <p>Timestamp of when the model was created.</p>
                */
            createdTime?: string;
            /**
                * <p>Timestamp of last time the model was updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>The ARN of the model.</p>
                */
            arn?: string;
    }
    export namespace Model {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Model) => any;
    }
    export interface GetModelsResult {
            /**
                * <p>The next page token to be used in subsequent requests.</p>
                */
            nextToken?: string;
            /**
                * <p>The array of models.</p>
                */
            models?: Model[];
    }
    export namespace GetModelsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelsResult) => any;
    }
    export interface GetModelVersionRequest {
            /**
                * <p>The model ID.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The model version number.</p>
                */
            modelVersionNumber: string | undefined;
    }
    export namespace GetModelVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelVersionRequest) => any;
    }
    export interface GetModelVersionResult {
            /**
                * <p>The model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The model type.</p>
                */
            modelType?: ModelTypeEnum | string;
            /**
                * <p>The model version number.</p>
                */
            modelVersionNumber?: string;
            /**
                * <p>The training data source.</p>
                */
            trainingDataSource?: TrainingDataSourceEnum | string;
            /**
                * <p>The training data schema.</p>
                */
            trainingDataSchema?: TrainingDataSchema;
            /**
                * <p>The details of the external events data used for training the model version.
                *          This will be populated if the <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>
                *          </p>
                */
            externalEventsDetail?: ExternalEventsDetail;
            /**
                * <p>The details of the ingested events data used for training the model version.
                *          This will be populated if the <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
                */
            ingestedEventsDetail?: IngestedEventsDetail;
            /**
                * <p>The model version status.</p>
                * 	        <p>Possible values are:</p>
                * 	        <ul>
                *             <li>
                *                <p>
                *                   <code>TRAINING_IN_PROGRESS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TRAINING_COMPLETE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ACTIVATE_REQUESTED</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ACTIVATE_IN_PROGRESS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ACTIVE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INACTIVATE_REQUESTED</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INACTIVATE_IN_PROGRESS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INACTIVE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ERROR</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            status?: string;
            /**
                * <p>The model version ARN.</p>
                */
            arn?: string;
    }
    export namespace GetModelVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelVersionResult) => any;
    }
    export interface GetOutcomesRequest {
            /**
                * <p>The name of the outcome or outcomes to get.</p>
                */
            name?: string;
            /**
                * <p>The next page token for the request. </p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request. </p>
                */
            maxResults?: number;
    }
    export namespace GetOutcomesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOutcomesRequest) => any;
    }
    /**
        * <p>The outcome.</p>
        */
    export interface Outcome {
            /**
                * <p>The outcome name.</p>
                */
            name?: string;
            /**
                * <p>The outcome description.</p>
                */
            description?: string;
            /**
                * <p>The timestamp when the outcome was last updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>The timestamp when the outcome was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The outcome ARN.</p>
                */
            arn?: string;
    }
    export namespace Outcome {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Outcome) => any;
    }
    export interface GetOutcomesResult {
            /**
                * <p>The outcomes. </p>
                */
            outcomes?: Outcome[];
            /**
                * <p>The next page token for subsequent requests.</p>
                */
            nextToken?: string;
    }
    export namespace GetOutcomesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOutcomesResult) => any;
    }
    export interface GetRulesRequest {
            /**
                * <p>The rule ID.</p>
                */
            ruleId?: string;
            /**
                * <p>The detector ID.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The rule version.</p>
                */
            ruleVersion?: string;
            /**
                * <p>The next page token.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of rules to return for the request.</p>
                */
            maxResults?: number;
    }
    export namespace GetRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRulesRequest) => any;
    }
    /**
        * <p>The details of the rule.</p>
        */
    export interface RuleDetail {
            /**
                * <p>The rule ID.</p>
                */
            ruleId?: string;
            /**
                * <p>The rule description.</p>
                */
            description?: string;
            /**
                * <p>The detector for which the rule is associated.</p>
                */
            detectorId?: string;
            /**
                * <p>The rule version.</p>
                */
            ruleVersion?: string;
            /**
                * <p>The rule expression.</p>
                */
            expression?: string;
            /**
                * <p>The rule language.</p>
                */
            language?: Language | string;
            /**
                * <p>The rule outcomes.</p>
                */
            outcomes?: string[];
            /**
                * <p>Timestamp of the last time the rule was updated.</p>
                */
            lastUpdatedTime?: string;
            /**
                * <p>The timestamp of when the rule was created.</p>
                */
            createdTime?: string;
            /**
                * <p>The rule ARN.</p>
                */
            arn?: string;
    }
    export namespace RuleDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleDetail) => any;
    }
    export interface GetRulesResult {
            /**
                * <p>The details of the requested rule.</p>
                */
            ruleDetails?: RuleDetail[];
            /**
                * <p>The next page token to be used in subsequent requests.</p>
                */
            nextToken?: string;
    }
    export namespace GetRulesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRulesResult) => any;
    }
    export interface GetVariablesRequest {
            /**
                * <p>The name of the variable. </p>
                */
            name?: string;
            /**
                * <p>The next page token of the get variable request. </p>
                */
            nextToken?: string;
            /**
                * <p>The max size per page determined for the get variable request. </p>
                */
            maxResults?: number;
    }
    export namespace GetVariablesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVariablesRequest) => any;
    }
    export interface GetVariablesResult {
            /**
                * <p>The names of the variables returned. </p>
                */
            variables?: Variable[];
            /**
                * <p>The next page token to be used in subsequent requests. </p>
                */
            nextToken?: string;
    }
    export namespace GetVariablesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVariablesResult) => any;
    }
    /**
        * <p>
        * A conditional statement for filtering a list of past predictions.
        * </p>
        */
    export interface FilterCondition {
            /**
                * <p>
                * A statement containing a resource property and a value to specify filter condition.
                * </p>
                */
            value?: string;
    }
    export namespace FilterCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterCondition) => any;
    }
    /**
        * <p>
        * The time period for when the predictions were generated.
        * </p>
        */
    export interface PredictionTimeRange {
            /**
                * <p>
                * The start time of the time period for when the predictions were generated.
                * </p>
                */
            startTime: string | undefined;
            /**
                * <p>
                * The end time of the time period for when the predictions were generated.
                * </p>
                */
            endTime: string | undefined;
    }
    export namespace PredictionTimeRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PredictionTimeRange) => any;
    }
    export interface ListEventPredictionsRequest {
            /**
                * <p>
                * The event ID.
                * </p>
                */
            eventId?: FilterCondition;
            /**
                * <p>
                * The event type associated with the detector.
                * </p>
                */
            eventType?: FilterCondition;
            /**
                * <p>
                * The detector ID.
                * </p>
                */
            detectorId?: FilterCondition;
            /**
                * <p>
                * The detector version ID.
                * </p>
                */
            detectorVersionId?: FilterCondition;
            /**
                * <p>
                * The time period for when the predictions were generated.
                * </p>
                */
            predictionTimeRange?: PredictionTimeRange;
            /**
                * <p>
                * Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.
                * </p>
                */
            nextToken?: string;
            /**
                * <p>
                * The maximum number of predictions to return for the request.
                * </p>
                */
            maxResults?: number;
    }
    export namespace ListEventPredictionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventPredictionsRequest) => any;
    }
    /**
        * <p>
        * Information about the summary of an event prediction.
        * </p>
        */
    export interface EventPredictionSummary {
            /**
                * <p>
                * The event ID.
                * </p>
                */
            eventId?: string;
            /**
                * <p>
                * The event type.
                * </p>
                */
            eventTypeName?: string;
            /**
                * <p>
                * The timestamp of the event.
                * </p>
                */
            eventTimestamp?: string;
            /**
                * <p>
                * The timestamp when the prediction was generated.
                * </p>
                */
            predictionTimestamp?: string;
            /**
                * <p>
                * The detector ID.
                * </p>
                */
            detectorId?: string;
            /**
                * <p>
                * The detector version ID.
                * </p>
                */
            detectorVersionId?: string;
    }
    export namespace EventPredictionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventPredictionSummary) => any;
    }
    export interface ListEventPredictionsResult {
            /**
                * <p>
                * The summary of the past predictions.
                * </p>
                */
            eventPredictionSummaries?: EventPredictionSummary[];
            /**
                * <p>
                * Identifies the next page of results to return. Use the token to make the call again to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours.
                * </p>
                */
            nextToken?: string;
    }
    export namespace ListEventPredictionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventPredictionsResult) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN that specifies the resource whose tags you want to list.</p>
                */
            resourceARN: string | undefined;
            /**
                * <p>The next token from the previous results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of objects to return for the request. </p>
                */
            maxResults?: number;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResult {
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
            /**
                * <p>The next token for subsequent requests. </p>
                */
            nextToken?: string;
    }
    export namespace ListTagsForResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResult) => any;
    }
    export interface PutDetectorRequest {
            /**
                * <p>The detector ID. </p>
                */
            detectorId: string | undefined;
            /**
                * <p>The description of the detector.</p>
                */
            description?: string;
            /**
                * <p>The name of the event type.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace PutDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDetectorRequest) => any;
    }
    export interface PutDetectorResult {
    }
    export namespace PutDetectorResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutDetectorResult) => any;
    }
    export interface PutEntityTypeRequest {
            /**
                * <p>The name of the entity type.</p>
                */
            name: string | undefined;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace PutEntityTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEntityTypeRequest) => any;
    }
    export interface PutEntityTypeResult {
    }
    export namespace PutEntityTypeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEntityTypeResult) => any;
    }
    export interface PutEventTypeRequest {
            /**
                * <p>The name.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the event type.</p>
                */
            description?: string;
            /**
                * <p>The event type variables.</p>
                */
            eventVariables: string[] | undefined;
            /**
                * <p>The event type labels.</p>
                */
            labels?: string[];
            /**
                * <p>The entity type for the event type. Example entity types: customer, merchant, account.</p>
                */
            entityTypes: string[] | undefined;
            /**
                * <p>Specifies if ingenstion is enabled or disabled.</p>
                */
            eventIngestion?: EventIngestion | string;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace PutEventTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventTypeRequest) => any;
    }
    export interface PutEventTypeResult {
    }
    export namespace PutEventTypeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutEventTypeResult) => any;
    }
    export interface PutExternalModelRequest {
            /**
                * <p>The model endpoints name.</p>
                */
            modelEndpoint: string | undefined;
            /**
                * <p>The source of the model.</p>
                */
            modelSource: ModelSource | string | undefined;
            /**
                * <p>The IAM role used to invoke the model endpoint.</p>
                */
            invokeModelEndpointRoleArn: string | undefined;
            /**
                * <p>The model endpoint input configuration.</p>
                */
            inputConfiguration: ModelInputConfiguration | undefined;
            /**
                * <p>The model endpoint output configuration.</p>
                */
            outputConfiguration: ModelOutputConfiguration | undefined;
            /**
                * <p>The model endpoint’s status in Amazon Fraud Detector.</p>
                */
            modelEndpointStatus: ModelEndpointStatus | string | undefined;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace PutExternalModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutExternalModelRequest) => any;
    }
    export interface PutExternalModelResult {
    }
    export namespace PutExternalModelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutExternalModelResult) => any;
    }
    export interface PutKMSEncryptionKeyRequest {
            /**
                * <p>The KMS encryption key ARN.</p>
                */
            kmsEncryptionKeyArn: string | undefined;
    }
    export namespace PutKMSEncryptionKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutKMSEncryptionKeyRequest) => any;
    }
    export interface PutKMSEncryptionKeyResult {
    }
    export namespace PutKMSEncryptionKeyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutKMSEncryptionKeyResult) => any;
    }
    export interface PutLabelRequest {
            /**
                * <p>The label name.</p>
                */
            name: string | undefined;
            /**
                * <p>The label description.</p>
                */
            description?: string;
            /**
                * <p></p>
                */
            tags?: Tag[];
    }
    export namespace PutLabelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLabelRequest) => any;
    }
    export interface PutLabelResult {
    }
    export namespace PutLabelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLabelResult) => any;
    }
    export interface PutOutcomeRequest {
            /**
                * <p>The name of the outcome.</p>
                */
            name: string | undefined;
            /**
                * <p>The outcome description.</p>
                */
            description?: string;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace PutOutcomeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutOutcomeRequest) => any;
    }
    export interface PutOutcomeResult {
    }
    export namespace PutOutcomeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutOutcomeResult) => any;
    }
    export interface SendEventRequest {
            /**
                * <p>The event ID to upload.</p>
                */
            eventId: string | undefined;
            /**
                * <p>The event type name of the event.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC.</p>
                */
            eventTimestamp: string | undefined;
            /**
                * <p>Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation.</p>
                */
            eventVariables: Record<string, string> | undefined;
            /**
                * <p>The label to associate with the event. Required if specifying <code>labelTimestamp</code>.</p>
                */
            assignedLabel?: string;
            /**
                * <p>The timestamp associated with the label. Required if specifying <code>assignedLabel</code>.</p>
                */
            labelTimestamp?: string;
            /**
                * <p>An array of entities.</p>
                */
            entities: Entity[] | undefined;
    }
    export namespace SendEventRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEventRequest) => any;
    }
    export interface SendEventResult {
    }
    export namespace SendEventResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEventResult) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The resource ARN.</p>
                */
            resourceARN: string | undefined;
            /**
                * <p>The tags to assign to the resource.</p>
                */
            tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResult {
    }
    export namespace TagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResult) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the resource from which to remove the tag.</p>
                */
            resourceARN: string | undefined;
            /**
                * <p>The resource ARN.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResult {
    }
    export namespace UntagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResult) => any;
    }
    export interface UpdateDetectorVersionRequest {
            /**
                * <p>The parent detector ID for the detector version you want to update.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The detector version ID. </p>
                */
            detectorVersionId: string | undefined;
            /**
                * <p>The Amazon SageMaker model endpoints to include in the detector version.</p>
                */
            externalModelEndpoints: string[] | undefined;
            /**
                * <p>The rules to include in the detector version.</p>
                */
            rules: Rule[] | undefined;
            /**
                * <p>The detector version description. </p>
                */
            description?: string;
            /**
                * <p>The model versions to include in the detector version.</p>
                */
            modelVersions?: ModelVersion[];
            /**
                * <p>The rule execution mode to add to the detector.</p>
                * 	        <p>If you specify <code>FIRST_MATCHED</code>, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector then provides the outcomes for that single rule.</p>
                * 	        <p>If you specifiy <code>ALL_MATCHED</code>, Amazon Fraud Detector evaluates all rules and returns the outcomes for all matched rules. You can define and edit the rule mode at the detector version level, when it is in draft status.</p>
                *          <p>The default behavior is <code>FIRST_MATCHED</code>.</p>
                */
            ruleExecutionMode?: RuleExecutionMode | string;
    }
    export namespace UpdateDetectorVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDetectorVersionRequest) => any;
    }
    export interface UpdateDetectorVersionResult {
    }
    export namespace UpdateDetectorVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDetectorVersionResult) => any;
    }
    export interface UpdateDetectorVersionMetadataRequest {
            /**
                * <p>The detector ID.</p>
                */
            detectorId: string | undefined;
            /**
                * <p>The detector version ID. </p>
                */
            detectorVersionId: string | undefined;
            /**
                * <p>The description.</p>
                */
            description: string | undefined;
    }
    export namespace UpdateDetectorVersionMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDetectorVersionMetadataRequest) => any;
    }
    export interface UpdateDetectorVersionMetadataResult {
    }
    export namespace UpdateDetectorVersionMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDetectorVersionMetadataResult) => any;
    }
    export interface UpdateDetectorVersionStatusRequest {
            /**
                * <p>The detector ID. </p>
                */
            detectorId: string | undefined;
            /**
                * <p>The detector version ID. </p>
                */
            detectorVersionId: string | undefined;
            /**
                * <p>The new status.</p>
                */
            status: DetectorVersionStatus | string | undefined;
    }
    export namespace UpdateDetectorVersionStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDetectorVersionStatusRequest) => any;
    }
    export interface UpdateDetectorVersionStatusResult {
    }
    export namespace UpdateDetectorVersionStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDetectorVersionStatusResult) => any;
    }
    export interface UpdateEventLabelRequest {
            /**
                * <p>The ID of the event associated with the label to update.</p>
                */
            eventId: string | undefined;
            /**
                * <p>The event type of the event associated with the label to update.</p>
                */
            eventTypeName: string | undefined;
            /**
                * <p>The new label to assign to the event.</p>
                */
            assignedLabel: string | undefined;
            /**
                * <p>The timestamp associated with the label. The timestamp must be specified using ISO 8601 standard in UTC. </p>
                */
            labelTimestamp: string | undefined;
    }
    export namespace UpdateEventLabelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEventLabelRequest) => any;
    }
    export interface UpdateEventLabelResult {
    }
    export namespace UpdateEventLabelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEventLabelResult) => any;
    }
    export interface UpdateModelRequest {
            /**
                * <p>The model ID.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The new model description.</p>
                */
            description?: string;
    }
    export namespace UpdateModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelRequest) => any;
    }
    export interface UpdateModelResult {
    }
    export namespace UpdateModelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelResult) => any;
    }
    export interface UpdateModelVersionRequest {
            /**
                * <p>The model ID.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The major version number.</p>
                */
            majorVersionNumber: string | undefined;
            /**
                * <p>The details of the external events data used for training the model version. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>.</p>
                */
            externalEventsDetail?: ExternalEventsDetail;
            /**
                * <p>The details of the ingested event used for training the model version. Required if your <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>.</p>
                */
            ingestedEventsDetail?: IngestedEventsDetail;
            /**
                * <p>A collection of key and value pairs.</p>
                */
            tags?: Tag[];
    }
    export namespace UpdateModelVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelVersionRequest) => any;
    }
    export interface UpdateModelVersionResult {
            /**
                * <p>The model ID.</p>
                */
            modelId?: string;
            /**
                * <p>The model type.</p>
                */
            modelType?: ModelTypeEnum | string;
            /**
                * <p>The model version number of the model version updated.</p>
                */
            modelVersionNumber?: string;
            /**
                * <p>The status of the updated model version.</p>
                */
            status?: string;
    }
    export namespace UpdateModelVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelVersionResult) => any;
    }
    export enum ModelVersionStatus {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE",
            TRAINING_CANCELLED = "TRAINING_CANCELLED"
    }
    export interface UpdateModelVersionStatusRequest {
            /**
                * <p>The model ID of the model version to update.</p>
                */
            modelId: string | undefined;
            /**
                * <p>The model type.</p>
                */
            modelType: ModelTypeEnum | string | undefined;
            /**
                * <p>The model version number.</p>
                */
            modelVersionNumber: string | undefined;
            /**
                * <p>The model version status.</p>
                */
            status: ModelVersionStatus | string | undefined;
    }
    export namespace UpdateModelVersionStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelVersionStatusRequest) => any;
    }
    export interface UpdateModelVersionStatusResult {
    }
    export namespace UpdateModelVersionStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelVersionStatusResult) => any;
    }
    export interface UpdateRuleMetadataRequest {
            /**
                * <p>The rule to update.</p>
                */
            rule: Rule | undefined;
            /**
                * <p>The rule description.</p>
                */
            description: string | undefined;
    }
    export namespace UpdateRuleMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleMetadataRequest) => any;
    }
    export interface UpdateRuleMetadataResult {
    }
    export namespace UpdateRuleMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleMetadataResult) => any;
    }
    export interface UpdateRuleVersionRequest {
            /**
                * <p>The rule to update.</p>
                */
            rule: Rule | undefined;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The rule expression.</p>
                */
            expression: string | undefined;
            /**
                * <p>The language.</p>
                */
            language: Language | string | undefined;
            /**
                * <p>The outcomes.</p>
                */
            outcomes: string[] | undefined;
            /**
                * <p>The tags to assign to the rule version.</p>
                */
            tags?: Tag[];
    }
    export namespace UpdateRuleVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleVersionRequest) => any;
    }
    export interface UpdateRuleVersionResult {
            /**
                * <p>The new rule version that was created.</p>
                */
            rule?: Rule;
    }
    export namespace UpdateRuleVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleVersionResult) => any;
    }
    export interface UpdateVariableRequest {
            /**
                * <p>The name of the variable.</p>
                */
            name: string | undefined;
            /**
                * <p>The new default value of the variable.</p>
                */
            defaultValue?: string;
            /**
                * <p>The new description.</p>
                */
            description?: string;
            /**
                * <p>The variable type. For more information see <a href="https://docs.aws.amazon.com/frauddetector/latest/ug/create-a-variable.html#variable-types">Variable types</a>.</p>
                */
            variableType?: string;
    }
    export namespace UpdateVariableRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVariableRequest) => any;
    }
    export interface UpdateVariableResult {
    }
    export namespace UpdateVariableResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVariableResult) => any;
    }
}

declare module '@aws-sdk/client-frauddetector/node_modules/@aws-sdk/client-frauddetector/dist-types/models/FraudDetectorServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from FraudDetector service.
        */
    export class FraudDetectorServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

