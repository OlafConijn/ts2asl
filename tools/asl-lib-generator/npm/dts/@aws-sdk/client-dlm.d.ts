// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-dlm' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateLifecyclePolicyCommandInput, CreateLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/CreateLifecyclePolicyCommand";
    import { DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/DeleteLifecyclePolicyCommand";
    import { GetLifecyclePoliciesCommandInput, GetLifecyclePoliciesCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/GetLifecyclePoliciesCommand";
    import { GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/GetLifecyclePolicyCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/ListTagsForResourceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/UntagResourceCommand";
    import { UpdateLifecyclePolicyCommandInput, UpdateLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/UpdateLifecyclePolicyCommand";
    import { DLMClient } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    /**
        * <fullname>Amazon Data Lifecycle Manager</fullname>
        * 		       <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create
        * 			lifecycle policies, which are used to automate operations on the specified
        * 			resources.</p>
        * 		       <p>Amazon DLM supports Amazon EBS volumes and snapshots. For information about using Amazon DLM
        * 			with Amazon EBS, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html">Automating the Amazon EBS
        * 				Snapshot Lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>
        */
    export class DLM extends DLMClient {
            /**
                * <p>Creates a policy to manage the lifecycle of the specified Amazon Web Services resources. You can
                * 			create up to 100 lifecycle policies.</p>
                */
            createLifecyclePolicy(args: CreateLifecyclePolicyCommandInput, options?: __HttpHandlerOptions): Promise<CreateLifecyclePolicyCommandOutput>;
            createLifecyclePolicy(args: CreateLifecyclePolicyCommandInput, cb: (err: any, data?: CreateLifecyclePolicyCommandOutput) => void): void;
            createLifecyclePolicy(args: CreateLifecyclePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLifecyclePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified lifecycle policy and halts the automated operations that the
                * 			policy specified.</p>
                */
            deleteLifecyclePolicy(args: DeleteLifecyclePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLifecyclePolicyCommandOutput>;
            deleteLifecyclePolicy(args: DeleteLifecyclePolicyCommandInput, cb: (err: any, data?: DeleteLifecyclePolicyCommandOutput) => void): void;
            deleteLifecyclePolicy(args: DeleteLifecyclePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLifecyclePolicyCommandOutput) => void): void;
            /**
                * <p>Gets summary information about all or the specified data lifecycle policies.</p>
                * 		       <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>
                */
            getLifecyclePolicies(args: GetLifecyclePoliciesCommandInput, options?: __HttpHandlerOptions): Promise<GetLifecyclePoliciesCommandOutput>;
            getLifecyclePolicies(args: GetLifecyclePoliciesCommandInput, cb: (err: any, data?: GetLifecyclePoliciesCommandOutput) => void): void;
            getLifecyclePolicies(args: GetLifecyclePoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLifecyclePoliciesCommandOutput) => void): void;
            /**
                * <p>Gets detailed information about the specified lifecycle policy.</p>
                */
            getLifecyclePolicy(args: GetLifecyclePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetLifecyclePolicyCommandOutput>;
            getLifecyclePolicy(args: GetLifecyclePolicyCommandInput, cb: (err: any, data?: GetLifecyclePolicyCommandOutput) => void): void;
            getLifecyclePolicy(args: GetLifecyclePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLifecyclePolicyCommandOutput) => void): void;
            /**
                * <p>Lists the tags for the specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Adds the specified tags to the specified resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the specified lifecycle policy.</p>
                */
            updateLifecyclePolicy(args: UpdateLifecyclePolicyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLifecyclePolicyCommandOutput>;
            updateLifecyclePolicy(args: UpdateLifecyclePolicyCommandInput, cb: (err: any, data?: UpdateLifecyclePolicyCommandOutput) => void): void;
            updateLifecyclePolicy(args: UpdateLifecyclePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLifecyclePolicyCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/CreateLifecyclePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { CreateLifecyclePolicyRequest, CreateLifecyclePolicyResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface CreateLifecyclePolicyCommandInput extends CreateLifecyclePolicyRequest {
    }
    export interface CreateLifecyclePolicyCommandOutput extends CreateLifecyclePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a policy to manage the lifecycle of the specified Amazon Web Services resources. You can
        * 			create up to 100 lifecycle policies.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, CreateLifecyclePolicyCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, CreateLifecyclePolicyCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new CreateLifecyclePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLifecyclePolicyCommandInput} for command's `input` shape.
        * @see {@link CreateLifecyclePolicyCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class CreateLifecyclePolicyCommand extends $Command<CreateLifecyclePolicyCommandInput, CreateLifecyclePolicyCommandOutput, DLMClientResolvedConfig> {
            readonly input: CreateLifecyclePolicyCommandInput;
            constructor(input: CreateLifecyclePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLifecyclePolicyCommandInput, CreateLifecyclePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/DeleteLifecyclePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { DeleteLifecyclePolicyRequest, DeleteLifecyclePolicyResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface DeleteLifecyclePolicyCommandInput extends DeleteLifecyclePolicyRequest {
    }
    export interface DeleteLifecyclePolicyCommandOutput extends DeleteLifecyclePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified lifecycle policy and halts the automated operations that the
        * 			policy specified.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, DeleteLifecyclePolicyCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, DeleteLifecyclePolicyCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new DeleteLifecyclePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLifecyclePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteLifecyclePolicyCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class DeleteLifecyclePolicyCommand extends $Command<DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput, DLMClientResolvedConfig> {
            readonly input: DeleteLifecyclePolicyCommandInput;
            constructor(input: DeleteLifecyclePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/GetLifecyclePoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { GetLifecyclePoliciesRequest, GetLifecyclePoliciesResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface GetLifecyclePoliciesCommandInput extends GetLifecyclePoliciesRequest {
    }
    export interface GetLifecyclePoliciesCommandOutput extends GetLifecyclePoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets summary information about all or the specified data lifecycle policies.</p>
        * 		       <p>To get complete information about a policy, use <a>GetLifecyclePolicy</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, GetLifecyclePoliciesCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, GetLifecyclePoliciesCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new GetLifecyclePoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLifecyclePoliciesCommandInput} for command's `input` shape.
        * @see {@link GetLifecyclePoliciesCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class GetLifecyclePoliciesCommand extends $Command<GetLifecyclePoliciesCommandInput, GetLifecyclePoliciesCommandOutput, DLMClientResolvedConfig> {
            readonly input: GetLifecyclePoliciesCommandInput;
            constructor(input: GetLifecyclePoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLifecyclePoliciesCommandInput, GetLifecyclePoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/GetLifecyclePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { GetLifecyclePolicyRequest, GetLifecyclePolicyResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface GetLifecyclePolicyCommandInput extends GetLifecyclePolicyRequest {
    }
    export interface GetLifecyclePolicyCommandOutput extends GetLifecyclePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Gets detailed information about the specified lifecycle policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, GetLifecyclePolicyCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, GetLifecyclePolicyCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new GetLifecyclePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLifecyclePolicyCommandInput} for command's `input` shape.
        * @see {@link GetLifecyclePolicyCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class GetLifecyclePolicyCommand extends $Command<GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput, DLMClientResolvedConfig> {
            readonly input: GetLifecyclePolicyCommandInput;
            constructor(input: GetLifecyclePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, ListTagsForResourceCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, ListTagsForResourceCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, DLMClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds the specified tags to the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, TagResourceCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, TagResourceCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, DLMClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, UntagResourceCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, UntagResourceCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, DLMClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/UpdateLifecyclePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DLMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient";
    import { UpdateLifecyclePolicyRequest, UpdateLifecyclePolicyResponse } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0";
    export interface UpdateLifecyclePolicyCommandInput extends UpdateLifecyclePolicyRequest {
    }
    export interface UpdateLifecyclePolicyCommandOutput extends UpdateLifecyclePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified lifecycle policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DLMClient, UpdateLifecyclePolicyCommand } from "@aws-sdk/client-dlm"; // ES Modules import
        * // const { DLMClient, UpdateLifecyclePolicyCommand } = require("@aws-sdk/client-dlm"); // CommonJS import
        * const client = new DLMClient(config);
        * const command = new UpdateLifecyclePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLifecyclePolicyCommandInput} for command's `input` shape.
        * @see {@link UpdateLifecyclePolicyCommandOutput} for command's `response` shape.
        * @see {@link DLMClientResolvedConfig | config} for DLMClient's `config` shape.
        *
        */
    export class UpdateLifecyclePolicyCommand extends $Command<UpdateLifecyclePolicyCommandInput, UpdateLifecyclePolicyCommandOutput, DLMClientResolvedConfig> {
            readonly input: UpdateLifecyclePolicyCommandInput;
            constructor(input: UpdateLifecyclePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DLMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLifecyclePolicyCommandInput, UpdateLifecyclePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/DLMClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateLifecyclePolicyCommandInput, CreateLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/CreateLifecyclePolicyCommand";
    import { DeleteLifecyclePolicyCommandInput, DeleteLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/DeleteLifecyclePolicyCommand";
    import { GetLifecyclePoliciesCommandInput, GetLifecyclePoliciesCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/GetLifecyclePoliciesCommand";
    import { GetLifecyclePolicyCommandInput, GetLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/GetLifecyclePolicyCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/ListTagsForResourceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/UntagResourceCommand";
    import { UpdateLifecyclePolicyCommandInput, UpdateLifecyclePolicyCommandOutput } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/commands/UpdateLifecyclePolicyCommand";
    export type ServiceInputTypes = CreateLifecyclePolicyCommandInput | DeleteLifecyclePolicyCommandInput | GetLifecyclePoliciesCommandInput | GetLifecyclePolicyCommandInput | ListTagsForResourceCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateLifecyclePolicyCommandInput;
    export type ServiceOutputTypes = CreateLifecyclePolicyCommandOutput | DeleteLifecyclePolicyCommandOutput | GetLifecyclePoliciesCommandOutput | GetLifecyclePolicyCommandOutput | ListTagsForResourceCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateLifecyclePolicyCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type DLMClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of DLMClient class constructor that set the region, credentials and other options.
        */
    export interface DLMClientConfig extends DLMClientConfigType {
    }
    type DLMClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of DLMClient class. This is resolved and normalized from the {@link DLMClientConfig | constructor configuration interface}.
        */
    export interface DLMClientResolvedConfig extends DLMClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Data Lifecycle Manager</fullname>
        * 		       <p>With Amazon Data Lifecycle Manager, you can manage the lifecycle of your Amazon Web Services resources. You create
        * 			lifecycle policies, which are used to automate operations on the specified
        * 			resources.</p>
        * 		       <p>Amazon DLM supports Amazon EBS volumes and snapshots. For information about using Amazon DLM
        * 			with Amazon EBS, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/snapshot-lifecycle.html">Automating the Amazon EBS
        * 				Snapshot Lifecycle</a> in the <i>Amazon EC2 User Guide</i>.</p>
        */
    export class DLMClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, DLMClientResolvedConfig> {
            /**
                * The resolved configuration of DLMClient class. This is resolved and normalized from the {@link DLMClientConfig | constructor configuration interface}.
                */
            readonly config: DLMClientResolvedConfig;
            constructor(configuration: DLMClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { DLMServiceException as __BaseException } from "@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/DLMServiceException";
    /**
        * <p>Specifies the encryption settings for shared snapshots that are copied across Regions.</p>
        */
    export interface EncryptionConfiguration {
            /**
                * <p>To encrypt a copy of an unencrypted snapshot when encryption by default is not enabled, enable
                * 			encryption using this parameter. Copies of encrypted snapshots are encrypted, even if this
                * 			parameter is false or when encryption by default is not enabled.</p>
                */
            Encrypted: boolean | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the KMS key to use for EBS encryption. If
                * 			this parameter is not specified, the default KMS key for the account is used.</p>
                */
            CmkArn?: string;
    }
    export namespace EncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionConfiguration) => any;
    }
    export enum RetentionIntervalUnitValues {
            DAYS = "DAYS",
            MONTHS = "MONTHS",
            WEEKS = "WEEKS",
            YEARS = "YEARS"
    }
    /**
        * <p>Specifies the retention rule for cross-Region snapshot copies.</p>
        */
    export interface CrossRegionCopyRetainRule {
            /**
                * <p>The amount of time to retain each snapshot. The maximum is 100 years. This is
                * 			equivalent to 1200 months, 5200 weeks, or 36500 days.</p>
                */
            Interval?: number;
            /**
                * <p>The unit of time for time-based retention.</p>
                */
            IntervalUnit?: RetentionIntervalUnitValues | string;
    }
    export namespace CrossRegionCopyRetainRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrossRegionCopyRetainRule) => any;
    }
    /**
        * <p>Specifies a rule for copying shared snapshots across Regions.</p>
        */
    export interface CrossRegionCopyAction {
            /**
                * <p>The target Region.</p>
                */
            Target: string | undefined;
            /**
                * <p>The encryption settings for the copied snapshot.</p>
                */
            EncryptionConfiguration: EncryptionConfiguration | undefined;
            /**
                * <p>Specifies the retention rule for cross-Region snapshot copies.</p>
                */
            RetainRule?: CrossRegionCopyRetainRule;
    }
    export namespace CrossRegionCopyAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrossRegionCopyAction) => any;
    }
    /**
        * <p>Specifies an action for an event-based policy.</p>
        */
    export interface Action {
            /**
                * <p>A descriptive name for the action.</p>
                */
            Name: string | undefined;
            /**
                * <p>The rule for copying shared snapshots across Regions.</p>
                */
            CrossRegionCopy: CrossRegionCopyAction[] | undefined;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    export enum EventTypeValues {
            SHARE_SNAPSHOT = "shareSnapshot"
    }
    /**
        * <p>Specifies an event that triggers an event-based policy.</p>
        */
    export interface EventParameters {
            /**
                * <p>The type of event. Currently, only snapshot sharing events are supported.</p>
                */
            EventType: EventTypeValues | string | undefined;
            /**
                * <p>The IDs of the Amazon Web Services accounts that can trigger policy by sharing snapshots with your account.
                * 			The policy only runs if one of the specified Amazon Web Services accounts shares a snapshot with your account.</p>
                */
            SnapshotOwner: string[] | undefined;
            /**
                * <p>The snapshot description that can trigger the policy. The description pattern is specified using
                * 			a regular expression. The policy runs only if a snapshot with a description that matches the
                * 			specified pattern is shared with your account.</p>
                * 		       <p>For example, specifying <code>^.*Created for policy: policy-1234567890abcdef0.*$</code>
                * 			configures the policy to run only if snapshots created by policy <code>policy-1234567890abcdef0</code>
                * 			are shared with your account.</p>
                */
            DescriptionRegex: string | undefined;
    }
    export namespace EventParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventParameters) => any;
    }
    export enum EventSourceValues {
            MANAGED_CWE = "MANAGED_CWE"
    }
    /**
        * <p>Specifies an event that triggers an event-based policy.</p>
        */
    export interface EventSource {
            /**
                * <p>The source of the event. Currently only managed CloudWatch Events rules are supported.</p>
                */
            Type: EventSourceValues | string | undefined;
            /**
                * <p>Information about the event.</p>
                */
            Parameters?: EventParameters;
    }
    export namespace EventSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSource) => any;
    }
    /**
        * <p>Specifies optional parameters to add to a policy. The set of valid parameters depends
        * 			on the combination of policy type and resource type.</p>
        */
    export interface _Parameters {
            /**
                * <p>[EBS Snapshot Management – Instance policies only] Indicates whether to exclude the
                * 			root volume from snapshots created using <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSnapshots.html">CreateSnapshots</a>.
                * 			The default is false.</p>
                */
            ExcludeBootVolume?: boolean;
            /**
                * <p>Applies to AMI lifecycle policies only. Indicates whether targeted instances are rebooted when the lifecycle
                * 			policy runs. <code>true</code> indicates that targeted instances are not rebooted when the policy
                * 			runs. <code>false</code> indicates that target instances are rebooted when the policy runs. The
                * 			default is <code>true</code> (instances are not rebooted).</p>
                */
            NoReboot?: boolean;
    }
    export namespace _Parameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: _Parameters) => any;
    }
    export enum PolicyTypeValues {
            EBS_SNAPSHOT_MANAGEMENT = "EBS_SNAPSHOT_MANAGEMENT",
            EVENT_BASED_POLICY = "EVENT_BASED_POLICY",
            IMAGE_MANAGEMENT = "IMAGE_MANAGEMENT"
    }
    export enum ResourceLocationValues {
            CLOUD = "CLOUD",
            OUTPOST = "OUTPOST"
    }
    export enum ResourceTypeValues {
            INSTANCE = "INSTANCE",
            VOLUME = "VOLUME"
    }
    export enum IntervalUnitValues {
            HOURS = "HOURS"
    }
    export enum LocationValues {
            CLOUD = "CLOUD",
            OUTPOST_LOCAL = "OUTPOST_LOCAL"
    }
    /**
        * <p>Specifies when to create snapshots of EBS volumes.</p>
        * 		       <p>You must specify either a Cron expression or an interval, interval unit, and start
        * 			time. You cannot specify both.</p>
        */
    export interface CreateRule {
            /**
                * <p>Specifies the destination for snapshots created by the policy. To create snapshots in the same
                * 			Region as the source resource, specify <code>CLOUD</code>. To create snapshots on the same
                * 			Outpost as the source resource, specify <code>OUTPOST_LOCAL</code>. If you omit this
                * 			parameter, <code>CLOUD</code> is used by default.</p>
                * 		       <p>If the policy targets resources in an Amazon Web Services Region, then you must create snapshots in the same
                * 			Region as the source resource.</p>
                * 		       <p>If the policy targets resources on an Outpost, then you can create snapshots on the same Outpost
                * 			as the source resource, or in the Region of that Outpost.</p>
                */
            Location?: LocationValues | string;
            /**
                * <p>The interval between snapshots. The supported values are 1, 2, 3, 4, 6, 8, 12, and
                * 			24.</p>
                */
            Interval?: number;
            /**
                * <p>The interval unit.</p>
                */
            IntervalUnit?: IntervalUnitValues | string;
            /**
                * <p>The time, in UTC, to start the operation. The supported format is hh:mm.</p>
                * 		       <p>The operation occurs within a one-hour window following the specified time. If you do
                * 			not specify a time, Amazon DLM selects a time within the next 24 hours.</p>
                */
            Times?: string[];
            /**
                * <p>The schedule, as a Cron expression. The schedule interval must be between 1 hour and 1
                * 			year. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions">Cron
                * 				expressions</a> in the <i>Amazon CloudWatch User Guide</i>.</p>
                */
            CronExpression?: string;
    }
    export namespace CreateRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRule) => any;
    }
    /**
        * <p>Specifies an AMI deprecation rule for cross-Region AMI copies created by a cross-Region copy rule.</p>
        */
    export interface CrossRegionCopyDeprecateRule {
            /**
                * <p>The period after which to deprecate the cross-Region AMI copies. The period must be less than or
                * 			equal to the cross-Region AMI copy retention period, and it can't be greater than 10 years. This is
                * 			equivalent to 120 months, 520 weeks, or 3650 days.</p>
                */
            Interval?: number;
            /**
                * <p>The unit of time in which to measure the <b>Interval</b>.</p>
                */
            IntervalUnit?: RetentionIntervalUnitValues | string;
    }
    export namespace CrossRegionCopyDeprecateRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrossRegionCopyDeprecateRule) => any;
    }
    /**
        * <p>Specifies a rule for cross-Region snapshot copies.</p>
        */
    export interface CrossRegionCopyRule {
            /**
                * <p>Avoid using this parameter when creating new policies. Instead, use <b>Target</b>
                * 			to specify a target Region or a target Outpost for snapshot copies.</p>
                * 		       <p>For policies created before the <b>Target</b> parameter
                * 			was introduced, this parameter indicates the target Region for snapshot copies.</p>
                */
            TargetRegion?: string;
            /**
                * <p>The target Region or the Amazon Resource Name (ARN) of the target Outpost for the
                * 			snapshot copies.</p>
                * 		       <p>Use this parameter instead of <b>TargetRegion</b>. Do not
                * 			specify both.</p>
                */
            Target?: string;
            /**
                * <p>To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled,
                * 			enable encryption using this parameter. Copies of encrypted snapshots are encrypted,
                * 			even if this parameter is false or if encryption by default is not enabled.</p>
                */
            Encrypted: boolean | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the KMS key to use for EBS encryption. If this
                * 			parameter is not specified, the default KMS key for the account is used.</p>
                */
            CmkArn?: string;
            /**
                * <p>Indicates whether to copy all user-defined tags from the source snapshot to the cross-Region
                * 			snapshot copy.</p>
                */
            CopyTags?: boolean;
            /**
                * <p>The retention rule that indicates how long snapshot copies are to be retained in the
                * 			destination Region.</p>
                */
            RetainRule?: CrossRegionCopyRetainRule;
            /**
                * <p>The AMI deprecation rule for cross-Region AMI copies created by the rule.</p>
                */
            DeprecateRule?: CrossRegionCopyDeprecateRule;
    }
    export namespace CrossRegionCopyRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrossRegionCopyRule) => any;
    }
    /**
        * <p>Specifies an AMI deprecation rule for a schedule.</p>
        */
    export interface DeprecateRule {
            /**
                * <p>If the schedule has a count-based retention rule, this parameter specifies the number of oldest
                * 			AMIs to deprecate. The count must be less than or equal to the schedule's retention count, and it
                * 			can't be greater than 1000.</p>
                */
            Count?: number;
            /**
                * <p>If the schedule has an age-based retention rule, this parameter specifies the period after which
                * 			to deprecate AMIs created by the schedule. The period must be less than or equal to the schedule's
                * 			retention period, and it can't be greater than 10 years. This is equivalent to 120 months, 520
                * 			weeks, or 3650 days.</p>
                */
            Interval?: number;
            /**
                * <p>The unit of time in which to measure the <b>Interval</b>.</p>
                */
            IntervalUnit?: RetentionIntervalUnitValues | string;
    }
    export namespace DeprecateRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeprecateRule) => any;
    }
    /**
        * <p>Specifies a rule for enabling fast snapshot restore. You can enable fast snapshot
        * 			restore based on either a count or a time interval.</p>
        */
    export interface FastRestoreRule {
            /**
                * <p>The number of snapshots to be enabled with fast snapshot restore.</p>
                */
            Count?: number;
            /**
                * <p>The amount of time to enable fast snapshot restore. The maximum is 100 years. This is
                * 			equivalent to 1200 months, 5200 weeks, or 36500 days.</p>
                */
            Interval?: number;
            /**
                * <p>The unit of time for enabling fast snapshot restore.</p>
                */
            IntervalUnit?: RetentionIntervalUnitValues | string;
            /**
                * <p>The Availability Zones in which to enable fast snapshot restore.</p>
                */
            AvailabilityZones: string[] | undefined;
    }
    export namespace FastRestoreRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FastRestoreRule) => any;
    }
    /**
        * <p>Specifies the retention rule for a lifecycle policy. You can retain snapshots based on
        * 			either a count or a time interval.</p>
        */
    export interface RetainRule {
            /**
                * <p>The number of snapshots to retain for each volume, up to a maximum of 1000.</p>
                */
            Count?: number;
            /**
                * <p>The amount of time to retain each snapshot. The maximum is 100 years. This is
                * 			equivalent to 1200 months, 5200 weeks, or 36500 days.</p>
                */
            Interval?: number;
            /**
                * <p>The unit of time for time-based retention.</p>
                */
            IntervalUnit?: RetentionIntervalUnitValues | string;
    }
    export namespace RetainRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RetainRule) => any;
    }
    /**
        * <p>Specifies a rule for sharing snapshots across Amazon Web Services accounts.</p>
        */
    export interface ShareRule {
            /**
                * <p>The IDs of the Amazon Web Services accounts with which to share the snapshots.</p>
                */
            TargetAccounts: string[] | undefined;
            /**
                * <p>The period after which snapshots that are shared with other Amazon Web Services accounts are automatically unshared.</p>
                */
            UnshareInterval?: number;
            /**
                * <p>The unit of time for the automatic unsharing interval.</p>
                */
            UnshareIntervalUnit?: RetentionIntervalUnitValues | string;
    }
    export namespace ShareRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ShareRule) => any;
    }
    /**
        * <p>Specifies a tag for a resource.</p>
        */
    export interface Tag {
            /**
                * <p>The tag key.</p>
                */
            Key: string | undefined;
            /**
                * <p>The tag value.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Specifies a backup schedule for a snapshot or AMI lifecycle policy.</p>
        */
    export interface Schedule {
            /**
                * <p>The name of the schedule.</p>
                */
            Name?: string;
            /**
                * <p>Copy all user-defined tags on a source volume to snapshots of the volume created by
                * 			this policy.</p>
                */
            CopyTags?: boolean;
            /**
                * <p>The tags to apply to policy-created resources. These user-defined tags are in addition
                * 			to the Amazon Web Services-added lifecycle tags.</p>
                */
            TagsToAdd?: Tag[];
            /**
                * <p>A collection of key/value pairs with values determined dynamically when the policy is
                * 			executed. Keys may be any valid Amazon EC2 tag key. Values must be in one of the two
                * 			following formats: <code>$(instance-id)</code> or <code>$(timestamp)</code>. Variable
                * 			tags are only valid for EBS Snapshot Management – Instance policies.</p>
                */
            VariableTags?: Tag[];
            /**
                * <p>The creation rule.</p>
                */
            CreateRule?: CreateRule;
            /**
                * <p>The retention rule.</p>
                */
            RetainRule?: RetainRule;
            /**
                * <p>The rule for enabling fast snapshot restore.</p>
                */
            FastRestoreRule?: FastRestoreRule;
            /**
                * <p>The rule for cross-Region snapshot copies.</p>
                * 		       <p>You can only specify cross-Region copy rules for policies that create snapshots in a Region.
                * 			If the policy creates snapshots on an Outpost, then you cannot copy the snapshots to a Region or
                * 			to an Outpost. If the policy creates snapshots in a Region, then snapshots can be copied to up to three
                * 			Regions or Outposts.</p>
                */
            CrossRegionCopyRules?: CrossRegionCopyRule[];
            /**
                * <p>The rule for sharing snapshots with other Amazon Web Services accounts.</p>
                */
            ShareRules?: ShareRule[];
            /**
                * <p>The AMI deprecation rule for the schedule.</p>
                */
            DeprecateRule?: DeprecateRule;
    }
    export namespace Schedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Schedule) => any;
    }
    /**
        * <p>Specifies the configuration of a lifecycle policy.</p>
        */
    export interface PolicyDetails {
            /**
                * <p>The valid target resource types and actions a policy can manage. Specify <code>EBS_SNAPSHOT_MANAGEMENT</code>
                * 			to create a lifecycle policy that manages the lifecycle of Amazon EBS snapshots. Specify <code>IMAGE_MANAGEMENT</code>
                * 			to create a lifecycle policy that manages the lifecycle of EBS-backed AMIs. Specify <code>EVENT_BASED_POLICY </code>
                * 			to create an event-based policy that performs specific actions when a defined event occurs in your Amazon Web Services account.</p>
                * 		       <p>The default is <code>EBS_SNAPSHOT_MANAGEMENT</code>.</p>
                */
            PolicyType?: PolicyTypeValues | string;
            /**
                * <p>The target resource type for snapshot and AMI lifecycle policies. Use <code>VOLUME </code>to
                * 			create snapshots of individual volumes or use <code>INSTANCE</code> to create multi-volume
                * 			snapshots from the volumes for an instance.</p>
                * 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
                */
            ResourceTypes?: (ResourceTypeValues | string)[];
            /**
                * <p>The location of the resources to backup. If the source resources are located in an Amazon Web Services Region,
                * 			specify <code>CLOUD</code>. If the source resources are located on an Outpost
                * 			in your account, specify <code>OUTPOST</code>. </p>
                * 			      <p>If you specify <code>OUTPOST</code>, Amazon Data Lifecycle Manager backs up all resources
                * 				of the specified type with matching target tags across all of the Outposts in your account.</p>
                */
            ResourceLocations?: (ResourceLocationValues | string)[];
            /**
                * <p>The single tag that identifies targeted resources for this policy.</p>
                * 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
                */
            TargetTags?: Tag[];
            /**
                * <p>The schedules of policy-defined actions for snapshot and AMI lifecycle policies. A policy
                * 			can have up to four schedules—one mandatory schedule and up to three optional schedules.</p>
                * 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
                */
            Schedules?: Schedule[];
            /**
                * <p>A set of optional parameters for snapshot and AMI lifecycle policies. </p>
                * 		       <p>This parameter is required for snapshot and AMI policies only. If you are creating an event-based policy, omit this parameter.</p>
                */
            Parameters?: _Parameters;
            /**
                * <p>The event that triggers the event-based policy. </p>
                * 		       <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>
                */
            EventSource?: EventSource;
            /**
                * <p>The actions to be performed when the event-based policy is triggered. You can specify
                * 		only one action per policy.</p>
                * 		       <p>This parameter is required for event-based policies only. If you are creating a snapshot or AMI policy, omit this parameter.</p>
                */
            Actions?: Action[];
    }
    export namespace PolicyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyDetails) => any;
    }
    export enum SettablePolicyStateValues {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    export interface CreateLifecyclePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by
                * 			the lifecycle policy.</p>
                */
            ExecutionRoleArn: string | undefined;
            /**
                * <p>A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are
                * 			supported.</p>
                */
            Description: string | undefined;
            /**
                * <p>The desired activation state of the lifecycle policy after creation.</p>
                */
            State: SettablePolicyStateValues | string | undefined;
            /**
                * <p>The configuration details of the lifecycle policy.</p>
                */
            PolicyDetails: PolicyDetails | undefined;
            /**
                * <p>The tags to apply to the lifecycle policy during creation.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateLifecyclePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLifecyclePolicyRequest) => any;
    }
    export interface CreateLifecyclePolicyResponse {
            /**
                * <p>The identifier of the lifecycle policy.</p>
                */
            PolicyId?: string;
    }
    export namespace CreateLifecyclePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLifecyclePolicyResponse) => any;
    }
    /**
        * <p>The service failed in an unexpected way.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>Bad request. The request is missing required parameters or has invalid
        * 			parameters.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * <p>The request omitted one or more required parameters.</p>
                */
            RequiredParameters?: string[];
            /**
                * <p>The request included parameters that cannot be provided together.</p>
                */
            MutuallyExclusiveParameters?: string[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>The request failed because a limit was exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * <p>Value is the type of resource for which a limit was exceeded.</p>
                */
            ResourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface DeleteLifecyclePolicyRequest {
            /**
                * <p>The identifier of the lifecycle policy.</p>
                */
            PolicyId: string | undefined;
    }
    export namespace DeleteLifecyclePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLifecyclePolicyRequest) => any;
    }
    export interface DeleteLifecyclePolicyResponse {
    }
    export namespace DeleteLifecyclePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLifecyclePolicyResponse) => any;
    }
    /**
        * <p>A requested resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * <p>Value is the type of resource that was not found.</p>
                */
            ResourceType?: string;
            /**
                * <p>Value is a list of resource IDs that were not found.</p>
                */
            ResourceIds?: string[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum GettablePolicyStateValues {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED",
            ERROR = "ERROR"
    }
    export interface GetLifecyclePoliciesRequest {
            /**
                * <p>The identifiers of the data lifecycle policies.</p>
                */
            PolicyIds?: string[];
            /**
                * <p>The activation state.</p>
                */
            State?: GettablePolicyStateValues | string;
            /**
                * <p>The resource type.</p>
                */
            ResourceTypes?: (ResourceTypeValues | string)[];
            /**
                * <p>The target tag for a policy.</p>
                * 		       <p>Tags are strings in the format <code>key=value</code>.</p>
                */
            TargetTags?: string[];
            /**
                * <p>The tags to add to objects created by the policy.</p>
                * 		       <p>Tags are strings in the format <code>key=value</code>.</p>
                * 		       <p>These user-defined tags are added in addition to the Amazon Web Services-added lifecycle tags.</p>
                */
            TagsToAdd?: string[];
    }
    export namespace GetLifecyclePoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLifecyclePoliciesRequest) => any;
    }
    /**
        * <p>Summary information about a lifecycle policy.</p>
        */
    export interface LifecyclePolicySummary {
            /**
                * <p>The identifier of the lifecycle policy.</p>
                */
            PolicyId?: string;
            /**
                * <p>The description of the lifecycle policy.</p>
                */
            Description?: string;
            /**
                * <p>The activation state of the lifecycle policy.</p>
                */
            State?: GettablePolicyStateValues | string;
            /**
                * <p>The tags.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The type of policy. <code>EBS_SNAPSHOT_MANAGEMENT</code> indicates that the policy
                * 			manages the lifecycle of Amazon EBS snapshots. <code>IMAGE_MANAGEMENT</code>
                * 			indicates that the policy manages the lifecycle of EBS-backed AMIs.</p>
                */
            PolicyType?: PolicyTypeValues | string;
    }
    export namespace LifecyclePolicySummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifecyclePolicySummary) => any;
    }
    export interface GetLifecyclePoliciesResponse {
            /**
                * <p>Summary information about the lifecycle policies.</p>
                */
            Policies?: LifecyclePolicySummary[];
    }
    export namespace GetLifecyclePoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLifecyclePoliciesResponse) => any;
    }
    export interface GetLifecyclePolicyRequest {
            /**
                * <p>The identifier of the lifecycle policy.</p>
                */
            PolicyId: string | undefined;
    }
    export namespace GetLifecyclePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLifecyclePolicyRequest) => any;
    }
    /**
        * <p>Detailed information about a lifecycle policy.</p>
        */
    export interface LifecyclePolicy {
            /**
                * <p>The identifier of the lifecycle policy.</p>
                */
            PolicyId?: string;
            /**
                * <p>The description of the lifecycle policy.</p>
                */
            Description?: string;
            /**
                * <p>The activation state of the lifecycle policy.</p>
                */
            State?: GettablePolicyStateValues | string;
            /**
                * <p>The description of the status.</p>
                */
            StatusMessage?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by
                * 			the lifecycle policy.</p>
                */
            ExecutionRoleArn?: string;
            /**
                * <p>The local date and time when the lifecycle policy was created.</p>
                */
            DateCreated?: Date;
            /**
                * <p>The local date and time when the lifecycle policy was last modified.</p>
                */
            DateModified?: Date;
            /**
                * <p>The configuration of the lifecycle policy</p>
                */
            PolicyDetails?: PolicyDetails;
            /**
                * <p>The tags.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The Amazon Resource Name (ARN) of the policy.</p>
                */
            PolicyArn?: string;
    }
    export namespace LifecyclePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LifecyclePolicy) => any;
    }
    export interface GetLifecyclePolicyResponse {
            /**
                * <p>Detailed information about the lifecycle policy.</p>
                */
            Policy?: LifecyclePolicy;
    }
    export namespace GetLifecyclePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLifecyclePolicyResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>Information about the tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>One or more tags.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag keys.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateLifecyclePolicyRequest {
            /**
                * <p>The identifier of the lifecycle policy.</p>
                */
            PolicyId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by
                * 			the lifecycle policy.</p>
                */
            ExecutionRoleArn?: string;
            /**
                * <p>The desired activation state of the lifecycle policy after creation.</p>
                */
            State?: SettablePolicyStateValues | string;
            /**
                * <p>A description of the lifecycle policy.</p>
                */
            Description?: string;
            /**
                * <p>The configuration of the lifecycle policy. You cannot update the policy type or the
                * 			resource type.</p>
                */
            PolicyDetails?: PolicyDetails;
    }
    export namespace UpdateLifecyclePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLifecyclePolicyRequest) => any;
    }
    export interface UpdateLifecyclePolicyResponse {
    }
    export namespace UpdateLifecyclePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLifecyclePolicyResponse) => any;
    }
}

declare module '@aws-sdk/client-dlm/node_modules/@aws-sdk/client-dlm/dist-types/models/DLMServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from DLM service.
        */
    export class DLMServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

