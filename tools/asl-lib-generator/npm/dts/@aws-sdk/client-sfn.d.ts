// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-sfn' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateActivityCommandInput, CreateActivityCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/CreateActivityCommand";
    import { CreateStateMachineCommandInput, CreateStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/CreateStateMachineCommand";
    import { DeleteActivityCommandInput, DeleteActivityCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DeleteActivityCommand";
    import { DeleteStateMachineCommandInput, DeleteStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DeleteStateMachineCommand";
    import { DescribeActivityCommandInput, DescribeActivityCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeActivityCommand";
    import { DescribeExecutionCommandInput, DescribeExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeExecutionCommand";
    import { DescribeStateMachineCommandInput, DescribeStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeStateMachineCommand";
    import { DescribeStateMachineForExecutionCommandInput, DescribeStateMachineForExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeStateMachineForExecutionCommand";
    import { GetActivityTaskCommandInput, GetActivityTaskCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/GetActivityTaskCommand";
    import { GetExecutionHistoryCommandInput, GetExecutionHistoryCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/GetExecutionHistoryCommand";
    import { ListActivitiesCommandInput, ListActivitiesCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListActivitiesCommand";
    import { ListExecutionsCommandInput, ListExecutionsCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListExecutionsCommand";
    import { ListStateMachinesCommandInput, ListStateMachinesCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListStateMachinesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListTagsForResourceCommand";
    import { SendTaskFailureCommandInput, SendTaskFailureCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskFailureCommand";
    import { SendTaskHeartbeatCommandInput, SendTaskHeartbeatCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskHeartbeatCommand";
    import { SendTaskSuccessCommandInput, SendTaskSuccessCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskSuccessCommand";
    import { StartExecutionCommandInput, StartExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StartExecutionCommand";
    import { StartSyncExecutionCommandInput, StartSyncExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StartSyncExecutionCommand";
    import { StopExecutionCommandInput, StopExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StopExecutionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/UntagResourceCommand";
    import { UpdateStateMachineCommandInput, UpdateStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/UpdateStateMachineCommand";
    import { SFNClient } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    /**
        * <fullname>AWS Step Functions</fullname>
        *          <p>AWS Step Functions is a service that lets you coordinate the components of distributed applications
        *       and microservices using visual workflows.</p>
        *          <p>You can use Step Functions to build applications from individual components, each of which performs
        *       a discrete function, or <i>task</i>, allowing you to scale and change
        *       applications quickly. Step Functions provides a console that helps visualize the components of your
        *       application as a series of steps. Step Functions automatically triggers and tracks each step, and
        *       retries steps when there are errors, so your application executes predictably and in the right
        *       order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any
        *       issues.</p>
        *          <p>Step Functions manages operations and underlying infrastructure to ensure your application is
        *       available at any scale. You can run tasks on AWS, your own servers, or any system that has
        *       access to AWS. You can access and use Step Functions using the console, the AWS SDKs, or an HTTP API.
        *       For more information about Step Functions, see the <i>
        *                <a href="https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html">AWS Step Functions Developer Guide</a>
        *             </i>.</p>
        */
    export class SFN extends SFNClient {
            /**
                * <p>Creates an activity. An activity is a task that you write in any programming language and
                *       host on any machine that has access to AWS Step Functions. Activities must poll Step Functions using the
                *         <code>GetActivityTask</code> API action and respond using <code>SendTask*</code> API
                *       actions. This function lets Step Functions know the existence of your activity and returns an
                *       identifier for use in a state machine and when polling from the activity.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                *          <note>
                *             <p>
                *                <code>CreateActivity</code> is an idempotent API. Subsequent requests won’t create a
                *         duplicate resource if it was already created. <code>CreateActivity</code>'s idempotency
                *         check is based on the activity <code>name</code>. If a following request has different
                *           <code>tags</code> values, Step Functions will ignore these differences and treat it as an
                *         idempotent request of the previous. In this case, <code>tags</code> will not be updated,
                *         even if they are different.</p>
                *          </note>
                */
            createActivity(args: CreateActivityCommandInput, options?: __HttpHandlerOptions): Promise<CreateActivityCommandOutput>;
            createActivity(args: CreateActivityCommandInput, cb: (err: any, data?: CreateActivityCommandOutput) => void): void;
            createActivity(args: CreateActivityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateActivityCommandOutput) => void): void;
            /**
                * <p>Creates a state machine. A state machine consists of a collection of states that can do
                *       work (<code>Task</code> states), determine to which states to transition next
                *         (<code>Choice</code> states), stop an execution with an error (<code>Fail</code> states),
                *       and so on. State machines are specified using a JSON-based, structured language. For more
                *       information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States
                *         Language</a> in the AWS Step Functions User Guide.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                *          <note>
                *             <p>
                *                <code>CreateStateMachine</code> is an idempotent API. Subsequent requests won’t create a
                *         duplicate resource if it was already created. <code>CreateStateMachine</code>'s idempotency
                *         check is based on the state machine <code>name</code>, <code>definition</code>,
                *           <code>type</code>, <code>LoggingConfiguration</code> and <code>TracingConfiguration</code>. If a following request has a
                *         different <code>roleArn</code> or <code>tags</code>, Step Functions will ignore these differences and
                *         treat it as an idempotent request of the previous. In this case, <code>roleArn</code> and
                *           <code>tags</code> will not be updated, even if they are different.</p>
                *          </note>
                */
            createStateMachine(args: CreateStateMachineCommandInput, options?: __HttpHandlerOptions): Promise<CreateStateMachineCommandOutput>;
            createStateMachine(args: CreateStateMachineCommandInput, cb: (err: any, data?: CreateStateMachineCommandOutput) => void): void;
            createStateMachine(args: CreateStateMachineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStateMachineCommandOutput) => void): void;
            /**
                * <p>Deletes an activity.</p>
                */
            deleteActivity(args: DeleteActivityCommandInput, options?: __HttpHandlerOptions): Promise<DeleteActivityCommandOutput>;
            deleteActivity(args: DeleteActivityCommandInput, cb: (err: any, data?: DeleteActivityCommandOutput) => void): void;
            deleteActivity(args: DeleteActivityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteActivityCommandOutput) => void): void;
            /**
                * <p>Deletes a state machine. This is an asynchronous operation: It sets the state machine's
                *       status to <code>DELETING</code> and begins the deletion process. </p>
                *          <note>
                *             <p>For <code>EXPRESS</code>state machines, the deletion will happen eventually (usually
                *         less than a minute). Running executions may emit logs after <code>DeleteStateMachine</code>
                *         API is called.</p>
                *          </note>
                */
            deleteStateMachine(args: DeleteStateMachineCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStateMachineCommandOutput>;
            deleteStateMachine(args: DeleteStateMachineCommandInput, cb: (err: any, data?: DeleteStateMachineCommandOutput) => void): void;
            deleteStateMachine(args: DeleteStateMachineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStateMachineCommandOutput) => void): void;
            /**
                * <p>Describes an activity.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                */
            describeActivity(args: DescribeActivityCommandInput, options?: __HttpHandlerOptions): Promise<DescribeActivityCommandOutput>;
            describeActivity(args: DescribeActivityCommandInput, cb: (err: any, data?: DescribeActivityCommandOutput) => void): void;
            describeActivity(args: DescribeActivityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeActivityCommandOutput) => void): void;
            /**
                * <p>Describes an execution.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
                */
            describeExecution(args: DescribeExecutionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeExecutionCommandOutput>;
            describeExecution(args: DescribeExecutionCommandInput, cb: (err: any, data?: DescribeExecutionCommandOutput) => void): void;
            describeExecution(args: DescribeExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeExecutionCommandOutput) => void): void;
            /**
                * <p>Describes a state machine.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                */
            describeStateMachine(args: DescribeStateMachineCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStateMachineCommandOutput>;
            describeStateMachine(args: DescribeStateMachineCommandInput, cb: (err: any, data?: DescribeStateMachineCommandOutput) => void): void;
            describeStateMachine(args: DescribeStateMachineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStateMachineCommandOutput) => void): void;
            /**
                * <p>Describes the state machine associated with a specific execution.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
                */
            describeStateMachineForExecution(args: DescribeStateMachineForExecutionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStateMachineForExecutionCommandOutput>;
            describeStateMachineForExecution(args: DescribeStateMachineForExecutionCommandInput, cb: (err: any, data?: DescribeStateMachineForExecutionCommandOutput) => void): void;
            describeStateMachineForExecution(args: DescribeStateMachineForExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStateMachineForExecutionCommandOutput) => void): void;
            /**
                * <p>Used by workers to retrieve a task (with the specified activity ARN) which has been
                *       scheduled for execution by a running state machine. This initiates a long poll, where the
                *       service holds the HTTP connection open and responds as soon as a task becomes available (i.e.
                *       an execution of a task of this type is needed.) The maximum time the service holds on to the
                *       request before responding is 60 seconds. If no task is available within 60 seconds, the poll
                *       returns a <code>taskToken</code> with a null string.</p>
                *          <important>
                *             <p>Workers should set their client side socket timeout to at least 65 seconds (5 seconds
                *         higher than the maximum time the service may hold the poll request).</p>
                *             <p>Polling with <code>GetActivityTask</code> can cause latency in some implementations. See
                *           <a href="https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html">Avoid
                *           Latency When Polling for Activity Tasks</a> in the Step Functions Developer Guide.</p>
                *          </important>
                */
            getActivityTask(args: GetActivityTaskCommandInput, options?: __HttpHandlerOptions): Promise<GetActivityTaskCommandOutput>;
            getActivityTask(args: GetActivityTaskCommandInput, cb: (err: any, data?: GetActivityTaskCommandOutput) => void): void;
            getActivityTask(args: GetActivityTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetActivityTaskCommandOutput) => void): void;
            /**
                * <p>Returns the history of the specified execution as a list of events. By default, the
                *       results are returned in ascending order of the <code>timeStamp</code> of the events. Use the
                *         <code>reverseOrder</code> parameter to get the latest events first.</p>
                *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
                */
            getExecutionHistory(args: GetExecutionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetExecutionHistoryCommandOutput>;
            getExecutionHistory(args: GetExecutionHistoryCommandInput, cb: (err: any, data?: GetExecutionHistoryCommandOutput) => void): void;
            getExecutionHistory(args: GetExecutionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExecutionHistoryCommandOutput) => void): void;
            /**
                * <p>Lists the existing activities.</p>
                *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                */
            listActivities(args: ListActivitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListActivitiesCommandOutput>;
            listActivities(args: ListActivitiesCommandInput, cb: (err: any, data?: ListActivitiesCommandOutput) => void): void;
            listActivities(args: ListActivitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListActivitiesCommandOutput) => void): void;
            /**
                * <p>Lists the executions of a state machine that meet the filtering criteria. Results are
                *       sorted by time, with the most recent execution first.</p>
                *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
                */
            listExecutions(args: ListExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<ListExecutionsCommandOutput>;
            listExecutions(args: ListExecutionsCommandInput, cb: (err: any, data?: ListExecutionsCommandOutput) => void): void;
            listExecutions(args: ListExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExecutionsCommandOutput) => void): void;
            /**
                * <p>Lists the existing state machines.</p>
                *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                *          <note>
                *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
                *          </note>
                */
            listStateMachines(args: ListStateMachinesCommandInput, options?: __HttpHandlerOptions): Promise<ListStateMachinesCommandOutput>;
            listStateMachines(args: ListStateMachinesCommandInput, cb: (err: any, data?: ListStateMachinesCommandOutput) => void): void;
            listStateMachines(args: ListStateMachinesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStateMachinesCommandOutput) => void): void;
            /**
                * <p>List tags for a given resource.</p>
                *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
                *       pattern to report that the task identified by the <code>taskToken</code> failed.</p>
                */
            sendTaskFailure(args: SendTaskFailureCommandInput, options?: __HttpHandlerOptions): Promise<SendTaskFailureCommandOutput>;
            sendTaskFailure(args: SendTaskFailureCommandInput, cb: (err: any, data?: SendTaskFailureCommandOutput) => void): void;
            sendTaskFailure(args: SendTaskFailureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendTaskFailureCommandOutput) => void): void;
            /**
                * <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
                *       pattern to report to Step Functions that the task represented by the specified
                *         <code>taskToken</code> is still making progress. This action resets the
                *         <code>Heartbeat</code> clock. The <code>Heartbeat</code> threshold is specified in the state
                *       machine's Amazon States Language definition (<code>HeartbeatSeconds</code>). This action does not in itself
                *       create an event in the execution history. However, if the task times out, the execution
                *       history contains an <code>ActivityTimedOut</code> entry for activities, or a
                *         <code>TaskTimedOut</code> entry for for tasks using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync">job run</a> or
                *         <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
                *       pattern.</p>
                *          <note>
                *             <p>The <code>Timeout</code> of a task, defined in the state machine's Amazon States Language definition, is
                *         its maximum allowed duration, regardless of the number of <a>SendTaskHeartbeat</a> requests received. Use <code>HeartbeatSeconds</code> to configure the timeout interval
                *         for heartbeats.</p>
                *          </note>
                */
            sendTaskHeartbeat(args: SendTaskHeartbeatCommandInput, options?: __HttpHandlerOptions): Promise<SendTaskHeartbeatCommandOutput>;
            sendTaskHeartbeat(args: SendTaskHeartbeatCommandInput, cb: (err: any, data?: SendTaskHeartbeatCommandOutput) => void): void;
            sendTaskHeartbeat(args: SendTaskHeartbeatCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendTaskHeartbeatCommandOutput) => void): void;
            /**
                * <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
                *       pattern to report that the task identified by the <code>taskToken</code> completed
                *       successfully.</p>
                */
            sendTaskSuccess(args: SendTaskSuccessCommandInput, options?: __HttpHandlerOptions): Promise<SendTaskSuccessCommandOutput>;
            sendTaskSuccess(args: SendTaskSuccessCommandInput, cb: (err: any, data?: SendTaskSuccessCommandOutput) => void): void;
            sendTaskSuccess(args: SendTaskSuccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendTaskSuccessCommandOutput) => void): void;
            /**
                * <p>Starts a state machine execution.</p>
                *          <note>
                *             <p>
                *                <code>StartExecution</code> is idempotent. If <code>StartExecution</code> is called with
                *         the same name and input as a running execution, the call will succeed and return the same
                *         response as the original request. If the execution is closed or if the input is different,
                *         it will return a 400 <code>ExecutionAlreadyExists</code> error. Names can be reused after 90
                *         days. </p>
                *          </note>
                */
            startExecution(args: StartExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartExecutionCommandOutput>;
            startExecution(args: StartExecutionCommandInput, cb: (err: any, data?: StartExecutionCommandOutput) => void): void;
            startExecution(args: StartExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartExecutionCommandOutput) => void): void;
            /**
                * <p>Starts a Synchronous Express state machine execution.</p>
                */
            startSyncExecution(args: StartSyncExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartSyncExecutionCommandOutput>;
            startSyncExecution(args: StartSyncExecutionCommandInput, cb: (err: any, data?: StartSyncExecutionCommandOutput) => void): void;
            startSyncExecution(args: StartSyncExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSyncExecutionCommandOutput) => void): void;
            /**
                * <p>Stops an execution.</p>
                *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
                */
            stopExecution(args: StopExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StopExecutionCommandOutput>;
            stopExecution(args: StopExecutionCommandInput, cb: (err: any, data?: StopExecutionCommandOutput) => void): void;
            stopExecution(args: StopExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopExecutionCommandOutput) => void): void;
            /**
                * <p>Add a tag to a Step Functions resource.</p>
                *          <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using
                *       Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User
                *         Guide</i>, and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM
                *           Tags</a>.</p>
                *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Remove a tag from a Step Functions resource</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an existing state machine by modifying its <code>definition</code>,
                *         <code>roleArn</code>, or <code>loggingConfiguration</code>. Running executions will continue
                *       to use the previous <code>definition</code> and <code>roleArn</code>. You must include at
                *       least one of <code>definition</code> or <code>roleArn</code> or you will receive a
                *         <code>MissingRequiredParameter</code> error.</p>
                *          <note>
                *             <p>All <code>StartExecution</code> calls within a few seconds will use the updated
                *           <code>definition</code> and <code>roleArn</code>. Executions started immediately after
                *         calling <code>UpdateStateMachine</code> may use the previous state machine
                *           <code>definition</code> and <code>roleArn</code>. </p>
                *          </note>
                */
            updateStateMachine(args: UpdateStateMachineCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStateMachineCommandOutput>;
            updateStateMachine(args: UpdateStateMachineCommandInput, cb: (err: any, data?: UpdateStateMachineCommandOutput) => void): void;
            updateStateMachine(args: UpdateStateMachineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStateMachineCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/CreateActivityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateActivityInput, CreateActivityOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface CreateActivityCommandInput extends CreateActivityInput {
    }
    export interface CreateActivityCommandOutput extends CreateActivityOutput, __MetadataBearer {
    }
    /**
        * <p>Creates an activity. An activity is a task that you write in any programming language and
        *       host on any machine that has access to AWS Step Functions. Activities must poll Step Functions using the
        *         <code>GetActivityTask</code> API action and respond using <code>SendTask*</code> API
        *       actions. This function lets Step Functions know the existence of your activity and returns an
        *       identifier for use in a state machine and when polling from the activity.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        *          <note>
        *             <p>
        *                <code>CreateActivity</code> is an idempotent API. Subsequent requests won’t create a
        *         duplicate resource if it was already created. <code>CreateActivity</code>'s idempotency
        *         check is based on the activity <code>name</code>. If a following request has different
        *           <code>tags</code> values, Step Functions will ignore these differences and treat it as an
        *         idempotent request of the previous. In this case, <code>tags</code> will not be updated,
        *         even if they are different.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, CreateActivityCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, CreateActivityCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new CreateActivityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateActivityCommandInput} for command's `input` shape.
        * @see {@link CreateActivityCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class CreateActivityCommand extends $Command<CreateActivityCommandInput, CreateActivityCommandOutput, SFNClientResolvedConfig> {
            readonly input: CreateActivityCommandInput;
            constructor(input: CreateActivityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateActivityCommandInput, CreateActivityCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/CreateStateMachineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateStateMachineInput, CreateStateMachineOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface CreateStateMachineCommandInput extends CreateStateMachineInput {
    }
    export interface CreateStateMachineCommandOutput extends CreateStateMachineOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a state machine. A state machine consists of a collection of states that can do
        *       work (<code>Task</code> states), determine to which states to transition next
        *         (<code>Choice</code> states), stop an execution with an error (<code>Fail</code> states),
        *       and so on. State machines are specified using a JSON-based, structured language. For more
        *       information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States
        *         Language</a> in the AWS Step Functions User Guide.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        *          <note>
        *             <p>
        *                <code>CreateStateMachine</code> is an idempotent API. Subsequent requests won’t create a
        *         duplicate resource if it was already created. <code>CreateStateMachine</code>'s idempotency
        *         check is based on the state machine <code>name</code>, <code>definition</code>,
        *           <code>type</code>, <code>LoggingConfiguration</code> and <code>TracingConfiguration</code>. If a following request has a
        *         different <code>roleArn</code> or <code>tags</code>, Step Functions will ignore these differences and
        *         treat it as an idempotent request of the previous. In this case, <code>roleArn</code> and
        *           <code>tags</code> will not be updated, even if they are different.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, CreateStateMachineCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, CreateStateMachineCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new CreateStateMachineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStateMachineCommandInput} for command's `input` shape.
        * @see {@link CreateStateMachineCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class CreateStateMachineCommand extends $Command<CreateStateMachineCommandInput, CreateStateMachineCommandOutput, SFNClientResolvedConfig> {
            readonly input: CreateStateMachineCommandInput;
            constructor(input: CreateStateMachineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStateMachineCommandInput, CreateStateMachineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DeleteActivityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteActivityInput, DeleteActivityOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface DeleteActivityCommandInput extends DeleteActivityInput {
    }
    export interface DeleteActivityCommandOutput extends DeleteActivityOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes an activity.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, DeleteActivityCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, DeleteActivityCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new DeleteActivityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteActivityCommandInput} for command's `input` shape.
        * @see {@link DeleteActivityCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class DeleteActivityCommand extends $Command<DeleteActivityCommandInput, DeleteActivityCommandOutput, SFNClientResolvedConfig> {
            readonly input: DeleteActivityCommandInput;
            constructor(input: DeleteActivityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteActivityCommandInput, DeleteActivityCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DeleteStateMachineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteStateMachineInput, DeleteStateMachineOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface DeleteStateMachineCommandInput extends DeleteStateMachineInput {
    }
    export interface DeleteStateMachineCommandOutput extends DeleteStateMachineOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes a state machine. This is an asynchronous operation: It sets the state machine's
        *       status to <code>DELETING</code> and begins the deletion process. </p>
        *          <note>
        *             <p>For <code>EXPRESS</code>state machines, the deletion will happen eventually (usually
        *         less than a minute). Running executions may emit logs after <code>DeleteStateMachine</code>
        *         API is called.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, DeleteStateMachineCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, DeleteStateMachineCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new DeleteStateMachineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStateMachineCommandInput} for command's `input` shape.
        * @see {@link DeleteStateMachineCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class DeleteStateMachineCommand extends $Command<DeleteStateMachineCommandInput, DeleteStateMachineCommandOutput, SFNClientResolvedConfig> {
            readonly input: DeleteStateMachineCommandInput;
            constructor(input: DeleteStateMachineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStateMachineCommandInput, DeleteStateMachineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeActivityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeActivityInput, DescribeActivityOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface DescribeActivityCommandInput extends DescribeActivityInput {
    }
    export interface DescribeActivityCommandOutput extends DescribeActivityOutput, __MetadataBearer {
    }
    /**
        * <p>Describes an activity.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, DescribeActivityCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, DescribeActivityCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new DescribeActivityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeActivityCommandInput} for command's `input` shape.
        * @see {@link DescribeActivityCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class DescribeActivityCommand extends $Command<DescribeActivityCommandInput, DescribeActivityCommandOutput, SFNClientResolvedConfig> {
            readonly input: DescribeActivityCommandInput;
            constructor(input: DescribeActivityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeActivityCommandInput, DescribeActivityCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeExecutionInput, DescribeExecutionOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface DescribeExecutionCommandInput extends DescribeExecutionInput {
    }
    export interface DescribeExecutionCommandOutput extends DescribeExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Describes an execution.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, DescribeExecutionCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, DescribeExecutionCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new DescribeExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeExecutionCommandInput} for command's `input` shape.
        * @see {@link DescribeExecutionCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class DescribeExecutionCommand extends $Command<DescribeExecutionCommandInput, DescribeExecutionCommandOutput, SFNClientResolvedConfig> {
            readonly input: DescribeExecutionCommandInput;
            constructor(input: DescribeExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeExecutionCommandInput, DescribeExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeStateMachineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeStateMachineInput, DescribeStateMachineOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface DescribeStateMachineCommandInput extends DescribeStateMachineInput {
    }
    export interface DescribeStateMachineCommandOutput extends DescribeStateMachineOutput, __MetadataBearer {
    }
    /**
        * <p>Describes a state machine.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, DescribeStateMachineCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, DescribeStateMachineCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new DescribeStateMachineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeStateMachineCommandInput} for command's `input` shape.
        * @see {@link DescribeStateMachineCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class DescribeStateMachineCommand extends $Command<DescribeStateMachineCommandInput, DescribeStateMachineCommandOutput, SFNClientResolvedConfig> {
            readonly input: DescribeStateMachineCommandInput;
            constructor(input: DescribeStateMachineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeStateMachineCommandInput, DescribeStateMachineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeStateMachineForExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeStateMachineForExecutionInput, DescribeStateMachineForExecutionOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface DescribeStateMachineForExecutionCommandInput extends DescribeStateMachineForExecutionInput {
    }
    export interface DescribeStateMachineForExecutionCommandOutput extends DescribeStateMachineForExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the state machine associated with a specific execution.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, DescribeStateMachineForExecutionCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, DescribeStateMachineForExecutionCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new DescribeStateMachineForExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeStateMachineForExecutionCommandInput} for command's `input` shape.
        * @see {@link DescribeStateMachineForExecutionCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class DescribeStateMachineForExecutionCommand extends $Command<DescribeStateMachineForExecutionCommandInput, DescribeStateMachineForExecutionCommandOutput, SFNClientResolvedConfig> {
            readonly input: DescribeStateMachineForExecutionCommandInput;
            constructor(input: DescribeStateMachineForExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeStateMachineForExecutionCommandInput, DescribeStateMachineForExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/GetActivityTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetActivityTaskInput, GetActivityTaskOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface GetActivityTaskCommandInput extends GetActivityTaskInput {
    }
    export interface GetActivityTaskCommandOutput extends GetActivityTaskOutput, __MetadataBearer {
    }
    /**
        * <p>Used by workers to retrieve a task (with the specified activity ARN) which has been
        *       scheduled for execution by a running state machine. This initiates a long poll, where the
        *       service holds the HTTP connection open and responds as soon as a task becomes available (i.e.
        *       an execution of a task of this type is needed.) The maximum time the service holds on to the
        *       request before responding is 60 seconds. If no task is available within 60 seconds, the poll
        *       returns a <code>taskToken</code> with a null string.</p>
        *          <important>
        *             <p>Workers should set their client side socket timeout to at least 65 seconds (5 seconds
        *         higher than the maximum time the service may hold the poll request).</p>
        *             <p>Polling with <code>GetActivityTask</code> can cause latency in some implementations. See
        *           <a href="https://docs.aws.amazon.com/step-functions/latest/dg/bp-activity-pollers.html">Avoid
        *           Latency When Polling for Activity Tasks</a> in the Step Functions Developer Guide.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, GetActivityTaskCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, GetActivityTaskCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new GetActivityTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetActivityTaskCommandInput} for command's `input` shape.
        * @see {@link GetActivityTaskCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class GetActivityTaskCommand extends $Command<GetActivityTaskCommandInput, GetActivityTaskCommandOutput, SFNClientResolvedConfig> {
            readonly input: GetActivityTaskCommandInput;
            constructor(input: GetActivityTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetActivityTaskCommandInput, GetActivityTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/GetExecutionHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetExecutionHistoryInput, GetExecutionHistoryOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface GetExecutionHistoryCommandInput extends GetExecutionHistoryInput {
    }
    export interface GetExecutionHistoryCommandOutput extends GetExecutionHistoryOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the history of the specified execution as a list of events. By default, the
        *       results are returned in ascending order of the <code>timeStamp</code> of the events. Use the
        *         <code>reverseOrder</code> parameter to get the latest events first.</p>
        *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
        *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
        *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, GetExecutionHistoryCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, GetExecutionHistoryCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new GetExecutionHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExecutionHistoryCommandInput} for command's `input` shape.
        * @see {@link GetExecutionHistoryCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class GetExecutionHistoryCommand extends $Command<GetExecutionHistoryCommandInput, GetExecutionHistoryCommandOutput, SFNClientResolvedConfig> {
            readonly input: GetExecutionHistoryCommandInput;
            constructor(input: GetExecutionHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExecutionHistoryCommandInput, GetExecutionHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListActivitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListActivitiesInput, ListActivitiesOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface ListActivitiesCommandInput extends ListActivitiesInput {
    }
    export interface ListActivitiesCommandOutput extends ListActivitiesOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the existing activities.</p>
        *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
        *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, ListActivitiesCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, ListActivitiesCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new ListActivitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListActivitiesCommandInput} for command's `input` shape.
        * @see {@link ListActivitiesCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class ListActivitiesCommand extends $Command<ListActivitiesCommandInput, ListActivitiesCommandOutput, SFNClientResolvedConfig> {
            readonly input: ListActivitiesCommandInput;
            constructor(input: ListActivitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListActivitiesCommandInput, ListActivitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListExecutionsInput, ListExecutionsOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface ListExecutionsCommandInput extends ListExecutionsInput {
    }
    export interface ListExecutionsCommandOutput extends ListExecutionsOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the executions of a state machine that meet the filtering criteria. Results are
        *       sorted by time, with the most recent execution first.</p>
        *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
        *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, ListExecutionsCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, ListExecutionsCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new ListExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExecutionsCommandInput} for command's `input` shape.
        * @see {@link ListExecutionsCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class ListExecutionsCommand extends $Command<ListExecutionsCommandInput, ListExecutionsCommandOutput, SFNClientResolvedConfig> {
            readonly input: ListExecutionsCommandInput;
            constructor(input: ListExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExecutionsCommandInput, ListExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListStateMachinesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStateMachinesInput, ListStateMachinesOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface ListStateMachinesCommandInput extends ListStateMachinesInput {
    }
    export interface ListStateMachinesCommandOutput extends ListStateMachinesOutput, __MetadataBearer {
    }
    /**
        * <p>Lists the existing state machines.</p>
        *          <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
        *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
        *          <note>
        *             <p>This operation is eventually consistent. The results are best effort and may not reflect very recent updates and changes.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, ListStateMachinesCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, ListStateMachinesCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new ListStateMachinesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStateMachinesCommandInput} for command's `input` shape.
        * @see {@link ListStateMachinesCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class ListStateMachinesCommand extends $Command<ListStateMachinesCommandInput, ListStateMachinesCommandOutput, SFNClientResolvedConfig> {
            readonly input: ListStateMachinesCommandInput;
            constructor(input: ListStateMachinesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStateMachinesCommandInput, ListStateMachinesCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceInput, ListTagsForResourceOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceInput {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceOutput, __MetadataBearer {
    }
    /**
        * <p>List tags for a given resource.</p>
        *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, ListTagsForResourceCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, ListTagsForResourceCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, SFNClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskFailureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendTaskFailureInput, SendTaskFailureOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface SendTaskFailureCommandInput extends SendTaskFailureInput {
    }
    export interface SendTaskFailureCommandOutput extends SendTaskFailureOutput, __MetadataBearer {
    }
    /**
        * <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
        *       pattern to report that the task identified by the <code>taskToken</code> failed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, SendTaskFailureCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, SendTaskFailureCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new SendTaskFailureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendTaskFailureCommandInput} for command's `input` shape.
        * @see {@link SendTaskFailureCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class SendTaskFailureCommand extends $Command<SendTaskFailureCommandInput, SendTaskFailureCommandOutput, SFNClientResolvedConfig> {
            readonly input: SendTaskFailureCommandInput;
            constructor(input: SendTaskFailureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendTaskFailureCommandInput, SendTaskFailureCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskHeartbeatCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendTaskHeartbeatInput, SendTaskHeartbeatOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface SendTaskHeartbeatCommandInput extends SendTaskHeartbeatInput {
    }
    export interface SendTaskHeartbeatCommandOutput extends SendTaskHeartbeatOutput, __MetadataBearer {
    }
    /**
        * <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
        *       pattern to report to Step Functions that the task represented by the specified
        *         <code>taskToken</code> is still making progress. This action resets the
        *         <code>Heartbeat</code> clock. The <code>Heartbeat</code> threshold is specified in the state
        *       machine's Amazon States Language definition (<code>HeartbeatSeconds</code>). This action does not in itself
        *       create an event in the execution history. However, if the task times out, the execution
        *       history contains an <code>ActivityTimedOut</code> entry for activities, or a
        *         <code>TaskTimedOut</code> entry for for tasks using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-sync">job run</a> or
        *         <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
        *       pattern.</p>
        *          <note>
        *             <p>The <code>Timeout</code> of a task, defined in the state machine's Amazon States Language definition, is
        *         its maximum allowed duration, regardless of the number of <a>SendTaskHeartbeat</a> requests received. Use <code>HeartbeatSeconds</code> to configure the timeout interval
        *         for heartbeats.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, SendTaskHeartbeatCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, SendTaskHeartbeatCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new SendTaskHeartbeatCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendTaskHeartbeatCommandInput} for command's `input` shape.
        * @see {@link SendTaskHeartbeatCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class SendTaskHeartbeatCommand extends $Command<SendTaskHeartbeatCommandInput, SendTaskHeartbeatCommandOutput, SFNClientResolvedConfig> {
            readonly input: SendTaskHeartbeatCommandInput;
            constructor(input: SendTaskHeartbeatCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendTaskHeartbeatCommandInput, SendTaskHeartbeatCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskSuccessCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendTaskSuccessInput, SendTaskSuccessOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface SendTaskSuccessCommandInput extends SendTaskSuccessInput {
    }
    export interface SendTaskSuccessCommandOutput extends SendTaskSuccessOutput, __MetadataBearer {
    }
    /**
        * <p>Used by activity workers and task states using the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html#connect-wait-token">callback</a>
        *       pattern to report that the task identified by the <code>taskToken</code> completed
        *       successfully.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, SendTaskSuccessCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, SendTaskSuccessCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new SendTaskSuccessCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendTaskSuccessCommandInput} for command's `input` shape.
        * @see {@link SendTaskSuccessCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class SendTaskSuccessCommand extends $Command<SendTaskSuccessCommandInput, SendTaskSuccessCommandOutput, SFNClientResolvedConfig> {
            readonly input: SendTaskSuccessCommandInput;
            constructor(input: SendTaskSuccessCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendTaskSuccessCommandInput, SendTaskSuccessCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StartExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartExecutionInput, StartExecutionOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface StartExecutionCommandInput extends StartExecutionInput {
    }
    export interface StartExecutionCommandOutput extends StartExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Starts a state machine execution.</p>
        *          <note>
        *             <p>
        *                <code>StartExecution</code> is idempotent. If <code>StartExecution</code> is called with
        *         the same name and input as a running execution, the call will succeed and return the same
        *         response as the original request. If the execution is closed or if the input is different,
        *         it will return a 400 <code>ExecutionAlreadyExists</code> error. Names can be reused after 90
        *         days. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, StartExecutionCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, StartExecutionCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new StartExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartExecutionCommandInput} for command's `input` shape.
        * @see {@link StartExecutionCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class StartExecutionCommand extends $Command<StartExecutionCommandInput, StartExecutionCommandOutput, SFNClientResolvedConfig> {
            readonly input: StartExecutionCommandInput;
            constructor(input: StartExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartExecutionCommandInput, StartExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StartSyncExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartSyncExecutionInput, StartSyncExecutionOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface StartSyncExecutionCommandInput extends StartSyncExecutionInput {
    }
    export interface StartSyncExecutionCommandOutput extends StartSyncExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Starts a Synchronous Express state machine execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, StartSyncExecutionCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, StartSyncExecutionCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new StartSyncExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSyncExecutionCommandInput} for command's `input` shape.
        * @see {@link StartSyncExecutionCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class StartSyncExecutionCommand extends $Command<StartSyncExecutionCommandInput, StartSyncExecutionCommandOutput, SFNClientResolvedConfig> {
            readonly input: StartSyncExecutionCommandInput;
            constructor(input: StartSyncExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSyncExecutionCommandInput, StartSyncExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StopExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopExecutionInput, StopExecutionOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface StopExecutionCommandInput extends StopExecutionInput {
    }
    export interface StopExecutionCommandOutput extends StopExecutionOutput, __MetadataBearer {
    }
    /**
        * <p>Stops an execution.</p>
        *          <p>This API action is not supported by <code>EXPRESS</code> state machines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, StopExecutionCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, StopExecutionCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new StopExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopExecutionCommandInput} for command's `input` shape.
        * @see {@link StopExecutionCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class StopExecutionCommand extends $Command<StopExecutionCommandInput, StopExecutionCommandOutput, SFNClientResolvedConfig> {
            readonly input: StopExecutionCommandInput;
            constructor(input: StopExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopExecutionCommandInput, StopExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceInput, TagResourceOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface TagResourceCommandInput extends TagResourceInput {
    }
    export interface TagResourceCommandOutput extends TagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Add a tag to a Step Functions resource.</p>
        *          <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using
        *       Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User
        *         Guide</i>, and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM
        *           Tags</a>.</p>
        *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, TagResourceCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, TagResourceCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, SFNClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceInput, UntagResourceOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface UntagResourceCommandInput extends UntagResourceInput {
    }
    export interface UntagResourceCommandOutput extends UntagResourceOutput, __MetadataBearer {
    }
    /**
        * <p>Remove a tag from a Step Functions resource</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, UntagResourceCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, UntagResourceCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, SFNClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/UpdateStateMachineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateStateMachineInput, UpdateStateMachineOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient";
    export interface UpdateStateMachineCommandInput extends UpdateStateMachineInput {
    }
    export interface UpdateStateMachineCommandOutput extends UpdateStateMachineOutput, __MetadataBearer {
    }
    /**
        * <p>Updates an existing state machine by modifying its <code>definition</code>,
        *         <code>roleArn</code>, or <code>loggingConfiguration</code>. Running executions will continue
        *       to use the previous <code>definition</code> and <code>roleArn</code>. You must include at
        *       least one of <code>definition</code> or <code>roleArn</code> or you will receive a
        *         <code>MissingRequiredParameter</code> error.</p>
        *          <note>
        *             <p>All <code>StartExecution</code> calls within a few seconds will use the updated
        *           <code>definition</code> and <code>roleArn</code>. Executions started immediately after
        *         calling <code>UpdateStateMachine</code> may use the previous state machine
        *           <code>definition</code> and <code>roleArn</code>. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SFNClient, UpdateStateMachineCommand } from "@aws-sdk/client-sfn"; // ES Modules import
        * // const { SFNClient, UpdateStateMachineCommand } = require("@aws-sdk/client-sfn"); // CommonJS import
        * const client = new SFNClient(config);
        * const command = new UpdateStateMachineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStateMachineCommandInput} for command's `input` shape.
        * @see {@link UpdateStateMachineCommandOutput} for command's `response` shape.
        * @see {@link SFNClientResolvedConfig | config} for SFNClient's `config` shape.
        *
        */
    export class UpdateStateMachineCommand extends $Command<UpdateStateMachineCommandInput, UpdateStateMachineCommandOutput, SFNClientResolvedConfig> {
            readonly input: UpdateStateMachineCommandInput;
            constructor(input: UpdateStateMachineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SFNClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStateMachineCommandInput, UpdateStateMachineCommandOutput>;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/SFNClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateActivityCommandInput, CreateActivityCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/CreateActivityCommand";
    import { CreateStateMachineCommandInput, CreateStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/CreateStateMachineCommand";
    import { DeleteActivityCommandInput, DeleteActivityCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DeleteActivityCommand";
    import { DeleteStateMachineCommandInput, DeleteStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DeleteStateMachineCommand";
    import { DescribeActivityCommandInput, DescribeActivityCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeActivityCommand";
    import { DescribeExecutionCommandInput, DescribeExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeExecutionCommand";
    import { DescribeStateMachineCommandInput, DescribeStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeStateMachineCommand";
    import { DescribeStateMachineForExecutionCommandInput, DescribeStateMachineForExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/DescribeStateMachineForExecutionCommand";
    import { GetActivityTaskCommandInput, GetActivityTaskCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/GetActivityTaskCommand";
    import { GetExecutionHistoryCommandInput, GetExecutionHistoryCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/GetExecutionHistoryCommand";
    import { ListActivitiesCommandInput, ListActivitiesCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListActivitiesCommand";
    import { ListExecutionsCommandInput, ListExecutionsCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListExecutionsCommand";
    import { ListStateMachinesCommandInput, ListStateMachinesCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListStateMachinesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/ListTagsForResourceCommand";
    import { SendTaskFailureCommandInput, SendTaskFailureCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskFailureCommand";
    import { SendTaskHeartbeatCommandInput, SendTaskHeartbeatCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskHeartbeatCommand";
    import { SendTaskSuccessCommandInput, SendTaskSuccessCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/SendTaskSuccessCommand";
    import { StartExecutionCommandInput, StartExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StartExecutionCommand";
    import { StartSyncExecutionCommandInput, StartSyncExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StartSyncExecutionCommand";
    import { StopExecutionCommandInput, StopExecutionCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/StopExecutionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/UntagResourceCommand";
    import { UpdateStateMachineCommandInput, UpdateStateMachineCommandOutput } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/commands/UpdateStateMachineCommand";
    export type ServiceInputTypes = CreateActivityCommandInput | CreateStateMachineCommandInput | DeleteActivityCommandInput | DeleteStateMachineCommandInput | DescribeActivityCommandInput | DescribeExecutionCommandInput | DescribeStateMachineCommandInput | DescribeStateMachineForExecutionCommandInput | GetActivityTaskCommandInput | GetExecutionHistoryCommandInput | ListActivitiesCommandInput | ListExecutionsCommandInput | ListStateMachinesCommandInput | ListTagsForResourceCommandInput | SendTaskFailureCommandInput | SendTaskHeartbeatCommandInput | SendTaskSuccessCommandInput | StartExecutionCommandInput | StartSyncExecutionCommandInput | StopExecutionCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateStateMachineCommandInput;
    export type ServiceOutputTypes = CreateActivityCommandOutput | CreateStateMachineCommandOutput | DeleteActivityCommandOutput | DeleteStateMachineCommandOutput | DescribeActivityCommandOutput | DescribeExecutionCommandOutput | DescribeStateMachineCommandOutput | DescribeStateMachineForExecutionCommandOutput | GetActivityTaskCommandOutput | GetExecutionHistoryCommandOutput | ListActivitiesCommandOutput | ListExecutionsCommandOutput | ListStateMachinesCommandOutput | ListTagsForResourceCommandOutput | SendTaskFailureCommandOutput | SendTaskHeartbeatCommandOutput | SendTaskSuccessCommandOutput | StartExecutionCommandOutput | StartSyncExecutionCommandOutput | StopExecutionCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateStateMachineCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SFNClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SFNClient class constructor that set the region, credentials and other options.
        */
    export interface SFNClientConfig extends SFNClientConfigType {
    }
    type SFNClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SFNClient class. This is resolved and normalized from the {@link SFNClientConfig | constructor configuration interface}.
        */
    export interface SFNClientResolvedConfig extends SFNClientResolvedConfigType {
    }
    /**
        * <fullname>AWS Step Functions</fullname>
        *          <p>AWS Step Functions is a service that lets you coordinate the components of distributed applications
        *       and microservices using visual workflows.</p>
        *          <p>You can use Step Functions to build applications from individual components, each of which performs
        *       a discrete function, or <i>task</i>, allowing you to scale and change
        *       applications quickly. Step Functions provides a console that helps visualize the components of your
        *       application as a series of steps. Step Functions automatically triggers and tracks each step, and
        *       retries steps when there are errors, so your application executes predictably and in the right
        *       order every time. Step Functions logs the state of each step, so you can quickly diagnose and debug any
        *       issues.</p>
        *          <p>Step Functions manages operations and underlying infrastructure to ensure your application is
        *       available at any scale. You can run tasks on AWS, your own servers, or any system that has
        *       access to AWS. You can access and use Step Functions using the console, the AWS SDKs, or an HTTP API.
        *       For more information about Step Functions, see the <i>
        *                <a href="https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html">AWS Step Functions Developer Guide</a>
        *             </i>.</p>
        */
    export class SFNClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SFNClientResolvedConfig> {
            /**
                * The resolved configuration of SFNClient class. This is resolved and normalized from the {@link SFNClientConfig | constructor configuration interface}.
                */
            readonly config: SFNClientResolvedConfig;
            constructor(configuration: SFNClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SFNServiceException as __BaseException } from "@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/SFNServiceException";
    /**
        * <p>The specified activity does not exist.</p>
        */
    export class ActivityDoesNotExist extends __BaseException {
            readonly name: "ActivityDoesNotExist";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ActivityDoesNotExist, __BaseException>);
    }
    /**
        * <p>Contains details about an activity that failed during an execution.</p>
        */
    export interface ActivityFailedEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace ActivityFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivityFailedEventDetails) => any;
    }
    /**
        * <p>The maximum number of activities has been reached. Existing activities must be deleted
        *       before a new activity can be created.</p>
        */
    export class ActivityLimitExceeded extends __BaseException {
            readonly name: "ActivityLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ActivityLimitExceeded, __BaseException>);
    }
    /**
        * <p>Contains details about an activity.</p>
        */
    export interface ActivityListItem {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the activity.</p>
                */
            activityArn: string | undefined;
            /**
                * <p>The name of the activity.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p>The date the activity is created.</p>
                */
            creationDate: Date | undefined;
    }
    export namespace ActivityListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivityListItem) => any;
    }
    /**
        * <p>Provides details about input or output in an execution history event.</p>
        */
    export interface HistoryEventExecutionDataDetails {
            /**
                * <p>Indicates whether input or output was truncated in the response. Always
                *       <code>false</code> for API calls.</p>
                */
            truncated?: boolean;
    }
    export namespace HistoryEventExecutionDataDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HistoryEventExecutionDataDetails) => any;
    }
    /**
        * <p>Contains details about an activity scheduled during an execution.</p>
        */
    export interface ActivityScheduledEventDetails {
            /**
                * <p>The Amazon Resource Name (ARN) of the scheduled activity.</p>
                */
            resource: string | undefined;
            /**
                * <p>The JSON data input to the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Contains details about the input for an execution history event.</p>
                */
            inputDetails?: HistoryEventExecutionDataDetails;
            /**
                * <p>The maximum allowed duration of the activity task.</p>
                */
            timeoutInSeconds?: number;
            /**
                * <p>The maximum allowed duration between two heartbeats for the activity task.</p>
                */
            heartbeatInSeconds?: number;
    }
    export namespace ActivityScheduledEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivityScheduledEventDetails) => any;
    }
    /**
        * <p>Contains details about an activity schedule failure that occurred during an
        *       execution.</p>
        */
    export interface ActivityScheduleFailedEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace ActivityScheduleFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivityScheduleFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about the start of an activity during an execution.</p>
        */
    export interface ActivityStartedEventDetails {
            /**
                * <p>The name of the worker that the task is assigned to. These names are provided by the
                *       workers when calling <a>GetActivityTask</a>.</p>
                */
            workerName?: string;
    }
    export namespace ActivityStartedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivityStartedEventDetails) => any;
    }
    /**
        * <p>Contains details about an activity that successfully terminated during an
        *       execution.</p>
        */
    export interface ActivitySucceededEventDetails {
            /**
                * <p>The JSON data output by the activity task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            output?: string;
            /**
                * <p>Contains details about the output of an execution history event.</p>
                */
            outputDetails?: HistoryEventExecutionDataDetails;
    }
    export namespace ActivitySucceededEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivitySucceededEventDetails) => any;
    }
    /**
        * <p>Contains details about an activity timeout that occurred during an execution.</p>
        */
    export interface ActivityTimedOutEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the timeout.</p>
                */
            cause?: string;
    }
    export namespace ActivityTimedOutEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivityTimedOutEventDetails) => any;
    }
    /**
        * <p>The maximum number of workers concurrently polling for activity tasks has been
        *       reached.</p>
        */
    export class ActivityWorkerLimitExceeded extends __BaseException {
            readonly name: "ActivityWorkerLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ActivityWorkerLimitExceeded, __BaseException>);
    }
    /**
        * <p>Tags are key-value pairs that can be associated with Step Functions state machines and
        *       activities.</p>
        *          <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using
        *       Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User
        *         Guide</i>, and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM
        *           Tags</a>.</p>
        *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
        */
    export interface Tag {
            /**
                * <p>The key of a tag.</p>
                */
            key?: string;
            /**
                * <p>The value of a tag.</p>
                */
            value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateActivityInput {
            /**
                * <p>The name of the activity to create. This name must be unique for your AWS account and region for 90 days. For more information,
                *     see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions">
                *     Limits Related to State Machine Executions</a> in the <i>AWS Step Functions Developer Guide</i>.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p>The list of tags to add to a resource.</p>
                *          <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using
                *       Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User
                *         Guide</i>, and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM
                *           Tags</a>.</p>
                *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateActivityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActivityInput) => any;
    }
    export interface CreateActivityOutput {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the created activity.</p>
                */
            activityArn: string | undefined;
            /**
                * <p>The date the activity is created.</p>
                */
            creationDate: Date | undefined;
    }
    export namespace CreateActivityOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActivityOutput) => any;
    }
    /**
        * <p>The provided name is invalid.</p>
        */
    export class InvalidName extends __BaseException {
            readonly name: "InvalidName";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidName, __BaseException>);
    }
    /**
        * <p>You've exceeded the number of tags allowed for a resource. See the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html"> Limits Topic</a> in the
        *       AWS Step Functions Developer Guide.</p>
        */
    export class TooManyTags extends __BaseException {
            readonly name: "TooManyTags";
            readonly $fault: "client";
            resourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTags, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CloudWatchLogsLogGroup {
            /**
                * <p>The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN
                *       must end with <code>:*</code>
                *          </p>
                */
            logGroupArn?: string;
    }
    export namespace CloudWatchLogsLogGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchLogsLogGroup) => any;
    }
    /**
        * <p></p>
        */
    export interface LogDestination {
            /**
                * <p>An object describing a CloudWatch log group. For more information, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html">AWS::Logs::LogGroup</a> in the AWS CloudFormation User Guide.</p>
                */
            cloudWatchLogsLogGroup?: CloudWatchLogsLogGroup;
    }
    export namespace LogDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogDestination) => any;
    }
    export type LogLevel = "ALL" | "ERROR" | "FATAL" | "OFF";
    /**
        * <p>The <code>LoggingConfiguration</code> data type is used to set CloudWatch Logs
        *       options.</p>
        */
    export interface LoggingConfiguration {
            /**
                * <p>Defines which category of execution history events are logged.</p>
                */
            level?: LogLevel | string;
            /**
                * <p>Determines whether execution data is included in your log. When set to <code>false</code>,
                *       data is excluded.</p>
                */
            includeExecutionData?: boolean;
            /**
                * <p>An array of objects that describes where your execution history events will be logged.
                *       Limited to size 1. Required, if your log level is not set to <code>OFF</code>.</p>
                */
            destinations?: LogDestination[];
    }
    export namespace LoggingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingConfiguration) => any;
    }
    /**
        * <p>Selects whether or not the state machine's AWS X-Ray tracing is enabled. Default is <code>false</code>
        *          </p>
        */
    export interface TracingConfiguration {
            /**
                * <p>When set to <code>true</code>, AWS X-Ray tracing is enabled.</p>
                */
            enabled?: boolean;
    }
    export namespace TracingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TracingConfiguration) => any;
    }
    export type StateMachineType = "EXPRESS" | "STANDARD";
    export interface CreateStateMachineInput {
            /**
                * <p>The name of the state machine. </p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p>The Amazon States Language definition of the state machine. See <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a>.</p>
                */
            definition: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to use for this state machine.</p>
                */
            roleArn: string | undefined;
            /**
                * <p>Determines whether a Standard or Express state machine is created. The default is
                *         <code>STANDARD</code>. You cannot update the <code>type</code> of a state machine once it
                *       has been created.</p>
                */
            type?: StateMachineType | string;
            /**
                * <p>Defines what execution history events are logged and where they are logged.</p>
                *          <note>
                *             <p>By default, the <code>level</code> is set to <code>OFF</code>. For more information see
                *           <a href="https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html">Log
                *           Levels</a> in the AWS Step Functions User Guide.</p>
                *          </note>
                */
            loggingConfiguration?: LoggingConfiguration;
            /**
                * <p>Tags to be added when creating a state machine.</p>
                *          <p>An array of key-value pairs. For more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html">Using
                *       Cost Allocation Tags</a> in the <i>AWS Billing and Cost Management User
                *         Guide</i>, and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">Controlling Access Using IAM
                *           Tags</a>.</p>
                *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
                */
            tags?: Tag[];
            /**
                * <p>Selects whether AWS X-Ray tracing is enabled.</p>
                */
            tracingConfiguration?: TracingConfiguration;
    }
    export namespace CreateStateMachineInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStateMachineInput) => any;
    }
    export interface CreateStateMachineOutput {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the created state machine.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The date the state machine is created.</p>
                */
            creationDate: Date | undefined;
    }
    export namespace CreateStateMachineOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStateMachineOutput) => any;
    }
    /**
        * <p>The provided Amazon Resource Name (ARN) is invalid.</p>
        */
    export class InvalidArn extends __BaseException {
            readonly name: "InvalidArn";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidArn, __BaseException>);
    }
    /**
        * <p>The provided Amazon States Language definition is invalid.</p>
        */
    export class InvalidDefinition extends __BaseException {
            readonly name: "InvalidDefinition";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDefinition, __BaseException>);
    }
    /**
        * <p></p>
        */
    export class InvalidLoggingConfiguration extends __BaseException {
            readonly name: "InvalidLoggingConfiguration";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidLoggingConfiguration, __BaseException>);
    }
    /**
        * <p>Your <code>tracingConfiguration</code> key does not match, or <code>enabled</code> has not been set to <code>true</code> or <code>false</code>.</p>
        */
    export class InvalidTracingConfiguration extends __BaseException {
            readonly name: "InvalidTracingConfiguration";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTracingConfiguration, __BaseException>);
    }
    /**
        * <p>A state machine with the same name but a different definition or role ARN already
        *       exists.</p>
        */
    export class StateMachineAlreadyExists extends __BaseException {
            readonly name: "StateMachineAlreadyExists";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StateMachineAlreadyExists, __BaseException>);
    }
    /**
        * <p>The specified state machine is being deleted.</p>
        */
    export class StateMachineDeleting extends __BaseException {
            readonly name: "StateMachineDeleting";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StateMachineDeleting, __BaseException>);
    }
    /**
        * <p>The maximum number of state machines has been reached. Existing state machines must be
        *       deleted before a new state machine can be created.</p>
        */
    export class StateMachineLimitExceeded extends __BaseException {
            readonly name: "StateMachineLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StateMachineLimitExceeded, __BaseException>);
    }
    /**
        * <p></p>
        */
    export class StateMachineTypeNotSupported extends __BaseException {
            readonly name: "StateMachineTypeNotSupported";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StateMachineTypeNotSupported, __BaseException>);
    }
    export interface DeleteActivityInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the activity to delete.</p>
                */
            activityArn: string | undefined;
    }
    export namespace DeleteActivityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActivityInput) => any;
    }
    export interface DeleteActivityOutput {
    }
    export namespace DeleteActivityOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActivityOutput) => any;
    }
    export interface DeleteStateMachineInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the state machine to delete.</p>
                */
            stateMachineArn: string | undefined;
    }
    export namespace DeleteStateMachineInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStateMachineInput) => any;
    }
    export interface DeleteStateMachineOutput {
    }
    export namespace DeleteStateMachineOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStateMachineOutput) => any;
    }
    export interface DescribeActivityInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the activity to describe.</p>
                */
            activityArn: string | undefined;
    }
    export namespace DescribeActivityInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActivityInput) => any;
    }
    export interface DescribeActivityOutput {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the activity.</p>
                */
            activityArn: string | undefined;
            /**
                * <p>The name of the activity.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p>The date the activity is created.</p>
                */
            creationDate: Date | undefined;
    }
    export namespace DescribeActivityOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActivityOutput) => any;
    }
    export interface DescribeExecutionInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the execution to describe.</p>
                */
            executionArn: string | undefined;
    }
    export namespace DescribeExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeExecutionInput) => any;
    }
    /**
        * <p>Provides details about execution input or output.</p>
        */
    export interface CloudWatchEventsExecutionDataDetails {
            /**
                * <p>Indicates whether input or output was included in the response. Always <code>true</code>
                *       for API calls. </p>
                */
            included?: boolean;
    }
    export namespace CloudWatchEventsExecutionDataDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchEventsExecutionDataDetails) => any;
    }
    export type ExecutionStatus = "ABORTED" | "FAILED" | "RUNNING" | "SUCCEEDED" | "TIMED_OUT";
    export interface DescribeExecutionOutput {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
                */
            executionArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the executed stated machine.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The name of the execution.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name?: string;
            /**
                * <p>The current status of the execution.</p>
                */
            status: ExecutionStatus | string | undefined;
            /**
                * <p>The date the execution is started.</p>
                */
            startDate: Date | undefined;
            /**
                * <p>If the execution has already ended, the date the execution stopped.</p>
                */
            stopDate?: Date;
            /**
                * <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Provides details about execution input or output.</p>
                */
            inputDetails?: CloudWatchEventsExecutionDataDetails;
            /**
                * <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                *          <note>
                *             <p>This field is set only if the execution succeeds. If the execution fails, this field is
                *         null.</p>
                *          </note>
                */
            output?: string;
            /**
                * <p>Provides details about execution input or output.</p>
                */
            outputDetails?: CloudWatchEventsExecutionDataDetails;
            /**
                * <p>The AWS X-Ray trace header that was passed to the execution.</p>
                */
            traceHeader?: string;
    }
    export namespace DescribeExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeExecutionOutput) => any;
    }
    /**
        * <p>The specified execution does not exist.</p>
        */
    export class ExecutionDoesNotExist extends __BaseException {
            readonly name: "ExecutionDoesNotExist";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExecutionDoesNotExist, __BaseException>);
    }
    export interface DescribeStateMachineInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the state machine to describe.</p>
                */
            stateMachineArn: string | undefined;
    }
    export namespace DescribeStateMachineInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStateMachineInput) => any;
    }
    export type StateMachineStatus = "ACTIVE" | "DELETING";
    export interface DescribeStateMachineOutput {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the state machine.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The name of the state machine.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p>The current status of the state machine.</p>
                */
            status?: StateMachineStatus | string;
            /**
                * <p>The Amazon States Language definition of the state machine. See <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a>.</p>
                */
            definition: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used when creating this state machine. (The IAM role
                *       maintains security by granting Step Functions access to AWS resources.)</p>
                */
            roleArn: string | undefined;
            /**
                * <p>The <code>type</code> of the state machine (<code>STANDARD</code> or
                *       <code>EXPRESS</code>).</p>
                */
            type: StateMachineType | string | undefined;
            /**
                * <p>The date the state machine is created.</p>
                */
            creationDate: Date | undefined;
            /**
                * <p>The <code>LoggingConfiguration</code> data type is used to set CloudWatch Logs
                *       options.</p>
                */
            loggingConfiguration?: LoggingConfiguration;
            /**
                * <p>Selects whether AWS X-Ray tracing is enabled.</p>
                */
            tracingConfiguration?: TracingConfiguration;
    }
    export namespace DescribeStateMachineOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStateMachineOutput) => any;
    }
    /**
        * <p>The specified state machine does not exist.</p>
        */
    export class StateMachineDoesNotExist extends __BaseException {
            readonly name: "StateMachineDoesNotExist";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StateMachineDoesNotExist, __BaseException>);
    }
    export interface DescribeStateMachineForExecutionInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the execution you want state machine information for.</p>
                */
            executionArn: string | undefined;
    }
    export namespace DescribeStateMachineForExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStateMachineForExecutionInput) => any;
    }
    export interface DescribeStateMachineForExecutionOutput {
            /**
                * <p>The Amazon Resource Name (ARN) of the state machine associated with the execution.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The name of the state machine associated with the execution.</p>
                */
            name: string | undefined;
            /**
                * <p>The Amazon States Language definition of the state machine. See <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a>.</p>
                */
            definition: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role of the State Machine for the execution. </p>
                */
            roleArn: string | undefined;
            /**
                * <p>The date and time the state machine associated with an execution was updated. For a newly
                *       created state machine, this is the creation date.</p>
                */
            updateDate: Date | undefined;
            /**
                * <p>The <code>LoggingConfiguration</code> data type is used to set CloudWatch Logs
                *       options.</p>
                */
            loggingConfiguration?: LoggingConfiguration;
            /**
                * <p>Selects whether AWS X-Ray tracing is enabled.</p>
                */
            tracingConfiguration?: TracingConfiguration;
    }
    export namespace DescribeStateMachineForExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStateMachineForExecutionOutput) => any;
    }
    export interface GetActivityTaskInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the activity to retrieve tasks from (assigned when you create the task
                *       using <a>CreateActivity</a>.)</p>
                */
            activityArn: string | undefined;
            /**
                * <p>You can provide an arbitrary name in order to identify the worker that the task is
                *       assigned to. This name is used when it is logged in the execution history.</p>
                */
            workerName?: string;
    }
    export namespace GetActivityTaskInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetActivityTaskInput) => any;
    }
    export interface GetActivityTaskOutput {
            /**
                * <p>A token that identifies the scheduled task. This token must be copied and included in
                *       subsequent calls to <a>SendTaskHeartbeat</a>, <a>SendTaskSuccess</a> or
                *         <a>SendTaskFailure</a> in order to report the progress or completion of the
                *       task.</p>
                */
            taskToken?: string;
            /**
                * <p>The string that contains the JSON input data for the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
    }
    export namespace GetActivityTaskOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetActivityTaskOutput) => any;
    }
    export interface GetExecutionHistoryInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the execution.</p>
                */
            executionArn: string | undefined;
            /**
                * <p>The maximum number of results that are returned per call. You can use <code>nextToken</code> to obtain further pages of results.
                *     The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.</p>
                *          <p>This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.</p>
                */
            maxResults?: number;
            /**
                * <p>Lists events in descending order of their <code>timeStamp</code>.</p>
                */
            reverseOrder?: boolean;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
            /**
                * <p>You can select whether execution data (input or output of a history event) is returned.
                *       The default is <code>true</code>.</p>
                */
            includeExecutionData?: boolean;
    }
    export namespace GetExecutionHistoryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExecutionHistoryInput) => any;
    }
    /**
        * <p>Contains details about an abort of an execution.</p>
        */
    export interface ExecutionAbortedEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace ExecutionAbortedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionAbortedEventDetails) => any;
    }
    /**
        * <p>Contains details about an execution failure event.</p>
        */
    export interface ExecutionFailedEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace ExecutionFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about the start of the execution.</p>
        */
    export interface ExecutionStartedEventDetails {
            /**
                * <p>The JSON data input to the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Contains details about the input for an execution history event.</p>
                */
            inputDetails?: HistoryEventExecutionDataDetails;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role used for executing AWS Lambda tasks.</p>
                */
            roleArn?: string;
    }
    export namespace ExecutionStartedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionStartedEventDetails) => any;
    }
    /**
        * <p>Contains details about the successful termination of the execution.</p>
        */
    export interface ExecutionSucceededEventDetails {
            /**
                * <p>The JSON data output by the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            output?: string;
            /**
                * <p>Contains details about the output of an execution history event.</p>
                */
            outputDetails?: HistoryEventExecutionDataDetails;
    }
    export namespace ExecutionSucceededEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionSucceededEventDetails) => any;
    }
    /**
        * <p>Contains details about the execution timeout that occurred during the execution.</p>
        */
    export interface ExecutionTimedOutEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the timeout.</p>
                */
            cause?: string;
    }
    export namespace ExecutionTimedOutEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionTimedOutEventDetails) => any;
    }
    /**
        * <p>Contains details about a lambda function that failed during an execution.</p>
        */
    export interface LambdaFunctionFailedEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace LambdaFunctionFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunctionFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about a lambda function scheduled during an execution.</p>
        */
    export interface LambdaFunctionScheduledEventDetails {
            /**
                * <p>The Amazon Resource Name (ARN) of the scheduled lambda function.</p>
                */
            resource: string | undefined;
            /**
                * <p>The JSON data input to the lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Contains details about input for an execution history event.</p>
                */
            inputDetails?: HistoryEventExecutionDataDetails;
            /**
                * <p>The maximum allowed duration of the lambda function.</p>
                */
            timeoutInSeconds?: number;
    }
    export namespace LambdaFunctionScheduledEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunctionScheduledEventDetails) => any;
    }
    /**
        * <p>Contains details about a failed lambda function schedule event that occurred during an
        *       execution.</p>
        */
    export interface LambdaFunctionScheduleFailedEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace LambdaFunctionScheduleFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunctionScheduleFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about a lambda function that failed to start during an execution.</p>
        */
    export interface LambdaFunctionStartFailedEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace LambdaFunctionStartFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunctionStartFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about a lambda function that successfully terminated during an
        *       execution.</p>
        */
    export interface LambdaFunctionSucceededEventDetails {
            /**
                * <p>The JSON data output by the lambda function. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            output?: string;
            /**
                * <p>Contains details about the output of an execution history event.</p>
                */
            outputDetails?: HistoryEventExecutionDataDetails;
    }
    export namespace LambdaFunctionSucceededEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunctionSucceededEventDetails) => any;
    }
    /**
        * <p>Contains details about a lambda function timeout that occurred during an execution.</p>
        */
    export interface LambdaFunctionTimedOutEventDetails {
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the timeout.</p>
                */
            cause?: string;
    }
    export namespace LambdaFunctionTimedOutEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunctionTimedOutEventDetails) => any;
    }
    /**
        * <p>Contains details about an iteration of a Map state.</p>
        */
    export interface MapIterationEventDetails {
            /**
                * <p>The name of the iteration’s parent Map state.</p>
                */
            name?: string;
            /**
                * <p>The index of the array belonging to the Map state iteration.</p>
                */
            index?: number;
    }
    export namespace MapIterationEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MapIterationEventDetails) => any;
    }
    /**
        * <p>Details about a Map state that was started.</p>
        */
    export interface MapStateStartedEventDetails {
            /**
                * <p>The size of the array for Map state iterations.</p>
                */
            length?: number;
    }
    export namespace MapStateStartedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MapStateStartedEventDetails) => any;
    }
    /**
        * <p>Contains details about a state entered during an execution.</p>
        */
    export interface StateEnteredEventDetails {
            /**
                * <p>The name of the state.</p>
                */
            name: string | undefined;
            /**
                * <p>The string that contains the JSON input data for the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Contains details about the input for an execution history event.</p>
                */
            inputDetails?: HistoryEventExecutionDataDetails;
    }
    export namespace StateEnteredEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StateEnteredEventDetails) => any;
    }
    /**
        * <p>Contains details about an exit from a state during an execution.</p>
        */
    export interface StateExitedEventDetails {
            /**
                * <p>The name of the state.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p>The JSON output data of the state. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            output?: string;
            /**
                * <p>Contains details about the output of an execution history event.</p>
                */
            outputDetails?: HistoryEventExecutionDataDetails;
    }
    export namespace StateExitedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StateExitedEventDetails) => any;
    }
    /**
        * <p>Contains details about a task failure event.</p>
        */
    export interface TaskFailedEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace TaskFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about a task scheduled during an execution.</p>
        */
    export interface TaskScheduledEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
            /**
                * <p>The region of the scheduled task</p>
                */
            region: string | undefined;
            /**
                * <p>The JSON data passed to the resource referenced in a task state.
                *       Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            parameters: string | undefined;
            /**
                * <p>The maximum allowed duration of the task.</p>
                */
            timeoutInSeconds?: number;
            /**
                * <p>The maximum allowed duration between two heartbeats for the task.</p>
                */
            heartbeatInSeconds?: number;
    }
    export namespace TaskScheduledEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskScheduledEventDetails) => any;
    }
    /**
        * <p>Contains details about the start of a task during an execution.</p>
        */
    export interface TaskStartedEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
    }
    export namespace TaskStartedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskStartedEventDetails) => any;
    }
    /**
        * <p>Contains details about a task that failed to start during an execution.</p>
        */
    export interface TaskStartFailedEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace TaskStartFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskStartFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about a task that failed to submit during an execution.</p>
        */
    export interface TaskSubmitFailedEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace TaskSubmitFailedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskSubmitFailedEventDetails) => any;
    }
    /**
        * <p>Contains details about a task submitted to a resource .</p>
        */
    export interface TaskSubmittedEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
            /**
                * <p>The response from a resource when a task has started. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            output?: string;
            /**
                * <p>Contains details about the output of an execution history event.</p>
                */
            outputDetails?: HistoryEventExecutionDataDetails;
    }
    export namespace TaskSubmittedEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskSubmittedEventDetails) => any;
    }
    /**
        * <p>Contains details about the successful completion of a task state.</p>
        */
    export interface TaskSucceededEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
            /**
                * <p>The full JSON response from a resource when a task has succeeded. This response becomes
                *       the output of the related task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            output?: string;
            /**
                * <p>Contains details about the output of an execution history event.</p>
                */
            outputDetails?: HistoryEventExecutionDataDetails;
    }
    export namespace TaskSucceededEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskSucceededEventDetails) => any;
    }
    /**
        * <p>Contains details about a resource timeout that occurred during an execution.</p>
        */
    export interface TaskTimedOutEventDetails {
            /**
                * <p>The action of the resource called by a task state.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The service name of the resource in a task state.</p>
                */
            resource: string | undefined;
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace TaskTimedOutEventDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaskTimedOutEventDetails) => any;
    }
    export type HistoryEventType = "ActivityFailed" | "ActivityScheduleFailed" | "ActivityScheduled" | "ActivityStarted" | "ActivitySucceeded" | "ActivityTimedOut" | "ChoiceStateEntered" | "ChoiceStateExited" | "ExecutionAborted" | "ExecutionFailed" | "ExecutionStarted" | "ExecutionSucceeded" | "ExecutionTimedOut" | "FailStateEntered" | "LambdaFunctionFailed" | "LambdaFunctionScheduleFailed" | "LambdaFunctionScheduled" | "LambdaFunctionStartFailed" | "LambdaFunctionStarted" | "LambdaFunctionSucceeded" | "LambdaFunctionTimedOut" | "MapIterationAborted" | "MapIterationFailed" | "MapIterationStarted" | "MapIterationSucceeded" | "MapStateAborted" | "MapStateEntered" | "MapStateExited" | "MapStateFailed" | "MapStateStarted" | "MapStateSucceeded" | "ParallelStateAborted" | "ParallelStateEntered" | "ParallelStateExited" | "ParallelStateFailed" | "ParallelStateStarted" | "ParallelStateSucceeded" | "PassStateEntered" | "PassStateExited" | "SucceedStateEntered" | "SucceedStateExited" | "TaskFailed" | "TaskScheduled" | "TaskStartFailed" | "TaskStarted" | "TaskStateAborted" | "TaskStateEntered" | "TaskStateExited" | "TaskSubmitFailed" | "TaskSubmitted" | "TaskSucceeded" | "TaskTimedOut" | "WaitStateAborted" | "WaitStateEntered" | "WaitStateExited";
    /**
        * <p>Contains details about the events of an execution.</p>
        */
    export interface HistoryEvent {
            /**
                * <p>The date and time the event occurred.</p>
                */
            timestamp: Date | undefined;
            /**
                * <p>The type of the event.</p>
                */
            type: HistoryEventType | string | undefined;
            /**
                * <p>The id of the event. Events are numbered sequentially, starting at one.</p>
                */
            id: number | undefined;
            /**
                * <p>The id of the previous event.</p>
                */
            previousEventId?: number;
            /**
                * <p>Contains details about an activity that failed during an execution.</p>
                */
            activityFailedEventDetails?: ActivityFailedEventDetails;
            /**
                * <p>Contains details about an activity schedule event that failed during an execution.</p>
                */
            activityScheduleFailedEventDetails?: ActivityScheduleFailedEventDetails;
            /**
                * <p>Contains details about an activity scheduled during an execution.</p>
                */
            activityScheduledEventDetails?: ActivityScheduledEventDetails;
            /**
                * <p>Contains details about the start of an activity during an execution.</p>
                */
            activityStartedEventDetails?: ActivityStartedEventDetails;
            /**
                * <p>Contains details about an activity that successfully terminated during an
                *       execution.</p>
                */
            activitySucceededEventDetails?: ActivitySucceededEventDetails;
            /**
                * <p>Contains details about an activity timeout that occurred during an execution.</p>
                */
            activityTimedOutEventDetails?: ActivityTimedOutEventDetails;
            /**
                * <p>Contains details about the failure of a task.</p>
                */
            taskFailedEventDetails?: TaskFailedEventDetails;
            /**
                * <p>Contains details about a task that was scheduled.</p>
                */
            taskScheduledEventDetails?: TaskScheduledEventDetails;
            /**
                * <p>Contains details about a task that failed to start.</p>
                */
            taskStartFailedEventDetails?: TaskStartFailedEventDetails;
            /**
                * <p>Contains details about a task that was started.</p>
                */
            taskStartedEventDetails?: TaskStartedEventDetails;
            /**
                * <p>Contains details about a task that where the submit failed.</p>
                */
            taskSubmitFailedEventDetails?: TaskSubmitFailedEventDetails;
            /**
                * <p>Contains details about a submitted task.</p>
                */
            taskSubmittedEventDetails?: TaskSubmittedEventDetails;
            /**
                * <p>Contains details about a task that succeeded.</p>
                */
            taskSucceededEventDetails?: TaskSucceededEventDetails;
            /**
                * <p>Contains details about a task that timed out.</p>
                */
            taskTimedOutEventDetails?: TaskTimedOutEventDetails;
            /**
                * <p>Contains details about an execution failure event.</p>
                */
            executionFailedEventDetails?: ExecutionFailedEventDetails;
            /**
                * <p>Contains details about the start of the execution.</p>
                */
            executionStartedEventDetails?: ExecutionStartedEventDetails;
            /**
                * <p>Contains details about the successful termination of the execution.</p>
                */
            executionSucceededEventDetails?: ExecutionSucceededEventDetails;
            /**
                * <p>Contains details about an abort of an execution.</p>
                */
            executionAbortedEventDetails?: ExecutionAbortedEventDetails;
            /**
                * <p>Contains details about the execution timeout that occurred during the execution.</p>
                */
            executionTimedOutEventDetails?: ExecutionTimedOutEventDetails;
            /**
                * <p>Contains details about Map state that was started.</p>
                */
            mapStateStartedEventDetails?: MapStateStartedEventDetails;
            /**
                * <p>Contains details about an iteration of a Map state that was started.</p>
                */
            mapIterationStartedEventDetails?: MapIterationEventDetails;
            /**
                * <p>Contains details about an iteration of a Map state that succeeded.</p>
                */
            mapIterationSucceededEventDetails?: MapIterationEventDetails;
            /**
                * <p>Contains details about an iteration of a Map state that failed.</p>
                */
            mapIterationFailedEventDetails?: MapIterationEventDetails;
            /**
                * <p>Contains details about an iteration of a Map state that was aborted.</p>
                */
            mapIterationAbortedEventDetails?: MapIterationEventDetails;
            /**
                * <p>Contains details about a lambda function that failed during an execution.</p>
                */
            lambdaFunctionFailedEventDetails?: LambdaFunctionFailedEventDetails;
            /**
                * <p>Contains details about a failed lambda function schedule event that occurred during an
                *       execution.</p>
                */
            lambdaFunctionScheduleFailedEventDetails?: LambdaFunctionScheduleFailedEventDetails;
            /**
                * <p>Contains details about a lambda function scheduled during an execution.</p>
                */
            lambdaFunctionScheduledEventDetails?: LambdaFunctionScheduledEventDetails;
            /**
                * <p>Contains details about a lambda function that failed to start during an execution.</p>
                */
            lambdaFunctionStartFailedEventDetails?: LambdaFunctionStartFailedEventDetails;
            /**
                * <p>Contains details about a lambda function that terminated successfully during an
                *       execution.</p>
                */
            lambdaFunctionSucceededEventDetails?: LambdaFunctionSucceededEventDetails;
            /**
                * <p>Contains details about a lambda function timeout that occurred during an execution.</p>
                */
            lambdaFunctionTimedOutEventDetails?: LambdaFunctionTimedOutEventDetails;
            /**
                * <p>Contains details about a state entered during an execution.</p>
                */
            stateEnteredEventDetails?: StateEnteredEventDetails;
            /**
                * <p>Contains details about an exit from a state during an execution.</p>
                */
            stateExitedEventDetails?: StateExitedEventDetails;
    }
    export namespace HistoryEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HistoryEvent) => any;
    }
    export interface GetExecutionHistoryOutput {
            /**
                * <p>The list of events that occurred in the execution.</p>
                */
            events: HistoryEvent[] | undefined;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
    }
    export namespace GetExecutionHistoryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExecutionHistoryOutput) => any;
    }
    /**
        * <p>The provided token is invalid.</p>
        */
    export class InvalidToken extends __BaseException {
            readonly name: "InvalidToken";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidToken, __BaseException>);
    }
    export interface ListActivitiesInput {
            /**
                * <p>The maximum number of results that are returned per call. You can use <code>nextToken</code> to obtain further pages of results.
                *     The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.</p>
                *          <p>This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.</p>
                */
            maxResults?: number;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
    }
    export namespace ListActivitiesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListActivitiesInput) => any;
    }
    export interface ListActivitiesOutput {
            /**
                * <p>The list of activities.</p>
                */
            activities: ActivityListItem[] | undefined;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
    }
    export namespace ListActivitiesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListActivitiesOutput) => any;
    }
    export interface ListExecutionsInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the state machine whose executions is listed.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>If specified, only list the executions whose current execution status matches the given
                *       filter.</p>
                */
            statusFilter?: ExecutionStatus | string;
            /**
                * <p>The maximum number of results that are returned per call. You can use <code>nextToken</code> to obtain further pages of results.
                *     The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.</p>
                *          <p>This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.</p>
                */
            maxResults?: number;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
    }
    export namespace ListExecutionsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExecutionsInput) => any;
    }
    /**
        * <p>Contains details about an execution.</p>
        */
    export interface ExecutionListItem {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
                */
            executionArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the executed state machine.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The name of the execution.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p>The current status of the execution.</p>
                */
            status: ExecutionStatus | string | undefined;
            /**
                * <p>The date the execution started.</p>
                */
            startDate: Date | undefined;
            /**
                * <p>If the execution already ended, the date the execution stopped.</p>
                */
            stopDate?: Date;
    }
    export namespace ExecutionListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionListItem) => any;
    }
    export interface ListExecutionsOutput {
            /**
                * <p>The list of matching executions.</p>
                */
            executions: ExecutionListItem[] | undefined;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
    }
    export namespace ListExecutionsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExecutionsOutput) => any;
    }
    export interface ListStateMachinesInput {
            /**
                * <p>The maximum number of results that are returned per call. You can use <code>nextToken</code> to obtain further pages of results.
                *     The default is 100 and the maximum allowed page size is 1000. A value of 0 uses the default.</p>
                *          <p>This is only an upper limit. The actual number of results returned per call might be fewer than the specified maximum.</p>
                */
            maxResults?: number;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
    }
    export namespace ListStateMachinesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStateMachinesInput) => any;
    }
    /**
        * <p>Contains details about the state machine.</p>
        */
    export interface StateMachineListItem {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the state machine.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The name of the state machine.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name: string | undefined;
            /**
                * <p></p>
                */
            type: StateMachineType | string | undefined;
            /**
                * <p>The date the state machine is created.</p>
                */
            creationDate: Date | undefined;
    }
    export namespace StateMachineListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StateMachineListItem) => any;
    }
    export interface ListStateMachinesOutput {
            stateMachines: StateMachineListItem[] | undefined;
            /**
                * <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page.
                *     Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged. Each pagination token expires after 24 hours. Using an expired pagination token will return an <i>HTTP 400 InvalidToken</i> error.</p>
                */
            nextToken?: string;
    }
    export namespace ListStateMachinesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStateMachinesOutput) => any;
    }
    export interface ListTagsForResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) for the Step Functions state machine or activity.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
    }
    export interface ListTagsForResourceOutput {
            /**
                * <p>An array of tags associated with the resource.</p>
                */
            tags?: Tag[];
    }
    export namespace ListTagsForResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceOutput) => any;
    }
    /**
        * <p>Could not find the referenced resource. Only state machine and activity ARNs are
        *       supported.</p>
        */
    export class ResourceNotFound extends __BaseException {
            readonly name: "ResourceNotFound";
            readonly $fault: "client";
            resourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFound, __BaseException>);
    }
    export interface SendTaskFailureInput {
            /**
                * <p>The token that represents this task. Task tokens are generated by Step Functions when
                *       tasks are assigned to a worker, or in the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html">context object</a> when a
                *       workflow enters a task state. See <a>GetActivityTaskOutput$taskToken</a>.</p>
                */
            taskToken: string | undefined;
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace SendTaskFailureInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTaskFailureInput) => any;
    }
    export interface SendTaskFailureOutput {
    }
    export namespace SendTaskFailureOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTaskFailureOutput) => any;
    }
    export class TaskDoesNotExist extends __BaseException {
            readonly name: "TaskDoesNotExist";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TaskDoesNotExist, __BaseException>);
    }
    export class TaskTimedOut extends __BaseException {
            readonly name: "TaskTimedOut";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TaskTimedOut, __BaseException>);
    }
    export interface SendTaskHeartbeatInput {
            /**
                * <p>The token that represents this task. Task tokens are generated by Step Functions when
                *       tasks are assigned to a worker, or in the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html">context object</a> when a
                *       workflow enters a task state. See <a>GetActivityTaskOutput$taskToken</a>.</p>
                */
            taskToken: string | undefined;
    }
    export namespace SendTaskHeartbeatInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTaskHeartbeatInput) => any;
    }
    export interface SendTaskHeartbeatOutput {
    }
    export namespace SendTaskHeartbeatOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTaskHeartbeatOutput) => any;
    }
    /**
        * <p>The provided JSON output data is invalid.</p>
        */
    export class InvalidOutput extends __BaseException {
            readonly name: "InvalidOutput";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOutput, __BaseException>);
    }
    export interface SendTaskSuccessInput {
            /**
                * <p>The token that represents this task. Task tokens are generated by Step Functions when
                *       tasks are assigned to a worker, or in the <a href="https://docs.aws.amazon.com/step-functions/latest/dg/input-output-contextobject.html">context object</a> when a
                *       workflow enters a task state. See <a>GetActivityTaskOutput$taskToken</a>.</p>
                */
            taskToken: string | undefined;
            /**
                * <p>The JSON output of the task. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            output: string | undefined;
    }
    export namespace SendTaskSuccessInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTaskSuccessInput) => any;
    }
    export interface SendTaskSuccessOutput {
    }
    export namespace SendTaskSuccessOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTaskSuccessOutput) => any;
    }
    /**
        * <p>The execution has the same <code>name</code> as another execution (but a different
        *         <code>input</code>).</p>
        *          <note>
        *             <p>Executions with the same <code>name</code> and <code>input</code> are considered
        *         idempotent.</p>
        *          </note>
        */
    export class ExecutionAlreadyExists extends __BaseException {
            readonly name: "ExecutionAlreadyExists";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExecutionAlreadyExists, __BaseException>);
    }
    /**
        * <p>The maximum number of running executions has been reached. Running executions must end or
        *       be stopped before a new execution can be started.</p>
        */
    export class ExecutionLimitExceeded extends __BaseException {
            readonly name: "ExecutionLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExecutionLimitExceeded, __BaseException>);
    }
    /**
        * <p>The provided JSON input data is invalid.</p>
        */
    export class InvalidExecutionInput extends __BaseException {
            readonly name: "InvalidExecutionInput";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidExecutionInput, __BaseException>);
    }
    export interface StartExecutionInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The name of the execution. This name must be unique for your AWS account, region, and state machine for 90 days. For more information,
                *     see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/limits.html#service-limits-state-machine-executions">
                *     Limits Related to State Machine Executions</a> in the <i>AWS Step Functions Developer Guide</i>.</p>
                *          <p>A name must <i>not</i> contain:</p>
                *          <ul>
                *             <li>
                *                <p>white space</p>
                *             </li>
                *             <li>
                *                <p>brackets <code>< > { } [ ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>wildcard characters <code>? *</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>special characters <code>" # % \ ^ | ~ ` $ & , ; : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>control characters (<code>U+0000-001F</code>, <code>U+007F-009F</code>)</p>
                *             </li>
                *          </ul>
                *          <p>To enable logging with CloudWatch Logs, the name should only contain  0-9, A-Z, a-z, - and _.</p>
                */
            name?: string;
            /**
                * <p>The string that contains the JSON input data for the execution, for example:</p>
                *          <p>
                *             <code>"input": "{\"first_name\" : \"test\"}"</code>
                *          </p>
                *          <note>
                *             <p>If you don't include any JSON input data, you still must include the two braces, for
                *         example: <code>"input": "{}"</code>
                *             </p>
                *          </note>
                *          <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Passes the AWS X-Ray trace header. The trace header can also be passed in the request payload.</p>
                */
            traceHeader?: string;
    }
    export namespace StartExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExecutionInput) => any;
    }
    export interface StartExecutionOutput {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
                */
            executionArn: string | undefined;
            /**
                * <p>The date the execution is started.</p>
                */
            startDate: Date | undefined;
    }
    export namespace StartExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExecutionOutput) => any;
    }
    export interface StartSyncExecutionInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the state machine to execute.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The name of the execution.</p>
                */
            name?: string;
            /**
                * <p>The string that contains the JSON input data for the execution, for example:</p>
                *          <p>
                *             <code>"input": "{\"first_name\" : \"test\"}"</code>
                *          </p>
                *          <note>
                *             <p>If you don't include any JSON input data, you still must include the two braces, for
                *          example: <code>"input": "{}"</code>
                *             </p>
                *          </note>
                *          <p>Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Passes the AWS X-Ray trace header. The trace header can also be passed in the request payload.</p>
                */
            traceHeader?: string;
    }
    export namespace StartSyncExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSyncExecutionInput) => any;
    }
    /**
        * <p>An object that describes workflow billing details.</p>
        */
    export interface BillingDetails {
            /**
                * <p>Billed memory consumption of your workflow, in MB.</p>
                */
            billedMemoryUsedInMB?: number;
            /**
                * <p>Billed duration of your workflow, in milliseconds.</p>
                */
            billedDurationInMilliseconds?: number;
    }
    export namespace BillingDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BillingDetails) => any;
    }
    export type SyncExecutionStatus = "FAILED" | "SUCCEEDED" | "TIMED_OUT";
    export interface StartSyncExecutionOutput {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the execution.</p>
                */
            executionArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the state machine.</p>
                */
            stateMachineArn?: string;
            /**
                * <p>The name of the execution.</p>
                */
            name?: string;
            /**
                * <p>The date the execution is started.</p>
                */
            startDate: Date | undefined;
            /**
                * <p>If the execution has already ended, the date the execution stopped.</p>
                */
            stopDate: Date | undefined;
            /**
                * <p>The current status of the execution.</p>
                */
            status: SyncExecutionStatus | string | undefined;
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
            /**
                * <p>The string that contains the JSON input data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                */
            input?: string;
            /**
                * <p>Provides details about execution input or output.</p>
                */
            inputDetails?: CloudWatchEventsExecutionDataDetails;
            /**
                * <p>The JSON output data of the execution. Length constraints apply to the payload size, and are expressed as bytes in UTF-8 encoding.</p>
                *          <note>
                *             <p>This field is set only if the execution succeeds. If the execution fails, this field is
                *          null.</p>
                *          </note>
                */
            output?: string;
            /**
                * <p>Provides details about execution input or output.</p>
                */
            outputDetails?: CloudWatchEventsExecutionDataDetails;
            /**
                * <p>The AWS X-Ray trace header that was passed to the execution.</p>
                */
            traceHeader?: string;
            /**
                * <p>An object that describes workflow billing details, including billed duration
                *       and memory use.</p>
                */
            billingDetails?: BillingDetails;
    }
    export namespace StartSyncExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSyncExecutionOutput) => any;
    }
    export interface StopExecutionInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the execution to stop.</p>
                */
            executionArn: string | undefined;
            /**
                * <p>The error code of the failure.</p>
                */
            error?: string;
            /**
                * <p>A more detailed explanation of the cause of the failure.</p>
                */
            cause?: string;
    }
    export namespace StopExecutionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopExecutionInput) => any;
    }
    export interface StopExecutionOutput {
            /**
                * <p>The date the execution is stopped.</p>
                */
            stopDate: Date | undefined;
    }
    export namespace StopExecutionOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopExecutionOutput) => any;
    }
    export interface TagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) for the Step Functions state machine or activity.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The list of tags to add to a resource.</p>
                *          <p>Tags may only contain Unicode letters, digits, white space, or these symbols: <code>_ . : / = + - @</code>.</p>
                */
            tags: Tag[] | undefined;
    }
    export namespace TagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceInput) => any;
    }
    export interface TagResourceOutput {
    }
    export namespace TagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceOutput) => any;
    }
    export interface UntagResourceInput {
            /**
                * <p>The Amazon Resource Name (ARN) for the Step Functions state machine or activity.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The list of tags to remove from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceInput) => any;
    }
    export interface UntagResourceOutput {
    }
    export namespace UntagResourceOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceOutput) => any;
    }
    /**
        * <p>Request is missing a required parameter. This error occurs if both <code>definition</code>
        *       and <code>roleArn</code> are not specified.</p>
        */
    export class MissingRequiredParameter extends __BaseException {
            readonly name: "MissingRequiredParameter";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MissingRequiredParameter, __BaseException>);
    }
    export interface UpdateStateMachineInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the state machine.</p>
                */
            stateMachineArn: string | undefined;
            /**
                * <p>The Amazon States Language definition of the state machine. See <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a>.</p>
                */
            definition?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role of the state machine.</p>
                */
            roleArn?: string;
            /**
                * <p>The <code>LoggingConfiguration</code> data type is used to set CloudWatch Logs
                *       options.</p>
                */
            loggingConfiguration?: LoggingConfiguration;
            /**
                * <p>Selects whether AWS X-Ray tracing is enabled.</p>
                */
            tracingConfiguration?: TracingConfiguration;
    }
    export namespace UpdateStateMachineInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStateMachineInput) => any;
    }
    export interface UpdateStateMachineOutput {
            /**
                * <p>The date and time the state machine was updated.</p>
                */
            updateDate: Date | undefined;
    }
    export namespace UpdateStateMachineOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStateMachineOutput) => any;
    }
}

declare module '@aws-sdk/client-sfn/node_modules/@aws-sdk/client-sfn/dist-types/models/SFNServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SFN service.
        */
    export class SFNServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

