// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-ec2-instance-connect' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { SendSerialConsoleSSHPublicKeyCommandInput, SendSerialConsoleSSHPublicKeyCommandOutput } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/commands/SendSerialConsoleSSHPublicKeyCommand";
    import { SendSSHPublicKeyCommandInput, SendSSHPublicKeyCommandOutput } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/commands/SendSSHPublicKeyCommand";
    import { EC2InstanceConnectClient } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/EC2InstanceConnectClient";
    /**
        * <p>Amazon EC2 Instance Connect enables system administrators to publish one-time use SSH
        *             public keys to EC2, providing users a simple and secure way to connect to their
        *             instances.</p>
        */
    export class EC2InstanceConnect extends EC2InstanceConnectClient {
            /**
                * <p>Pushes an SSH public key to the specified EC2 instance. The key remains for 60
                *             seconds, which gives you 60 seconds to establish a serial console connection to the
                *             instance using SSH. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-serial-console.html">EC2 Serial Console</a> in
                *             the <i>Amazon EC2 User Guide</i>.</p>
                */
            sendSerialConsoleSSHPublicKey(args: SendSerialConsoleSSHPublicKeyCommandInput, options?: __HttpHandlerOptions): Promise<SendSerialConsoleSSHPublicKeyCommandOutput>;
            sendSerialConsoleSSHPublicKey(args: SendSerialConsoleSSHPublicKeyCommandInput, cb: (err: any, data?: SendSerialConsoleSSHPublicKeyCommandOutput) => void): void;
            sendSerialConsoleSSHPublicKey(args: SendSerialConsoleSSHPublicKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendSerialConsoleSSHPublicKeyCommandOutput) => void): void;
            /**
                * <p>Pushes an SSH public key to the specified EC2 instance for use by the specified user.
                *             The key remains for 60 seconds. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html">Connect to
                *                 your Linux instance using EC2 Instance Connect</a> in the <i>Amazon EC2
                *                 User Guide</i>.</p>
                */
            sendSSHPublicKey(args: SendSSHPublicKeyCommandInput, options?: __HttpHandlerOptions): Promise<SendSSHPublicKeyCommandOutput>;
            sendSSHPublicKey(args: SendSSHPublicKeyCommandInput, cb: (err: any, data?: SendSSHPublicKeyCommandOutput) => void): void;
            sendSSHPublicKey(args: SendSSHPublicKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendSSHPublicKeyCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/commands/SendSerialConsoleSSHPublicKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EC2InstanceConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/EC2InstanceConnectClient";
    import { SendSerialConsoleSSHPublicKeyRequest, SendSerialConsoleSSHPublicKeyResponse } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/models/models_0";
    export interface SendSerialConsoleSSHPublicKeyCommandInput extends SendSerialConsoleSSHPublicKeyRequest {
    }
    export interface SendSerialConsoleSSHPublicKeyCommandOutput extends SendSerialConsoleSSHPublicKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Pushes an SSH public key to the specified EC2 instance. The key remains for 60
        *             seconds, which gives you 60 seconds to establish a serial console connection to the
        *             instance using SSH. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-serial-console.html">EC2 Serial Console</a> in
        *             the <i>Amazon EC2 User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EC2InstanceConnectClient, SendSerialConsoleSSHPublicKeyCommand } from "@aws-sdk/client-ec2-instance-connect"; // ES Modules import
        * // const { EC2InstanceConnectClient, SendSerialConsoleSSHPublicKeyCommand } = require("@aws-sdk/client-ec2-instance-connect"); // CommonJS import
        * const client = new EC2InstanceConnectClient(config);
        * const command = new SendSerialConsoleSSHPublicKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendSerialConsoleSSHPublicKeyCommandInput} for command's `input` shape.
        * @see {@link SendSerialConsoleSSHPublicKeyCommandOutput} for command's `response` shape.
        * @see {@link EC2InstanceConnectClientResolvedConfig | config} for EC2InstanceConnectClient's `config` shape.
        *
        */
    export class SendSerialConsoleSSHPublicKeyCommand extends $Command<SendSerialConsoleSSHPublicKeyCommandInput, SendSerialConsoleSSHPublicKeyCommandOutput, EC2InstanceConnectClientResolvedConfig> {
            readonly input: SendSerialConsoleSSHPublicKeyCommandInput;
            constructor(input: SendSerialConsoleSSHPublicKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EC2InstanceConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendSerialConsoleSSHPublicKeyCommandInput, SendSerialConsoleSSHPublicKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/commands/SendSSHPublicKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EC2InstanceConnectClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/EC2InstanceConnectClient";
    import { SendSSHPublicKeyRequest, SendSSHPublicKeyResponse } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/models/models_0";
    export interface SendSSHPublicKeyCommandInput extends SendSSHPublicKeyRequest {
    }
    export interface SendSSHPublicKeyCommandOutput extends SendSSHPublicKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Pushes an SSH public key to the specified EC2 instance for use by the specified user.
        *             The key remains for 60 seconds. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Connect-using-EC2-Instance-Connect.html">Connect to
        *                 your Linux instance using EC2 Instance Connect</a> in the <i>Amazon EC2
        *                 User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { EC2InstanceConnectClient, SendSSHPublicKeyCommand } from "@aws-sdk/client-ec2-instance-connect"; // ES Modules import
        * // const { EC2InstanceConnectClient, SendSSHPublicKeyCommand } = require("@aws-sdk/client-ec2-instance-connect"); // CommonJS import
        * const client = new EC2InstanceConnectClient(config);
        * const command = new SendSSHPublicKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendSSHPublicKeyCommandInput} for command's `input` shape.
        * @see {@link SendSSHPublicKeyCommandOutput} for command's `response` shape.
        * @see {@link EC2InstanceConnectClientResolvedConfig | config} for EC2InstanceConnectClient's `config` shape.
        *
        */
    export class SendSSHPublicKeyCommand extends $Command<SendSSHPublicKeyCommandInput, SendSSHPublicKeyCommandOutput, EC2InstanceConnectClientResolvedConfig> {
            readonly input: SendSSHPublicKeyCommandInput;
            constructor(input: SendSSHPublicKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: EC2InstanceConnectClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendSSHPublicKeyCommandInput, SendSSHPublicKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/EC2InstanceConnectClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { SendSerialConsoleSSHPublicKeyCommandInput, SendSerialConsoleSSHPublicKeyCommandOutput } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/commands/SendSerialConsoleSSHPublicKeyCommand";
    import { SendSSHPublicKeyCommandInput, SendSSHPublicKeyCommandOutput } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/commands/SendSSHPublicKeyCommand";
    export type ServiceInputTypes = SendSSHPublicKeyCommandInput | SendSerialConsoleSSHPublicKeyCommandInput;
    export type ServiceOutputTypes = SendSSHPublicKeyCommandOutput | SendSerialConsoleSSHPublicKeyCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type EC2InstanceConnectClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of EC2InstanceConnectClient class constructor that set the region, credentials and other options.
        */
    export interface EC2InstanceConnectClientConfig extends EC2InstanceConnectClientConfigType {
    }
    type EC2InstanceConnectClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of EC2InstanceConnectClient class. This is resolved and normalized from the {@link EC2InstanceConnectClientConfig | constructor configuration interface}.
        */
    export interface EC2InstanceConnectClientResolvedConfig extends EC2InstanceConnectClientResolvedConfigType {
    }
    /**
        * <p>Amazon EC2 Instance Connect enables system administrators to publish one-time use SSH
        *             public keys to EC2, providing users a simple and secure way to connect to their
        *             instances.</p>
        */
    export class EC2InstanceConnectClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, EC2InstanceConnectClientResolvedConfig> {
            /**
                * The resolved configuration of EC2InstanceConnectClient class. This is resolved and normalized from the {@link EC2InstanceConnectClientConfig | constructor configuration interface}.
                */
            readonly config: EC2InstanceConnectClientResolvedConfig;
            constructor(configuration: EC2InstanceConnectClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { EC2InstanceConnectServiceException as __BaseException } from "@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/models/EC2InstanceConnectServiceException";
    /**
        * <p>Either your AWS credentials are not valid or you do not have access to the EC2 instance.</p>
        */
    export class AuthException extends __BaseException {
            readonly name: "AuthException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthException, __BaseException>);
    }
    /**
        * <p>The specified instance was not found.</p>
        */
    export class EC2InstanceNotFoundException extends __BaseException {
            readonly name: "EC2InstanceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EC2InstanceNotFoundException, __BaseException>);
    }
    /**
        * <p>Unable to connect because the instance is not in a valid state.
        *             Connecting to a stopped or terminated instance is not supported. If the instance is stopped,
        *             start your instance, and try to connect again.</p>
        */
    export class EC2InstanceStateInvalidException extends __BaseException {
            readonly name: "EC2InstanceStateInvalidException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EC2InstanceStateInvalidException, __BaseException>);
    }
    /**
        * <p>The instance type is not supported for connecting via the serial console. Only Nitro
        *             instance types are currently supported.</p>
        */
    export class EC2InstanceTypeInvalidException extends __BaseException {
            readonly name: "EC2InstanceTypeInvalidException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EC2InstanceTypeInvalidException, __BaseException>);
    }
    /**
        * <p>The instance is currently unavailable. Wait a few minutes and try again.</p>
        */
    export class EC2InstanceUnavailableException extends __BaseException {
            readonly name: "EC2InstanceUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EC2InstanceUnavailableException, __BaseException>);
    }
    /**
        * <p>One of the parameters is not valid.</p>
        */
    export class InvalidArgsException extends __BaseException {
            readonly name: "InvalidArgsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidArgsException, __BaseException>);
    }
    export interface SendSerialConsoleSSHPublicKeyRequest {
            /**
                * <p>The ID of the EC2 instance.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The serial port of the EC2 instance. Currently only port 0 is supported.</p>
                *         <p>Default: 0</p>
                */
            SerialPort?: number;
            /**
                * <p>The public key material. To use the public key, you must have the matching private
                *             key. For information about the supported key formats and lengths, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#how-to-generate-your-own-key-and-import-it-to-aws">Requirements for key pairs</a> in the <i>Amazon EC2 User
                *             Guide</i>.</p>
                */
            SSHPublicKey: string | undefined;
    }
    export namespace SendSerialConsoleSSHPublicKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendSerialConsoleSSHPublicKeyRequest) => any;
    }
    export interface SendSerialConsoleSSHPublicKeyResponse {
            /**
                * <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
                */
            RequestId?: string;
            /**
                * <p>Is true if the request succeeds and an error otherwise.</p>
                */
            Success?: boolean;
    }
    export namespace SendSerialConsoleSSHPublicKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendSerialConsoleSSHPublicKeyResponse) => any;
    }
    /**
        * <p>Your account is not authorized to use the EC2 Serial Console. To authorize your
        *             account, run the EnableSerialConsoleAccess API. For more information, see
        *             <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_EnableSerialConsoleAccess.html">EnableSerialConsoleAccess</a> in the <i>Amazon EC2 API Reference</i>.</p>
        */
    export class SerialConsoleAccessDisabledException extends __BaseException {
            readonly name: "SerialConsoleAccessDisabledException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SerialConsoleAccessDisabledException, __BaseException>);
    }
    /**
        * <p>The instance currently has 1 active serial console session. Only 1 session is supported at a time.</p>
        */
    export class SerialConsoleSessionLimitExceededException extends __BaseException {
            readonly name: "SerialConsoleSessionLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SerialConsoleSessionLimitExceededException, __BaseException>);
    }
    /**
        * <p>Unable to start a serial console session. Please try again.</p>
        */
    export class SerialConsoleSessionUnavailableException extends __BaseException {
            readonly name: "SerialConsoleSessionUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SerialConsoleSessionUnavailableException, __BaseException>);
    }
    /**
        * <p>The service encountered an error. Follow the instructions in the error message and try again.</p>
        */
    export class ServiceException extends __BaseException {
            readonly name: "ServiceException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceException, __BaseException>);
    }
    /**
        * <p>The requests were made too frequently and have been throttled. Wait a while and try again.
        *             To increase the limit on your request frequency, contact AWS Support.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export interface SendSSHPublicKeyRequest {
            /**
                * <p>The ID of the EC2 instance.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The OS user on the EC2 instance for whom the key can be used to authenticate.</p>
                */
            InstanceOSUser: string | undefined;
            /**
                * <p>The public key material. To use the public key, you must have the matching private key.</p>
                */
            SSHPublicKey: string | undefined;
            /**
                * <p>The Availability Zone in which the EC2 instance was launched.</p>
                */
            AvailabilityZone?: string;
    }
    export namespace SendSSHPublicKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendSSHPublicKeyRequest) => any;
    }
    export interface SendSSHPublicKeyResponse {
            /**
                * <p>The ID of the request. Please provide this ID when contacting AWS Support for assistance.</p>
                */
            RequestId?: string;
            /**
                * <p>Is true if the request succeeds and an error otherwise.</p>
                */
            Success?: boolean;
    }
    export namespace SendSSHPublicKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendSSHPublicKeyResponse) => any;
    }
}

declare module '@aws-sdk/client-ec2-instance-connect/node_modules/@aws-sdk/client-ec2-instance-connect/dist-types/models/EC2InstanceConnectServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from EC2InstanceConnect service.
        */
    export class EC2InstanceConnectServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

