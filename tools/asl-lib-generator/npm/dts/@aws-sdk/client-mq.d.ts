// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-mq' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateBrokerCommandInput, CreateBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateBrokerCommand";
    import { CreateConfigurationCommandInput, CreateConfigurationCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateConfigurationCommand";
    import { CreateTagsCommandInput, CreateTagsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateTagsCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateUserCommand";
    import { DeleteBrokerCommandInput, DeleteBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteBrokerCommand";
    import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteTagsCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteUserCommand";
    import { DescribeBrokerCommandInput, DescribeBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerCommand";
    import { DescribeBrokerEngineTypesCommandInput, DescribeBrokerEngineTypesCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerEngineTypesCommand";
    import { DescribeBrokerInstanceOptionsCommandInput, DescribeBrokerInstanceOptionsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerInstanceOptionsCommand";
    import { DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeConfigurationCommand";
    import { DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeConfigurationRevisionCommand";
    import { DescribeUserCommandInput, DescribeUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeUserCommand";
    import { ListBrokersCommandInput, ListBrokersCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListBrokersCommand";
    import { ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListConfigurationRevisionsCommand";
    import { ListConfigurationsCommandInput, ListConfigurationsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListConfigurationsCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListTagsCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListUsersCommand";
    import { RebootBrokerCommandInput, RebootBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/RebootBrokerCommand";
    import { UpdateBrokerCommandInput, UpdateBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateBrokerCommand";
    import { UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateConfigurationCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateUserCommand";
    import { MqClient } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    /**
        * <p>Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.</p>
        */
    export class Mq extends MqClient {
            /**
                * <p>Creates a broker. Note: This API is asynchronous.</p> <p>To create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.</p> <ul><li><p>ec2:CreateNetworkInterface</p> <p>This permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.</p></li> <li><p>ec2:CreateNetworkInterfacePermission</p> <p>This permission is required to attach the ENI to the broker instance.</p></li> <li><p>ec2:DeleteNetworkInterface</p></li> <li><p>ec2:DeleteNetworkInterfacePermission</p></li> <li><p>ec2:DetachNetworkInterface</p></li> <li><p>ec2:DescribeInternetGateways</p></li> <li><p>ec2:DescribeNetworkInterfaces</p></li> <li><p>ec2:DescribeNetworkInterfacePermissions</p></li> <li><p>ec2:DescribeRouteTables</p></li> <li><p>ec2:DescribeSecurityGroups</p></li> <li><p>ec2:DescribeSubnets</p></li> <li><p>ec2:DescribeVpcs</p></li></ul> <p>For more information, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user">Create an IAM User and Get Your AWS Credentials</a> and <a href="https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface">Never Modify or Delete the Amazon MQ Elastic Network Interface</a> in the <i>Amazon MQ Developer Guide</i>.</p>
                */
            createBroker(args: CreateBrokerCommandInput, options?: __HttpHandlerOptions): Promise<CreateBrokerCommandOutput>;
            createBroker(args: CreateBrokerCommandInput, cb: (err: any, data?: CreateBrokerCommandOutput) => void): void;
            createBroker(args: CreateBrokerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBrokerCommandOutput) => void): void;
            /**
                * <p>Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).</p>
                */
            createConfiguration(args: CreateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationCommandOutput>;
            createConfiguration(args: CreateConfigurationCommandInput, cb: (err: any, data?: CreateConfigurationCommandOutput) => void): void;
            createConfiguration(args: CreateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationCommandOutput) => void): void;
            /**
                * <p>Add a tag to a resource.</p>
                */
            createTags(args: CreateTagsCommandInput, options?: __HttpHandlerOptions): Promise<CreateTagsCommandOutput>;
            createTags(args: CreateTagsCommandInput, cb: (err: any, data?: CreateTagsCommandOutput) => void): void;
            createTags(args: CreateTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTagsCommandOutput) => void): void;
            /**
                * <p>Creates an ActiveMQ user.</p>
                */
            createUser(args: CreateUserCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserCommandOutput>;
            createUser(args: CreateUserCommandInput, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            createUser(args: CreateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            /**
                * <p>Deletes a broker. Note: This API is asynchronous.</p>
                */
            deleteBroker(args: DeleteBrokerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBrokerCommandOutput>;
            deleteBroker(args: DeleteBrokerCommandInput, cb: (err: any, data?: DeleteBrokerCommandOutput) => void): void;
            deleteBroker(args: DeleteBrokerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBrokerCommandOutput) => void): void;
            /**
                * <p>Removes a tag from a resource.</p>
                */
            deleteTags(args: DeleteTagsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTagsCommandOutput>;
            deleteTags(args: DeleteTagsCommandInput, cb: (err: any, data?: DeleteTagsCommandOutput) => void): void;
            deleteTags(args: DeleteTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTagsCommandOutput) => void): void;
            /**
                * <p>Deletes an ActiveMQ user.</p>
                */
            deleteUser(args: DeleteUserCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserCommandOutput>;
            deleteUser(args: DeleteUserCommandInput, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            deleteUser(args: DeleteUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified broker.</p>
                */
            describeBroker(args: DescribeBrokerCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBrokerCommandOutput>;
            describeBroker(args: DescribeBrokerCommandInput, cb: (err: any, data?: DescribeBrokerCommandOutput) => void): void;
            describeBroker(args: DescribeBrokerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBrokerCommandOutput) => void): void;
            /**
                * <p>Describe available engine types and versions.</p>
                */
            describeBrokerEngineTypes(args: DescribeBrokerEngineTypesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBrokerEngineTypesCommandOutput>;
            describeBrokerEngineTypes(args: DescribeBrokerEngineTypesCommandInput, cb: (err: any, data?: DescribeBrokerEngineTypesCommandOutput) => void): void;
            describeBrokerEngineTypes(args: DescribeBrokerEngineTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBrokerEngineTypesCommandOutput) => void): void;
            /**
                * <p>Describe available broker instance options.</p>
                */
            describeBrokerInstanceOptions(args: DescribeBrokerInstanceOptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBrokerInstanceOptionsCommandOutput>;
            describeBrokerInstanceOptions(args: DescribeBrokerInstanceOptionsCommandInput, cb: (err: any, data?: DescribeBrokerInstanceOptionsCommandOutput) => void): void;
            describeBrokerInstanceOptions(args: DescribeBrokerInstanceOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBrokerInstanceOptionsCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified configuration.</p>
                */
            describeConfiguration(args: DescribeConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationCommandOutput>;
            describeConfiguration(args: DescribeConfigurationCommandInput, cb: (err: any, data?: DescribeConfigurationCommandOutput) => void): void;
            describeConfiguration(args: DescribeConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns the specified configuration revision for the specified configuration.</p>
                */
            describeConfigurationRevision(args: DescribeConfigurationRevisionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationRevisionCommandOutput>;
            describeConfigurationRevision(args: DescribeConfigurationRevisionCommandInput, cb: (err: any, data?: DescribeConfigurationRevisionCommandOutput) => void): void;
            describeConfigurationRevision(args: DescribeConfigurationRevisionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationRevisionCommandOutput) => void): void;
            /**
                * <p>Returns information about an ActiveMQ user.</p>
                */
            describeUser(args: DescribeUserCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserCommandOutput>;
            describeUser(args: DescribeUserCommandInput, cb: (err: any, data?: DescribeUserCommandOutput) => void): void;
            describeUser(args: DescribeUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserCommandOutput) => void): void;
            /**
                * <p>Returns a list of all brokers.</p>
                */
            listBrokers(args: ListBrokersCommandInput, options?: __HttpHandlerOptions): Promise<ListBrokersCommandOutput>;
            listBrokers(args: ListBrokersCommandInput, cb: (err: any, data?: ListBrokersCommandOutput) => void): void;
            listBrokers(args: ListBrokersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListBrokersCommandOutput) => void): void;
            /**
                * <p>Returns a list of all revisions for the specified configuration.</p>
                */
            listConfigurationRevisions(args: ListConfigurationRevisionsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationRevisionsCommandOutput>;
            listConfigurationRevisions(args: ListConfigurationRevisionsCommandInput, cb: (err: any, data?: ListConfigurationRevisionsCommandOutput) => void): void;
            listConfigurationRevisions(args: ListConfigurationRevisionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationRevisionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all configurations.</p>
                */
            listConfigurations(args: ListConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationsCommandOutput>;
            listConfigurations(args: ListConfigurationsCommandInput, cb: (err: any, data?: ListConfigurationsCommandOutput) => void): void;
            listConfigurations(args: ListConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationsCommandOutput) => void): void;
            /**
                * <p>Lists tags for a resource.</p>
                */
            listTags(args: ListTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsCommandOutput>;
            listTags(args: ListTagsCommandInput, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            listTags(args: ListTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all ActiveMQ users.</p>
                */
            listUsers(args: ListUsersCommandInput, options?: __HttpHandlerOptions): Promise<ListUsersCommandOutput>;
            listUsers(args: ListUsersCommandInput, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            listUsers(args: ListUsersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            /**
                * <p>Reboots a broker. Note: This API is asynchronous.</p>
                */
            rebootBroker(args: RebootBrokerCommandInput, options?: __HttpHandlerOptions): Promise<RebootBrokerCommandOutput>;
            rebootBroker(args: RebootBrokerCommandInput, cb: (err: any, data?: RebootBrokerCommandOutput) => void): void;
            rebootBroker(args: RebootBrokerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootBrokerCommandOutput) => void): void;
            /**
                * <p>Adds a pending configuration change to a broker.</p>
                */
            updateBroker(args: UpdateBrokerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBrokerCommandOutput>;
            updateBroker(args: UpdateBrokerCommandInput, cb: (err: any, data?: UpdateBrokerCommandOutput) => void): void;
            updateBroker(args: UpdateBrokerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBrokerCommandOutput) => void): void;
            /**
                * <p>Updates the specified configuration.</p>
                */
            updateConfiguration(args: UpdateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationCommandOutput>;
            updateConfiguration(args: UpdateConfigurationCommandInput, cb: (err: any, data?: UpdateConfigurationCommandOutput) => void): void;
            updateConfiguration(args: UpdateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates the information for an ActiveMQ user.</p>
                */
            updateUser(args: UpdateUserCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserCommandOutput>;
            updateUser(args: UpdateUserCommandInput, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
            updateUser(args: UpdateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateBrokerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateBrokerRequest, CreateBrokerResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface CreateBrokerCommandInput extends CreateBrokerRequest {
    }
    export interface CreateBrokerCommandOutput extends CreateBrokerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a broker. Note: This API is asynchronous.</p> <p>To create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.</p> <ul><li><p>ec2:CreateNetworkInterface</p> <p>This permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.</p></li> <li><p>ec2:CreateNetworkInterfacePermission</p> <p>This permission is required to attach the ENI to the broker instance.</p></li> <li><p>ec2:DeleteNetworkInterface</p></li> <li><p>ec2:DeleteNetworkInterfacePermission</p></li> <li><p>ec2:DetachNetworkInterface</p></li> <li><p>ec2:DescribeInternetGateways</p></li> <li><p>ec2:DescribeNetworkInterfaces</p></li> <li><p>ec2:DescribeNetworkInterfacePermissions</p></li> <li><p>ec2:DescribeRouteTables</p></li> <li><p>ec2:DescribeSecurityGroups</p></li> <li><p>ec2:DescribeSubnets</p></li> <li><p>ec2:DescribeVpcs</p></li></ul> <p>For more information, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user">Create an IAM User and Get Your AWS Credentials</a> and <a href="https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface">Never Modify or Delete the Amazon MQ Elastic Network Interface</a> in the <i>Amazon MQ Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, CreateBrokerCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, CreateBrokerCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new CreateBrokerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBrokerCommandInput} for command's `input` shape.
        * @see {@link CreateBrokerCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class CreateBrokerCommand extends $Command<CreateBrokerCommandInput, CreateBrokerCommandOutput, MqClientResolvedConfig> {
            readonly input: CreateBrokerCommandInput;
            constructor(input: CreateBrokerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBrokerCommandInput, CreateBrokerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConfigurationRequest, CreateConfigurationResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface CreateConfigurationCommandInput extends CreateConfigurationRequest {
    }
    export interface CreateConfigurationCommandOutput extends CreateConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, CreateConfigurationCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, CreateConfigurationCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new CreateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class CreateConfigurationCommand extends $Command<CreateConfigurationCommandInput, CreateConfigurationCommandOutput, MqClientResolvedConfig> {
            readonly input: CreateConfigurationCommandInput;
            constructor(input: CreateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationCommandInput, CreateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTagsRequest } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface CreateTagsCommandInput extends CreateTagsRequest {
    }
    export interface CreateTagsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Add a tag to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, CreateTagsCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, CreateTagsCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new CreateTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTagsCommandInput} for command's `input` shape.
        * @see {@link CreateTagsCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class CreateTagsCommand extends $Command<CreateTagsCommandInput, CreateTagsCommandOutput, MqClientResolvedConfig> {
            readonly input: CreateTagsCommandInput;
            constructor(input: CreateTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTagsCommandInput, CreateTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateUserRequest, CreateUserResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface CreateUserCommandInput extends CreateUserRequest {
    }
    export interface CreateUserCommandOutput extends CreateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an ActiveMQ user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, CreateUserCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, CreateUserCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new CreateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserCommandInput} for command's `input` shape.
        * @see {@link CreateUserCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class CreateUserCommand extends $Command<CreateUserCommandInput, CreateUserCommandOutput, MqClientResolvedConfig> {
            readonly input: CreateUserCommandInput;
            constructor(input: CreateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserCommandInput, CreateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteBrokerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteBrokerRequest, DeleteBrokerResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DeleteBrokerCommandInput extends DeleteBrokerRequest {
    }
    export interface DeleteBrokerCommandOutput extends DeleteBrokerResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a broker. Note: This API is asynchronous.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DeleteBrokerCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DeleteBrokerCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DeleteBrokerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBrokerCommandInput} for command's `input` shape.
        * @see {@link DeleteBrokerCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DeleteBrokerCommand extends $Command<DeleteBrokerCommandInput, DeleteBrokerCommandOutput, MqClientResolvedConfig> {
            readonly input: DeleteBrokerCommandInput;
            constructor(input: DeleteBrokerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBrokerCommandInput, DeleteBrokerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTagsRequest } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DeleteTagsCommandInput extends DeleteTagsRequest {
    }
    export interface DeleteTagsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes a tag from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DeleteTagsCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DeleteTagsCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DeleteTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTagsCommandInput} for command's `input` shape.
        * @see {@link DeleteTagsCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DeleteTagsCommand extends $Command<DeleteTagsCommandInput, DeleteTagsCommandOutput, MqClientResolvedConfig> {
            readonly input: DeleteTagsCommandInput;
            constructor(input: DeleteTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTagsCommandInput, DeleteTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteUserRequest, DeleteUserResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DeleteUserCommandInput extends DeleteUserRequest {
    }
    export interface DeleteUserCommandOutput extends DeleteUserResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an ActiveMQ user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DeleteUserCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DeleteUserCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DeleteUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserCommandInput} for command's `input` shape.
        * @see {@link DeleteUserCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DeleteUserCommand extends $Command<DeleteUserCommandInput, DeleteUserCommandOutput, MqClientResolvedConfig> {
            readonly input: DeleteUserCommandInput;
            constructor(input: DeleteUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserCommandInput, DeleteUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeBrokerRequest, DescribeBrokerResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DescribeBrokerCommandInput extends DescribeBrokerRequest {
    }
    export interface DescribeBrokerCommandOutput extends DescribeBrokerResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified broker.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DescribeBrokerCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DescribeBrokerCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DescribeBrokerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBrokerCommandInput} for command's `input` shape.
        * @see {@link DescribeBrokerCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DescribeBrokerCommand extends $Command<DescribeBrokerCommandInput, DescribeBrokerCommandOutput, MqClientResolvedConfig> {
            readonly input: DescribeBrokerCommandInput;
            constructor(input: DescribeBrokerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBrokerCommandInput, DescribeBrokerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerEngineTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeBrokerEngineTypesRequest, DescribeBrokerEngineTypesResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DescribeBrokerEngineTypesCommandInput extends DescribeBrokerEngineTypesRequest {
    }
    export interface DescribeBrokerEngineTypesCommandOutput extends DescribeBrokerEngineTypesResponse, __MetadataBearer {
    }
    /**
        * <p>Describe available engine types and versions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DescribeBrokerEngineTypesCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DescribeBrokerEngineTypesCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DescribeBrokerEngineTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBrokerEngineTypesCommandInput} for command's `input` shape.
        * @see {@link DescribeBrokerEngineTypesCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DescribeBrokerEngineTypesCommand extends $Command<DescribeBrokerEngineTypesCommandInput, DescribeBrokerEngineTypesCommandOutput, MqClientResolvedConfig> {
            readonly input: DescribeBrokerEngineTypesCommandInput;
            constructor(input: DescribeBrokerEngineTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBrokerEngineTypesCommandInput, DescribeBrokerEngineTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerInstanceOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeBrokerInstanceOptionsRequest, DescribeBrokerInstanceOptionsResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DescribeBrokerInstanceOptionsCommandInput extends DescribeBrokerInstanceOptionsRequest {
    }
    export interface DescribeBrokerInstanceOptionsCommandOutput extends DescribeBrokerInstanceOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describe available broker instance options.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DescribeBrokerInstanceOptionsCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DescribeBrokerInstanceOptionsCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DescribeBrokerInstanceOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBrokerInstanceOptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeBrokerInstanceOptionsCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DescribeBrokerInstanceOptionsCommand extends $Command<DescribeBrokerInstanceOptionsCommandInput, DescribeBrokerInstanceOptionsCommandOutput, MqClientResolvedConfig> {
            readonly input: DescribeBrokerInstanceOptionsCommandInput;
            constructor(input: DescribeBrokerInstanceOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBrokerInstanceOptionsCommandInput, DescribeBrokerInstanceOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeConfigurationRequest, DescribeConfigurationResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DescribeConfigurationCommandInput extends DescribeConfigurationRequest {
    }
    export interface DescribeConfigurationCommandOutput extends DescribeConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DescribeConfigurationCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DescribeConfigurationCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DescribeConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DescribeConfigurationCommand extends $Command<DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput, MqClientResolvedConfig> {
            readonly input: DescribeConfigurationCommandInput;
            constructor(input: DescribeConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeConfigurationRevisionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeConfigurationRevisionRequest, DescribeConfigurationRevisionResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DescribeConfigurationRevisionCommandInput extends DescribeConfigurationRevisionRequest {
    }
    export interface DescribeConfigurationRevisionCommandOutput extends DescribeConfigurationRevisionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the specified configuration revision for the specified configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DescribeConfigurationRevisionCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DescribeConfigurationRevisionCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DescribeConfigurationRevisionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationRevisionCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationRevisionCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DescribeConfigurationRevisionCommand extends $Command<DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput, MqClientResolvedConfig> {
            readonly input: DescribeConfigurationRevisionCommandInput;
            constructor(input: DescribeConfigurationRevisionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeUserRequest, DescribeUserResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface DescribeUserCommandInput extends DescribeUserRequest {
    }
    export interface DescribeUserCommandOutput extends DescribeUserResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about an ActiveMQ user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, DescribeUserCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, DescribeUserCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new DescribeUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserCommandInput} for command's `input` shape.
        * @see {@link DescribeUserCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class DescribeUserCommand extends $Command<DescribeUserCommandInput, DescribeUserCommandOutput, MqClientResolvedConfig> {
            readonly input: DescribeUserCommandInput;
            constructor(input: DescribeUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserCommandInput, DescribeUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListBrokersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListBrokersRequest, ListBrokersResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface ListBrokersCommandInput extends ListBrokersRequest {
    }
    export interface ListBrokersCommandOutput extends ListBrokersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all brokers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, ListBrokersCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, ListBrokersCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new ListBrokersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListBrokersCommandInput} for command's `input` shape.
        * @see {@link ListBrokersCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class ListBrokersCommand extends $Command<ListBrokersCommandInput, ListBrokersCommandOutput, MqClientResolvedConfig> {
            readonly input: ListBrokersCommandInput;
            constructor(input: ListBrokersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListBrokersCommandInput, ListBrokersCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListConfigurationRevisionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListConfigurationRevisionsRequest, ListConfigurationRevisionsResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface ListConfigurationRevisionsCommandInput extends ListConfigurationRevisionsRequest {
    }
    export interface ListConfigurationRevisionsCommandOutput extends ListConfigurationRevisionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all revisions for the specified configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, ListConfigurationRevisionsCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, ListConfigurationRevisionsCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new ListConfigurationRevisionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigurationRevisionsCommandInput} for command's `input` shape.
        * @see {@link ListConfigurationRevisionsCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class ListConfigurationRevisionsCommand extends $Command<ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput, MqClientResolvedConfig> {
            readonly input: ListConfigurationRevisionsCommandInput;
            constructor(input: ListConfigurationRevisionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListConfigurationsRequest, ListConfigurationsResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface ListConfigurationsCommandInput extends ListConfigurationsRequest {
    }
    export interface ListConfigurationsCommandOutput extends ListConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all configurations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, ListConfigurationsCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, ListConfigurationsCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new ListConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class ListConfigurationsCommand extends $Command<ListConfigurationsCommandInput, ListConfigurationsCommandOutput, MqClientResolvedConfig> {
            readonly input: ListConfigurationsCommandInput;
            constructor(input: ListConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigurationsCommandInput, ListConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsRequest, ListTagsResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface ListTagsCommandInput extends ListTagsRequest {
    }
    export interface ListTagsCommandOutput extends ListTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists tags for a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, ListTagsCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, ListTagsCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new ListTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsCommandInput} for command's `input` shape.
        * @see {@link ListTagsCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class ListTagsCommand extends $Command<ListTagsCommandInput, ListTagsCommandOutput, MqClientResolvedConfig> {
            readonly input: ListTagsCommandInput;
            constructor(input: ListTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsCommandInput, ListTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListUsersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListUsersRequest, ListUsersResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface ListUsersCommandInput extends ListUsersRequest {
    }
    export interface ListUsersCommandOutput extends ListUsersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all ActiveMQ users.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, ListUsersCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, ListUsersCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new ListUsersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUsersCommandInput} for command's `input` shape.
        * @see {@link ListUsersCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class ListUsersCommand extends $Command<ListUsersCommandInput, ListUsersCommandOutput, MqClientResolvedConfig> {
            readonly input: ListUsersCommandInput;
            constructor(input: ListUsersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUsersCommandInput, ListUsersCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/RebootBrokerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RebootBrokerRequest, RebootBrokerResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface RebootBrokerCommandInput extends RebootBrokerRequest {
    }
    export interface RebootBrokerCommandOutput extends RebootBrokerResponse, __MetadataBearer {
    }
    /**
        * <p>Reboots a broker. Note: This API is asynchronous.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, RebootBrokerCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, RebootBrokerCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new RebootBrokerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootBrokerCommandInput} for command's `input` shape.
        * @see {@link RebootBrokerCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class RebootBrokerCommand extends $Command<RebootBrokerCommandInput, RebootBrokerCommandOutput, MqClientResolvedConfig> {
            readonly input: RebootBrokerCommandInput;
            constructor(input: RebootBrokerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootBrokerCommandInput, RebootBrokerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateBrokerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateBrokerRequest, UpdateBrokerResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface UpdateBrokerCommandInput extends UpdateBrokerRequest {
    }
    export interface UpdateBrokerCommandOutput extends UpdateBrokerResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a pending configuration change to a broker.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, UpdateBrokerCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, UpdateBrokerCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new UpdateBrokerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBrokerCommandInput} for command's `input` shape.
        * @see {@link UpdateBrokerCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class UpdateBrokerCommand extends $Command<UpdateBrokerCommandInput, UpdateBrokerCommandOutput, MqClientResolvedConfig> {
            readonly input: UpdateBrokerCommandInput;
            constructor(input: UpdateBrokerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBrokerCommandInput, UpdateBrokerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConfigurationRequest, UpdateConfigurationResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface UpdateConfigurationCommandInput extends UpdateConfigurationRequest {
    }
    export interface UpdateConfigurationCommandOutput extends UpdateConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, UpdateConfigurationCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, UpdateConfigurationCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new UpdateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class UpdateConfigurationCommand extends $Command<UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput, MqClientResolvedConfig> {
            readonly input: UpdateConfigurationCommandInput;
            constructor(input: UpdateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateUserRequest, UpdateUserResponse } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0";
    import { MqClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient";
    export interface UpdateUserCommandInput extends UpdateUserRequest {
    }
    export interface UpdateUserCommandOutput extends UpdateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the information for an ActiveMQ user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MqClient, UpdateUserCommand } from "@aws-sdk/client-mq"; // ES Modules import
        * // const { MqClient, UpdateUserCommand } = require("@aws-sdk/client-mq"); // CommonJS import
        * const client = new MqClient(config);
        * const command = new UpdateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserCommandInput} for command's `input` shape.
        * @see {@link UpdateUserCommandOutput} for command's `response` shape.
        * @see {@link MqClientResolvedConfig | config} for MqClient's `config` shape.
        *
        */
    export class UpdateUserCommand extends $Command<UpdateUserCommandInput, UpdateUserCommandOutput, MqClientResolvedConfig> {
            readonly input: UpdateUserCommandInput;
            constructor(input: UpdateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MqClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserCommandInput, UpdateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/MqClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateBrokerCommandInput, CreateBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateBrokerCommand";
    import { CreateConfigurationCommandInput, CreateConfigurationCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateConfigurationCommand";
    import { CreateTagsCommandInput, CreateTagsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateTagsCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/CreateUserCommand";
    import { DeleteBrokerCommandInput, DeleteBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteBrokerCommand";
    import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteTagsCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DeleteUserCommand";
    import { DescribeBrokerCommandInput, DescribeBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerCommand";
    import { DescribeBrokerEngineTypesCommandInput, DescribeBrokerEngineTypesCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerEngineTypesCommand";
    import { DescribeBrokerInstanceOptionsCommandInput, DescribeBrokerInstanceOptionsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeBrokerInstanceOptionsCommand";
    import { DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeConfigurationCommand";
    import { DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeConfigurationRevisionCommand";
    import { DescribeUserCommandInput, DescribeUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/DescribeUserCommand";
    import { ListBrokersCommandInput, ListBrokersCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListBrokersCommand";
    import { ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListConfigurationRevisionsCommand";
    import { ListConfigurationsCommandInput, ListConfigurationsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListConfigurationsCommand";
    import { ListTagsCommandInput, ListTagsCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListTagsCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/ListUsersCommand";
    import { RebootBrokerCommandInput, RebootBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/RebootBrokerCommand";
    import { UpdateBrokerCommandInput, UpdateBrokerCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateBrokerCommand";
    import { UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateConfigurationCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/commands/UpdateUserCommand";
    export type ServiceInputTypes = CreateBrokerCommandInput | CreateConfigurationCommandInput | CreateTagsCommandInput | CreateUserCommandInput | DeleteBrokerCommandInput | DeleteTagsCommandInput | DeleteUserCommandInput | DescribeBrokerCommandInput | DescribeBrokerEngineTypesCommandInput | DescribeBrokerInstanceOptionsCommandInput | DescribeConfigurationCommandInput | DescribeConfigurationRevisionCommandInput | DescribeUserCommandInput | ListBrokersCommandInput | ListConfigurationRevisionsCommandInput | ListConfigurationsCommandInput | ListTagsCommandInput | ListUsersCommandInput | RebootBrokerCommandInput | UpdateBrokerCommandInput | UpdateConfigurationCommandInput | UpdateUserCommandInput;
    export type ServiceOutputTypes = CreateBrokerCommandOutput | CreateConfigurationCommandOutput | CreateTagsCommandOutput | CreateUserCommandOutput | DeleteBrokerCommandOutput | DeleteTagsCommandOutput | DeleteUserCommandOutput | DescribeBrokerCommandOutput | DescribeBrokerEngineTypesCommandOutput | DescribeBrokerInstanceOptionsCommandOutput | DescribeConfigurationCommandOutput | DescribeConfigurationRevisionCommandOutput | DescribeUserCommandOutput | ListBrokersCommandOutput | ListConfigurationRevisionsCommandOutput | ListConfigurationsCommandOutput | ListTagsCommandOutput | ListUsersCommandOutput | RebootBrokerCommandOutput | UpdateBrokerCommandOutput | UpdateConfigurationCommandOutput | UpdateUserCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MqClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MqClient class constructor that set the region, credentials and other options.
        */
    export interface MqClientConfig extends MqClientConfigType {
    }
    type MqClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MqClient class. This is resolved and normalized from the {@link MqClientConfig | constructor configuration interface}.
        */
    export interface MqClientResolvedConfig extends MqClientResolvedConfigType {
    }
    /**
        * <p>Amazon MQ is a managed message broker service for Apache ActiveMQ and RabbitMQ that makes it easy to set up and operate message brokers in the cloud. A message broker allows software applications and components to communicate using various programming languages, operating systems, and formal messaging protocols.</p>
        */
    export class MqClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MqClientResolvedConfig> {
            /**
                * The resolved configuration of MqClient class. This is resolved and normalized from the {@link MqClientConfig | constructor configuration interface}.
                */
            readonly config: MqClientResolvedConfig;
            constructor(configuration: MqClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MqServiceException as __BaseException } from "@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/MqServiceException";
    /**
        * <p>The action required to resolve a broker issue when the broker is in a CRITICAL_ACTION_REQUIRED state.</p>
        */
    export interface ActionRequired {
            /**
                * <p>The code you can use to resolve your broker issue when the broker is in a CRITICAL_ACTION_REQUIRED state. You can find instructions by choosing the link for your code from the list of action required codes in <a href="https://docs.aws.amazon.com//latest/developer-guide/troubleshooting-action-required-codes.html">Amazon MQ action required codes</a>. Each code references a topic with detailed information, instructions, and recommendations for how to resolve the issue and prevent future occurrences.</p>
                */
            ActionRequiredCode?: string;
            /**
                * <p>Information about the action required to resolve your broker issue when the broker is in a CRITICAL_ACTION_REQUIRED state.</p>
                */
            ActionRequiredInfo?: string;
    }
    export namespace ActionRequired {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionRequired) => any;
    }
    /**
        * <p>Name of the availability zone.</p>
        */
    export interface AvailabilityZone {
            /**
                * <p>Id for the availability zone.</p>
                */
            Name?: string;
    }
    export namespace AvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailabilityZone) => any;
    }
    export enum EngineType {
            ACTIVEMQ = "ACTIVEMQ",
            RABBITMQ = "RABBITMQ"
    }
    /**
        * <p>Id of the engine version.</p>
        */
    export interface EngineVersion {
            /**
                * <p>Id for the version.</p>
                */
            Name?: string;
    }
    export namespace EngineVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EngineVersion) => any;
    }
    /**
        * <p>Types of broker engines.</p>
        */
    export interface BrokerEngineType {
            /**
                * <p>The broker's engine type.</p>
                */
            EngineType?: EngineType | string;
            /**
                * <p>The list of engine versions.</p>
                */
            EngineVersions?: EngineVersion[];
    }
    export namespace BrokerEngineType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerEngineType) => any;
    }
    /**
        * <p>Returns information about all brokers.</p>
        */
    export interface BrokerInstance {
            /**
                * <p>The brokers web console URL.</p>
                */
            ConsoleURL?: string;
            /**
                * <p>The broker's wire-level protocol endpoints.</p>
                */
            Endpoints?: string[];
            /**
                * <p>The IP address of the Elastic Network Interface (ENI) attached to the broker. Does not apply to RabbitMQ brokers.</p>
                */
            IpAddress?: string;
    }
    export namespace BrokerInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerInstance) => any;
    }
    export enum BrokerStorageType {
            EBS = "EBS",
            EFS = "EFS"
    }
    export enum DeploymentMode {
            ACTIVE_STANDBY_MULTI_AZ = "ACTIVE_STANDBY_MULTI_AZ",
            CLUSTER_MULTI_AZ = "CLUSTER_MULTI_AZ",
            SINGLE_INSTANCE = "SINGLE_INSTANCE"
    }
    /**
        * <p>Option for host instance type.</p>
        */
    export interface BrokerInstanceOption {
            /**
                * <p>The list of available az.</p>
                */
            AvailabilityZones?: AvailabilityZone[];
            /**
                * <p>The broker's engine type.</p>
                */
            EngineType?: EngineType | string;
            /**
                * <p>The broker's instance type.</p>
                */
            HostInstanceType?: string;
            /**
                * <p>The broker's storage type.</p>
                */
            StorageType?: BrokerStorageType | string;
            /**
                * <p>The list of supported deployment modes.</p>
                */
            SupportedDeploymentModes?: (DeploymentMode | string)[];
            /**
                * <p>The list of supported engine versions.</p>
                */
            SupportedEngineVersions?: string[];
    }
    export namespace BrokerInstanceOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerInstanceOption) => any;
    }
    export enum BrokerState {
            CREATION_FAILED = "CREATION_FAILED",
            CREATION_IN_PROGRESS = "CREATION_IN_PROGRESS",
            CRITICAL_ACTION_REQUIRED = "CRITICAL_ACTION_REQUIRED",
            DELETION_IN_PROGRESS = "DELETION_IN_PROGRESS",
            REBOOT_IN_PROGRESS = "REBOOT_IN_PROGRESS",
            RUNNING = "RUNNING"
    }
    /**
        * <p>Returns information about all brokers.</p>
        */
    export interface BrokerSummary {
            /**
                * <p>The broker's Amazon Resource Name (ARN).</p>
                */
            BrokerArn?: string;
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId?: string;
            /**
                * <p>The broker's name. This value is unique in your AWS account, 1-50 characters long, and containing only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p>
                */
            BrokerName?: string;
            /**
                * <p>The broker's status.</p>
                */
            BrokerState?: BrokerState | string;
            /**
                * <p>The time when the broker was created.</p>
                */
            Created?: Date;
            /**
                * <p>The broker's deployment mode.</p>
                */
            DeploymentMode: DeploymentMode | string | undefined;
            /**
                * <p>The type of broker engine.</p>
                */
            EngineType: EngineType | string | undefined;
            /**
                * <p>The broker's instance type.</p>
                */
            HostInstanceType?: string;
    }
    export namespace BrokerSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerSummary) => any;
    }
    export enum AuthenticationStrategy {
            LDAP = "LDAP",
            SIMPLE = "SIMPLE"
    }
    /**
        * <p>Returns information about the specified configuration revision.</p>
        */
    export interface ConfigurationRevision {
            /**
                * <p>Required. The date and time of the configuration revision.</p>
                */
            Created: Date | undefined;
            /**
                * <p>The description of the configuration revision.</p>
                */
            Description?: string;
            /**
                * <p>Required. The revision number of the configuration.</p>
                */
            Revision: number | undefined;
    }
    export namespace ConfigurationRevision {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationRevision) => any;
    }
    /**
        * <p>Returns information about all configurations.</p>
        */
    export interface Configuration {
            /**
                * <p>Required. The ARN of the configuration.</p>
                */
            Arn: string | undefined;
            /**
                * <p>Optional. The authentication strategy associated with the configuration. The default is SIMPLE.</p>
                */
            AuthenticationStrategy: AuthenticationStrategy | string | undefined;
            /**
                * <p>Required. The date and time of the configuration revision.</p>
                */
            Created: Date | undefined;
            /**
                * <p>Required. The description of the configuration.</p>
                */
            Description: string | undefined;
            /**
                * <p>Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.</p>
                */
            EngineType: EngineType | string | undefined;
            /**
                * <p>Required. The broker engine's version. For a list of supported engine versions, see, <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            EngineVersion: string | undefined;
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
                */
            Id: string | undefined;
            /**
                * <p>Required. The latest revision of the configuration.</p>
                */
            LatestRevision: ConfigurationRevision | undefined;
            /**
                * <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
                */
            Name: string | undefined;
            /**
                * <p>The list of all tags associated with this configuration.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace Configuration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Configuration) => any;
    }
    /**
        * <p>A list of information about the configuration.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
        */
    export interface ConfigurationId {
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
                */
            Id: string | undefined;
            /**
                * <p>The revision number of the configuration.</p>
                */
            Revision?: number;
    }
    export namespace ConfigurationId {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationId) => any;
    }
    export enum SanitizationWarningReason {
            DISALLOWED_ATTRIBUTE_REMOVED = "DISALLOWED_ATTRIBUTE_REMOVED",
            DISALLOWED_ELEMENT_REMOVED = "DISALLOWED_ELEMENT_REMOVED",
            INVALID_ATTRIBUTE_VALUE_REMOVED = "INVALID_ATTRIBUTE_VALUE_REMOVED"
    }
    /**
        * <p>Returns information about the XML element or attribute that was sanitized in the configuration.</p>
        */
    export interface SanitizationWarning {
            /**
                * <p>The name of the XML attribute that has been sanitized.</p>
                */
            AttributeName?: string;
            /**
                * <p>The name of the XML element that has been sanitized.</p>
                */
            ElementName?: string;
            /**
                * <p>Required. The reason for which the XML elements or attributes were sanitized.</p>
                */
            Reason: SanitizationWarningReason | string | undefined;
    }
    export namespace SanitizationWarning {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SanitizationWarning) => any;
    }
    /**
        * <p>A user associated with the broker. For RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.</p>
        */
    export interface User {
            /**
                * <p>Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does not apply to RabbitMQ brokers.</p>
                */
            ConsoleAccess?: boolean;
            /**
                * <p>The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers.</p>
                */
            Groups?: string[];
            /**
                * <p>Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).</p>
                */
            Password: string | undefined;
            /**
                * <p>important><title>Amazon MQ for ActiveMQ</title> <para>For ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>/important> <important><title>Amazon MQ for RabbitMQ</title> <p>For RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using guest as a valid usename. This value must be 2-100 characters long.</p></important></para>
                */
            Username: string | undefined;
    }
    export namespace User {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: User) => any;
    }
    export enum ChangeType {
            CREATE = "CREATE",
            DELETE = "DELETE",
            UPDATE = "UPDATE"
    }
    /**
        * <p>Returns a list of all broker users. Does not apply to RabbitMQ brokers.</p>
        */
    export interface UserSummary {
            /**
                * <p>The type of change pending for the broker user.</p>
                */
            PendingChange?: ChangeType | string;
            /**
                * <p>Required. The username of the broker user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Username: string | undefined;
    }
    export namespace UserSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserSummary) => any;
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * <p>The attribute which caused the error.</p>
                */
            ErrorAttribute?: string;
            /**
                * <p>The explanation of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>Broker configuration information</p>
        */
    export interface Configurations {
            /**
                * <p>The broker's current configuration.</p>
                */
            Current?: ConfigurationId;
            /**
                * <p>The history of configurations applied to the broker.</p>
                */
            History?: ConfigurationId[];
            /**
                * <p>The broker's pending configuration.</p>
                */
            Pending?: ConfigurationId;
    }
    export namespace Configurations {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Configurations) => any;
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The attribute which caused the error.</p>
                */
            ErrorAttribute?: string;
            /**
                * <p>The explanation of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <important><p>Does not apply to RabbitMQ brokers.</p></important> <p>Encryption options for the broker.</p>
        */
    export interface EncryptionOptions {
            /**
                * <p>The customer master key (CMK) to use for the AWS Key Management Service (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Enables the use of an AWS owned CMK using AWS Key Management Service (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers.</p>
                */
            UseAwsOwnedKey: boolean | undefined;
    }
    export namespace EncryptionOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionOptions) => any;
    }
    /**
        * <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>
        */
    export interface LdapServerMetadataInput {
            /**
                * <p>Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.</p>
                */
            Hosts: string[] | undefined;
            /**
                * <p>The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                *                   dc=example, dc=com.</p>
                */
            RoleBase: string | undefined;
            /**
                * <p>Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.</p>
                */
            RoleName?: string;
            /**
                * <p>The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client's username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.</p>
                */
            RoleSearchMatching: string | undefined;
            /**
                * <p>The directory search scope for the role. If set to true, scope is to search the entire subtree.</p>
                */
            RoleSearchSubtree?: boolean;
            /**
                * <p>Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                *                   dc=com.</p>
                */
            ServiceAccountPassword: string | undefined;
            /**
                * <p>Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                *                   dc=com.</p>
                */
            ServiceAccountUsername: string | undefined;
            /**
                * <p>Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                *                   dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.</p>
                */
            UserBase: string | undefined;
            /**
                * <p>Specifies the name of the LDAP attribute for the user group membership.</p>
                */
            UserRoleName?: string;
            /**
                * <p>The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                *                   dc=com.</p>
                */
            UserSearchMatching: string | undefined;
            /**
                * <p>The directory search scope for the user. If set to true, scope is to search the entire subtree.</p>
                */
            UserSearchSubtree?: boolean;
    }
    export namespace LdapServerMetadataInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LdapServerMetadataInput) => any;
    }
    /**
        * <p>The list of information about logs to be enabled for the specified broker.</p>
        */
    export interface Logs {
            /**
                * <p>Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers.</p>
                */
            Audit?: boolean;
            /**
                * <p>Enables general logging.</p>
                */
            General?: boolean;
    }
    export namespace Logs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Logs) => any;
    }
    export enum DayOfWeek {
            FRIDAY = "FRIDAY",
            MONDAY = "MONDAY",
            SATURDAY = "SATURDAY",
            SUNDAY = "SUNDAY",
            THURSDAY = "THURSDAY",
            TUESDAY = "TUESDAY",
            WEDNESDAY = "WEDNESDAY"
    }
    /**
        * <p>The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.</p>
        */
    export interface WeeklyStartTime {
            /**
                * <p>Required. The day of the week.</p>
                */
            DayOfWeek: DayOfWeek | string | undefined;
            /**
                * <p>Required. The time, in 24-hour format.</p>
                */
            TimeOfDay: string | undefined;
            /**
                * <p>The time zone, UTC by default, in either the Country/City format, or the UTC offset format.</p>
                */
            TimeZone?: string;
    }
    export namespace WeeklyStartTime {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WeeklyStartTime) => any;
    }
    /**
        * <p>Creates a broker using the specified properties.</p>
        */
    export interface CreateBrokerRequest {
            /**
                * <p>Optional. The authentication strategy used to secure the broker. The default is SIMPLE.</p>
                */
            AuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.</p>
                */
            AutoMinorVersionUpgrade: boolean | undefined;
            /**
                * <p>Required. The broker's name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p>
                */
            BrokerName: string | undefined;
            /**
                * <p>A list of information about the configuration.</p>
                */
            Configuration?: ConfigurationId;
            /**
                * <p>The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action. Note: We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.</p>
                */
            CreatorRequestId?: string;
            /**
                * <p>Required. The broker's deployment mode.</p>
                */
            DeploymentMode: DeploymentMode | string | undefined;
            /**
                * <p>Encryption options for the broker. Does not apply to RabbitMQ brokers.</p>
                */
            EncryptionOptions?: EncryptionOptions;
            /**
                * <p>Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.</p>
                */
            EngineType: EngineType | string | undefined;
            /**
                * <p>Required. The broker engine's version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            EngineVersion: string | undefined;
            /**
                * <p>Required. The broker's instance type.</p>
                */
            HostInstanceType: string | undefined;
            /**
                * <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.</p>
                */
            LdapServerMetadata?: LdapServerMetadataInput;
            /**
                * <p>Enables Amazon CloudWatch logging for brokers.</p>
                */
            Logs?: Logs;
            /**
                * <p>The parameters that determine the WeeklyStartTime.</p>
                */
            MaintenanceWindowStartTime?: WeeklyStartTime;
            /**
                * <p>Enables connections from applications outside of the VPC that hosts the broker's subnets. Set to false by default, if no value is provided.</p>
                */
            PubliclyAccessible: boolean | undefined;
            /**
                * <p>The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The broker's storage type.</p>
                */
            StorageType?: BrokerStorageType | string;
            /**
                * <p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your AWS account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your AWS account.</p></important>
                */
            SubnetIds?: string[];
            /**
                * <p>Create tags when creating the broker.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Required. The list of broker users (persons or applications) who can access queues and topics. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p> <important><title>Amazon MQ for RabbitMQ</title> <p>When you create an Amazon MQ for RabbitMQ broker, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.</p></important>
                */
            Users: User[] | undefined;
    }
    export namespace CreateBrokerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBrokerRequest) => any;
    }
    export interface CreateBrokerResponse {
            /**
                * <p>The broker's Amazon Resource Name (ARN).</p>
                */
            BrokerArn?: string;
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId?: string;
    }
    export namespace CreateBrokerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBrokerResponse) => any;
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            /**
                * <p>The attribute which caused the error.</p>
                */
            ErrorAttribute?: string;
            /**
                * <p>The explanation of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            /**
                * <p>The attribute which caused the error.</p>
                */
            ErrorAttribute?: string;
            /**
                * <p>The explanation of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            /**
                * <p>The attribute which caused the error.</p>
                */
            ErrorAttribute?: string;
            /**
                * <p>The explanation of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    /**
        * <p>Creates a new configuration for the specified configuration name. Amazon MQ uses the default configuration (the engine type and version).</p>
        */
    export interface CreateConfigurationRequest {
            /**
                * <p>Optional. The authentication strategy associated with the configuration. The default is SIMPLE.</p>
                */
            AuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.</p>
                */
            EngineType: EngineType | string | undefined;
            /**
                * <p>Required. The broker engine's version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            EngineVersion: string | undefined;
            /**
                * <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
                */
            Name: string | undefined;
            /**
                * <p>Create tags when creating the configuration.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationRequest) => any;
    }
    export interface CreateConfigurationResponse {
            /**
                * <p>Required. The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn?: string;
            /**
                * <p>Optional. The authentication strategy associated with the configuration. The default is SIMPLE.</p>
                */
            AuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>Required. The date and time of the configuration.</p>
                */
            Created?: Date;
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
                */
            Id?: string;
            /**
                * <p>The latest revision of the configuration.</p>
                */
            LatestRevision?: ConfigurationRevision;
            /**
                * <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
                */
            Name?: string;
    }
    export namespace CreateConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationResponse) => any;
    }
    /**
        * <p>A map of the key-value pairs for the resource tag.</p>
        */
    export interface CreateTagsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource tag.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The key-value pair for the resource tag.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTagsRequest) => any;
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * <p>The attribute which caused the error.</p>
                */
            ErrorAttribute?: string;
            /**
                * <p>The explanation of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>Creates a new ActiveMQ user.</p>
        */
    export interface CreateUserRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
            /**
                * <p>Enables access to the ActiveMQ Web Console for the ActiveMQ user.</p>
                */
            ConsoleAccess?: boolean;
            /**
                * <p>The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Groups?: string[];
            /**
                * <p>Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).</p>
                */
            Password: string | undefined;
            /**
                * <p>The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Username: string | undefined;
    }
    export namespace CreateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserRequest) => any;
    }
    export interface CreateUserResponse {
    }
    export namespace CreateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserResponse) => any;
    }
    export interface DeleteBrokerRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
    }
    export namespace DeleteBrokerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBrokerRequest) => any;
    }
    export interface DeleteBrokerResponse {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId?: string;
    }
    export namespace DeleteBrokerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBrokerResponse) => any;
    }
    export interface DeleteTagsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource tag.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>An array of tag keys to delete</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace DeleteTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTagsRequest) => any;
    }
    export interface DeleteUserRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
            /**
                * <p>The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Username: string | undefined;
    }
    export namespace DeleteUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserRequest) => any;
    }
    export interface DeleteUserResponse {
    }
    export namespace DeleteUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserResponse) => any;
    }
    export interface DescribeBrokerRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
    }
    export namespace DescribeBrokerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBrokerRequest) => any;
    }
    /**
        * <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p>
        */
    export interface LdapServerMetadataOutput {
            /**
                * <p>Specifies the location of the LDAP server such as AWS Directory Service for Microsoft Active Directory . Optional failover server.</p>
                */
            Hosts: string[] | undefined;
            /**
                * <p>The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,
                *                   dc=example, dc=com.</p>
                */
            RoleBase: string | undefined;
            /**
                * <p>Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query.</p>
                */
            RoleName?: string;
            /**
                * <p>The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client's username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase.</p>
                */
            RoleSearchMatching: string | undefined;
            /**
                * <p>The directory search scope for the role. If set to true, scope is to search the entire subtree.</p>
                */
            RoleSearchSubtree?: boolean;
            /**
                * <p>Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,
                *                   dc=com.</p>
                */
            ServiceAccountUsername: string | undefined;
            /**
                * <p>Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,
                *                   dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com.</p>
                */
            UserBase: string | undefined;
            /**
                * <p>Specifies the name of the LDAP attribute for the user group membership.</p>
                */
            UserRoleName?: string;
            /**
                * <p>The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,
                *                dc=com.</p>
                */
            UserSearchMatching: string | undefined;
            /**
                * <p>The directory search scope for the user. If set to true, scope is to search the entire subtree.</p>
                */
            UserSearchSubtree?: boolean;
    }
    export namespace LdapServerMetadataOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LdapServerMetadataOutput) => any;
    }
    /**
        * <p>The list of information about logs to be enabled for the specified broker.</p>
        */
    export interface PendingLogs {
            /**
                * <p>Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged.</p>
                */
            Audit?: boolean;
            /**
                * <p>Enables general logging.</p>
                */
            General?: boolean;
    }
    export namespace PendingLogs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingLogs) => any;
    }
    /**
        * <p>The list of information about logs currently enabled and pending to be deployed for the specified broker.</p>
        */
    export interface LogsSummary {
            /**
                * <p>Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged.</p>
                */
            Audit?: boolean;
            /**
                * <p>The location of the CloudWatch Logs log group where audit logs are sent.</p>
                */
            AuditLogGroup?: string;
            /**
                * <p>Enables general logging.</p>
                */
            General: boolean | undefined;
            /**
                * <p>The location of the CloudWatch Logs log group where general logs are sent.</p>
                */
            GeneralLogGroup: string | undefined;
            /**
                * <p>The list of information about logs pending to be deployed for the specified broker.</p>
                */
            Pending?: PendingLogs;
    }
    export namespace LogsSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogsSummary) => any;
    }
    export interface DescribeBrokerResponse {
            /**
                * <p>A list of actions required for a broker.</p>
                */
            ActionsRequired?: ActionRequired[];
            /**
                * <p>The authentication strategy used to secure the broker. The default is SIMPLE.</p>
                */
            AuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The broker's Amazon Resource Name (ARN).</p>
                */
            BrokerArn?: string;
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId?: string;
            /**
                * <p>A list of information about allocated brokers.</p>
                */
            BrokerInstances?: BrokerInstance[];
            /**
                * <p>The broker's name. This value must be unique in your AWS account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p>
                */
            BrokerName?: string;
            /**
                * <p>The broker's status.</p>
                */
            BrokerState?: BrokerState | string;
            /**
                * <p>The list of all revisions for the specified configuration.</p>
                */
            Configurations?: Configurations;
            /**
                * <p>The time when the broker was created.</p>
                */
            Created?: Date;
            /**
                * <p>The broker's deployment mode.</p>
                */
            DeploymentMode?: DeploymentMode | string;
            /**
                * <p>Encryption options for the broker. Does not apply to RabbitMQ brokers.</p>
                */
            EncryptionOptions?: EncryptionOptions;
            /**
                * <p>The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.</p>
                */
            EngineType?: EngineType | string;
            /**
                * <p>The broker engine's version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The broker's instance type.</p>
                */
            HostInstanceType?: string;
            /**
                * <p>The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p>
                */
            LdapServerMetadata?: LdapServerMetadataOutput;
            /**
                * <p>The list of information about logs currently enabled and pending to be deployed for the specified broker.</p>
                */
            Logs?: LogsSummary;
            /**
                * <p>The parameters that determine the WeeklyStartTime.</p>
                */
            MaintenanceWindowStartTime?: WeeklyStartTime;
            /**
                * <p>The authentication strategy that will be applied when the broker is rebooted. The default is SIMPLE.</p>
                */
            PendingAuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>The broker engine version to upgrade to. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            PendingEngineVersion?: string;
            /**
                * <p>The broker's host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.</p>
                */
            PendingHostInstanceType?: string;
            /**
                * <p>The metadata of the LDAP server that will be used to authenticate and authorize connections to the broker after it is rebooted.</p>
                */
            PendingLdapServerMetadata?: LdapServerMetadataOutput;
            /**
                * <p>The list of pending security groups to authorize connections to brokers.</p>
                */
            PendingSecurityGroups?: string[];
            /**
                * <p>Enables connections from applications outside of the VPC that hosts the broker's subnets.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The broker's storage type.</p>
                */
            StorageType?: BrokerStorageType | string;
            /**
                * <p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The list of all tags associated with this broker.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The list of all broker usernames for the specified broker.</p>
                */
            Users?: UserSummary[];
    }
    export namespace DescribeBrokerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBrokerResponse) => any;
    }
    export interface DescribeBrokerEngineTypesRequest {
            /**
                * <p>Filter response by engine type.</p>
                */
            EngineType?: string;
            /**
                * <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBrokerEngineTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBrokerEngineTypesRequest) => any;
    }
    export interface DescribeBrokerEngineTypesResponse {
            /**
                * <p>List of available engine types and versions.</p>
                */
            BrokerEngineTypes?: BrokerEngineType[];
            /**
                * <p>Required. The maximum number of engine types that can be returned per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBrokerEngineTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBrokerEngineTypesResponse) => any;
    }
    export interface DescribeBrokerInstanceOptionsRequest {
            /**
                * <p>Filter response by engine type.</p>
                */
            EngineType?: string;
            /**
                * <p>Filter response by host instance type.</p>
                */
            HostInstanceType?: string;
            /**
                * <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
            /**
                * <p>Filter response by storage type.</p>
                */
            StorageType?: string;
    }
    export namespace DescribeBrokerInstanceOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBrokerInstanceOptionsRequest) => any;
    }
    export interface DescribeBrokerInstanceOptionsResponse {
            /**
                * <p>List of available broker instance options.</p>
                */
            BrokerInstanceOptions?: BrokerInstanceOption[];
            /**
                * <p>Required. The maximum number of instance options that can be returned per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBrokerInstanceOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBrokerInstanceOptionsResponse) => any;
    }
    export interface DescribeConfigurationRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the configuration.</p>
                */
            ConfigurationId: string | undefined;
    }
    export namespace DescribeConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRequest) => any;
    }
    export interface DescribeConfigurationResponse {
            /**
                * <p>Required. The ARN of the configuration.</p>
                */
            Arn?: string;
            /**
                * <p>Optional. The authentication strategy associated with the configuration. The default is SIMPLE.</p>
                */
            AuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>Required. The date and time of the configuration revision.</p>
                */
            Created?: Date;
            /**
                * <p>Required. The description of the configuration.</p>
                */
            Description?: string;
            /**
                * <p>Required. The type of broker engine. Currently, Amazon MQ supports ACTIVEMQ and RABBITMQ.</p>
                */
            EngineType?: EngineType | string;
            /**
                * <p>Required. The broker engine's version. For a list of supported engine versions, see, <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
                */
            Id?: string;
            /**
                * <p>Required. The latest revision of the configuration.</p>
                */
            LatestRevision?: ConfigurationRevision;
            /**
                * <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
                */
            Name?: string;
            /**
                * <p>The list of all tags associated with this configuration.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationResponse) => any;
    }
    export interface DescribeConfigurationRevisionRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the configuration.</p>
                */
            ConfigurationId: string | undefined;
            /**
                * <p>The revision of the configuration.</p>
                */
            ConfigurationRevision: string | undefined;
    }
    export namespace DescribeConfigurationRevisionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRevisionRequest) => any;
    }
    export interface DescribeConfigurationRevisionResponse {
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
                */
            ConfigurationId?: string;
            /**
                * <p>Required. The date and time of the configuration.</p>
                */
            Created?: Date;
            /**
                * <p>Required. The base64-encoded XML configuration.</p>
                */
            Data?: string;
            /**
                * <p>The description of the configuration.</p>
                */
            Description?: string;
    }
    export namespace DescribeConfigurationRevisionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRevisionResponse) => any;
    }
    export interface DescribeUserRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
            /**
                * <p>The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Username: string | undefined;
    }
    export namespace DescribeUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserRequest) => any;
    }
    /**
        * <p>Returns information about the status of the changes pending for the ActiveMQ user.</p>
        */
    export interface UserPendingChanges {
            /**
                * <p>Enables access to the the ActiveMQ Web Console for the ActiveMQ user.</p>
                */
            ConsoleAccess?: boolean;
            /**
                * <p>The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Groups?: string[];
            /**
                * <p>Required. The type of change pending for the ActiveMQ user.</p>
                */
            PendingChange: ChangeType | string | undefined;
    }
    export namespace UserPendingChanges {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPendingChanges) => any;
    }
    export interface DescribeUserResponse {
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId?: string;
            /**
                * <p>Enables access to the the ActiveMQ Web Console for the ActiveMQ user.</p>
                */
            ConsoleAccess?: boolean;
            /**
                * <p>The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Groups?: string[];
            /**
                * <p>The status of the changes pending for the ActiveMQ user.</p>
                */
            Pending?: UserPendingChanges;
            /**
                * <p>Required. The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Username?: string;
    }
    export namespace DescribeUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserResponse) => any;
    }
    export interface ListBrokersRequest {
            /**
                * <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListBrokersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBrokersRequest) => any;
    }
    export interface ListBrokersResponse {
            /**
                * <p>A list of information about all brokers.</p>
                */
            BrokerSummaries?: BrokerSummary[];
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListBrokersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBrokersResponse) => any;
    }
    export interface ListConfigurationRevisionsRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the configuration.</p>
                */
            ConfigurationId: string | undefined;
            /**
                * <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationRevisionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationRevisionsRequest) => any;
    }
    export interface ListConfigurationRevisionsResponse {
            /**
                * <p>The unique ID that Amazon MQ generates for the configuration.</p>
                */
            ConfigurationId?: string;
            /**
                * <p>The maximum number of configuration revisions that can be returned per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
            /**
                * <p>The list of all revisions for the specified configuration.</p>
                */
            Revisions?: ConfigurationRevision[];
    }
    export namespace ListConfigurationRevisionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationRevisionsResponse) => any;
    }
    export interface ListConfigurationsRequest {
            /**
                * <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationsRequest) => any;
    }
    export interface ListConfigurationsResponse {
            /**
                * <p>The list of all revisions for the specified configuration.</p>
                */
            Configurations?: Configuration[];
            /**
                * <p>The maximum number of configurations that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationsResponse) => any;
    }
    export interface ListTagsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource tag.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsRequest) => any;
    }
    export interface ListTagsResponse {
            /**
                * <p>The key-value pair for the resource tag.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsResponse) => any;
    }
    export interface ListUsersRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
            /**
                * <p>The maximum number of brokers that Amazon MQ can return per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListUsersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersRequest) => any;
    }
    export interface ListUsersResponse {
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId?: string;
            /**
                * <p>Required. The maximum number of ActiveMQ users that can be returned per page (20 by default). This value must be an integer from 5 to 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that specifies the next page of results Amazon MQ should return. To request the first page, leave nextToken empty.</p>
                */
            NextToken?: string;
            /**
                * <p>Required. The list of all ActiveMQ usernames for the specified broker. Does not apply to RabbitMQ brokers.</p>
                */
            Users?: UserSummary[];
    }
    export namespace ListUsersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersResponse) => any;
    }
    export interface RebootBrokerRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
    }
    export namespace RebootBrokerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootBrokerRequest) => any;
    }
    export interface RebootBrokerResponse {
    }
    export namespace RebootBrokerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootBrokerResponse) => any;
    }
    /**
        * <p>Updates the broker using the specified properties.</p>
        */
    export interface UpdateBrokerRequest {
            /**
                * <p>Optional. The authentication strategy used to secure the broker. The default is SIMPLE.</p>
                */
            AuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
            /**
                * <p>A list of information about the configuration.</p>
                */
            Configuration?: ConfigurationId;
            /**
                * <p>The broker engine version. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The broker's host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.</p>
                */
            HostInstanceType?: string;
            /**
                * <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.</p>
                */
            LdapServerMetadata?: LdapServerMetadataInput;
            /**
                * <p>Enables Amazon CloudWatch logging for brokers.</p>
                */
            Logs?: Logs;
            /**
                * <p>The parameters that determine the WeeklyStartTime.</p>
                */
            MaintenanceWindowStartTime?: WeeklyStartTime;
            /**
                * <p>The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.</p>
                */
            SecurityGroups?: string[];
    }
    export namespace UpdateBrokerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerRequest) => any;
    }
    export interface UpdateBrokerResponse {
            /**
                * <p>Optional. The authentication strategy used to secure the broker. The default is SIMPLE.</p>
                */
            AuthenticationStrategy?: AuthenticationStrategy | string;
            /**
                * <p>The new boolean value that specifies whether broker engines automatically upgrade to new minor versions as new versions are released and supported by Amazon MQ.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId?: string;
            /**
                * <p>The ID of the updated configuration.</p>
                */
            Configuration?: ConfigurationId;
            /**
                * <p>The broker engine version to upgrade to. For a list of supported engine versions, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html">Supported engines</a>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The broker's host instance type to upgrade to. For a list of supported instance types, see <a href="https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker.html#broker-instance-types">Broker instance types</a>.</p>
                */
            HostInstanceType?: string;
            /**
                * <p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker. Does not apply to RabbitMQ brokers.</p>
                */
            LdapServerMetadata?: LdapServerMetadataOutput;
            /**
                * <p>The list of information about logs to be enabled for the specified broker.</p>
                */
            Logs?: Logs;
            /**
                * <p>The parameters that determine the WeeklyStartTime.</p>
                */
            MaintenanceWindowStartTime?: WeeklyStartTime;
            /**
                * <p>The list of security groups (1 minimum, 5 maximum) that authorizes connections to brokers.</p>
                */
            SecurityGroups?: string[];
    }
    export namespace UpdateBrokerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerResponse) => any;
    }
    /**
        * <p>Updates the specified configuration.</p>
        */
    export interface UpdateConfigurationRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the configuration.</p>
                */
            ConfigurationId: string | undefined;
            /**
                * <p>Required. The base64-encoded XML configuration.</p>
                */
            Data: string | undefined;
            /**
                * <p>The description of the configuration.</p>
                */
            Description?: string;
    }
    export namespace UpdateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationRequest) => any;
    }
    export interface UpdateConfigurationResponse {
            /**
                * <p>Required. The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn?: string;
            /**
                * <p>Required. The date and time of the configuration.</p>
                */
            Created?: Date;
            /**
                * <p>Required. The unique ID that Amazon MQ generates for the configuration.</p>
                */
            Id?: string;
            /**
                * <p>The latest revision of the configuration.</p>
                */
            LatestRevision?: ConfigurationRevision;
            /**
                * <p>Required. The name of the configuration. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 1-150 characters long.</p>
                */
            Name?: string;
            /**
                * <p>The list of the first 20 warnings about the configuration XML elements or attributes that were sanitized.</p>
                */
            Warnings?: SanitizationWarning[];
    }
    export namespace UpdateConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationResponse) => any;
    }
    /**
        * <p>Updates the information for an ActiveMQ user.</p>
        */
    export interface UpdateUserRequest {
            /**
                * <p>The unique ID that Amazon MQ generates for the broker.</p>
                */
            BrokerId: string | undefined;
            /**
                * <p>Enables access to the the ActiveMQ Web Console for the ActiveMQ user.</p>
                */
            ConsoleAccess?: boolean;
            /**
                * <p>The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Groups?: string[];
            /**
                * <p>The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=).</p>
                */
            Password?: string;
            /**
                * <p>The username of the ActiveMQ user. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p>
                */
            Username: string | undefined;
    }
    export namespace UpdateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserRequest) => any;
    }
    export interface UpdateUserResponse {
    }
    export namespace UpdateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserResponse) => any;
    }
}

declare module '@aws-sdk/client-mq/node_modules/@aws-sdk/client-mq/dist-types/models/MqServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Mq service.
        */
    export class MqServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

