// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-comprehendmedical' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { DescribeEntitiesDetectionV2JobCommandInput, DescribeEntitiesDetectionV2JobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeEntitiesDetectionV2JobCommand";
    import { DescribeICD10CMInferenceJobCommandInput, DescribeICD10CMInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeICD10CMInferenceJobCommand";
    import { DescribePHIDetectionJobCommandInput, DescribePHIDetectionJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribePHIDetectionJobCommand";
    import { DescribeRxNormInferenceJobCommandInput, DescribeRxNormInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeRxNormInferenceJobCommand";
    import { DescribeSNOMEDCTInferenceJobCommandInput, DescribeSNOMEDCTInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeSNOMEDCTInferenceJobCommand";
    import { DetectEntitiesCommandInput, DetectEntitiesCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectEntitiesCommand";
    import { DetectEntitiesV2CommandInput, DetectEntitiesV2CommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectEntitiesV2Command";
    import { DetectPHICommandInput, DetectPHICommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectPHICommand";
    import { InferICD10CMCommandInput, InferICD10CMCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferICD10CMCommand";
    import { InferRxNormCommandInput, InferRxNormCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferRxNormCommand";
    import { InferSNOMEDCTCommandInput, InferSNOMEDCTCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferSNOMEDCTCommand";
    import { ListEntitiesDetectionV2JobsCommandInput, ListEntitiesDetectionV2JobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListEntitiesDetectionV2JobsCommand";
    import { ListICD10CMInferenceJobsCommandInput, ListICD10CMInferenceJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListICD10CMInferenceJobsCommand";
    import { ListPHIDetectionJobsCommandInput, ListPHIDetectionJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListPHIDetectionJobsCommand";
    import { ListRxNormInferenceJobsCommandInput, ListRxNormInferenceJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListRxNormInferenceJobsCommand";
    import { ListSNOMEDCTInferenceJobsCommandInput, ListSNOMEDCTInferenceJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListSNOMEDCTInferenceJobsCommand";
    import { StartEntitiesDetectionV2JobCommandInput, StartEntitiesDetectionV2JobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartEntitiesDetectionV2JobCommand";
    import { StartICD10CMInferenceJobCommandInput, StartICD10CMInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartICD10CMInferenceJobCommand";
    import { StartPHIDetectionJobCommandInput, StartPHIDetectionJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartPHIDetectionJobCommand";
    import { StartRxNormInferenceJobCommandInput, StartRxNormInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartRxNormInferenceJobCommand";
    import { StartSNOMEDCTInferenceJobCommandInput, StartSNOMEDCTInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartSNOMEDCTInferenceJobCommand";
    import { StopEntitiesDetectionV2JobCommandInput, StopEntitiesDetectionV2JobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopEntitiesDetectionV2JobCommand";
    import { StopICD10CMInferenceJobCommandInput, StopICD10CMInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopICD10CMInferenceJobCommand";
    import { StopPHIDetectionJobCommandInput, StopPHIDetectionJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopPHIDetectionJobCommand";
    import { StopRxNormInferenceJobCommandInput, StopRxNormInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopRxNormInferenceJobCommand";
    import { StopSNOMEDCTInferenceJobCommandInput, StopSNOMEDCTInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopSNOMEDCTInferenceJobCommand";
    import { ComprehendMedicalClient } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    /**
        * <p> Comprehend Medical; extracts structured information from unstructured clinical text. Use these actions
        *       to gain insight in your documents. </p>
        */
    export class ComprehendMedical extends ComprehendMedicalClient {
            /**
                * <p>Gets the properties associated with a medical entities detection job. Use this operation
                *       to get the status of a detection job.</p>
                */
            describeEntitiesDetectionV2Job(args: DescribeEntitiesDetectionV2JobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEntitiesDetectionV2JobCommandOutput>;
            describeEntitiesDetectionV2Job(args: DescribeEntitiesDetectionV2JobCommandInput, cb: (err: any, data?: DescribeEntitiesDetectionV2JobCommandOutput) => void): void;
            describeEntitiesDetectionV2Job(args: DescribeEntitiesDetectionV2JobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEntitiesDetectionV2JobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with an InferICD10CM job. Use this operation to get the
                *       status of an inference job.</p>
                */
            describeICD10CMInferenceJob(args: DescribeICD10CMInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeICD10CMInferenceJobCommandOutput>;
            describeICD10CMInferenceJob(args: DescribeICD10CMInferenceJobCommandInput, cb: (err: any, data?: DescribeICD10CMInferenceJobCommandOutput) => void): void;
            describeICD10CMInferenceJob(args: DescribeICD10CMInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeICD10CMInferenceJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with a protected health information (PHI) detection job.
                *       Use this operation to get the status of a detection job.</p>
                */
            describePHIDetectionJob(args: DescribePHIDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribePHIDetectionJobCommandOutput>;
            describePHIDetectionJob(args: DescribePHIDetectionJobCommandInput, cb: (err: any, data?: DescribePHIDetectionJobCommandOutput) => void): void;
            describePHIDetectionJob(args: DescribePHIDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePHIDetectionJobCommandOutput) => void): void;
            /**
                * <p>Gets the properties associated with an InferRxNorm job. Use this operation to get the
                *       status of an inference job.</p>
                */
            describeRxNormInferenceJob(args: DescribeRxNormInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRxNormInferenceJobCommandOutput>;
            describeRxNormInferenceJob(args: DescribeRxNormInferenceJobCommandInput, cb: (err: any, data?: DescribeRxNormInferenceJobCommandOutput) => void): void;
            describeRxNormInferenceJob(args: DescribeRxNormInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRxNormInferenceJobCommandOutput) => void): void;
            /**
                * <p>
                *       Gets the properties associated with an InferSNOMEDCT job. Use this operation to get the status of an inference job.
                *     </p>
                */
            describeSNOMEDCTInferenceJob(args: DescribeSNOMEDCTInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSNOMEDCTInferenceJobCommandOutput>;
            describeSNOMEDCTInferenceJob(args: DescribeSNOMEDCTInferenceJobCommandInput, cb: (err: any, data?: DescribeSNOMEDCTInferenceJobCommandOutput) => void): void;
            describeSNOMEDCTInferenceJob(args: DescribeSNOMEDCTInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSNOMEDCTInferenceJobCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>The <code>DetectEntities</code> operation is deprecated. You should use the <a>DetectEntitiesV2</a> operation instead.</p>
                *          <p> Inspects the clinical text for a variety of medical entities and returns specific
                *       information about them such as entity category, location, and confidence score on that
                *       information .</p>
                */
            detectEntities(args: DetectEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<DetectEntitiesCommandOutput>;
            detectEntities(args: DetectEntitiesCommandInput, cb: (err: any, data?: DetectEntitiesCommandOutput) => void): void;
            detectEntities(args: DetectEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectEntitiesCommandOutput) => void): void;
            /**
                * <p>Inspects the clinical text for a variety of medical entities and returns specific
                *       information about them such as entity category, location, and confidence score on that
                *       information. Amazon Comprehend Medical only detects medical entities in English language
                *       texts.</p>
                *          <p>The <code>DetectEntitiesV2</code> operation replaces the <a>DetectEntities</a>
                *       operation. This new action uses a different model for determining the entities in your medical
                *       text and changes the way that some entities are returned in the output. You should use the
                *         <code>DetectEntitiesV2</code> operation in all new applications.</p>
                *          <p>The <code>DetectEntitiesV2</code> operation returns the <code>Acuity</code> and
                *         <code>Direction</code> entities as attributes instead of types. </p>
                */
            detectEntitiesV2(args: DetectEntitiesV2CommandInput, options?: __HttpHandlerOptions): Promise<DetectEntitiesV2CommandOutput>;
            detectEntitiesV2(args: DetectEntitiesV2CommandInput, cb: (err: any, data?: DetectEntitiesV2CommandOutput) => void): void;
            detectEntitiesV2(args: DetectEntitiesV2CommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectEntitiesV2CommandOutput) => void): void;
            /**
                * <p> Inspects the clinical text for protected health information (PHI) entities and returns
                *       the entity category, location, and confidence score for each entity. Amazon Comprehend Medical
                *       only detects entities in English language texts.</p>
                */
            detectPHI(args: DetectPHICommandInput, options?: __HttpHandlerOptions): Promise<DetectPHICommandOutput>;
            detectPHI(args: DetectPHICommandInput, cb: (err: any, data?: DetectPHICommandOutput) => void): void;
            detectPHI(args: DetectPHICommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectPHICommandOutput) => void): void;
            /**
                * <p>InferICD10CM detects medical conditions as entities listed in a patient record and links
                *       those entities to normalized concept identifiers in the ICD-10-CM knowledge base from the
                *       Centers for Disease Control. Amazon Comprehend Medical only detects medical entities in
                *       English language texts.  </p>
                */
            inferICD10CM(args: InferICD10CMCommandInput, options?: __HttpHandlerOptions): Promise<InferICD10CMCommandOutput>;
            inferICD10CM(args: InferICD10CMCommandInput, cb: (err: any, data?: InferICD10CMCommandOutput) => void): void;
            inferICD10CM(args: InferICD10CMCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InferICD10CMCommandOutput) => void): void;
            /**
                * <p>InferRxNorm detects medications as entities listed in a patient record and links to the
                *       normalized concept identifiers in the RxNorm database from the National Library of Medicine.
                *       Amazon Comprehend Medical only detects medical entities in English language texts.  </p>
                */
            inferRxNorm(args: InferRxNormCommandInput, options?: __HttpHandlerOptions): Promise<InferRxNormCommandOutput>;
            inferRxNorm(args: InferRxNormCommandInput, cb: (err: any, data?: InferRxNormCommandOutput) => void): void;
            inferRxNorm(args: InferRxNormCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InferRxNormCommandOutput) => void): void;
            /**
                * <p>
                *       InferSNOMEDCT detects possible medical concepts as entities and links them to codes from the Systematized Nomenclature of Medicine, Clinical Terms (SNOMED-CT) ontology</p>
                */
            inferSNOMEDCT(args: InferSNOMEDCTCommandInput, options?: __HttpHandlerOptions): Promise<InferSNOMEDCTCommandOutput>;
            inferSNOMEDCT(args: InferSNOMEDCTCommandInput, cb: (err: any, data?: InferSNOMEDCTCommandOutput) => void): void;
            inferSNOMEDCT(args: InferSNOMEDCTCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InferSNOMEDCTCommandOutput) => void): void;
            /**
                * <p>Gets a list of medical entity detection jobs that you have submitted.</p>
                */
            listEntitiesDetectionV2Jobs(args: ListEntitiesDetectionV2JobsCommandInput, options?: __HttpHandlerOptions): Promise<ListEntitiesDetectionV2JobsCommandOutput>;
            listEntitiesDetectionV2Jobs(args: ListEntitiesDetectionV2JobsCommandInput, cb: (err: any, data?: ListEntitiesDetectionV2JobsCommandOutput) => void): void;
            listEntitiesDetectionV2Jobs(args: ListEntitiesDetectionV2JobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntitiesDetectionV2JobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of InferICD10CM jobs that you have submitted.</p>
                */
            listICD10CMInferenceJobs(args: ListICD10CMInferenceJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListICD10CMInferenceJobsCommandOutput>;
            listICD10CMInferenceJobs(args: ListICD10CMInferenceJobsCommandInput, cb: (err: any, data?: ListICD10CMInferenceJobsCommandOutput) => void): void;
            listICD10CMInferenceJobs(args: ListICD10CMInferenceJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListICD10CMInferenceJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of protected health information (PHI) detection jobs that you have
                *       submitted.</p>
                */
            listPHIDetectionJobs(args: ListPHIDetectionJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListPHIDetectionJobsCommandOutput>;
            listPHIDetectionJobs(args: ListPHIDetectionJobsCommandInput, cb: (err: any, data?: ListPHIDetectionJobsCommandOutput) => void): void;
            listPHIDetectionJobs(args: ListPHIDetectionJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPHIDetectionJobsCommandOutput) => void): void;
            /**
                * <p>Gets a list of InferRxNorm jobs that you have submitted.</p>
                */
            listRxNormInferenceJobs(args: ListRxNormInferenceJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListRxNormInferenceJobsCommandOutput>;
            listRxNormInferenceJobs(args: ListRxNormInferenceJobsCommandInput, cb: (err: any, data?: ListRxNormInferenceJobsCommandOutput) => void): void;
            listRxNormInferenceJobs(args: ListRxNormInferenceJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRxNormInferenceJobsCommandOutput) => void): void;
            /**
                * <p>
                *       Gets a list of InferSNOMEDCT jobs a user has submitted.
                *     </p>
                */
            listSNOMEDCTInferenceJobs(args: ListSNOMEDCTInferenceJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListSNOMEDCTInferenceJobsCommandOutput>;
            listSNOMEDCTInferenceJobs(args: ListSNOMEDCTInferenceJobsCommandInput, cb: (err: any, data?: ListSNOMEDCTInferenceJobsCommandOutput) => void): void;
            listSNOMEDCTInferenceJobs(args: ListSNOMEDCTInferenceJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSNOMEDCTInferenceJobsCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous medical entity detection job for a collection of documents. Use the
                *         <code>DescribeEntitiesDetectionV2Job</code> operation to track the status of a job.</p>
                */
            startEntitiesDetectionV2Job(args: StartEntitiesDetectionV2JobCommandInput, options?: __HttpHandlerOptions): Promise<StartEntitiesDetectionV2JobCommandOutput>;
            startEntitiesDetectionV2Job(args: StartEntitiesDetectionV2JobCommandInput, cb: (err: any, data?: StartEntitiesDetectionV2JobCommandOutput) => void): void;
            startEntitiesDetectionV2Job(args: StartEntitiesDetectionV2JobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartEntitiesDetectionV2JobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous job to detect medical conditions and link them to the ICD-10-CM
                *       ontology. Use the <code>DescribeICD10CMInferenceJob</code> operation to track the status of a
                *       job.</p>
                */
            startICD10CMInferenceJob(args: StartICD10CMInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<StartICD10CMInferenceJobCommandOutput>;
            startICD10CMInferenceJob(args: StartICD10CMInferenceJobCommandInput, cb: (err: any, data?: StartICD10CMInferenceJobCommandOutput) => void): void;
            startICD10CMInferenceJob(args: StartICD10CMInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartICD10CMInferenceJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous job to detect protected health information (PHI). Use the
                *         <code>DescribePHIDetectionJob</code> operation to track the status of a job.</p>
                */
            startPHIDetectionJob(args: StartPHIDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StartPHIDetectionJobCommandOutput>;
            startPHIDetectionJob(args: StartPHIDetectionJobCommandInput, cb: (err: any, data?: StartPHIDetectionJobCommandOutput) => void): void;
            startPHIDetectionJob(args: StartPHIDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartPHIDetectionJobCommandOutput) => void): void;
            /**
                * <p>Starts an asynchronous job to detect medication entities and link them to the RxNorm
                *       ontology. Use the <code>DescribeRxNormInferenceJob</code> operation to track the status of a
                *       job.</p>
                */
            startRxNormInferenceJob(args: StartRxNormInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<StartRxNormInferenceJobCommandOutput>;
            startRxNormInferenceJob(args: StartRxNormInferenceJobCommandInput, cb: (err: any, data?: StartRxNormInferenceJobCommandOutput) => void): void;
            startRxNormInferenceJob(args: StartRxNormInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartRxNormInferenceJobCommandOutput) => void): void;
            /**
                * <p>
                *       Starts an asynchronous job to detect medical concepts and link them to the SNOMED-CT ontology. Use the DescribeSNOMEDCTInferenceJob operation to track the status of a job.
                *     </p>
                */
            startSNOMEDCTInferenceJob(args: StartSNOMEDCTInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<StartSNOMEDCTInferenceJobCommandOutput>;
            startSNOMEDCTInferenceJob(args: StartSNOMEDCTInferenceJobCommandInput, cb: (err: any, data?: StartSNOMEDCTInferenceJobCommandOutput) => void): void;
            startSNOMEDCTInferenceJob(args: StartSNOMEDCTInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSNOMEDCTInferenceJobCommandOutput) => void): void;
            /**
                * <p>Stops a medical entities detection job in progress.</p>
                */
            stopEntitiesDetectionV2Job(args: StopEntitiesDetectionV2JobCommandInput, options?: __HttpHandlerOptions): Promise<StopEntitiesDetectionV2JobCommandOutput>;
            stopEntitiesDetectionV2Job(args: StopEntitiesDetectionV2JobCommandInput, cb: (err: any, data?: StopEntitiesDetectionV2JobCommandOutput) => void): void;
            stopEntitiesDetectionV2Job(args: StopEntitiesDetectionV2JobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopEntitiesDetectionV2JobCommandOutput) => void): void;
            /**
                * <p>Stops an InferICD10CM inference job in progress.</p>
                */
            stopICD10CMInferenceJob(args: StopICD10CMInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<StopICD10CMInferenceJobCommandOutput>;
            stopICD10CMInferenceJob(args: StopICD10CMInferenceJobCommandInput, cb: (err: any, data?: StopICD10CMInferenceJobCommandOutput) => void): void;
            stopICD10CMInferenceJob(args: StopICD10CMInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopICD10CMInferenceJobCommandOutput) => void): void;
            /**
                * <p>Stops a protected health information (PHI) detection job in progress.</p>
                */
            stopPHIDetectionJob(args: StopPHIDetectionJobCommandInput, options?: __HttpHandlerOptions): Promise<StopPHIDetectionJobCommandOutput>;
            stopPHIDetectionJob(args: StopPHIDetectionJobCommandInput, cb: (err: any, data?: StopPHIDetectionJobCommandOutput) => void): void;
            stopPHIDetectionJob(args: StopPHIDetectionJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopPHIDetectionJobCommandOutput) => void): void;
            /**
                * <p>Stops an InferRxNorm inference job in progress.</p>
                */
            stopRxNormInferenceJob(args: StopRxNormInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<StopRxNormInferenceJobCommandOutput>;
            stopRxNormInferenceJob(args: StopRxNormInferenceJobCommandInput, cb: (err: any, data?: StopRxNormInferenceJobCommandOutput) => void): void;
            stopRxNormInferenceJob(args: StopRxNormInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopRxNormInferenceJobCommandOutput) => void): void;
            /**
                * <p>
                *       Stops an InferSNOMEDCT inference job in progress.
                *     </p>
                */
            stopSNOMEDCTInferenceJob(args: StopSNOMEDCTInferenceJobCommandInput, options?: __HttpHandlerOptions): Promise<StopSNOMEDCTInferenceJobCommandOutput>;
            stopSNOMEDCTInferenceJob(args: StopSNOMEDCTInferenceJobCommandInput, cb: (err: any, data?: StopSNOMEDCTInferenceJobCommandOutput) => void): void;
            stopSNOMEDCTInferenceJob(args: StopSNOMEDCTInferenceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopSNOMEDCTInferenceJobCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeEntitiesDetectionV2JobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DescribeEntitiesDetectionV2JobRequest, DescribeEntitiesDetectionV2JobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DescribeEntitiesDetectionV2JobCommandInput extends DescribeEntitiesDetectionV2JobRequest {
    }
    export interface DescribeEntitiesDetectionV2JobCommandOutput extends DescribeEntitiesDetectionV2JobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a medical entities detection job. Use this operation
        *       to get the status of a detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DescribeEntitiesDetectionV2JobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DescribeEntitiesDetectionV2JobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DescribeEntitiesDetectionV2JobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEntitiesDetectionV2JobCommandInput} for command's `input` shape.
        * @see {@link DescribeEntitiesDetectionV2JobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DescribeEntitiesDetectionV2JobCommand extends $Command<DescribeEntitiesDetectionV2JobCommandInput, DescribeEntitiesDetectionV2JobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DescribeEntitiesDetectionV2JobCommandInput;
            constructor(input: DescribeEntitiesDetectionV2JobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEntitiesDetectionV2JobCommandInput, DescribeEntitiesDetectionV2JobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeICD10CMInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DescribeICD10CMInferenceJobRequest, DescribeICD10CMInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DescribeICD10CMInferenceJobCommandInput extends DescribeICD10CMInferenceJobRequest {
    }
    export interface DescribeICD10CMInferenceJobCommandOutput extends DescribeICD10CMInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with an InferICD10CM job. Use this operation to get the
        *       status of an inference job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DescribeICD10CMInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DescribeICD10CMInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DescribeICD10CMInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeICD10CMInferenceJobCommandInput} for command's `input` shape.
        * @see {@link DescribeICD10CMInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DescribeICD10CMInferenceJobCommand extends $Command<DescribeICD10CMInferenceJobCommandInput, DescribeICD10CMInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DescribeICD10CMInferenceJobCommandInput;
            constructor(input: DescribeICD10CMInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeICD10CMInferenceJobCommandInput, DescribeICD10CMInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribePHIDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DescribePHIDetectionJobRequest, DescribePHIDetectionJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DescribePHIDetectionJobCommandInput extends DescribePHIDetectionJobRequest {
    }
    export interface DescribePHIDetectionJobCommandOutput extends DescribePHIDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with a protected health information (PHI) detection job.
        *       Use this operation to get the status of a detection job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DescribePHIDetectionJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DescribePHIDetectionJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DescribePHIDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePHIDetectionJobCommandInput} for command's `input` shape.
        * @see {@link DescribePHIDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DescribePHIDetectionJobCommand extends $Command<DescribePHIDetectionJobCommandInput, DescribePHIDetectionJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DescribePHIDetectionJobCommandInput;
            constructor(input: DescribePHIDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePHIDetectionJobCommandInput, DescribePHIDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeRxNormInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DescribeRxNormInferenceJobRequest, DescribeRxNormInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DescribeRxNormInferenceJobCommandInput extends DescribeRxNormInferenceJobRequest {
    }
    export interface DescribeRxNormInferenceJobCommandOutput extends DescribeRxNormInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the properties associated with an InferRxNorm job. Use this operation to get the
        *       status of an inference job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DescribeRxNormInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DescribeRxNormInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DescribeRxNormInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRxNormInferenceJobCommandInput} for command's `input` shape.
        * @see {@link DescribeRxNormInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DescribeRxNormInferenceJobCommand extends $Command<DescribeRxNormInferenceJobCommandInput, DescribeRxNormInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DescribeRxNormInferenceJobCommandInput;
            constructor(input: DescribeRxNormInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRxNormInferenceJobCommandInput, DescribeRxNormInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeSNOMEDCTInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DescribeSNOMEDCTInferenceJobRequest, DescribeSNOMEDCTInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DescribeSNOMEDCTInferenceJobCommandInput extends DescribeSNOMEDCTInferenceJobRequest {
    }
    export interface DescribeSNOMEDCTInferenceJobCommandOutput extends DescribeSNOMEDCTInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Gets the properties associated with an InferSNOMEDCT job. Use this operation to get the status of an inference job.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DescribeSNOMEDCTInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DescribeSNOMEDCTInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DescribeSNOMEDCTInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSNOMEDCTInferenceJobCommandInput} for command's `input` shape.
        * @see {@link DescribeSNOMEDCTInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DescribeSNOMEDCTInferenceJobCommand extends $Command<DescribeSNOMEDCTInferenceJobCommandInput, DescribeSNOMEDCTInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DescribeSNOMEDCTInferenceJobCommandInput;
            constructor(input: DescribeSNOMEDCTInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSNOMEDCTInferenceJobCommandInput, DescribeSNOMEDCTInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DetectEntitiesRequest, DetectEntitiesResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DetectEntitiesCommandInput extends DetectEntitiesRequest {
    }
    export interface DetectEntitiesCommandOutput extends DetectEntitiesResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>The <code>DetectEntities</code> operation is deprecated. You should use the <a>DetectEntitiesV2</a> operation instead.</p>
        *          <p> Inspects the clinical text for a variety of medical entities and returns specific
        *       information about them such as entity category, location, and confidence score on that
        *       information .</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DetectEntitiesCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DetectEntitiesCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DetectEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectEntitiesCommandInput} for command's `input` shape.
        * @see {@link DetectEntitiesCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DetectEntitiesCommand extends $Command<DetectEntitiesCommandInput, DetectEntitiesCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DetectEntitiesCommandInput;
            constructor(input: DetectEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectEntitiesCommandInput, DetectEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectEntitiesV2Command' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DetectEntitiesV2Request, DetectEntitiesV2Response } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DetectEntitiesV2CommandInput extends DetectEntitiesV2Request {
    }
    export interface DetectEntitiesV2CommandOutput extends DetectEntitiesV2Response, __MetadataBearer {
    }
    /**
        * <p>Inspects the clinical text for a variety of medical entities and returns specific
        *       information about them such as entity category, location, and confidence score on that
        *       information. Amazon Comprehend Medical only detects medical entities in English language
        *       texts.</p>
        *          <p>The <code>DetectEntitiesV2</code> operation replaces the <a>DetectEntities</a>
        *       operation. This new action uses a different model for determining the entities in your medical
        *       text and changes the way that some entities are returned in the output. You should use the
        *         <code>DetectEntitiesV2</code> operation in all new applications.</p>
        *          <p>The <code>DetectEntitiesV2</code> operation returns the <code>Acuity</code> and
        *         <code>Direction</code> entities as attributes instead of types. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DetectEntitiesV2Command } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DetectEntitiesV2Command } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DetectEntitiesV2Command(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectEntitiesV2CommandInput} for command's `input` shape.
        * @see {@link DetectEntitiesV2CommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DetectEntitiesV2Command extends $Command<DetectEntitiesV2CommandInput, DetectEntitiesV2CommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DetectEntitiesV2CommandInput;
            constructor(input: DetectEntitiesV2CommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectEntitiesV2CommandInput, DetectEntitiesV2CommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectPHICommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { DetectPHIRequest, DetectPHIResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface DetectPHICommandInput extends DetectPHIRequest {
    }
    export interface DetectPHICommandOutput extends DetectPHIResponse, __MetadataBearer {
    }
    /**
        * <p> Inspects the clinical text for protected health information (PHI) entities and returns
        *       the entity category, location, and confidence score for each entity. Amazon Comprehend Medical
        *       only detects entities in English language texts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, DetectPHICommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, DetectPHICommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new DetectPHICommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectPHICommandInput} for command's `input` shape.
        * @see {@link DetectPHICommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class DetectPHICommand extends $Command<DetectPHICommandInput, DetectPHICommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: DetectPHICommandInput;
            constructor(input: DetectPHICommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectPHICommandInput, DetectPHICommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferICD10CMCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { InferICD10CMRequest, InferICD10CMResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface InferICD10CMCommandInput extends InferICD10CMRequest {
    }
    export interface InferICD10CMCommandOutput extends InferICD10CMResponse, __MetadataBearer {
    }
    /**
        * <p>InferICD10CM detects medical conditions as entities listed in a patient record and links
        *       those entities to normalized concept identifiers in the ICD-10-CM knowledge base from the
        *       Centers for Disease Control. Amazon Comprehend Medical only detects medical entities in
        *       English language texts.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, InferICD10CMCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, InferICD10CMCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new InferICD10CMCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InferICD10CMCommandInput} for command's `input` shape.
        * @see {@link InferICD10CMCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class InferICD10CMCommand extends $Command<InferICD10CMCommandInput, InferICD10CMCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: InferICD10CMCommandInput;
            constructor(input: InferICD10CMCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InferICD10CMCommandInput, InferICD10CMCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferRxNormCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { InferRxNormRequest, InferRxNormResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface InferRxNormCommandInput extends InferRxNormRequest {
    }
    export interface InferRxNormCommandOutput extends InferRxNormResponse, __MetadataBearer {
    }
    /**
        * <p>InferRxNorm detects medications as entities listed in a patient record and links to the
        *       normalized concept identifiers in the RxNorm database from the National Library of Medicine.
        *       Amazon Comprehend Medical only detects medical entities in English language texts.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, InferRxNormCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, InferRxNormCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new InferRxNormCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InferRxNormCommandInput} for command's `input` shape.
        * @see {@link InferRxNormCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class InferRxNormCommand extends $Command<InferRxNormCommandInput, InferRxNormCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: InferRxNormCommandInput;
            constructor(input: InferRxNormCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InferRxNormCommandInput, InferRxNormCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferSNOMEDCTCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { InferSNOMEDCTRequest, InferSNOMEDCTResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface InferSNOMEDCTCommandInput extends InferSNOMEDCTRequest {
    }
    export interface InferSNOMEDCTCommandOutput extends InferSNOMEDCTResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       InferSNOMEDCT detects possible medical concepts as entities and links them to codes from the Systematized Nomenclature of Medicine, Clinical Terms (SNOMED-CT) ontology</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, InferSNOMEDCTCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, InferSNOMEDCTCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new InferSNOMEDCTCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InferSNOMEDCTCommandInput} for command's `input` shape.
        * @see {@link InferSNOMEDCTCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class InferSNOMEDCTCommand extends $Command<InferSNOMEDCTCommandInput, InferSNOMEDCTCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: InferSNOMEDCTCommandInput;
            constructor(input: InferSNOMEDCTCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InferSNOMEDCTCommandInput, InferSNOMEDCTCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListEntitiesDetectionV2JobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { ListEntitiesDetectionV2JobsRequest, ListEntitiesDetectionV2JobsResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface ListEntitiesDetectionV2JobsCommandInput extends ListEntitiesDetectionV2JobsRequest {
    }
    export interface ListEntitiesDetectionV2JobsCommandOutput extends ListEntitiesDetectionV2JobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of medical entity detection jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, ListEntitiesDetectionV2JobsCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, ListEntitiesDetectionV2JobsCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new ListEntitiesDetectionV2JobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntitiesDetectionV2JobsCommandInput} for command's `input` shape.
        * @see {@link ListEntitiesDetectionV2JobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class ListEntitiesDetectionV2JobsCommand extends $Command<ListEntitiesDetectionV2JobsCommandInput, ListEntitiesDetectionV2JobsCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: ListEntitiesDetectionV2JobsCommandInput;
            constructor(input: ListEntitiesDetectionV2JobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntitiesDetectionV2JobsCommandInput, ListEntitiesDetectionV2JobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListICD10CMInferenceJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { ListICD10CMInferenceJobsRequest, ListICD10CMInferenceJobsResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface ListICD10CMInferenceJobsCommandInput extends ListICD10CMInferenceJobsRequest {
    }
    export interface ListICD10CMInferenceJobsCommandOutput extends ListICD10CMInferenceJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of InferICD10CM jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, ListICD10CMInferenceJobsCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, ListICD10CMInferenceJobsCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new ListICD10CMInferenceJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListICD10CMInferenceJobsCommandInput} for command's `input` shape.
        * @see {@link ListICD10CMInferenceJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class ListICD10CMInferenceJobsCommand extends $Command<ListICD10CMInferenceJobsCommandInput, ListICD10CMInferenceJobsCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: ListICD10CMInferenceJobsCommandInput;
            constructor(input: ListICD10CMInferenceJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListICD10CMInferenceJobsCommandInput, ListICD10CMInferenceJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListPHIDetectionJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { ListPHIDetectionJobsRequest, ListPHIDetectionJobsResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface ListPHIDetectionJobsCommandInput extends ListPHIDetectionJobsRequest {
    }
    export interface ListPHIDetectionJobsCommandOutput extends ListPHIDetectionJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of protected health information (PHI) detection jobs that you have
        *       submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, ListPHIDetectionJobsCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, ListPHIDetectionJobsCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new ListPHIDetectionJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPHIDetectionJobsCommandInput} for command's `input` shape.
        * @see {@link ListPHIDetectionJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class ListPHIDetectionJobsCommand extends $Command<ListPHIDetectionJobsCommandInput, ListPHIDetectionJobsCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: ListPHIDetectionJobsCommandInput;
            constructor(input: ListPHIDetectionJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPHIDetectionJobsCommandInput, ListPHIDetectionJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListRxNormInferenceJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { ListRxNormInferenceJobsRequest, ListRxNormInferenceJobsResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface ListRxNormInferenceJobsCommandInput extends ListRxNormInferenceJobsRequest {
    }
    export interface ListRxNormInferenceJobsCommandOutput extends ListRxNormInferenceJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of InferRxNorm jobs that you have submitted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, ListRxNormInferenceJobsCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, ListRxNormInferenceJobsCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new ListRxNormInferenceJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRxNormInferenceJobsCommandInput} for command's `input` shape.
        * @see {@link ListRxNormInferenceJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class ListRxNormInferenceJobsCommand extends $Command<ListRxNormInferenceJobsCommandInput, ListRxNormInferenceJobsCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: ListRxNormInferenceJobsCommandInput;
            constructor(input: ListRxNormInferenceJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRxNormInferenceJobsCommandInput, ListRxNormInferenceJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListSNOMEDCTInferenceJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { ListSNOMEDCTInferenceJobsRequest, ListSNOMEDCTInferenceJobsResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface ListSNOMEDCTInferenceJobsCommandInput extends ListSNOMEDCTInferenceJobsRequest {
    }
    export interface ListSNOMEDCTInferenceJobsCommandOutput extends ListSNOMEDCTInferenceJobsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Gets a list of InferSNOMEDCT jobs a user has submitted.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, ListSNOMEDCTInferenceJobsCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, ListSNOMEDCTInferenceJobsCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new ListSNOMEDCTInferenceJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSNOMEDCTInferenceJobsCommandInput} for command's `input` shape.
        * @see {@link ListSNOMEDCTInferenceJobsCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class ListSNOMEDCTInferenceJobsCommand extends $Command<ListSNOMEDCTInferenceJobsCommandInput, ListSNOMEDCTInferenceJobsCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: ListSNOMEDCTInferenceJobsCommandInput;
            constructor(input: ListSNOMEDCTInferenceJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSNOMEDCTInferenceJobsCommandInput, ListSNOMEDCTInferenceJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartEntitiesDetectionV2JobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StartEntitiesDetectionV2JobRequest, StartEntitiesDetectionV2JobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StartEntitiesDetectionV2JobCommandInput extends StartEntitiesDetectionV2JobRequest {
    }
    export interface StartEntitiesDetectionV2JobCommandOutput extends StartEntitiesDetectionV2JobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous medical entity detection job for a collection of documents. Use the
        *         <code>DescribeEntitiesDetectionV2Job</code> operation to track the status of a job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StartEntitiesDetectionV2JobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StartEntitiesDetectionV2JobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StartEntitiesDetectionV2JobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartEntitiesDetectionV2JobCommandInput} for command's `input` shape.
        * @see {@link StartEntitiesDetectionV2JobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StartEntitiesDetectionV2JobCommand extends $Command<StartEntitiesDetectionV2JobCommandInput, StartEntitiesDetectionV2JobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StartEntitiesDetectionV2JobCommandInput;
            constructor(input: StartEntitiesDetectionV2JobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartEntitiesDetectionV2JobCommandInput, StartEntitiesDetectionV2JobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartICD10CMInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StartICD10CMInferenceJobRequest, StartICD10CMInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StartICD10CMInferenceJobCommandInput extends StartICD10CMInferenceJobRequest {
    }
    export interface StartICD10CMInferenceJobCommandOutput extends StartICD10CMInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous job to detect medical conditions and link them to the ICD-10-CM
        *       ontology. Use the <code>DescribeICD10CMInferenceJob</code> operation to track the status of a
        *       job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StartICD10CMInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StartICD10CMInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StartICD10CMInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartICD10CMInferenceJobCommandInput} for command's `input` shape.
        * @see {@link StartICD10CMInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StartICD10CMInferenceJobCommand extends $Command<StartICD10CMInferenceJobCommandInput, StartICD10CMInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StartICD10CMInferenceJobCommandInput;
            constructor(input: StartICD10CMInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartICD10CMInferenceJobCommandInput, StartICD10CMInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartPHIDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StartPHIDetectionJobRequest, StartPHIDetectionJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StartPHIDetectionJobCommandInput extends StartPHIDetectionJobRequest {
    }
    export interface StartPHIDetectionJobCommandOutput extends StartPHIDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous job to detect protected health information (PHI). Use the
        *         <code>DescribePHIDetectionJob</code> operation to track the status of a job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StartPHIDetectionJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StartPHIDetectionJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StartPHIDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartPHIDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StartPHIDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StartPHIDetectionJobCommand extends $Command<StartPHIDetectionJobCommandInput, StartPHIDetectionJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StartPHIDetectionJobCommandInput;
            constructor(input: StartPHIDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartPHIDetectionJobCommandInput, StartPHIDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartRxNormInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StartRxNormInferenceJobRequest, StartRxNormInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StartRxNormInferenceJobCommandInput extends StartRxNormInferenceJobRequest {
    }
    export interface StartRxNormInferenceJobCommandOutput extends StartRxNormInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>Starts an asynchronous job to detect medication entities and link them to the RxNorm
        *       ontology. Use the <code>DescribeRxNormInferenceJob</code> operation to track the status of a
        *       job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StartRxNormInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StartRxNormInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StartRxNormInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartRxNormInferenceJobCommandInput} for command's `input` shape.
        * @see {@link StartRxNormInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StartRxNormInferenceJobCommand extends $Command<StartRxNormInferenceJobCommandInput, StartRxNormInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StartRxNormInferenceJobCommandInput;
            constructor(input: StartRxNormInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartRxNormInferenceJobCommandInput, StartRxNormInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartSNOMEDCTInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StartSNOMEDCTInferenceJobRequest, StartSNOMEDCTInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StartSNOMEDCTInferenceJobCommandInput extends StartSNOMEDCTInferenceJobRequest {
    }
    export interface StartSNOMEDCTInferenceJobCommandOutput extends StartSNOMEDCTInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Starts an asynchronous job to detect medical concepts and link them to the SNOMED-CT ontology. Use the DescribeSNOMEDCTInferenceJob operation to track the status of a job.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StartSNOMEDCTInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StartSNOMEDCTInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StartSNOMEDCTInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSNOMEDCTInferenceJobCommandInput} for command's `input` shape.
        * @see {@link StartSNOMEDCTInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StartSNOMEDCTInferenceJobCommand extends $Command<StartSNOMEDCTInferenceJobCommandInput, StartSNOMEDCTInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StartSNOMEDCTInferenceJobCommandInput;
            constructor(input: StartSNOMEDCTInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSNOMEDCTInferenceJobCommandInput, StartSNOMEDCTInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopEntitiesDetectionV2JobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StopEntitiesDetectionV2JobRequest, StopEntitiesDetectionV2JobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StopEntitiesDetectionV2JobCommandInput extends StopEntitiesDetectionV2JobRequest {
    }
    export interface StopEntitiesDetectionV2JobCommandOutput extends StopEntitiesDetectionV2JobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a medical entities detection job in progress.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StopEntitiesDetectionV2JobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StopEntitiesDetectionV2JobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StopEntitiesDetectionV2JobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopEntitiesDetectionV2JobCommandInput} for command's `input` shape.
        * @see {@link StopEntitiesDetectionV2JobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StopEntitiesDetectionV2JobCommand extends $Command<StopEntitiesDetectionV2JobCommandInput, StopEntitiesDetectionV2JobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StopEntitiesDetectionV2JobCommandInput;
            constructor(input: StopEntitiesDetectionV2JobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopEntitiesDetectionV2JobCommandInput, StopEntitiesDetectionV2JobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopICD10CMInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StopICD10CMInferenceJobRequest, StopICD10CMInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StopICD10CMInferenceJobCommandInput extends StopICD10CMInferenceJobRequest {
    }
    export interface StopICD10CMInferenceJobCommandOutput extends StopICD10CMInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops an InferICD10CM inference job in progress.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StopICD10CMInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StopICD10CMInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StopICD10CMInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopICD10CMInferenceJobCommandInput} for command's `input` shape.
        * @see {@link StopICD10CMInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StopICD10CMInferenceJobCommand extends $Command<StopICD10CMInferenceJobCommandInput, StopICD10CMInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StopICD10CMInferenceJobCommandInput;
            constructor(input: StopICD10CMInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopICD10CMInferenceJobCommandInput, StopICD10CMInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopPHIDetectionJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StopPHIDetectionJobRequest, StopPHIDetectionJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StopPHIDetectionJobCommandInput extends StopPHIDetectionJobRequest {
    }
    export interface StopPHIDetectionJobCommandOutput extends StopPHIDetectionJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a protected health information (PHI) detection job in progress.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StopPHIDetectionJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StopPHIDetectionJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StopPHIDetectionJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopPHIDetectionJobCommandInput} for command's `input` shape.
        * @see {@link StopPHIDetectionJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StopPHIDetectionJobCommand extends $Command<StopPHIDetectionJobCommandInput, StopPHIDetectionJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StopPHIDetectionJobCommandInput;
            constructor(input: StopPHIDetectionJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopPHIDetectionJobCommandInput, StopPHIDetectionJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopRxNormInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StopRxNormInferenceJobRequest, StopRxNormInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StopRxNormInferenceJobCommandInput extends StopRxNormInferenceJobRequest {
    }
    export interface StopRxNormInferenceJobCommandOutput extends StopRxNormInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>Stops an InferRxNorm inference job in progress.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StopRxNormInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StopRxNormInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StopRxNormInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopRxNormInferenceJobCommandInput} for command's `input` shape.
        * @see {@link StopRxNormInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StopRxNormInferenceJobCommand extends $Command<StopRxNormInferenceJobCommandInput, StopRxNormInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StopRxNormInferenceJobCommandInput;
            constructor(input: StopRxNormInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopRxNormInferenceJobCommandInput, StopRxNormInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopSNOMEDCTInferenceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ComprehendMedicalClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient";
    import { StopSNOMEDCTInferenceJobRequest, StopSNOMEDCTInferenceJobResponse } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0";
    export interface StopSNOMEDCTInferenceJobCommandInput extends StopSNOMEDCTInferenceJobRequest {
    }
    export interface StopSNOMEDCTInferenceJobCommandOutput extends StopSNOMEDCTInferenceJobResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Stops an InferSNOMEDCT inference job in progress.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ComprehendMedicalClient, StopSNOMEDCTInferenceJobCommand } from "@aws-sdk/client-comprehendmedical"; // ES Modules import
        * // const { ComprehendMedicalClient, StopSNOMEDCTInferenceJobCommand } = require("@aws-sdk/client-comprehendmedical"); // CommonJS import
        * const client = new ComprehendMedicalClient(config);
        * const command = new StopSNOMEDCTInferenceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopSNOMEDCTInferenceJobCommandInput} for command's `input` shape.
        * @see {@link StopSNOMEDCTInferenceJobCommandOutput} for command's `response` shape.
        * @see {@link ComprehendMedicalClientResolvedConfig | config} for ComprehendMedicalClient's `config` shape.
        *
        */
    export class StopSNOMEDCTInferenceJobCommand extends $Command<StopSNOMEDCTInferenceJobCommandInput, StopSNOMEDCTInferenceJobCommandOutput, ComprehendMedicalClientResolvedConfig> {
            readonly input: StopSNOMEDCTInferenceJobCommandInput;
            constructor(input: StopSNOMEDCTInferenceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ComprehendMedicalClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopSNOMEDCTInferenceJobCommandInput, StopSNOMEDCTInferenceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/ComprehendMedicalClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { DescribeEntitiesDetectionV2JobCommandInput, DescribeEntitiesDetectionV2JobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeEntitiesDetectionV2JobCommand";
    import { DescribeICD10CMInferenceJobCommandInput, DescribeICD10CMInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeICD10CMInferenceJobCommand";
    import { DescribePHIDetectionJobCommandInput, DescribePHIDetectionJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribePHIDetectionJobCommand";
    import { DescribeRxNormInferenceJobCommandInput, DescribeRxNormInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeRxNormInferenceJobCommand";
    import { DescribeSNOMEDCTInferenceJobCommandInput, DescribeSNOMEDCTInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DescribeSNOMEDCTInferenceJobCommand";
    import { DetectEntitiesCommandInput, DetectEntitiesCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectEntitiesCommand";
    import { DetectEntitiesV2CommandInput, DetectEntitiesV2CommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectEntitiesV2Command";
    import { DetectPHICommandInput, DetectPHICommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/DetectPHICommand";
    import { InferICD10CMCommandInput, InferICD10CMCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferICD10CMCommand";
    import { InferRxNormCommandInput, InferRxNormCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferRxNormCommand";
    import { InferSNOMEDCTCommandInput, InferSNOMEDCTCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/InferSNOMEDCTCommand";
    import { ListEntitiesDetectionV2JobsCommandInput, ListEntitiesDetectionV2JobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListEntitiesDetectionV2JobsCommand";
    import { ListICD10CMInferenceJobsCommandInput, ListICD10CMInferenceJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListICD10CMInferenceJobsCommand";
    import { ListPHIDetectionJobsCommandInput, ListPHIDetectionJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListPHIDetectionJobsCommand";
    import { ListRxNormInferenceJobsCommandInput, ListRxNormInferenceJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListRxNormInferenceJobsCommand";
    import { ListSNOMEDCTInferenceJobsCommandInput, ListSNOMEDCTInferenceJobsCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/ListSNOMEDCTInferenceJobsCommand";
    import { StartEntitiesDetectionV2JobCommandInput, StartEntitiesDetectionV2JobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartEntitiesDetectionV2JobCommand";
    import { StartICD10CMInferenceJobCommandInput, StartICD10CMInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartICD10CMInferenceJobCommand";
    import { StartPHIDetectionJobCommandInput, StartPHIDetectionJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartPHIDetectionJobCommand";
    import { StartRxNormInferenceJobCommandInput, StartRxNormInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartRxNormInferenceJobCommand";
    import { StartSNOMEDCTInferenceJobCommandInput, StartSNOMEDCTInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StartSNOMEDCTInferenceJobCommand";
    import { StopEntitiesDetectionV2JobCommandInput, StopEntitiesDetectionV2JobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopEntitiesDetectionV2JobCommand";
    import { StopICD10CMInferenceJobCommandInput, StopICD10CMInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopICD10CMInferenceJobCommand";
    import { StopPHIDetectionJobCommandInput, StopPHIDetectionJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopPHIDetectionJobCommand";
    import { StopRxNormInferenceJobCommandInput, StopRxNormInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopRxNormInferenceJobCommand";
    import { StopSNOMEDCTInferenceJobCommandInput, StopSNOMEDCTInferenceJobCommandOutput } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/commands/StopSNOMEDCTInferenceJobCommand";
    export type ServiceInputTypes = DescribeEntitiesDetectionV2JobCommandInput | DescribeICD10CMInferenceJobCommandInput | DescribePHIDetectionJobCommandInput | DescribeRxNormInferenceJobCommandInput | DescribeSNOMEDCTInferenceJobCommandInput | DetectEntitiesCommandInput | DetectEntitiesV2CommandInput | DetectPHICommandInput | InferICD10CMCommandInput | InferRxNormCommandInput | InferSNOMEDCTCommandInput | ListEntitiesDetectionV2JobsCommandInput | ListICD10CMInferenceJobsCommandInput | ListPHIDetectionJobsCommandInput | ListRxNormInferenceJobsCommandInput | ListSNOMEDCTInferenceJobsCommandInput | StartEntitiesDetectionV2JobCommandInput | StartICD10CMInferenceJobCommandInput | StartPHIDetectionJobCommandInput | StartRxNormInferenceJobCommandInput | StartSNOMEDCTInferenceJobCommandInput | StopEntitiesDetectionV2JobCommandInput | StopICD10CMInferenceJobCommandInput | StopPHIDetectionJobCommandInput | StopRxNormInferenceJobCommandInput | StopSNOMEDCTInferenceJobCommandInput;
    export type ServiceOutputTypes = DescribeEntitiesDetectionV2JobCommandOutput | DescribeICD10CMInferenceJobCommandOutput | DescribePHIDetectionJobCommandOutput | DescribeRxNormInferenceJobCommandOutput | DescribeSNOMEDCTInferenceJobCommandOutput | DetectEntitiesCommandOutput | DetectEntitiesV2CommandOutput | DetectPHICommandOutput | InferICD10CMCommandOutput | InferRxNormCommandOutput | InferSNOMEDCTCommandOutput | ListEntitiesDetectionV2JobsCommandOutput | ListICD10CMInferenceJobsCommandOutput | ListPHIDetectionJobsCommandOutput | ListRxNormInferenceJobsCommandOutput | ListSNOMEDCTInferenceJobsCommandOutput | StartEntitiesDetectionV2JobCommandOutput | StartICD10CMInferenceJobCommandOutput | StartPHIDetectionJobCommandOutput | StartRxNormInferenceJobCommandOutput | StartSNOMEDCTInferenceJobCommandOutput | StopEntitiesDetectionV2JobCommandOutput | StopICD10CMInferenceJobCommandOutput | StopPHIDetectionJobCommandOutput | StopRxNormInferenceJobCommandOutput | StopSNOMEDCTInferenceJobCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ComprehendMedicalClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ComprehendMedicalClient class constructor that set the region, credentials and other options.
        */
    export interface ComprehendMedicalClientConfig extends ComprehendMedicalClientConfigType {
    }
    type ComprehendMedicalClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ComprehendMedicalClient class. This is resolved and normalized from the {@link ComprehendMedicalClientConfig | constructor configuration interface}.
        */
    export interface ComprehendMedicalClientResolvedConfig extends ComprehendMedicalClientResolvedConfigType {
    }
    /**
        * <p> Comprehend Medical; extracts structured information from unstructured clinical text. Use these actions
        *       to gain insight in your documents. </p>
        */
    export class ComprehendMedicalClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ComprehendMedicalClientResolvedConfig> {
            /**
                * The resolved configuration of ComprehendMedicalClient class. This is resolved and normalized from the {@link ComprehendMedicalClientConfig | constructor configuration interface}.
                */
            readonly config: ComprehendMedicalClientResolvedConfig;
            constructor(configuration: ComprehendMedicalClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ComprehendMedicalServiceException as __BaseException } from "@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/ComprehendMedicalServiceException";
    export enum EntityType {
            ANATOMY = "ANATOMY",
            MEDICAL_CONDITION = "MEDICAL_CONDITION",
            MEDICATION = "MEDICATION",
            PROTECTED_HEALTH_INFORMATION = "PROTECTED_HEALTH_INFORMATION",
            TEST_TREATMENT_PROCEDURE = "TEST_TREATMENT_PROCEDURE",
            TIME_EXPRESSION = "TIME_EXPRESSION"
    }
    export enum RelationshipType {
            ACUITY = "ACUITY",
            ADMINISTERED_VIA = "ADMINISTERED_VIA",
            DIRECTION = "DIRECTION",
            DOSAGE = "DOSAGE",
            DURATION = "DURATION",
            EVERY = "EVERY",
            FOR = "FOR",
            FORM = "FORM",
            FREQUENCY = "FREQUENCY",
            NEGATIVE = "NEGATIVE",
            OVERLAP = "OVERLAP",
            RATE = "RATE",
            ROUTE_OR_MODE = "ROUTE_OR_MODE",
            STRENGTH = "STRENGTH",
            SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
            TEST_UNIT = "TEST_UNIT",
            TEST_UNITS = "TEST_UNITS",
            TEST_VALUE = "TEST_VALUE",
            WITH_DOSAGE = "WITH_DOSAGE"
    }
    export enum AttributeName {
            DIAGNOSIS = "DIAGNOSIS",
            NEGATION = "NEGATION",
            SIGN = "SIGN",
            SYMPTOM = "SYMPTOM"
    }
    /**
        * <p> Provides contextual information about the extracted entity. </p>
        */
    export interface Trait {
            /**
                * <p> Provides a name or contextual description about the trait. </p>
                */
            Name?: AttributeName | string;
            /**
                * <p> The level of confidence that Comprehend Medical; has in the accuracy of this trait.</p>
                */
            Score?: number;
    }
    export namespace Trait {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Trait) => any;
    }
    export enum EntitySubType {
            ACUITY = "ACUITY",
            ADDRESS = "ADDRESS",
            AGE = "AGE",
            BRAND_NAME = "BRAND_NAME",
            CONTACT_POINT = "CONTACT_POINT",
            DATE = "DATE",
            DIRECTION = "DIRECTION",
            DOSAGE = "DOSAGE",
            DURATION = "DURATION",
            DX_NAME = "DX_NAME",
            EMAIL = "EMAIL",
            FORM = "FORM",
            FREQUENCY = "FREQUENCY",
            GENERIC_NAME = "GENERIC_NAME",
            ID = "ID",
            IDENTIFIER = "IDENTIFIER",
            NAME = "NAME",
            PHONE_OR_FAX = "PHONE_OR_FAX",
            PROCEDURE_NAME = "PROCEDURE_NAME",
            PROFESSION = "PROFESSION",
            QUALITY = "QUALITY",
            QUANTITY = "QUANTITY",
            RATE = "RATE",
            ROUTE_OR_MODE = "ROUTE_OR_MODE",
            STRENGTH = "STRENGTH",
            SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
            TEST_NAME = "TEST_NAME",
            TEST_UNIT = "TEST_UNIT",
            TEST_UNITS = "TEST_UNITS",
            TEST_VALUE = "TEST_VALUE",
            TIME_EXPRESSION = "TIME_EXPRESSION",
            TIME_TO_DX_NAME = "TIME_TO_DX_NAME",
            TIME_TO_MEDICATION_NAME = "TIME_TO_MEDICATION_NAME",
            TIME_TO_PROCEDURE_NAME = "TIME_TO_PROCEDURE_NAME",
            TIME_TO_TEST_NAME = "TIME_TO_TEST_NAME",
            TIME_TO_TREATMENT_NAME = "TIME_TO_TREATMENT_NAME",
            TREATMENT_NAME = "TREATMENT_NAME",
            URL = "URL"
    }
    /**
        * <p> An extracted segment of the text that is an attribute of an entity, or otherwise related
        *       to an entity, such as the dosage of a medication taken. It contains information about the
        *       attribute such as id, begin and end offset within the input text, and the segment of the input
        *       text. </p>
        */
    export interface Attribute {
            /**
                * <p> The type of attribute. </p>
                */
            Type?: EntitySubType | string;
            /**
                * <p> The level of confidence that Comprehend Medical; has that the segment of text is correctly recognized
                *       as an attribute. </p>
                */
            Score?: number;
            /**
                * <p> The level of confidence that Comprehend Medical; has that this attribute is correctly related to this
                *       entity. </p>
                */
            RelationshipScore?: number;
            /**
                * <p>The type of relationship between the entity and attribute. Type for the relationship is
                *         <code>OVERLAP</code>, indicating that the entity occurred at the same time as the
                *         <code>Date_Expression</code>. </p>
                */
            RelationshipType?: RelationshipType | string;
            /**
                * <p> The numeric identifier for this attribute. This is a monotonically increasing id unique
                *       within this response rather than a global unique identifier. </p>
                */
            Id?: number;
            /**
                * <p> The 0-based character offset in the input text that shows where the attribute begins. The
                *       offset returns the UTF-8 code point in the string. </p>
                */
            BeginOffset?: number;
            /**
                * <p> The 0-based character offset in the input text that shows where the attribute ends. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            EndOffset?: number;
            /**
                * <p> The segment of input text extracted as this attribute.</p>
                */
            Text?: string;
            /**
                * <p> The category of attribute. </p>
                */
            Category?: EntityType | string;
            /**
                * <p> Contextual information for this attribute. </p>
                */
            Traits?: Trait[];
    }
    export namespace Attribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Attribute) => any;
    }
    /**
        * <p>
        *       The number of characters in the input text to be analyzed.
        *     </p>
        */
    export interface Characters {
            /**
                * <p>
                *       The number of characters present in the input text document as processed by Comprehend Medical.
                *     </p>
                */
            OriginalTextCharacters?: number;
    }
    export namespace Characters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Characters) => any;
    }
    export interface DescribeEntitiesDetectionV2JobRequest {
            /**
                * <p>The identifier that Comprehend Medical; generated for the job. The
                *         <code>StartEntitiesDetectionV2Job</code> operation returns this identifier in its
                *       response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeEntitiesDetectionV2JobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntitiesDetectionV2JobRequest) => any;
    }
    /**
        * <p>The input properties for an entities detection job. This includes the name of the S3
        *       bucket and the path to the files to be analyzed. </p>
        */
    export interface InputDataConfig {
            /**
                * <p>The URI of the S3 bucket that contains the input data. The bucket must be in the same
                *       region as the API endpoint that you are calling.</p>
                *          <p>Each file in the document collection must be less than 40 KB. You can store a maximum of
                *       30 GB in the bucket.</p>
                */
            S3Bucket: string | undefined;
            /**
                * <p>The path to the input data files in the S3 bucket.</p>
                */
            S3Key?: string;
    }
    export namespace InputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputDataConfig) => any;
    }
    export enum JobStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            PARTIAL_SUCCESS = "PARTIAL_SUCCESS",
            STOPPED = "STOPPED",
            STOP_REQUESTED = "STOP_REQUESTED",
            SUBMITTED = "SUBMITTED"
    }
    export enum LanguageCode {
            EN = "en"
    }
    /**
        * <p>The output properties for a detection job.</p>
        */
    export interface OutputDataConfig {
            /**
                * <p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you
                *       specify the Amazon S3 location where you want to write the output data. The URI must be in the
                *       same region as the API endpoint that you are calling. The location is used as the prefix for
                *       the actual location of the output.</p>
                */
            S3Bucket: string | undefined;
            /**
                * <p>The path to the output data files in the S3 bucket. Comprehend Medical; creates an output directory
                *       using the job ID so that the output from one job does not overwrite the output of
                *       another.</p>
                */
            S3Key?: string;
    }
    export namespace OutputDataConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputDataConfig) => any;
    }
    /**
        * <p>Provides information about a detection job.</p>
        */
    export interface ComprehendMedicalAsyncJobProperties {
            /**
                * <p>The identifier assigned to the detection job.</p>
                */
            JobId?: string;
            /**
                * <p>The name that you assigned to the detection job.</p>
                */
            JobName?: string;
            /**
                * <p>The current status of the detection job. If the status is <code>FAILED</code>, the
                *         <code>Message</code> field shows the reason for the failure.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>A description of the status of a job.</p>
                */
            Message?: string;
            /**
                * <p>The time that the detection job was submitted for processing.</p>
                */
            SubmitTime?: Date;
            /**
                * <p>The time that the detection job completed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The date and time that job metadata is deleted from the server. Output files in your S3
                *       bucket will not be deleted. After the metadata is deleted, the job will no longer appear in
                *       the results of the <code>ListEntitiesDetectionV2Job</code> or the
                *         <code>ListPHIDetectionJobs</code> operation.</p>
                */
            ExpirationTime?: Date;
            /**
                * <p>The input data configuration that you supplied when you created the detection job.</p>
                */
            InputDataConfig?: InputDataConfig;
            /**
                * <p>The output data configuration that you supplied when you created the detection job.</p>
                */
            OutputDataConfig?: OutputDataConfig;
            /**
                * <p>The language code of the input documents.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>The Amazon Resource Name (ARN) that gives Comprehend Medical; read access to your input data.</p>
                */
            DataAccessRoleArn?: string;
            /**
                * <p>The path to the file that describes the results of a batch job.</p>
                */
            ManifestFilePath?: string;
            /**
                * <p>The AWS Key Management Service key, if any, used to encrypt the output files. </p>
                */
            KMSKey?: string;
            /**
                * <p>The version of the model used to analyze the documents. The version number looks like
                *       X.X.X. You can use this information to track the model used for a particular batch of
                *       documents.</p>
                */
            ModelVersion?: string;
    }
    export namespace ComprehendMedicalAsyncJobProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComprehendMedicalAsyncJobProperties) => any;
    }
    export interface DescribeEntitiesDetectionV2JobResponse {
            /**
                * <p>An object that contains the properties associated with a detection job.</p>
                */
            ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
    }
    export namespace DescribeEntitiesDetectionV2JobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEntitiesDetectionV2JobResponse) => any;
    }
    /**
        * <p> An internal server error occurred. Retry your request. </p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p> The request that you made is invalid. Check your request to determine why it's invalid
        *       and then retry the request.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>The resource identified by the specified Amazon Resource Name (ARN) was not found. Check
        *       the ARN and try your request again.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p> You have made too many requests within a short period of time. Wait for a short time and
        *       then try your request again. Contact customer support for more information about a service
        *       limit increase. </p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    export interface DescribeICD10CMInferenceJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend Medical generated for the job. <code>The
                *         StartICD10CMInferenceJob</code> operation returns this identifier in its response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeICD10CMInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeICD10CMInferenceJobRequest) => any;
    }
    export interface DescribeICD10CMInferenceJobResponse {
            /**
                * <p>An object that contains the properties associated with a detection job.</p>
                */
            ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
    }
    export namespace DescribeICD10CMInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeICD10CMInferenceJobResponse) => any;
    }
    export interface DescribePHIDetectionJobRequest {
            /**
                * <p>The identifier that Comprehend Medical; generated for the job. The <code>StartPHIDetectionJob</code>
                *       operation returns this identifier in its response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribePHIDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePHIDetectionJobRequest) => any;
    }
    export interface DescribePHIDetectionJobResponse {
            /**
                * <p>An object that contains the properties associated with a detection job.</p>
                */
            ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
    }
    export namespace DescribePHIDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePHIDetectionJobResponse) => any;
    }
    export interface DescribeRxNormInferenceJobRequest {
            /**
                * <p>The identifier that Amazon Comprehend Medical generated for the job. The
                *       StartRxNormInferenceJob operation returns this identifier in its response.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeRxNormInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRxNormInferenceJobRequest) => any;
    }
    export interface DescribeRxNormInferenceJobResponse {
            /**
                * <p>An object that contains the properties associated with a detection job.</p>
                */
            ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
    }
    export namespace DescribeRxNormInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRxNormInferenceJobResponse) => any;
    }
    export interface DescribeSNOMEDCTInferenceJobRequest {
            /**
                * <p>
                *       The identifier that Amazon Comprehend Medical generated for the job. The StartSNOMEDCTInferenceJob operation returns this identifier in its response.
                *     </p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeSNOMEDCTInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSNOMEDCTInferenceJobRequest) => any;
    }
    export interface DescribeSNOMEDCTInferenceJobResponse {
            /**
                * <p>Provides information about a detection job.</p>
                */
            ComprehendMedicalAsyncJobProperties?: ComprehendMedicalAsyncJobProperties;
    }
    export namespace DescribeSNOMEDCTInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSNOMEDCTInferenceJobResponse) => any;
    }
    export interface DetectEntitiesRequest {
            /**
                * <p> A UTF-8 text string containing the clinical content being examined for entities. Each
                *       string must contain fewer than 20,000 bytes of characters.</p>
                */
            Text: string | undefined;
    }
    export namespace DetectEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectEntitiesRequest) => any;
    }
    /**
        * <p> Provides information about an extracted medical entity.</p>
        */
    export interface Entity {
            /**
                * <p> The numeric identifier for the entity. This is a monotonically increasing id unique
                *       within this response rather than a global unique identifier. </p>
                */
            Id?: number;
            /**
                * <p> The 0-based character offset in the input text that shows where the entity begins. The
                *       offset returns the UTF-8 code point in the string. </p>
                */
            BeginOffset?: number;
            /**
                * <p> The 0-based character offset in the input text that shows where the entity ends. The
                *       offset returns the UTF-8 code point in the string. </p>
                */
            EndOffset?: number;
            /**
                * <p>The level of confidence that Comprehend Medical; has in the accuracy of the detection.</p>
                */
            Score?: number;
            /**
                * <p> The segment of input text extracted as this entity.</p>
                */
            Text?: string;
            /**
                * <p> The category of the entity.</p>
                */
            Category?: EntityType | string;
            /**
                * <p> Describes the specific type of entity with category of entities.</p>
                */
            Type?: EntitySubType | string;
            /**
                * <p>Contextual information for the entity.</p>
                */
            Traits?: Trait[];
            /**
                * <p> The extracted attributes that relate to this entity.</p>
                */
            Attributes?: Attribute[];
    }
    export namespace Entity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Entity) => any;
    }
    /**
        * <p> An attribute that was extracted, but Comprehend Medical; was unable to relate to an entity. </p>
        */
    export interface UnmappedAttribute {
            /**
                * <p> The type of the unmapped attribute, could be one of the following values: "MEDICATION",
                *       "MEDICAL_CONDITION", "ANATOMY", "TEST_AND_TREATMENT_PROCEDURE" or
                *       "PROTECTED_HEALTH_INFORMATION". </p>
                */
            Type?: EntityType | string;
            /**
                * <p> The specific attribute that has been extracted but not mapped to an entity. </p>
                */
            Attribute?: Attribute;
    }
    export namespace UnmappedAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnmappedAttribute) => any;
    }
    export interface DetectEntitiesResponse {
            /**
                * <p> The collection of medical entities extracted from the input text and their associated
                *       information. For each entity, the response provides the entity text, the entity category,
                *       where the entity text begins and ends, and the level of confidence that Comprehend Medical; has in the
                *       detection and analysis. Attributes and traits of the entity are also returned.</p>
                */
            Entities: Entity[] | undefined;
            /**
                * <p> Attributes extracted from the input text that we were unable to relate to an
                *       entity.</p>
                */
            UnmappedAttributes?: UnmappedAttribute[];
            /**
                * <p> If the result of the previous request to <code>DetectEntities</code> was truncated,
                *       include the <code>PaginationToken</code> to fetch the next page of entities.</p>
                */
            PaginationToken?: string;
            /**
                * <p>The version of the model used to analyze the documents. The version number looks like
                *       X.X.X. You can use this information to track the model used for a particular batch of
                *       documents.</p>
                */
            ModelVersion: string | undefined;
    }
    export namespace DetectEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectEntitiesResponse) => any;
    }
    /**
        * <p> The input text was not in valid UTF-8 character encoding. Check your text then retry your
        *       request.</p>
        */
    export class InvalidEncodingException extends __BaseException {
            readonly name: "InvalidEncodingException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEncodingException, __BaseException>);
    }
    /**
        * <p> The Comprehend Medical; service is temporarily unavailable. Please wait and then retry your request.
        *     </p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * <p> The size of the text you submitted exceeds the size limit. Reduce the size of the text or
        *       use a smaller document and then retry your request. </p>
        */
    export class TextSizeLimitExceededException extends __BaseException {
            readonly name: "TextSizeLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TextSizeLimitExceededException, __BaseException>);
    }
    export interface DetectEntitiesV2Request {
            /**
                * <p>A UTF-8 string containing the clinical content being examined for entities. Each string
                *       must contain fewer than 20,000 bytes of characters.</p>
                */
            Text: string | undefined;
    }
    export namespace DetectEntitiesV2Request {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectEntitiesV2Request) => any;
    }
    export interface DetectEntitiesV2Response {
            /**
                * <p>The collection of medical entities extracted from the input text and their associated
                *       information. For each entity, the response provides the entity text, the entity category,
                *       where the entity text begins and ends, and the level of confidence in the detection and
                *       analysis. Attributes and traits of the entity are also returned.</p>
                */
            Entities: Entity[] | undefined;
            /**
                * <p>Attributes extracted from the input text that couldn't be related to an entity.</p>
                */
            UnmappedAttributes?: UnmappedAttribute[];
            /**
                * <p>If the result to the <code>DetectEntitiesV2</code> operation was truncated, include the
                *         <code>PaginationToken</code> to fetch the next page of entities.</p>
                */
            PaginationToken?: string;
            /**
                * <p>The version of the model used to analyze the documents. The version number looks like
                *       X.X.X. You can use this information to track the model used for a particular batch of
                *       documents.</p>
                */
            ModelVersion: string | undefined;
    }
    export namespace DetectEntitiesV2Response {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectEntitiesV2Response) => any;
    }
    export interface DetectPHIRequest {
            /**
                * <p> A UTF-8 text string containing the clinical content being examined for PHI entities. Each
                *       string must contain fewer than 20,000 bytes of characters.</p>
                */
            Text: string | undefined;
    }
    export namespace DetectPHIRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectPHIRequest) => any;
    }
    export interface DetectPHIResponse {
            /**
                * <p> The collection of PHI entities extracted from the input text and their associated
                *       information. For each entity, the response provides the entity text, the entity category,
                *       where the entity text begins and ends, and the level of confidence that Comprehend Medical; has in its
                *       detection. </p>
                */
            Entities: Entity[] | undefined;
            /**
                * <p> If the result of the previous request to <code>DetectPHI</code> was truncated, include
                *       the <code>PaginationToken</code> to fetch the next page of PHI entities. </p>
                */
            PaginationToken?: string;
            /**
                * <p>The version of the model used to analyze the documents. The version number looks like
                *       X.X.X. You can use this information to track the model used for a particular batch of
                *       documents.</p>
                */
            ModelVersion: string | undefined;
    }
    export namespace DetectPHIResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectPHIResponse) => any;
    }
    export interface InferICD10CMRequest {
            /**
                * <p>The input text used for analysis. The input for InferICD10CM is a string from 1 to 10000
                *       characters.</p>
                */
            Text: string | undefined;
    }
    export namespace InferICD10CMRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferICD10CMRequest) => any;
    }
    export enum ICD10CMEntityType {
            DX_NAME = "DX_NAME",
            TIME_EXPRESSION = "TIME_EXPRESSION"
    }
    export enum ICD10CMRelationshipType {
            OVERLAP = "OVERLAP",
            SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE"
    }
    export enum ICD10CMTraitName {
            DIAGNOSIS = "DIAGNOSIS",
            NEGATION = "NEGATION",
            SIGN = "SIGN",
            SYMPTOM = "SYMPTOM"
    }
    /**
        * <p>Contextual information for the entity. The traits recognized by InferICD10CM are
        *         <code>DIAGNOSIS</code>, <code>SIGN</code>, <code>SYMPTOM</code>, and
        *       <code>NEGATION</code>.</p>
        */
    export interface ICD10CMTrait {
            /**
                * <p>Provides a name or contextual description about the trait.</p>
                */
            Name?: ICD10CMTraitName | string;
            /**
                * <p>The level of confidence that Comprehend Medical; has that the segment of text is correctly recognized
                *       as a trait.</p>
                */
            Score?: number;
    }
    export namespace ICD10CMTrait {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ICD10CMTrait) => any;
    }
    export enum ICD10CMAttributeType {
            ACUITY = "ACUITY",
            DIRECTION = "DIRECTION",
            QUALITY = "QUALITY",
            QUANTITY = "QUANTITY",
            SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
            TIME_EXPRESSION = "TIME_EXPRESSION",
            TIME_TO_DX_NAME = "TIME_TO_DX_NAME"
    }
    /**
        * <p>The detected attributes that relate to an entity. This includes an extracted segment of
        *       the text that is an attribute of an entity, or otherwise related to an entity. InferICD10CM
        *       detects the following attributes: <code>Direction</code>, <code>System, Organ or Site</code>,
        *       and <code>Acuity</code>.</p>
        */
    export interface ICD10CMAttribute {
            /**
                * <p>The type of attribute. InferICD10CM detects entities of the type <code>DX_NAME</code>.
                *     </p>
                */
            Type?: ICD10CMAttributeType | string;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has that the segment of text is
                *       correctly recognized as an attribute.</p>
                */
            Score?: number;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has that this attribute is
                *       correctly related to this entity.</p>
                */
            RelationshipScore?: number;
            /**
                * <p>The numeric identifier for this attribute. This is a monotonically increasing id unique
                *       within this response rather than a global unique identifier.</p>
                */
            Id?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the attribute begins. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            BeginOffset?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the attribute ends. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            EndOffset?: number;
            /**
                * <p>The segment of input text which contains the detected attribute.</p>
                */
            Text?: string;
            /**
                * <p>The contextual information for the attribute. The traits recognized by InferICD10CM are
                *         <code>DIAGNOSIS</code>, <code>SIGN</code>, <code>SYMPTOM</code>, and
                *       <code>NEGATION</code>.</p>
                */
            Traits?: ICD10CMTrait[];
            /**
                * <p>The category of attribute. Can be either of <code>DX_NAME</code> or <code>TIME_EXPRESSION</code>.</p>
                */
            Category?: ICD10CMEntityType | string;
            /**
                * <p>The type of relationship between the entity and attribute. Type for the relationship can
                *         be either of <code>OVERLAP</code> or <code>SYSTEM_ORGAN_SITE</code>.</p>
                */
            RelationshipType?: ICD10CMRelationshipType | string;
    }
    export namespace ICD10CMAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ICD10CMAttribute) => any;
    }
    export enum ICD10CMEntityCategory {
            MEDICAL_CONDITION = "MEDICAL_CONDITION"
    }
    /**
        * <p> The ICD-10-CM concepts that the entity could refer to, along with a score indicating the
        *       likelihood of the match.</p>
        */
    export interface ICD10CMConcept {
            /**
                * <p>The long description of the ICD-10-CM code in the ontology.</p>
                */
            Description?: string;
            /**
                * <p>The ICD-10-CM code that identifies the concept found in the knowledge base from the
                *       Centers for Disease Control.</p>
                */
            Code?: string;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has that the entity is accurately
                *       linked to an ICD-10-CM concept.</p>
                */
            Score?: number;
    }
    export namespace ICD10CMConcept {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ICD10CMConcept) => any;
    }
    /**
        * <p>The collection of medical entities extracted from the input text and their associated
        *       information. For each entity, the response provides the entity text, the entity category,
        *       where the entity text begins and ends, and the level of confidence that Amazon Comprehend
        *       Medical has in the detection and analysis. Attributes and traits of the entity are also
        *       returned. </p>
        */
    export interface ICD10CMEntity {
            /**
                * <p>The numeric identifier for the entity. This is a monotonically increasing id unique within
                *       this response rather than a global unique identifier.</p>
                */
            Id?: number;
            /**
                * <p>The segment of input text that is matched to the detected entity.</p>
                */
            Text?: string;
            /**
                * <p> The category of the entity. InferICD10CM detects entities in the
                *         <code>MEDICAL_CONDITION</code> category. </p>
                */
            Category?: ICD10CMEntityCategory | string;
            /**
                * <p>Describes the specific type of entity with category of entities. InferICD10CM detects
                *       entities of the type <code>DX_NAME</code> and <code>TIME_EXPRESSION</code>.</p>
                */
            Type?: ICD10CMEntityType | string;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has in the accuracy of the
                *       detection.</p>
                */
            Score?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the entity begins. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            BeginOffset?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the entity ends. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            EndOffset?: number;
            /**
                * <p>The detected attributes that relate to the entity. An extracted segment of the text that
                *       is an attribute of an entity, or otherwise related to an entity, such as the nature of a
                *       medical condition.</p>
                */
            Attributes?: ICD10CMAttribute[];
            /**
                * <p>Provides Contextual information for the entity. The traits recognized by InferICD10CM are
                *         <code>DIAGNOSIS</code>, <code>SIGN</code>, <code>SYMPTOM</code>, and
                *       <code>NEGATION.</code>
                *          </p>
                */
            Traits?: ICD10CMTrait[];
            /**
                * <p>The ICD-10-CM concepts that the entity could refer to, along with a score indicating the
                *       likelihood of the match.</p>
                */
            ICD10CMConcepts?: ICD10CMConcept[];
    }
    export namespace ICD10CMEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ICD10CMEntity) => any;
    }
    export interface InferICD10CMResponse {
            /**
                * <p>The medical conditions detected in the text linked to ICD-10-CM concepts. If the action is
                *       successful, the service sends back an HTTP 200 response, as well as the entities
                *       detected.</p>
                */
            Entities: ICD10CMEntity[] | undefined;
            /**
                * <p>If the result of the previous request to <code>InferICD10CM</code> was truncated, include
                *       the <code>PaginationToken</code> to fetch the next page of medical condition entities. </p>
                */
            PaginationToken?: string;
            /**
                * <p>The version of the model used to analyze the documents, in the format
                *         <i>n</i>.<i>n</i>.<i>n</i> You can use this
                *       information to track the model used for a particular batch of documents.</p>
                */
            ModelVersion?: string;
    }
    export namespace InferICD10CMResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferICD10CMResponse) => any;
    }
    export interface InferRxNormRequest {
            /**
                * <p>The input text used for analysis. The input for InferRxNorm is a string from 1 to 10000
                *       characters.</p>
                */
            Text: string | undefined;
    }
    export namespace InferRxNormRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferRxNormRequest) => any;
    }
    export enum RxNormTraitName {
            NEGATION = "NEGATION"
    }
    /**
        * <p>The contextual information for the entity. InferRxNorm recognizes the trait
        *         <code>NEGATION</code>, which is any indication that the patient is not taking a medication.
        *     </p>
        */
    export interface RxNormTrait {
            /**
                * <p>Provides a name or contextual description about the trait.</p>
                */
            Name?: RxNormTraitName | string;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has in the accuracy of the detected
                *       trait.</p>
                */
            Score?: number;
    }
    export namespace RxNormTrait {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RxNormTrait) => any;
    }
    export enum RxNormAttributeType {
            DOSAGE = "DOSAGE",
            DURATION = "DURATION",
            FORM = "FORM",
            FREQUENCY = "FREQUENCY",
            RATE = "RATE",
            ROUTE_OR_MODE = "ROUTE_OR_MODE",
            STRENGTH = "STRENGTH"
    }
    /**
        * <p>The extracted attributes that relate to this entity. The attributes recognized by
        *       InferRxNorm are <code>DOSAGE</code>, <code>DURATION</code>, <code>FORM</code>,
        *         <code>FREQUENCY</code>, <code>RATE</code>, <code>ROUTE_OR_MODE</code>.</p>
        */
    export interface RxNormAttribute {
            /**
                * <p>The type of attribute. The types of attributes recognized by InferRxNorm are
                *         <code>BRAND_NAME</code> and <code>GENERIC_NAME</code>.</p>
                */
            Type?: RxNormAttributeType | string;
            /**
                * <p>The level of confidence that Comprehend Medical has that the segment of text is correctly
                *       recognized as an attribute.</p>
                */
            Score?: number;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has that the attribute is
                *       accurately linked to an entity.</p>
                */
            RelationshipScore?: number;
            /**
                * <p>The numeric identifier for this attribute. This is a monotonically increasing id unique
                *       within this response rather than a global unique identifier.</p>
                */
            Id?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the attribute begins. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            BeginOffset?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the attribute ends. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            EndOffset?: number;
            /**
                * <p>The segment of input text which corresponds to the detected attribute.</p>
                */
            Text?: string;
            /**
                * <p>Contextual information for the attribute. InferRxNorm recognizes the trait
                *         <code>NEGATION</code> for attributes, i.e. that the patient is not taking a specific dose or
                *       form of a medication.</p>
                */
            Traits?: RxNormTrait[];
    }
    export namespace RxNormAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RxNormAttribute) => any;
    }
    export enum RxNormEntityCategory {
            MEDICATION = "MEDICATION"
    }
    /**
        * <p>The RxNorm concept that the entity could refer to, along with a score indicating the
        *       likelihood of the match.</p>
        */
    export interface RxNormConcept {
            /**
                * <p>The description of the RxNorm concept.</p>
                */
            Description?: string;
            /**
                * <p>RxNorm concept ID, also known as the RxCUI.</p>
                */
            Code?: string;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has that the entity is accurately
                *       linked to the reported RxNorm concept.</p>
                */
            Score?: number;
    }
    export namespace RxNormConcept {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RxNormConcept) => any;
    }
    export enum RxNormEntityType {
            BRAND_NAME = "BRAND_NAME",
            GENERIC_NAME = "GENERIC_NAME"
    }
    /**
        * <p>The collection of medical entities extracted from the input text and their associated
        *       information. For each entity, the response provides the entity text, the entity category,
        *       where the entity text begins and ends, and the level of confidence that Amazon Comprehend
        *       Medical has in the detection and analysis. Attributes and traits of the entity are also
        *       returned. </p>
        */
    export interface RxNormEntity {
            /**
                * <p>The numeric identifier for the entity. This is a monotonically increasing id unique within
                *       this response rather than a global unique identifier.</p>
                */
            Id?: number;
            /**
                * <p>The segment of input text extracted from which the entity was detected.</p>
                */
            Text?: string;
            /**
                * <p>The category of the entity. The recognized categories are <code>GENERIC</code> or
                *         <code>BRAND_NAME</code>.</p>
                */
            Category?: RxNormEntityCategory | string;
            /**
                * <p> Describes the specific type of entity. For InferRxNorm, the recognized entity type is
                *         <code>MEDICATION</code>.</p>
                */
            Type?: RxNormEntityType | string;
            /**
                * <p>The level of confidence that Amazon Comprehend Medical has in the accuracy of the detected
                *       entity.</p>
                */
            Score?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the entity begins. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            BeginOffset?: number;
            /**
                * <p>The 0-based character offset in the input text that shows where the entity ends. The
                *       offset returns the UTF-8 code point in the string.</p>
                */
            EndOffset?: number;
            /**
                * <p>The extracted attributes that relate to the entity. The attributes recognized by
                *       InferRxNorm are <code>DOSAGE</code>, <code>DURATION</code>, <code>FORM</code>,
                *         <code>FREQUENCY</code>, <code>RATE</code>, <code>ROUTE_OR_MODE</code>, and
                *         <code>STRENGTH</code>.</p>
                */
            Attributes?: RxNormAttribute[];
            /**
                * <p> Contextual information for the entity.</p>
                */
            Traits?: RxNormTrait[];
            /**
                * <p> The RxNorm concepts that the entity could refer to, along with a score indicating the
                *       likelihood of the match.</p>
                */
            RxNormConcepts?: RxNormConcept[];
    }
    export namespace RxNormEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RxNormEntity) => any;
    }
    export interface InferRxNormResponse {
            /**
                * <p>The medication entities detected in the text linked to RxNorm concepts. If the action is
                *       successful, the service sends back an HTTP 200 response, as well as the entities
                *       detected.</p>
                */
            Entities: RxNormEntity[] | undefined;
            /**
                * <p>If the result of the previous request to <code>InferRxNorm</code> was truncated, include
                *       the <code>PaginationToken</code> to fetch the next page of medication entities.</p>
                */
            PaginationToken?: string;
            /**
                * <p>The version of the model used to analyze the documents, in the format
                *         <i>n</i>.<i>n</i>.<i>n</i> You can use this
                *       information to track the model used for a particular batch of documents.</p>
                */
            ModelVersion?: string;
    }
    export namespace InferRxNormResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferRxNormResponse) => any;
    }
    export interface InferSNOMEDCTRequest {
            /**
                * <p>
                *       The input text to be analyzed using InferSNOMEDCT. The text should be a string with 1 to 10000 characters.
                *     </p>
                */
            Text: string | undefined;
    }
    export namespace InferSNOMEDCTRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferSNOMEDCTRequest) => any;
    }
    export enum SNOMEDCTEntityCategory {
            ANATOMY = "ANATOMY",
            MEDICAL_CONDITION = "MEDICAL_CONDITION",
            TEST_TREATMENT_PROCEDURE = "TEST_TREATMENT_PROCEDURE"
    }
    export enum SNOMEDCTRelationshipType {
            ACUITY = "ACUITY",
            DIRECTION = "DIRECTION",
            QUALITY = "QUALITY",
            SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
            TEST_UNITS = "TEST_UNITS",
            TEST_VALUE = "TEST_VALUE"
    }
    /**
        * <p>
        *       The SNOMED-CT concepts that the entity could refer to, along with a score indicating the likelihood of the match.
        *     </p>
        */
    export interface SNOMEDCTConcept {
            /**
                * <p>
                *       The description of the SNOMED-CT concept.
                *     </p>
                */
            Description?: string;
            /**
                * <p>
                *       The numeric ID for the SNOMED-CT concept.
                *     </p>
                */
            Code?: string;
            /**
                * <p>
                *       The level of confidence Comprehend Medical has that the entity should be linked to the identified SNOMED-CT concept.
                *     </p>
                */
            Score?: number;
    }
    export namespace SNOMEDCTConcept {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNOMEDCTConcept) => any;
    }
    export enum SNOMEDCTTraitName {
            DIAGNOSIS = "DIAGNOSIS",
            NEGATION = "NEGATION",
            SIGN = "SIGN",
            SYMPTOM = "SYMPTOM"
    }
    /**
        * <p>
        *       Contextual information for an entity.
        *     </p>
        */
    export interface SNOMEDCTTrait {
            /**
                * <p>
                *       The name or contextual description of a detected trait.
                *     </p>
                */
            Name?: SNOMEDCTTraitName | string;
            /**
                * <p>
                *       The level of confidence that Comprehend Medical has in the accuracy of a detected trait.
                *     </p>
                */
            Score?: number;
    }
    export namespace SNOMEDCTTrait {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNOMEDCTTrait) => any;
    }
    export enum SNOMEDCTAttributeType {
            ACUITY = "ACUITY",
            DIRECTION = "DIRECTION",
            QUALITY = "QUALITY",
            SYSTEM_ORGAN_SITE = "SYSTEM_ORGAN_SITE",
            TEST_UNIT = "TEST_UNIT",
            TEST_VALUE = "TEST_VALUE"
    }
    /**
        * <p>
        *       The extracted attributes that relate to an entity. An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken.
        *     </p>
        */
    export interface SNOMEDCTAttribute {
            /**
                * <p>
                *       The category of the detected attribute. Possible categories include MEDICAL_CONDITION, ANATOMY, and TEST_TREATMENT_PROCEDURE.
                *     </p>
                */
            Category?: SNOMEDCTEntityCategory | string;
            /**
                * <p>
                *       The type of attribute. Possible types include DX_NAME, ACUITY, DIRECTION, SYSTEM_ORGAN_SITE,TEST_NAME, TEST_VALUE, TEST_UNIT, PROCEDURE_NAME, and TREATMENT_NAME.
                *     </p>
                */
            Type?: SNOMEDCTAttributeType | string;
            /**
                * <p>
                *       The level of confidence that Comprehend Medical has that the segment of text is correctly recognized as an attribute.
                *     </p>
                */
            Score?: number;
            /**
                * <p>
                *       The level of confidence that Comprehend Medical has that this attribute is correctly related to this entity.
                *     </p>
                */
            RelationshipScore?: number;
            /**
                * <p>
                *       The type of relationship that exists between the entity and the related attribute.
                *     </p>
                */
            RelationshipType?: SNOMEDCTRelationshipType | string;
            /**
                * <p>
                *       The numeric identifier for this attribute. This is a monotonically increasing id unique within this response rather than a global unique identifier.
                *     </p>
                */
            Id?: number;
            /**
                * <p>
                *       The 0-based character offset in the input text that shows where the attribute begins. The offset returns the UTF-8 code point in the string.
                *     </p>
                */
            BeginOffset?: number;
            /**
                * <p>
                *       The 0-based character offset in the input text that shows where the attribute ends. The offset returns the UTF-8 code point in the string.
                *     </p>
                */
            EndOffset?: number;
            /**
                * <p>
                *       The segment of input text extracted as this attribute.
                *     </p>
                */
            Text?: string;
            /**
                * <p>
                *       Contextual information for an attribute. Examples include signs, symptoms, diagnosis, and negation.
                *     </p>
                */
            Traits?: SNOMEDCTTrait[];
            /**
                * <p>
                *       The SNOMED-CT concepts specific to an attribute, along with a score indicating the likelihood of the match.
                *     </p>
                */
            SNOMEDCTConcepts?: SNOMEDCTConcept[];
    }
    export namespace SNOMEDCTAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNOMEDCTAttribute) => any;
    }
    export enum SNOMEDCTEntityType {
            DX_NAME = "DX_NAME",
            PROCEDURE_NAME = "PROCEDURE_NAME",
            TEST_NAME = "TEST_NAME",
            TREATMENT_NAME = "TREATMENT_NAME"
    }
    /**
        * <p>
        *       The collection of medical entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned.
        *     </p>
        */
    export interface SNOMEDCTEntity {
            /**
                * <p>
                *       The numeric identifier for the entity. This is a monotonically increasing id unique within this response rather than a global unique identifier.
                *     </p>
                */
            Id?: number;
            /**
                * <p>
                *       The segment of input text extracted as this entity.
                *     </p>
                */
            Text?: string;
            /**
                * <p>
                *       The category of the detected entity. Possible categories are MEDICAL_CONDITION, ANATOMY, or TEST_TREATMENT_PROCEDURE.
                *     </p>
                */
            Category?: SNOMEDCTEntityCategory | string;
            /**
                * <p>
                *       Describes the specific type of entity with category of entities. Possible types include DX_NAME, ACUITY, DIRECTION, SYSTEM_ORGAN_SITE, TEST_NAME, TEST_VALUE, TEST_UNIT, PROCEDURE_NAME, or TREATMENT_NAME.
                *     </p>
                */
            Type?: SNOMEDCTEntityType | string;
            /**
                * <p>
                *       The level of confidence that Comprehend Medical has in the accuracy of the detected entity.
                *     </p>
                */
            Score?: number;
            /**
                * <p>
                *       The 0-based character offset in the input text that shows where the entity begins. The offset returns the UTF-8 code point in the string.
                *     </p>
                */
            BeginOffset?: number;
            /**
                * <p>
                *       The 0-based character offset in the input text that shows where the entity ends. The offset returns the UTF-8 code point in the string.
                *     </p>
                */
            EndOffset?: number;
            /**
                * <p>
                *       An extracted segment of the text that is an attribute of an entity, or otherwise related to an entity, such as the dosage of a medication taken.
                *     </p>
                */
            Attributes?: SNOMEDCTAttribute[];
            /**
                * <p>
                *       Contextual information for the entity.
                *     </p>
                */
            Traits?: SNOMEDCTTrait[];
            /**
                * <p>
                *       The SNOMED concepts that the entity could refer to, along with a score indicating the likelihood of the match.
                *     </p>
                */
            SNOMEDCTConcepts?: SNOMEDCTConcept[];
    }
    export namespace SNOMEDCTEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNOMEDCTEntity) => any;
    }
    /**
        * <p>
        *       The information about the revision of the SNOMED-CT ontology in the response. Specifically, the details include the SNOMED-CT edition, language, and version date.
        *     </p>
        */
    export interface SNOMEDCTDetails {
            /**
                * <p>
                *       The edition of SNOMED-CT used. The edition used for the InferSNOMEDCT editions is the US edition.
                *     </p>
                */
            Edition?: string;
            /**
                * <p>
                *       The language used in the SNOMED-CT ontology. All Amazon Comprehend Medical operations are US English (en).
                *     </p>
                */
            Language?: string;
            /**
                * <p>
                *       The version date of the SNOMED-CT ontology used.
                *     </p>
                */
            VersionDate?: string;
    }
    export namespace SNOMEDCTDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNOMEDCTDetails) => any;
    }
    export interface InferSNOMEDCTResponse {
            /**
                * <p>
                *       The collection of medical concept entities extracted from the input text and their associated information. For each entity, the response provides the entity text, the entity category, where the entity text begins and ends, and the level of confidence that Comprehend Medical has in the detection and analysis. Attributes and traits of the entity are also returned.
                *     </p>
                */
            Entities: SNOMEDCTEntity[] | undefined;
            /**
                * <p>
                *       If the result of the request is truncated, the pagination token can be used to fetch the next page of entities.
                *     </p>
                */
            PaginationToken?: string;
            /**
                * <p>
                *       The version of the model used to analyze the documents, in the format n.n.n You can use this information to track the model used for a particular batch of documents.
                *     </p>
                */
            ModelVersion?: string;
            /**
                * <p>
                *       The details of the SNOMED-CT revision, including the edition, language, and version date.
                *     </p>
                */
            SNOMEDCTDetails?: SNOMEDCTDetails;
            /**
                * <p>
                *       The number of characters in the input request documentation.
                *     </p>
                */
            Characters?: Characters;
    }
    export namespace InferSNOMEDCTResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InferSNOMEDCTResponse) => any;
    }
    /**
        * <p>Provides information for filtering a list of detection jobs.</p>
        */
    export interface ComprehendMedicalAsyncJobFilter {
            /**
                * <p>Filters on the name of the job.</p>
                */
            JobName?: string;
            /**
                * <p>Filters the list of jobs based on job status. Returns only jobs with the specified
                *       status.</p>
                */
            JobStatus?: JobStatus | string;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted before the specified time. Jobs are returned in ascending order,
                *       oldest to newest.</p>
                */
            SubmitTimeBefore?: Date;
            /**
                * <p>Filters the list of jobs based on the time that the job was submitted for processing.
                *       Returns only jobs submitted after the specified time. Jobs are returned in descending order,
                *       newest to oldest.</p>
                */
            SubmitTimeAfter?: Date;
    }
    export namespace ComprehendMedicalAsyncJobFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComprehendMedicalAsyncJobFilter) => any;
    }
    export interface ListEntitiesDetectionV2JobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or
                *       the date and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: ComprehendMedicalAsyncJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEntitiesDetectionV2JobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesDetectionV2JobsRequest) => any;
    }
    export interface ListEntitiesDetectionV2JobsResponse {
            /**
                * <p>A list containing the properties of each job returned.</p>
                */
            ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListEntitiesDetectionV2JobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesDetectionV2JobsResponse) => any;
    }
    /**
        * <p>The filter that you specified for the operation is invalid. Check the filter values that
        *       you entered and try your request again.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface ListICD10CMInferenceJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or
                *       the date and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: ComprehendMedicalAsyncJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListICD10CMInferenceJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListICD10CMInferenceJobsRequest) => any;
    }
    export interface ListICD10CMInferenceJobsResponse {
            /**
                * <p>A list containing the properties of each job that is returned.</p>
                */
            ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListICD10CMInferenceJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListICD10CMInferenceJobsResponse) => any;
    }
    export interface ListPHIDetectionJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or
                *       the date and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: ComprehendMedicalAsyncJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPHIDetectionJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPHIDetectionJobsRequest) => any;
    }
    export interface ListPHIDetectionJobsResponse {
            /**
                * <p>A list containing the properties of each job returned.</p>
                */
            ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListPHIDetectionJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPHIDetectionJobsResponse) => any;
    }
    export interface ListRxNormInferenceJobsRequest {
            /**
                * <p>Filters the jobs that are returned. You can filter jobs based on their names, status, or
                *       the date and time that they were submitted. You can only set one filter at a time.</p>
                */
            Filter?: ComprehendMedicalAsyncJobFilter;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace ListRxNormInferenceJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRxNormInferenceJobsRequest) => any;
    }
    export interface ListRxNormInferenceJobsResponse {
            /**
                * <p>The maximum number of results to return in each page. The default is 100.</p>
                */
            ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
            /**
                * <p>Identifies the next page of results to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListRxNormInferenceJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRxNormInferenceJobsResponse) => any;
    }
    export interface ListSNOMEDCTInferenceJobsRequest {
            /**
                * <p>Provides information for filtering a list of detection jobs.</p>
                */
            Filter?: ComprehendMedicalAsyncJobFilter;
            /**
                * <p>
                *       Identifies the next page of InferSNOMEDCT results to return.
                *     </p>
                */
            NextToken?: string;
            /**
                * <p>
                *       The maximum number of results to return in each page. The default is 100.
                *     </p>
                */
            MaxResults?: number;
    }
    export namespace ListSNOMEDCTInferenceJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSNOMEDCTInferenceJobsRequest) => any;
    }
    export interface ListSNOMEDCTInferenceJobsResponse {
            /**
                * <p>
                *       A list containing the properties of each job that is returned.
                *     </p>
                */
            ComprehendMedicalAsyncJobPropertiesList?: ComprehendMedicalAsyncJobProperties[];
            /**
                * <p>
                *       Identifies the next page of results to return.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace ListSNOMEDCTInferenceJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSNOMEDCTInferenceJobsResponse) => any;
    }
    export interface StartEntitiesDetectionV2JobRequest {
            /**
                * <p>The input configuration that specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>The output configuration that specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical;
                *       generates one for you.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a
                *       key, the files are written in plain text.</p>
                */
            KMSKey?: string;
            /**
                * <p>The language of the input documents. All documents must be in the same language. Comprehend Medical; processes files in US English (en).</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace StartEntitiesDetectionV2JobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartEntitiesDetectionV2JobRequest) => any;
    }
    export interface StartEntitiesDetectionV2JobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of a job, use this identifier with
                *       the <code>DescribeEntitiesDetectionV2Job</code> operation.</p>
                */
            JobId?: string;
    }
    export namespace StartEntitiesDetectionV2JobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartEntitiesDetectionV2JobResponse) => any;
    }
    export interface StartICD10CMInferenceJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical;
                *       generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a
                *       key, the files are written in plain text.</p>
                */
            KMSKey?: string;
            /**
                * <p>The language of the input documents. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace StartICD10CMInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartICD10CMInferenceJobRequest) => any;
    }
    export interface StartICD10CMInferenceJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of a job, use this identifier with
                *       the <code>StartICD10CMInferenceJob</code> operation.</p>
                */
            JobId?: string;
    }
    export namespace StartICD10CMInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartICD10CMInferenceJobResponse) => any;
    }
    export interface StartPHIDetectionJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical;
                *       generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a
                *       key, the files are written in plain text.</p>
                */
            KMSKey?: string;
            /**
                * <p>The language of the input documents. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace StartPHIDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPHIDetectionJobRequest) => any;
    }
    export interface StartPHIDetectionJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of a job, use this identifier with
                *       the <code>DescribePHIDetectionJob</code> operation.</p>
                */
            JobId?: string;
    }
    export namespace StartPHIDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPHIDetectionJobResponse) => any;
    }
    export interface StartRxNormInferenceJobRequest {
            /**
                * <p>Specifies the format and location of the input data for the job.</p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>Specifies where to send the output files.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that
                *       grants Comprehend Medical; read access to your input data. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/access-control-managing-permissions-med.html#auth-role-permissions-med"> Role-Based Permissions Required for Asynchronous Operations</a>.</p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>The identifier of the job.</p>
                */
            JobName?: string;
            /**
                * <p>A unique identifier for the request. If you don't set the client request token, Comprehend Medical;
                *       generates one.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>An AWS Key Management Service key to encrypt your output files. If you do not specify a
                *       key, the files are written in plain text.</p>
                */
            KMSKey?: string;
            /**
                * <p>The language of the input documents. All documents must be in the same language.</p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace StartRxNormInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRxNormInferenceJobRequest) => any;
    }
    export interface StartRxNormInferenceJobResponse {
            /**
                * <p>The identifier of the job.</p>
                */
            JobId?: string;
    }
    export namespace StartRxNormInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRxNormInferenceJobResponse) => any;
    }
    export interface StartSNOMEDCTInferenceJobRequest {
            /**
                * <p>The input properties for an entities detection job. This includes the name of the S3
                *       bucket and the path to the files to be analyzed. </p>
                */
            InputDataConfig: InputDataConfig | undefined;
            /**
                * <p>The output properties for a detection job.</p>
                */
            OutputDataConfig: OutputDataConfig | undefined;
            /**
                * <p>
                *       The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend Medical read access to your input data.
                *     </p>
                */
            DataAccessRoleArn: string | undefined;
            /**
                * <p>
                *       The user generated name the asynchronous InferSNOMEDCT job.
                *     </p>
                */
            JobName?: string;
            /**
                * <p>
                *       A unique identifier for the request. If you don't set the client request token, Amazon Comprehend Medical generates one.
                *     </p>
                */
            ClientRequestToken?: string;
            /**
                * <p>
                *       An AWS Key Management Service key used to encrypt your output files. If you do not specify a key, the files are written in plain text.
                *     </p>
                */
            KMSKey?: string;
            /**
                * <p>
                *       The language of the input documents. All documents must be in the same language.
                *     </p>
                */
            LanguageCode: LanguageCode | string | undefined;
    }
    export namespace StartSNOMEDCTInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSNOMEDCTInferenceJobRequest) => any;
    }
    export interface StartSNOMEDCTInferenceJobResponse {
            /**
                * <p>
                *       The identifier generated for the job. To get the status of a job, use this identifier with the StartSNOMEDCTInferenceJob operation.
                *     </p>
                */
            JobId?: string;
    }
    export namespace StartSNOMEDCTInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSNOMEDCTInferenceJobResponse) => any;
    }
    export interface StopEntitiesDetectionV2JobRequest {
            /**
                * <p>The identifier of the medical entities job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopEntitiesDetectionV2JobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEntitiesDetectionV2JobRequest) => any;
    }
    export interface StopEntitiesDetectionV2JobResponse {
            /**
                * <p>The identifier of the medical entities detection job that was stopped.</p>
                */
            JobId?: string;
    }
    export namespace StopEntitiesDetectionV2JobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopEntitiesDetectionV2JobResponse) => any;
    }
    export interface StopICD10CMInferenceJobRequest {
            /**
                * <p>The identifier of the job.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopICD10CMInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopICD10CMInferenceJobRequest) => any;
    }
    export interface StopICD10CMInferenceJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of job, use this identifier with
                *       the <code>DescribeICD10CMInferenceJob</code> operation.</p>
                */
            JobId?: string;
    }
    export namespace StopICD10CMInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopICD10CMInferenceJobResponse) => any;
    }
    export interface StopPHIDetectionJobRequest {
            /**
                * <p>The identifier of the PHI detection job to stop.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopPHIDetectionJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopPHIDetectionJobRequest) => any;
    }
    export interface StopPHIDetectionJobResponse {
            /**
                * <p>The identifier of the PHI detection job that was stopped.</p>
                */
            JobId?: string;
    }
    export namespace StopPHIDetectionJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopPHIDetectionJobResponse) => any;
    }
    export interface StopRxNormInferenceJobRequest {
            /**
                * <p>The identifier of the job.</p>
                */
            JobId: string | undefined;
    }
    export namespace StopRxNormInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRxNormInferenceJobRequest) => any;
    }
    export interface StopRxNormInferenceJobResponse {
            /**
                * <p>The identifier generated for the job. To get the status of job, use this identifier with
                *       the <code>DescribeRxNormInferenceJob</code> operation.</p>
                */
            JobId?: string;
    }
    export namespace StopRxNormInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRxNormInferenceJobResponse) => any;
    }
    export interface StopSNOMEDCTInferenceJobRequest {
            /**
                * <p>
                *       The job id of the asynchronous InferSNOMEDCT job to be stopped.
                *     </p>
                */
            JobId: string | undefined;
    }
    export namespace StopSNOMEDCTInferenceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSNOMEDCTInferenceJobRequest) => any;
    }
    export interface StopSNOMEDCTInferenceJobResponse {
            /**
                * <p>
                *       The identifier generated for the job. To get the status of job, use this identifier with the DescribeSNOMEDCTInferenceJob operation.
                *     </p>
                */
            JobId?: string;
    }
    export namespace StopSNOMEDCTInferenceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSNOMEDCTInferenceJobResponse) => any;
    }
}

declare module '@aws-sdk/client-comprehendmedical/node_modules/@aws-sdk/client-comprehendmedical/dist-types/models/ComprehendMedicalServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ComprehendMedical service.
        */
    export class ComprehendMedicalServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

