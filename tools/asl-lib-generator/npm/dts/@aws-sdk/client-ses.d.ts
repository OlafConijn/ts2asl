// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-ses' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CloneReceiptRuleSetCommandInput, CloneReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CloneReceiptRuleSetCommand";
    import { CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetCommand";
    import { CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetEventDestinationCommand";
    import { CreateConfigurationSetTrackingOptionsCommandInput, CreateConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetTrackingOptionsCommand";
    import { CreateCustomVerificationEmailTemplateCommandInput, CreateCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateCustomVerificationEmailTemplateCommand";
    import { CreateReceiptFilterCommandInput, CreateReceiptFilterCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptFilterCommand";
    import { CreateReceiptRuleCommandInput, CreateReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptRuleCommand";
    import { CreateReceiptRuleSetCommandInput, CreateReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptRuleSetCommand";
    import { CreateTemplateCommandInput, CreateTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateTemplateCommand";
    import { DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetCommand";
    import { DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetEventDestinationCommand";
    import { DeleteConfigurationSetTrackingOptionsCommandInput, DeleteConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetTrackingOptionsCommand";
    import { DeleteCustomVerificationEmailTemplateCommandInput, DeleteCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteCustomVerificationEmailTemplateCommand";
    import { DeleteIdentityCommandInput, DeleteIdentityCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteIdentityCommand";
    import { DeleteIdentityPolicyCommandInput, DeleteIdentityPolicyCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteIdentityPolicyCommand";
    import { DeleteReceiptFilterCommandInput, DeleteReceiptFilterCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptFilterCommand";
    import { DeleteReceiptRuleCommandInput, DeleteReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptRuleCommand";
    import { DeleteReceiptRuleSetCommandInput, DeleteReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptRuleSetCommand";
    import { DeleteTemplateCommandInput, DeleteTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteTemplateCommand";
    import { DeleteVerifiedEmailAddressCommandInput, DeleteVerifiedEmailAddressCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteVerifiedEmailAddressCommand";
    import { DescribeActiveReceiptRuleSetCommandInput, DescribeActiveReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeActiveReceiptRuleSetCommand";
    import { DescribeConfigurationSetCommandInput, DescribeConfigurationSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeConfigurationSetCommand";
    import { DescribeReceiptRuleCommandInput, DescribeReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeReceiptRuleCommand";
    import { DescribeReceiptRuleSetCommandInput, DescribeReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeReceiptRuleSetCommand";
    import { GetAccountSendingEnabledCommandInput, GetAccountSendingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetAccountSendingEnabledCommand";
    import { GetCustomVerificationEmailTemplateCommandInput, GetCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetCustomVerificationEmailTemplateCommand";
    import { GetIdentityDkimAttributesCommandInput, GetIdentityDkimAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityDkimAttributesCommand";
    import { GetIdentityMailFromDomainAttributesCommandInput, GetIdentityMailFromDomainAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityMailFromDomainAttributesCommand";
    import { GetIdentityNotificationAttributesCommandInput, GetIdentityNotificationAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityNotificationAttributesCommand";
    import { GetIdentityPoliciesCommandInput, GetIdentityPoliciesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityPoliciesCommand";
    import { GetIdentityVerificationAttributesCommandInput, GetIdentityVerificationAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityVerificationAttributesCommand";
    import { GetSendQuotaCommandInput, GetSendQuotaCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetSendQuotaCommand";
    import { GetSendStatisticsCommandInput, GetSendStatisticsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetSendStatisticsCommand";
    import { GetTemplateCommandInput, GetTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetTemplateCommand";
    import { ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListConfigurationSetsCommand";
    import { ListCustomVerificationEmailTemplatesCommandInput, ListCustomVerificationEmailTemplatesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListCustomVerificationEmailTemplatesCommand";
    import { ListIdentitiesCommandInput, ListIdentitiesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListIdentitiesCommand";
    import { ListIdentityPoliciesCommandInput, ListIdentityPoliciesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListIdentityPoliciesCommand";
    import { ListReceiptFiltersCommandInput, ListReceiptFiltersCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListReceiptFiltersCommand";
    import { ListReceiptRuleSetsCommandInput, ListReceiptRuleSetsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListReceiptRuleSetsCommand";
    import { ListTemplatesCommandInput, ListTemplatesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListTemplatesCommand";
    import { ListVerifiedEmailAddressesCommandInput, ListVerifiedEmailAddressesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListVerifiedEmailAddressesCommand";
    import { PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/PutConfigurationSetDeliveryOptionsCommand";
    import { PutIdentityPolicyCommandInput, PutIdentityPolicyCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/PutIdentityPolicyCommand";
    import { ReorderReceiptRuleSetCommandInput, ReorderReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ReorderReceiptRuleSetCommand";
    import { SendBounceCommandInput, SendBounceCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendBounceCommand";
    import { SendBulkTemplatedEmailCommandInput, SendBulkTemplatedEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendBulkTemplatedEmailCommand";
    import { SendCustomVerificationEmailCommandInput, SendCustomVerificationEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendCustomVerificationEmailCommand";
    import { SendEmailCommandInput, SendEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendEmailCommand";
    import { SendRawEmailCommandInput, SendRawEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendRawEmailCommand";
    import { SendTemplatedEmailCommandInput, SendTemplatedEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendTemplatedEmailCommand";
    import { SetActiveReceiptRuleSetCommandInput, SetActiveReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetActiveReceiptRuleSetCommand";
    import { SetIdentityDkimEnabledCommandInput, SetIdentityDkimEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityDkimEnabledCommand";
    import { SetIdentityFeedbackForwardingEnabledCommandInput, SetIdentityFeedbackForwardingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityFeedbackForwardingEnabledCommand";
    import { SetIdentityHeadersInNotificationsEnabledCommandInput, SetIdentityHeadersInNotificationsEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityHeadersInNotificationsEnabledCommand";
    import { SetIdentityMailFromDomainCommandInput, SetIdentityMailFromDomainCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityMailFromDomainCommand";
    import { SetIdentityNotificationTopicCommandInput, SetIdentityNotificationTopicCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityNotificationTopicCommand";
    import { SetReceiptRulePositionCommandInput, SetReceiptRulePositionCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetReceiptRulePositionCommand";
    import { TestRenderTemplateCommandInput, TestRenderTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/TestRenderTemplateCommand";
    import { UpdateAccountSendingEnabledCommandInput, UpdateAccountSendingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateAccountSendingEnabledCommand";
    import { UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetEventDestinationCommand";
    import { UpdateConfigurationSetReputationMetricsEnabledCommandInput, UpdateConfigurationSetReputationMetricsEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetReputationMetricsEnabledCommand";
    import { UpdateConfigurationSetSendingEnabledCommandInput, UpdateConfigurationSetSendingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetSendingEnabledCommand";
    import { UpdateConfigurationSetTrackingOptionsCommandInput, UpdateConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetTrackingOptionsCommand";
    import { UpdateCustomVerificationEmailTemplateCommandInput, UpdateCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateCustomVerificationEmailTemplateCommand";
    import { UpdateReceiptRuleCommandInput, UpdateReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateReceiptRuleCommand";
    import { UpdateTemplateCommandInput, UpdateTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateTemplateCommand";
    import { VerifyDomainDkimCommandInput, VerifyDomainDkimCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyDomainDkimCommand";
    import { VerifyDomainIdentityCommandInput, VerifyDomainIdentityCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyDomainIdentityCommand";
    import { VerifyEmailAddressCommandInput, VerifyEmailAddressCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyEmailAddressCommand";
    import { VerifyEmailIdentityCommandInput, VerifyEmailIdentityCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyEmailIdentityCommand";
    import { SESClient } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    /**
        * <fullname>Amazon Simple Email Service</fullname>
        *         <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version
        *             2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer
        *                 Guide</a>. </p>
        *         <note>
        *             <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and
        *                     Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         </note>
        */
    export class SES extends SESClient {
            /**
                * <p>Creates a receipt rule set by cloning an existing one. All receipt rules and
                *             configurations are copied to the new receipt rule set and are completely independent of
                *             the source rule set.</p>
                *         <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            cloneReceiptRuleSet(args: CloneReceiptRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<CloneReceiptRuleSetCommandOutput>;
            cloneReceiptRuleSet(args: CloneReceiptRuleSetCommandInput, cb: (err: any, data?: CloneReceiptRuleSetCommandOutput) => void): void;
            cloneReceiptRuleSet(args: CloneReceiptRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CloneReceiptRuleSetCommandOutput) => void): void;
            /**
                * <p>Creates a configuration set.</p>
                *         <p>Configuration sets enable you to publish email sending events. For information about
                *             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            createConfigurationSet(args: CreateConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationSetCommandOutput>;
            createConfigurationSet(args: CreateConfigurationSetCommandInput, cb: (err: any, data?: CreateConfigurationSetCommandOutput) => void): void;
            createConfigurationSet(args: CreateConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationSetCommandOutput) => void): void;
            /**
                * <p>Creates a configuration set event destination.</p>
                *         <note>
                *             <p>When you create or update an event destination, you must provide one, and only
                *                 one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p>
                *         </note>
                *         <p>An event destination is the AWS service to which Amazon SES publishes the email sending
                *             events associated with a configuration set. For information about using configuration
                *             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationSetEventDestinationCommandOutput>;
            createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: CreateConfigurationSetEventDestinationCommandOutput) => void): void;
            createConfigurationSetEventDestination(args: CreateConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationSetEventDestinationCommandOutput) => void): void;
            /**
                * <p>Creates an association between a configuration set and a custom domain for open and
                *             click event tracking. </p>
                *         <p>By default, images and links used for tracking open and click events are hosted on
                *             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
                *             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
                */
            createConfigurationSetTrackingOptions(args: CreateConfigurationSetTrackingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationSetTrackingOptionsCommandOutput>;
            createConfigurationSetTrackingOptions(args: CreateConfigurationSetTrackingOptionsCommandInput, cb: (err: any, data?: CreateConfigurationSetTrackingOptionsCommandOutput) => void): void;
            createConfigurationSetTrackingOptions(args: CreateConfigurationSetTrackingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationSetTrackingOptionsCommandOutput) => void): void;
            /**
                * <p>Creates a new custom verification email template.</p>
                *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
                *                 Guide</i>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            createCustomVerificationEmailTemplate(args: CreateCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateCustomVerificationEmailTemplateCommandOutput>;
            createCustomVerificationEmailTemplate(args: CreateCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: CreateCustomVerificationEmailTemplateCommandOutput) => void): void;
            createCustomVerificationEmailTemplate(args: CreateCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCustomVerificationEmailTemplateCommandOutput) => void): void;
            /**
                * <p>Creates a new IP address filter.</p>
                *         <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            createReceiptFilter(args: CreateReceiptFilterCommandInput, options?: __HttpHandlerOptions): Promise<CreateReceiptFilterCommandOutput>;
            createReceiptFilter(args: CreateReceiptFilterCommandInput, cb: (err: any, data?: CreateReceiptFilterCommandOutput) => void): void;
            createReceiptFilter(args: CreateReceiptFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReceiptFilterCommandOutput) => void): void;
            /**
                * <p>Creates a receipt rule.</p>
                *         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            createReceiptRule(args: CreateReceiptRuleCommandInput, options?: __HttpHandlerOptions): Promise<CreateReceiptRuleCommandOutput>;
            createReceiptRule(args: CreateReceiptRuleCommandInput, cb: (err: any, data?: CreateReceiptRuleCommandOutput) => void): void;
            createReceiptRule(args: CreateReceiptRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReceiptRuleCommandOutput) => void): void;
            /**
                * <p>Creates an empty receipt rule set.</p>
                *         <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            createReceiptRuleSet(args: CreateReceiptRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateReceiptRuleSetCommandOutput>;
            createReceiptRuleSet(args: CreateReceiptRuleSetCommandInput, cb: (err: any, data?: CreateReceiptRuleSetCommandOutput) => void): void;
            createReceiptRuleSet(args: CreateReceiptRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReceiptRuleSetCommandOutput) => void): void;
            /**
                * <p>Creates an email template. Email templates enable you to send personalized email to
                *             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            createTemplate(args: CreateTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateTemplateCommandOutput>;
            createTemplate(args: CreateTemplateCommandInput, cb: (err: any, data?: CreateTemplateCommandOutput) => void): void;
            createTemplate(args: CreateTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes a configuration set. Configuration sets enable you to publish email sending
                *             events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationSetCommandOutput>;
            deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, cb: (err: any, data?: DeleteConfigurationSetCommandOutput) => void): void;
            deleteConfigurationSet(args: DeleteConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationSetCommandOutput) => void): void;
            /**
                * <p>Deletes a configuration set event destination. Configuration set event destinations
                *             are associated with configuration sets, which enable you to publish email sending
                *             events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationSetEventDestinationCommandOutput>;
            deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: DeleteConfigurationSetEventDestinationCommandOutput) => void): void;
            deleteConfigurationSetEventDestination(args: DeleteConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationSetEventDestinationCommandOutput) => void): void;
            /**
                * <p>Deletes an association between a configuration set and a custom domain for open and
                *             click event tracking.</p>
                *         <p>By default, images and links used for tracking open and click events are hosted on
                *             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
                *             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
                *         <note>
                *             <p>Deleting this kind of association will result in emails sent using the specified
                *                 configuration set to capture open and click events using the standard,
                *                 Amazon SES-operated domains.</p>
                *         </note>
                */
            deleteConfigurationSetTrackingOptions(args: DeleteConfigurationSetTrackingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationSetTrackingOptionsCommandOutput>;
            deleteConfigurationSetTrackingOptions(args: DeleteConfigurationSetTrackingOptionsCommandInput, cb: (err: any, data?: DeleteConfigurationSetTrackingOptionsCommandOutput) => void): void;
            deleteConfigurationSetTrackingOptions(args: DeleteConfigurationSetTrackingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationSetTrackingOptionsCommandOutput) => void): void;
            /**
                * <p>Deletes an existing custom verification email template. </p>
                *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
                *                 Guide</i>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteCustomVerificationEmailTemplate(args: DeleteCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCustomVerificationEmailTemplateCommandOutput>;
            deleteCustomVerificationEmailTemplate(args: DeleteCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: DeleteCustomVerificationEmailTemplateCommandOutput) => void): void;
            deleteCustomVerificationEmailTemplate(args: DeleteCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCustomVerificationEmailTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes the specified identity (an email address or a domain) from the list of
                *             verified identities.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteIdentity(args: DeleteIdentityCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIdentityCommandOutput>;
            deleteIdentity(args: DeleteIdentityCommandInput, cb: (err: any, data?: DeleteIdentityCommandOutput) => void): void;
            deleteIdentity(args: DeleteIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIdentityCommandOutput) => void): void;
            /**
                * <p>Deletes the specified sending authorization policy for the given identity (an email
                *             address or a domain). This API returns successfully even if a policy with the specified
                *             name does not exist.</p>
                *         <note>
                *             <p>This API is for the identity owner only. If you have not verified the identity,
                *                 this API will return an error.</p>
                *         </note>
                *         <p>Sending authorization is a feature that enables an identity owner to authorize other
                *             senders to use its identities. For information about using sending authorization, see
                *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteIdentityPolicy(args: DeleteIdentityPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIdentityPolicyCommandOutput>;
            deleteIdentityPolicy(args: DeleteIdentityPolicyCommandInput, cb: (err: any, data?: DeleteIdentityPolicyCommandOutput) => void): void;
            deleteIdentityPolicy(args: DeleteIdentityPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIdentityPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified IP address filter.</p>
                *         <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteReceiptFilter(args: DeleteReceiptFilterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReceiptFilterCommandOutput>;
            deleteReceiptFilter(args: DeleteReceiptFilterCommandInput, cb: (err: any, data?: DeleteReceiptFilterCommandOutput) => void): void;
            deleteReceiptFilter(args: DeleteReceiptFilterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReceiptFilterCommandOutput) => void): void;
            /**
                * <p>Deletes the specified receipt rule.</p>
                *         <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteReceiptRule(args: DeleteReceiptRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReceiptRuleCommandOutput>;
            deleteReceiptRule(args: DeleteReceiptRuleCommandInput, cb: (err: any, data?: DeleteReceiptRuleCommandOutput) => void): void;
            deleteReceiptRule(args: DeleteReceiptRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReceiptRuleCommandOutput) => void): void;
            /**
                * <p>Deletes the specified receipt rule set and all of the receipt rules it
                *             contains.</p>
                *         <note>
                *             <p>The currently active rule set cannot be deleted.</p>
                *         </note>
                *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteReceiptRuleSet(args: DeleteReceiptRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReceiptRuleSetCommandOutput>;
            deleteReceiptRuleSet(args: DeleteReceiptRuleSetCommandInput, cb: (err: any, data?: DeleteReceiptRuleSetCommandOutput) => void): void;
            deleteReceiptRuleSet(args: DeleteReceiptRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReceiptRuleSetCommandOutput) => void): void;
            /**
                * <p>Deletes an email template.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            deleteTemplate(args: DeleteTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTemplateCommandOutput>;
            deleteTemplate(args: DeleteTemplateCommandInput, cb: (err: any, data?: DeleteTemplateCommandOutput) => void): void;
            deleteTemplate(args: DeleteTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTemplateCommandOutput) => void): void;
            /**
                * <p>Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses
                *             and domains.</p>
                */
            deleteVerifiedEmailAddress(args: DeleteVerifiedEmailAddressCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVerifiedEmailAddressCommandOutput>;
            deleteVerifiedEmailAddress(args: DeleteVerifiedEmailAddressCommandInput, cb: (err: any, data?: DeleteVerifiedEmailAddressCommandOutput) => void): void;
            deleteVerifiedEmailAddress(args: DeleteVerifiedEmailAddressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVerifiedEmailAddressCommandOutput) => void): void;
            /**
                * <p>Returns the metadata and receipt rules for the receipt rule set that is currently
                *             active.</p>
                *         <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            describeActiveReceiptRuleSet(args: DescribeActiveReceiptRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeActiveReceiptRuleSetCommandOutput>;
            describeActiveReceiptRuleSet(args: DescribeActiveReceiptRuleSetCommandInput, cb: (err: any, data?: DescribeActiveReceiptRuleSetCommandOutput) => void): void;
            describeActiveReceiptRuleSet(args: DescribeActiveReceiptRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeActiveReceiptRuleSetCommandOutput) => void): void;
            /**
                * <p>Returns the details of the specified configuration set. For information about using
                *             configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            describeConfigurationSet(args: DescribeConfigurationSetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationSetCommandOutput>;
            describeConfigurationSet(args: DescribeConfigurationSetCommandInput, cb: (err: any, data?: DescribeConfigurationSetCommandOutput) => void): void;
            describeConfigurationSet(args: DescribeConfigurationSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationSetCommandOutput) => void): void;
            /**
                * <p>Returns the details of the specified receipt rule.</p>
                *         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            describeReceiptRule(args: DescribeReceiptRuleCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReceiptRuleCommandOutput>;
            describeReceiptRule(args: DescribeReceiptRuleCommandInput, cb: (err: any, data?: DescribeReceiptRuleCommandOutput) => void): void;
            describeReceiptRule(args: DescribeReceiptRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReceiptRuleCommandOutput) => void): void;
            /**
                * <p>Returns the details of the specified receipt rule set.</p>
                *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            describeReceiptRuleSet(args: DescribeReceiptRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReceiptRuleSetCommandOutput>;
            describeReceiptRuleSet(args: DescribeReceiptRuleSetCommandInput, cb: (err: any, data?: DescribeReceiptRuleSetCommandOutput) => void): void;
            describeReceiptRuleSet(args: DescribeReceiptRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReceiptRuleSetCommandOutput) => void): void;
            /**
                * <p>Returns the email sending status of the Amazon SES account for the current region.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            getAccountSendingEnabled(args: GetAccountSendingEnabledCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountSendingEnabledCommandOutput>;
            getAccountSendingEnabled(args: GetAccountSendingEnabledCommandInput, cb: (err: any, data?: GetAccountSendingEnabledCommandOutput) => void): void;
            getAccountSendingEnabled(args: GetAccountSendingEnabledCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountSendingEnabledCommandOutput) => void): void;
            /**
                * <p>Returns the custom email verification template for the template name you
                *             specify.</p>
                *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
                *                 Guide</i>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            getCustomVerificationEmailTemplate(args: GetCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetCustomVerificationEmailTemplateCommandOutput>;
            getCustomVerificationEmailTemplate(args: GetCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: GetCustomVerificationEmailTemplateCommandOutput) => void): void;
            getCustomVerificationEmailTemplate(args: GetCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCustomVerificationEmailTemplateCommandOutput) => void): void;
            /**
                * <p>Returns the current status of Easy DKIM signing for an entity. For domain name
                *             identities, this operation also returns the DKIM tokens that are required for Easy DKIM
                *             signing, and whether Amazon SES has successfully verified that these tokens have been
                *             published.</p>
                *         <p>This operation takes a list of identities as input and returns the following
                *             information for each:</p>
                *         <ul>
                *             <li>
                *                 <p>Whether Easy DKIM signing is enabled or disabled.</p>
                *             </li>
                *             <li>
                *                 <p>A set of DKIM tokens that represent the identity. If the identity is an email
                *                     address, the tokens represent the domain of that address.</p>
                *             </li>
                *             <li>
                *                 <p>Whether Amazon SES has successfully verified the DKIM tokens published in the
                *                     domain's DNS. This information is only returned for domain name identities, not
                *                     for email addresses.</p>
                *             </li>
                *          </ul>
                *         <p>This operation is throttled at one request per second and can only get DKIM attributes
                *             for up to 100 identities at a time.</p>
                *         <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
                */
            getIdentityDkimAttributes(args: GetIdentityDkimAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetIdentityDkimAttributesCommandOutput>;
            getIdentityDkimAttributes(args: GetIdentityDkimAttributesCommandInput, cb: (err: any, data?: GetIdentityDkimAttributesCommandOutput) => void): void;
            getIdentityDkimAttributes(args: GetIdentityDkimAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdentityDkimAttributesCommandOutput) => void): void;
            /**
                * <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses :
                *             domains).</p>
                *         <p>This operation is throttled at one request per second and can only get custom MAIL
                *             FROM attributes for up to 100 identities at a time.</p>
                */
            getIdentityMailFromDomainAttributes(args: GetIdentityMailFromDomainAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetIdentityMailFromDomainAttributesCommandOutput>;
            getIdentityMailFromDomainAttributes(args: GetIdentityMailFromDomainAttributesCommandInput, cb: (err: any, data?: GetIdentityMailFromDomainAttributesCommandOutput) => void): void;
            getIdentityMailFromDomainAttributes(args: GetIdentityMailFromDomainAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdentityMailFromDomainAttributesCommandOutput) => void): void;
            /**
                * <p>Given a list of verified identities (email addresses and/or domains), returns a
                *             structure describing identity notification attributes.</p>
                *         <p>This operation is throttled at one request per second and can only get notification
                *             attributes for up to 100 identities at a time.</p>
                *         <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
                *                 Developer Guide</a>.</p>
                */
            getIdentityNotificationAttributes(args: GetIdentityNotificationAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetIdentityNotificationAttributesCommandOutput>;
            getIdentityNotificationAttributes(args: GetIdentityNotificationAttributesCommandInput, cb: (err: any, data?: GetIdentityNotificationAttributesCommandOutput) => void): void;
            getIdentityNotificationAttributes(args: GetIdentityNotificationAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdentityNotificationAttributesCommandOutput) => void): void;
            /**
                * <p>Returns the requested sending authorization policies for the given identity (an email
                *             address or a domain). The policies are returned as a map of policy names to policy
                *             contents. You can retrieve a maximum of 20 policies at a time.</p>
                *         <note>
                *             <p>This API is for the identity owner only. If you have not verified the identity,
                *                 this API will return an error.</p>
                *         </note>
                *         <p>Sending authorization is a feature that enables an identity owner to authorize other
                *             senders to use its identities. For information about using sending authorization, see
                *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            getIdentityPolicies(args: GetIdentityPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<GetIdentityPoliciesCommandOutput>;
            getIdentityPolicies(args: GetIdentityPoliciesCommandInput, cb: (err: any, data?: GetIdentityPoliciesCommandOutput) => void): void;
            getIdentityPolicies(args: GetIdentityPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdentityPoliciesCommandOutput) => void): void;
            /**
                * <p>Given a list of identities (email addresses and/or domains), returns the verification
                *             status and (for domain identities) the verification token for each identity.</p>
                *         <p>The verification status of an email address is "Pending" until the email address owner
                *             clicks the link within the verification email that Amazon SES sent to that address. If the
                *             email address owner clicks the link within 24 hours, the verification status of the
                *             email address changes to "Success". If the link is not clicked within 24 hours, the
                *             verification status changes to "Failed." In that case, if you still want to verify the
                *             email address, you must restart the verification process from the beginning.</p>
                *         <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches
                *             for the required TXT record in the DNS settings of the domain. When Amazon SES detects the
                *             record, the domain's verification status changes to "Success". If Amazon SES is unable to
                *             detect the record within 72 hours, the domain's verification status changes to "Failed."
                *             In that case, if you still want to verify the domain, you must restart the verification
                *             process from the beginning.</p>
                *         <p>This operation is throttled at one request per second and can only get verification
                *             attributes for up to 100 identities at a time.</p>
                */
            getIdentityVerificationAttributes(args: GetIdentityVerificationAttributesCommandInput, options?: __HttpHandlerOptions): Promise<GetIdentityVerificationAttributesCommandOutput>;
            getIdentityVerificationAttributes(args: GetIdentityVerificationAttributesCommandInput, cb: (err: any, data?: GetIdentityVerificationAttributesCommandOutput) => void): void;
            getIdentityVerificationAttributes(args: GetIdentityVerificationAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIdentityVerificationAttributesCommandOutput) => void): void;
            /**
                * <p>Provides the sending limits for the Amazon SES account. </p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            getSendQuota(args: GetSendQuotaCommandInput, options?: __HttpHandlerOptions): Promise<GetSendQuotaCommandOutput>;
            getSendQuota(args: GetSendQuotaCommandInput, cb: (err: any, data?: GetSendQuotaCommandOutput) => void): void;
            getSendQuota(args: GetSendQuotaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSendQuotaCommandOutput) => void): void;
            /**
                * <p>Provides sending statistics for the current AWS Region. The result is a list of data
                *             points, representing the last two weeks of sending activity. Each data point in the list
                *             contains statistics for a 15-minute period of time.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            getSendStatistics(args: GetSendStatisticsCommandInput, options?: __HttpHandlerOptions): Promise<GetSendStatisticsCommandOutput>;
            getSendStatistics(args: GetSendStatisticsCommandInput, cb: (err: any, data?: GetSendStatisticsCommandOutput) => void): void;
            getSendStatistics(args: GetSendStatisticsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSendStatisticsCommandOutput) => void): void;
            /**
                * <p>Displays the template object (which includes the Subject line, HTML part and text
                *             part) for the template you specify.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            getTemplate(args: GetTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetTemplateCommandOutput>;
            getTemplate(args: GetTemplateCommandInput, cb: (err: any, data?: GetTemplateCommandOutput) => void): void;
            getTemplate(args: GetTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTemplateCommandOutput) => void): void;
            /**
                * <p>Provides a list of the configuration sets associated with your Amazon SES account in the
                *             current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer
                *                 Guide.</i>
                *          </p>
                *         <p>You can execute this operation no more than once per second. This operation will
                *             return up to 1,000 configuration sets each time it is run. If your Amazon SES account has
                *             more than 1,000 configuration sets, this operation will also return a NextToken element.
                *             You can then execute the <code>ListConfigurationSets</code> operation again, passing the
                *                 <code>NextToken</code> parameter and the value of the NextToken element to retrieve
                *             additional results.</p>
                */
            listConfigurationSets(args: ListConfigurationSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationSetsCommandOutput>;
            listConfigurationSets(args: ListConfigurationSetsCommandInput, cb: (err: any, data?: ListConfigurationSetsCommandOutput) => void): void;
            listConfigurationSets(args: ListConfigurationSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationSetsCommandOutput) => void): void;
            /**
                * <p>Lists the existing custom verification email templates for your account in the current
                *             AWS Region.</p>
                *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
                *                 Guide</i>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            listCustomVerificationEmailTemplates(args: ListCustomVerificationEmailTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListCustomVerificationEmailTemplatesCommandOutput>;
            listCustomVerificationEmailTemplates(args: ListCustomVerificationEmailTemplatesCommandInput, cb: (err: any, data?: ListCustomVerificationEmailTemplatesCommandOutput) => void): void;
            listCustomVerificationEmailTemplates(args: ListCustomVerificationEmailTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCustomVerificationEmailTemplatesCommandOutput) => void): void;
            /**
                * <p>Returns a list containing all of the identities (email addresses and domains) for your
                *             AWS account in the current AWS Region, regardless of verification status.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            listIdentities(args: ListIdentitiesCommandInput, options?: __HttpHandlerOptions): Promise<ListIdentitiesCommandOutput>;
            listIdentities(args: ListIdentitiesCommandInput, cb: (err: any, data?: ListIdentitiesCommandOutput) => void): void;
            listIdentities(args: ListIdentitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIdentitiesCommandOutput) => void): void;
            /**
                * <p>Returns a list of sending authorization policies that are attached to the given
                *             identity (an email address or a domain). This API returns only a list. If you want the
                *             actual policy content, you can use <code>GetIdentityPolicies</code>.</p>
                *         <note>
                *             <p>This API is for the identity owner only. If you have not verified the identity,
                *                 this API will return an error.</p>
                *         </note>
                *         <p>Sending authorization is a feature that enables an identity owner to authorize other
                *             senders to use its identities. For information about using sending authorization, see
                *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            listIdentityPolicies(args: ListIdentityPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListIdentityPoliciesCommandOutput>;
            listIdentityPolicies(args: ListIdentityPoliciesCommandInput, cb: (err: any, data?: ListIdentityPoliciesCommandOutput) => void): void;
            listIdentityPolicies(args: ListIdentityPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIdentityPoliciesCommandOutput) => void): void;
            /**
                * <p>Lists the IP address filters associated with your AWS account in the current AWS
                *             Region.</p>
                *         <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            listReceiptFilters(args: ListReceiptFiltersCommandInput, options?: __HttpHandlerOptions): Promise<ListReceiptFiltersCommandOutput>;
            listReceiptFilters(args: ListReceiptFiltersCommandInput, cb: (err: any, data?: ListReceiptFiltersCommandOutput) => void): void;
            listReceiptFilters(args: ListReceiptFiltersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListReceiptFiltersCommandOutput) => void): void;
            /**
                * <p>Lists the receipt rule sets that exist under your AWS account in the current AWS
                *             Region. If there are additional receipt rule sets to be retrieved, you will receive a
                *                 <code>NextToken</code> that you can provide to the next call to
                *                 <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p>
                *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            listReceiptRuleSets(args: ListReceiptRuleSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListReceiptRuleSetsCommandOutput>;
            listReceiptRuleSets(args: ListReceiptRuleSetsCommandInput, cb: (err: any, data?: ListReceiptRuleSetsCommandOutput) => void): void;
            listReceiptRuleSets(args: ListReceiptRuleSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListReceiptRuleSetsCommandOutput) => void): void;
            /**
                * <p>Lists the email templates present in your Amazon SES account in the current AWS
                *             Region.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            listTemplates(args: ListTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListTemplatesCommandOutput>;
            listTemplates(args: ListTemplatesCommandInput, cb: (err: any, data?: ListTemplatesCommandOutput) => void): void;
            listTemplates(args: ListTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTemplatesCommandOutput) => void): void;
            /**
                * <p>Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses
                *             and domains associated with your account.</p>
                */
            listVerifiedEmailAddresses(args: ListVerifiedEmailAddressesCommandInput, options?: __HttpHandlerOptions): Promise<ListVerifiedEmailAddressesCommandOutput>;
            listVerifiedEmailAddresses(args: ListVerifiedEmailAddressesCommandInput, cb: (err: any, data?: ListVerifiedEmailAddressesCommandOutput) => void): void;
            listVerifiedEmailAddresses(args: ListVerifiedEmailAddressesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVerifiedEmailAddressesCommandOutput) => void): void;
            /**
                * <p>Adds or updates the delivery options for a configuration set.</p>
                */
            putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, options?: __HttpHandlerOptions): Promise<PutConfigurationSetDeliveryOptionsCommandOutput>;
            putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, cb: (err: any, data?: PutConfigurationSetDeliveryOptionsCommandOutput) => void): void;
            putConfigurationSetDeliveryOptions(args: PutConfigurationSetDeliveryOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutConfigurationSetDeliveryOptionsCommandOutput) => void): void;
            /**
                * <p>Adds or updates a sending authorization policy for the specified identity (an email
                *             address or a domain).</p>
                *         <note>
                *             <p>This API is for the identity owner only. If you have not verified the identity,
                *                 this API will return an error.</p>
                *         </note>
                *         <p>Sending authorization is a feature that enables an identity owner to authorize other
                *             senders to use its identities. For information about using sending authorization, see
                *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            putIdentityPolicy(args: PutIdentityPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutIdentityPolicyCommandOutput>;
            putIdentityPolicy(args: PutIdentityPolicyCommandInput, cb: (err: any, data?: PutIdentityPolicyCommandOutput) => void): void;
            putIdentityPolicy(args: PutIdentityPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutIdentityPolicyCommandOutput) => void): void;
            /**
                * <p>Reorders the receipt rules within a receipt rule set.</p>
                *         <note>
                *             <p>All of the rules in the rule set must be represented in this request. That is,
                *                 this API will return an error if the reorder request doesn't explicitly position all
                *                 of the rules.</p>
                *         </note>
                *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            reorderReceiptRuleSet(args: ReorderReceiptRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<ReorderReceiptRuleSetCommandOutput>;
            reorderReceiptRuleSet(args: ReorderReceiptRuleSetCommandInput, cb: (err: any, data?: ReorderReceiptRuleSetCommandOutput) => void): void;
            reorderReceiptRuleSet(args: ReorderReceiptRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ReorderReceiptRuleSetCommandOutput) => void): void;
            /**
                * <p>Generates and sends a bounce message to the sender of an email you received through
                *             Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p>
                *         <note>
                *             <p>You cannot use this API to send generic bounces for mail that was not received by
                *                 Amazon SES.</p>
                *         </note>
                *         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            sendBounce(args: SendBounceCommandInput, options?: __HttpHandlerOptions): Promise<SendBounceCommandOutput>;
            sendBounce(args: SendBounceCommandInput, cb: (err: any, data?: SendBounceCommandOutput) => void): void;
            sendBounce(args: SendBounceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendBounceCommandOutput) => void): void;
            /**
                * <p>Composes an email message to multiple destinations. The message body is created using
                *             an email template.</p>
                *         <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your
                *             call to the API must meet the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>The call must refer to an existing email template. You can create email
                *                     templates using the <a>CreateTemplate</a> operation.</p>
                *             </li>
                *             <li>
                *                 <p>The message must be sent from a verified email address or domain.</p>
                *             </li>
                *             <li>
                *                 <p>If your account is still in the Amazon SES sandbox, you may only send to verified
                *                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
                *                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
                *                         Email Addresses and Domains</a> in the <i>Amazon SES Developer
                *                         Guide.</i>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>The maximum message size is 10 MB.</p>
                *             </li>
                *             <li>
                *                 <p>Each <code>Destination</code> parameter must include at least one recipient
                *                     email address. The recipient address can be a To: address, a CC: address, or a
                *                     BCC: address. If a recipient email address is invalid (that is, it is not in the
                *                     format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the
                *                     entire message will be rejected, even if the message contains other recipients
                *                     that are valid.</p>
                *             </li>
                *             <li>
                *                 <p>The message may not include more than 50 recipients, across the To:, CC: and
                *                     BCC: fields. If you need to send an email message to a larger audience, you can
                *                     divide your recipient list into groups of 50 or fewer, and then call the
                *                         <code>SendBulkTemplatedEmail</code> operation several times to send the
                *                     message to each group.</p>
                *             </li>
                *             <li>
                *                 <p>The number of destinations you can contact in a single call to the API may be
                *                     limited by your account's maximum sending rate.</p>
                *             </li>
                *          </ul>
                */
            sendBulkTemplatedEmail(args: SendBulkTemplatedEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendBulkTemplatedEmailCommandOutput>;
            sendBulkTemplatedEmail(args: SendBulkTemplatedEmailCommandInput, cb: (err: any, data?: SendBulkTemplatedEmailCommandOutput) => void): void;
            sendBulkTemplatedEmail(args: SendBulkTemplatedEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendBulkTemplatedEmailCommandOutput) => void): void;
            /**
                * <p>Adds an email address to the list of identities for your Amazon SES account in the current
                *             AWS Region and attempts to verify it. As a result of executing this operation, a
                *             customized verification email is sent to the specified address.</p>
                *         <p>To use this operation, you must first create a custom verification email template. For
                *             more information about creating and using custom verification email templates, see
                *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom
                *                 Verification Email Templates</a> in the <i>Amazon SES Developer
                *                 Guide</i>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            sendCustomVerificationEmail(args: SendCustomVerificationEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendCustomVerificationEmailCommandOutput>;
            sendCustomVerificationEmail(args: SendCustomVerificationEmailCommandInput, cb: (err: any, data?: SendCustomVerificationEmailCommandOutput) => void): void;
            sendCustomVerificationEmail(args: SendCustomVerificationEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendCustomVerificationEmailCommandOutput) => void): void;
            /**
                * <p>Composes an email message and immediately queues it for sending. In order to send
                *             email using the <code>SendEmail</code> operation, your message must meet the following
                *             requirements:</p>
                *
                *         <ul>
                *             <li>
                *                 <p>The message must be sent from a verified email address or domain. If you
                *                     attempt to send email using a non-verified address or domain, the operation will
                *                     result in an "Email address not verified" error. </p>
                *             </li>
                *             <li>
                *                 <p>If your account is still in the Amazon SES sandbox, you may only send to verified
                *                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
                *                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
                *                         Email Addresses and Domains</a> in the <i>Amazon SES Developer
                *                         Guide.</i>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>The maximum message size is 10 MB.</p>
                *             </li>
                *             <li>
                *                 <p>The message must include at least one recipient email address. The recipient
                *                     address can be a To: address, a CC: address, or a BCC: address. If a recipient
                *                     email address is invalid (that is, it is not in the format
                *                         <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire
                *                     message will be rejected, even if the message contains other recipients that are
                *                     valid.</p>
                *             </li>
                *             <li>
                *                 <p>The message may not include more than 50 recipients, across the To:, CC: and
                *                     BCC: fields. If you need to send an email message to a larger audience, you can
                *                     divide your recipient list into groups of 50 or fewer, and then call the
                *                         <code>SendEmail</code> operation several times to send the message to each
                *                     group.</p>
                *             </li>
                *          </ul>
                *         <important>
                *             <p>For every message that you send, the total number of recipients (including each
                *                 recipient in the To:, CC: and BCC: fields) is counted against the maximum number of
                *                 emails you can send in a 24-hour period (your <i>sending quota</i>).
                *                 For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES
                *                     Sending Limits</a> in the <i>Amazon SES Developer Guide.</i>
                *             </p>
                *         </important>
                */
            sendEmail(args: SendEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendEmailCommandOutput>;
            sendEmail(args: SendEmailCommandInput, cb: (err: any, data?: SendEmailCommandOutput) => void): void;
            sendEmail(args: SendEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendEmailCommandOutput) => void): void;
            /**
                * <p>Composes an email message and immediately queues it for sending.</p>
                *
                *         <p>This operation is more flexible than the <code>SendEmail</code> API operation. When
                *             you use the <code>SendRawEmail</code> operation, you can specify the headers of the
                *             message as well as its content. This flexibility is useful, for example, when you want
                *             to send a multipart MIME email (such a message that contains both a text and an HTML
                *             version). You can also use this operation to send messages that include
                *             attachments.</p>
                *         <p>The <code>SendRawEmail</code> operation has the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try
                *                     to send email from an address that isn't verified, the operation results in an
                *                     "Email address not verified" error.</p>
                *             </li>
                *             <li>
                *                 <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other
                *                     verified addresses in your account, or to addresses that are associated with the
                *                         <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p>
                *             </li>
                *             <li>
                *                 <p>The maximum message size, including attachments, is 10 MB.</p>
                *             </li>
                *             <li>
                *                 <p>Each message has to include at least one recipient address. A recipient
                *                     address includes any address on the To:, CC:, or BCC: lines.</p>
                *             </li>
                *             <li>
                *                 <p>If you send a single message to more than one recipient address, and one of
                *                     the recipient addresses isn't in a valid format (that is, it's not in the format
                *                         <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES
                *                     rejects the entire message, even if the other addresses are valid.</p>
                *             </li>
                *             <li>
                *                 <p>Each message can include up to 50 recipient addresses across the To:, CC:, or
                *                     BCC: lines. If you need to send a single message to more than 50 recipients, you
                *                     have to split the list of recipient addresses into groups of less than 50
                *                     recipients, and send separate messages to each group.</p>
                *             </li>
                *             <li>
                *                 <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message
                *                     parts. However, if Amazon SES has to modify the contents of your message (for
                *                     example, if you use open and click tracking), 8-bit content isn't preserved. For
                *                     this reason, we highly recommend that you encode all content that isn't 7-bit
                *                     ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer
                *                         Guide</i>.</p>
                *             </li>
                *          </ul>
                *
                *
                *
                *         <p>Additionally, keep the following considerations in mind when using the
                *                 <code>SendRawEmail</code> operation:</p>
                *
                *         <ul>
                *             <li>
                *                 <p>Although you can customize the message headers when using the
                *                         <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own
                *                         <code>Message-ID</code> and <code>Date</code> headers; if you passed these
                *                     headers when creating the message, they will be overwritten by the values that
                *                     Amazon SES provides.</p>
                *             </li>
                *             <li>
                *                 <p>If you are using sending authorization to send on behalf of another user,
                *                         <code>SendRawEmail</code> enables you to specify the cross-account identity
                *                     for the email's Source, From, and Return-Path parameters in one of two ways: you
                *                     can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>,
                *                     and/or <code>ReturnPathArn</code> to the API, or you can include the following
                *                     X-headers in the header of your raw email:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                             <code>X-SES-SOURCE-ARN</code>
                *                         </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                             <code>X-SES-FROM-ARN</code>
                *                         </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                             <code>X-SES-RETURN-PATH-ARN</code>
                *                         </p>
                *                     </li>
                *                </ul>
                *                 <important>
                *                     <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these
                *                         before it sends the email.</p>
                *                 </important>
                *                 <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets
                *                     the From and Return-Path addresses to the same identity that you
                *                     specified.</p>
                *                 <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending
                *                         Authorization with Amazon SES</a> in the <i>Amazon SES Developer
                *                         Guide.</i>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>For every message that you send, the total number of recipients (including
                *                     each recipient in the To:, CC: and BCC: fields) is counted against the maximum
                *                     number of emails you can send in a 24-hour period (your <i>sending
                *                         quota</i>). For more information about sending quotas in Amazon SES, see
                *                         <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your
                *                         Amazon SES Sending Limits</a> in the <i>Amazon SES Developer
                *                         Guide.</i>
                *                </p>
                *             </li>
                *          </ul>
                */
            sendRawEmail(args: SendRawEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendRawEmailCommandOutput>;
            sendRawEmail(args: SendRawEmailCommandInput, cb: (err: any, data?: SendRawEmailCommandOutput) => void): void;
            sendRawEmail(args: SendRawEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendRawEmailCommandOutput) => void): void;
            /**
                * <p>Composes an email message using an email template and immediately queues it for
                *             sending.</p>
                *         <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call
                *             to the API must meet the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>The call must refer to an existing email template. You can create email
                *                     templates using the <a>CreateTemplate</a> operation.</p>
                *             </li>
                *             <li>
                *                 <p>The message must be sent from a verified email address or domain.</p>
                *             </li>
                *             <li>
                *                 <p>If your account is still in the Amazon SES sandbox, you may only send to verified
                *                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
                *                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
                *                         Email Addresses and Domains</a> in the <i>Amazon SES Developer
                *                         Guide.</i>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>The maximum message size is 10 MB.</p>
                *             </li>
                *             <li>
                *                 <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one
                *                         <code>Destination</code> parameter. A destination is a set of recipients who
                *                     will receive the same version of the email. The <code>Destination</code>
                *                     parameter can include up to 50 recipients, across the To:, CC: and BCC:
                *                     fields.</p>
                *             </li>
                *             <li>
                *                 <p>The <code>Destination</code> parameter must include at least one recipient
                *                     email address. The recipient address can be a To: address, a CC: address, or a
                *                     BCC: address. If a recipient email address is invalid (that is, it is not in the
                *                     format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the
                *                     entire message will be rejected, even if the message contains other recipients
                *                     that are valid.</p>
                *             </li>
                *          </ul>
                *         <important>
                *             <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the
                *                 required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES
                *                 can't render the email because the template contains errors, it doesn't send the
                *                 email. Additionally, because it already accepted the message, Amazon SES doesn't return a
                *                 message stating that it was unable to send the email.</p>
                *             <p>For these reasons, we highly recommend that you set up Amazon SES to send you
                *                 notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending
                *                     Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service
                *                     Developer Guide</i>.</p>
                *         </important>
                */
            sendTemplatedEmail(args: SendTemplatedEmailCommandInput, options?: __HttpHandlerOptions): Promise<SendTemplatedEmailCommandOutput>;
            sendTemplatedEmail(args: SendTemplatedEmailCommandInput, cb: (err: any, data?: SendTemplatedEmailCommandOutput) => void): void;
            sendTemplatedEmail(args: SendTemplatedEmailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendTemplatedEmailCommandOutput) => void): void;
            /**
                * <p>Sets the specified receipt rule set as the active receipt rule set.</p>
                *         <note>
                *             <p>To disable your email-receiving through Amazon SES completely, you can call this API
                *                 with RuleSetName set to null.</p>
                *         </note>
                *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            setActiveReceiptRuleSet(args: SetActiveReceiptRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<SetActiveReceiptRuleSetCommandOutput>;
            setActiveReceiptRuleSet(args: SetActiveReceiptRuleSetCommandInput, cb: (err: any, data?: SetActiveReceiptRuleSetCommandOutput) => void): void;
            setActiveReceiptRuleSet(args: SetActiveReceiptRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetActiveReceiptRuleSetCommandOutput) => void): void;
            /**
                * <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM
                *             signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends
                *             from addresses on that domain. If Easy DKIM signing is enabled for an email address,
                *             then Amazon SES uses DKIM to sign all email it sends from that address.</p>
                *         <note>
                *             <p>For email addresses (for example, <code>user@example.com</code>), you can only
                *                 enable DKIM signing if the corresponding domain (in this case,
                *                     <code>example.com</code>) has been set up to use Easy DKIM.</p>
                *         </note>
                *         <p>You can enable DKIM signing for an identity at any time after you start the
                *             verification process for the identity, even if the verification process isn't complete. </p>
                *         <p>You can execute this operation no more than once per second.</p>
                *         <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
                */
            setIdentityDkimEnabled(args: SetIdentityDkimEnabledCommandInput, options?: __HttpHandlerOptions): Promise<SetIdentityDkimEnabledCommandOutput>;
            setIdentityDkimEnabled(args: SetIdentityDkimEnabledCommandInput, cb: (err: any, data?: SetIdentityDkimEnabledCommandOutput) => void): void;
            setIdentityDkimEnabled(args: SetIdentityDkimEnabledCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIdentityDkimEnabledCommandOutput) => void): void;
            /**
                * <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES
                *             forwards bounce and complaint notifications as email. Feedback forwarding can only be
                *             disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and
                *             complaints.</p>
                *         <note>
                *             <p>Feedback forwarding does not apply to delivery notifications. Delivery
                *                 notifications are only available through Amazon SNS.</p>
                *         </note>
                *         <p>You can execute this operation no more than once per second.</p>
                *         <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
                *                 Developer Guide</a>.</p>
                */
            setIdentityFeedbackForwardingEnabled(args: SetIdentityFeedbackForwardingEnabledCommandInput, options?: __HttpHandlerOptions): Promise<SetIdentityFeedbackForwardingEnabledCommandOutput>;
            setIdentityFeedbackForwardingEnabled(args: SetIdentityFeedbackForwardingEnabledCommandInput, cb: (err: any, data?: SetIdentityFeedbackForwardingEnabledCommandOutput) => void): void;
            setIdentityFeedbackForwardingEnabled(args: SetIdentityFeedbackForwardingEnabledCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIdentityFeedbackForwardingEnabledCommandOutput) => void): void;
            /**
                * <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the
                *             original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified
                *             type.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                *         <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
                *                 Developer Guide</a>.</p>
                */
            setIdentityHeadersInNotificationsEnabled(args: SetIdentityHeadersInNotificationsEnabledCommandInput, options?: __HttpHandlerOptions): Promise<SetIdentityHeadersInNotificationsEnabledCommandOutput>;
            setIdentityHeadersInNotificationsEnabled(args: SetIdentityHeadersInNotificationsEnabledCommandInput, cb: (err: any, data?: SetIdentityHeadersInNotificationsEnabledCommandOutput) => void): void;
            setIdentityHeadersInNotificationsEnabled(args: SetIdentityHeadersInNotificationsEnabledCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIdentityHeadersInNotificationsEnabledCommandOutput) => void): void;
            /**
                * <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an
                *             email address or a domain).</p>
                *         <important>
                *             <p>To send emails using the specified MAIL FROM domain, you must add an MX record to
                *                 your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy
                *                 Framework (SPF) checks, you must also add or update an SPF record. For more
                *                 information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         </important>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            setIdentityMailFromDomain(args: SetIdentityMailFromDomainCommandInput, options?: __HttpHandlerOptions): Promise<SetIdentityMailFromDomainCommandOutput>;
            setIdentityMailFromDomain(args: SetIdentityMailFromDomainCommandInput, cb: (err: any, data?: SetIdentityMailFromDomainCommandOutput) => void): void;
            setIdentityMailFromDomain(args: SetIdentityMailFromDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIdentityMailFromDomainCommandOutput) => void): void;
            /**
                * <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use
                *             this operation, you specify a verified identity, such as an email address or domain.
                *             When you send an email that uses the chosen identity in the Source field, Amazon SES sends
                *             notifications to the topic you specified. You can send bounce, complaint, or delivery
                *             notifications (or any combination of the three) to the Amazon SNS topic that you
                *             specify.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                *         <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer
                *             Guide</a>.</p>
                */
            setIdentityNotificationTopic(args: SetIdentityNotificationTopicCommandInput, options?: __HttpHandlerOptions): Promise<SetIdentityNotificationTopicCommandOutput>;
            setIdentityNotificationTopic(args: SetIdentityNotificationTopicCommandInput, cb: (err: any, data?: SetIdentityNotificationTopicCommandOutput) => void): void;
            setIdentityNotificationTopic(args: SetIdentityNotificationTopicCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIdentityNotificationTopicCommandOutput) => void): void;
            /**
                * <p>Sets the position of the specified receipt rule in the receipt rule set.</p>
                *         <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            setReceiptRulePosition(args: SetReceiptRulePositionCommandInput, options?: __HttpHandlerOptions): Promise<SetReceiptRulePositionCommandOutput>;
            setReceiptRulePosition(args: SetReceiptRulePositionCommandInput, cb: (err: any, data?: SetReceiptRulePositionCommandOutput) => void): void;
            setReceiptRulePosition(args: SetReceiptRulePositionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetReceiptRulePositionCommandOutput) => void): void;
            /**
                * <p>Creates a preview of the MIME content of an email when provided with a template and a
                *             set of replacement data.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            testRenderTemplate(args: TestRenderTemplateCommandInput, options?: __HttpHandlerOptions): Promise<TestRenderTemplateCommandOutput>;
            testRenderTemplate(args: TestRenderTemplateCommandInput, cb: (err: any, data?: TestRenderTemplateCommandOutput) => void): void;
            testRenderTemplate(args: TestRenderTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestRenderTemplateCommandOutput) => void): void;
            /**
                * <p>Enables or disables email sending across your entire Amazon SES account in the current
                *             AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to
                *             temporarily pause email sending across your Amazon SES account in a given AWS Region when
                *             reputation metrics (such as your bounce or complaint rates) reach certain
                *             thresholds.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            updateAccountSendingEnabled(args: UpdateAccountSendingEnabledCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccountSendingEnabledCommandOutput>;
            updateAccountSendingEnabled(args: UpdateAccountSendingEnabledCommandInput, cb: (err: any, data?: UpdateAccountSendingEnabledCommandOutput) => void): void;
            updateAccountSendingEnabled(args: UpdateAccountSendingEnabledCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccountSendingEnabledCommandOutput) => void): void;
            /**
                * <p>Updates the event destination of a configuration set. Event destinations are
                *             associated with configuration sets, which enable you to publish email sending events to
                *             Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets,
                *             see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES
                *                 Sending Activity</a> in the <i>Amazon SES Developer Guide.</i>
                *          </p>
                *         <note>
                *             <p>When you create or update an event destination, you must provide one, and only
                *                 one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service
                *                 (Amazon SNS).</p>
                *         </note>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationSetEventDestinationCommandOutput>;
            updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, cb: (err: any, data?: UpdateConfigurationSetEventDestinationCommandOutput) => void): void;
            updateConfigurationSetEventDestination(args: UpdateConfigurationSetEventDestinationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationSetEventDestinationCommandOutput) => void): void;
            /**
                * <p>Enables or disables the publishing of reputation metrics for emails sent using a
                *             specific configuration set in a given AWS Region. Reputation metrics include bounce
                *             and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can
                *             create alarms when bounce or complaint rates exceed certain thresholds.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            updateConfigurationSetReputationMetricsEnabled(args: UpdateConfigurationSetReputationMetricsEnabledCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationSetReputationMetricsEnabledCommandOutput>;
            updateConfigurationSetReputationMetricsEnabled(args: UpdateConfigurationSetReputationMetricsEnabledCommandInput, cb: (err: any, data?: UpdateConfigurationSetReputationMetricsEnabledCommandOutput) => void): void;
            updateConfigurationSetReputationMetricsEnabled(args: UpdateConfigurationSetReputationMetricsEnabledCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationSetReputationMetricsEnabledCommandOutput) => void): void;
            /**
                * <p>Enables or disables email sending for messages sent using a specific configuration set
                *             in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms
                *             to temporarily pause email sending for a configuration set when the reputation metrics
                *             for that configuration set (such as your bounce on complaint rate) exceed certain
                *             thresholds.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            updateConfigurationSetSendingEnabled(args: UpdateConfigurationSetSendingEnabledCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationSetSendingEnabledCommandOutput>;
            updateConfigurationSetSendingEnabled(args: UpdateConfigurationSetSendingEnabledCommandInput, cb: (err: any, data?: UpdateConfigurationSetSendingEnabledCommandOutput) => void): void;
            updateConfigurationSetSendingEnabled(args: UpdateConfigurationSetSendingEnabledCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationSetSendingEnabledCommandOutput) => void): void;
            /**
                * <p>Modifies an association between a configuration set and a custom domain for open and
                *             click event tracking. </p>
                *         <p>By default, images and links used for tracking open and click events are hosted on
                *             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
                *             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
                */
            updateConfigurationSetTrackingOptions(args: UpdateConfigurationSetTrackingOptionsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationSetTrackingOptionsCommandOutput>;
            updateConfigurationSetTrackingOptions(args: UpdateConfigurationSetTrackingOptionsCommandInput, cb: (err: any, data?: UpdateConfigurationSetTrackingOptionsCommandOutput) => void): void;
            updateConfigurationSetTrackingOptions(args: UpdateConfigurationSetTrackingOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationSetTrackingOptionsCommandOutput) => void): void;
            /**
                * <p>Updates an existing custom verification email template.</p>
                *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
                *                 Guide</i>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            updateCustomVerificationEmailTemplate(args: UpdateCustomVerificationEmailTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateCustomVerificationEmailTemplateCommandOutput>;
            updateCustomVerificationEmailTemplate(args: UpdateCustomVerificationEmailTemplateCommandInput, cb: (err: any, data?: UpdateCustomVerificationEmailTemplateCommandOutput) => void): void;
            updateCustomVerificationEmailTemplate(args: UpdateCustomVerificationEmailTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateCustomVerificationEmailTemplateCommandOutput) => void): void;
            /**
                * <p>Updates a receipt rule.</p>
                *         <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
                *                 Developer Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            updateReceiptRule(args: UpdateReceiptRuleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateReceiptRuleCommandOutput>;
            updateReceiptRule(args: UpdateReceiptRuleCommandInput, cb: (err: any, data?: UpdateReceiptRuleCommandOutput) => void): void;
            updateReceiptRule(args: UpdateReceiptRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateReceiptRuleCommandOutput) => void): void;
            /**
                * <p>Updates an email template. Email templates enable you to send personalized email to
                *             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            updateTemplate(args: UpdateTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTemplateCommandOutput>;
            updateTemplate(args: UpdateTemplateCommandInput, cb: (err: any, data?: UpdateTemplateCommandOutput) => void): void;
            updateTemplate(args: UpdateTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTemplateCommandOutput) => void): void;
            /**
                * <p>Returns a set of DKIM tokens for a domain identity.</p>
                *         <important>
                *             <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you
                *                 specify is added to the list of identities that are associated with your account.
                *                 This is true even if you haven't already associated the domain with your account by
                *                 using the <code>VerifyDomainIdentity</code> operation. However, you can't send email
                *                 from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you
                *                 successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for
                *                 it</a>.</p>
                *         </important>
                *         <p>You use the tokens that are generated by this operation to create CNAME records. When
                *             Amazon SES detects that you've added these records to the DNS configuration for a domain, you
                *             can start sending email from that domain. You can start sending email even if you
                *             haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS
                *             configuration for your domain. All email that you send from the domain is authenticated
                *             using DKIM.</p>
                *         <p>To create the CNAME records for DKIM authentication, use the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>Name</b>:
                *                         <i>token</i>._domainkey.<i>example.com</i>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Type</b>: CNAME</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Value</b>:
                *                     <i>token</i>.dkim.amazonses.com</p>
                *             </li>
                *          </ul>
                *         <p>In the preceding example, replace <i>token</i> with one of the tokens
                *             that are generated when you execute this operation. Replace
                *                 <i>example.com</i> with your domain. Repeat this process for each
                *             token that's generated by this operation.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            verifyDomainDkim(args: VerifyDomainDkimCommandInput, options?: __HttpHandlerOptions): Promise<VerifyDomainDkimCommandOutput>;
            verifyDomainDkim(args: VerifyDomainDkimCommandInput, cb: (err: any, data?: VerifyDomainDkimCommandOutput) => void): void;
            verifyDomainDkim(args: VerifyDomainDkimCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: VerifyDomainDkimCommandOutput) => void): void;
            /**
                * <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS
                *             Region and attempts to verify it. For more information about verifying domains, see
                *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email
                *                 Addresses and Domains</a> in the <i>Amazon SES Developer
                *             Guide.</i>
                *          </p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            verifyDomainIdentity(args: VerifyDomainIdentityCommandInput, options?: __HttpHandlerOptions): Promise<VerifyDomainIdentityCommandOutput>;
            verifyDomainIdentity(args: VerifyDomainIdentityCommandInput, cb: (err: any, data?: VerifyDomainIdentityCommandOutput) => void): void;
            verifyDomainIdentity(args: VerifyDomainIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: VerifyDomainIdentityCommandOutput) => void): void;
            /**
                * <p>Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email
                *             address.</p>
                */
            verifyEmailAddress(args: VerifyEmailAddressCommandInput, options?: __HttpHandlerOptions): Promise<VerifyEmailAddressCommandOutput>;
            verifyEmailAddress(args: VerifyEmailAddressCommandInput, cb: (err: any, data?: VerifyEmailAddressCommandOutput) => void): void;
            verifyEmailAddress(args: VerifyEmailAddressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: VerifyEmailAddressCommandOutput) => void): void;
            /**
                * <p>Adds an email address to the list of identities for your Amazon SES account in the current
                *             AWS region and attempts to verify it. As a result of executing this operation, a
                *             verification email is sent to the specified address.</p>
                *         <p>You can execute this operation no more than once per second.</p>
                */
            verifyEmailIdentity(args: VerifyEmailIdentityCommandInput, options?: __HttpHandlerOptions): Promise<VerifyEmailIdentityCommandOutput>;
            verifyEmailIdentity(args: VerifyEmailIdentityCommandInput, cb: (err: any, data?: VerifyEmailIdentityCommandOutput) => void): void;
            verifyEmailIdentity(args: VerifyEmailIdentityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: VerifyEmailIdentityCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CloneReceiptRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CloneReceiptRuleSetRequest, CloneReceiptRuleSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CloneReceiptRuleSetCommandInput extends CloneReceiptRuleSetRequest {
    }
    export interface CloneReceiptRuleSetCommandOutput extends CloneReceiptRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a receipt rule set by cloning an existing one. All receipt rules and
        *             configurations are copied to the new receipt rule set and are completely independent of
        *             the source rule set.</p>
        *         <p>For information about setting up rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CloneReceiptRuleSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CloneReceiptRuleSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CloneReceiptRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CloneReceiptRuleSetCommandInput} for command's `input` shape.
        * @see {@link CloneReceiptRuleSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CloneReceiptRuleSetCommand extends $Command<CloneReceiptRuleSetCommandInput, CloneReceiptRuleSetCommandOutput, SESClientResolvedConfig> {
            readonly input: CloneReceiptRuleSetCommandInput;
            constructor(input: CloneReceiptRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CloneReceiptRuleSetCommandInput, CloneReceiptRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConfigurationSetRequest, CreateConfigurationSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateConfigurationSetCommandInput extends CreateConfigurationSetRequest {
    }
    export interface CreateConfigurationSetCommandOutput extends CreateConfigurationSetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a configuration set.</p>
        *         <p>Configuration sets enable you to publish email sending events. For information about
        *             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateConfigurationSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateConfigurationSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateConfigurationSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationSetCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateConfigurationSetCommand extends $Command<CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateConfigurationSetCommandInput;
            constructor(input: CreateConfigurationSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetEventDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConfigurationSetEventDestinationRequest, CreateConfigurationSetEventDestinationResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateConfigurationSetEventDestinationCommandInput extends CreateConfigurationSetEventDestinationRequest {
    }
    export interface CreateConfigurationSetEventDestinationCommandOutput extends CreateConfigurationSetEventDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a configuration set event destination.</p>
        *         <note>
        *             <p>When you create or update an event destination, you must provide one, and only
        *                 one, destination. The destination can be CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS).</p>
        *         </note>
        *         <p>An event destination is the AWS service to which Amazon SES publishes the email sending
        *             events associated with a configuration set. For information about using configuration
        *             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateConfigurationSetEventDestinationCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateConfigurationSetEventDestinationCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateConfigurationSetEventDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationSetEventDestinationCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationSetEventDestinationCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateConfigurationSetEventDestinationCommand extends $Command<CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateConfigurationSetEventDestinationCommandInput;
            constructor(input: CreateConfigurationSetEventDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetTrackingOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConfigurationSetTrackingOptionsRequest, CreateConfigurationSetTrackingOptionsResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateConfigurationSetTrackingOptionsCommandInput extends CreateConfigurationSetTrackingOptionsRequest {
    }
    export interface CreateConfigurationSetTrackingOptionsCommandOutput extends CreateConfigurationSetTrackingOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an association between a configuration set and a custom domain for open and
        *             click event tracking. </p>
        *         <p>By default, images and links used for tracking open and click events are hosted on
        *             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
        *             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateConfigurationSetTrackingOptionsCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateConfigurationSetTrackingOptionsCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateConfigurationSetTrackingOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationSetTrackingOptionsCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationSetTrackingOptionsCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateConfigurationSetTrackingOptionsCommand extends $Command<CreateConfigurationSetTrackingOptionsCommandInput, CreateConfigurationSetTrackingOptionsCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateConfigurationSetTrackingOptionsCommandInput;
            constructor(input: CreateConfigurationSetTrackingOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationSetTrackingOptionsCommandInput, CreateConfigurationSetTrackingOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateCustomVerificationEmailTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCustomVerificationEmailTemplateRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateCustomVerificationEmailTemplateCommandInput extends CreateCustomVerificationEmailTemplateRequest {
    }
    export interface CreateCustomVerificationEmailTemplateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates a new custom verification email template.</p>
        *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
        *                 Guide</i>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateCustomVerificationEmailTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateCustomVerificationEmailTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateCustomVerificationEmailTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCustomVerificationEmailTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateCustomVerificationEmailTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateCustomVerificationEmailTemplateCommand extends $Command<CreateCustomVerificationEmailTemplateCommandInput, CreateCustomVerificationEmailTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateCustomVerificationEmailTemplateCommandInput;
            constructor(input: CreateCustomVerificationEmailTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCustomVerificationEmailTemplateCommandInput, CreateCustomVerificationEmailTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateReceiptFilterRequest, CreateReceiptFilterResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateReceiptFilterCommandInput extends CreateReceiptFilterRequest {
    }
    export interface CreateReceiptFilterCommandOutput extends CreateReceiptFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new IP address filter.</p>
        *         <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateReceiptFilterCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateReceiptFilterCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateReceiptFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReceiptFilterCommandInput} for command's `input` shape.
        * @see {@link CreateReceiptFilterCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateReceiptFilterCommand extends $Command<CreateReceiptFilterCommandInput, CreateReceiptFilterCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateReceiptFilterCommandInput;
            constructor(input: CreateReceiptFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReceiptFilterCommandInput, CreateReceiptFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateReceiptRuleRequest, CreateReceiptRuleResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateReceiptRuleCommandInput extends CreateReceiptRuleRequest {
    }
    export interface CreateReceiptRuleCommandOutput extends CreateReceiptRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a receipt rule.</p>
        *         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateReceiptRuleCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateReceiptRuleCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateReceiptRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReceiptRuleCommandInput} for command's `input` shape.
        * @see {@link CreateReceiptRuleCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateReceiptRuleCommand extends $Command<CreateReceiptRuleCommandInput, CreateReceiptRuleCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateReceiptRuleCommandInput;
            constructor(input: CreateReceiptRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReceiptRuleCommandInput, CreateReceiptRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateReceiptRuleSetRequest, CreateReceiptRuleSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateReceiptRuleSetCommandInput extends CreateReceiptRuleSetRequest {
    }
    export interface CreateReceiptRuleSetCommandOutput extends CreateReceiptRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an empty receipt rule set.</p>
        *         <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateReceiptRuleSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateReceiptRuleSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateReceiptRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReceiptRuleSetCommandInput} for command's `input` shape.
        * @see {@link CreateReceiptRuleSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateReceiptRuleSetCommand extends $Command<CreateReceiptRuleSetCommandInput, CreateReceiptRuleSetCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateReceiptRuleSetCommandInput;
            constructor(input: CreateReceiptRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReceiptRuleSetCommandInput, CreateReceiptRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTemplateRequest, CreateTemplateResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface CreateTemplateCommandInput extends CreateTemplateRequest {
    }
    export interface CreateTemplateCommandOutput extends CreateTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an email template. Email templates enable you to send personalized email to
        *             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, CreateTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, CreateTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new CreateTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class CreateTemplateCommand extends $Command<CreateTemplateCommandInput, CreateTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: CreateTemplateCommandInput;
            constructor(input: CreateTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTemplateCommandInput, CreateTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConfigurationSetRequest, DeleteConfigurationSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteConfigurationSetCommandInput extends DeleteConfigurationSetRequest {
    }
    export interface DeleteConfigurationSetCommandOutput extends DeleteConfigurationSetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a configuration set. Configuration sets enable you to publish email sending
        *             events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteConfigurationSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteConfigurationSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteConfigurationSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationSetCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteConfigurationSetCommand extends $Command<DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteConfigurationSetCommandInput;
            constructor(input: DeleteConfigurationSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetEventDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConfigurationSetEventDestinationRequest, DeleteConfigurationSetEventDestinationResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteConfigurationSetEventDestinationCommandInput extends DeleteConfigurationSetEventDestinationRequest {
    }
    export interface DeleteConfigurationSetEventDestinationCommandOutput extends DeleteConfigurationSetEventDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a configuration set event destination. Configuration set event destinations
        *             are associated with configuration sets, which enable you to publish email sending
        *             events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteConfigurationSetEventDestinationCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteConfigurationSetEventDestinationCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteConfigurationSetEventDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationSetEventDestinationCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationSetEventDestinationCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteConfigurationSetEventDestinationCommand extends $Command<DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteConfigurationSetEventDestinationCommandInput;
            constructor(input: DeleteConfigurationSetEventDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetTrackingOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConfigurationSetTrackingOptionsRequest, DeleteConfigurationSetTrackingOptionsResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteConfigurationSetTrackingOptionsCommandInput extends DeleteConfigurationSetTrackingOptionsRequest {
    }
    export interface DeleteConfigurationSetTrackingOptionsCommandOutput extends DeleteConfigurationSetTrackingOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an association between a configuration set and a custom domain for open and
        *             click event tracking.</p>
        *         <p>By default, images and links used for tracking open and click events are hosted on
        *             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
        *             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
        *         <note>
        *             <p>Deleting this kind of association will result in emails sent using the specified
        *                 configuration set to capture open and click events using the standard,
        *                 Amazon SES-operated domains.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteConfigurationSetTrackingOptionsCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteConfigurationSetTrackingOptionsCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteConfigurationSetTrackingOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationSetTrackingOptionsCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationSetTrackingOptionsCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteConfigurationSetTrackingOptionsCommand extends $Command<DeleteConfigurationSetTrackingOptionsCommandInput, DeleteConfigurationSetTrackingOptionsCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteConfigurationSetTrackingOptionsCommandInput;
            constructor(input: DeleteConfigurationSetTrackingOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationSetTrackingOptionsCommandInput, DeleteConfigurationSetTrackingOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteCustomVerificationEmailTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteCustomVerificationEmailTemplateRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteCustomVerificationEmailTemplateCommandInput extends DeleteCustomVerificationEmailTemplateRequest {
    }
    export interface DeleteCustomVerificationEmailTemplateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing custom verification email template. </p>
        *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
        *                 Guide</i>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteCustomVerificationEmailTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteCustomVerificationEmailTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteCustomVerificationEmailTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCustomVerificationEmailTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteCustomVerificationEmailTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteCustomVerificationEmailTemplateCommand extends $Command<DeleteCustomVerificationEmailTemplateCommandInput, DeleteCustomVerificationEmailTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteCustomVerificationEmailTemplateCommandInput;
            constructor(input: DeleteCustomVerificationEmailTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCustomVerificationEmailTemplateCommandInput, DeleteCustomVerificationEmailTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteIdentityRequest, DeleteIdentityResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteIdentityCommandInput extends DeleteIdentityRequest {
    }
    export interface DeleteIdentityCommandOutput extends DeleteIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified identity (an email address or a domain) from the list of
        *             verified identities.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteIdentityCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteIdentityCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIdentityCommandInput} for command's `input` shape.
        * @see {@link DeleteIdentityCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteIdentityCommand extends $Command<DeleteIdentityCommandInput, DeleteIdentityCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteIdentityCommandInput;
            constructor(input: DeleteIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIdentityCommandInput, DeleteIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteIdentityPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteIdentityPolicyRequest, DeleteIdentityPolicyResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteIdentityPolicyCommandInput extends DeleteIdentityPolicyRequest {
    }
    export interface DeleteIdentityPolicyCommandOutput extends DeleteIdentityPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified sending authorization policy for the given identity (an email
        *             address or a domain). This API returns successfully even if a policy with the specified
        *             name does not exist.</p>
        *         <note>
        *             <p>This API is for the identity owner only. If you have not verified the identity,
        *                 this API will return an error.</p>
        *         </note>
        *         <p>Sending authorization is a feature that enables an identity owner to authorize other
        *             senders to use its identities. For information about using sending authorization, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteIdentityPolicyCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteIdentityPolicyCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteIdentityPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIdentityPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteIdentityPolicyCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteIdentityPolicyCommand extends $Command<DeleteIdentityPolicyCommandInput, DeleteIdentityPolicyCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteIdentityPolicyCommandInput;
            constructor(input: DeleteIdentityPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIdentityPolicyCommandInput, DeleteIdentityPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptFilterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteReceiptFilterRequest, DeleteReceiptFilterResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteReceiptFilterCommandInput extends DeleteReceiptFilterRequest {
    }
    export interface DeleteReceiptFilterCommandOutput extends DeleteReceiptFilterResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified IP address filter.</p>
        *         <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteReceiptFilterCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteReceiptFilterCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteReceiptFilterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReceiptFilterCommandInput} for command's `input` shape.
        * @see {@link DeleteReceiptFilterCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteReceiptFilterCommand extends $Command<DeleteReceiptFilterCommandInput, DeleteReceiptFilterCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteReceiptFilterCommandInput;
            constructor(input: DeleteReceiptFilterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReceiptFilterCommandInput, DeleteReceiptFilterCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteReceiptRuleRequest, DeleteReceiptRuleResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteReceiptRuleCommandInput extends DeleteReceiptRuleRequest {
    }
    export interface DeleteReceiptRuleCommandOutput extends DeleteReceiptRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified receipt rule.</p>
        *         <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteReceiptRuleCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteReceiptRuleCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteReceiptRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReceiptRuleCommandInput} for command's `input` shape.
        * @see {@link DeleteReceiptRuleCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteReceiptRuleCommand extends $Command<DeleteReceiptRuleCommandInput, DeleteReceiptRuleCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteReceiptRuleCommandInput;
            constructor(input: DeleteReceiptRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReceiptRuleCommandInput, DeleteReceiptRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteReceiptRuleSetRequest, DeleteReceiptRuleSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteReceiptRuleSetCommandInput extends DeleteReceiptRuleSetRequest {
    }
    export interface DeleteReceiptRuleSetCommandOutput extends DeleteReceiptRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified receipt rule set and all of the receipt rules it
        *             contains.</p>
        *         <note>
        *             <p>The currently active rule set cannot be deleted.</p>
        *         </note>
        *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteReceiptRuleSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteReceiptRuleSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteReceiptRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReceiptRuleSetCommandInput} for command's `input` shape.
        * @see {@link DeleteReceiptRuleSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteReceiptRuleSetCommand extends $Command<DeleteReceiptRuleSetCommandInput, DeleteReceiptRuleSetCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteReceiptRuleSetCommandInput;
            constructor(input: DeleteReceiptRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReceiptRuleSetCommandInput, DeleteReceiptRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTemplateRequest, DeleteTemplateResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteTemplateCommandInput extends DeleteTemplateRequest {
    }
    export interface DeleteTemplateCommandOutput extends DeleteTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an email template.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteTemplateCommand extends $Command<DeleteTemplateCommandInput, DeleteTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteTemplateCommandInput;
            constructor(input: DeleteTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTemplateCommandInput, DeleteTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteVerifiedEmailAddressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteVerifiedEmailAddressRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DeleteVerifiedEmailAddressCommandInput extends DeleteVerifiedEmailAddressRequest {
    }
    export interface DeleteVerifiedEmailAddressCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deprecated. Use the <code>DeleteIdentity</code> operation to delete email addresses
        *             and domains.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DeleteVerifiedEmailAddressCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DeleteVerifiedEmailAddressCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DeleteVerifiedEmailAddressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVerifiedEmailAddressCommandInput} for command's `input` shape.
        * @see {@link DeleteVerifiedEmailAddressCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DeleteVerifiedEmailAddressCommand extends $Command<DeleteVerifiedEmailAddressCommandInput, DeleteVerifiedEmailAddressCommandOutput, SESClientResolvedConfig> {
            readonly input: DeleteVerifiedEmailAddressCommandInput;
            constructor(input: DeleteVerifiedEmailAddressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVerifiedEmailAddressCommandInput, DeleteVerifiedEmailAddressCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeActiveReceiptRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeActiveReceiptRuleSetRequest, DescribeActiveReceiptRuleSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DescribeActiveReceiptRuleSetCommandInput extends DescribeActiveReceiptRuleSetRequest {
    }
    export interface DescribeActiveReceiptRuleSetCommandOutput extends DescribeActiveReceiptRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the metadata and receipt rules for the receipt rule set that is currently
        *             active.</p>
        *         <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DescribeActiveReceiptRuleSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DescribeActiveReceiptRuleSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DescribeActiveReceiptRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeActiveReceiptRuleSetCommandInput} for command's `input` shape.
        * @see {@link DescribeActiveReceiptRuleSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DescribeActiveReceiptRuleSetCommand extends $Command<DescribeActiveReceiptRuleSetCommandInput, DescribeActiveReceiptRuleSetCommandOutput, SESClientResolvedConfig> {
            readonly input: DescribeActiveReceiptRuleSetCommandInput;
            constructor(input: DescribeActiveReceiptRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeActiveReceiptRuleSetCommandInput, DescribeActiveReceiptRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeConfigurationSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeConfigurationSetRequest, DescribeConfigurationSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DescribeConfigurationSetCommandInput extends DescribeConfigurationSetRequest {
    }
    export interface DescribeConfigurationSetCommandOutput extends DescribeConfigurationSetResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of the specified configuration set. For information about using
        *             configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DescribeConfigurationSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DescribeConfigurationSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DescribeConfigurationSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationSetCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DescribeConfigurationSetCommand extends $Command<DescribeConfigurationSetCommandInput, DescribeConfigurationSetCommandOutput, SESClientResolvedConfig> {
            readonly input: DescribeConfigurationSetCommandInput;
            constructor(input: DescribeConfigurationSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationSetCommandInput, DescribeConfigurationSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeReceiptRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeReceiptRuleRequest, DescribeReceiptRuleResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DescribeReceiptRuleCommandInput extends DescribeReceiptRuleRequest {
    }
    export interface DescribeReceiptRuleCommandOutput extends DescribeReceiptRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of the specified receipt rule.</p>
        *         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DescribeReceiptRuleCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DescribeReceiptRuleCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DescribeReceiptRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReceiptRuleCommandInput} for command's `input` shape.
        * @see {@link DescribeReceiptRuleCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DescribeReceiptRuleCommand extends $Command<DescribeReceiptRuleCommandInput, DescribeReceiptRuleCommandOutput, SESClientResolvedConfig> {
            readonly input: DescribeReceiptRuleCommandInput;
            constructor(input: DescribeReceiptRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReceiptRuleCommandInput, DescribeReceiptRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeReceiptRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeReceiptRuleSetRequest, DescribeReceiptRuleSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface DescribeReceiptRuleSetCommandInput extends DescribeReceiptRuleSetRequest {
    }
    export interface DescribeReceiptRuleSetCommandOutput extends DescribeReceiptRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details of the specified receipt rule set.</p>
        *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, DescribeReceiptRuleSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, DescribeReceiptRuleSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new DescribeReceiptRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReceiptRuleSetCommandInput} for command's `input` shape.
        * @see {@link DescribeReceiptRuleSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class DescribeReceiptRuleSetCommand extends $Command<DescribeReceiptRuleSetCommandInput, DescribeReceiptRuleSetCommandOutput, SESClientResolvedConfig> {
            readonly input: DescribeReceiptRuleSetCommandInput;
            constructor(input: DescribeReceiptRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReceiptRuleSetCommandInput, DescribeReceiptRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetAccountSendingEnabledCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAccountSendingEnabledResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetAccountSendingEnabledCommandInput {
    }
    export interface GetAccountSendingEnabledCommandOutput extends GetAccountSendingEnabledResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the email sending status of the Amazon SES account for the current region.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetAccountSendingEnabledCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetAccountSendingEnabledCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetAccountSendingEnabledCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountSendingEnabledCommandInput} for command's `input` shape.
        * @see {@link GetAccountSendingEnabledCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetAccountSendingEnabledCommand extends $Command<GetAccountSendingEnabledCommandInput, GetAccountSendingEnabledCommandOutput, SESClientResolvedConfig> {
            readonly input: GetAccountSendingEnabledCommandInput;
            constructor(input: GetAccountSendingEnabledCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountSendingEnabledCommandInput, GetAccountSendingEnabledCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetCustomVerificationEmailTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCustomVerificationEmailTemplateRequest, GetCustomVerificationEmailTemplateResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetCustomVerificationEmailTemplateCommandInput extends GetCustomVerificationEmailTemplateRequest {
    }
    export interface GetCustomVerificationEmailTemplateCommandOutput extends GetCustomVerificationEmailTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the custom email verification template for the template name you
        *             specify.</p>
        *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
        *                 Guide</i>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetCustomVerificationEmailTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetCustomVerificationEmailTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetCustomVerificationEmailTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCustomVerificationEmailTemplateCommandInput} for command's `input` shape.
        * @see {@link GetCustomVerificationEmailTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetCustomVerificationEmailTemplateCommand extends $Command<GetCustomVerificationEmailTemplateCommandInput, GetCustomVerificationEmailTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: GetCustomVerificationEmailTemplateCommandInput;
            constructor(input: GetCustomVerificationEmailTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCustomVerificationEmailTemplateCommandInput, GetCustomVerificationEmailTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityDkimAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetIdentityDkimAttributesRequest, GetIdentityDkimAttributesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetIdentityDkimAttributesCommandInput extends GetIdentityDkimAttributesRequest {
    }
    export interface GetIdentityDkimAttributesCommandOutput extends GetIdentityDkimAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the current status of Easy DKIM signing for an entity. For domain name
        *             identities, this operation also returns the DKIM tokens that are required for Easy DKIM
        *             signing, and whether Amazon SES has successfully verified that these tokens have been
        *             published.</p>
        *         <p>This operation takes a list of identities as input and returns the following
        *             information for each:</p>
        *         <ul>
        *             <li>
        *                 <p>Whether Easy DKIM signing is enabled or disabled.</p>
        *             </li>
        *             <li>
        *                 <p>A set of DKIM tokens that represent the identity. If the identity is an email
        *                     address, the tokens represent the domain of that address.</p>
        *             </li>
        *             <li>
        *                 <p>Whether Amazon SES has successfully verified the DKIM tokens published in the
        *                     domain's DNS. This information is only returned for domain name identities, not
        *                     for email addresses.</p>
        *             </li>
        *          </ul>
        *         <p>This operation is throttled at one request per second and can only get DKIM attributes
        *             for up to 100 identities at a time.</p>
        *         <p>For more information about creating DNS records using DKIM tokens, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html">Amazon SES Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetIdentityDkimAttributesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetIdentityDkimAttributesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetIdentityDkimAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdentityDkimAttributesCommandInput} for command's `input` shape.
        * @see {@link GetIdentityDkimAttributesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetIdentityDkimAttributesCommand extends $Command<GetIdentityDkimAttributesCommandInput, GetIdentityDkimAttributesCommandOutput, SESClientResolvedConfig> {
            readonly input: GetIdentityDkimAttributesCommandInput;
            constructor(input: GetIdentityDkimAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdentityDkimAttributesCommandInput, GetIdentityDkimAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityMailFromDomainAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetIdentityMailFromDomainAttributesRequest, GetIdentityMailFromDomainAttributesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetIdentityMailFromDomainAttributesCommandInput extends GetIdentityMailFromDomainAttributesRequest {
    }
    export interface GetIdentityMailFromDomainAttributesCommandOutput extends GetIdentityMailFromDomainAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the custom MAIL FROM attributes for a list of identities (email addresses :
        *             domains).</p>
        *         <p>This operation is throttled at one request per second and can only get custom MAIL
        *             FROM attributes for up to 100 identities at a time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetIdentityMailFromDomainAttributesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetIdentityMailFromDomainAttributesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetIdentityMailFromDomainAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdentityMailFromDomainAttributesCommandInput} for command's `input` shape.
        * @see {@link GetIdentityMailFromDomainAttributesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetIdentityMailFromDomainAttributesCommand extends $Command<GetIdentityMailFromDomainAttributesCommandInput, GetIdentityMailFromDomainAttributesCommandOutput, SESClientResolvedConfig> {
            readonly input: GetIdentityMailFromDomainAttributesCommandInput;
            constructor(input: GetIdentityMailFromDomainAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdentityMailFromDomainAttributesCommandInput, GetIdentityMailFromDomainAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityNotificationAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetIdentityNotificationAttributesRequest, GetIdentityNotificationAttributesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetIdentityNotificationAttributesCommandInput extends GetIdentityNotificationAttributesRequest {
    }
    export interface GetIdentityNotificationAttributesCommandOutput extends GetIdentityNotificationAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Given a list of verified identities (email addresses and/or domains), returns a
        *             structure describing identity notification attributes.</p>
        *         <p>This operation is throttled at one request per second and can only get notification
        *             attributes for up to 100 identities at a time.</p>
        *         <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
        *                 Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetIdentityNotificationAttributesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetIdentityNotificationAttributesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetIdentityNotificationAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdentityNotificationAttributesCommandInput} for command's `input` shape.
        * @see {@link GetIdentityNotificationAttributesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetIdentityNotificationAttributesCommand extends $Command<GetIdentityNotificationAttributesCommandInput, GetIdentityNotificationAttributesCommandOutput, SESClientResolvedConfig> {
            readonly input: GetIdentityNotificationAttributesCommandInput;
            constructor(input: GetIdentityNotificationAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdentityNotificationAttributesCommandInput, GetIdentityNotificationAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetIdentityPoliciesRequest, GetIdentityPoliciesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetIdentityPoliciesCommandInput extends GetIdentityPoliciesRequest {
    }
    export interface GetIdentityPoliciesCommandOutput extends GetIdentityPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the requested sending authorization policies for the given identity (an email
        *             address or a domain). The policies are returned as a map of policy names to policy
        *             contents. You can retrieve a maximum of 20 policies at a time.</p>
        *         <note>
        *             <p>This API is for the identity owner only. If you have not verified the identity,
        *                 this API will return an error.</p>
        *         </note>
        *         <p>Sending authorization is a feature that enables an identity owner to authorize other
        *             senders to use its identities. For information about using sending authorization, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetIdentityPoliciesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetIdentityPoliciesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetIdentityPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdentityPoliciesCommandInput} for command's `input` shape.
        * @see {@link GetIdentityPoliciesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetIdentityPoliciesCommand extends $Command<GetIdentityPoliciesCommandInput, GetIdentityPoliciesCommandOutput, SESClientResolvedConfig> {
            readonly input: GetIdentityPoliciesCommandInput;
            constructor(input: GetIdentityPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdentityPoliciesCommandInput, GetIdentityPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityVerificationAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetIdentityVerificationAttributesRequest, GetIdentityVerificationAttributesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetIdentityVerificationAttributesCommandInput extends GetIdentityVerificationAttributesRequest {
    }
    export interface GetIdentityVerificationAttributesCommandOutput extends GetIdentityVerificationAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Given a list of identities (email addresses and/or domains), returns the verification
        *             status and (for domain identities) the verification token for each identity.</p>
        *         <p>The verification status of an email address is "Pending" until the email address owner
        *             clicks the link within the verification email that Amazon SES sent to that address. If the
        *             email address owner clicks the link within 24 hours, the verification status of the
        *             email address changes to "Success". If the link is not clicked within 24 hours, the
        *             verification status changes to "Failed." In that case, if you still want to verify the
        *             email address, you must restart the verification process from the beginning.</p>
        *         <p>For domain identities, the domain's verification status is "Pending" as Amazon SES searches
        *             for the required TXT record in the DNS settings of the domain. When Amazon SES detects the
        *             record, the domain's verification status changes to "Success". If Amazon SES is unable to
        *             detect the record within 72 hours, the domain's verification status changes to "Failed."
        *             In that case, if you still want to verify the domain, you must restart the verification
        *             process from the beginning.</p>
        *         <p>This operation is throttled at one request per second and can only get verification
        *             attributes for up to 100 identities at a time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetIdentityVerificationAttributesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetIdentityVerificationAttributesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetIdentityVerificationAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIdentityVerificationAttributesCommandInput} for command's `input` shape.
        * @see {@link GetIdentityVerificationAttributesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetIdentityVerificationAttributesCommand extends $Command<GetIdentityVerificationAttributesCommandInput, GetIdentityVerificationAttributesCommandOutput, SESClientResolvedConfig> {
            readonly input: GetIdentityVerificationAttributesCommandInput;
            constructor(input: GetIdentityVerificationAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIdentityVerificationAttributesCommandInput, GetIdentityVerificationAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetSendQuotaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSendQuotaResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetSendQuotaCommandInput {
    }
    export interface GetSendQuotaCommandOutput extends GetSendQuotaResponse, __MetadataBearer {
    }
    /**
        * <p>Provides the sending limits for the Amazon SES account. </p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetSendQuotaCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetSendQuotaCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetSendQuotaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSendQuotaCommandInput} for command's `input` shape.
        * @see {@link GetSendQuotaCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetSendQuotaCommand extends $Command<GetSendQuotaCommandInput, GetSendQuotaCommandOutput, SESClientResolvedConfig> {
            readonly input: GetSendQuotaCommandInput;
            constructor(input: GetSendQuotaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSendQuotaCommandInput, GetSendQuotaCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetSendStatisticsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSendStatisticsResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetSendStatisticsCommandInput {
    }
    export interface GetSendStatisticsCommandOutput extends GetSendStatisticsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides sending statistics for the current AWS Region. The result is a list of data
        *             points, representing the last two weeks of sending activity. Each data point in the list
        *             contains statistics for a 15-minute period of time.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetSendStatisticsCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetSendStatisticsCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetSendStatisticsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSendStatisticsCommandInput} for command's `input` shape.
        * @see {@link GetSendStatisticsCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetSendStatisticsCommand extends $Command<GetSendStatisticsCommandInput, GetSendStatisticsCommandOutput, SESClientResolvedConfig> {
            readonly input: GetSendStatisticsCommandInput;
            constructor(input: GetSendStatisticsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSendStatisticsCommandInput, GetSendStatisticsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTemplateRequest, GetTemplateResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface GetTemplateCommandInput extends GetTemplateRequest {
    }
    export interface GetTemplateCommandOutput extends GetTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Displays the template object (which includes the Subject line, HTML part and text
        *             part) for the template you specify.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, GetTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, GetTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new GetTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTemplateCommandInput} for command's `input` shape.
        * @see {@link GetTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class GetTemplateCommand extends $Command<GetTemplateCommandInput, GetTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: GetTemplateCommandInput;
            constructor(input: GetTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTemplateCommandInput, GetTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListConfigurationSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListConfigurationSetsRequest, ListConfigurationSetsResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListConfigurationSetsCommandInput extends ListConfigurationSetsRequest {
    }
    export interface ListConfigurationSetsCommandOutput extends ListConfigurationSetsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of the configuration sets associated with your Amazon SES account in the
        *             current AWS Region. For information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES Sending Activity</a> in the <i>Amazon SES Developer
        *                 Guide.</i>
        *          </p>
        *         <p>You can execute this operation no more than once per second. This operation will
        *             return up to 1,000 configuration sets each time it is run. If your Amazon SES account has
        *             more than 1,000 configuration sets, this operation will also return a NextToken element.
        *             You can then execute the <code>ListConfigurationSets</code> operation again, passing the
        *                 <code>NextToken</code> parameter and the value of the NextToken element to retrieve
        *             additional results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListConfigurationSetsCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListConfigurationSetsCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListConfigurationSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigurationSetsCommandInput} for command's `input` shape.
        * @see {@link ListConfigurationSetsCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListConfigurationSetsCommand extends $Command<ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput, SESClientResolvedConfig> {
            readonly input: ListConfigurationSetsCommandInput;
            constructor(input: ListConfigurationSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListCustomVerificationEmailTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCustomVerificationEmailTemplatesRequest, ListCustomVerificationEmailTemplatesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListCustomVerificationEmailTemplatesCommandInput extends ListCustomVerificationEmailTemplatesRequest {
    }
    export interface ListCustomVerificationEmailTemplatesCommandOutput extends ListCustomVerificationEmailTemplatesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the existing custom verification email templates for your account in the current
        *             AWS Region.</p>
        *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
        *                 Guide</i>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListCustomVerificationEmailTemplatesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListCustomVerificationEmailTemplatesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListCustomVerificationEmailTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCustomVerificationEmailTemplatesCommandInput} for command's `input` shape.
        * @see {@link ListCustomVerificationEmailTemplatesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListCustomVerificationEmailTemplatesCommand extends $Command<ListCustomVerificationEmailTemplatesCommandInput, ListCustomVerificationEmailTemplatesCommandOutput, SESClientResolvedConfig> {
            readonly input: ListCustomVerificationEmailTemplatesCommandInput;
            constructor(input: ListCustomVerificationEmailTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCustomVerificationEmailTemplatesCommandInput, ListCustomVerificationEmailTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListIdentitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListIdentitiesRequest, ListIdentitiesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListIdentitiesCommandInput extends ListIdentitiesRequest {
    }
    export interface ListIdentitiesCommandOutput extends ListIdentitiesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list containing all of the identities (email addresses and domains) for your
        *             AWS account in the current AWS Region, regardless of verification status.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListIdentitiesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListIdentitiesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListIdentitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIdentitiesCommandInput} for command's `input` shape.
        * @see {@link ListIdentitiesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListIdentitiesCommand extends $Command<ListIdentitiesCommandInput, ListIdentitiesCommandOutput, SESClientResolvedConfig> {
            readonly input: ListIdentitiesCommandInput;
            constructor(input: ListIdentitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIdentitiesCommandInput, ListIdentitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListIdentityPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListIdentityPoliciesRequest, ListIdentityPoliciesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListIdentityPoliciesCommandInput extends ListIdentityPoliciesRequest {
    }
    export interface ListIdentityPoliciesCommandOutput extends ListIdentityPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of sending authorization policies that are attached to the given
        *             identity (an email address or a domain). This API returns only a list. If you want the
        *             actual policy content, you can use <code>GetIdentityPolicies</code>.</p>
        *         <note>
        *             <p>This API is for the identity owner only. If you have not verified the identity,
        *                 this API will return an error.</p>
        *         </note>
        *         <p>Sending authorization is a feature that enables an identity owner to authorize other
        *             senders to use its identities. For information about using sending authorization, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListIdentityPoliciesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListIdentityPoliciesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListIdentityPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIdentityPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListIdentityPoliciesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListIdentityPoliciesCommand extends $Command<ListIdentityPoliciesCommandInput, ListIdentityPoliciesCommandOutput, SESClientResolvedConfig> {
            readonly input: ListIdentityPoliciesCommandInput;
            constructor(input: ListIdentityPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIdentityPoliciesCommandInput, ListIdentityPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListReceiptFiltersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListReceiptFiltersRequest, ListReceiptFiltersResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListReceiptFiltersCommandInput extends ListReceiptFiltersRequest {
    }
    export interface ListReceiptFiltersCommandOutput extends ListReceiptFiltersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the IP address filters associated with your AWS account in the current AWS
        *             Region.</p>
        *         <p>For information about managing IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-ip-filters.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListReceiptFiltersCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListReceiptFiltersCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListReceiptFiltersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListReceiptFiltersCommandInput} for command's `input` shape.
        * @see {@link ListReceiptFiltersCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListReceiptFiltersCommand extends $Command<ListReceiptFiltersCommandInput, ListReceiptFiltersCommandOutput, SESClientResolvedConfig> {
            readonly input: ListReceiptFiltersCommandInput;
            constructor(input: ListReceiptFiltersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListReceiptFiltersCommandInput, ListReceiptFiltersCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListReceiptRuleSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListReceiptRuleSetsRequest, ListReceiptRuleSetsResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListReceiptRuleSetsCommandInput extends ListReceiptRuleSetsRequest {
    }
    export interface ListReceiptRuleSetsCommandOutput extends ListReceiptRuleSetsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the receipt rule sets that exist under your AWS account in the current AWS
        *             Region. If there are additional receipt rule sets to be retrieved, you will receive a
        *                 <code>NextToken</code> that you can provide to the next call to
        *                 <code>ListReceiptRuleSets</code> to retrieve the additional entries.</p>
        *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListReceiptRuleSetsCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListReceiptRuleSetsCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListReceiptRuleSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListReceiptRuleSetsCommandInput} for command's `input` shape.
        * @see {@link ListReceiptRuleSetsCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListReceiptRuleSetsCommand extends $Command<ListReceiptRuleSetsCommandInput, ListReceiptRuleSetsCommandOutput, SESClientResolvedConfig> {
            readonly input: ListReceiptRuleSetsCommandInput;
            constructor(input: ListReceiptRuleSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListReceiptRuleSetsCommandInput, ListReceiptRuleSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTemplatesRequest, ListTemplatesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListTemplatesCommandInput extends ListTemplatesRequest {
    }
    export interface ListTemplatesCommandOutput extends ListTemplatesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the email templates present in your Amazon SES account in the current AWS
        *             Region.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListTemplatesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListTemplatesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTemplatesCommandInput} for command's `input` shape.
        * @see {@link ListTemplatesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListTemplatesCommand extends $Command<ListTemplatesCommandInput, ListTemplatesCommandOutput, SESClientResolvedConfig> {
            readonly input: ListTemplatesCommandInput;
            constructor(input: ListTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTemplatesCommandInput, ListTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListVerifiedEmailAddressesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListVerifiedEmailAddressesResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ListVerifiedEmailAddressesCommandInput {
    }
    export interface ListVerifiedEmailAddressesCommandOutput extends ListVerifiedEmailAddressesResponse, __MetadataBearer {
    }
    /**
        * <p>Deprecated. Use the <code>ListIdentities</code> operation to list the email addresses
        *             and domains associated with your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ListVerifiedEmailAddressesCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ListVerifiedEmailAddressesCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ListVerifiedEmailAddressesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListVerifiedEmailAddressesCommandInput} for command's `input` shape.
        * @see {@link ListVerifiedEmailAddressesCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ListVerifiedEmailAddressesCommand extends $Command<ListVerifiedEmailAddressesCommandInput, ListVerifiedEmailAddressesCommandOutput, SESClientResolvedConfig> {
            readonly input: ListVerifiedEmailAddressesCommandInput;
            constructor(input: ListVerifiedEmailAddressesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListVerifiedEmailAddressesCommandInput, ListVerifiedEmailAddressesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/PutConfigurationSetDeliveryOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutConfigurationSetDeliveryOptionsRequest, PutConfigurationSetDeliveryOptionsResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface PutConfigurationSetDeliveryOptionsCommandInput extends PutConfigurationSetDeliveryOptionsRequest {
    }
    export interface PutConfigurationSetDeliveryOptionsCommandOutput extends PutConfigurationSetDeliveryOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Adds or updates the delivery options for a configuration set.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, PutConfigurationSetDeliveryOptionsCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, PutConfigurationSetDeliveryOptionsCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new PutConfigurationSetDeliveryOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutConfigurationSetDeliveryOptionsCommandInput} for command's `input` shape.
        * @see {@link PutConfigurationSetDeliveryOptionsCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class PutConfigurationSetDeliveryOptionsCommand extends $Command<PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput, SESClientResolvedConfig> {
            readonly input: PutConfigurationSetDeliveryOptionsCommandInput;
            constructor(input: PutConfigurationSetDeliveryOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/PutIdentityPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutIdentityPolicyRequest, PutIdentityPolicyResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface PutIdentityPolicyCommandInput extends PutIdentityPolicyRequest {
    }
    export interface PutIdentityPolicyCommandOutput extends PutIdentityPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Adds or updates a sending authorization policy for the specified identity (an email
        *             address or a domain).</p>
        *         <note>
        *             <p>This API is for the identity owner only. If you have not verified the identity,
        *                 this API will return an error.</p>
        *         </note>
        *         <p>Sending authorization is a feature that enables an identity owner to authorize other
        *             senders to use its identities. For information about using sending authorization, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, PutIdentityPolicyCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, PutIdentityPolicyCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new PutIdentityPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutIdentityPolicyCommandInput} for command's `input` shape.
        * @see {@link PutIdentityPolicyCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class PutIdentityPolicyCommand extends $Command<PutIdentityPolicyCommandInput, PutIdentityPolicyCommandOutput, SESClientResolvedConfig> {
            readonly input: PutIdentityPolicyCommandInput;
            constructor(input: PutIdentityPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutIdentityPolicyCommandInput, PutIdentityPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ReorderReceiptRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ReorderReceiptRuleSetRequest, ReorderReceiptRuleSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface ReorderReceiptRuleSetCommandInput extends ReorderReceiptRuleSetRequest {
    }
    export interface ReorderReceiptRuleSetCommandOutput extends ReorderReceiptRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Reorders the receipt rules within a receipt rule set.</p>
        *         <note>
        *             <p>All of the rules in the rule set must be represented in this request. That is,
        *                 this API will return an error if the reorder request doesn't explicitly position all
        *                 of the rules.</p>
        *         </note>
        *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, ReorderReceiptRuleSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, ReorderReceiptRuleSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new ReorderReceiptRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ReorderReceiptRuleSetCommandInput} for command's `input` shape.
        * @see {@link ReorderReceiptRuleSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class ReorderReceiptRuleSetCommand extends $Command<ReorderReceiptRuleSetCommandInput, ReorderReceiptRuleSetCommandOutput, SESClientResolvedConfig> {
            readonly input: ReorderReceiptRuleSetCommandInput;
            constructor(input: ReorderReceiptRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ReorderReceiptRuleSetCommandInput, ReorderReceiptRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendBounceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendBounceRequest, SendBounceResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SendBounceCommandInput extends SendBounceRequest {
    }
    export interface SendBounceCommandOutput extends SendBounceResponse, __MetadataBearer {
    }
    /**
        * <p>Generates and sends a bounce message to the sender of an email you received through
        *             Amazon SES. You can only use this API on an email up to 24 hours after you receive it.</p>
        *         <note>
        *             <p>You cannot use this API to send generic bounces for mail that was not received by
        *                 Amazon SES.</p>
        *         </note>
        *         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SendBounceCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SendBounceCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SendBounceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendBounceCommandInput} for command's `input` shape.
        * @see {@link SendBounceCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SendBounceCommand extends $Command<SendBounceCommandInput, SendBounceCommandOutput, SESClientResolvedConfig> {
            readonly input: SendBounceCommandInput;
            constructor(input: SendBounceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendBounceCommandInput, SendBounceCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendBulkTemplatedEmailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendBulkTemplatedEmailRequest, SendBulkTemplatedEmailResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SendBulkTemplatedEmailCommandInput extends SendBulkTemplatedEmailRequest {
    }
    export interface SendBulkTemplatedEmailCommandOutput extends SendBulkTemplatedEmailResponse, __MetadataBearer {
    }
    /**
        * <p>Composes an email message to multiple destinations. The message body is created using
        *             an email template.</p>
        *         <p>In order to send email using the <code>SendBulkTemplatedEmail</code> operation, your
        *             call to the API must meet the following requirements:</p>
        *         <ul>
        *             <li>
        *                 <p>The call must refer to an existing email template. You can create email
        *                     templates using the <a>CreateTemplate</a> operation.</p>
        *             </li>
        *             <li>
        *                 <p>The message must be sent from a verified email address or domain.</p>
        *             </li>
        *             <li>
        *                 <p>If your account is still in the Amazon SES sandbox, you may only send to verified
        *                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
        *                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
        *                         Email Addresses and Domains</a> in the <i>Amazon SES Developer
        *                         Guide.</i>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>The maximum message size is 10 MB.</p>
        *             </li>
        *             <li>
        *                 <p>Each <code>Destination</code> parameter must include at least one recipient
        *                     email address. The recipient address can be a To: address, a CC: address, or a
        *                     BCC: address. If a recipient email address is invalid (that is, it is not in the
        *                     format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the
        *                     entire message will be rejected, even if the message contains other recipients
        *                     that are valid.</p>
        *             </li>
        *             <li>
        *                 <p>The message may not include more than 50 recipients, across the To:, CC: and
        *                     BCC: fields. If you need to send an email message to a larger audience, you can
        *                     divide your recipient list into groups of 50 or fewer, and then call the
        *                         <code>SendBulkTemplatedEmail</code> operation several times to send the
        *                     message to each group.</p>
        *             </li>
        *             <li>
        *                 <p>The number of destinations you can contact in a single call to the API may be
        *                     limited by your account's maximum sending rate.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SendBulkTemplatedEmailCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SendBulkTemplatedEmailCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SendBulkTemplatedEmailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendBulkTemplatedEmailCommandInput} for command's `input` shape.
        * @see {@link SendBulkTemplatedEmailCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SendBulkTemplatedEmailCommand extends $Command<SendBulkTemplatedEmailCommandInput, SendBulkTemplatedEmailCommandOutput, SESClientResolvedConfig> {
            readonly input: SendBulkTemplatedEmailCommandInput;
            constructor(input: SendBulkTemplatedEmailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendBulkTemplatedEmailCommandInput, SendBulkTemplatedEmailCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendCustomVerificationEmailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendCustomVerificationEmailRequest, SendCustomVerificationEmailResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SendCustomVerificationEmailCommandInput extends SendCustomVerificationEmailRequest {
    }
    export interface SendCustomVerificationEmailCommandOutput extends SendCustomVerificationEmailResponse, __MetadataBearer {
    }
    /**
        * <p>Adds an email address to the list of identities for your Amazon SES account in the current
        *             AWS Region and attempts to verify it. As a result of executing this operation, a
        *             customized verification email is sent to the specified address.</p>
        *         <p>To use this operation, you must first create a custom verification email template. For
        *             more information about creating and using custom verification email templates, see
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom
        *                 Verification Email Templates</a> in the <i>Amazon SES Developer
        *                 Guide</i>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SendCustomVerificationEmailCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SendCustomVerificationEmailCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SendCustomVerificationEmailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendCustomVerificationEmailCommandInput} for command's `input` shape.
        * @see {@link SendCustomVerificationEmailCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SendCustomVerificationEmailCommand extends $Command<SendCustomVerificationEmailCommandInput, SendCustomVerificationEmailCommandOutput, SESClientResolvedConfig> {
            readonly input: SendCustomVerificationEmailCommandInput;
            constructor(input: SendCustomVerificationEmailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendCustomVerificationEmailCommandInput, SendCustomVerificationEmailCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendEmailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendEmailRequest, SendEmailResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SendEmailCommandInput extends SendEmailRequest {
    }
    export interface SendEmailCommandOutput extends SendEmailResponse, __MetadataBearer {
    }
    /**
        * <p>Composes an email message and immediately queues it for sending. In order to send
        *             email using the <code>SendEmail</code> operation, your message must meet the following
        *             requirements:</p>
        *
        *         <ul>
        *             <li>
        *                 <p>The message must be sent from a verified email address or domain. If you
        *                     attempt to send email using a non-verified address or domain, the operation will
        *                     result in an "Email address not verified" error. </p>
        *             </li>
        *             <li>
        *                 <p>If your account is still in the Amazon SES sandbox, you may only send to verified
        *                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
        *                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
        *                         Email Addresses and Domains</a> in the <i>Amazon SES Developer
        *                         Guide.</i>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>The maximum message size is 10 MB.</p>
        *             </li>
        *             <li>
        *                 <p>The message must include at least one recipient email address. The recipient
        *                     address can be a To: address, a CC: address, or a BCC: address. If a recipient
        *                     email address is invalid (that is, it is not in the format
        *                         <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the entire
        *                     message will be rejected, even if the message contains other recipients that are
        *                     valid.</p>
        *             </li>
        *             <li>
        *                 <p>The message may not include more than 50 recipients, across the To:, CC: and
        *                     BCC: fields. If you need to send an email message to a larger audience, you can
        *                     divide your recipient list into groups of 50 or fewer, and then call the
        *                         <code>SendEmail</code> operation several times to send the message to each
        *                     group.</p>
        *             </li>
        *          </ul>
        *         <important>
        *             <p>For every message that you send, the total number of recipients (including each
        *                 recipient in the To:, CC: and BCC: fields) is counted against the maximum number of
        *                 emails you can send in a 24-hour period (your <i>sending quota</i>).
        *                 For more information about sending quotas in Amazon SES, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your Amazon SES
        *                     Sending Limits</a> in the <i>Amazon SES Developer Guide.</i>
        *             </p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SendEmailCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SendEmailCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SendEmailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendEmailCommandInput} for command's `input` shape.
        * @see {@link SendEmailCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SendEmailCommand extends $Command<SendEmailCommandInput, SendEmailCommandOutput, SESClientResolvedConfig> {
            readonly input: SendEmailCommandInput;
            constructor(input: SendEmailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendEmailCommandInput, SendEmailCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendRawEmailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendRawEmailRequest, SendRawEmailResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SendRawEmailCommandInput extends SendRawEmailRequest {
    }
    export interface SendRawEmailCommandOutput extends SendRawEmailResponse, __MetadataBearer {
    }
    /**
        * <p>Composes an email message and immediately queues it for sending.</p>
        *
        *         <p>This operation is more flexible than the <code>SendEmail</code> API operation. When
        *             you use the <code>SendRawEmail</code> operation, you can specify the headers of the
        *             message as well as its content. This flexibility is useful, for example, when you want
        *             to send a multipart MIME email (such a message that contains both a text and an HTML
        *             version). You can also use this operation to send messages that include
        *             attachments.</p>
        *         <p>The <code>SendRawEmail</code> operation has the following requirements:</p>
        *         <ul>
        *             <li>
        *                 <p>You can only send email from <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">verified email addresses or domains</a>. If you try
        *                     to send email from an address that isn't verified, the operation results in an
        *                     "Email address not verified" error.</p>
        *             </li>
        *             <li>
        *                 <p>If your account is still in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Amazon SES sandbox</a>, you can only send email to other
        *                     verified addresses in your account, or to addresses that are associated with the
        *                         <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mailbox-simulator.html">Amazon SES mailbox simulator</a>.</p>
        *             </li>
        *             <li>
        *                 <p>The maximum message size, including attachments, is 10 MB.</p>
        *             </li>
        *             <li>
        *                 <p>Each message has to include at least one recipient address. A recipient
        *                     address includes any address on the To:, CC:, or BCC: lines.</p>
        *             </li>
        *             <li>
        *                 <p>If you send a single message to more than one recipient address, and one of
        *                     the recipient addresses isn't in a valid format (that is, it's not in the format
        *                         <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), Amazon SES
        *                     rejects the entire message, even if the other addresses are valid.</p>
        *             </li>
        *             <li>
        *                 <p>Each message can include up to 50 recipient addresses across the To:, CC:, or
        *                     BCC: lines. If you need to send a single message to more than 50 recipients, you
        *                     have to split the list of recipient addresses into groups of less than 50
        *                     recipients, and send separate messages to each group.</p>
        *             </li>
        *             <li>
        *                 <p>Amazon SES allows you to specify 8-bit Content-Transfer-Encoding for MIME message
        *                     parts. However, if Amazon SES has to modify the contents of your message (for
        *                     example, if you use open and click tracking), 8-bit content isn't preserved. For
        *                     this reason, we highly recommend that you encode all content that isn't 7-bit
        *                     ASCII. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html#send-email-mime-encoding">MIME Encoding</a> in the <i>Amazon SES Developer
        *                         Guide</i>.</p>
        *             </li>
        *          </ul>
        *
        *
        *
        *         <p>Additionally, keep the following considerations in mind when using the
        *                 <code>SendRawEmail</code> operation:</p>
        *
        *         <ul>
        *             <li>
        *                 <p>Although you can customize the message headers when using the
        *                         <code>SendRawEmail</code> operation, Amazon SES will automatically apply its own
        *                         <code>Message-ID</code> and <code>Date</code> headers; if you passed these
        *                     headers when creating the message, they will be overwritten by the values that
        *                     Amazon SES provides.</p>
        *             </li>
        *             <li>
        *                 <p>If you are using sending authorization to send on behalf of another user,
        *                         <code>SendRawEmail</code> enables you to specify the cross-account identity
        *                     for the email's Source, From, and Return-Path parameters in one of two ways: you
        *                     can pass optional parameters <code>SourceArn</code>, <code>FromArn</code>,
        *                     and/or <code>ReturnPathArn</code> to the API, or you can include the following
        *                     X-headers in the header of your raw email:</p>
        *                 <ul>
        *                   <li>
        *                         <p>
        *                             <code>X-SES-SOURCE-ARN</code>
        *                         </p>
        *                     </li>
        *                   <li>
        *                         <p>
        *                             <code>X-SES-FROM-ARN</code>
        *                         </p>
        *                     </li>
        *                   <li>
        *                         <p>
        *                             <code>X-SES-RETURN-PATH-ARN</code>
        *                         </p>
        *                     </li>
        *                </ul>
        *                 <important>
        *                     <p>Don't include these X-headers in the DKIM signature. Amazon SES removes these
        *                         before it sends the email.</p>
        *                 </important>
        *                 <p>If you only specify the <code>SourceIdentityArn</code> parameter, Amazon SES sets
        *                     the From and Return-Path addresses to the same identity that you
        *                     specified.</p>
        *                 <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Using Sending
        *                         Authorization with Amazon SES</a> in the <i>Amazon SES Developer
        *                         Guide.</i>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>For every message that you send, the total number of recipients (including
        *                     each recipient in the To:, CC: and BCC: fields) is counted against the maximum
        *                     number of emails you can send in a 24-hour period (your <i>sending
        *                         quota</i>). For more information about sending quotas in Amazon SES, see
        *                         <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/manage-sending-limits.html">Managing Your
        *                         Amazon SES Sending Limits</a> in the <i>Amazon SES Developer
        *                         Guide.</i>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SendRawEmailCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SendRawEmailCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SendRawEmailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendRawEmailCommandInput} for command's `input` shape.
        * @see {@link SendRawEmailCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SendRawEmailCommand extends $Command<SendRawEmailCommandInput, SendRawEmailCommandOutput, SESClientResolvedConfig> {
            readonly input: SendRawEmailCommandInput;
            constructor(input: SendRawEmailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendRawEmailCommandInput, SendRawEmailCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendTemplatedEmailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendTemplatedEmailRequest, SendTemplatedEmailResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SendTemplatedEmailCommandInput extends SendTemplatedEmailRequest {
    }
    export interface SendTemplatedEmailCommandOutput extends SendTemplatedEmailResponse, __MetadataBearer {
    }
    /**
        * <p>Composes an email message using an email template and immediately queues it for
        *             sending.</p>
        *         <p>In order to send email using the <code>SendTemplatedEmail</code> operation, your call
        *             to the API must meet the following requirements:</p>
        *         <ul>
        *             <li>
        *                 <p>The call must refer to an existing email template. You can create email
        *                     templates using the <a>CreateTemplate</a> operation.</p>
        *             </li>
        *             <li>
        *                 <p>The message must be sent from a verified email address or domain.</p>
        *             </li>
        *             <li>
        *                 <p>If your account is still in the Amazon SES sandbox, you may only send to verified
        *                     addresses or domains, or to email addresses associated with the Amazon SES Mailbox
        *                     Simulator. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying
        *                         Email Addresses and Domains</a> in the <i>Amazon SES Developer
        *                         Guide.</i>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>The maximum message size is 10 MB.</p>
        *             </li>
        *             <li>
        *                 <p>Calls to the <code>SendTemplatedEmail</code> operation may only include one
        *                         <code>Destination</code> parameter. A destination is a set of recipients who
        *                     will receive the same version of the email. The <code>Destination</code>
        *                     parameter can include up to 50 recipients, across the To:, CC: and BCC:
        *                     fields.</p>
        *             </li>
        *             <li>
        *                 <p>The <code>Destination</code> parameter must include at least one recipient
        *                     email address. The recipient address can be a To: address, a CC: address, or a
        *                     BCC: address. If a recipient email address is invalid (that is, it is not in the
        *                     format <i>UserName@[SubDomain.]Domain.TopLevelDomain</i>), the
        *                     entire message will be rejected, even if the message contains other recipients
        *                     that are valid.</p>
        *             </li>
        *          </ul>
        *         <important>
        *             <p>If your call to the <code>SendTemplatedEmail</code> operation includes all of the
        *                 required parameters, Amazon SES accepts it and returns a Message ID. However, if Amazon SES
        *                 can't render the email because the template contains errors, it doesn't send the
        *                 email. Additionally, because it already accepted the message, Amazon SES doesn't return a
        *                 message stating that it was unable to send the email.</p>
        *             <p>For these reasons, we highly recommend that you set up Amazon SES to send you
        *                 notifications when Rendering Failure events occur. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Sending
        *                     Personalized Email Using the Amazon SES API</a> in the <i>Amazon Simple Email Service
        *                     Developer Guide</i>.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SendTemplatedEmailCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SendTemplatedEmailCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SendTemplatedEmailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendTemplatedEmailCommandInput} for command's `input` shape.
        * @see {@link SendTemplatedEmailCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SendTemplatedEmailCommand extends $Command<SendTemplatedEmailCommandInput, SendTemplatedEmailCommandOutput, SESClientResolvedConfig> {
            readonly input: SendTemplatedEmailCommandInput;
            constructor(input: SendTemplatedEmailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendTemplatedEmailCommandInput, SendTemplatedEmailCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetActiveReceiptRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetActiveReceiptRuleSetRequest, SetActiveReceiptRuleSetResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SetActiveReceiptRuleSetCommandInput extends SetActiveReceiptRuleSetRequest {
    }
    export interface SetActiveReceiptRuleSetCommandOutput extends SetActiveReceiptRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the specified receipt rule set as the active receipt rule set.</p>
        *         <note>
        *             <p>To disable your email-receiving through Amazon SES completely, you can call this API
        *                 with RuleSetName set to null.</p>
        *         </note>
        *         <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SetActiveReceiptRuleSetCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SetActiveReceiptRuleSetCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SetActiveReceiptRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetActiveReceiptRuleSetCommandInput} for command's `input` shape.
        * @see {@link SetActiveReceiptRuleSetCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SetActiveReceiptRuleSetCommand extends $Command<SetActiveReceiptRuleSetCommandInput, SetActiveReceiptRuleSetCommandOutput, SESClientResolvedConfig> {
            readonly input: SetActiveReceiptRuleSetCommandInput;
            constructor(input: SetActiveReceiptRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetActiveReceiptRuleSetCommandInput, SetActiveReceiptRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityDkimEnabledCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetIdentityDkimEnabledRequest, SetIdentityDkimEnabledResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SetIdentityDkimEnabledCommandInput extends SetIdentityDkimEnabledRequest {
    }
    export interface SetIdentityDkimEnabledCommandOutput extends SetIdentityDkimEnabledResponse, __MetadataBearer {
    }
    /**
        * <p>Enables or disables Easy DKIM signing of email sent from an identity. If Easy DKIM
        *             signing is enabled for a domain, then Amazon SES uses DKIM to sign all email that it sends
        *             from addresses on that domain. If Easy DKIM signing is enabled for an email address,
        *             then Amazon SES uses DKIM to sign all email it sends from that address.</p>
        *         <note>
        *             <p>For email addresses (for example, <code>user@example.com</code>), you can only
        *                 enable DKIM signing if the corresponding domain (in this case,
        *                     <code>example.com</code>) has been set up to use Easy DKIM.</p>
        *         </note>
        *         <p>You can enable DKIM signing for an identity at any time after you start the
        *             verification process for the identity, even if the verification process isn't complete. </p>
        *         <p>You can execute this operation no more than once per second.</p>
        *         <p>For more information about Easy DKIM signing, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SetIdentityDkimEnabledCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SetIdentityDkimEnabledCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SetIdentityDkimEnabledCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIdentityDkimEnabledCommandInput} for command's `input` shape.
        * @see {@link SetIdentityDkimEnabledCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SetIdentityDkimEnabledCommand extends $Command<SetIdentityDkimEnabledCommandInput, SetIdentityDkimEnabledCommandOutput, SESClientResolvedConfig> {
            readonly input: SetIdentityDkimEnabledCommandInput;
            constructor(input: SetIdentityDkimEnabledCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIdentityDkimEnabledCommandInput, SetIdentityDkimEnabledCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityFeedbackForwardingEnabledCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetIdentityFeedbackForwardingEnabledRequest, SetIdentityFeedbackForwardingEnabledResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SetIdentityFeedbackForwardingEnabledCommandInput extends SetIdentityFeedbackForwardingEnabledRequest {
    }
    export interface SetIdentityFeedbackForwardingEnabledCommandOutput extends SetIdentityFeedbackForwardingEnabledResponse, __MetadataBearer {
    }
    /**
        * <p>Given an identity (an email address or a domain), enables or disables whether Amazon SES
        *             forwards bounce and complaint notifications as email. Feedback forwarding can only be
        *             disabled when Amazon Simple Notification Service (Amazon SNS) topics are specified for both bounces and
        *             complaints.</p>
        *         <note>
        *             <p>Feedback forwarding does not apply to delivery notifications. Delivery
        *                 notifications are only available through Amazon SNS.</p>
        *         </note>
        *         <p>You can execute this operation no more than once per second.</p>
        *         <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
        *                 Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SetIdentityFeedbackForwardingEnabledCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SetIdentityFeedbackForwardingEnabledCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SetIdentityFeedbackForwardingEnabledCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIdentityFeedbackForwardingEnabledCommandInput} for command's `input` shape.
        * @see {@link SetIdentityFeedbackForwardingEnabledCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SetIdentityFeedbackForwardingEnabledCommand extends $Command<SetIdentityFeedbackForwardingEnabledCommandInput, SetIdentityFeedbackForwardingEnabledCommandOutput, SESClientResolvedConfig> {
            readonly input: SetIdentityFeedbackForwardingEnabledCommandInput;
            constructor(input: SetIdentityFeedbackForwardingEnabledCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIdentityFeedbackForwardingEnabledCommandInput, SetIdentityFeedbackForwardingEnabledCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityHeadersInNotificationsEnabledCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetIdentityHeadersInNotificationsEnabledRequest, SetIdentityHeadersInNotificationsEnabledResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SetIdentityHeadersInNotificationsEnabledCommandInput extends SetIdentityHeadersInNotificationsEnabledRequest {
    }
    export interface SetIdentityHeadersInNotificationsEnabledCommandOutput extends SetIdentityHeadersInNotificationsEnabledResponse, __MetadataBearer {
    }
    /**
        * <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the
        *             original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified
        *             type.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        *         <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
        *                 Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SetIdentityHeadersInNotificationsEnabledCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SetIdentityHeadersInNotificationsEnabledCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SetIdentityHeadersInNotificationsEnabledCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIdentityHeadersInNotificationsEnabledCommandInput} for command's `input` shape.
        * @see {@link SetIdentityHeadersInNotificationsEnabledCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SetIdentityHeadersInNotificationsEnabledCommand extends $Command<SetIdentityHeadersInNotificationsEnabledCommandInput, SetIdentityHeadersInNotificationsEnabledCommandOutput, SESClientResolvedConfig> {
            readonly input: SetIdentityHeadersInNotificationsEnabledCommandInput;
            constructor(input: SetIdentityHeadersInNotificationsEnabledCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIdentityHeadersInNotificationsEnabledCommandInput, SetIdentityHeadersInNotificationsEnabledCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityMailFromDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetIdentityMailFromDomainRequest, SetIdentityMailFromDomainResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SetIdentityMailFromDomainCommandInput extends SetIdentityMailFromDomainRequest {
    }
    export interface SetIdentityMailFromDomainCommandOutput extends SetIdentityMailFromDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Enables or disables the custom MAIL FROM domain setup for a verified identity (an
        *             email address or a domain).</p>
        *         <important>
        *             <p>To send emails using the specified MAIL FROM domain, you must add an MX record to
        *                 your MAIL FROM domain's DNS settings. If you want your emails to pass Sender Policy
        *                 Framework (SPF) checks, you must also add or update an SPF record. For more
        *                 information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-set.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         </important>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SetIdentityMailFromDomainCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SetIdentityMailFromDomainCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SetIdentityMailFromDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIdentityMailFromDomainCommandInput} for command's `input` shape.
        * @see {@link SetIdentityMailFromDomainCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SetIdentityMailFromDomainCommand extends $Command<SetIdentityMailFromDomainCommandInput, SetIdentityMailFromDomainCommandOutput, SESClientResolvedConfig> {
            readonly input: SetIdentityMailFromDomainCommandInput;
            constructor(input: SetIdentityMailFromDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIdentityMailFromDomainCommandInput, SetIdentityMailFromDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityNotificationTopicCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetIdentityNotificationTopicRequest, SetIdentityNotificationTopicResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SetIdentityNotificationTopicCommandInput extends SetIdentityNotificationTopicRequest {
    }
    export interface SetIdentityNotificationTopicCommandOutput extends SetIdentityNotificationTopicResponse, __MetadataBearer {
    }
    /**
        * <p>Sets an Amazon Simple Notification Service (Amazon SNS) topic to use when delivering notifications. When you use
        *             this operation, you specify a verified identity, such as an email address or domain.
        *             When you send an email that uses the chosen identity in the Source field, Amazon SES sends
        *             notifications to the topic you specified. You can send bounce, complaint, or delivery
        *             notifications (or any combination of the three) to the Amazon SNS topic that you
        *             specify.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        *         <p>For more information about feedback notification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer
        *             Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SetIdentityNotificationTopicCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SetIdentityNotificationTopicCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SetIdentityNotificationTopicCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIdentityNotificationTopicCommandInput} for command's `input` shape.
        * @see {@link SetIdentityNotificationTopicCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SetIdentityNotificationTopicCommand extends $Command<SetIdentityNotificationTopicCommandInput, SetIdentityNotificationTopicCommandOutput, SESClientResolvedConfig> {
            readonly input: SetIdentityNotificationTopicCommandInput;
            constructor(input: SetIdentityNotificationTopicCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIdentityNotificationTopicCommandInput, SetIdentityNotificationTopicCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetReceiptRulePositionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SetReceiptRulePositionRequest, SetReceiptRulePositionResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface SetReceiptRulePositionCommandInput extends SetReceiptRulePositionRequest {
    }
    export interface SetReceiptRulePositionCommandOutput extends SetReceiptRulePositionResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the position of the specified receipt rule in the receipt rule set.</p>
        *         <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, SetReceiptRulePositionCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, SetReceiptRulePositionCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new SetReceiptRulePositionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetReceiptRulePositionCommandInput} for command's `input` shape.
        * @see {@link SetReceiptRulePositionCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class SetReceiptRulePositionCommand extends $Command<SetReceiptRulePositionCommandInput, SetReceiptRulePositionCommandOutput, SESClientResolvedConfig> {
            readonly input: SetReceiptRulePositionCommandInput;
            constructor(input: SetReceiptRulePositionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetReceiptRulePositionCommandInput, SetReceiptRulePositionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/TestRenderTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TestRenderTemplateRequest, TestRenderTemplateResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface TestRenderTemplateCommandInput extends TestRenderTemplateRequest {
    }
    export interface TestRenderTemplateCommandOutput extends TestRenderTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a preview of the MIME content of an email when provided with a template and a
        *             set of replacement data.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, TestRenderTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, TestRenderTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new TestRenderTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestRenderTemplateCommandInput} for command's `input` shape.
        * @see {@link TestRenderTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class TestRenderTemplateCommand extends $Command<TestRenderTemplateCommandInput, TestRenderTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: TestRenderTemplateCommandInput;
            constructor(input: TestRenderTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestRenderTemplateCommandInput, TestRenderTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateAccountSendingEnabledCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAccountSendingEnabledRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateAccountSendingEnabledCommandInput extends UpdateAccountSendingEnabledRequest {
    }
    export interface UpdateAccountSendingEnabledCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Enables or disables email sending across your entire Amazon SES account in the current
        *             AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms to
        *             temporarily pause email sending across your Amazon SES account in a given AWS Region when
        *             reputation metrics (such as your bounce or complaint rates) reach certain
        *             thresholds.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateAccountSendingEnabledCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateAccountSendingEnabledCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateAccountSendingEnabledCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAccountSendingEnabledCommandInput} for command's `input` shape.
        * @see {@link UpdateAccountSendingEnabledCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateAccountSendingEnabledCommand extends $Command<UpdateAccountSendingEnabledCommandInput, UpdateAccountSendingEnabledCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateAccountSendingEnabledCommandInput;
            constructor(input: UpdateAccountSendingEnabledCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAccountSendingEnabledCommandInput, UpdateAccountSendingEnabledCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetEventDestinationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConfigurationSetEventDestinationRequest, UpdateConfigurationSetEventDestinationResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateConfigurationSetEventDestinationCommandInput extends UpdateConfigurationSetEventDestinationRequest {
    }
    export interface UpdateConfigurationSetEventDestinationCommandOutput extends UpdateConfigurationSetEventDestinationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the event destination of a configuration set. Event destinations are
        *             associated with configuration sets, which enable you to publish email sending events to
        *             Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets,
        *             see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Monitoring Your Amazon SES
        *                 Sending Activity</a> in the <i>Amazon SES Developer Guide.</i>
        *          </p>
        *         <note>
        *             <p>When you create or update an event destination, you must provide one, and only
        *                 one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service
        *                 (Amazon SNS).</p>
        *         </note>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateConfigurationSetEventDestinationCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateConfigurationSetEventDestinationCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateConfigurationSetEventDestinationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationSetEventDestinationCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationSetEventDestinationCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateConfigurationSetEventDestinationCommand extends $Command<UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateConfigurationSetEventDestinationCommandInput;
            constructor(input: UpdateConfigurationSetEventDestinationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetReputationMetricsEnabledCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConfigurationSetReputationMetricsEnabledRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateConfigurationSetReputationMetricsEnabledCommandInput extends UpdateConfigurationSetReputationMetricsEnabledRequest {
    }
    export interface UpdateConfigurationSetReputationMetricsEnabledCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Enables or disables the publishing of reputation metrics for emails sent using a
        *             specific configuration set in a given AWS Region. Reputation metrics include bounce
        *             and complaint rates. These metrics are published to Amazon CloudWatch. By using CloudWatch, you can
        *             create alarms when bounce or complaint rates exceed certain thresholds.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateConfigurationSetReputationMetricsEnabledCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateConfigurationSetReputationMetricsEnabledCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateConfigurationSetReputationMetricsEnabledCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationSetReputationMetricsEnabledCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationSetReputationMetricsEnabledCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateConfigurationSetReputationMetricsEnabledCommand extends $Command<UpdateConfigurationSetReputationMetricsEnabledCommandInput, UpdateConfigurationSetReputationMetricsEnabledCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateConfigurationSetReputationMetricsEnabledCommandInput;
            constructor(input: UpdateConfigurationSetReputationMetricsEnabledCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationSetReputationMetricsEnabledCommandInput, UpdateConfigurationSetReputationMetricsEnabledCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetSendingEnabledCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConfigurationSetSendingEnabledRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateConfigurationSetSendingEnabledCommandInput extends UpdateConfigurationSetSendingEnabledRequest {
    }
    export interface UpdateConfigurationSetSendingEnabledCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Enables or disables email sending for messages sent using a specific configuration set
        *             in a given AWS Region. You can use this operation in conjunction with Amazon CloudWatch alarms
        *             to temporarily pause email sending for a configuration set when the reputation metrics
        *             for that configuration set (such as your bounce on complaint rate) exceed certain
        *             thresholds.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateConfigurationSetSendingEnabledCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateConfigurationSetSendingEnabledCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateConfigurationSetSendingEnabledCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationSetSendingEnabledCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationSetSendingEnabledCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateConfigurationSetSendingEnabledCommand extends $Command<UpdateConfigurationSetSendingEnabledCommandInput, UpdateConfigurationSetSendingEnabledCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateConfigurationSetSendingEnabledCommandInput;
            constructor(input: UpdateConfigurationSetSendingEnabledCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationSetSendingEnabledCommandInput, UpdateConfigurationSetSendingEnabledCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetTrackingOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConfigurationSetTrackingOptionsRequest, UpdateConfigurationSetTrackingOptionsResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateConfigurationSetTrackingOptionsCommandInput extends UpdateConfigurationSetTrackingOptionsRequest {
    }
    export interface UpdateConfigurationSetTrackingOptionsCommandOutput extends UpdateConfigurationSetTrackingOptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies an association between a configuration set and a custom domain for open and
        *             click event tracking. </p>
        *         <p>By default, images and links used for tracking open and click events are hosted on
        *             domains operated by Amazon SES. You can configure a subdomain of your own to handle these
        *             events. For information about using custom domains, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Amazon SES Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateConfigurationSetTrackingOptionsCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateConfigurationSetTrackingOptionsCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateConfigurationSetTrackingOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationSetTrackingOptionsCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationSetTrackingOptionsCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateConfigurationSetTrackingOptionsCommand extends $Command<UpdateConfigurationSetTrackingOptionsCommandInput, UpdateConfigurationSetTrackingOptionsCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateConfigurationSetTrackingOptionsCommandInput;
            constructor(input: UpdateConfigurationSetTrackingOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationSetTrackingOptionsCommandInput, UpdateConfigurationSetTrackingOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateCustomVerificationEmailTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateCustomVerificationEmailTemplateRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateCustomVerificationEmailTemplateCommandInput extends UpdateCustomVerificationEmailTemplateRequest {
    }
    export interface UpdateCustomVerificationEmailTemplateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates an existing custom verification email template.</p>
        *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom Verification Email Templates</a> in the <i>Amazon SES Developer
        *                 Guide</i>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateCustomVerificationEmailTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateCustomVerificationEmailTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateCustomVerificationEmailTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateCustomVerificationEmailTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateCustomVerificationEmailTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateCustomVerificationEmailTemplateCommand extends $Command<UpdateCustomVerificationEmailTemplateCommandInput, UpdateCustomVerificationEmailTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateCustomVerificationEmailTemplateCommandInput;
            constructor(input: UpdateCustomVerificationEmailTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateCustomVerificationEmailTemplateCommandInput, UpdateCustomVerificationEmailTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateReceiptRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateReceiptRuleRequest, UpdateReceiptRuleResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateReceiptRuleCommandInput extends UpdateReceiptRuleRequest {
    }
    export interface UpdateReceiptRuleCommandOutput extends UpdateReceiptRuleResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a receipt rule.</p>
        *         <p>For information about managing receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rules.html">Amazon SES
        *                 Developer Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateReceiptRuleCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateReceiptRuleCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateReceiptRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateReceiptRuleCommandInput} for command's `input` shape.
        * @see {@link UpdateReceiptRuleCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateReceiptRuleCommand extends $Command<UpdateReceiptRuleCommandInput, UpdateReceiptRuleCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateReceiptRuleCommandInput;
            constructor(input: UpdateReceiptRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateReceiptRuleCommandInput, UpdateReceiptRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateTemplateRequest, UpdateTemplateResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface UpdateTemplateCommandInput extends UpdateTemplateRequest {
    }
    export interface UpdateTemplateCommandOutput extends UpdateTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an email template. Email templates enable you to send personalized email to
        *             one or more destinations in a single API operation. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, UpdateTemplateCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, UpdateTemplateCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new UpdateTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateTemplateCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class UpdateTemplateCommand extends $Command<UpdateTemplateCommandInput, UpdateTemplateCommandOutput, SESClientResolvedConfig> {
            readonly input: UpdateTemplateCommandInput;
            constructor(input: UpdateTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTemplateCommandInput, UpdateTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyDomainDkimCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { VerifyDomainDkimRequest, VerifyDomainDkimResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface VerifyDomainDkimCommandInput extends VerifyDomainDkimRequest {
    }
    export interface VerifyDomainDkimCommandOutput extends VerifyDomainDkimResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a set of DKIM tokens for a domain identity.</p>
        *         <important>
        *             <p>When you execute the <code>VerifyDomainDkim</code> operation, the domain that you
        *                 specify is added to the list of identities that are associated with your account.
        *                 This is true even if you haven't already associated the domain with your account by
        *                 using the <code>VerifyDomainIdentity</code> operation. However, you can't send email
        *                 from the domain until you either successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">verify it</a> or you
        *                 successfully <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">set up DKIM for
        *                 it</a>.</p>
        *         </important>
        *         <p>You use the tokens that are generated by this operation to create CNAME records. When
        *             Amazon SES detects that you've added these records to the DNS configuration for a domain, you
        *             can start sending email from that domain. You can start sending email even if you
        *             haven't added the TXT record provided by the VerifyDomainIdentity operation to the DNS
        *             configuration for your domain. All email that you send from the domain is authenticated
        *             using DKIM.</p>
        *         <p>To create the CNAME records for DKIM authentication, use the following values:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>Name</b>:
        *                         <i>token</i>._domainkey.<i>example.com</i>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Type</b>: CNAME</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Value</b>:
        *                     <i>token</i>.dkim.amazonses.com</p>
        *             </li>
        *          </ul>
        *         <p>In the preceding example, replace <i>token</i> with one of the tokens
        *             that are generated when you execute this operation. Replace
        *                 <i>example.com</i> with your domain. Repeat this process for each
        *             token that's generated by this operation.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, VerifyDomainDkimCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, VerifyDomainDkimCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new VerifyDomainDkimCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link VerifyDomainDkimCommandInput} for command's `input` shape.
        * @see {@link VerifyDomainDkimCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class VerifyDomainDkimCommand extends $Command<VerifyDomainDkimCommandInput, VerifyDomainDkimCommandOutput, SESClientResolvedConfig> {
            readonly input: VerifyDomainDkimCommandInput;
            constructor(input: VerifyDomainDkimCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifyDomainDkimCommandInput, VerifyDomainDkimCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyDomainIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { VerifyDomainIdentityRequest, VerifyDomainIdentityResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface VerifyDomainIdentityCommandInput extends VerifyDomainIdentityRequest {
    }
    export interface VerifyDomainIdentityCommandOutput extends VerifyDomainIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a domain to the list of identities for your Amazon SES account in the current AWS
        *             Region and attempts to verify it. For more information about verifying domains, see
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Verifying Email
        *                 Addresses and Domains</a> in the <i>Amazon SES Developer
        *             Guide.</i>
        *          </p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, VerifyDomainIdentityCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, VerifyDomainIdentityCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new VerifyDomainIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link VerifyDomainIdentityCommandInput} for command's `input` shape.
        * @see {@link VerifyDomainIdentityCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class VerifyDomainIdentityCommand extends $Command<VerifyDomainIdentityCommandInput, VerifyDomainIdentityCommandOutput, SESClientResolvedConfig> {
            readonly input: VerifyDomainIdentityCommandInput;
            constructor(input: VerifyDomainIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifyDomainIdentityCommandInput, VerifyDomainIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyEmailAddressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { VerifyEmailAddressRequest } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface VerifyEmailAddressCommandInput extends VerifyEmailAddressRequest {
    }
    export interface VerifyEmailAddressCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deprecated. Use the <code>VerifyEmailIdentity</code> operation to verify a new email
        *             address.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, VerifyEmailAddressCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, VerifyEmailAddressCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new VerifyEmailAddressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link VerifyEmailAddressCommandInput} for command's `input` shape.
        * @see {@link VerifyEmailAddressCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class VerifyEmailAddressCommand extends $Command<VerifyEmailAddressCommandInput, VerifyEmailAddressCommandOutput, SESClientResolvedConfig> {
            readonly input: VerifyEmailAddressCommandInput;
            constructor(input: VerifyEmailAddressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifyEmailAddressCommandInput, VerifyEmailAddressCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyEmailIdentityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { VerifyEmailIdentityRequest, VerifyEmailIdentityResponse } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient";
    export interface VerifyEmailIdentityCommandInput extends VerifyEmailIdentityRequest {
    }
    export interface VerifyEmailIdentityCommandOutput extends VerifyEmailIdentityResponse, __MetadataBearer {
    }
    /**
        * <p>Adds an email address to the list of identities for your Amazon SES account in the current
        *             AWS region and attempts to verify it. As a result of executing this operation, a
        *             verification email is sent to the specified address.</p>
        *         <p>You can execute this operation no more than once per second.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SESClient, VerifyEmailIdentityCommand } from "@aws-sdk/client-ses"; // ES Modules import
        * // const { SESClient, VerifyEmailIdentityCommand } = require("@aws-sdk/client-ses"); // CommonJS import
        * const client = new SESClient(config);
        * const command = new VerifyEmailIdentityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link VerifyEmailIdentityCommandInput} for command's `input` shape.
        * @see {@link VerifyEmailIdentityCommandOutput} for command's `response` shape.
        * @see {@link SESClientResolvedConfig | config} for SESClient's `config` shape.
        *
        */
    export class VerifyEmailIdentityCommand extends $Command<VerifyEmailIdentityCommandInput, VerifyEmailIdentityCommandOutput, SESClientResolvedConfig> {
            readonly input: VerifyEmailIdentityCommandInput;
            constructor(input: VerifyEmailIdentityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SESClientResolvedConfig, options?: __HttpHandlerOptions): Handler<VerifyEmailIdentityCommandInput, VerifyEmailIdentityCommandOutput>;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/SESClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CloneReceiptRuleSetCommandInput, CloneReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CloneReceiptRuleSetCommand";
    import { CreateConfigurationSetCommandInput, CreateConfigurationSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetCommand";
    import { CreateConfigurationSetEventDestinationCommandInput, CreateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetEventDestinationCommand";
    import { CreateConfigurationSetTrackingOptionsCommandInput, CreateConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateConfigurationSetTrackingOptionsCommand";
    import { CreateCustomVerificationEmailTemplateCommandInput, CreateCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateCustomVerificationEmailTemplateCommand";
    import { CreateReceiptFilterCommandInput, CreateReceiptFilterCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptFilterCommand";
    import { CreateReceiptRuleCommandInput, CreateReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptRuleCommand";
    import { CreateReceiptRuleSetCommandInput, CreateReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateReceiptRuleSetCommand";
    import { CreateTemplateCommandInput, CreateTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/CreateTemplateCommand";
    import { DeleteConfigurationSetCommandInput, DeleteConfigurationSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetCommand";
    import { DeleteConfigurationSetEventDestinationCommandInput, DeleteConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetEventDestinationCommand";
    import { DeleteConfigurationSetTrackingOptionsCommandInput, DeleteConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteConfigurationSetTrackingOptionsCommand";
    import { DeleteCustomVerificationEmailTemplateCommandInput, DeleteCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteCustomVerificationEmailTemplateCommand";
    import { DeleteIdentityCommandInput, DeleteIdentityCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteIdentityCommand";
    import { DeleteIdentityPolicyCommandInput, DeleteIdentityPolicyCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteIdentityPolicyCommand";
    import { DeleteReceiptFilterCommandInput, DeleteReceiptFilterCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptFilterCommand";
    import { DeleteReceiptRuleCommandInput, DeleteReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptRuleCommand";
    import { DeleteReceiptRuleSetCommandInput, DeleteReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteReceiptRuleSetCommand";
    import { DeleteTemplateCommandInput, DeleteTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteTemplateCommand";
    import { DeleteVerifiedEmailAddressCommandInput, DeleteVerifiedEmailAddressCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DeleteVerifiedEmailAddressCommand";
    import { DescribeActiveReceiptRuleSetCommandInput, DescribeActiveReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeActiveReceiptRuleSetCommand";
    import { DescribeConfigurationSetCommandInput, DescribeConfigurationSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeConfigurationSetCommand";
    import { DescribeReceiptRuleCommandInput, DescribeReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeReceiptRuleCommand";
    import { DescribeReceiptRuleSetCommandInput, DescribeReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/DescribeReceiptRuleSetCommand";
    import { GetAccountSendingEnabledCommandInput, GetAccountSendingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetAccountSendingEnabledCommand";
    import { GetCustomVerificationEmailTemplateCommandInput, GetCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetCustomVerificationEmailTemplateCommand";
    import { GetIdentityDkimAttributesCommandInput, GetIdentityDkimAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityDkimAttributesCommand";
    import { GetIdentityMailFromDomainAttributesCommandInput, GetIdentityMailFromDomainAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityMailFromDomainAttributesCommand";
    import { GetIdentityNotificationAttributesCommandInput, GetIdentityNotificationAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityNotificationAttributesCommand";
    import { GetIdentityPoliciesCommandInput, GetIdentityPoliciesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityPoliciesCommand";
    import { GetIdentityVerificationAttributesCommandInput, GetIdentityVerificationAttributesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetIdentityVerificationAttributesCommand";
    import { GetSendQuotaCommandInput, GetSendQuotaCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetSendQuotaCommand";
    import { GetSendStatisticsCommandInput, GetSendStatisticsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetSendStatisticsCommand";
    import { GetTemplateCommandInput, GetTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/GetTemplateCommand";
    import { ListConfigurationSetsCommandInput, ListConfigurationSetsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListConfigurationSetsCommand";
    import { ListCustomVerificationEmailTemplatesCommandInput, ListCustomVerificationEmailTemplatesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListCustomVerificationEmailTemplatesCommand";
    import { ListIdentitiesCommandInput, ListIdentitiesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListIdentitiesCommand";
    import { ListIdentityPoliciesCommandInput, ListIdentityPoliciesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListIdentityPoliciesCommand";
    import { ListReceiptFiltersCommandInput, ListReceiptFiltersCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListReceiptFiltersCommand";
    import { ListReceiptRuleSetsCommandInput, ListReceiptRuleSetsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListReceiptRuleSetsCommand";
    import { ListTemplatesCommandInput, ListTemplatesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListTemplatesCommand";
    import { ListVerifiedEmailAddressesCommandInput, ListVerifiedEmailAddressesCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ListVerifiedEmailAddressesCommand";
    import { PutConfigurationSetDeliveryOptionsCommandInput, PutConfigurationSetDeliveryOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/PutConfigurationSetDeliveryOptionsCommand";
    import { PutIdentityPolicyCommandInput, PutIdentityPolicyCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/PutIdentityPolicyCommand";
    import { ReorderReceiptRuleSetCommandInput, ReorderReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/ReorderReceiptRuleSetCommand";
    import { SendBounceCommandInput, SendBounceCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendBounceCommand";
    import { SendBulkTemplatedEmailCommandInput, SendBulkTemplatedEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendBulkTemplatedEmailCommand";
    import { SendCustomVerificationEmailCommandInput, SendCustomVerificationEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendCustomVerificationEmailCommand";
    import { SendEmailCommandInput, SendEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendEmailCommand";
    import { SendRawEmailCommandInput, SendRawEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendRawEmailCommand";
    import { SendTemplatedEmailCommandInput, SendTemplatedEmailCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SendTemplatedEmailCommand";
    import { SetActiveReceiptRuleSetCommandInput, SetActiveReceiptRuleSetCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetActiveReceiptRuleSetCommand";
    import { SetIdentityDkimEnabledCommandInput, SetIdentityDkimEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityDkimEnabledCommand";
    import { SetIdentityFeedbackForwardingEnabledCommandInput, SetIdentityFeedbackForwardingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityFeedbackForwardingEnabledCommand";
    import { SetIdentityHeadersInNotificationsEnabledCommandInput, SetIdentityHeadersInNotificationsEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityHeadersInNotificationsEnabledCommand";
    import { SetIdentityMailFromDomainCommandInput, SetIdentityMailFromDomainCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityMailFromDomainCommand";
    import { SetIdentityNotificationTopicCommandInput, SetIdentityNotificationTopicCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetIdentityNotificationTopicCommand";
    import { SetReceiptRulePositionCommandInput, SetReceiptRulePositionCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/SetReceiptRulePositionCommand";
    import { TestRenderTemplateCommandInput, TestRenderTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/TestRenderTemplateCommand";
    import { UpdateAccountSendingEnabledCommandInput, UpdateAccountSendingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateAccountSendingEnabledCommand";
    import { UpdateConfigurationSetEventDestinationCommandInput, UpdateConfigurationSetEventDestinationCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetEventDestinationCommand";
    import { UpdateConfigurationSetReputationMetricsEnabledCommandInput, UpdateConfigurationSetReputationMetricsEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetReputationMetricsEnabledCommand";
    import { UpdateConfigurationSetSendingEnabledCommandInput, UpdateConfigurationSetSendingEnabledCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetSendingEnabledCommand";
    import { UpdateConfigurationSetTrackingOptionsCommandInput, UpdateConfigurationSetTrackingOptionsCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateConfigurationSetTrackingOptionsCommand";
    import { UpdateCustomVerificationEmailTemplateCommandInput, UpdateCustomVerificationEmailTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateCustomVerificationEmailTemplateCommand";
    import { UpdateReceiptRuleCommandInput, UpdateReceiptRuleCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateReceiptRuleCommand";
    import { UpdateTemplateCommandInput, UpdateTemplateCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/UpdateTemplateCommand";
    import { VerifyDomainDkimCommandInput, VerifyDomainDkimCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyDomainDkimCommand";
    import { VerifyDomainIdentityCommandInput, VerifyDomainIdentityCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyDomainIdentityCommand";
    import { VerifyEmailAddressCommandInput, VerifyEmailAddressCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyEmailAddressCommand";
    import { VerifyEmailIdentityCommandInput, VerifyEmailIdentityCommandOutput } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/commands/VerifyEmailIdentityCommand";
    export type ServiceInputTypes = CloneReceiptRuleSetCommandInput | CreateConfigurationSetCommandInput | CreateConfigurationSetEventDestinationCommandInput | CreateConfigurationSetTrackingOptionsCommandInput | CreateCustomVerificationEmailTemplateCommandInput | CreateReceiptFilterCommandInput | CreateReceiptRuleCommandInput | CreateReceiptRuleSetCommandInput | CreateTemplateCommandInput | DeleteConfigurationSetCommandInput | DeleteConfigurationSetEventDestinationCommandInput | DeleteConfigurationSetTrackingOptionsCommandInput | DeleteCustomVerificationEmailTemplateCommandInput | DeleteIdentityCommandInput | DeleteIdentityPolicyCommandInput | DeleteReceiptFilterCommandInput | DeleteReceiptRuleCommandInput | DeleteReceiptRuleSetCommandInput | DeleteTemplateCommandInput | DeleteVerifiedEmailAddressCommandInput | DescribeActiveReceiptRuleSetCommandInput | DescribeConfigurationSetCommandInput | DescribeReceiptRuleCommandInput | DescribeReceiptRuleSetCommandInput | GetAccountSendingEnabledCommandInput | GetCustomVerificationEmailTemplateCommandInput | GetIdentityDkimAttributesCommandInput | GetIdentityMailFromDomainAttributesCommandInput | GetIdentityNotificationAttributesCommandInput | GetIdentityPoliciesCommandInput | GetIdentityVerificationAttributesCommandInput | GetSendQuotaCommandInput | GetSendStatisticsCommandInput | GetTemplateCommandInput | ListConfigurationSetsCommandInput | ListCustomVerificationEmailTemplatesCommandInput | ListIdentitiesCommandInput | ListIdentityPoliciesCommandInput | ListReceiptFiltersCommandInput | ListReceiptRuleSetsCommandInput | ListTemplatesCommandInput | ListVerifiedEmailAddressesCommandInput | PutConfigurationSetDeliveryOptionsCommandInput | PutIdentityPolicyCommandInput | ReorderReceiptRuleSetCommandInput | SendBounceCommandInput | SendBulkTemplatedEmailCommandInput | SendCustomVerificationEmailCommandInput | SendEmailCommandInput | SendRawEmailCommandInput | SendTemplatedEmailCommandInput | SetActiveReceiptRuleSetCommandInput | SetIdentityDkimEnabledCommandInput | SetIdentityFeedbackForwardingEnabledCommandInput | SetIdentityHeadersInNotificationsEnabledCommandInput | SetIdentityMailFromDomainCommandInput | SetIdentityNotificationTopicCommandInput | SetReceiptRulePositionCommandInput | TestRenderTemplateCommandInput | UpdateAccountSendingEnabledCommandInput | UpdateConfigurationSetEventDestinationCommandInput | UpdateConfigurationSetReputationMetricsEnabledCommandInput | UpdateConfigurationSetSendingEnabledCommandInput | UpdateConfigurationSetTrackingOptionsCommandInput | UpdateCustomVerificationEmailTemplateCommandInput | UpdateReceiptRuleCommandInput | UpdateTemplateCommandInput | VerifyDomainDkimCommandInput | VerifyDomainIdentityCommandInput | VerifyEmailAddressCommandInput | VerifyEmailIdentityCommandInput;
    export type ServiceOutputTypes = CloneReceiptRuleSetCommandOutput | CreateConfigurationSetCommandOutput | CreateConfigurationSetEventDestinationCommandOutput | CreateConfigurationSetTrackingOptionsCommandOutput | CreateCustomVerificationEmailTemplateCommandOutput | CreateReceiptFilterCommandOutput | CreateReceiptRuleCommandOutput | CreateReceiptRuleSetCommandOutput | CreateTemplateCommandOutput | DeleteConfigurationSetCommandOutput | DeleteConfigurationSetEventDestinationCommandOutput | DeleteConfigurationSetTrackingOptionsCommandOutput | DeleteCustomVerificationEmailTemplateCommandOutput | DeleteIdentityCommandOutput | DeleteIdentityPolicyCommandOutput | DeleteReceiptFilterCommandOutput | DeleteReceiptRuleCommandOutput | DeleteReceiptRuleSetCommandOutput | DeleteTemplateCommandOutput | DeleteVerifiedEmailAddressCommandOutput | DescribeActiveReceiptRuleSetCommandOutput | DescribeConfigurationSetCommandOutput | DescribeReceiptRuleCommandOutput | DescribeReceiptRuleSetCommandOutput | GetAccountSendingEnabledCommandOutput | GetCustomVerificationEmailTemplateCommandOutput | GetIdentityDkimAttributesCommandOutput | GetIdentityMailFromDomainAttributesCommandOutput | GetIdentityNotificationAttributesCommandOutput | GetIdentityPoliciesCommandOutput | GetIdentityVerificationAttributesCommandOutput | GetSendQuotaCommandOutput | GetSendStatisticsCommandOutput | GetTemplateCommandOutput | ListConfigurationSetsCommandOutput | ListCustomVerificationEmailTemplatesCommandOutput | ListIdentitiesCommandOutput | ListIdentityPoliciesCommandOutput | ListReceiptFiltersCommandOutput | ListReceiptRuleSetsCommandOutput | ListTemplatesCommandOutput | ListVerifiedEmailAddressesCommandOutput | PutConfigurationSetDeliveryOptionsCommandOutput | PutIdentityPolicyCommandOutput | ReorderReceiptRuleSetCommandOutput | SendBounceCommandOutput | SendBulkTemplatedEmailCommandOutput | SendCustomVerificationEmailCommandOutput | SendEmailCommandOutput | SendRawEmailCommandOutput | SendTemplatedEmailCommandOutput | SetActiveReceiptRuleSetCommandOutput | SetIdentityDkimEnabledCommandOutput | SetIdentityFeedbackForwardingEnabledCommandOutput | SetIdentityHeadersInNotificationsEnabledCommandOutput | SetIdentityMailFromDomainCommandOutput | SetIdentityNotificationTopicCommandOutput | SetReceiptRulePositionCommandOutput | TestRenderTemplateCommandOutput | UpdateAccountSendingEnabledCommandOutput | UpdateConfigurationSetEventDestinationCommandOutput | UpdateConfigurationSetReputationMetricsEnabledCommandOutput | UpdateConfigurationSetSendingEnabledCommandOutput | UpdateConfigurationSetTrackingOptionsCommandOutput | UpdateCustomVerificationEmailTemplateCommandOutput | UpdateReceiptRuleCommandOutput | UpdateTemplateCommandOutput | VerifyDomainDkimCommandOutput | VerifyDomainIdentityCommandOutput | VerifyEmailAddressCommandOutput | VerifyEmailIdentityCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SESClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SESClient class constructor that set the region, credentials and other options.
        */
    export interface SESClientConfig extends SESClientConfigType {
    }
    type SESClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SESClient class. This is resolved and normalized from the {@link SESClientConfig | constructor configuration interface}.
        */
    export interface SESClientResolvedConfig extends SESClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Simple Email Service</fullname>
        *         <p> This document contains reference information for the <a href="https://aws.amazon.com/ses/">Amazon Simple Email Service</a> (Amazon SES) API, version
        *             2010-12-01. This document is best used in conjunction with the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer
        *                 Guide</a>. </p>
        *         <note>
        *             <p> For a list of Amazon SES endpoints to use in service requests, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html">Regions and
        *                     Amazon SES</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         </note>
        */
    export class SESClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SESClientResolvedConfig> {
            /**
                * The resolved configuration of SESClient class. This is resolved and normalized from the {@link SESClientConfig | constructor configuration interface}.
                */
            readonly config: SESClientResolvedConfig;
            constructor(configuration: SESClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SESServiceException as __BaseException } from "@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/SESServiceException";
    /**
        * <p>Indicates that email sending is disabled for your entire Amazon SES account.</p>
        *         <p>You can enable or disable email sending for your Amazon SES account using <a>UpdateAccountSendingEnabled</a>.</p>
        */
    export class AccountSendingPausedException extends __BaseException {
            readonly name: "AccountSendingPausedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccountSendingPausedException, __BaseException>);
    }
    /**
        * <p>When included in a receipt rule, this action adds a header to the received
        *             email.</p>
        *         <p>For information about adding a header using a receipt rule, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-add-header.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface AddHeaderAction {
            /**
                * <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and
                *             consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
                */
            HeaderName: string | undefined;
            /**
                * <p>Must be less than 2048 characters, and must not contain newline characters ("\r" or
                *             "\n").</p>
                */
            HeaderValue: string | undefined;
    }
    export namespace AddHeaderAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddHeaderAction) => any;
    }
    /**
        * <p>Indicates that a resource could not be created because of a naming conflict.</p>
        */
    export class AlreadyExistsException extends __BaseException {
            readonly name: "AlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Indicates that a resource could not be created because the resource name already
                *             exists.</p>
                */
            Name?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>);
    }
    export enum BehaviorOnMXFailure {
            RejectMessage = "RejectMessage",
            UseDefaultValue = "UseDefaultValue"
    }
    /**
        * <p>Represents textual data, plus an optional character set specification.</p>
        *         <p>By default, the text must be 7-bit ASCII, due to the constraints of the SMTP protocol.
        *             If the text must contain any other characters, then you must also specify a character
        *             set. Examples include UTF-8, ISO-8859-1, and Shift_JIS.</p>
        */
    export interface Content {
            /**
                * <p>The textual data of the content.</p>
                */
            Data: string | undefined;
            /**
                * <p>The character set of the content.</p>
                */
            Charset?: string;
    }
    export namespace Content {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Content) => any;
    }
    /**
        * <p>Represents the body of the message. You can specify text, HTML, or both. If you use
        *             both, then the message should display correctly in the widest variety of email
        *             clients.</p>
        */
    export interface Body {
            /**
                * <p>The content of the message, in text format. Use this for text-based email clients, or
                *             clients on high-latency networks (such as mobile devices).</p>
                */
            Text?: Content;
            /**
                * <p>The content of the message, in HTML format. Use this for email clients that can
                *             process HTML. You can include clickable links, formatted text, and much more in an HTML
                *             message.</p>
                */
            Html?: Content;
    }
    export namespace Body {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Body) => any;
    }
    /**
        * <p>When included in a receipt rule, this action rejects the received email by returning a
        *             bounce response to the sender and, optionally, publishes a notification to Amazon Simple Notification Service
        *             (Amazon SNS).</p>
        *         <p>For information about sending a bounce message in response to a received email, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-bounce.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface BounceAction {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the bounce action is
                *             taken. An example of an Amazon SNS topic ARN is
                *                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
                *             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
                */
            TopicArn?: string;
            /**
                * <p>The SMTP reply code, as defined by <a href="https://tools.ietf.org/html/rfc5321">RFC 5321</a>.</p>
                */
            SmtpReplyCode: string | undefined;
            /**
                * <p>The SMTP enhanced status code, as defined by <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a>.</p>
                */
            StatusCode?: string;
            /**
                * <p>Human-readable text to include in the bounce message.</p>
                */
            Message: string | undefined;
            /**
                * <p>The email address of the sender of the bounced email. This is the address from which
                *             the bounce message will be sent.</p>
                */
            Sender: string | undefined;
    }
    export namespace BounceAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BounceAction) => any;
    }
    export enum BounceType {
            ContentRejected = "ContentRejected",
            DoesNotExist = "DoesNotExist",
            ExceededQuota = "ExceededQuota",
            MessageTooLarge = "MessageTooLarge",
            TemporaryFailure = "TemporaryFailure",
            Undefined = "Undefined"
    }
    export enum DsnAction {
            DELAYED = "delayed",
            DELIVERED = "delivered",
            EXPANDED = "expanded",
            FAILED = "failed",
            RELAYED = "relayed"
    }
    /**
        * <p>Additional X-headers to include in the Delivery Status Notification (DSN) when an
        *             email that Amazon SES receives on your behalf bounces.</p>
        *         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface ExtensionField {
            /**
                * <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and
                *             consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
                */
            Name: string | undefined;
            /**
                * <p>The value of the header to add. Must be less than 2048 characters, and must not
                *             contain newline characters ("\r" or "\n").</p>
                */
            Value: string | undefined;
    }
    export namespace ExtensionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtensionField) => any;
    }
    /**
        * <p>Recipient-related information to include in the Delivery Status Notification (DSN)
        *             when an email that Amazon SES receives on your behalf bounces.</p>
        *         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface RecipientDsnFields {
            /**
                * <p>The email address that the message was ultimately delivered to. This corresponds to
                *             the <code>Final-Recipient</code> in the DSN. If not specified,
                *                 <code>FinalRecipient</code> will be set to the <code>Recipient</code> specified in
                *             the <code>BouncedRecipientInfo</code> structure. Either <code>FinalRecipient</code> or
                *             the recipient in <code>BouncedRecipientInfo</code> must be a recipient of the original
                *             bounced message.</p>
                *         <note>
                *             <p>Do not prepend the <code>FinalRecipient</code> email address with <code>rfc
                *                     822;</code>, as described in <a href="https://tools.ietf.org/html/rfc3798">RFC 3798</a>.</p>
                *         </note>
                */
            FinalRecipient?: string;
            /**
                * <p>The action performed by the reporting mail transfer agent (MTA) as a result of its
                *             attempt to deliver the message to the recipient address. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
                */
            Action: DsnAction | string | undefined;
            /**
                * <p>The MTA to which the remote MTA attempted to deliver the message, formatted as
                *             specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>
                *                 (<code>mta-name-type; mta-name</code>). This parameter typically applies only to
                *             propagating synchronous bounces.</p>
                */
            RemoteMta?: string;
            /**
                * <p>The status code that indicates what went wrong. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
                */
            Status: string | undefined;
            /**
                * <p>An extended explanation of what went wrong; this is usually an SMTP response. See
                *                 <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a> for the correct
                *             formatting of this parameter.</p>
                */
            DiagnosticCode?: string;
            /**
                * <p>The time the final delivery attempt was made, in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
                */
            LastAttemptDate?: Date;
            /**
                * <p>Additional X-headers to include in the DSN.</p>
                */
            ExtensionFields?: ExtensionField[];
    }
    export namespace RecipientDsnFields {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecipientDsnFields) => any;
    }
    /**
        * <p>Recipient-related information to include in the Delivery Status Notification (DSN)
        *             when an email that Amazon SES receives on your behalf bounces.</p>
        *         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface BouncedRecipientInfo {
            /**
                * <p>The email address of the recipient of the bounced email.</p>
                */
            Recipient: string | undefined;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to receive
                *             email for the recipient of the bounced email. For more information about sending
                *             authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            RecipientArn?: string;
            /**
                * <p>The reason for the bounce. You must provide either this parameter or
                *                 <code>RecipientDsnFields</code>.</p>
                */
            BounceType?: BounceType | string;
            /**
                * <p>Recipient-related DSN fields, most of which would normally be filled in automatically
                *             when provided with a <code>BounceType</code>. You must provide either this parameter or
                *                 <code>BounceType</code>.</p>
                */
            RecipientDsnFields?: RecipientDsnFields;
    }
    export namespace BouncedRecipientInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BouncedRecipientInfo) => any;
    }
    /**
        * <p>Represents the destination of the message, consisting of To:, CC:, and BCC:
        *             fields.</p>
        *         <note>
        *             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
        *                     <i>local part</i> of a destination email address (the part of the
        *                 email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
        *                     characters</a>. If the <i>domain part</i> of an address (the
        *                 part after the @ sign) contains non-ASCII characters, they must be encoded using
        *                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
        *         </note>
        */
    export interface Destination {
            /**
                * <p>The recipients to place on the To: line of the message.</p>
                */
            ToAddresses?: string[];
            /**
                * <p>The recipients to place on the CC: line of the message.</p>
                */
            CcAddresses?: string[];
            /**
                * <p>The recipients to place on the BCC: line of the message.</p>
                */
            BccAddresses?: string[];
    }
    export namespace Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Destination) => any;
    }
    /**
        * <p>Contains the name and value of a tag that you can provide to <code>SendEmail</code> or
        *                 <code>SendRawEmail</code> to apply to an email.</p>
        *         <p>Message tags, which you use with configuration sets, enable you to publish email
        *             sending events. For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface MessageTag {
            /**
                * <p>The name of the tag. The name must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            Name: string | undefined;
            /**
                * <p>The value of the tag. The value must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            Value: string | undefined;
    }
    export namespace MessageTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessageTag) => any;
    }
    /**
        * <p>An array that contains one or more Destinations, as well as the tags and replacement
        *             data associated with each of those Destinations.</p>
        */
    export interface BulkEmailDestination {
            /**
                * <p>Represents the destination of the message, consisting of To:, CC:, and BCC:
                *             fields.</p>
                *         <note>
                *             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
                *                     <i>local part</i> of a destination email address (the part of the
                *                 email address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
                *                     characters</a>. If the <i>domain part</i> of an address (the
                *                 part after the @ sign) contains non-ASCII characters, they must be encoded using
                *                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>.</p>
                *         </note>
                */
            Destination: Destination | undefined;
            /**
                * <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
                *             using <code>SendBulkTemplatedEmail</code>. Tags correspond to characteristics of the
                *             email that you define, so that you can publish email sending events.</p>
                */
            ReplacementTags?: MessageTag[];
            /**
                * <p>A list of replacement values to apply to the template. This parameter is a JSON
                *             object, typically consisting of key-value pairs in which the keys correspond to
                *             replacement tags in the email template.</p>
                */
            ReplacementTemplateData?: string;
    }
    export namespace BulkEmailDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BulkEmailDestination) => any;
    }
    export enum BulkEmailStatus {
            AccountDailyQuotaExceeded = "AccountDailyQuotaExceeded",
            AccountSendingPaused = "AccountSendingPaused",
            AccountSuspended = "AccountSuspended",
            AccountThrottled = "AccountThrottled",
            ConfigurationSetDoesNotExist = "ConfigurationSetDoesNotExist",
            ConfigurationSetSendingPaused = "ConfigurationSetSendingPaused",
            Failed = "Failed",
            InvalidParameterValue = "InvalidParameterValue",
            InvalidSendingPoolName = "InvalidSendingPoolName",
            MailFromDomainNotVerified = "MailFromDomainNotVerified",
            MessageRejected = "MessageRejected",
            Success = "Success",
            TemplateDoesNotExist = "TemplateDoesNotExist",
            TransientFailure = "TransientFailure"
    }
    /**
        * <p>An object that contains the response from the <code>SendBulkTemplatedEmail</code>
        *             operation.</p>
        */
    export interface BulkEmailDestinationStatus {
            /**
                * <p>The status of a message sent using the <code>SendBulkTemplatedEmail</code>
                *             operation.</p>
                *         <p>Possible values for this parameter include:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>Success</code>: Amazon SES accepted the message, and will attempt to deliver
                *                     it to the recipients.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MessageRejected</code>: The message was rejected because it contained a
                *                     virus.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>MailFromDomainNotVerified</code>: The sender's email address or domain
                *                     was not verified.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ConfigurationSetDoesNotExist</code>: The configuration set you specified
                *                     does not exist.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TemplateDoesNotExist</code>: The template you specified does not
                *                     exist.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>AccountSuspended</code>: Your account has been shut down because of
                *                     issues related to your email sending practices.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>AccountThrottled</code>: The number of emails you can send has been
                *                     reduced because your account has exceeded its allocated sending limit.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>AccountDailyQuotaExceeded</code>: You have reached or exceeded the
                *                     maximum number of emails you can send from your account in a 24-hour
                *                     period.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InvalidSendingPoolName</code>: The configuration set you specified
                *                     refers to an IP pool that does not exist.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>AccountSendingPaused</code>: Email sending for the Amazon SES account was
                *                     disabled using the <a>UpdateAccountSendingEnabled</a>
                *                     operation.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ConfigurationSetSendingPaused</code>: Email sending for this
                *                     configuration set was disabled using the <a>UpdateConfigurationSetSendingEnabled</a> operation.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>InvalidParameterValue</code>: One or more of the parameters you
                *                     specified when calling this operation was invalid. See the error message for
                *                     additional information.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TransientFailure</code>: Amazon SES was unable to process your request
                *                     because of a temporary issue.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Failed</code>: Amazon SES was unable to process your request. See the error
                *                     message for additional information.</p>
                *             </li>
                *          </ul>
                */
            Status?: BulkEmailStatus | string;
            /**
                * <p>A description of an error that prevented a message being sent using the
                *                 <code>SendBulkTemplatedEmail</code> operation.</p>
                */
            Error?: string;
            /**
                * <p>The unique message identifier returned from the <code>SendBulkTemplatedEmail</code>
                *             operation.</p>
                */
            MessageId?: string;
    }
    export namespace BulkEmailDestinationStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BulkEmailDestinationStatus) => any;
    }
    /**
        * <p>Indicates that the delete operation could not be completed.</p>
        */
    export class CannotDeleteException extends __BaseException {
            readonly name: "CannotDeleteException";
            readonly $fault: "client";
            /**
                * <p>Indicates that a resource could not be deleted because no resource with the specified
                *             name exists.</p>
                */
            Name?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CannotDeleteException, __BaseException>);
    }
    /**
        * <p>Represents a request to create a receipt rule set by cloning an existing one. You use
        *             receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface CloneReceiptRuleSetRequest {
            /**
                * <p>The name of the rule set to create. The name must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Start and end with a letter or number.</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 64 characters.</p>
                *             </li>
                *          </ul>
                */
            RuleSetName: string | undefined;
            /**
                * <p>The name of the rule set to clone.</p>
                */
            OriginalRuleSetName: string | undefined;
    }
    export namespace CloneReceiptRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloneReceiptRuleSetRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface CloneReceiptRuleSetResponse {
    }
    export namespace CloneReceiptRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloneReceiptRuleSetResponse) => any;
    }
    /**
        * <p>Indicates that a resource could not be created because of service limits. For a list
        *             of Amazon SES limits, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/limits.html">Amazon SES Developer
        *             Guide</a>.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>Indicates that the provided receipt rule set does not exist.</p>
        */
    export class RuleSetDoesNotExistException extends __BaseException {
            readonly name: "RuleSetDoesNotExistException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the named receipt rule set does not exist.</p>
                */
            Name?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RuleSetDoesNotExistException, __BaseException>);
    }
    export enum DimensionValueSource {
            EMAIL_HEADER = "emailHeader",
            LINK_TAG = "linkTag",
            MESSAGE_TAG = "messageTag"
    }
    /**
        * <p>Contains the dimension configuration to use when you publish email sending events to
        *             Amazon CloudWatch.</p>
        *         <p>For information about publishing email sending events to Amazon CloudWatch, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface CloudWatchDimensionConfiguration {
            /**
                * <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name
                *             must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            DimensionName: string | undefined;
            /**
                * <p>The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. If you
                *             want Amazon SES to use the message tags that you specify using an
                *                 <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the
                *                 <code>SendEmail</code>/<code>SendRawEmail</code> API, choose
                *             <code>messageTag</code>. If you want Amazon SES to use your own email headers, choose
                *                 <code>emailHeader</code>.</p>
                */
            DimensionValueSource: DimensionValueSource | string | undefined;
            /**
                * <p>The default value of the dimension that is published to Amazon CloudWatch if you do not provide
                *             the value of the dimension when you send an email. The default value must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 256 characters.</p>
                *             </li>
                *          </ul>
                */
            DefaultDimensionValue: string | undefined;
    }
    export namespace CloudWatchDimensionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchDimensionConfiguration) => any;
    }
    /**
        * <p>Contains information associated with an Amazon CloudWatch event destination to which email
        *             sending events are published.</p>
        *         <p>Event destinations, such as Amazon CloudWatch, are associated with configuration sets, which
        *             enable you to publish email sending events. For information about using configuration
        *             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface CloudWatchDestination {
            /**
                * <p>A list of dimensions upon which to categorize your emails when you publish email
                *             sending events to Amazon CloudWatch.</p>
                */
            DimensionConfigurations: CloudWatchDimensionConfiguration[] | undefined;
    }
    export namespace CloudWatchDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchDestination) => any;
    }
    /**
        * <p>The name of the configuration set.</p>
        *         <p>Configuration sets let you create groups of rules that you can apply to the emails you
        *             send using Amazon SES. For more information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/">Amazon SES Developer Guide</a>.</p>
        */
    export interface ConfigurationSet {
            /**
                * <p>The name of the configuration set. The name must meet the following
                *             requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes
                *                     (-).</p>
                *             </li>
                *             <li>
                *                 <p>Contain 64 characters or fewer.</p>
                *             </li>
                *          </ul>
                */
            Name: string | undefined;
    }
    export namespace ConfigurationSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationSet) => any;
    }
    /**
        * <p>Indicates that the configuration set could not be created because of a naming
        *             conflict.</p>
        */
    export class ConfigurationSetAlreadyExistsException extends __BaseException {
            readonly name: "ConfigurationSetAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the configuration set does not exist.</p>
                */
            ConfigurationSetName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConfigurationSetAlreadyExistsException, __BaseException>);
    }
    export enum ConfigurationSetAttribute {
            DELIVERY_OPTIONS = "deliveryOptions",
            EVENT_DESTINATIONS = "eventDestinations",
            REPUTATION_OPTIONS = "reputationOptions",
            TRACKING_OPTIONS = "trackingOptions"
    }
    /**
        * <p>Indicates that the configuration set does not exist.</p>
        */
    export class ConfigurationSetDoesNotExistException extends __BaseException {
            readonly name: "ConfigurationSetDoesNotExistException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the configuration set does not exist.</p>
                */
            ConfigurationSetName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConfigurationSetDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Indicates that email sending is disabled for the configuration set.</p>
        *         <p>You can enable or disable email sending for a configuration set using <a>UpdateConfigurationSetSendingEnabled</a>.</p>
        */
    export class ConfigurationSetSendingPausedException extends __BaseException {
            readonly name: "ConfigurationSetSendingPausedException";
            readonly $fault: "client";
            /**
                * <p>The name of the configuration set for which email sending is disabled.</p>
                */
            ConfigurationSetName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConfigurationSetSendingPausedException, __BaseException>);
    }
    /**
        * <p>Represents a request to create a configuration set. Configuration sets enable you to
        *             publish email sending events. For information about using configuration sets, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface CreateConfigurationSetRequest {
            /**
                * <p>A data structure that contains the name of the configuration set.</p>
                */
            ConfigurationSet: ConfigurationSet | undefined;
    }
    export namespace CreateConfigurationSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface CreateConfigurationSetResponse {
    }
    export namespace CreateConfigurationSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetResponse) => any;
    }
    /**
        * <p>Indicates that the configuration set is invalid. See the error message for
        *             details.</p>
        */
    export class InvalidConfigurationSetException extends __BaseException {
            readonly name: "InvalidConfigurationSetException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidConfigurationSetException, __BaseException>);
    }
    /**
        * <p>Contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event
        *             destination.</p>
        *         <p>Event destinations, such as Amazon Kinesis Firehose, are associated with configuration sets, which enable
        *             you to publish email sending events. For information about using configuration sets, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface KinesisFirehoseDestination {
            /**
                * <p>The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose
                *             stream.</p>
                */
            IAMRoleARN: string | undefined;
            /**
                * <p>The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.</p>
                */
            DeliveryStreamARN: string | undefined;
    }
    export namespace KinesisFirehoseDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KinesisFirehoseDestination) => any;
    }
    export enum EventType {
            BOUNCE = "bounce",
            CLICK = "click",
            COMPLAINT = "complaint",
            DELIVERY = "delivery",
            OPEN = "open",
            REJECT = "reject",
            RENDERING_FAILURE = "renderingFailure",
            SEND = "send"
    }
    /**
        * <p>Contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.</p>
        *         <p>Event destinations, such as Amazon SNS, are associated with configuration sets, which
        *             enable you to publish email sending events. For information about using configuration
        *             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SNSDestination {
            /**
                * <p>The ARN of the Amazon SNS topic that email sending events will be published to. An example
                *             of an Amazon SNS topic ARN is <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For
                *             more information about Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
                */
            TopicARN: string | undefined;
    }
    export namespace SNSDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNSDestination) => any;
    }
    /**
        * <p>Contains information about the event destination that the specified email sending
        *             events will be published to.</p>
        *         <note>
        *             <p>When you create or update an event destination, you must provide one, and only
        *                 one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p>
        *         </note>
        *         <p>Event destinations are associated with configuration sets, which enable you to publish
        *             email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about
        *             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface EventDestination {
            /**
                * <p>The name of the event destination. The name must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 64 characters.</p>
                *             </li>
                *          </ul>
                */
            Name: string | undefined;
            /**
                * <p>Sets whether Amazon SES publishes events to this destination when you send an email with
                *             the associated configuration set. Set to <code>true</code> to enable publishing to this
                *             destination; set to <code>false</code> to prevent publishing to this destination. The
                *             default value is <code>false</code>.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The type of email sending events to publish to the event destination.</p>
                */
            MatchingEventTypes: (EventType | string)[] | undefined;
            /**
                * <p>An object that contains the delivery stream ARN and the IAM role ARN associated with
                *             an Amazon Kinesis Firehose event destination.</p>
                */
            KinesisFirehoseDestination?: KinesisFirehoseDestination;
            /**
                * <p>An object that contains the names, default values, and sources of the dimensions
                *             associated with an Amazon CloudWatch event destination.</p>
                */
            CloudWatchDestination?: CloudWatchDestination;
            /**
                * <p>An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event
                *             destination.</p>
                */
            SNSDestination?: SNSDestination;
    }
    export namespace EventDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventDestination) => any;
    }
    /**
        * <p>Represents a request to create a configuration set event destination. A configuration
        *             set event destination, which can be either Amazon CloudWatch or Amazon Kinesis Firehose, describes an AWS service
        *             in which Amazon SES publishes the email sending events associated with a configuration set.
        *             For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface CreateConfigurationSetEventDestinationRequest {
            /**
                * <p>The name of the configuration set that the event destination should be associated
                *             with.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>An object that describes the AWS service that email sending event information will
                *             be published to.</p>
                */
            EventDestination: EventDestination | undefined;
    }
    export namespace CreateConfigurationSetEventDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetEventDestinationRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface CreateConfigurationSetEventDestinationResponse {
    }
    export namespace CreateConfigurationSetEventDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetEventDestinationResponse) => any;
    }
    /**
        * <p>Indicates that the event destination could not be created because of a naming
        *             conflict.</p>
        */
    export class EventDestinationAlreadyExistsException extends __BaseException {
            readonly name: "EventDestinationAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the configuration set does not exist.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>Indicates that the event destination does not exist.</p>
                */
            EventDestinationName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventDestinationAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Indicates that the Amazon CloudWatch destination is invalid. See the error message for
        *             details.</p>
        */
    export class InvalidCloudWatchDestinationException extends __BaseException {
            readonly name: "InvalidCloudWatchDestinationException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the configuration set does not exist.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>Indicates that the event destination does not exist.</p>
                */
            EventDestinationName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCloudWatchDestinationException, __BaseException>);
    }
    /**
        * <p>Indicates that the Amazon Kinesis Firehose destination is invalid. See the error
        *             message for details.</p>
        */
    export class InvalidFirehoseDestinationException extends __BaseException {
            readonly name: "InvalidFirehoseDestinationException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the configuration set does not exist.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>Indicates that the event destination does not exist.</p>
                */
            EventDestinationName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFirehoseDestinationException, __BaseException>);
    }
    /**
        * <p>Indicates that the Amazon Simple Notification Service (Amazon SNS) destination is
        *             invalid. See the error message for details.</p>
        */
    export class InvalidSNSDestinationException extends __BaseException {
            readonly name: "InvalidSNSDestinationException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the configuration set does not exist.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>Indicates that the event destination does not exist.</p>
                */
            EventDestinationName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSNSDestinationException, __BaseException>);
    }
    /**
        * <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This
        *             domain captures open and click events generated by Amazon SES emails.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring
        *                 Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES
        *                 Developer Guide</i>.</p>
        */
    export interface TrackingOptions {
            /**
                * <p>The custom subdomain that will be used to redirect email recipients to the Amazon SES
                *             event tracking domain.</p>
                */
            CustomRedirectDomain?: string;
    }
    export namespace TrackingOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrackingOptions) => any;
    }
    /**
        * <p>Represents a request to create an open and click tracking option object in a
        *             configuration set. </p>
        */
    export interface CreateConfigurationSetTrackingOptionsRequest {
            /**
                * <p>The name of the configuration set that the tracking options should be associated
                *             with.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This
                *             domain captures open and click events generated by Amazon SES emails.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring
                *                 Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES
                *                 Developer Guide</i>.</p>
                */
            TrackingOptions: TrackingOptions | undefined;
    }
    export namespace CreateConfigurationSetTrackingOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetTrackingOptionsRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface CreateConfigurationSetTrackingOptionsResponse {
    }
    export namespace CreateConfigurationSetTrackingOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationSetTrackingOptionsResponse) => any;
    }
    /**
        * <p>Indicates that the custom domain to be used for open and click tracking redirects is
        *             invalid. This error appears most often in the following situations:</p>
        *         <ul>
        *             <li>
        *                 <p>When the tracking domain you specified is not verified in Amazon SES.</p>
        *             </li>
        *             <li>
        *                 <p>When the tracking domain you specified is not a valid domain or
        *                     subdomain.</p>
        *             </li>
        *          </ul>
        */
    export class InvalidTrackingOptionsException extends __BaseException {
            readonly name: "InvalidTrackingOptionsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTrackingOptionsException, __BaseException>);
    }
    /**
        * <p>Indicates that the configuration set you specified already contains a TrackingOptions
        *             object.</p>
        */
    export class TrackingOptionsAlreadyExistsException extends __BaseException {
            readonly name: "TrackingOptionsAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Indicates that a TrackingOptions object already exists in the specified configuration
                *             set.</p>
                */
            ConfigurationSetName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TrackingOptionsAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Represents a request to create a custom verification email template.</p>
        */
    export interface CreateCustomVerificationEmailTemplateRequest {
            /**
                * <p>The name of the custom verification email template.</p>
                */
            TemplateName: string | undefined;
            /**
                * <p>The email address that the custom verification email is sent from.</p>
                */
            FromEmailAddress: string | undefined;
            /**
                * <p>The subject line of the custom verification email.</p>
                */
            TemplateSubject: string | undefined;
            /**
                * <p>The content of the custom verification email. The total size of the email must be less
                *             than 10 MB. The message body may contain HTML, with some limitations. For more
                *             information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES
                *                 Developer Guide</i>.</p>
                */
            TemplateContent: string | undefined;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is successfully verified.</p>
                */
            SuccessRedirectionURL: string | undefined;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is not successfully verified.</p>
                */
            FailureRedirectionURL: string | undefined;
    }
    export namespace CreateCustomVerificationEmailTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomVerificationEmailTemplateRequest) => any;
    }
    /**
        * <p>Indicates that custom verification email template provided content is invalid.</p>
        */
    export class CustomVerificationEmailInvalidContentException extends __BaseException {
            readonly name: "CustomVerificationEmailInvalidContentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomVerificationEmailInvalidContentException, __BaseException>);
    }
    /**
        * <p>Indicates that a custom verification email template with the name you specified
        *             already exists.</p>
        */
    export class CustomVerificationEmailTemplateAlreadyExistsException extends __BaseException {
            readonly name: "CustomVerificationEmailTemplateAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the provided custom verification email template with the specified
                *             template name already exists.</p>
                */
            CustomVerificationEmailTemplateName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomVerificationEmailTemplateAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Indicates that the sender address specified for a custom verification email is not
        *             verified, and is therefore not eligible to send the custom verification email. </p>
        */
    export class FromEmailAddressNotVerifiedException extends __BaseException {
            readonly name: "FromEmailAddressNotVerifiedException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the from email address associated with the custom verification email
                *             template is not verified.</p>
                */
            FromEmailAddress?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FromEmailAddressNotVerifiedException, __BaseException>);
    }
    export enum ReceiptFilterPolicy {
            Allow = "Allow",
            Block = "Block"
    }
    /**
        * <p>A receipt IP address filter enables you to specify whether to accept or reject mail
        *             originating from an IP address or range of IP addresses.</p>
        *         <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface ReceiptIpFilter {
            /**
                * <p>Indicates whether to block or allow incoming mail from the specified IP
                *             addresses.</p>
                */
            Policy: ReceiptFilterPolicy | string | undefined;
            /**
                * <p>A single IP address or a range of IP addresses that you want to block or allow,
                *             specified in Classless Inter-Domain Routing (CIDR) notation. An example of a single
                *             email address is 10.0.0.1. An example of a range of IP addresses is 10.0.0.1/24. For
                *             more information about CIDR notation, see <a href="https://tools.ietf.org/html/rfc2317">RFC 2317</a>.</p>
                */
            Cidr: string | undefined;
    }
    export namespace ReceiptIpFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReceiptIpFilter) => any;
    }
    /**
        * <p>A receipt IP address filter enables you to specify whether to accept or reject mail
        *             originating from an IP address or range of IP addresses.</p>
        *         <p>For information about setting up IP address filters, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-ip-filters.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface ReceiptFilter {
            /**
                * <p>The name of the IP address filter. The name must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Start and end with a letter or number.</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 64 characters.</p>
                *             </li>
                *          </ul>
                */
            Name: string | undefined;
            /**
                * <p>A structure that provides the IP addresses to block or allow, and whether to block or
                *             allow incoming mail from them.</p>
                */
            IpFilter: ReceiptIpFilter | undefined;
    }
    export namespace ReceiptFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReceiptFilter) => any;
    }
    /**
        * <p>Represents a request to create a new IP address filter. You use IP address filters
        *             when you receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface CreateReceiptFilterRequest {
            /**
                * <p>A data structure that describes the IP address filter to create, which consists of a
                *             name, an IP address range, and whether to allow or block mail from it.</p>
                */
            Filter: ReceiptFilter | undefined;
    }
    export namespace CreateReceiptFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReceiptFilterRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface CreateReceiptFilterResponse {
    }
    export namespace CreateReceiptFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReceiptFilterResponse) => any;
    }
    export type InvocationType = "Event" | "RequestResponse";
    /**
        * <p>When included in a receipt rule, this action calls an AWS Lambda function and,
        *             optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
        *         <p>To enable Amazon SES to call your AWS Lambda function or to publish to an Amazon SNS topic of
        *             another account, Amazon SES must have permission to access those resources. For information
        *             about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <p>For information about using AWS Lambda actions in receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface LambdaAction {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the Lambda action is
                *             taken. An example of an Amazon SNS topic ARN is
                *                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
                *             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
                */
            TopicArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Lambda function. An example of an AWS Lambda
                *             function ARN is <code>arn:aws:lambda:us-west-2:account-id:function:MyFunction</code>.
                *             For more information about AWS Lambda, see the <a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html">AWS Lambda Developer Guide</a>.</p>
                */
            FunctionArn: string | undefined;
            /**
                * <p>The invocation type of the AWS Lambda function. An invocation type of
                *                 <code>RequestResponse</code> means that the execution of the function will
                *             immediately result in a response, and a value of <code>Event</code> means that the
                *             function will be invoked asynchronously. The default value is <code>Event</code>. For
                *             information about AWS Lambda invocation types, see the <a href="https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html">AWS Lambda Developer Guide</a>.</p>
                *         <important>
                *             <p>There is a 30-second timeout on <code>RequestResponse</code> invocations. You
                *                 should use <code>Event</code> invocation in most cases. Use
                *                     <code>RequestResponse</code> only when you want to make a mail flow decision,
                *                 such as whether to stop the receipt rule or the receipt rule set.</p>
                *         </important>
                */
            InvocationType?: InvocationType | string;
    }
    export namespace LambdaAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaAction) => any;
    }
    /**
        * <p>When included in a receipt rule, this action saves the received message to an Amazon Simple Storage Service
        *             (Amazon S3) bucket and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
        *         <p>To enable Amazon SES to write emails to your Amazon S3 bucket, use an AWS KMS key to encrypt
        *             your emails, or publish to an Amazon SNS topic of another account, Amazon SES must have permission
        *             to access those resources. For information about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <note>
        *             <p>When you save your emails to an Amazon S3 bucket, the maximum email size (including
        *                 headers) is 30 MB. Emails larger than that will bounce.</p>
        *         </note>
        *         <p>For information about specifying Amazon S3 actions in receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-s3.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface S3Action {
            /**
                * <p>The ARN of the Amazon SNS topic to notify when the message is saved to the Amazon S3 bucket. An
                *             example of an Amazon SNS topic ARN is
                *             <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
                *             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
                */
            TopicArn?: string;
            /**
                * <p>The name of the Amazon S3 bucket that incoming email will be saved to.</p>
                */
            BucketName: string | undefined;
            /**
                * <p>The key prefix of the Amazon S3 bucket. The key prefix is similar to a directory name that
                *             enables you to store similar data under the same directory in a bucket.</p>
                */
            ObjectKeyPrefix?: string;
            /**
                * <p>The customer master key that Amazon SES should use to encrypt your emails before saving
                *             them to the Amazon S3 bucket. You can use the default master key or a custom master key you
                *             created in AWS KMS as follows:</p>
                *         <ul>
                *             <li>
                *                 <p>To use the default master key, provide an ARN in the form of
                *                         <code>arn:aws:kms:REGION:ACCOUNT-ID-WITHOUT-HYPHENS:alias/aws/ses</code>.
                *                     For example, if your AWS account ID is 123456789012 and you want to use the
                *                     default master key in the US West (Oregon) region, the ARN of the default master
                *                     key would be <code>arn:aws:kms:us-west-2:123456789012:alias/aws/ses</code>. If
                *                     you use the default master key, you don't need to perform any extra steps to
                *                     give Amazon SES permission to use the key.</p>
                *             </li>
                *             <li>
                *                 <p>To use a custom master key you created in AWS KMS, provide the ARN of the
                *                     master key and ensure that you add a statement to your key's policy to give
                *                     Amazon SES permission to use it. For more information about giving permissions, see
                *                     the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
                *                         Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                *         <p>For more information about key policies, see the <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html">AWS KMS Developer Guide</a>. If
                *             you do not specify a master key, Amazon SES will not encrypt your emails.</p>
                *         <important>
                *             <p>Your mail is encrypted by Amazon SES using the Amazon S3 encryption client before the mail
                *                 is submitted to Amazon S3 for storage. It is not encrypted using Amazon S3 server-side
                *                 encryption. This means that you must use the Amazon S3 encryption client to decrypt the
                *                 email after retrieving it from Amazon S3, as the service has no access to use your AWS
                *                 KMS keys for decryption. This encryption client is currently available with the
                *                     <a href="http://aws.amazon.com/sdk-for-java/">AWS SDK for Java</a> and <a href="http://aws.amazon.com/sdk-for-ruby/">AWS SDK for Ruby</a> only. For more
                *                 information about client-side encryption using AWS KMS master keys, see the <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingClientSideEncryption.html">Amazon S3 Developer Guide</a>.</p>
                *         </important>
                */
            KmsKeyArn?: string;
    }
    export namespace S3Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Action) => any;
    }
    export enum SNSActionEncoding {
            Base64 = "Base64",
            UTF8 = "UTF-8"
    }
    /**
        * <p>When included in a receipt rule, this action publishes a notification to Amazon Simple Notification Service
        *             (Amazon SNS). This action includes a complete copy of the email content in the Amazon SNS
        *             notifications. Amazon SNS notifications for all other actions simply provide information
        *             about the email. They do not include the email content itself.</p>
        *         <p>If you own the Amazon SNS topic, you don't need to do anything to give Amazon SES permission to
        *             publish emails to it. However, if you don't own the Amazon SNS topic, you need to attach a
        *             policy to the topic to give Amazon SES permissions to access it. For information about giving
        *             permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer
        *                 Guide</a>.</p>
        *         <important>
        *             <p>You can only publish emails that are 150 KB or less (including the header) to
        *                 Amazon SNS. Larger emails will bounce. If you anticipate emails larger than 150 KB, use
        *                 the S3 action instead.</p>
        *         </important>
        *         <p>For information about using a receipt rule to publish an Amazon SNS notification, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-sns.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SNSAction {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify. An example of an Amazon SNS
                *             topic ARN is <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more
                *             information about Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
                */
            TopicArn: string | undefined;
            /**
                * <p>The encoding to use for the email within the Amazon SNS notification. UTF-8 is easier to
                *             use, but may not preserve all special characters when a message was encoded with a
                *             different encoding format. Base64 preserves all special characters. The default value is
                *             UTF-8.</p>
                */
            Encoding?: SNSActionEncoding | string;
    }
    export namespace SNSAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNSAction) => any;
    }
    export enum StopScope {
            RULE_SET = "RuleSet"
    }
    /**
        * <p>When included in a receipt rule, this action terminates the evaluation of the receipt
        *             rule set and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
        *         <p>For information about setting a stop action in a receipt rule, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-stop.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface StopAction {
            /**
                * <p>The scope of the StopAction. The only acceptable value is <code>RuleSet</code>.</p>
                */
            Scope: StopScope | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the stop action is
                *             taken. An example of an Amazon SNS topic ARN is
                *                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
                *             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
                */
            TopicArn?: string;
    }
    export namespace StopAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAction) => any;
    }
    /**
        * <p>When included in a receipt rule, this action calls Amazon WorkMail and, optionally,
        *             publishes a notification to Amazon Simple Notification Service (Amazon SNS). You will typically not use this action
        *             directly because Amazon WorkMail adds the rule automatically during its setup
        *             procedure.</p>
        *         <p>For information using a receipt rule to call Amazon WorkMail, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-workmail.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface WorkmailAction {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic to notify when the WorkMail action
                *             is called. An example of an Amazon SNS topic ARN is
                *                 <code>arn:aws:sns:us-west-2:123456789012:MyTopic</code>. For more information about
                *             Amazon SNS topics, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">Amazon SNS Developer Guide</a>.</p>
                */
            TopicArn?: string;
            /**
                * <p>The ARN of the Amazon WorkMail organization. An example of an Amazon WorkMail
                *             organization ARN is
                *                 <code>arn:aws:workmail:us-west-2:123456789012:organization/m-68755160c4cb4e29a2b2f8fb58f359d7</code>.
                *             For information about Amazon WorkMail organizations, see the <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/organizations_overview.html">Amazon WorkMail
                *                 Administrator Guide</a>.</p>
                */
            OrganizationArn: string | undefined;
    }
    export namespace WorkmailAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkmailAction) => any;
    }
    /**
        * <p>An action that Amazon SES can take when it receives an email on behalf of one or more email
        *             addresses or domains that you own. An instance of this data type can represent only one
        *             action.</p>
        *         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface ReceiptAction {
            /**
                * <p>Saves the received message to an Amazon Simple Storage Service (Amazon S3) bucket and, optionally, publishes a
                *             notification to Amazon SNS.</p>
                */
            S3Action?: S3Action;
            /**
                * <p>Rejects the received email by returning a bounce response to the sender and,
                *             optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).</p>
                */
            BounceAction?: BounceAction;
            /**
                * <p>Calls Amazon WorkMail and, optionally, publishes a notification to Amazon
                *             Amazon SNS.</p>
                */
            WorkmailAction?: WorkmailAction;
            /**
                * <p>Calls an AWS Lambda function, and optionally, publishes a notification to Amazon SNS.</p>
                */
            LambdaAction?: LambdaAction;
            /**
                * <p>Terminates the evaluation of the receipt rule set and optionally publishes a
                *             notification to Amazon SNS.</p>
                */
            StopAction?: StopAction;
            /**
                * <p>Adds a header to the received email.</p>
                */
            AddHeaderAction?: AddHeaderAction;
            /**
                * <p>Publishes the email content within a notification to Amazon SNS.</p>
                */
            SNSAction?: SNSAction;
    }
    export namespace ReceiptAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReceiptAction) => any;
    }
    export enum TlsPolicy {
            Optional = "Optional",
            Require = "Require"
    }
    /**
        * <p>Receipt rules enable you to specify which actions Amazon SES should take when it receives
        *             mail on behalf of one or more email addresses or domains that you own.</p>
        *         <p>Each receipt rule defines a set of email addresses or domains that it applies to. If
        *             the email addresses or domains match at least one recipient address of the message,
        *             Amazon SES executes all of the receipt rule's actions on the message.</p>
        *         <p>For information about setting up receipt rules, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface ReceiptRule {
            /**
                * <p>The name of the receipt rule. The name must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Start and end with a letter or number.</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 64 characters.</p>
                *             </li>
                *          </ul>
                */
            Name: string | undefined;
            /**
                * <p>If <code>true</code>, the receipt rule is active. The default value is
                *                 <code>false</code>.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Specifies whether Amazon SES should require that incoming email is delivered over a
                *             connection encrypted with Transport Layer Security (TLS). If this parameter is set to
                *                 <code>Require</code>, Amazon SES will bounce emails that are not received over TLS. The
                *             default is <code>Optional</code>.</p>
                */
            TlsPolicy?: TlsPolicy | string;
            /**
                * <p>The recipient domains and email addresses that the receipt rule applies to. If this
                *             field is not specified, this rule will match all recipients under all verified
                *             domains.</p>
                */
            Recipients?: string[];
            /**
                * <p>An ordered list of actions to perform on messages that match at least one of the
                *             recipient email addresses or domains specified in the receipt rule.</p>
                */
            Actions?: ReceiptAction[];
            /**
                * <p>If <code>true</code>, then messages that this receipt rule applies to are scanned for
                *             spam and viruses. The default value is <code>false</code>.</p>
                */
            ScanEnabled?: boolean;
    }
    export namespace ReceiptRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReceiptRule) => any;
    }
    /**
        * <p>Represents a request to create a receipt rule. You use receipt rules to receive email
        *             with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface CreateReceiptRuleRequest {
            /**
                * <p>The name of the rule set that the receipt rule will be added to.</p>
                */
            RuleSetName: string | undefined;
            /**
                * <p>The name of an existing rule after which the new rule will be placed. If this
                *             parameter is null, the new rule will be inserted at the beginning of the rule
                *             list.</p>
                */
            After?: string;
            /**
                * <p>A data structure that contains the specified rule's name, actions, recipients,
                *             domains, enabled status, scan status, and TLS policy.</p>
                */
            Rule: ReceiptRule | undefined;
    }
    export namespace CreateReceiptRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReceiptRuleRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface CreateReceiptRuleResponse {
    }
    export namespace CreateReceiptRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReceiptRuleResponse) => any;
    }
    /**
        * <p>Indicates that the provided AWS Lambda function is invalid, or that Amazon SES could
        *             not execute the provided function, possibly due to permissions issues. For information
        *             about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export class InvalidLambdaFunctionException extends __BaseException {
            readonly name: "InvalidLambdaFunctionException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the ARN of the function was not found.</p>
                */
            FunctionArn?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidLambdaFunctionException, __BaseException>);
    }
    /**
        * <p>Indicates that the provided Amazon S3 bucket or AWS KMS encryption key is invalid, or
        *             that Amazon SES could not publish to the bucket, possibly due to permissions issues. For
        *             information about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export class InvalidS3ConfigurationException extends __BaseException {
            readonly name: "InvalidS3ConfigurationException";
            readonly $fault: "client";
            /**
                * <p>Indicated that the S3 Bucket was not found.</p>
                */
            Bucket?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3ConfigurationException, __BaseException>);
    }
    /**
        * <p>Indicates that the provided Amazon SNS topic is invalid, or that Amazon SES could not
        *             publish to the topic, possibly due to permissions issues. For information about giving
        *             permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export class InvalidSnsTopicException extends __BaseException {
            readonly name: "InvalidSnsTopicException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the topic does not exist.</p>
                */
            Topic?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSnsTopicException, __BaseException>);
    }
    /**
        * <p>Indicates that the provided receipt rule does not exist.</p>
        */
    export class RuleDoesNotExistException extends __BaseException {
            readonly name: "RuleDoesNotExistException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the named receipt rule does not exist.</p>
                */
            Name?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RuleDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Represents a request to create an empty receipt rule set. You use receipt rule sets to
        *             receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface CreateReceiptRuleSetRequest {
            /**
                * <p>The name of the rule set to create. The name must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Start and end with a letter or number.</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 64 characters.</p>
                *             </li>
                *          </ul>
                */
            RuleSetName: string | undefined;
    }
    export namespace CreateReceiptRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReceiptRuleSetRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface CreateReceiptRuleSetResponse {
    }
    export namespace CreateReceiptRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReceiptRuleSetResponse) => any;
    }
    /**
        * <p>The content of the email, composed of a subject line, an HTML part, and a text-only
        *             part.</p>
        */
    export interface Template {
            /**
                * <p>The name of the template. You will refer to this name when you send email using the
                *                 <code>SendTemplatedEmail</code> or <code>SendBulkTemplatedEmail</code>
                *             operations.</p>
                */
            TemplateName: string | undefined;
            /**
                * <p>The subject line of the email.</p>
                */
            SubjectPart?: string;
            /**
                * <p>The email body that will be visible to recipients whose email clients do not display
                *             HTML.</p>
                */
            TextPart?: string;
            /**
                * <p>The HTML body of the email.</p>
                */
            HtmlPart?: string;
    }
    export namespace Template {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Template) => any;
    }
    /**
        * <p>Represents a request to create an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface CreateTemplateRequest {
            /**
                * <p>The content of the email, composed of a subject line, an HTML part, and a text-only
                *             part.</p>
                */
            Template: Template | undefined;
    }
    export namespace CreateTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTemplateRequest) => any;
    }
    export interface CreateTemplateResponse {
    }
    export namespace CreateTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTemplateResponse) => any;
    }
    /**
        * <p>Indicates that the template that you specified could not be rendered. This issue may
        *             occur when a template refers to a partial that does not exist.</p>
        */
    export class InvalidTemplateException extends __BaseException {
            readonly name: "InvalidTemplateException";
            readonly $fault: "client";
            TemplateName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTemplateException, __BaseException>);
    }
    export enum CustomMailFromStatus {
            Failed = "Failed",
            Pending = "Pending",
            Success = "Success",
            TemporaryFailure = "TemporaryFailure"
    }
    /**
        * <p>Contains information about a custom verification email template.</p>
        */
    export interface CustomVerificationEmailTemplate {
            /**
                * <p>The name of the custom verification email template.</p>
                */
            TemplateName?: string;
            /**
                * <p>The email address that the custom verification email is sent from.</p>
                */
            FromEmailAddress?: string;
            /**
                * <p>The subject line of the custom verification email.</p>
                */
            TemplateSubject?: string;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is successfully verified.</p>
                */
            SuccessRedirectionURL?: string;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is not successfully verified.</p>
                */
            FailureRedirectionURL?: string;
    }
    export namespace CustomVerificationEmailTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomVerificationEmailTemplate) => any;
    }
    /**
        * <p>Indicates that a custom verification email template with the name you specified does
        *             not exist.</p>
        */
    export class CustomVerificationEmailTemplateDoesNotExistException extends __BaseException {
            readonly name: "CustomVerificationEmailTemplateDoesNotExistException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the provided custom verification email template does not exist.</p>
                */
            CustomVerificationEmailTemplateName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomVerificationEmailTemplateDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Represents a request to delete a configuration set. Configuration sets enable you to
        *             publish email sending events. For information about using configuration sets, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DeleteConfigurationSetRequest {
            /**
                * <p>The name of the configuration set to delete.</p>
                */
            ConfigurationSetName: string | undefined;
    }
    export namespace DeleteConfigurationSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteConfigurationSetResponse {
    }
    export namespace DeleteConfigurationSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetResponse) => any;
    }
    /**
        * <p>Represents a request to delete a configuration set event destination. Configuration
        *             set event destinations are associated with configuration sets, which enable you to
        *             publish email sending events. For information about using configuration sets, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DeleteConfigurationSetEventDestinationRequest {
            /**
                * <p>The name of the configuration set from which to delete the event destination.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>The name of the event destination to delete.</p>
                */
            EventDestinationName: string | undefined;
    }
    export namespace DeleteConfigurationSetEventDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetEventDestinationRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteConfigurationSetEventDestinationResponse {
    }
    export namespace DeleteConfigurationSetEventDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetEventDestinationResponse) => any;
    }
    /**
        * <p>Indicates that the event destination does not exist.</p>
        */
    export class EventDestinationDoesNotExistException extends __BaseException {
            readonly name: "EventDestinationDoesNotExistException";
            readonly $fault: "client";
            /**
                * <p>Indicates that the configuration set does not exist.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>Indicates that the event destination does not exist.</p>
                */
            EventDestinationName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventDestinationDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Represents a request to delete open and click tracking options in a configuration set.
        *         </p>
        */
    export interface DeleteConfigurationSetTrackingOptionsRequest {
            /**
                * <p>The name of the configuration set from which you want to delete the tracking
                *             options.</p>
                */
            ConfigurationSetName: string | undefined;
    }
    export namespace DeleteConfigurationSetTrackingOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetTrackingOptionsRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteConfigurationSetTrackingOptionsResponse {
    }
    export namespace DeleteConfigurationSetTrackingOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationSetTrackingOptionsResponse) => any;
    }
    /**
        * <p>Indicates that the TrackingOptions object you specified does not exist.</p>
        */
    export class TrackingOptionsDoesNotExistException extends __BaseException {
            readonly name: "TrackingOptionsDoesNotExistException";
            readonly $fault: "client";
            /**
                * <p>Indicates that a TrackingOptions object does not exist in the specified configuration
                *             set.</p>
                */
            ConfigurationSetName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TrackingOptionsDoesNotExistException, __BaseException>);
    }
    /**
        * <p>Represents a request to delete an existing custom verification email template.</p>
        */
    export interface DeleteCustomVerificationEmailTemplateRequest {
            /**
                * <p>The name of the custom verification email template that you want to delete.</p>
                */
            TemplateName: string | undefined;
    }
    export namespace DeleteCustomVerificationEmailTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomVerificationEmailTemplateRequest) => any;
    }
    /**
        * <p>Represents a request to delete one of your Amazon SES identities (an email address or
        *             domain).</p>
        */
    export interface DeleteIdentityRequest {
            /**
                * <p>The identity to be removed from the list of identities for the AWS Account.</p>
                */
            Identity: string | undefined;
    }
    export namespace DeleteIdentityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentityRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteIdentityResponse {
    }
    export namespace DeleteIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentityResponse) => any;
    }
    /**
        * <p>Represents a request to delete a sending authorization policy for an identity. Sending
        *             authorization is an Amazon SES feature that enables you to authorize other senders to use
        *             your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DeleteIdentityPolicyRequest {
            /**
                * <p>The identity that is associated with the policy that you want to delete. You can
                *             specify the identity by using its name or by using its Amazon Resource Name (ARN).
                *             Examples: <code>user@example.com</code>, <code>example.com</code>,
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
                *         <p>To successfully call this API, you must own the identity.</p>
                */
            Identity: string | undefined;
            /**
                * <p>The name of the policy to be deleted.</p>
                */
            PolicyName: string | undefined;
    }
    export namespace DeleteIdentityPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentityPolicyRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteIdentityPolicyResponse {
    }
    export namespace DeleteIdentityPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIdentityPolicyResponse) => any;
    }
    /**
        * <p>Represents a request to delete an IP address filter. You use IP address filters when
        *             you receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DeleteReceiptFilterRequest {
            /**
                * <p>The name of the IP address filter to delete.</p>
                */
            FilterName: string | undefined;
    }
    export namespace DeleteReceiptFilterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReceiptFilterRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteReceiptFilterResponse {
    }
    export namespace DeleteReceiptFilterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReceiptFilterResponse) => any;
    }
    /**
        * <p>Represents a request to delete a receipt rule. You use receipt rules to receive email
        *             with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DeleteReceiptRuleRequest {
            /**
                * <p>The name of the receipt rule set that contains the receipt rule to delete.</p>
                */
            RuleSetName: string | undefined;
            /**
                * <p>The name of the receipt rule to delete.</p>
                */
            RuleName: string | undefined;
    }
    export namespace DeleteReceiptRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReceiptRuleRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteReceiptRuleResponse {
    }
    export namespace DeleteReceiptRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReceiptRuleResponse) => any;
    }
    /**
        * <p>Represents a request to delete a receipt rule set and all of the receipt rules it
        *             contains. You use receipt rule sets to receive email with Amazon SES. For more information,
        *             see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DeleteReceiptRuleSetRequest {
            /**
                * <p>The name of the receipt rule set to delete.</p>
                */
            RuleSetName: string | undefined;
    }
    export namespace DeleteReceiptRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReceiptRuleSetRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface DeleteReceiptRuleSetResponse {
    }
    export namespace DeleteReceiptRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReceiptRuleSetResponse) => any;
    }
    /**
        * <p>Represents a request to delete an email template. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DeleteTemplateRequest {
            /**
                * <p>The name of the template to be deleted.</p>
                */
            TemplateName: string | undefined;
    }
    export namespace DeleteTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTemplateRequest) => any;
    }
    export interface DeleteTemplateResponse {
    }
    export namespace DeleteTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTemplateResponse) => any;
    }
    /**
        * <p>Represents a request to delete an email address from the list of email addresses you
        *             have attempted to verify under your AWS account.</p>
        */
    export interface DeleteVerifiedEmailAddressRequest {
            /**
                * <p>An email address to be removed from the list of verified addresses.</p>
                */
            EmailAddress: string | undefined;
    }
    export namespace DeleteVerifiedEmailAddressRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVerifiedEmailAddressRequest) => any;
    }
    /**
        * <p>Specifies whether messages that use the configuration set are required to use
        *             Transport Layer Security (TLS).</p>
        */
    export interface DeliveryOptions {
            /**
                * <p>Specifies whether messages that use the configuration set are required to use
                *             Transport Layer Security (TLS). If the value is <code>Require</code>, messages are only
                *             delivered if a TLS connection can be established. If the value is <code>Optional</code>,
                *             messages can be delivered in plain text if a TLS connection can't be established.</p>
                */
            TlsPolicy?: TlsPolicy | string;
    }
    export namespace DeliveryOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeliveryOptions) => any;
    }
    /**
        * <p>Represents a request to return the metadata and receipt rules for the receipt rule set
        *             that is currently active. You use receipt rule sets to receive email with Amazon SES. For
        *             more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DescribeActiveReceiptRuleSetRequest {
    }
    export namespace DescribeActiveReceiptRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActiveReceiptRuleSetRequest) => any;
    }
    /**
        * <p>Information about a receipt rule set.</p>
        *         <p>A receipt rule set is a collection of rules that specify what Amazon SES should do with
        *             mail it receives on behalf of your account's verified domains.</p>
        *         <p>For information about setting up receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rule-set.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface ReceiptRuleSetMetadata {
            /**
                * <p>The name of the receipt rule set. The name must:</p>
                *         <ul>
                *             <li>
                *                 <p>This value can only contain ASCII letters (a-z, A-Z), numbers (0-9),
                *                     underscores (_), or dashes (-).</p>
                *             </li>
                *             <li>
                *                 <p>Start and end with a letter or number.</p>
                *             </li>
                *             <li>
                *                 <p>Contain less than 64 characters.</p>
                *             </li>
                *          </ul>
                */
            Name?: string;
            /**
                * <p>The date and time the receipt rule set was created.</p>
                */
            CreatedTimestamp?: Date;
    }
    export namespace ReceiptRuleSetMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReceiptRuleSetMetadata) => any;
    }
    /**
        * <p>Represents the metadata and receipt rules for the receipt rule set that is currently
        *             active.</p>
        */
    export interface DescribeActiveReceiptRuleSetResponse {
            /**
                * <p>The metadata for the currently active receipt rule set. The metadata consists of the
                *             rule set name and a timestamp of when the rule set was created.</p>
                */
            Metadata?: ReceiptRuleSetMetadata;
            /**
                * <p>The receipt rules that belong to the active rule set.</p>
                */
            Rules?: ReceiptRule[];
    }
    export namespace DescribeActiveReceiptRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActiveReceiptRuleSetResponse) => any;
    }
    /**
        * <p>Represents a request to return the details of a configuration set. Configuration sets
        *             enable you to publish email sending events. For information about using configuration
        *             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DescribeConfigurationSetRequest {
            /**
                * <p>The name of the configuration set to describe.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>A list of configuration set attributes to return.</p>
                */
            ConfigurationSetAttributeNames?: (ConfigurationSetAttribute | string)[];
    }
    export namespace DescribeConfigurationSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationSetRequest) => any;
    }
    /**
        * <p>Contains information about the reputation settings for a configuration set.</p>
        */
    export interface ReputationOptions {
            /**
                * <p>Describes whether email sending is enabled or disabled for the configuration set. If
                *             the value is <code>true</code>, then Amazon SES will send emails that use the configuration
                *             set. If the value is <code>false</code>, Amazon SES will not send emails that use the
                *             configuration set. The default value is <code>true</code>. You can change this setting
                *             using <a>UpdateConfigurationSetSendingEnabled</a>.</p>
                */
            SendingEnabled?: boolean;
            /**
                * <p>Describes whether or not Amazon SES publishes reputation metrics for the configuration set,
                *             such as bounce and complaint rates, to Amazon CloudWatch.</p>
                *         <p>If the value is <code>true</code>, reputation metrics are published. If the value is
                *                 <code>false</code>, reputation metrics are not published. The default value is
                *                 <code>false</code>.</p>
                */
            ReputationMetricsEnabled?: boolean;
            /**
                * <p>The date and time at which the reputation metrics for the configuration set were last
                *             reset. Resetting these metrics is known as a <i>fresh start</i>.</p>
                *         <p>When you disable email sending for a configuration set using <a>UpdateConfigurationSetSendingEnabled</a> and later re-enable it, the
                *             reputation metrics for the configuration set (but not for the entire Amazon SES account) are
                *             reset.</p>
                *         <p>If email sending for the configuration set has never been disabled and later
                *             re-enabled, the value of this attribute is <code>null</code>.</p>
                */
            LastFreshStart?: Date;
    }
    export namespace ReputationOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReputationOptions) => any;
    }
    /**
        * <p>Represents the details of a configuration set. Configuration sets enable you to
        *             publish email sending events. For information about using configuration sets, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DescribeConfigurationSetResponse {
            /**
                * <p>The configuration set object associated with the specified configuration set.</p>
                */
            ConfigurationSet?: ConfigurationSet;
            /**
                * <p>A list of event destinations associated with the configuration set. </p>
                */
            EventDestinations?: EventDestination[];
            /**
                * <p>The name of the custom open and click tracking domain associated with the
                *             configuration set.</p>
                */
            TrackingOptions?: TrackingOptions;
            /**
                * <p>Specifies whether messages that use the configuration set are required to use
                *             Transport Layer Security (TLS).</p>
                */
            DeliveryOptions?: DeliveryOptions;
            /**
                * <p>An object that represents the reputation settings for the configuration set. </p>
                */
            ReputationOptions?: ReputationOptions;
    }
    export namespace DescribeConfigurationSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationSetResponse) => any;
    }
    /**
        * <p>Represents a request to return the details of a receipt rule. You use receipt rules to
        *             receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface DescribeReceiptRuleRequest {
            /**
                * <p>The name of the receipt rule set that the receipt rule belongs to.</p>
                */
            RuleSetName: string | undefined;
            /**
                * <p>The name of the receipt rule.</p>
                */
            RuleName: string | undefined;
    }
    export namespace DescribeReceiptRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReceiptRuleRequest) => any;
    }
    /**
        * <p>Represents the details of a receipt rule.</p>
        */
    export interface DescribeReceiptRuleResponse {
            /**
                * <p>A data structure that contains the specified receipt rule's name, actions, recipients,
                *             domains, enabled status, scan status, and Transport Layer Security (TLS) policy.</p>
                */
            Rule?: ReceiptRule;
    }
    export namespace DescribeReceiptRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReceiptRuleResponse) => any;
    }
    /**
        * <p>Represents a request to return the details of a receipt rule set. You use receipt rule
        *             sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface DescribeReceiptRuleSetRequest {
            /**
                * <p>The name of the receipt rule set to describe.</p>
                */
            RuleSetName: string | undefined;
    }
    export namespace DescribeReceiptRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReceiptRuleSetRequest) => any;
    }
    /**
        * <p>Represents the details of the specified receipt rule set.</p>
        */
    export interface DescribeReceiptRuleSetResponse {
            /**
                * <p>The metadata for the receipt rule set, which consists of the rule set name and the
                *             timestamp of when the rule set was created.</p>
                */
            Metadata?: ReceiptRuleSetMetadata;
            /**
                * <p>A list of the receipt rules that belong to the specified receipt rule set.</p>
                */
            Rules?: ReceiptRule[];
    }
    export namespace DescribeReceiptRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReceiptRuleSetResponse) => any;
    }
    export type VerificationStatus = "Failed" | "NotStarted" | "Pending" | "Success" | "TemporaryFailure";
    /**
        * <p>Represents the DKIM attributes of a verified email address or a domain.</p>
        */
    export interface IdentityDkimAttributes {
            /**
                * <p>Is true if DKIM signing is enabled for email sent from the identity. It's false
                *             otherwise. The default value is true.</p>
                */
            DkimEnabled: boolean | undefined;
            /**
                * <p>Describes whether Amazon SES has successfully verified the DKIM DNS records (tokens)
                *             published in the domain name's DNS. (This only applies to domain identities, not email
                *             address identities.)</p>
                */
            DkimVerificationStatus: VerificationStatus | string | undefined;
            /**
                * <p>A set of character strings that represent the domain's identity. Using these tokens,
                *             you need to create DNS CNAME records that point to DKIM public keys that are hosted by
                *             Amazon SES. Amazon Web Services eventually detects that you've updated your DNS records. This detection
                *             process might take up to 72 hours. After successful detection, Amazon SES is able to
                *             DKIM-sign email originating from that domain. (This only applies to domain identities,
                *             not email address identities.)</p>
                *         <p>For more information about creating DNS records using DKIM tokens, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            DkimTokens?: string[];
    }
    export namespace IdentityDkimAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityDkimAttributes) => any;
    }
    /**
        * <p>Represents a request to return the email sending status for your Amazon SES account in the
        *             current AWS Region.</p>
        */
    export interface GetAccountSendingEnabledResponse {
            /**
                * <p>Describes whether email sending is enabled or disabled for your Amazon SES account in the
                *             current AWS Region.</p>
                */
            Enabled?: boolean;
    }
    export namespace GetAccountSendingEnabledResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountSendingEnabledResponse) => any;
    }
    /**
        * <p>Represents a request to retrieve an existing custom verification email
        *             template.</p>
        */
    export interface GetCustomVerificationEmailTemplateRequest {
            /**
                * <p>The name of the custom verification email template that you want to retrieve.</p>
                */
            TemplateName: string | undefined;
    }
    export namespace GetCustomVerificationEmailTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomVerificationEmailTemplateRequest) => any;
    }
    /**
        * <p>The content of the custom verification email template.</p>
        */
    export interface GetCustomVerificationEmailTemplateResponse {
            /**
                * <p>The name of the custom verification email template.</p>
                */
            TemplateName?: string;
            /**
                * <p>The email address that the custom verification email is sent from.</p>
                */
            FromEmailAddress?: string;
            /**
                * <p>The subject line of the custom verification email.</p>
                */
            TemplateSubject?: string;
            /**
                * <p>The content of the custom verification email.</p>
                */
            TemplateContent?: string;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is successfully verified.</p>
                */
            SuccessRedirectionURL?: string;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is not successfully verified.</p>
                */
            FailureRedirectionURL?: string;
    }
    export namespace GetCustomVerificationEmailTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCustomVerificationEmailTemplateResponse) => any;
    }
    /**
        * <p>Represents a request for the status of Amazon SES Easy DKIM signing for an identity. For
        *             domain identities, this request also returns the DKIM tokens that are required for Easy
        *             DKIM signing, and whether Amazon SES successfully verified that these tokens were published.
        *             For more information about Easy DKIM, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface GetIdentityDkimAttributesRequest {
            /**
                * <p>A list of one or more verified identities - email addresses, domains, or both.</p>
                */
            Identities: string[] | undefined;
    }
    export namespace GetIdentityDkimAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityDkimAttributesRequest) => any;
    }
    /**
        * <p>Represents the status of Amazon SES Easy DKIM signing for an identity. For domain
        *             identities, this response also contains the DKIM tokens that are required for Easy DKIM
        *             signing, and whether Amazon SES successfully verified that these tokens were
        *             published.</p>
        */
    export interface GetIdentityDkimAttributesResponse {
            /**
                * <p>The DKIM attributes for an email address or a domain.</p>
                */
            DkimAttributes: Record<string, IdentityDkimAttributes> | undefined;
    }
    export namespace GetIdentityDkimAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityDkimAttributesResponse) => any;
    }
    /**
        * <p>Represents a request to return the Amazon SES custom MAIL FROM attributes for a list of
        *             identities. For information about using a custom MAIL FROM domain, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface GetIdentityMailFromDomainAttributesRequest {
            /**
                * <p>A list of one or more identities.</p>
                */
            Identities: string[] | undefined;
    }
    export namespace GetIdentityMailFromDomainAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityMailFromDomainAttributesRequest) => any;
    }
    /**
        * <p>Represents the custom MAIL FROM domain attributes of a verified identity (email
        *             address or domain).</p>
        */
    export interface IdentityMailFromDomainAttributes {
            /**
                * <p>The custom MAIL FROM domain that the identity is configured to use.</p>
                */
            MailFromDomain: string | undefined;
            /**
                * <p>The state that indicates whether Amazon SES has successfully read the MX record required
                *             for custom MAIL FROM domain setup. If the state is <code>Success</code>, Amazon SES uses the
                *             specified custom MAIL FROM domain when the verified identity sends an email. All other
                *             states indicate that Amazon SES takes the action described by
                *                 <code>BehaviorOnMXFailure</code>.</p>
                */
            MailFromDomainStatus: CustomMailFromStatus | string | undefined;
            /**
                * <p>The action that Amazon SES takes if it cannot successfully read the required MX record when
                *             you send an email. A value of <code>UseDefaultValue</code> indicates that if Amazon SES
                *             cannot read the required MX record, it uses amazonses.com (or a subdomain of that) as
                *             the MAIL FROM domain. A value of <code>RejectMessage</code> indicates that if Amazon SES
                *             cannot read the required MX record, Amazon SES returns a
                *                 <code>MailFromDomainNotVerified</code> error and does not send the email.</p>
                *         <p>The custom MAIL FROM setup states that result in this behavior are
                *                 <code>Pending</code>, <code>Failed</code>, and <code>TemporaryFailure</code>.</p>
                */
            BehaviorOnMXFailure: BehaviorOnMXFailure | string | undefined;
    }
    export namespace IdentityMailFromDomainAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityMailFromDomainAttributes) => any;
    }
    /**
        * <p>Represents the custom MAIL FROM attributes for a list of identities.</p>
        */
    export interface GetIdentityMailFromDomainAttributesResponse {
            /**
                * <p>A map of identities to custom MAIL FROM attributes.</p>
                */
            MailFromDomainAttributes: Record<string, IdentityMailFromDomainAttributes> | undefined;
    }
    export namespace GetIdentityMailFromDomainAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityMailFromDomainAttributesResponse) => any;
    }
    /**
        * <p>Represents a request to return the notification attributes for a list of identities
        *             you verified with Amazon SES. For information about Amazon SES notifications, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface GetIdentityNotificationAttributesRequest {
            /**
                * <p>A list of one or more identities. You can specify an identity by using its name or by
                *             using its Amazon Resource Name (ARN). Examples: <code>user@example.com</code>,
                *                 <code>example.com</code>,
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
                */
            Identities: string[] | undefined;
    }
    export namespace GetIdentityNotificationAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityNotificationAttributesRequest) => any;
    }
    /**
        * <p>Represents the notification attributes of an identity, including whether an identity
        *             has Amazon Simple Notification Service (Amazon SNS) topics set for bounce, complaint, and/or delivery notifications,
        *             and whether feedback forwarding is enabled for bounce and complaint
        *             notifications.</p>
        */
    export interface IdentityNotificationAttributes {
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish bounce
                *             notifications.</p>
                */
            BounceTopic: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish complaint
                *             notifications.</p>
                */
            ComplaintTopic: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES will publish delivery
                *             notifications.</p>
                */
            DeliveryTopic: string | undefined;
            /**
                * <p>Describes whether Amazon SES will forward bounce and complaint notifications as email.
                *                 <code>true</code> indicates that Amazon SES will forward bounce and complaint
                *             notifications as email, while <code>false</code> indicates that bounce and complaint
                *             notifications will be published only to the specified bounce and complaint Amazon SNS
                *             topics.</p>
                */
            ForwardingEnabled: boolean | undefined;
            /**
                * <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of
                *             type <code>Bounce</code>. A value of <code>true</code> specifies that Amazon SES will include
                *             headers in bounce notifications, and a value of <code>false</code> specifies that Amazon SES
                *             will not include headers in bounce notifications.</p>
                */
            HeadersInBounceNotificationsEnabled?: boolean;
            /**
                * <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of
                *             type <code>Complaint</code>. A value of <code>true</code> specifies that Amazon SES will
                *             include headers in complaint notifications, and a value of <code>false</code> specifies
                *             that Amazon SES will not include headers in complaint notifications.</p>
                */
            HeadersInComplaintNotificationsEnabled?: boolean;
            /**
                * <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of
                *             type <code>Delivery</code>. A value of <code>true</code> specifies that Amazon SES will
                *             include headers in delivery notifications, and a value of <code>false</code> specifies
                *             that Amazon SES will not include headers in delivery notifications.</p>
                */
            HeadersInDeliveryNotificationsEnabled?: boolean;
    }
    export namespace IdentityNotificationAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityNotificationAttributes) => any;
    }
    /**
        * <p>Represents the notification attributes for a list of identities.</p>
        */
    export interface GetIdentityNotificationAttributesResponse {
            /**
                * <p>A map of Identity to IdentityNotificationAttributes.</p>
                */
            NotificationAttributes: Record<string, IdentityNotificationAttributes> | undefined;
    }
    export namespace GetIdentityNotificationAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityNotificationAttributesResponse) => any;
    }
    /**
        * <p>Represents a request to return the requested sending authorization policies for an
        *             identity. Sending authorization is an Amazon SES feature that enables you to authorize other
        *             senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface GetIdentityPoliciesRequest {
            /**
                * <p>The identity for which the policies will be retrieved. You can specify an identity by
                *             using its name or by using its Amazon Resource Name (ARN). Examples:
                *                 <code>user@example.com</code>, <code>example.com</code>,
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
                *         <p>To successfully call this API, you must own the identity.</p>
                */
            Identity: string | undefined;
            /**
                * <p>A list of the names of policies to be retrieved. You can retrieve a maximum of 20
                *             policies at a time. If you do not know the names of the policies that are attached to
                *             the identity, you can use <code>ListIdentityPolicies</code>.</p>
                */
            PolicyNames: string[] | undefined;
    }
    export namespace GetIdentityPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityPoliciesRequest) => any;
    }
    /**
        * <p>Represents the requested sending authorization policies.</p>
        */
    export interface GetIdentityPoliciesResponse {
            /**
                * <p>A map of policy names to policies.</p>
                */
            Policies: Record<string, string> | undefined;
    }
    export namespace GetIdentityPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityPoliciesResponse) => any;
    }
    /**
        * <p>Represents a request to return the Amazon SES verification status of a list of identities.
        *             For domain identities, this request also returns the verification token. For information
        *             about verifying identities with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface GetIdentityVerificationAttributesRequest {
            /**
                * <p>A list of identities.</p>
                */
            Identities: string[] | undefined;
    }
    export namespace GetIdentityVerificationAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityVerificationAttributesRequest) => any;
    }
    /**
        * <p>Represents the verification attributes of a single identity.</p>
        */
    export interface IdentityVerificationAttributes {
            /**
                * <p>The verification status of the identity: "Pending", "Success", "Failed", or
                *             "TemporaryFailure".</p>
                */
            VerificationStatus: VerificationStatus | string | undefined;
            /**
                * <p>The verification token for a domain identity. Null for email address
                *             identities.</p>
                */
            VerificationToken?: string;
    }
    export namespace IdentityVerificationAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IdentityVerificationAttributes) => any;
    }
    /**
        * <p>The Amazon SES verification status of a list of identities. For domain identities, this
        *             response also contains the verification token.</p>
        */
    export interface GetIdentityVerificationAttributesResponse {
            /**
                * <p>A map of Identities to IdentityVerificationAttributes objects.</p>
                */
            VerificationAttributes: Record<string, IdentityVerificationAttributes> | undefined;
    }
    export namespace GetIdentityVerificationAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIdentityVerificationAttributesResponse) => any;
    }
    /**
        * <p>Represents your Amazon SES daily sending quota, maximum send rate, and the number of emails
        *             you have sent in the last 24 hours.</p>
        */
    export interface GetSendQuotaResponse {
            /**
                * <p>The maximum number of emails the user is allowed to send in a 24-hour interval. A
                *             value of -1 signifies an unlimited quota.</p>
                */
            Max24HourSend?: number;
            /**
                * <p>The maximum number of emails that Amazon SES can accept from the user's account per
                *             second.</p>
                *         <note>
                *             <p>The rate at which Amazon SES accepts the user's messages might be less than the maximum
                *                 send rate.</p>
                *         </note>
                */
            MaxSendRate?: number;
            /**
                * <p>The number of emails sent during the previous 24 hours.</p>
                */
            SentLast24Hours?: number;
    }
    export namespace GetSendQuotaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSendQuotaResponse) => any;
    }
    /**
        * <p>Represents sending statistics data. Each <code>SendDataPoint</code> contains
        *             statistics for a 15-minute period of sending activity. </p>
        */
    export interface SendDataPoint {
            /**
                * <p>Time of the data point.</p>
                */
            Timestamp?: Date;
            /**
                * <p>Number of emails that have been sent.</p>
                */
            DeliveryAttempts?: number;
            /**
                * <p>Number of emails that have bounced.</p>
                */
            Bounces?: number;
            /**
                * <p>Number of unwanted emails that were rejected by recipients.</p>
                */
            Complaints?: number;
            /**
                * <p>Number of emails rejected by Amazon SES.</p>
                */
            Rejects?: number;
    }
    export namespace SendDataPoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendDataPoint) => any;
    }
    /**
        * <p>Represents a list of data points. This list contains aggregated data from the previous
        *             two weeks of your sending activity with Amazon SES.</p>
        */
    export interface GetSendStatisticsResponse {
            /**
                * <p>A list of data points, each of which represents 15 minutes of activity.</p>
                */
            SendDataPoints?: SendDataPoint[];
    }
    export namespace GetSendStatisticsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSendStatisticsResponse) => any;
    }
    export interface GetTemplateRequest {
            /**
                * <p>The name of the template you want to retrieve.</p>
                */
            TemplateName: string | undefined;
    }
    export namespace GetTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTemplateRequest) => any;
    }
    export interface GetTemplateResponse {
            /**
                * <p>The content of the email, composed of a subject line, an HTML part, and a text-only
                *             part.</p>
                */
            Template?: Template;
    }
    export namespace GetTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTemplateResponse) => any;
    }
    /**
        * <p>Indicates that the Template object you specified does not exist in your Amazon SES
        *             account.</p>
        */
    export class TemplateDoesNotExistException extends __BaseException {
            readonly name: "TemplateDoesNotExistException";
            readonly $fault: "client";
            TemplateName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TemplateDoesNotExistException, __BaseException>);
    }
    export type IdentityType = "Domain" | "EmailAddress";
    /**
        * <p>Indicates that provided delivery option is invalid.</p>
        */
    export class InvalidDeliveryOptionsException extends __BaseException {
            readonly name: "InvalidDeliveryOptionsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDeliveryOptionsException, __BaseException>);
    }
    /**
        * <p>Indicates that the provided policy is invalid. Check the error stack for more
        *             information about what caused the error.</p>
        */
    export class InvalidPolicyException extends __BaseException {
            readonly name: "InvalidPolicyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPolicyException, __BaseException>);
    }
    /**
        * <p>Indicates that one or more of the replacement values you provided is invalid. This
        *             error may occur when the TemplateData object contains invalid JSON.</p>
        */
    export class InvalidRenderingParameterException extends __BaseException {
            readonly name: "InvalidRenderingParameterException";
            readonly $fault: "client";
            TemplateName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRenderingParameterException, __BaseException>);
    }
    /**
        * <p>Represents a request to list the configuration sets associated with your AWS account.
        *             Configuration sets enable you to publish email sending events. For information about
        *             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface ListConfigurationSetsRequest {
            /**
                * <p>A token returned from a previous call to <code>ListConfigurationSets</code> to
                *             indicate the position of the configuration set in the configuration set list.</p>
                */
            NextToken?: string;
            /**
                * <p>The number of configuration sets to return.</p>
                */
            MaxItems?: number;
    }
    export namespace ListConfigurationSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationSetsRequest) => any;
    }
    /**
        * <p>A list of configuration sets associated with your AWS account. Configuration sets
        *             enable you to publish email sending events. For information about using configuration
        *             sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface ListConfigurationSetsResponse {
            /**
                * <p>A list of configuration sets.</p>
                */
            ConfigurationSets?: ConfigurationSet[];
            /**
                * <p>A token indicating that there are additional configuration sets available to be
                *             listed. Pass this token to successive calls of <code>ListConfigurationSets</code>.
                *         </p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationSetsResponse) => any;
    }
    /**
        * <p>Represents a request to list the existing custom verification email templates for your
        *             account.</p>
        *         <p>For more information about custom verification email templates, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html">Using Custom
        *                 Verification Email Templates</a> in the <i>Amazon SES Developer
        *                 Guide</i>.</p>
        */
    export interface ListCustomVerificationEmailTemplatesRequest {
            /**
                * <p>An array the contains the name and creation time stamp for each template in your Amazon SES
                *             account.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of custom verification email templates to return. This value must
                *             be at least 1 and less than or equal to 50. If you do not specify a value, or if you
                *             specify a value less than 1 or greater than 50, the operation will return up to 50
                *             results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListCustomVerificationEmailTemplatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCustomVerificationEmailTemplatesRequest) => any;
    }
    /**
        * <p>A paginated list of custom verification email templates.</p>
        */
    export interface ListCustomVerificationEmailTemplatesResponse {
            /**
                * <p>A list of the custom verification email templates that exist in your account.</p>
                */
            CustomVerificationEmailTemplates?: CustomVerificationEmailTemplate[];
            /**
                * <p>A token indicating that there are additional custom verification email templates
                *             available to be listed. Pass this token to a subsequent call to
                *                 <code>ListTemplates</code> to retrieve the next 50 custom verification email
                *             templates.</p>
                */
            NextToken?: string;
    }
    export namespace ListCustomVerificationEmailTemplatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCustomVerificationEmailTemplatesResponse) => any;
    }
    /**
        * <p>Represents a request to return a list of all identities (email addresses and domains)
        *             that you have attempted to verify under your AWS account, regardless of verification
        *             status.</p>
        */
    export interface ListIdentitiesRequest {
            /**
                * <p>The type of the identities to list. Possible values are "EmailAddress" and "Domain".
                *             If this parameter is omitted, then all identities will be listed.</p>
                */
            IdentityType?: IdentityType | string;
            /**
                * <p>The token to use for pagination.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of identities per page. Possible values are 1-1000
                *             inclusive.</p>
                */
            MaxItems?: number;
    }
    export namespace ListIdentitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentitiesRequest) => any;
    }
    /**
        * <p>A list of all identities that you have attempted to verify under your AWS account,
        *             regardless of verification status.</p>
        */
    export interface ListIdentitiesResponse {
            /**
                * <p>A list of identities.</p>
                */
            Identities: string[] | undefined;
            /**
                * <p>The token used for pagination.</p>
                */
            NextToken?: string;
    }
    export namespace ListIdentitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentitiesResponse) => any;
    }
    /**
        * <p>Represents a request to return a list of sending authorization policies that are
        *             attached to an identity. Sending authorization is an Amazon SES feature that enables you to
        *             authorize other senders to use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface ListIdentityPoliciesRequest {
            /**
                * <p>The identity that is associated with the policy for which the policies will be listed.
                *             You can specify an identity by using its name or by using its Amazon Resource Name
                *             (ARN). Examples: <code>user@example.com</code>, <code>example.com</code>,
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
                *         <p>To successfully call this API, you must own the identity.</p>
                */
            Identity: string | undefined;
    }
    export namespace ListIdentityPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentityPoliciesRequest) => any;
    }
    /**
        * <p>A list of names of sending authorization policies that apply to an identity.</p>
        */
    export interface ListIdentityPoliciesResponse {
            /**
                * <p>A list of names of policies that apply to the specified identity.</p>
                */
            PolicyNames: string[] | undefined;
    }
    export namespace ListIdentityPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIdentityPoliciesResponse) => any;
    }
    /**
        * <p>Represents a request to list the IP address filters that exist under your AWS account.
        *             You use IP address filters when you receive email with Amazon SES. For more information, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface ListReceiptFiltersRequest {
    }
    export namespace ListReceiptFiltersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReceiptFiltersRequest) => any;
    }
    /**
        * <p>A list of IP address filters that exist under your AWS account.</p>
        */
    export interface ListReceiptFiltersResponse {
            /**
                * <p>A list of IP address filter data structures, which each consist of a name, an IP
                *             address range, and whether to allow or block mail from it.</p>
                */
            Filters?: ReceiptFilter[];
    }
    export namespace ListReceiptFiltersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReceiptFiltersResponse) => any;
    }
    /**
        * <p>Represents a request to list the receipt rule sets that exist under your AWS account.
        *             You use receipt rule sets to receive email with Amazon SES. For more information, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface ListReceiptRuleSetsRequest {
            /**
                * <p>A token returned from a previous call to <code>ListReceiptRuleSets</code> to indicate
                *             the position in the receipt rule set list.</p>
                */
            NextToken?: string;
    }
    export namespace ListReceiptRuleSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReceiptRuleSetsRequest) => any;
    }
    /**
        * <p>A list of receipt rule sets that exist under your AWS account.</p>
        */
    export interface ListReceiptRuleSetsResponse {
            /**
                * <p>The metadata for the currently active receipt rule set. The metadata consists of the
                *             rule set name and the timestamp of when the rule set was created.</p>
                */
            RuleSets?: ReceiptRuleSetMetadata[];
            /**
                * <p>A token indicating that there are additional receipt rule sets available to be listed.
                *             Pass this token to successive calls of <code>ListReceiptRuleSets</code> to retrieve up
                *             to 100 receipt rule sets at a time.</p>
                */
            NextToken?: string;
    }
    export namespace ListReceiptRuleSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReceiptRuleSetsResponse) => any;
    }
    export interface ListTemplatesRequest {
            /**
                * <p>A token returned from a previous call to <code>ListTemplates</code> to indicate the
                *             position in the list of email templates.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of templates to return. This value must be at least 1 and less than
                *             or equal to 10. If you do not specify a value, or if you specify a value less than 1 or
                *             greater than 10, the operation will return up to 10 results.</p>
                */
            MaxItems?: number;
    }
    export namespace ListTemplatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplatesRequest) => any;
    }
    /**
        * <p>Contains information about an email template.</p>
        */
    export interface TemplateMetadata {
            /**
                * <p>The name of the template.</p>
                */
            Name?: string;
            /**
                * <p>The time and date the template was created.</p>
                */
            CreatedTimestamp?: Date;
    }
    export namespace TemplateMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateMetadata) => any;
    }
    export interface ListTemplatesResponse {
            /**
                * <p>An array the contains the name and creation time stamp for each template in your Amazon SES
                *             account.</p>
                */
            TemplatesMetadata?: TemplateMetadata[];
            /**
                * <p>A token indicating that there are additional email templates available to be listed.
                *             Pass this token to a subsequent call to <code>ListTemplates</code> to retrieve the next
                *             50 email templates.</p>
                */
            NextToken?: string;
    }
    export namespace ListTemplatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTemplatesResponse) => any;
    }
    /**
        * <p>A list of email addresses that you have verified with Amazon SES under your AWS
        *             account.</p>
        */
    export interface ListVerifiedEmailAddressesResponse {
            /**
                * <p>A list of email addresses that have been verified.</p>
                */
            VerifiedEmailAddresses?: string[];
    }
    export namespace ListVerifiedEmailAddressesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVerifiedEmailAddressesResponse) => any;
    }
    /**
        * <p> Indicates that the message could not be sent because Amazon SES could not read the MX
        *             record required to use the specified MAIL FROM domain. For information about editing the
        *             custom MAIL FROM domain settings for an identity, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-edit.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export class MailFromDomainNotVerifiedException extends __BaseException {
            readonly name: "MailFromDomainNotVerifiedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MailFromDomainNotVerifiedException, __BaseException>);
    }
    /**
        * <p>Represents the message to be sent, composed of a subject and a body.</p>
        */
    export interface Message {
            /**
                * <p>The subject of the message: A short summary of the content, which will appear in the
                *             recipient's inbox.</p>
                */
            Subject: Content | undefined;
            /**
                * <p>The message body.</p>
                */
            Body: Body | undefined;
    }
    export namespace Message {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Message) => any;
    }
    /**
        * <p>Message-related information to include in the Delivery Status Notification (DSN) when
        *             an email that Amazon SES receives on your behalf bounces.</p>
        *         <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface MessageDsn {
            /**
                * <p>The reporting MTA that attempted to deliver the message, formatted as specified in
                *                 <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>
                *                 (<code>mta-name-type; mta-name</code>). The default value is <code>dns;
                *                 inbound-smtp.[region].amazonaws.com</code>.</p>
                */
            ReportingMta: string | undefined;
            /**
                * <p>When the message was received by the reporting mail transfer agent (MTA), in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
                */
            ArrivalDate?: Date;
            /**
                * <p>Additional X-headers to include in the DSN.</p>
                */
            ExtensionFields?: ExtensionField[];
    }
    export namespace MessageDsn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessageDsn) => any;
    }
    /**
        * <p>Indicates that the action failed, and the message could not be sent. Check the error
        *             stack for more information about what caused the error.</p>
        */
    export class MessageRejected extends __BaseException {
            readonly name: "MessageRejected";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MessageRejected, __BaseException>);
    }
    /**
        * <p>Indicates that one or more of the replacement values for the specified template was
        *             not specified. Ensure that the TemplateData object contains references to all of the
        *             replacement tags in the specified template.</p>
        */
    export class MissingRenderingAttributeException extends __BaseException {
            readonly name: "MissingRenderingAttributeException";
            readonly $fault: "client";
            TemplateName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MissingRenderingAttributeException, __BaseException>);
    }
    export type NotificationType = "Bounce" | "Complaint" | "Delivery";
    /**
        * <p>Indicates that the account has not been granted production access.</p>
        */
    export class ProductionAccessNotGrantedException extends __BaseException {
            readonly name: "ProductionAccessNotGrantedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProductionAccessNotGrantedException, __BaseException>);
    }
    /**
        * <p>A request to modify the delivery options for a configuration set.</p>
        */
    export interface PutConfigurationSetDeliveryOptionsRequest {
            /**
                * <p>The name of the configuration set that you want to specify the delivery options
                *             for.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>Specifies whether messages that use the configuration set are required to use
                *             Transport Layer Security (TLS).</p>
                */
            DeliveryOptions?: DeliveryOptions;
    }
    export namespace PutConfigurationSetDeliveryOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetDeliveryOptionsRequest) => any;
    }
    /**
        * <p>An HTTP 200 response if the request succeeds, or an error message if the request
        *             fails.</p>
        */
    export interface PutConfigurationSetDeliveryOptionsResponse {
    }
    export namespace PutConfigurationSetDeliveryOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutConfigurationSetDeliveryOptionsResponse) => any;
    }
    /**
        * <p>Represents a request to add or update a sending authorization policy for an identity.
        *             Sending authorization is an Amazon SES feature that enables you to authorize other senders to
        *             use your identities. For information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface PutIdentityPolicyRequest {
            /**
                * <p>The identity that the policy will apply to. You can specify an identity by using its
                *             name or by using its Amazon Resource Name (ARN). Examples:
                *             <code>user@example.com</code>, <code>example.com</code>,
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
                *         <p>To successfully call this API, you must own the identity.</p>
                */
            Identity: string | undefined;
            /**
                * <p>The name of the policy.</p>
                *         <p>The policy name cannot exceed 64 characters and can only include alphanumeric
                *             characters, dashes, and underscores.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The text of the policy in JSON format. The policy cannot exceed 4 KB.</p>
                *         <p>For information about the syntax of sending authorization policies, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-policies.html">Amazon SES Developer
                *                 Guide</a>. </p>
                */
            Policy: string | undefined;
    }
    export namespace PutIdentityPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutIdentityPolicyRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface PutIdentityPolicyResponse {
    }
    export namespace PutIdentityPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutIdentityPolicyResponse) => any;
    }
    /**
        * <p>Represents the raw data of the message.</p>
        */
    export interface RawMessage {
            /**
                * <p>The raw data of the message. This data needs to base64-encoded if you are accessing
                *             Amazon SES directly through the HTTPS interface. If you are accessing Amazon SES using an AWS
                *             SDK, the SDK takes care of the base 64-encoding for you. In all cases, the client must
                *             ensure that the message format complies with Internet email standards regarding email
                *             header fields, MIME types, and MIME encoding.</p>
                *         <p>The To:, CC:, and BCC: headers in the raw message can contain a group list.</p>
                *         <p>If you are using <code>SendRawEmail</code> with sending authorization, you can include
                *             X-headers in the raw message to specify the "Source," "From," and "Return-Path"
                *             addresses. For more information, see the documentation for <code>SendRawEmail</code>. </p>
                *         <important>
                *             <p>Do not include these X-headers in the DKIM signature, because they are removed by
                *                 Amazon SES before sending the email.</p>
                *         </important>
                *         <p>For more information, go to the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer
                *             Guide</a>.</p>
                */
            Data: Uint8Array | undefined;
    }
    export namespace RawMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RawMessage) => any;
    }
    /**
        * <p>Represents a request to reorder the receipt rules within a receipt rule set. You use
        *             receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface ReorderReceiptRuleSetRequest {
            /**
                * <p>The name of the receipt rule set to reorder.</p>
                */
            RuleSetName: string | undefined;
            /**
                * <p>A list of the specified receipt rule set's receipt rules in the order that you want to
                *             put them.</p>
                */
            RuleNames: string[] | undefined;
    }
    export namespace ReorderReceiptRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReorderReceiptRuleSetRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface ReorderReceiptRuleSetResponse {
    }
    export namespace ReorderReceiptRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReorderReceiptRuleSetResponse) => any;
    }
    /**
        * <p>Represents a request to send a bounce message to the sender of an email you received
        *             through Amazon SES.</p>
        */
    export interface SendBounceRequest {
            /**
                * <p>The message ID of the message to be bounced.</p>
                */
            OriginalMessageId: string | undefined;
            /**
                * <p>The address to use in the "From" header of the bounce message. This must be an
                *             identity that you have verified with Amazon SES.</p>
                */
            BounceSender: string | undefined;
            /**
                * <p>Human-readable text for the bounce message to explain the failure. If not specified,
                *             the text will be auto-generated based on the bounced recipient information.</p>
                */
            Explanation?: string;
            /**
                * <p>Message-related DSN fields. If not specified, Amazon SES will choose the values.</p>
                */
            MessageDsn?: MessageDsn;
            /**
                * <p>A list of recipients of the bounced message, including the information required to
                *             create the Delivery Status Notifications (DSNs) for the recipients. You must specify at
                *             least one <code>BouncedRecipientInfo</code> in the list.</p>
                */
            BouncedRecipientInfoList: BouncedRecipientInfo[] | undefined;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to use the
                *             address in the "From" header of the bounce. For more information about sending
                *             authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            BounceSenderArn?: string;
    }
    export namespace SendBounceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendBounceRequest) => any;
    }
    /**
        * <p>Represents a unique message ID.</p>
        */
    export interface SendBounceResponse {
            /**
                * <p>The message ID of the bounce message.</p>
                */
            MessageId?: string;
    }
    export namespace SendBounceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendBounceResponse) => any;
    }
    /**
        * <p>Represents a request to send a templated email to multiple destinations using Amazon SES.
        *             For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SendBulkTemplatedEmailRequest {
            /**
                * <p>The email address that is sending the email. This email address must be either
                *             individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
                *             For information about verifying identities, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>If you are sending on behalf of another user and have been permitted to do so by a
                *             sending authorization policy, then you must also specify the <code>SourceArn</code>
                *             parameter. For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
                *         <note>
                *             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
                *                     <i>local part</i> of a source email address (the part of the email
                *                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
                *                     characters</a>. If the <i>domain part</i> of an address (the
                *                 part after the @ sign) contains non-ASCII characters, they must be encoded using
                *                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
                *                     name</i>) may contain non-ASCII characters. These characters must be
                *                 encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
                *                 syntax uses the following form:
                *                 <code>=?charset?encoding?encoded-text?=</code>.</p>
                *         </note>
                */
            Source: string | undefined;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to send for
                *             the email address specified in the <code>Source</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to send from <code>user@example.com</code>, then you
                *             would specify the <code>SourceArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>Source</code> to be <code>user@example.com</code>.</p>
                *         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            SourceArn?: string;
            /**
                * <p>The reply-to email address(es) for the message. If the recipient replies to the
                *             message, each reply-to address will receive the reply.</p>
                */
            ReplyToAddresses?: string[];
            /**
                * <p>The email address that bounces and complaints will be forwarded to when feedback
                *             forwarding is enabled. If the message cannot be delivered to the recipient, then an
                *             error message will be returned from the recipient's ISP; this message will then be
                *             forwarded to the email address specified by the <code>ReturnPath</code> parameter. The
                *                 <code>ReturnPath</code> parameter is never overwritten. This email address must be
                *             either individually verified with Amazon SES, or from a domain that has been verified with
                *             Amazon SES. </p>
                */
            ReturnPath?: string;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to use the
                *             email address specified in the <code>ReturnPath</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
                *             would specify the <code>ReturnPathArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
                *         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            ReturnPathArn?: string;
            /**
                * <p>The name of the configuration set to use when you send an email using
                *                 <code>SendBulkTemplatedEmail</code>.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>A list of tags, in the form of name/value pairs, to apply to an email that you send to
                *             a destination using <code>SendBulkTemplatedEmail</code>.</p>
                */
            DefaultTags?: MessageTag[];
            /**
                * <p>The template to use when sending this email.</p>
                */
            Template: string | undefined;
            /**
                * <p>The ARN of the template to use when sending this email.</p>
                */
            TemplateArn?: string;
            /**
                * <p>A list of replacement values to apply to the template when replacement data is not
                *             specified in a Destination object. These values act as a default or fallback option when
                *             no other data is available.</p>
                *         <p>The template data is a JSON object, typically consisting of key-value pairs in which
                *             the keys correspond to replacement tags in the email template.</p>
                */
            DefaultTemplateData?: string;
            /**
                * <p>One or more <code>Destination</code> objects. All of the recipients in a
                *                 <code>Destination</code> will receive the same version of the email. You can specify
                *             up to 50 <code>Destination</code> objects within a <code>Destinations</code>
                *             array.</p>
                */
            Destinations: BulkEmailDestination[] | undefined;
    }
    export namespace SendBulkTemplatedEmailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendBulkTemplatedEmailRequest) => any;
    }
    export interface SendBulkTemplatedEmailResponse {
            /**
                * <p>The unique message identifier returned from the <code>SendBulkTemplatedEmail</code>
                *             action.</p>
                */
            Status: BulkEmailDestinationStatus[] | undefined;
    }
    export namespace SendBulkTemplatedEmailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendBulkTemplatedEmailResponse) => any;
    }
    /**
        * <p>Represents a request to send a custom verification email to a specified
        *             recipient.</p>
        */
    export interface SendCustomVerificationEmailRequest {
            /**
                * <p>The email address to verify.</p>
                */
            EmailAddress: string | undefined;
            /**
                * <p>The name of the custom verification email template to use when sending the
                *             verification email.</p>
                */
            TemplateName: string | undefined;
            /**
                * <p>Name of a configuration set to use when sending the verification email.</p>
                */
            ConfigurationSetName?: string;
    }
    export namespace SendCustomVerificationEmailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendCustomVerificationEmailRequest) => any;
    }
    /**
        * <p>The response received when attempting to send the custom verification email.</p>
        */
    export interface SendCustomVerificationEmailResponse {
            /**
                * <p>The unique message identifier returned from the
                *                 <code>SendCustomVerificationEmail</code> operation.</p>
                */
            MessageId?: string;
    }
    export namespace SendCustomVerificationEmailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendCustomVerificationEmailResponse) => any;
    }
    /**
        * <p>Represents a request to send a single formatted email using Amazon SES. For more
        *             information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-formatted.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SendEmailRequest {
            /**
                * <p>The email address that is sending the email. This email address must be either
                *             individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
                *             For information about verifying identities, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>If you are sending on behalf of another user and have been permitted to do so by a
                *             sending authorization policy, then you must also specify the <code>SourceArn</code>
                *             parameter. For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
                *         <note>
                *             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
                *                     <i>local part</i> of a source email address (the part of the email
                *                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
                *                     characters</a>. If the <i>domain part</i> of an address (the
                *                 part after the @ sign) contains non-ASCII characters, they must be encoded using
                *                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
                *                     name</i>) may contain non-ASCII characters. These characters must be
                *                 encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
                *                 syntax uses the following form:
                *                 <code>=?charset?encoding?encoded-text?=</code>.</p>
                *         </note>
                */
            Source: string | undefined;
            /**
                * <p>The destination for this email, composed of To:, CC:, and BCC: fields.</p>
                */
            Destination: Destination | undefined;
            /**
                * <p>The message to be sent.</p>
                */
            Message: Message | undefined;
            /**
                * <p>The reply-to email address(es) for the message. If the recipient replies to the
                *             message, each reply-to address will receive the reply.</p>
                */
            ReplyToAddresses?: string[];
            /**
                * <p>The email address that bounces and complaints will be forwarded to when feedback
                *             forwarding is enabled. If the message cannot be delivered to the recipient, then an
                *             error message will be returned from the recipient's ISP; this message will then be
                *             forwarded to the email address specified by the <code>ReturnPath</code> parameter. The
                *                 <code>ReturnPath</code> parameter is never overwritten. This email address must be
                *             either individually verified with Amazon SES, or from a domain that has been verified with
                *             Amazon SES. </p>
                */
            ReturnPath?: string;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to send for
                *             the email address specified in the <code>Source</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to send from <code>user@example.com</code>, then you
                *             would specify the <code>SourceArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>Source</code> to be <code>user@example.com</code>.</p>
                *         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            SourceArn?: string;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to use the
                *             email address specified in the <code>ReturnPath</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
                *             would specify the <code>ReturnPathArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
                *         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            ReturnPathArn?: string;
            /**
                * <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
                *             using <code>SendEmail</code>. Tags correspond to characteristics of the email that you
                *             define, so that you can publish email sending events.</p>
                */
            Tags?: MessageTag[];
            /**
                * <p>The name of the configuration set to use when you send an email using
                *                 <code>SendEmail</code>.</p>
                */
            ConfigurationSetName?: string;
    }
    export namespace SendEmailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEmailRequest) => any;
    }
    /**
        * <p>Represents a unique message ID.</p>
        */
    export interface SendEmailResponse {
            /**
                * <p>The unique message identifier returned from the <code>SendEmail</code> action. </p>
                */
            MessageId: string | undefined;
    }
    export namespace SendEmailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEmailResponse) => any;
    }
    /**
        * <p>Represents a request to send a single raw email using Amazon SES. For more information, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface SendRawEmailRequest {
            /**
                * <p>The identity's email address. If you do not provide a value for this parameter, you
                *             must specify a "From" address in the raw text of the message. (You can also specify
                *             both.)</p>
                *         <note>
                *             <p>Amazon SES does not support the SMTPUTF8 extension, as described in<a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
                *                     <i>local part</i> of a source email address (the part of the email
                *                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
                *                     characters</a>. If the <i>domain part</i> of an address (the
                *                 part after the @ sign) contains non-ASCII characters, they must be encoded using
                *                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
                *                     name</i>) may contain non-ASCII characters. These characters must be
                *                 encoded using MIME encoded-word syntax, as described in <a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
                *                 syntax uses the following form:
                *                 <code>=?charset?encoding?encoded-text?=</code>.</p>
                *         </note>
                *
                *         <p>If you specify the <code>Source</code> parameter and have feedback forwarding enabled,
                *             then bounces and complaints will be sent to this email address. This takes precedence
                *             over any Return-Path header that you might include in the raw text of the
                *             message.</p>
                */
            Source?: string;
            /**
                * <p>A list of destinations for the message, consisting of To:, CC:, and BCC:
                *             addresses.</p>
                */
            Destinations?: string[];
            /**
                * <p>The raw email message itself. The message has to meet the following criteria:</p>
                *         <ul>
                *             <li>
                *                 <p>The message has to contain a header and a body, separated by a blank
                *                     line.</p>
                *             </li>
                *             <li>
                *                 <p>All of the required header fields must be present in the message.</p>
                *             </li>
                *             <li>
                *                 <p>Each part of a multipart MIME message must be formatted properly.</p>
                *             </li>
                *             <li>
                *                 <p>Attachments must be of a content type that Amazon SES supports. For a list on
                *                     unsupported content types, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types.html">Unsupported Attachment
                *                         Types</a> in the <i>Amazon SES Developer Guide</i>.</p>
                *             </li>
                *             <li>
                *                 <p>The entire message must be base64-encoded.</p>
                *             </li>
                *             <li>
                *                 <p>If any of the MIME parts in your message contain content that is outside of
                *                     the 7-bit ASCII character range, we highly recommend that you encode that
                *                     content. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html">Sending Raw Email</a> in the <i>Amazon SES Developer
                *                     Guide</i>.</p>
                *             </li>
                *             <li>
                *                 <p>Per <a href="https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6">RFC
                *                         5321</a>, the maximum length of each line of text, including the
                *                     <CRLF>, must not exceed 1,000 characters.</p>
                *             </li>
                *          </ul>
                */
            RawMessage: RawMessage | undefined;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to specify a
                *             particular "From" address in the header of the raw email.</p>
                *         <p>Instead of using this parameter, you can use the X-header <code>X-SES-FROM-ARN</code>
                *             in the raw message of the email. If you use both the <code>FromArn</code> parameter and
                *             the corresponding X-header, Amazon SES uses the value of the <code>FromArn</code>
                *             parameter.</p>
                *         <note>
                *             <p>For information about when to use this parameter, see the description of
                *                     <code>SendRawEmail</code> in this guide, or see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p>
                *         </note>
                */
            FromArn?: string;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to send for
                *             the email address specified in the <code>Source</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to send from <code>user@example.com</code>, then you
                *             would specify the <code>SourceArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>Source</code> to be <code>user@example.com</code>.</p>
                *         <p>Instead of using this parameter, you can use the X-header
                *                 <code>X-SES-SOURCE-ARN</code> in the raw message of the email. If you use both the
                *                 <code>SourceArn</code> parameter and the corresponding X-header, Amazon SES uses the
                *             value of the <code>SourceArn</code> parameter.</p>
                *         <note>
                *             <p>For information about when to use this parameter, see the description of
                *                     <code>SendRawEmail</code> in this guide, or see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p>
                *         </note>
                */
            SourceArn?: string;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to use the
                *             email address specified in the <code>ReturnPath</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
                *             would specify the <code>ReturnPathArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
                *         <p>Instead of using this parameter, you can use the X-header
                *                 <code>X-SES-RETURN-PATH-ARN</code> in the raw message of the email. If you use both
                *             the <code>ReturnPathArn</code> parameter and the corresponding X-header, Amazon SES uses the
                *             value of the <code>ReturnPathArn</code> parameter.</p>
                *         <note>
                *             <p>For information about when to use this parameter, see the description of
                *                     <code>SendRawEmail</code> in this guide, or see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization-delegate-sender-tasks-email.html">Amazon SES Developer Guide</a>.</p>
                *         </note>
                */
            ReturnPathArn?: string;
            /**
                * <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
                *             using <code>SendRawEmail</code>. Tags correspond to characteristics of the email that
                *             you define, so that you can publish email sending events.</p>
                */
            Tags?: MessageTag[];
            /**
                * <p>The name of the configuration set to use when you send an email using
                *                 <code>SendRawEmail</code>.</p>
                */
            ConfigurationSetName?: string;
    }
    export namespace SendRawEmailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendRawEmailRequest) => any;
    }
    /**
        * <p>Represents a unique message ID.</p>
        */
    export interface SendRawEmailResponse {
            /**
                * <p>The unique message identifier returned from the <code>SendRawEmail</code> action.
                *         </p>
                */
            MessageId: string | undefined;
    }
    export namespace SendRawEmailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendRawEmailResponse) => any;
    }
    /**
        * <p>Represents a request to send a templated email using Amazon SES. For more information, see
        *             the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-personalized-email-api.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SendTemplatedEmailRequest {
            /**
                * <p>The email address that is sending the email. This email address must be either
                *             individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
                *             For information about verifying identities, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-addresses-and-domains.html">Amazon SES Developer
                *                 Guide</a>.</p>
                *         <p>If you are sending on behalf of another user and have been permitted to do so by a
                *             sending authorization policy, then you must also specify the <code>SourceArn</code>
                *             parameter. For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer Guide</a>.</p>
                *         <note>
                *             <p>Amazon SES does not support the SMTPUTF8 extension, as described in <a href="https://tools.ietf.org/html/rfc6531">RFC6531</a>. For this reason, the
                *                     <i>local part</i> of a source email address (the part of the email
                *                 address that precedes the @ sign) may only contain <a href="https://en.wikipedia.org/wiki/Email_address#Local-part">7-bit ASCII
                *                     characters</a>. If the <i>domain part</i> of an address (the
                *                 part after the @ sign) contains non-ASCII characters, they must be encoded using
                *                 Punycode, as described in <a href="https://tools.ietf.org/html/rfc3492.html">RFC3492</a>. The sender name (also known as the <i>friendly
                *                     name</i>) may contain non-ASCII characters. These characters must be
                *                 encoded using MIME encoded-word syntax, as described in<a href="https://tools.ietf.org/html/rfc2047">RFC 2047</a>. MIME encoded-word
                *                 syntax uses the following form:
                *                 <code>=?charset?encoding?encoded-text?=</code>.</p>
                *         </note>
                */
            Source: string | undefined;
            /**
                * <p>The destination for this email, composed of To:, CC:, and BCC: fields. A Destination
                *             can include up to 50 recipients across these three fields.</p>
                */
            Destination: Destination | undefined;
            /**
                * <p>The reply-to email address(es) for the message. If the recipient replies to the
                *             message, each reply-to address will receive the reply.</p>
                */
            ReplyToAddresses?: string[];
            /**
                * <p>The email address that bounces and complaints will be forwarded to when feedback
                *             forwarding is enabled. If the message cannot be delivered to the recipient, then an
                *             error message will be returned from the recipient's ISP; this message will then be
                *             forwarded to the email address specified by the <code>ReturnPath</code> parameter. The
                *                 <code>ReturnPath</code> parameter is never overwritten. This email address must be
                *             either individually verified with Amazon SES, or from a domain that has been verified with
                *             Amazon SES. </p>
                */
            ReturnPath?: string;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to send for
                *             the email address specified in the <code>Source</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to send from <code>user@example.com</code>, then you
                *             would specify the <code>SourceArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>Source</code> to be <code>user@example.com</code>.</p>
                *         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            SourceArn?: string;
            /**
                * <p>This parameter is used only for sending authorization. It is the ARN of the identity
                *             that is associated with the sending authorization policy that permits you to use the
                *             email address specified in the <code>ReturnPath</code> parameter.</p>
                *         <p>For example, if the owner of <code>example.com</code> (which has ARN
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>) attaches a
                *             policy to it that authorizes you to use <code>feedback@example.com</code>, then you
                *             would specify the <code>ReturnPathArn</code> to be
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>, and the
                *                 <code>ReturnPath</code> to be <code>feedback@example.com</code>.</p>
                *         <p>For more information about sending authorization, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/sending-authorization.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            ReturnPathArn?: string;
            /**
                * <p>A list of tags, in the form of name/value pairs, to apply to an email that you send
                *             using <code>SendTemplatedEmail</code>. Tags correspond to characteristics of the email
                *             that you define, so that you can publish email sending events.</p>
                */
            Tags?: MessageTag[];
            /**
                * <p>The name of the configuration set to use when you send an email using
                *                 <code>SendTemplatedEmail</code>.</p>
                */
            ConfigurationSetName?: string;
            /**
                * <p>The template to use when sending this email.</p>
                */
            Template: string | undefined;
            /**
                * <p>The ARN of the template to use when sending this email.</p>
                */
            TemplateArn?: string;
            /**
                * <p>A list of replacement values to apply to the template. This parameter is a JSON
                *             object, typically consisting of key-value pairs in which the keys correspond to
                *             replacement tags in the email template.</p>
                */
            TemplateData: string | undefined;
    }
    export namespace SendTemplatedEmailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTemplatedEmailRequest) => any;
    }
    export interface SendTemplatedEmailResponse {
            /**
                * <p>The unique message identifier returned from the <code>SendTemplatedEmail</code>
                *             action. </p>
                */
            MessageId: string | undefined;
    }
    export namespace SendTemplatedEmailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTemplatedEmailResponse) => any;
    }
    /**
        * <p>Represents a request to set a receipt rule set as the active receipt rule set. You use
        *             receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface SetActiveReceiptRuleSetRequest {
            /**
                * <p>The name of the receipt rule set to make active. Setting this value to null disables
                *             all email receiving.</p>
                */
            RuleSetName?: string;
    }
    export namespace SetActiveReceiptRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetActiveReceiptRuleSetRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface SetActiveReceiptRuleSetResponse {
    }
    export namespace SetActiveReceiptRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetActiveReceiptRuleSetResponse) => any;
    }
    /**
        * <p>Represents a request to enable or disable Amazon SES Easy DKIM signing for an identity. For
        *             more information about setting up Easy DKIM, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface SetIdentityDkimEnabledRequest {
            /**
                * <p>The identity for which DKIM signing should be enabled or disabled.</p>
                */
            Identity: string | undefined;
            /**
                * <p>Sets whether DKIM signing is enabled for an identity. Set to <code>true</code> to
                *             enable DKIM signing for this identity; <code>false</code> to disable it. </p>
                */
            DkimEnabled: boolean | undefined;
    }
    export namespace SetIdentityDkimEnabledRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityDkimEnabledRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface SetIdentityDkimEnabledResponse {
    }
    export namespace SetIdentityDkimEnabledResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityDkimEnabledResponse) => any;
    }
    /**
        * <p>Represents a request to enable or disable whether Amazon SES forwards you bounce and
        *             complaint notifications through email. For information about email feedback forwarding,
        *             see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-email.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SetIdentityFeedbackForwardingEnabledRequest {
            /**
                * <p>The identity for which to set bounce and complaint notification forwarding. Examples:
                *                 <code>user@example.com</code>, <code>example.com</code>.</p>
                */
            Identity: string | undefined;
            /**
                * <p>Sets whether Amazon SES will forward bounce and complaint notifications as email.
                *                 <code>true</code> specifies that Amazon SES will forward bounce and complaint
                *             notifications as email, in addition to any Amazon SNS topic publishing otherwise specified.
                *                 <code>false</code> specifies that Amazon SES will publish bounce and complaint
                *             notifications only through Amazon SNS. This value can only be set to <code>false</code> when
                *             Amazon SNS topics are set for both <code>Bounce</code> and <code>Complaint</code>
                *             notification types.</p>
                */
            ForwardingEnabled: boolean | undefined;
    }
    export namespace SetIdentityFeedbackForwardingEnabledRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityFeedbackForwardingEnabledRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface SetIdentityFeedbackForwardingEnabledResponse {
    }
    export namespace SetIdentityFeedbackForwardingEnabledResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityFeedbackForwardingEnabledResponse) => any;
    }
    /**
        * <p>Represents a request to set whether Amazon SES includes the original email headers in the
        *             Amazon SNS notifications of a specified type. For information about notifications, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-sns.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SetIdentityHeadersInNotificationsEnabledRequest {
            /**
                * <p>The identity for which to enable or disable headers in notifications. Examples:
                *                 <code>user@example.com</code>, <code>example.com</code>.</p>
                */
            Identity: string | undefined;
            /**
                * <p>The notification type for which to enable or disable headers in notifications. </p>
                */
            NotificationType: NotificationType | string | undefined;
            /**
                * <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the
                *             specified notification type. A value of <code>true</code> specifies that Amazon SES will
                *             include headers in notifications, and a value of <code>false</code> specifies that Amazon SES
                *             will not include headers in notifications.</p>
                *         <p>This value can only be set when <code>NotificationType</code> is already set to use a
                *             particular Amazon SNS topic.</p>
                */
            Enabled: boolean | undefined;
    }
    export namespace SetIdentityHeadersInNotificationsEnabledRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityHeadersInNotificationsEnabledRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface SetIdentityHeadersInNotificationsEnabledResponse {
    }
    export namespace SetIdentityHeadersInNotificationsEnabledResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityHeadersInNotificationsEnabledResponse) => any;
    }
    /**
        * <p>Represents a request to enable or disable the Amazon SES custom MAIL FROM domain setup for
        *             a verified identity. For information about using a custom MAIL FROM domain, see the
        *                 <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface SetIdentityMailFromDomainRequest {
            /**
                * <p>The verified identity for which you want to enable or disable the specified custom
                *             MAIL FROM domain.</p>
                */
            Identity: string | undefined;
            /**
                * <p>The custom MAIL FROM domain that you want the verified identity to use. The MAIL FROM
                *             domain must 1) be a subdomain of the verified identity, 2) not be used in a "From"
                *             address if the MAIL FROM domain is the destination of email feedback forwarding (for
                *             more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from.html">Amazon SES Developer Guide</a>), and
                *             3) not be used to receive emails. A value of <code>null</code> disables the custom MAIL
                *             FROM setting for the identity.</p>
                */
            MailFromDomain?: string;
            /**
                * <p>The action that you want Amazon SES to take if it cannot successfully read the required MX
                *             record when you send an email. If you choose <code>UseDefaultValue</code>, Amazon SES will
                *             use amazonses.com (or a subdomain of that) as the MAIL FROM domain. If you choose
                *                 <code>RejectMessage</code>, Amazon SES will return a
                *                 <code>MailFromDomainNotVerified</code> error and not send the email.</p>
                *         <p>The action specified in <code>BehaviorOnMXFailure</code> is taken when the custom MAIL
                *             FROM domain setup is in the <code>Pending</code>, <code>Failed</code>, and
                *                 <code>TemporaryFailure</code> states.</p>
                */
            BehaviorOnMXFailure?: BehaviorOnMXFailure | string;
    }
    export namespace SetIdentityMailFromDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityMailFromDomainRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface SetIdentityMailFromDomainResponse {
    }
    export namespace SetIdentityMailFromDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityMailFromDomainResponse) => any;
    }
    /**
        * <p>Represents a request to specify the Amazon SNS topic to which Amazon SES will publish bounce,
        *             complaint, or delivery notifications for emails sent with that identity as the Source.
        *             For information about Amazon SES notifications, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-sns.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface SetIdentityNotificationTopicRequest {
            /**
                * <p>The identity (email address or domain) that you want to set the Amazon SNS topic
                *             for.</p>
                *         <important>
                *             <p>You can only specify a verified identity for this parameter.</p>
                *         </important>
                *         <p>You can specify an identity by using its name or by using its Amazon Resource Name
                *             (ARN). The following examples are all valid identities: <code>sender@example.com</code>,
                *                 <code>example.com</code>,
                *                 <code>arn:aws:ses:us-east-1:123456789012:identity/example.com</code>.</p>
                */
            Identity: string | undefined;
            /**
                * <p>The type of notifications that will be published to the specified Amazon SNS topic.</p>
                */
            NotificationType: NotificationType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon SNS topic. If the parameter is omitted from
                *             the request or a null value is passed, <code>SnsTopic</code> is cleared and publishing
                *             is disabled.</p>
                */
            SnsTopic?: string;
    }
    export namespace SetIdentityNotificationTopicRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityNotificationTopicRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface SetIdentityNotificationTopicResponse {
    }
    export namespace SetIdentityNotificationTopicResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIdentityNotificationTopicResponse) => any;
    }
    /**
        * <p>Represents a request to set the position of a receipt rule in a receipt rule set. You
        *             use receipt rule sets to receive email with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer Guide</a>.</p>
        */
    export interface SetReceiptRulePositionRequest {
            /**
                * <p>The name of the receipt rule set that contains the receipt rule to reposition.</p>
                */
            RuleSetName: string | undefined;
            /**
                * <p>The name of the receipt rule to reposition.</p>
                */
            RuleName: string | undefined;
            /**
                * <p>The name of the receipt rule after which to place the specified receipt rule.</p>
                */
            After?: string;
    }
    export namespace SetReceiptRulePositionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetReceiptRulePositionRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface SetReceiptRulePositionResponse {
    }
    export namespace SetReceiptRulePositionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetReceiptRulePositionResponse) => any;
    }
    export interface TestRenderTemplateRequest {
            /**
                * <p>The name of the template that you want to render.</p>
                */
            TemplateName: string | undefined;
            /**
                * <p>A list of replacement values to apply to the template. This parameter is a JSON
                *             object, typically consisting of key-value pairs in which the keys correspond to
                *             replacement tags in the email template.</p>
                */
            TemplateData: string | undefined;
    }
    export namespace TestRenderTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestRenderTemplateRequest) => any;
    }
    export interface TestRenderTemplateResponse {
            /**
                * <p>The complete MIME message rendered by applying the data in the TemplateData parameter
                *             to the template specified in the TemplateName parameter.</p>
                */
            RenderedTemplate?: string;
    }
    export namespace TestRenderTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestRenderTemplateResponse) => any;
    }
    /**
        * <p>Represents a request to enable or disable the email sending capabilities for your
        *             entire Amazon SES account.</p>
        */
    export interface UpdateAccountSendingEnabledRequest {
            /**
                * <p>Describes whether email sending is enabled or disabled for your Amazon SES account in the
                *             current AWS Region.</p>
                */
            Enabled?: boolean;
    }
    export namespace UpdateAccountSendingEnabledRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccountSendingEnabledRequest) => any;
    }
    /**
        * <p>Represents a request to update the event destination of a configuration set.
        *             Configuration sets enable you to publish email sending events. For information about
        *             using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface UpdateConfigurationSetEventDestinationRequest {
            /**
                * <p>The name of the configuration set that contains the event destination that you want to
                *             update.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>The event destination object that you want to apply to the specified configuration
                *             set.</p>
                */
            EventDestination: EventDestination | undefined;
    }
    export namespace UpdateConfigurationSetEventDestinationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetEventDestinationRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface UpdateConfigurationSetEventDestinationResponse {
    }
    export namespace UpdateConfigurationSetEventDestinationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetEventDestinationResponse) => any;
    }
    /**
        * <p>Represents a request to modify the reputation metric publishing settings for a
        *             configuration set.</p>
        */
    export interface UpdateConfigurationSetReputationMetricsEnabledRequest {
            /**
                * <p>The name of the configuration set that you want to update.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>Describes whether or not Amazon SES will publish reputation metrics for the configuration
                *             set, such as bounce and complaint rates, to Amazon CloudWatch.</p>
                */
            Enabled: boolean | undefined;
    }
    export namespace UpdateConfigurationSetReputationMetricsEnabledRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetReputationMetricsEnabledRequest) => any;
    }
    /**
        * <p>Represents a request to enable or disable the email sending capabilities for a
        *             specific configuration set.</p>
        */
    export interface UpdateConfigurationSetSendingEnabledRequest {
            /**
                * <p>The name of the configuration set that you want to update.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>Describes whether email sending is enabled or disabled for the configuration set.
                *         </p>
                */
            Enabled: boolean | undefined;
    }
    export namespace UpdateConfigurationSetSendingEnabledRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetSendingEnabledRequest) => any;
    }
    /**
        * <p>Represents a request to update the tracking options for a configuration set. </p>
        */
    export interface UpdateConfigurationSetTrackingOptionsRequest {
            /**
                * <p>The name of the configuration set for which you want to update the custom tracking
                *             domain.</p>
                */
            ConfigurationSetName: string | undefined;
            /**
                * <p>A domain that is used to redirect email recipients to an Amazon SES-operated domain. This
                *             domain captures open and click events generated by Amazon SES emails.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/configure-custom-open-click-domains.html">Configuring
                *                 Custom Domains to Handle Open and Click Tracking</a> in the <i>Amazon SES
                *                 Developer Guide</i>.</p>
                */
            TrackingOptions: TrackingOptions | undefined;
    }
    export namespace UpdateConfigurationSetTrackingOptionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetTrackingOptionsRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface UpdateConfigurationSetTrackingOptionsResponse {
    }
    export namespace UpdateConfigurationSetTrackingOptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationSetTrackingOptionsResponse) => any;
    }
    /**
        * <p>Represents a request to update an existing custom verification email template.</p>
        */
    export interface UpdateCustomVerificationEmailTemplateRequest {
            /**
                * <p>The name of the custom verification email template that you want to update.</p>
                */
            TemplateName: string | undefined;
            /**
                * <p>The email address that the custom verification email is sent from.</p>
                */
            FromEmailAddress?: string;
            /**
                * <p>The subject line of the custom verification email.</p>
                */
            TemplateSubject?: string;
            /**
                * <p>The content of the custom verification email. The total size of the email must be less
                *             than 10 MB. The message body may contain HTML, with some limitations. For more
                *             information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/custom-verification-emails.html#custom-verification-emails-faq">Custom Verification Email Frequently Asked Questions</a> in the <i>Amazon SES
                *                 Developer Guide</i>.</p>
                */
            TemplateContent?: string;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is successfully verified.</p>
                */
            SuccessRedirectionURL?: string;
            /**
                * <p>The URL that the recipient of the verification email is sent to if his or her address
                *             is not successfully verified.</p>
                */
            FailureRedirectionURL?: string;
    }
    export namespace UpdateCustomVerificationEmailTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateCustomVerificationEmailTemplateRequest) => any;
    }
    /**
        * <p>Represents a request to update a receipt rule. You use receipt rules to receive email
        *             with Amazon SES. For more information, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-concepts.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface UpdateReceiptRuleRequest {
            /**
                * <p>The name of the receipt rule set that the receipt rule belongs to.</p>
                */
            RuleSetName: string | undefined;
            /**
                * <p>A data structure that contains the updated receipt rule information.</p>
                */
            Rule: ReceiptRule | undefined;
    }
    export namespace UpdateReceiptRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateReceiptRuleRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface UpdateReceiptRuleResponse {
    }
    export namespace UpdateReceiptRuleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateReceiptRuleResponse) => any;
    }
    export interface UpdateTemplateRequest {
            /**
                * <p>The content of the email, composed of a subject line, an HTML part, and a text-only
                *             part.</p>
                */
            Template: Template | undefined;
    }
    export namespace UpdateTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplateRequest) => any;
    }
    export interface UpdateTemplateResponse {
    }
    export namespace UpdateTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTemplateResponse) => any;
    }
    /**
        * <p>Represents a request to generate the CNAME records needed to set up Easy DKIM with
        *             Amazon SES. For more information about setting up Easy DKIM, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface VerifyDomainDkimRequest {
            /**
                * <p>The name of the domain to be verified for Easy DKIM signing.</p>
                */
            Domain: string | undefined;
    }
    export namespace VerifyDomainDkimRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyDomainDkimRequest) => any;
    }
    /**
        * <p>Returns CNAME records that you must publish to the DNS server of your domain to set up
        *             Easy DKIM with Amazon SES.</p>
        */
    export interface VerifyDomainDkimResponse {
            /**
                * <p>A set of character strings that represent the domain's identity. If the identity is an
                *             email address, the tokens represent the domain of that address.</p>
                *         <p>Using these tokens, you need to create DNS CNAME records that point to DKIM public
                *             keys that are hosted by Amazon SES. Amazon Web Services eventually detects that you've updated your DNS
                *             records. This detection process might take up to 72 hours. After successful detection,
                *             Amazon SES is able to DKIM-sign email originating from that domain. (This only applies to
                *             domain identities, not email address identities.)</p>
                *         <p>For more information about creating DNS records using DKIM tokens, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim.html">Amazon SES Developer
                *                 Guide</a>.</p>
                */
            DkimTokens: string[] | undefined;
    }
    export namespace VerifyDomainDkimResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyDomainDkimResponse) => any;
    }
    /**
        * <p>Represents a request to begin Amazon SES domain verification and to generate the TXT
        *             records that you must publish to the DNS server of your domain to complete the
        *             verification. For information about domain verification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domains.html">Amazon SES
        *                 Developer Guide</a>.</p>
        */
    export interface VerifyDomainIdentityRequest {
            /**
                * <p>The domain to be verified.</p>
                */
            Domain: string | undefined;
    }
    export namespace VerifyDomainIdentityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyDomainIdentityRequest) => any;
    }
    /**
        * <p>Returns a TXT record that you must publish to the DNS server of your domain to
        *             complete domain verification with Amazon SES.</p>
        */
    export interface VerifyDomainIdentityResponse {
            /**
                * <p>A TXT record that you must place in the DNS settings of the domain to complete domain
                *             verification with Amazon SES.</p>
                *         <p>As Amazon SES searches for the TXT record, the domain's verification status is "Pending".
                *             When Amazon SES detects the record, the domain's verification status changes to "Success". If
                *             Amazon SES is unable to detect the record within 72 hours, the domain's verification status
                *             changes to "Failed." In that case, if you still want to verify the domain, you must
                *             restart the verification process from the beginning.</p>
                */
            VerificationToken: string | undefined;
    }
    export namespace VerifyDomainIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyDomainIdentityResponse) => any;
    }
    /**
        * <p>Represents a request to begin email address verification with Amazon SES. For information
        *             about email address verification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface VerifyEmailAddressRequest {
            /**
                * <p>The email address to be verified.</p>
                */
            EmailAddress: string | undefined;
    }
    export namespace VerifyEmailAddressRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyEmailAddressRequest) => any;
    }
    /**
        * <p>Represents a request to begin email address verification with Amazon SES. For information
        *             about email address verification, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html">Amazon SES Developer
        *                 Guide</a>.</p>
        */
    export interface VerifyEmailIdentityRequest {
            /**
                * <p>The email address to be verified.</p>
                */
            EmailAddress: string | undefined;
    }
    export namespace VerifyEmailIdentityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyEmailIdentityRequest) => any;
    }
    /**
        * <p>An empty element returned on a successful request.</p>
        */
    export interface VerifyEmailIdentityResponse {
    }
    export namespace VerifyEmailIdentityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VerifyEmailIdentityResponse) => any;
    }
}

declare module '@aws-sdk/client-ses/node_modules/@aws-sdk/client-ses/dist-types/models/SESServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SES service.
        */
    export class SESServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

