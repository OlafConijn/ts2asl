// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-appconfig' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AppConfigClient } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { CreateApplicationCommandInput, CreateApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateApplicationCommand";
    import { CreateConfigurationProfileCommandInput, CreateConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateConfigurationProfileCommand";
    import { CreateDeploymentStrategyCommandInput, CreateDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateDeploymentStrategyCommand";
    import { CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateEnvironmentCommand";
    import { CreateExtensionAssociationCommandInput, CreateExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateExtensionAssociationCommand";
    import { CreateExtensionCommandInput, CreateExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateExtensionCommand";
    import { CreateHostedConfigurationVersionCommandInput, CreateHostedConfigurationVersionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateHostedConfigurationVersionCommand";
    import { DeleteApplicationCommandInput, DeleteApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteApplicationCommand";
    import { DeleteConfigurationProfileCommandInput, DeleteConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteConfigurationProfileCommand";
    import { DeleteDeploymentStrategyCommandInput, DeleteDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteDeploymentStrategyCommand";
    import { DeleteEnvironmentCommandInput, DeleteEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteEnvironmentCommand";
    import { DeleteExtensionAssociationCommandInput, DeleteExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteExtensionAssociationCommand";
    import { DeleteExtensionCommandInput, DeleteExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteExtensionCommand";
    import { DeleteHostedConfigurationVersionCommandInput, DeleteHostedConfigurationVersionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteHostedConfigurationVersionCommand";
    import { GetApplicationCommandInput, GetApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetApplicationCommand";
    import { GetConfigurationCommandInput, GetConfigurationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetConfigurationCommand";
    import { GetConfigurationProfileCommandInput, GetConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetConfigurationProfileCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetDeploymentCommand";
    import { GetDeploymentStrategyCommandInput, GetDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetDeploymentStrategyCommand";
    import { GetEnvironmentCommandInput, GetEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetEnvironmentCommand";
    import { GetExtensionAssociationCommandInput, GetExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetExtensionAssociationCommand";
    import { GetExtensionCommandInput, GetExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetExtensionCommand";
    import { GetHostedConfigurationVersionCommandInput, GetHostedConfigurationVersionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetHostedConfigurationVersionCommand";
    import { ListApplicationsCommandInput, ListApplicationsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListApplicationsCommand";
    import { ListConfigurationProfilesCommandInput, ListConfigurationProfilesCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListConfigurationProfilesCommand";
    import { ListDeploymentsCommandInput, ListDeploymentsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListDeploymentsCommand";
    import { ListDeploymentStrategiesCommandInput, ListDeploymentStrategiesCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListDeploymentStrategiesCommand";
    import { ListEnvironmentsCommandInput, ListEnvironmentsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListEnvironmentsCommand";
    import { ListExtensionAssociationsCommandInput, ListExtensionAssociationsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListExtensionAssociationsCommand";
    import { ListExtensionsCommandInput, ListExtensionsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListExtensionsCommand";
    import { ListHostedConfigurationVersionsCommandInput, ListHostedConfigurationVersionsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListHostedConfigurationVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListTagsForResourceCommand";
    import { StartDeploymentCommandInput, StartDeploymentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/StartDeploymentCommand";
    import { StopDeploymentCommandInput, StopDeploymentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/StopDeploymentCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UntagResourceCommand";
    import { UpdateApplicationCommandInput, UpdateApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateApplicationCommand";
    import { UpdateConfigurationProfileCommandInput, UpdateConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateConfigurationProfileCommand";
    import { UpdateDeploymentStrategyCommandInput, UpdateDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateDeploymentStrategyCommand";
    import { UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateEnvironmentCommand";
    import { UpdateExtensionAssociationCommandInput, UpdateExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateExtensionAssociationCommand";
    import { UpdateExtensionCommandInput, UpdateExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateExtensionCommand";
    import { ValidateConfigurationCommandInput, ValidateConfigurationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ValidateConfigurationCommand";
    /**
        * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly
        *          deploy application configurations. AppConfig supports controlled deployments to
        *          applications of any size and includes built-in validation checks and monitoring. You can
        *          use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers,
        *          mobile applications, or IoT devices.</p>
        *          <p>To prevent errors when deploying application configurations, especially for production
        *          systems where a simple typo could cause an unexpected outage, AppConfig includes
        *          validators. A validator provides a syntactic or semantic check to ensure that the
        *          configuration you want to deploy works as intended. To validate your application
        *          configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against
        *          the configuration. The configuration deployment or update can only proceed when the
        *          configuration data is valid.</p>
        *          <p>During a configuration deployment, AppConfig monitors the application to
        *          ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can
        *          configure a deployment strategy for each application or environment that includes
        *          deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error
        *          monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back
        *          to the previous version. </p>
        *          <p>AppConfig supports multiple use cases. Here are some examples:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Feature flags</b>: Use AppConfig to turn on
        *                new features that require a timely deployment, such as a product launch or
        *                announcement. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Application tuning</b>: Use AppConfig to
        *                carefully introduce changes to your application that can only be tested with
        *                production traffic.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Allow list</b>: Use AppConfig to allow
        *                premium subscribers to access paid content. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Operational issues</b>: Use AppConfig to
        *                reduce stress on your application when a dependency or other external factor impacts
        *                the system.</p>
        *             </li>
        *          </ul>
        *          <p>This reference is intended to be used with the <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html">AppConfig User
        *          Guide</a>.</p>
        */
    export class AppConfig extends AppConfigClient {
            /**
                * <p>Creates an application. In AppConfig, an application is simply an
                *          organizational construct like a folder. This organizational construct has a relationship
                *          with some unit of executable code. For example, you could create an application called
                *          MyMobileApp to organize and manage configuration data for a mobile application installed by
                *          your users.</p>
                */
            createApplication(args: CreateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<CreateApplicationCommandOutput>;
            createApplication(args: CreateApplicationCommandInput, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
            createApplication(args: CreateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApplicationCommandOutput) => void): void;
            /**
                * <p>Creates a configuration profile, which is information that enables AppConfig
                *          to access the configuration source. Valid configuration sources include the AppConfig hosted configuration store, Amazon Web Services Systems Manager (SSM) documents, SSM Parameter Store
                *          parameters, Amazon S3 objects, or any <a href="http://docs.aws.amazon.com/codepipeline/latest/userguide/integrations-action-type.html#integrations-source">integration source
                *             action</a> supported by CodePipeline. A configuration profile includes the following
                *          information:</p>
                *
                *          <ul>
                *             <li>
                *                <p>The URI location of the configuration data.</p>
                *             </li>
                *             <li>
                *                <p>The Identity and Access Management (IAM) role that provides access to the configuration data.</p>
                *             </li>
                *             <li>
                *                <p>A validator for the configuration data. Available validators include either a JSON
                *                Schema or an Amazon Web Services Lambda function.</p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-configuration-and-profile.html">Create a
                *             Configuration and a Configuration Profile</a> in the <i>AppConfig
                *             User Guide</i>.</p>
                */
            createConfigurationProfile(args: CreateConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationProfileCommandOutput>;
            createConfigurationProfile(args: CreateConfigurationProfileCommandInput, cb: (err: any, data?: CreateConfigurationProfileCommandOutput) => void): void;
            createConfigurationProfile(args: CreateConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationProfileCommandOutput) => void): void;
            /**
                * <p>Creates a deployment strategy that defines important criteria for rolling out your
                *          configuration to the designated targets. A deployment strategy includes the overall
                *          duration required, a percentage of targets to receive the deployment during each interval,
                *          an algorithm that defines how percentage grows, and bake time.</p>
                */
            createDeploymentStrategy(args: CreateDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeploymentStrategyCommandOutput>;
            createDeploymentStrategy(args: CreateDeploymentStrategyCommandInput, cb: (err: any, data?: CreateDeploymentStrategyCommandOutput) => void): void;
            createDeploymentStrategy(args: CreateDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeploymentStrategyCommandOutput) => void): void;
            /**
                * <p>Creates an environment. For each application, you define one or more environments. An
                *          environment is a deployment group of AppConfig targets, such as applications in a
                *             <code>Beta</code> or <code>Production</code> environment. You can also define
                *          environments for application subcomponents such as the <code>Web</code>,
                *             <code>Mobile</code> and <code>Back-end</code> components for your application. You can
                *          configure Amazon CloudWatch alarms for each environment. The system monitors alarms during a
                *          configuration deployment. If an alarm is triggered, the system rolls back the
                *          configuration.</p>
                */
            createEnvironment(args: CreateEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateEnvironmentCommandOutput>;
            createEnvironment(args: CreateEnvironmentCommandInput, cb: (err: any, data?: CreateEnvironmentCommandOutput) => void): void;
            createEnvironment(args: CreateEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEnvironmentCommandOutput) => void): void;
            /**
                * <p>Creates an AppConfig extension. An extension augments your ability to inject
                *          logic or behavior at different points during the AppConfig workflow of creating
                *          or deploying a configuration.</p>
                *          <p>You can create your own extensions or use the Amazon Web Services-authored extensions provided by
                *             AppConfig. For most use-cases, to create your own extension, you must create
                *          an Lambda function to perform any computation and processing defined in the
                *          extension. For more information about extensions, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
                *                AppConfig extensions</a> in the
                *          <i>AppConfig User Guide</i>.</p>
                */
            createExtension(args: CreateExtensionCommandInput, options?: __HttpHandlerOptions): Promise<CreateExtensionCommandOutput>;
            createExtension(args: CreateExtensionCommandInput, cb: (err: any, data?: CreateExtensionCommandOutput) => void): void;
            createExtension(args: CreateExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExtensionCommandOutput) => void): void;
            /**
                * <p>When you create an extension or configure an Amazon Web Services-authored extension, you
                *          associate the extension with an AppConfig application, environment, or
                *          configuration profile. For example, you can choose to run the <code>AppConfig
                *             deployment events to Amazon SNS</code>
                *          Amazon Web Services-authored extension and receive notifications on an Amazon SNS
                *          topic anytime a configuration deployment is started for a specific application. Defining
                *          which extension to associate with an AppConfig resource is called an
                *             <i>extension association</i>. An extension association is a specified
                *          relationship between an extension and an AppConfig resource, such as an
                *          application or a configuration profile. For more information about extensions and
                *          associations, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
                *                AppConfig extensions</a> in the
                *          <i>AppConfig User Guide</i>.</p>
                */
            createExtensionAssociation(args: CreateExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<CreateExtensionAssociationCommandOutput>;
            createExtensionAssociation(args: CreateExtensionAssociationCommandInput, cb: (err: any, data?: CreateExtensionAssociationCommandOutput) => void): void;
            createExtensionAssociation(args: CreateExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExtensionAssociationCommandOutput) => void): void;
            /**
                * <p>Creates a new configuration in the AppConfig hosted configuration
                *          store.</p>
                */
            createHostedConfigurationVersion(args: CreateHostedConfigurationVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateHostedConfigurationVersionCommandOutput>;
            createHostedConfigurationVersion(args: CreateHostedConfigurationVersionCommandInput, cb: (err: any, data?: CreateHostedConfigurationVersionCommandOutput) => void): void;
            createHostedConfigurationVersion(args: CreateHostedConfigurationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHostedConfigurationVersionCommandOutput) => void): void;
            /**
                * <p>Deletes an application. Deleting an application does not delete a configuration from a
                *          host.</p>
                */
            deleteApplication(args: DeleteApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApplicationCommandOutput>;
            deleteApplication(args: DeleteApplicationCommandInput, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
            deleteApplication(args: DeleteApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApplicationCommandOutput) => void): void;
            /**
                * <p>Deletes a configuration profile. Deleting a configuration profile does not delete a
                *          configuration from a host.</p>
                */
            deleteConfigurationProfile(args: DeleteConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationProfileCommandOutput>;
            deleteConfigurationProfile(args: DeleteConfigurationProfileCommandInput, cb: (err: any, data?: DeleteConfigurationProfileCommandOutput) => void): void;
            deleteConfigurationProfile(args: DeleteConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationProfileCommandOutput) => void): void;
            /**
                * <p>Deletes a deployment strategy. Deleting a deployment strategy does not delete a
                *          configuration from a host.</p>
                */
            deleteDeploymentStrategy(args: DeleteDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeploymentStrategyCommandOutput>;
            deleteDeploymentStrategy(args: DeleteDeploymentStrategyCommandInput, cb: (err: any, data?: DeleteDeploymentStrategyCommandOutput) => void): void;
            deleteDeploymentStrategy(args: DeleteDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeploymentStrategyCommandOutput) => void): void;
            /**
                * <p>Deletes an environment. Deleting an environment does not delete a configuration from a
                *          host.</p>
                */
            deleteEnvironment(args: DeleteEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEnvironmentCommandOutput>;
            deleteEnvironment(args: DeleteEnvironmentCommandInput, cb: (err: any, data?: DeleteEnvironmentCommandOutput) => void): void;
            deleteEnvironment(args: DeleteEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEnvironmentCommandOutput) => void): void;
            /**
                * <p>Deletes an AppConfig extension. You must delete all associations to an
                *          extension before you delete the extension.</p>
                */
            deleteExtension(args: DeleteExtensionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExtensionCommandOutput>;
            deleteExtension(args: DeleteExtensionCommandInput, cb: (err: any, data?: DeleteExtensionCommandOutput) => void): void;
            deleteExtension(args: DeleteExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExtensionCommandOutput) => void): void;
            /**
                * <p>Deletes an extension association. This action doesn't delete extensions defined in the
                *          association.</p>
                */
            deleteExtensionAssociation(args: DeleteExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExtensionAssociationCommandOutput>;
            deleteExtensionAssociation(args: DeleteExtensionAssociationCommandInput, cb: (err: any, data?: DeleteExtensionAssociationCommandOutput) => void): void;
            deleteExtensionAssociation(args: DeleteExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExtensionAssociationCommandOutput) => void): void;
            /**
                * <p>Deletes a version of a configuration from the AppConfig hosted configuration
                *          store.</p>
                */
            deleteHostedConfigurationVersion(args: DeleteHostedConfigurationVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteHostedConfigurationVersionCommandOutput>;
            deleteHostedConfigurationVersion(args: DeleteHostedConfigurationVersionCommandInput, cb: (err: any, data?: DeleteHostedConfigurationVersionCommandOutput) => void): void;
            deleteHostedConfigurationVersion(args: DeleteHostedConfigurationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteHostedConfigurationVersionCommandOutput) => void): void;
            /**
                * <p>Retrieves information about an application.</p>
                */
            getApplication(args: GetApplicationCommandInput, options?: __HttpHandlerOptions): Promise<GetApplicationCommandOutput>;
            getApplication(args: GetApplicationCommandInput, cb: (err: any, data?: GetApplicationCommandOutput) => void): void;
            getApplication(args: GetApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApplicationCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Retrieves the latest deployed configuration.</p>
                *
                *          <important>
                *             <p>Note the following important information.</p>
                *             <ul>
                *                <li>
                *                   <p>This API action has been deprecated. Calls to receive configuration data should
                *                   use the <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_StartConfigurationSession.html">StartConfigurationSession</a> and <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html">GetLatestConfiguration</a> APIs instead. </p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <code>GetConfiguration</code> is a priced call. For more information, see
                *                      <a href="https://aws.amazon.com/systems-manager/pricing/">Pricing</a>.</p>
                *                </li>
                *                <li>
                *                   <p>AppConfig uses the value of the
                *                      <code>ClientConfigurationVersion</code> parameter to identify the configuration
                *                   version on your clients. If you don’t send <code>ClientConfigurationVersion</code>
                *                   with each call to <code>GetConfiguration</code>, your clients receive the current
                *                   configuration. You are charged each time your clients receive a
                *                   configuration.</p>
                *                   <p>To avoid excess charges, we recommend you use the <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/StartConfigurationSession.html">StartConfigurationSession</a> and <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/GetLatestConfiguration.html">GetLatestConfiguration</a> APIs, which track the client configuration
                *                   version on your behalf. If you choose to continue using
                *                      <code>GetConfiguration</code>, we recommend that you include the
                *                      <code>ClientConfigurationVersion</code> value with every call to
                *                      <code>GetConfiguration</code>. The value to use for
                *                      <code>ClientConfigurationVersion</code> comes from the
                *                      <code>ConfigurationVersion</code> attribute returned by
                *                      <code>GetConfiguration</code> when there is new or updated data, and should be
                *                   saved for subsequent calls to <code>GetConfiguration</code>.</p>
                *                </li>
                *             </ul>
                *          </important>
                */
            getConfiguration(args: GetConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationCommandOutput>;
            getConfiguration(args: GetConfigurationCommandInput, cb: (err: any, data?: GetConfigurationCommandOutput) => void): void;
            getConfiguration(args: GetConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a configuration profile.</p>
                */
            getConfigurationProfile(args: GetConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetConfigurationProfileCommandOutput>;
            getConfigurationProfile(args: GetConfigurationProfileCommandInput, cb: (err: any, data?: GetConfigurationProfileCommandOutput) => void): void;
            getConfigurationProfile(args: GetConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConfigurationProfileCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a configuration deployment.</p>
                */
            getDeployment(args: GetDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentCommandOutput>;
            getDeployment(args: GetDeploymentCommandInput, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            getDeployment(args: GetDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a deployment strategy. A deployment strategy defines
                *          important criteria for rolling out your configuration to the designated targets. A
                *          deployment strategy includes the overall duration required, a percentage of targets to
                *          receive the deployment during each interval, an algorithm that defines how percentage
                *          grows, and bake time.</p>
                */
            getDeploymentStrategy(args: GetDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentStrategyCommandOutput>;
            getDeploymentStrategy(args: GetDeploymentStrategyCommandInput, cb: (err: any, data?: GetDeploymentStrategyCommandOutput) => void): void;
            getDeploymentStrategy(args: GetDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentStrategyCommandOutput) => void): void;
            /**
                * <p>Retrieves information about an environment. An environment is a deployment group of
                *             AppConfig applications, such as applications in a <code>Production</code>
                *          environment or in an <code>EU_Region</code> environment. Each configuration deployment
                *          targets an environment. You can enable one or more Amazon CloudWatch alarms for an environment. If
                *          an alarm is triggered during a deployment, AppConfig roles back the
                *          configuration.</p>
                */
            getEnvironment(args: GetEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<GetEnvironmentCommandOutput>;
            getEnvironment(args: GetEnvironmentCommandInput, cb: (err: any, data?: GetEnvironmentCommandOutput) => void): void;
            getEnvironment(args: GetEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEnvironmentCommandOutput) => void): void;
            /**
                * <p>Returns information about an AppConfig extension.</p>
                */
            getExtension(args: GetExtensionCommandInput, options?: __HttpHandlerOptions): Promise<GetExtensionCommandOutput>;
            getExtension(args: GetExtensionCommandInput, cb: (err: any, data?: GetExtensionCommandOutput) => void): void;
            getExtension(args: GetExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExtensionCommandOutput) => void): void;
            /**
                * <p>Returns information about an AppConfig extension association. For more
                *          information about extensions and associations, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
                *                AppConfig extensions</a> in the
                *          <i>AppConfig User Guide</i>.</p>
                */
            getExtensionAssociation(args: GetExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<GetExtensionAssociationCommandOutput>;
            getExtensionAssociation(args: GetExtensionAssociationCommandInput, cb: (err: any, data?: GetExtensionAssociationCommandOutput) => void): void;
            getExtensionAssociation(args: GetExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExtensionAssociationCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a specific configuration version.</p>
                */
            getHostedConfigurationVersion(args: GetHostedConfigurationVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetHostedConfigurationVersionCommandOutput>;
            getHostedConfigurationVersion(args: GetHostedConfigurationVersionCommandInput, cb: (err: any, data?: GetHostedConfigurationVersionCommandOutput) => void): void;
            getHostedConfigurationVersion(args: GetHostedConfigurationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetHostedConfigurationVersionCommandOutput) => void): void;
            /**
                * <p>Lists all applications in your Amazon Web Services account.</p>
                */
            listApplications(args: ListApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<ListApplicationsCommandOutput>;
            listApplications(args: ListApplicationsCommandInput, cb: (err: any, data?: ListApplicationsCommandOutput) => void): void;
            listApplications(args: ListApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApplicationsCommandOutput) => void): void;
            /**
                * <p>Lists the configuration profiles for an application.</p>
                */
            listConfigurationProfiles(args: ListConfigurationProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationProfilesCommandOutput>;
            listConfigurationProfiles(args: ListConfigurationProfilesCommandInput, cb: (err: any, data?: ListConfigurationProfilesCommandOutput) => void): void;
            listConfigurationProfiles(args: ListConfigurationProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationProfilesCommandOutput) => void): void;
            /**
                * <p>Lists the deployments for an environment in descending deployment number order.</p>
                */
            listDeployments(args: ListDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeploymentsCommandOutput>;
            listDeployments(args: ListDeploymentsCommandInput, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
            listDeployments(args: ListDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
            /**
                * <p>Lists deployment strategies.</p>
                */
            listDeploymentStrategies(args: ListDeploymentStrategiesCommandInput, options?: __HttpHandlerOptions): Promise<ListDeploymentStrategiesCommandOutput>;
            listDeploymentStrategies(args: ListDeploymentStrategiesCommandInput, cb: (err: any, data?: ListDeploymentStrategiesCommandOutput) => void): void;
            listDeploymentStrategies(args: ListDeploymentStrategiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeploymentStrategiesCommandOutput) => void): void;
            /**
                * <p>Lists the environments for an application.</p>
                */
            listEnvironments(args: ListEnvironmentsCommandInput, options?: __HttpHandlerOptions): Promise<ListEnvironmentsCommandOutput>;
            listEnvironments(args: ListEnvironmentsCommandInput, cb: (err: any, data?: ListEnvironmentsCommandOutput) => void): void;
            listEnvironments(args: ListEnvironmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEnvironmentsCommandOutput) => void): void;
            /**
                * <p>Lists all AppConfig extension associations in the account. For more
                *          information about extensions and associations, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
                *                AppConfig extensions</a> in the
                *          <i>AppConfig User Guide</i>.</p>
                */
            listExtensionAssociations(args: ListExtensionAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<ListExtensionAssociationsCommandOutput>;
            listExtensionAssociations(args: ListExtensionAssociationsCommandInput, cb: (err: any, data?: ListExtensionAssociationsCommandOutput) => void): void;
            listExtensionAssociations(args: ListExtensionAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExtensionAssociationsCommandOutput) => void): void;
            /**
                * <p>Lists all custom and Amazon Web Services-authored AppConfig extensions in the
                *          account. For more information about extensions, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
                *                AppConfig extensions</a> in the
                *          <i>AppConfig User Guide</i>.</p>
                */
            listExtensions(args: ListExtensionsCommandInput, options?: __HttpHandlerOptions): Promise<ListExtensionsCommandOutput>;
            listExtensions(args: ListExtensionsCommandInput, cb: (err: any, data?: ListExtensionsCommandOutput) => void): void;
            listExtensions(args: ListExtensionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExtensionsCommandOutput) => void): void;
            /**
                * <p>Lists configurations stored in the AppConfig hosted configuration store by
                *          version.</p>
                */
            listHostedConfigurationVersions(args: ListHostedConfigurationVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListHostedConfigurationVersionsCommandOutput>;
            listHostedConfigurationVersions(args: ListHostedConfigurationVersionsCommandInput, cb: (err: any, data?: ListHostedConfigurationVersionsCommandOutput) => void): void;
            listHostedConfigurationVersions(args: ListHostedConfigurationVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListHostedConfigurationVersionsCommandOutput) => void): void;
            /**
                * <p>Retrieves the list of key-value tags assigned to the resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Starts a deployment.</p>
                */
            startDeployment(args: StartDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<StartDeploymentCommandOutput>;
            startDeployment(args: StartDeploymentCommandInput, cb: (err: any, data?: StartDeploymentCommandOutput) => void): void;
            startDeployment(args: StartDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDeploymentCommandOutput) => void): void;
            /**
                * <p>Stops a deployment. This API action works only on deployments that have a status of
                *             <code>DEPLOYING</code>. This action moves the deployment to a status of
                *             <code>ROLLED_BACK</code>.</p>
                */
            stopDeployment(args: StopDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<StopDeploymentCommandOutput>;
            stopDeployment(args: StopDeploymentCommandInput, cb: (err: any, data?: StopDeploymentCommandOutput) => void): void;
            stopDeployment(args: StopDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDeploymentCommandOutput) => void): void;
            /**
                * <p>Assigns metadata to an AppConfig resource. Tags help organize and categorize
                *          your AppConfig resources. Each tag consists of a key and an optional value, both
                *          of which you define. You can specify a maximum of 50 tags for a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deletes a tag key and value from an AppConfig resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an application.</p>
                */
            updateApplication(args: UpdateApplicationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApplicationCommandOutput>;
            updateApplication(args: UpdateApplicationCommandInput, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
            updateApplication(args: UpdateApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApplicationCommandOutput) => void): void;
            /**
                * <p>Updates a configuration profile.</p>
                */
            updateConfigurationProfile(args: UpdateConfigurationProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationProfileCommandOutput>;
            updateConfigurationProfile(args: UpdateConfigurationProfileCommandInput, cb: (err: any, data?: UpdateConfigurationProfileCommandOutput) => void): void;
            updateConfigurationProfile(args: UpdateConfigurationProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationProfileCommandOutput) => void): void;
            /**
                * <p>Updates a deployment strategy.</p>
                */
            updateDeploymentStrategy(args: UpdateDeploymentStrategyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeploymentStrategyCommandOutput>;
            updateDeploymentStrategy(args: UpdateDeploymentStrategyCommandInput, cb: (err: any, data?: UpdateDeploymentStrategyCommandOutput) => void): void;
            updateDeploymentStrategy(args: UpdateDeploymentStrategyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeploymentStrategyCommandOutput) => void): void;
            /**
                * <p>Updates an environment.</p>
                */
            updateEnvironment(args: UpdateEnvironmentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateEnvironmentCommandOutput>;
            updateEnvironment(args: UpdateEnvironmentCommandInput, cb: (err: any, data?: UpdateEnvironmentCommandOutput) => void): void;
            updateEnvironment(args: UpdateEnvironmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateEnvironmentCommandOutput) => void): void;
            /**
                * <p>Updates an AppConfig extension. For more information about extensions, see
                *             <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
                *                AppConfig extensions</a> in the
                *          <i>AppConfig User Guide</i>.</p>
                */
            updateExtension(args: UpdateExtensionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExtensionCommandOutput>;
            updateExtension(args: UpdateExtensionCommandInput, cb: (err: any, data?: UpdateExtensionCommandOutput) => void): void;
            updateExtension(args: UpdateExtensionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExtensionCommandOutput) => void): void;
            /**
                * <p>Updates an association. For more information about extensions and associations, see
                *             <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
                *                AppConfig extensions</a> in the
                *          <i>AppConfig User Guide</i>.</p>
                */
            updateExtensionAssociation(args: UpdateExtensionAssociationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExtensionAssociationCommandOutput>;
            updateExtensionAssociation(args: UpdateExtensionAssociationCommandInput, cb: (err: any, data?: UpdateExtensionAssociationCommandOutput) => void): void;
            updateExtensionAssociation(args: UpdateExtensionAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExtensionAssociationCommandOutput) => void): void;
            /**
                * <p>Uses the validators in a configuration profile to validate a configuration.</p>
                */
            validateConfiguration(args: ValidateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<ValidateConfigurationCommandOutput>;
            validateConfiguration(args: ValidateConfigurationCommandInput, cb: (err: any, data?: ValidateConfigurationCommandOutput) => void): void;
            validateConfiguration(args: ValidateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ValidateConfigurationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateApplicationCommandInput, CreateApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateApplicationCommand";
    import { CreateConfigurationProfileCommandInput, CreateConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateConfigurationProfileCommand";
    import { CreateDeploymentStrategyCommandInput, CreateDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateDeploymentStrategyCommand";
    import { CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateEnvironmentCommand";
    import { CreateExtensionAssociationCommandInput, CreateExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateExtensionAssociationCommand";
    import { CreateExtensionCommandInput, CreateExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateExtensionCommand";
    import { CreateHostedConfigurationVersionCommandInput, CreateHostedConfigurationVersionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateHostedConfigurationVersionCommand";
    import { DeleteApplicationCommandInput, DeleteApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteApplicationCommand";
    import { DeleteConfigurationProfileCommandInput, DeleteConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteConfigurationProfileCommand";
    import { DeleteDeploymentStrategyCommandInput, DeleteDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteDeploymentStrategyCommand";
    import { DeleteEnvironmentCommandInput, DeleteEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteEnvironmentCommand";
    import { DeleteExtensionAssociationCommandInput, DeleteExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteExtensionAssociationCommand";
    import { DeleteExtensionCommandInput, DeleteExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteExtensionCommand";
    import { DeleteHostedConfigurationVersionCommandInput, DeleteHostedConfigurationVersionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteHostedConfigurationVersionCommand";
    import { GetApplicationCommandInput, GetApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetApplicationCommand";
    import { GetConfigurationCommandInput, GetConfigurationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetConfigurationCommand";
    import { GetConfigurationProfileCommandInput, GetConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetConfigurationProfileCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetDeploymentCommand";
    import { GetDeploymentStrategyCommandInput, GetDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetDeploymentStrategyCommand";
    import { GetEnvironmentCommandInput, GetEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetEnvironmentCommand";
    import { GetExtensionAssociationCommandInput, GetExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetExtensionAssociationCommand";
    import { GetExtensionCommandInput, GetExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetExtensionCommand";
    import { GetHostedConfigurationVersionCommandInput, GetHostedConfigurationVersionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetHostedConfigurationVersionCommand";
    import { ListApplicationsCommandInput, ListApplicationsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListApplicationsCommand";
    import { ListConfigurationProfilesCommandInput, ListConfigurationProfilesCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListConfigurationProfilesCommand";
    import { ListDeploymentsCommandInput, ListDeploymentsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListDeploymentsCommand";
    import { ListDeploymentStrategiesCommandInput, ListDeploymentStrategiesCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListDeploymentStrategiesCommand";
    import { ListEnvironmentsCommandInput, ListEnvironmentsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListEnvironmentsCommand";
    import { ListExtensionAssociationsCommandInput, ListExtensionAssociationsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListExtensionAssociationsCommand";
    import { ListExtensionsCommandInput, ListExtensionsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListExtensionsCommand";
    import { ListHostedConfigurationVersionsCommandInput, ListHostedConfigurationVersionsCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListHostedConfigurationVersionsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListTagsForResourceCommand";
    import { StartDeploymentCommandInput, StartDeploymentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/StartDeploymentCommand";
    import { StopDeploymentCommandInput, StopDeploymentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/StopDeploymentCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UntagResourceCommand";
    import { UpdateApplicationCommandInput, UpdateApplicationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateApplicationCommand";
    import { UpdateConfigurationProfileCommandInput, UpdateConfigurationProfileCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateConfigurationProfileCommand";
    import { UpdateDeploymentStrategyCommandInput, UpdateDeploymentStrategyCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateDeploymentStrategyCommand";
    import { UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateEnvironmentCommand";
    import { UpdateExtensionAssociationCommandInput, UpdateExtensionAssociationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateExtensionAssociationCommand";
    import { UpdateExtensionCommandInput, UpdateExtensionCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateExtensionCommand";
    import { ValidateConfigurationCommandInput, ValidateConfigurationCommandOutput } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ValidateConfigurationCommand";
    export type ServiceInputTypes = CreateApplicationCommandInput | CreateConfigurationProfileCommandInput | CreateDeploymentStrategyCommandInput | CreateEnvironmentCommandInput | CreateExtensionAssociationCommandInput | CreateExtensionCommandInput | CreateHostedConfigurationVersionCommandInput | DeleteApplicationCommandInput | DeleteConfigurationProfileCommandInput | DeleteDeploymentStrategyCommandInput | DeleteEnvironmentCommandInput | DeleteExtensionAssociationCommandInput | DeleteExtensionCommandInput | DeleteHostedConfigurationVersionCommandInput | GetApplicationCommandInput | GetConfigurationCommandInput | GetConfigurationProfileCommandInput | GetDeploymentCommandInput | GetDeploymentStrategyCommandInput | GetEnvironmentCommandInput | GetExtensionAssociationCommandInput | GetExtensionCommandInput | GetHostedConfigurationVersionCommandInput | ListApplicationsCommandInput | ListConfigurationProfilesCommandInput | ListDeploymentStrategiesCommandInput | ListDeploymentsCommandInput | ListEnvironmentsCommandInput | ListExtensionAssociationsCommandInput | ListExtensionsCommandInput | ListHostedConfigurationVersionsCommandInput | ListTagsForResourceCommandInput | StartDeploymentCommandInput | StopDeploymentCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateApplicationCommandInput | UpdateConfigurationProfileCommandInput | UpdateDeploymentStrategyCommandInput | UpdateEnvironmentCommandInput | UpdateExtensionAssociationCommandInput | UpdateExtensionCommandInput | ValidateConfigurationCommandInput;
    export type ServiceOutputTypes = CreateApplicationCommandOutput | CreateConfigurationProfileCommandOutput | CreateDeploymentStrategyCommandOutput | CreateEnvironmentCommandOutput | CreateExtensionAssociationCommandOutput | CreateExtensionCommandOutput | CreateHostedConfigurationVersionCommandOutput | DeleteApplicationCommandOutput | DeleteConfigurationProfileCommandOutput | DeleteDeploymentStrategyCommandOutput | DeleteEnvironmentCommandOutput | DeleteExtensionAssociationCommandOutput | DeleteExtensionCommandOutput | DeleteHostedConfigurationVersionCommandOutput | GetApplicationCommandOutput | GetConfigurationCommandOutput | GetConfigurationProfileCommandOutput | GetDeploymentCommandOutput | GetDeploymentStrategyCommandOutput | GetEnvironmentCommandOutput | GetExtensionAssociationCommandOutput | GetExtensionCommandOutput | GetHostedConfigurationVersionCommandOutput | ListApplicationsCommandOutput | ListConfigurationProfilesCommandOutput | ListDeploymentStrategiesCommandOutput | ListDeploymentsCommandOutput | ListEnvironmentsCommandOutput | ListExtensionAssociationsCommandOutput | ListExtensionsCommandOutput | ListHostedConfigurationVersionsCommandOutput | ListTagsForResourceCommandOutput | StartDeploymentCommandOutput | StopDeploymentCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateApplicationCommandOutput | UpdateConfigurationProfileCommandOutput | UpdateDeploymentStrategyCommandOutput | UpdateEnvironmentCommandOutput | UpdateExtensionAssociationCommandOutput | UpdateExtensionCommandOutput | ValidateConfigurationCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type AppConfigClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of AppConfigClient class constructor that set the region, credentials and other options.
        */
    export interface AppConfigClientConfig extends AppConfigClientConfigType {
    }
    type AppConfigClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of AppConfigClient class. This is resolved and normalized from the {@link AppConfigClientConfig | constructor configuration interface}.
        */
    export interface AppConfigClientResolvedConfig extends AppConfigClientResolvedConfigType {
    }
    /**
        * <p>Use AppConfig, a capability of Amazon Web Services Systems Manager, to create, manage, and quickly
        *          deploy application configurations. AppConfig supports controlled deployments to
        *          applications of any size and includes built-in validation checks and monitoring. You can
        *          use AppConfig with applications hosted on Amazon EC2 instances, Lambda, containers,
        *          mobile applications, or IoT devices.</p>
        *          <p>To prevent errors when deploying application configurations, especially for production
        *          systems where a simple typo could cause an unexpected outage, AppConfig includes
        *          validators. A validator provides a syntactic or semantic check to ensure that the
        *          configuration you want to deploy works as intended. To validate your application
        *          configuration data, you provide a schema or an Amazon Web Services Lambda function that runs against
        *          the configuration. The configuration deployment or update can only proceed when the
        *          configuration data is valid.</p>
        *          <p>During a configuration deployment, AppConfig monitors the application to
        *          ensure that the deployment is successful. If the system encounters an error, AppConfig rolls back the change to minimize impact for your application users. You can
        *          configure a deployment strategy for each application or environment that includes
        *          deployment criteria, including velocity, bake time, and alarms to monitor. Similar to error
        *          monitoring, if a deployment triggers an alarm, AppConfig automatically rolls back
        *          to the previous version. </p>
        *          <p>AppConfig supports multiple use cases. Here are some examples:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Feature flags</b>: Use AppConfig to turn on
        *                new features that require a timely deployment, such as a product launch or
        *                announcement. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Application tuning</b>: Use AppConfig to
        *                carefully introduce changes to your application that can only be tested with
        *                production traffic.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Allow list</b>: Use AppConfig to allow
        *                premium subscribers to access paid content. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Operational issues</b>: Use AppConfig to
        *                reduce stress on your application when a dependency or other external factor impacts
        *                the system.</p>
        *             </li>
        *          </ul>
        *          <p>This reference is intended to be used with the <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html">AppConfig User
        *          Guide</a>.</p>
        */
    export class AppConfigClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, AppConfigClientResolvedConfig> {
            /**
                * The resolved configuration of AppConfigClient class. This is resolved and normalized from the {@link AppConfigClientConfig | constructor configuration interface}.
                */
            readonly config: AppConfigClientResolvedConfig;
            constructor(configuration: AppConfigClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Application, CreateApplicationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface CreateApplicationCommandInput extends CreateApplicationRequest {
    }
    export interface CreateApplicationCommandOutput extends Application, __MetadataBearer {
    }
    /**
        * <p>Creates an application. In AppConfig, an application is simply an
        *          organizational construct like a folder. This organizational construct has a relationship
        *          with some unit of executable code. For example, you could create an application called
        *          MyMobileApp to organize and manage configuration data for a mobile application installed by
        *          your users.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, CreateApplicationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, CreateApplicationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new CreateApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApplicationCommandInput} for command's `input` shape.
        * @see {@link CreateApplicationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class CreateApplicationCommand extends $Command<CreateApplicationCommandInput, CreateApplicationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: CreateApplicationCommandInput;
            constructor(input: CreateApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApplicationCommandInput, CreateApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateConfigurationProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ConfigurationProfile, CreateConfigurationProfileRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface CreateConfigurationProfileCommandInput extends CreateConfigurationProfileRequest {
    }
    export interface CreateConfigurationProfileCommandOutput extends ConfigurationProfile, __MetadataBearer {
    }
    /**
        * <p>Creates a configuration profile, which is information that enables AppConfig
        *          to access the configuration source. Valid configuration sources include the AppConfig hosted configuration store, Amazon Web Services Systems Manager (SSM) documents, SSM Parameter Store
        *          parameters, Amazon S3 objects, or any <a href="http://docs.aws.amazon.com/codepipeline/latest/userguide/integrations-action-type.html#integrations-source">integration source
        *             action</a> supported by CodePipeline. A configuration profile includes the following
        *          information:</p>
        *
        *          <ul>
        *             <li>
        *                <p>The URI location of the configuration data.</p>
        *             </li>
        *             <li>
        *                <p>The Identity and Access Management (IAM) role that provides access to the configuration data.</p>
        *             </li>
        *             <li>
        *                <p>A validator for the configuration data. Available validators include either a JSON
        *                Schema or an Amazon Web Services Lambda function.</p>
        *             </li>
        *          </ul>
        *          <p>For more information, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-creating-configuration-and-profile.html">Create a
        *             Configuration and a Configuration Profile</a> in the <i>AppConfig
        *             User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, CreateConfigurationProfileCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, CreateConfigurationProfileCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new CreateConfigurationProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationProfileCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationProfileCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class CreateConfigurationProfileCommand extends $Command<CreateConfigurationProfileCommandInput, CreateConfigurationProfileCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: CreateConfigurationProfileCommandInput;
            constructor(input: CreateConfigurationProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationProfileCommandInput, CreateConfigurationProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateDeploymentStrategyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { CreateDeploymentStrategyRequest, DeploymentStrategy } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface CreateDeploymentStrategyCommandInput extends CreateDeploymentStrategyRequest {
    }
    export interface CreateDeploymentStrategyCommandOutput extends DeploymentStrategy, __MetadataBearer {
    }
    /**
        * <p>Creates a deployment strategy that defines important criteria for rolling out your
        *          configuration to the designated targets. A deployment strategy includes the overall
        *          duration required, a percentage of targets to receive the deployment during each interval,
        *          an algorithm that defines how percentage grows, and bake time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, CreateDeploymentStrategyCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, CreateDeploymentStrategyCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new CreateDeploymentStrategyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeploymentStrategyCommandInput} for command's `input` shape.
        * @see {@link CreateDeploymentStrategyCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class CreateDeploymentStrategyCommand extends $Command<CreateDeploymentStrategyCommandInput, CreateDeploymentStrategyCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: CreateDeploymentStrategyCommandInput;
            constructor(input: CreateDeploymentStrategyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeploymentStrategyCommandInput, CreateDeploymentStrategyCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { CreateEnvironmentRequest, Environment } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface CreateEnvironmentCommandInput extends CreateEnvironmentRequest {
    }
    export interface CreateEnvironmentCommandOutput extends Environment, __MetadataBearer {
    }
    /**
        * <p>Creates an environment. For each application, you define one or more environments. An
        *          environment is a deployment group of AppConfig targets, such as applications in a
        *             <code>Beta</code> or <code>Production</code> environment. You can also define
        *          environments for application subcomponents such as the <code>Web</code>,
        *             <code>Mobile</code> and <code>Back-end</code> components for your application. You can
        *          configure Amazon CloudWatch alarms for each environment. The system monitors alarms during a
        *          configuration deployment. If an alarm is triggered, the system rolls back the
        *          configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, CreateEnvironmentCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, CreateEnvironmentCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new CreateEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEnvironmentCommandInput} for command's `input` shape.
        * @see {@link CreateEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class CreateEnvironmentCommand extends $Command<CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: CreateEnvironmentCommandInput;
            constructor(input: CreateEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEnvironmentCommandInput, CreateEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateExtensionAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { CreateExtensionAssociationRequest, ExtensionAssociation } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface CreateExtensionAssociationCommandInput extends CreateExtensionAssociationRequest {
    }
    export interface CreateExtensionAssociationCommandOutput extends ExtensionAssociation, __MetadataBearer {
    }
    /**
        * <p>When you create an extension or configure an Amazon Web Services-authored extension, you
        *          associate the extension with an AppConfig application, environment, or
        *          configuration profile. For example, you can choose to run the <code>AppConfig
        *             deployment events to Amazon SNS</code>
        *          Amazon Web Services-authored extension and receive notifications on an Amazon SNS
        *          topic anytime a configuration deployment is started for a specific application. Defining
        *          which extension to associate with an AppConfig resource is called an
        *             <i>extension association</i>. An extension association is a specified
        *          relationship between an extension and an AppConfig resource, such as an
        *          application or a configuration profile. For more information about extensions and
        *          associations, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, CreateExtensionAssociationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, CreateExtensionAssociationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new CreateExtensionAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateExtensionAssociationCommandInput} for command's `input` shape.
        * @see {@link CreateExtensionAssociationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class CreateExtensionAssociationCommand extends $Command<CreateExtensionAssociationCommandInput, CreateExtensionAssociationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: CreateExtensionAssociationCommandInput;
            constructor(input: CreateExtensionAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateExtensionAssociationCommandInput, CreateExtensionAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateExtensionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { CreateExtensionRequest, Extension } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface CreateExtensionCommandInput extends CreateExtensionRequest {
    }
    export interface CreateExtensionCommandOutput extends Extension, __MetadataBearer {
    }
    /**
        * <p>Creates an AppConfig extension. An extension augments your ability to inject
        *          logic or behavior at different points during the AppConfig workflow of creating
        *          or deploying a configuration.</p>
        *          <p>You can create your own extensions or use the Amazon Web Services-authored extensions provided by
        *             AppConfig. For most use-cases, to create your own extension, you must create
        *          an Lambda function to perform any computation and processing defined in the
        *          extension. For more information about extensions, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, CreateExtensionCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, CreateExtensionCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new CreateExtensionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateExtensionCommandInput} for command's `input` shape.
        * @see {@link CreateExtensionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class CreateExtensionCommand extends $Command<CreateExtensionCommandInput, CreateExtensionCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: CreateExtensionCommandInput;
            constructor(input: CreateExtensionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateExtensionCommandInput, CreateExtensionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/CreateHostedConfigurationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { CreateHostedConfigurationVersionRequest, HostedConfigurationVersion } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface CreateHostedConfigurationVersionCommandInput extends CreateHostedConfigurationVersionRequest {
    }
    export interface CreateHostedConfigurationVersionCommandOutput extends HostedConfigurationVersion, __MetadataBearer {
    }
    /**
        * <p>Creates a new configuration in the AppConfig hosted configuration
        *          store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, CreateHostedConfigurationVersionCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, CreateHostedConfigurationVersionCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new CreateHostedConfigurationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateHostedConfigurationVersionCommandInput} for command's `input` shape.
        * @see {@link CreateHostedConfigurationVersionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class CreateHostedConfigurationVersionCommand extends $Command<CreateHostedConfigurationVersionCommandInput, CreateHostedConfigurationVersionCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: CreateHostedConfigurationVersionCommandInput;
            constructor(input: CreateHostedConfigurationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHostedConfigurationVersionCommandInput, CreateHostedConfigurationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeleteApplicationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface DeleteApplicationCommandInput extends DeleteApplicationRequest {
    }
    export interface DeleteApplicationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an application. Deleting an application does not delete a configuration from a
        *          host.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, DeleteApplicationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, DeleteApplicationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new DeleteApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApplicationCommandInput} for command's `input` shape.
        * @see {@link DeleteApplicationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class DeleteApplicationCommand extends $Command<DeleteApplicationCommandInput, DeleteApplicationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: DeleteApplicationCommandInput;
            constructor(input: DeleteApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApplicationCommandInput, DeleteApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteConfigurationProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeleteConfigurationProfileRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface DeleteConfigurationProfileCommandInput extends DeleteConfigurationProfileRequest {
    }
    export interface DeleteConfigurationProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a configuration profile. Deleting a configuration profile does not delete a
        *          configuration from a host.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, DeleteConfigurationProfileCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, DeleteConfigurationProfileCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new DeleteConfigurationProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationProfileCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class DeleteConfigurationProfileCommand extends $Command<DeleteConfigurationProfileCommandInput, DeleteConfigurationProfileCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: DeleteConfigurationProfileCommandInput;
            constructor(input: DeleteConfigurationProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationProfileCommandInput, DeleteConfigurationProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteDeploymentStrategyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeleteDeploymentStrategyRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface DeleteDeploymentStrategyCommandInput extends DeleteDeploymentStrategyRequest {
    }
    export interface DeleteDeploymentStrategyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a deployment strategy. Deleting a deployment strategy does not delete a
        *          configuration from a host.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, DeleteDeploymentStrategyCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, DeleteDeploymentStrategyCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new DeleteDeploymentStrategyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeploymentStrategyCommandInput} for command's `input` shape.
        * @see {@link DeleteDeploymentStrategyCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class DeleteDeploymentStrategyCommand extends $Command<DeleteDeploymentStrategyCommandInput, DeleteDeploymentStrategyCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: DeleteDeploymentStrategyCommandInput;
            constructor(input: DeleteDeploymentStrategyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeploymentStrategyCommandInput, DeleteDeploymentStrategyCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeleteEnvironmentRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface DeleteEnvironmentCommandInput extends DeleteEnvironmentRequest {
    }
    export interface DeleteEnvironmentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an environment. Deleting an environment does not delete a configuration from a
        *          host.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, DeleteEnvironmentCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, DeleteEnvironmentCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new DeleteEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEnvironmentCommandInput} for command's `input` shape.
        * @see {@link DeleteEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class DeleteEnvironmentCommand extends $Command<DeleteEnvironmentCommandInput, DeleteEnvironmentCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: DeleteEnvironmentCommandInput;
            constructor(input: DeleteEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEnvironmentCommandInput, DeleteEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteExtensionAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeleteExtensionAssociationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface DeleteExtensionAssociationCommandInput extends DeleteExtensionAssociationRequest {
    }
    export interface DeleteExtensionAssociationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an extension association. This action doesn't delete extensions defined in the
        *          association.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, DeleteExtensionAssociationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, DeleteExtensionAssociationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new DeleteExtensionAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteExtensionAssociationCommandInput} for command's `input` shape.
        * @see {@link DeleteExtensionAssociationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class DeleteExtensionAssociationCommand extends $Command<DeleteExtensionAssociationCommandInput, DeleteExtensionAssociationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: DeleteExtensionAssociationCommandInput;
            constructor(input: DeleteExtensionAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteExtensionAssociationCommandInput, DeleteExtensionAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteExtensionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeleteExtensionRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface DeleteExtensionCommandInput extends DeleteExtensionRequest {
    }
    export interface DeleteExtensionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an AppConfig extension. You must delete all associations to an
        *          extension before you delete the extension.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, DeleteExtensionCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, DeleteExtensionCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new DeleteExtensionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteExtensionCommandInput} for command's `input` shape.
        * @see {@link DeleteExtensionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class DeleteExtensionCommand extends $Command<DeleteExtensionCommandInput, DeleteExtensionCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: DeleteExtensionCommandInput;
            constructor(input: DeleteExtensionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteExtensionCommandInput, DeleteExtensionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/DeleteHostedConfigurationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeleteHostedConfigurationVersionRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface DeleteHostedConfigurationVersionCommandInput extends DeleteHostedConfigurationVersionRequest {
    }
    export interface DeleteHostedConfigurationVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a version of a configuration from the AppConfig hosted configuration
        *          store.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, DeleteHostedConfigurationVersionCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, DeleteHostedConfigurationVersionCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new DeleteHostedConfigurationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteHostedConfigurationVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteHostedConfigurationVersionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class DeleteHostedConfigurationVersionCommand extends $Command<DeleteHostedConfigurationVersionCommandInput, DeleteHostedConfigurationVersionCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: DeleteHostedConfigurationVersionCommandInput;
            constructor(input: DeleteHostedConfigurationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteHostedConfigurationVersionCommandInput, DeleteHostedConfigurationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Application, GetApplicationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetApplicationCommandInput extends GetApplicationRequest {
    }
    export interface GetApplicationCommandOutput extends Application, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetApplicationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetApplicationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApplicationCommandInput} for command's `input` shape.
        * @see {@link GetApplicationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetApplicationCommand extends $Command<GetApplicationCommandInput, GetApplicationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetApplicationCommandInput;
            constructor(input: GetApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApplicationCommandInput, GetApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Configuration, GetConfigurationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetConfigurationCommandInput extends GetConfigurationRequest {
    }
    export interface GetConfigurationCommandOutput extends Configuration, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Retrieves the latest deployed configuration.</p>
        *
        *          <important>
        *             <p>Note the following important information.</p>
        *             <ul>
        *                <li>
        *                   <p>This API action has been deprecated. Calls to receive configuration data should
        *                   use the <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_StartConfigurationSession.html">StartConfigurationSession</a> and <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/API_appconfigdata_GetLatestConfiguration.html">GetLatestConfiguration</a> APIs instead. </p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <code>GetConfiguration</code> is a priced call. For more information, see
        *                      <a href="https://aws.amazon.com/systems-manager/pricing/">Pricing</a>.</p>
        *                </li>
        *                <li>
        *                   <p>AppConfig uses the value of the
        *                      <code>ClientConfigurationVersion</code> parameter to identify the configuration
        *                   version on your clients. If you don’t send <code>ClientConfigurationVersion</code>
        *                   with each call to <code>GetConfiguration</code>, your clients receive the current
        *                   configuration. You are charged each time your clients receive a
        *                   configuration.</p>
        *                   <p>To avoid excess charges, we recommend you use the <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/StartConfigurationSession.html">StartConfigurationSession</a> and <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/GetLatestConfiguration.html">GetLatestConfiguration</a> APIs, which track the client configuration
        *                   version on your behalf. If you choose to continue using
        *                      <code>GetConfiguration</code>, we recommend that you include the
        *                      <code>ClientConfigurationVersion</code> value with every call to
        *                      <code>GetConfiguration</code>. The value to use for
        *                      <code>ClientConfigurationVersion</code> comes from the
        *                      <code>ConfigurationVersion</code> attribute returned by
        *                      <code>GetConfiguration</code> when there is new or updated data, and should be
        *                   saved for subsequent calls to <code>GetConfiguration</code>.</p>
        *                </li>
        *             </ul>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetConfigurationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetConfigurationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetConfigurationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetConfigurationCommand extends $Command<GetConfigurationCommandInput, GetConfigurationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetConfigurationCommandInput;
            constructor(input: GetConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConfigurationCommandInput, GetConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetConfigurationProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ConfigurationProfile, GetConfigurationProfileRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetConfigurationProfileCommandInput extends GetConfigurationProfileRequest {
    }
    export interface GetConfigurationProfileCommandOutput extends ConfigurationProfile, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a configuration profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetConfigurationProfileCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetConfigurationProfileCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetConfigurationProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConfigurationProfileCommandInput} for command's `input` shape.
        * @see {@link GetConfigurationProfileCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetConfigurationProfileCommand extends $Command<GetConfigurationProfileCommandInput, GetConfigurationProfileCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetConfigurationProfileCommandInput;
            constructor(input: GetConfigurationProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConfigurationProfileCommandInput, GetConfigurationProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Deployment, GetDeploymentRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetDeploymentCommandInput extends GetDeploymentRequest {
    }
    export interface GetDeploymentCommandOutput extends Deployment, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a configuration deployment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetDeploymentCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetDeploymentCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetDeploymentCommand extends $Command<GetDeploymentCommandInput, GetDeploymentCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetDeploymentCommandInput;
            constructor(input: GetDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentCommandInput, GetDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetDeploymentStrategyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeploymentStrategy, GetDeploymentStrategyRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetDeploymentStrategyCommandInput extends GetDeploymentStrategyRequest {
    }
    export interface GetDeploymentStrategyCommandOutput extends DeploymentStrategy, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a deployment strategy. A deployment strategy defines
        *          important criteria for rolling out your configuration to the designated targets. A
        *          deployment strategy includes the overall duration required, a percentage of targets to
        *          receive the deployment during each interval, an algorithm that defines how percentage
        *          grows, and bake time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetDeploymentStrategyCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetDeploymentStrategyCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetDeploymentStrategyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentStrategyCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentStrategyCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetDeploymentStrategyCommand extends $Command<GetDeploymentStrategyCommandInput, GetDeploymentStrategyCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetDeploymentStrategyCommandInput;
            constructor(input: GetDeploymentStrategyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentStrategyCommandInput, GetDeploymentStrategyCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Environment, GetEnvironmentRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetEnvironmentCommandInput extends GetEnvironmentRequest {
    }
    export interface GetEnvironmentCommandOutput extends Environment, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about an environment. An environment is a deployment group of
        *             AppConfig applications, such as applications in a <code>Production</code>
        *          environment or in an <code>EU_Region</code> environment. Each configuration deployment
        *          targets an environment. You can enable one or more Amazon CloudWatch alarms for an environment. If
        *          an alarm is triggered during a deployment, AppConfig roles back the
        *          configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetEnvironmentCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetEnvironmentCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEnvironmentCommandInput} for command's `input` shape.
        * @see {@link GetEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetEnvironmentCommand extends $Command<GetEnvironmentCommandInput, GetEnvironmentCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetEnvironmentCommandInput;
            constructor(input: GetEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEnvironmentCommandInput, GetEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetExtensionAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ExtensionAssociation, GetExtensionAssociationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetExtensionAssociationCommandInput extends GetExtensionAssociationRequest {
    }
    export interface GetExtensionAssociationCommandOutput extends ExtensionAssociation, __MetadataBearer {
    }
    /**
        * <p>Returns information about an AppConfig extension association. For more
        *          information about extensions and associations, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetExtensionAssociationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetExtensionAssociationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetExtensionAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExtensionAssociationCommandInput} for command's `input` shape.
        * @see {@link GetExtensionAssociationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetExtensionAssociationCommand extends $Command<GetExtensionAssociationCommandInput, GetExtensionAssociationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetExtensionAssociationCommandInput;
            constructor(input: GetExtensionAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExtensionAssociationCommandInput, GetExtensionAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetExtensionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Extension, GetExtensionRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetExtensionCommandInput extends GetExtensionRequest {
    }
    export interface GetExtensionCommandOutput extends Extension, __MetadataBearer {
    }
    /**
        * <p>Returns information about an AppConfig extension.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetExtensionCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetExtensionCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetExtensionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExtensionCommandInput} for command's `input` shape.
        * @see {@link GetExtensionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetExtensionCommand extends $Command<GetExtensionCommandInput, GetExtensionCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetExtensionCommandInput;
            constructor(input: GetExtensionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExtensionCommandInput, GetExtensionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/GetHostedConfigurationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { GetHostedConfigurationVersionRequest, HostedConfigurationVersion } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface GetHostedConfigurationVersionCommandInput extends GetHostedConfigurationVersionRequest {
    }
    export interface GetHostedConfigurationVersionCommandOutput extends HostedConfigurationVersion, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a specific configuration version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, GetHostedConfigurationVersionCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, GetHostedConfigurationVersionCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new GetHostedConfigurationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetHostedConfigurationVersionCommandInput} for command's `input` shape.
        * @see {@link GetHostedConfigurationVersionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class GetHostedConfigurationVersionCommand extends $Command<GetHostedConfigurationVersionCommandInput, GetHostedConfigurationVersionCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: GetHostedConfigurationVersionCommandInput;
            constructor(input: GetHostedConfigurationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetHostedConfigurationVersionCommandInput, GetHostedConfigurationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListApplicationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Applications, ListApplicationsRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListApplicationsCommandInput extends ListApplicationsRequest {
    }
    export interface ListApplicationsCommandOutput extends Applications, __MetadataBearer {
    }
    /**
        * <p>Lists all applications in your Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListApplicationsCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListApplicationsCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListApplicationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListApplicationsCommandInput} for command's `input` shape.
        * @see {@link ListApplicationsCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListApplicationsCommand extends $Command<ListApplicationsCommandInput, ListApplicationsCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListApplicationsCommandInput;
            constructor(input: ListApplicationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListApplicationsCommandInput, ListApplicationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListConfigurationProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ConfigurationProfiles, ListConfigurationProfilesRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListConfigurationProfilesCommandInput extends ListConfigurationProfilesRequest {
    }
    export interface ListConfigurationProfilesCommandOutput extends ConfigurationProfiles, __MetadataBearer {
    }
    /**
        * <p>Lists the configuration profiles for an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListConfigurationProfilesCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListConfigurationProfilesCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListConfigurationProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigurationProfilesCommandInput} for command's `input` shape.
        * @see {@link ListConfigurationProfilesCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListConfigurationProfilesCommand extends $Command<ListConfigurationProfilesCommandInput, ListConfigurationProfilesCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListConfigurationProfilesCommandInput;
            constructor(input: ListConfigurationProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigurationProfilesCommandInput, ListConfigurationProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Deployments, ListDeploymentsRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListDeploymentsCommandInput extends ListDeploymentsRequest {
    }
    export interface ListDeploymentsCommandOutput extends Deployments, __MetadataBearer {
    }
    /**
        * <p>Lists the deployments for an environment in descending deployment number order.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListDeploymentsCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListDeploymentsCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeploymentsCommandInput} for command's `input` shape.
        * @see {@link ListDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListDeploymentsCommand extends $Command<ListDeploymentsCommandInput, ListDeploymentsCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListDeploymentsCommandInput;
            constructor(input: ListDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeploymentsCommandInput, ListDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListDeploymentStrategiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeploymentStrategies, ListDeploymentStrategiesRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListDeploymentStrategiesCommandInput extends ListDeploymentStrategiesRequest {
    }
    export interface ListDeploymentStrategiesCommandOutput extends DeploymentStrategies, __MetadataBearer {
    }
    /**
        * <p>Lists deployment strategies.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListDeploymentStrategiesCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListDeploymentStrategiesCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListDeploymentStrategiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeploymentStrategiesCommandInput} for command's `input` shape.
        * @see {@link ListDeploymentStrategiesCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListDeploymentStrategiesCommand extends $Command<ListDeploymentStrategiesCommandInput, ListDeploymentStrategiesCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListDeploymentStrategiesCommandInput;
            constructor(input: ListDeploymentStrategiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeploymentStrategiesCommandInput, ListDeploymentStrategiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListEnvironmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Environments, ListEnvironmentsRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListEnvironmentsCommandInput extends ListEnvironmentsRequest {
    }
    export interface ListEnvironmentsCommandOutput extends Environments, __MetadataBearer {
    }
    /**
        * <p>Lists the environments for an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListEnvironmentsCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListEnvironmentsCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListEnvironmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEnvironmentsCommandInput} for command's `input` shape.
        * @see {@link ListEnvironmentsCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListEnvironmentsCommand extends $Command<ListEnvironmentsCommandInput, ListEnvironmentsCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListEnvironmentsCommandInput;
            constructor(input: ListEnvironmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEnvironmentsCommandInput, ListEnvironmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListExtensionAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ExtensionAssociations, ListExtensionAssociationsRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListExtensionAssociationsCommandInput extends ListExtensionAssociationsRequest {
    }
    export interface ListExtensionAssociationsCommandOutput extends ExtensionAssociations, __MetadataBearer {
    }
    /**
        * <p>Lists all AppConfig extension associations in the account. For more
        *          information about extensions and associations, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListExtensionAssociationsCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListExtensionAssociationsCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListExtensionAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExtensionAssociationsCommandInput} for command's `input` shape.
        * @see {@link ListExtensionAssociationsCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListExtensionAssociationsCommand extends $Command<ListExtensionAssociationsCommandInput, ListExtensionAssociationsCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListExtensionAssociationsCommandInput;
            constructor(input: ListExtensionAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExtensionAssociationsCommandInput, ListExtensionAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListExtensionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Extensions, ListExtensionsRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListExtensionsCommandInput extends ListExtensionsRequest {
    }
    export interface ListExtensionsCommandOutput extends Extensions, __MetadataBearer {
    }
    /**
        * <p>Lists all custom and Amazon Web Services-authored AppConfig extensions in the
        *          account. For more information about extensions, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListExtensionsCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListExtensionsCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListExtensionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExtensionsCommandInput} for command's `input` shape.
        * @see {@link ListExtensionsCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListExtensionsCommand extends $Command<ListExtensionsCommandInput, ListExtensionsCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListExtensionsCommandInput;
            constructor(input: ListExtensionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExtensionsCommandInput, ListExtensionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListHostedConfigurationVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { HostedConfigurationVersions, ListHostedConfigurationVersionsRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListHostedConfigurationVersionsCommandInput extends ListHostedConfigurationVersionsRequest {
    }
    export interface ListHostedConfigurationVersionsCommandOutput extends HostedConfigurationVersions, __MetadataBearer {
    }
    /**
        * <p>Lists configurations stored in the AppConfig hosted configuration store by
        *          version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListHostedConfigurationVersionsCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListHostedConfigurationVersionsCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListHostedConfigurationVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListHostedConfigurationVersionsCommandInput} for command's `input` shape.
        * @see {@link ListHostedConfigurationVersionsCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListHostedConfigurationVersionsCommand extends $Command<ListHostedConfigurationVersionsCommandInput, ListHostedConfigurationVersionsCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListHostedConfigurationVersionsCommandInput;
            constructor(input: ListHostedConfigurationVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListHostedConfigurationVersionsCommandInput, ListHostedConfigurationVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ListTagsForResourceRequest, ResourceTags } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ResourceTags, __MetadataBearer {
    }
    /**
        * <p>Retrieves the list of key-value tags assigned to the resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ListTagsForResourceCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ListTagsForResourceCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/StartDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Deployment, StartDeploymentRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface StartDeploymentCommandInput extends StartDeploymentRequest {
    }
    export interface StartDeploymentCommandOutput extends Deployment, __MetadataBearer {
    }
    /**
        * <p>Starts a deployment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, StartDeploymentCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, StartDeploymentCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new StartDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDeploymentCommandInput} for command's `input` shape.
        * @see {@link StartDeploymentCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class StartDeploymentCommand extends $Command<StartDeploymentCommandInput, StartDeploymentCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: StartDeploymentCommandInput;
            constructor(input: StartDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDeploymentCommandInput, StartDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/StopDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Deployment, StopDeploymentRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface StopDeploymentCommandInput extends StopDeploymentRequest {
    }
    export interface StopDeploymentCommandOutput extends Deployment, __MetadataBearer {
    }
    /**
        * <p>Stops a deployment. This API action works only on deployments that have a status of
        *             <code>DEPLOYING</code>. This action moves the deployment to a status of
        *             <code>ROLLED_BACK</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, StopDeploymentCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, StopDeploymentCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new StopDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDeploymentCommandInput} for command's `input` shape.
        * @see {@link StopDeploymentCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class StopDeploymentCommand extends $Command<StopDeploymentCommandInput, StopDeploymentCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: StopDeploymentCommandInput;
            constructor(input: StopDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDeploymentCommandInput, StopDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { TagResourceRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Assigns metadata to an AppConfig resource. Tags help organize and categorize
        *          your AppConfig resources. Each tag consists of a key and an optional value, both
        *          of which you define. You can specify a maximum of 50 tags for a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, TagResourceCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, TagResourceCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { UntagResourceRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a tag key and value from an AppConfig resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, UntagResourceCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, UntagResourceCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Application, UpdateApplicationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface UpdateApplicationCommandInput extends UpdateApplicationRequest {
    }
    export interface UpdateApplicationCommandOutput extends Application, __MetadataBearer {
    }
    /**
        * <p>Updates an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, UpdateApplicationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, UpdateApplicationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new UpdateApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApplicationCommandInput} for command's `input` shape.
        * @see {@link UpdateApplicationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class UpdateApplicationCommand extends $Command<UpdateApplicationCommandInput, UpdateApplicationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: UpdateApplicationCommandInput;
            constructor(input: UpdateApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApplicationCommandInput, UpdateApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateConfigurationProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ConfigurationProfile, UpdateConfigurationProfileRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface UpdateConfigurationProfileCommandInput extends UpdateConfigurationProfileRequest {
    }
    export interface UpdateConfigurationProfileCommandOutput extends ConfigurationProfile, __MetadataBearer {
    }
    /**
        * <p>Updates a configuration profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, UpdateConfigurationProfileCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, UpdateConfigurationProfileCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new UpdateConfigurationProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationProfileCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class UpdateConfigurationProfileCommand extends $Command<UpdateConfigurationProfileCommandInput, UpdateConfigurationProfileCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: UpdateConfigurationProfileCommandInput;
            constructor(input: UpdateConfigurationProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationProfileCommandInput, UpdateConfigurationProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateDeploymentStrategyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { DeploymentStrategy, UpdateDeploymentStrategyRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface UpdateDeploymentStrategyCommandInput extends UpdateDeploymentStrategyRequest {
    }
    export interface UpdateDeploymentStrategyCommandOutput extends DeploymentStrategy, __MetadataBearer {
    }
    /**
        * <p>Updates a deployment strategy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, UpdateDeploymentStrategyCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, UpdateDeploymentStrategyCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new UpdateDeploymentStrategyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeploymentStrategyCommandInput} for command's `input` shape.
        * @see {@link UpdateDeploymentStrategyCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class UpdateDeploymentStrategyCommand extends $Command<UpdateDeploymentStrategyCommandInput, UpdateDeploymentStrategyCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: UpdateDeploymentStrategyCommandInput;
            constructor(input: UpdateDeploymentStrategyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeploymentStrategyCommandInput, UpdateDeploymentStrategyCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateEnvironmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Environment, UpdateEnvironmentRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface UpdateEnvironmentCommandInput extends UpdateEnvironmentRequest {
    }
    export interface UpdateEnvironmentCommandOutput extends Environment, __MetadataBearer {
    }
    /**
        * <p>Updates an environment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, UpdateEnvironmentCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, UpdateEnvironmentCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new UpdateEnvironmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateEnvironmentCommandInput} for command's `input` shape.
        * @see {@link UpdateEnvironmentCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class UpdateEnvironmentCommand extends $Command<UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: UpdateEnvironmentCommandInput;
            constructor(input: UpdateEnvironmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateEnvironmentCommandInput, UpdateEnvironmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateExtensionAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ExtensionAssociation, UpdateExtensionAssociationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface UpdateExtensionAssociationCommandInput extends UpdateExtensionAssociationRequest {
    }
    export interface UpdateExtensionAssociationCommandOutput extends ExtensionAssociation, __MetadataBearer {
    }
    /**
        * <p>Updates an association. For more information about extensions and associations, see
        *             <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, UpdateExtensionAssociationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, UpdateExtensionAssociationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new UpdateExtensionAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateExtensionAssociationCommandInput} for command's `input` shape.
        * @see {@link UpdateExtensionAssociationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class UpdateExtensionAssociationCommand extends $Command<UpdateExtensionAssociationCommandInput, UpdateExtensionAssociationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: UpdateExtensionAssociationCommandInput;
            constructor(input: UpdateExtensionAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateExtensionAssociationCommandInput, UpdateExtensionAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/UpdateExtensionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { Extension, UpdateExtensionRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface UpdateExtensionCommandInput extends UpdateExtensionRequest {
    }
    export interface UpdateExtensionCommandOutput extends Extension, __MetadataBearer {
    }
    /**
        * <p>Updates an AppConfig extension. For more information about extensions, see
        *             <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, UpdateExtensionCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, UpdateExtensionCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new UpdateExtensionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateExtensionCommandInput} for command's `input` shape.
        * @see {@link UpdateExtensionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class UpdateExtensionCommand extends $Command<UpdateExtensionCommandInput, UpdateExtensionCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: UpdateExtensionCommandInput;
            constructor(input: UpdateExtensionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateExtensionCommandInput, UpdateExtensionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/commands/ValidateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/AppConfigClient";
    import { ValidateConfigurationRequest } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0";
    export interface ValidateConfigurationCommandInput extends ValidateConfigurationRequest {
    }
    export interface ValidateConfigurationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Uses the validators in a configuration profile to validate a configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigClient, ValidateConfigurationCommand } from "@aws-sdk/client-appconfig"; // ES Modules import
        * // const { AppConfigClient, ValidateConfigurationCommand } = require("@aws-sdk/client-appconfig"); // CommonJS import
        * const client = new AppConfigClient(config);
        * const command = new ValidateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ValidateConfigurationCommandInput} for command's `input` shape.
        * @see {@link ValidateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigClientResolvedConfig | config} for AppConfigClient's `config` shape.
        *
        */
    export class ValidateConfigurationCommand extends $Command<ValidateConfigurationCommandInput, ValidateConfigurationCommandOutput, AppConfigClientResolvedConfig> {
            readonly input: ValidateConfigurationCommandInput;
            constructor(input: ValidateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ValidateConfigurationCommandInput, ValidateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AppConfigServiceException as __BaseException } from "@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/AppConfigServiceException";
    /**
        * <p>An action defines the tasks the extension performs during the AppConfig
        *          workflow. Each action includes an action point such as
        *             <code>ON_CREATE_HOSTED_CONFIGURATION</code>, <code>PRE_DEPLOYMENT</code>, or
        *             <code>ON_DEPLOYMENT</code>. Each action also includes a name, a URI to an Lambda function, and an Amazon Resource Name (ARN) for an Identity and Access Management
        *          assume role. You specify the name, URI, and ARN for each <i>action point</i>
        *          defined in the extension. You can specify the following actions for an extension:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>PRE_CREATE_HOSTED_CONFIGURATION_VERSION</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>PRE_START_DEPLOYMENT</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ON_DEPLOYMENT_START</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ON_DEPLOYMENT_STEP</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ON_DEPLOYMENT_BAKING</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ON_DEPLOYMENT_COMPLETE</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ON_DEPLOYMENT_ROLLED_BACK</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface Action {
            /**
                * <p>The action name.</p>
                */
            Name?: string;
            /**
                * <p>Information about the action.</p>
                */
            Description?: string;
            /**
                * <p>The extension URI associated to the action point in the extension definition. The URI
                *          can be an Amazon Resource Name (ARN) for one of the following: an Lambda
                *          function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.</p>
                */
            Uri?: string;
            /**
                * <p>An Amazon Resource Name (ARN) for an Identity and Access Management assume role.</p>
                */
            RoleArn?: string;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    /**
        * <p>An extension that was invoked as part of a deployment event.</p>
        */
    export interface ActionInvocation {
            /**
                * <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
                */
            ExtensionIdentifier?: string;
            /**
                * <p>The name of the action.</p>
                */
            ActionName?: string;
            /**
                * <p>The extension URI associated to the action point in the extension definition. The URI
                *          can be an Amazon Resource Name (ARN) for one of the following: an Lambda
                *          function, an Amazon Simple Queue Service queue, an Amazon Simple Notification Service topic, or the Amazon EventBridge default event bus.</p>
                */
            Uri?: string;
            /**
                * <p>An Amazon Resource Name (ARN) for an Identity and Access Management assume role.</p>
                */
            RoleArn?: string;
            /**
                * <p>The error message when an extension invocation fails.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The error code when an extension invocation fails.</p>
                */
            ErrorCode?: string;
            /**
                * <p>A system-generated ID for this invocation.</p>
                */
            InvocationId?: string;
    }
    export namespace ActionInvocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionInvocation) => any;
    }
    export enum ActionPoint {
            ON_DEPLOYMENT_BAKING = "ON_DEPLOYMENT_BAKING",
            ON_DEPLOYMENT_COMPLETE = "ON_DEPLOYMENT_COMPLETE",
            ON_DEPLOYMENT_ROLLED_BACK = "ON_DEPLOYMENT_ROLLED_BACK",
            ON_DEPLOYMENT_START = "ON_DEPLOYMENT_START",
            ON_DEPLOYMENT_STEP = "ON_DEPLOYMENT_STEP",
            PRE_CREATE_HOSTED_CONFIGURATION_VERSION = "PRE_CREATE_HOSTED_CONFIGURATION_VERSION",
            PRE_START_DEPLOYMENT = "PRE_START_DEPLOYMENT"
    }
    export interface Application {
            /**
                * <p>The application ID.</p>
                */
            Id?: string;
            /**
                * <p>The application name.</p>
                */
            Name?: string;
            /**
                * <p>The description of the application.</p>
                */
            Description?: string;
    }
    export namespace Application {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Application) => any;
    }
    /**
        * <p>Detailed information about the bad request exception error when creating a hosted
        *          configuration version.</p>
        */
    export interface InvalidConfigurationDetail {
            /**
                * <p>The invalid or out-of-range validation constraint in your JSON schema that failed
                *          validation.</p>
                */
            Constraint?: string;
            /**
                * <p>Location of the validation constraint in the configuration JSON schema that failed
                *          validation.</p>
                */
            Location?: string;
            /**
                * <p>The reason for an invalid configuration error.</p>
                */
            Reason?: string;
            /**
                * <p>The type of error for an invalid configuration.</p>
                */
            Type?: string;
            /**
                * <p>Details about an error with Lambda when a synchronous extension
                *          experiences an error during an invocation.</p>
                */
            Value?: string;
    }
    export namespace InvalidConfigurationDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvalidConfigurationDetail) => any;
    }
    /**
        * <p>Detailed information about the input that failed to satisfy the constraints specified by
        *          a call.</p>
        */
    export type BadRequestDetails = BadRequestDetails.InvalidConfigurationMember | BadRequestDetails.$UnknownMember;
    export namespace BadRequestDetails {
            /**
                * <p>Detailed information about the bad request exception error when creating a hosted
                *          configuration version.</p>
                */
            interface InvalidConfigurationMember {
                    InvalidConfiguration: InvalidConfigurationDetail[];
                    $unknown?: never;
            }
            interface $UnknownMember {
                    InvalidConfiguration?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    InvalidConfiguration: (value: InvalidConfigurationDetail[]) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: BadRequestDetails, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BadRequestDetails) => any;
    }
    export enum BadRequestReason {
            INVALID_CONFIGURATION = "InvalidConfiguration"
    }
    /**
        * <p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Message?: string;
            Reason?: BadRequestReason | string;
            /**
                * <p>Detailed information about the input that failed to satisfy the constraints specified by
                *          a call.</p>
                */
            Details?: BadRequestDetails;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    export interface CreateApplicationRequest {
            /**
                * <p>A name for the application.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the application.</p>
                */
            Description?: string;
            /**
                * <p>Metadata to assign to the application. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which
                *          you define.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApplicationRequest) => any;
    }
    /**
        * <p>There was an internal failure in the AppConfig service.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    export enum ValidatorType {
            JSON_SCHEMA = "JSON_SCHEMA",
            LAMBDA = "LAMBDA"
    }
    /**
        * <p>A validator provides a syntactic or semantic check to ensure the configuration that you
        *          want to deploy functions as intended. To validate your application configuration data, you
        *          provide a schema or an Amazon Web Services Lambda function that runs against the configuration. The
        *          configuration deployment or update can only proceed when the configuration data is
        *          valid.</p>
        */
    export interface Validator {
            /**
                * <p>AppConfig supports validators of type <code>JSON_SCHEMA</code> and
                *             <code>LAMBDA</code>
                *          </p>
                */
            Type: ValidatorType | string | undefined;
            /**
                * <p>Either the JSON Schema content or the Amazon Resource Name (ARN) of an Lambda
                *          function.</p>
                */
            Content: string | undefined;
    }
    export namespace Validator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Validator) => any;
    }
    export interface ConfigurationProfile {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The configuration profile ID.</p>
                */
            Id?: string;
            /**
                * <p>The name of the configuration profile.</p>
                */
            Name?: string;
            /**
                * <p>The configuration profile description.</p>
                */
            Description?: string;
            /**
                * <p>The URI location of the configuration.</p>
                */
            LocationUri?: string;
            /**
                * <p>The ARN of an IAM role with permission to access the configuration at the specified
                *             <code>LocationUri</code>.</p>
                */
            RetrievalRoleArn?: string;
            /**
                * <p>A list of methods for validating the configuration.</p>
                */
            Validators?: Validator[];
            /**
                * <p>The type of configurations contained in the profile. AppConfig supports
                *             <code>feature flags</code> and <code>freeform</code> configurations. We recommend you
                *          create feature flag configurations to enable or disable new features and freeform
                *          configurations to distribute configurations to an application. When calling this API, enter
                *          one of the following values for <code>Type</code>:</p>
                *          <p>
                *             <code>AWS.AppConfig.FeatureFlags</code>
                *          </p>
                *          <p>
                *             <code>AWS.Freeform</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace ConfigurationProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationProfile) => any;
    }
    export interface CreateConfigurationProfileRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>A name for the configuration profile.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the configuration profile.</p>
                */
            Description?: string;
            /**
                * <p>A URI to locate the configuration. You can specify the AppConfig hosted
                *          configuration store, Systems Manager (SSM) document, an SSM Parameter Store parameter, or an Amazon S3
                *          object. For the hosted configuration store and for feature flags, specify
                *             <code>hosted</code>. For an SSM document, specify either the document name in the format
                *             <code>ssm-document://<Document_name></code> or the Amazon Resource Name (ARN). For
                *          a parameter, specify either the parameter name in the format
                *             <code>ssm-parameter://<Parameter_name></code> or the ARN. For an Amazon S3 object,
                *          specify the URI in the following format: <code>s3://<bucket>/<objectKey>
                *          </code>. Here is an example:
                *          <code>s3://my-bucket/my-app/us-east-1/my-config.json</code>
                *          </p>
                */
            LocationUri: string | undefined;
            /**
                * <p>The ARN of an IAM role with permission to access the configuration at the specified
                *             <code>LocationUri</code>.</p>
                *          <important>
                *             <p>A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that
                *             store your configuration. </p>
                *          </important>
                */
            RetrievalRoleArn?: string;
            /**
                * <p>A list of methods for validating the configuration.</p>
                */
            Validators?: Validator[];
            /**
                * <p>Metadata to assign to the configuration profile. Tags help organize and categorize your
                *             AppConfig resources. Each tag consists of a key and an optional value, both of
                *          which you define.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The type of configurations contained in the profile. AppConfig supports
                *             <code>feature flags</code> and <code>freeform</code> configurations. We recommend you
                *          create feature flag configurations to enable or disable new features and freeform
                *          configurations to distribute configurations to an application. When calling this API, enter
                *          one of the following values for <code>Type</code>:</p>
                *          <p>
                *             <code>AWS.AppConfig.FeatureFlags</code>
                *          </p>
                *          <p>
                *             <code>AWS.Freeform</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace CreateConfigurationProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationProfileRequest) => any;
    }
    /**
        * <p>The requested resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            ResourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum GrowthType {
            EXPONENTIAL = "EXPONENTIAL",
            LINEAR = "LINEAR"
    }
    export enum ReplicateTo {
            NONE = "NONE",
            SSM_DOCUMENT = "SSM_DOCUMENT"
    }
    export interface CreateDeploymentStrategyRequest {
            /**
                * <p>A name for the deployment strategy.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the deployment strategy.</p>
                */
            Description?: string;
            /**
                * <p>Total amount of time for a deployment to last.</p>
                */
            DeploymentDurationInMinutes: number | undefined;
            /**
                * <p>Specifies the amount of time AppConfig monitors for Amazon CloudWatch alarms after the
                *          configuration has been deployed to 100% of its targets, before considering the deployment
                *          to be complete. If an alarm is triggered during this time, AppConfig rolls back
                *          the deployment. You must configure permissions for AppConfig to roll back based
                *          on CloudWatch alarms. For more information, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/getting-started-with-appconfig-cloudwatch-alarms-permissions.html">Configuring permissions for rollback based on Amazon CloudWatch alarms</a> in the
                *             <i>AppConfig User Guide</i>.</p>
                */
            FinalBakeTimeInMinutes?: number;
            /**
                * <p>The percentage of targets to receive a deployed configuration during each
                *          interval.</p>
                */
            GrowthFactor: number | undefined;
            /**
                * <p>The algorithm used to define how percentage grows over time. AppConfig
                *          supports the following growth types:</p>
                *          <p>
                *             <b>Linear</b>: For this type, AppConfig processes
                *          the deployment by dividing the total number of targets by the value specified for
                *             <code>Step percentage</code>. For example, a linear deployment that uses a <code>Step
                *             percentage</code> of 10 deploys the configuration to 10 percent of the hosts. After
                *          those deployments are complete, the system deploys the configuration to the next 10
                *          percent. This continues until 100% of the targets have successfully received the
                *          configuration.</p>
                *
                *          <p>
                *             <b>Exponential</b>: For this type, AppConfig
                *          processes the deployment exponentially using the following formula: <code>G*(2^N)</code>.
                *          In this formula, <code>G</code> is the growth factor specified by the user and
                *             <code>N</code> is the number of steps until the configuration is deployed to all
                *          targets. For example, if you specify a growth factor of 2, then the system rolls out the
                *          configuration as follows:</p>
                *          <p>
                *             <code>2*(2^0)</code>
                *          </p>
                *          <p>
                *             <code>2*(2^1)</code>
                *          </p>
                *          <p>
                *             <code>2*(2^2)</code>
                *          </p>
                *          <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the
                *          targets, 8% of the targets, and continues until the configuration has been deployed to all
                *          targets.</p>
                */
            GrowthType?: GrowthType | string;
            /**
                * <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
                */
            ReplicateTo?: ReplicateTo | string;
            /**
                * <p>Metadata to assign to the deployment strategy. Tags help organize and categorize your
                *             AppConfig resources. Each tag consists of a key and an optional value, both of
                *          which you define.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateDeploymentStrategyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentStrategyRequest) => any;
    }
    export interface DeploymentStrategy {
            /**
                * <p>The deployment strategy ID.</p>
                */
            Id?: string;
            /**
                * <p>The name of the deployment strategy.</p>
                */
            Name?: string;
            /**
                * <p>The description of the deployment strategy.</p>
                */
            Description?: string;
            /**
                * <p>Total amount of time the deployment lasted.</p>
                */
            DeploymentDurationInMinutes?: number;
            /**
                * <p>The algorithm used to define how percentage grew over time.</p>
                */
            GrowthType?: GrowthType | string;
            /**
                * <p>The percentage of targets that received a deployed configuration during each
                *          interval.</p>
                */
            GrowthFactor?: number;
            /**
                * <p>The amount of time that AppConfig monitored for alarms before considering the
                *          deployment to be complete and no longer eligible for automatic rollback.</p>
                */
            FinalBakeTimeInMinutes?: number;
            /**
                * <p>Save the deployment strategy to a Systems Manager (SSM) document.</p>
                */
            ReplicateTo?: ReplicateTo | string;
    }
    export namespace DeploymentStrategy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentStrategy) => any;
    }
    /**
        * <p>Amazon CloudWatch alarms to monitor during the deployment process.</p>
        */
    export interface Monitor {
            /**
                * <p>Amazon Resource Name (ARN) of the Amazon CloudWatch alarm.</p>
                */
            AlarmArn: string | undefined;
            /**
                * <p>ARN of an Identity and Access Management (IAM) role for AppConfig to monitor
                *             <code>AlarmArn</code>.</p>
                */
            AlarmRoleArn?: string;
    }
    export namespace Monitor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Monitor) => any;
    }
    export interface CreateEnvironmentRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>A name for the environment.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the environment.</p>
                */
            Description?: string;
            /**
                * <p>Amazon CloudWatch alarms to monitor during the deployment process.</p>
                */
            Monitors?: Monitor[];
            /**
                * <p>Metadata to assign to the environment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which
                *          you define.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateEnvironmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEnvironmentRequest) => any;
    }
    export enum EnvironmentState {
            DEPLOYING = "DEPLOYING",
            READY_FOR_DEPLOYMENT = "READY_FOR_DEPLOYMENT",
            ROLLED_BACK = "ROLLED_BACK",
            ROLLING_BACK = "ROLLING_BACK"
    }
    export interface Environment {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The environment ID.</p>
                */
            Id?: string;
            /**
                * <p>The name of the environment.</p>
                */
            Name?: string;
            /**
                * <p>The description of the environment.</p>
                */
            Description?: string;
            /**
                * <p>The state of the environment. An environment can be in one of the following states:
                *             <code>READY_FOR_DEPLOYMENT</code>, <code>DEPLOYING</code>, <code>ROLLING_BACK</code>, or
                *             <code>ROLLED_BACK</code>
                *          </p>
                */
            State?: EnvironmentState | string;
            /**
                * <p>Amazon CloudWatch alarms monitored during the deployment.</p>
                */
            Monitors?: Monitor[];
    }
    export namespace Environment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Environment) => any;
    }
    /**
        * <p>The request could not be processed because of conflict in the current state of the
        *          resource.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>A value such as an Amazon Resource Name (ARN) or an Amazon Simple Notification Service topic entered
        *          in an extension when invoked. Parameter values are specified in an extension association.
        *          For more information about extensions, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/working-with-appconfig-extensions.html">Working with
        *                AppConfig extensions</a> in the
        *          <i>AppConfig User Guide</i>.</p>
        */
    export interface Parameter {
            /**
                * <p>Information about the parameter.</p>
                */
            Description?: string;
            /**
                * <p>A parameter value must be specified in the extension association.</p>
                */
            Required?: boolean;
    }
    export namespace Parameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Parameter) => any;
    }
    export interface CreateExtensionRequest {
            /**
                * <p>A name for the extension. Each extension name in your account must be unique. Extension
                *          versions use the same name.</p>
                */
            Name: string | undefined;
            /**
                * <p>Information about the extension.</p>
                */
            Description?: string;
            /**
                * <p>The actions defined in the extension.</p>
                */
            Actions: Record<string, Action[]> | undefined;
            /**
                * <p>The parameters accepted by the extension. You specify parameter values when you
                *          associate the extension to an AppConfig resource by using the
                *             <code>CreateExtensionAssociation</code> API action. For Lambda extension
                *          actions, these parameters are included in the Lambda request object.</p>
                */
            Parameters?: Record<string, Parameter>;
            /**
                * <p>Adds one or more tags for the specified extension. Tags are metadata that help you
                *          categorize resources in different ways, for example, by purpose, owner, or environment.
                *          Each tag consists of a key and an optional value, both of which you define. </p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>You can omit this field when you create an extension. When you create a new version,
                *          specify the most recent current version number. For example, you create version 3, enter 2
                *          for this field.</p>
                */
            LatestVersionNumber?: number;
    }
    export namespace CreateExtensionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExtensionRequest) => any;
    }
    export interface Extension {
            /**
                * <p>The system-generated ID of the extension.</p>
                */
            Id?: string;
            /**
                * <p>The extension name.</p>
                */
            Name?: string;
            /**
                * <p>The extension version number.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
                */
            Arn?: string;
            /**
                * <p>Information about the extension.</p>
                */
            Description?: string;
            /**
                * <p>The actions defined in the extension.</p>
                */
            Actions?: Record<string, Action[]>;
            /**
                * <p>The parameters accepted by the extension. You specify parameter values when you
                *          associate the extension to an AppConfig resource by using the
                *             <code>CreateExtensionAssociation</code> API action. For Lambda extension
                *          actions, these parameters are included in the Lambda request object.</p>
                */
            Parameters?: Record<string, Parameter>;
    }
    export namespace Extension {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Extension) => any;
    }
    /**
        * <p>The number of hosted configuration versions exceeds the limit for the AppConfig hosted configuration store. Delete one or more versions and try again.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export interface CreateExtensionAssociationRequest {
            /**
                * <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
                */
            ExtensionIdentifier: string | undefined;
            /**
                * <p>The version number of the extension. If not specified, AppConfig uses the
                *          maximum version of the extension.</p>
                */
            ExtensionVersionNumber?: number;
            /**
                * <p>The ARN of an application, configuration profile, or environment.</p>
                */
            ResourceIdentifier: string | undefined;
            /**
                * <p>The parameter names and values defined in the extensions. Extension parameters marked
                *             <code>Required</code> must be entered for this field.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>Adds one or more tags for the specified extension association. Tags are metadata that
                *          help you categorize resources in different ways, for example, by purpose, owner, or
                *          environment. Each tag consists of a key and an optional value, both of which you define.
                *       </p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateExtensionAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExtensionAssociationRequest) => any;
    }
    export interface ExtensionAssociation {
            /**
                * <p>The system-generated ID for the association.</p>
                */
            Id?: string;
            /**
                * <p>The ARN of the extension defined in the association.</p>
                */
            ExtensionArn?: string;
            /**
                * <p>The ARNs of applications, configuration profiles, or environments defined in the
                *          association.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
                */
            Arn?: string;
            /**
                * <p>The parameter names and values defined in the association.</p>
                */
            Parameters?: Record<string, string>;
            /**
                * <p>The version number for the extension defined in the association.</p>
                */
            ExtensionVersionNumber?: number;
    }
    export namespace ExtensionAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtensionAssociation) => any;
    }
    export interface CreateHostedConfigurationVersionRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId: string | undefined;
            /**
                * <p>A description of the configuration.</p>
                */
            Description?: string;
            /**
                * <p>The content of the configuration or the configuration data.</p>
                */
            Content: Uint8Array | undefined;
            /**
                * <p>A standard MIME type describing the format of the configuration content. For more
                *          information, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
                */
            ContentType: string | undefined;
            /**
                * <p>An optional locking token used to prevent race conditions from overwriting configuration
                *          updates when creating a new version. To ensure your data is not overwritten when creating
                *          multiple hosted configuration versions in rapid succession, specify the version number of
                *          the latest hosted configuration version.</p>
                */
            LatestVersionNumber?: number;
    }
    export namespace CreateHostedConfigurationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHostedConfigurationVersionRequest) => any;
    }
    export interface HostedConfigurationVersion {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId?: string;
            /**
                * <p>The configuration version.</p>
                */
            VersionNumber?: number;
            /**
                * <p>A description of the configuration.</p>
                */
            Description?: string;
            /**
                * <p>The content of the configuration or the configuration data.</p>
                */
            Content?: Uint8Array;
            /**
                * <p>A standard MIME type describing the format of the configuration content. For more
                *          information, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
                */
            ContentType?: string;
    }
    export namespace HostedConfigurationVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HostedConfigurationVersion) => any;
    }
    export enum BytesMeasure {
            KILOBYTES = "KILOBYTES"
    }
    /**
        * <p>The configuration size is too large.</p>
        */
    export class PayloadTooLargeException extends __BaseException {
            readonly name: "PayloadTooLargeException";
            readonly $fault: "client";
            Message?: string;
            Measure?: BytesMeasure | string;
            Limit?: number;
            Size?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PayloadTooLargeException, __BaseException>);
    }
    export interface DeleteApplicationRequest {
            /**
                * <p>The ID of the application to delete.</p>
                */
            ApplicationId: string | undefined;
    }
    export namespace DeleteApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApplicationRequest) => any;
    }
    export interface DeleteConfigurationProfileRequest {
            /**
                * <p>The application ID that includes the configuration profile you want to delete.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The ID of the configuration profile you want to delete.</p>
                */
            ConfigurationProfileId: string | undefined;
    }
    export namespace DeleteConfigurationProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationProfileRequest) => any;
    }
    export interface DeleteDeploymentStrategyRequest {
            /**
                * <p>The ID of the deployment strategy you want to delete.</p>
                */
            DeploymentStrategyId: string | undefined;
    }
    export namespace DeleteDeploymentStrategyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeploymentStrategyRequest) => any;
    }
    export interface DeleteEnvironmentRequest {
            /**
                * <p>The application ID that includes the environment that you want to delete.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The ID of the environment that you want to delete.</p>
                */
            EnvironmentId: string | undefined;
    }
    export namespace DeleteEnvironmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEnvironmentRequest) => any;
    }
    export interface DeleteExtensionRequest {
            /**
                * <p>The name, ID, or Amazon Resource Name (ARN) of the extension you want to delete.</p>
                */
            ExtensionIdentifier: string | undefined;
            /**
                * <p>A specific version of an extension to delete. If omitted, the highest version is
                *          deleted.</p>
                */
            VersionNumber?: number;
    }
    export namespace DeleteExtensionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExtensionRequest) => any;
    }
    export interface DeleteExtensionAssociationRequest {
            /**
                * <p>The ID of the extension association to delete.</p>
                */
            ExtensionAssociationId: string | undefined;
    }
    export namespace DeleteExtensionAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExtensionAssociationRequest) => any;
    }
    export interface DeleteHostedConfigurationVersionRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId: string | undefined;
            /**
                * <p>The versions number to delete.</p>
                */
            VersionNumber: number | undefined;
    }
    export namespace DeleteHostedConfigurationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteHostedConfigurationVersionRequest) => any;
    }
    export interface GetApplicationRequest {
            /**
                * <p>The ID of the application you want to get.</p>
                */
            ApplicationId: string | undefined;
    }
    export namespace GetApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApplicationRequest) => any;
    }
    export interface Configuration {
            /**
                * <p>The content of the configuration or the configuration data.</p>
                *          <important>
                *             <p>The <code>Content</code> attribute only contains data if the system finds new or
                *             updated configuration data. If there is no new or updated data and
                *                <code>ClientConfigurationVersion</code> matches the version of the current
                *             configuration, AppConfig returns a <code>204 No Content</code> HTTP response
                *             code and the <code>Content</code> value will be empty.</p>
                *          </important>
                */
            Content?: Uint8Array;
            /**
                * <p>The configuration version.</p>
                */
            ConfigurationVersion?: string;
            /**
                * <p>A standard MIME type describing the format of the configuration content. For more
                *          information, see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
                */
            ContentType?: string;
    }
    export namespace Configuration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Configuration) => any;
    }
    export interface GetConfigurationRequest {
            /**
                * <p>The application to get. Specify either the application name or the application
                *          ID.</p>
                */
            Application: string | undefined;
            /**
                * <p>The environment to get. Specify either the environment name or the environment
                *          ID.</p>
                */
            Environment: string | undefined;
            /**
                * <p>The configuration to get. Specify either the configuration name or the configuration
                *          ID.</p>
                */
            Configuration: string | undefined;
            /**
                * <p>The clientId parameter in the following command is a unique, user-specified ID to
                *          identify the client for the configuration. This ID enables AppConfig to deploy
                *          the configuration in intervals, as defined in the deployment strategy. </p>
                */
            ClientId: string | undefined;
            /**
                * <p>The configuration version returned in the most recent <code>GetConfiguration</code>
                *          response.</p>
                *          <important>
                *             <p>AppConfig uses the value of the <code>ClientConfigurationVersion</code>
                *             parameter to identify the configuration version on your clients. If you don’t send
                *                <code>ClientConfigurationVersion</code> with each call to
                *                <code>GetConfiguration</code>, your clients receive the current configuration. You
                *             are charged each time your clients receive a configuration.</p>
                *             <p>To avoid excess charges, we recommend that you include the
                *                <code>ClientConfigurationVersion</code> value with every call to
                *                <code>GetConfiguration</code>. This value must be saved on your client. Subsequent
                *             calls to <code>GetConfiguration</code> must pass this value by using the
                *                <code>ClientConfigurationVersion</code> parameter. </p>
                *          </important>
                *          <p>For more information about working with configurations, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration.html">Retrieving the
                *             Configuration</a> in the <i>AppConfig User Guide</i>.</p>
                */
            ClientConfigurationVersion?: string;
    }
    export namespace GetConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationRequest) => any;
    }
    export interface GetConfigurationProfileRequest {
            /**
                * <p>The ID of the application that includes the configuration profile you want to
                *          get.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The ID of the configuration profile that you want to get.</p>
                */
            ConfigurationProfileId: string | undefined;
    }
    export namespace GetConfigurationProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConfigurationProfileRequest) => any;
    }
    /**
        * <p>An extension that was invoked during a deployment.</p>
        */
    export interface AppliedExtension {
            /**
                * <p>The system-generated ID of the extension.</p>
                */
            ExtensionId?: string;
            /**
                * <p>The system-generated ID for the association.</p>
                */
            ExtensionAssociationId?: string;
            /**
                * <p>The extension version number.</p>
                */
            VersionNumber?: number;
            /**
                * <p>One or more parameters for the actions called by the extension.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace AppliedExtension {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppliedExtension) => any;
    }
    export enum DeploymentEventType {
            BAKE_TIME_STARTED = "BAKE_TIME_STARTED",
            DEPLOYMENT_COMPLETED = "DEPLOYMENT_COMPLETED",
            DEPLOYMENT_STARTED = "DEPLOYMENT_STARTED",
            PERCENTAGE_UPDATED = "PERCENTAGE_UPDATED",
            ROLLBACK_COMPLETED = "ROLLBACK_COMPLETED",
            ROLLBACK_STARTED = "ROLLBACK_STARTED"
    }
    export enum TriggeredBy {
            APPCONFIG = "APPCONFIG",
            CLOUDWATCH_ALARM = "CLOUDWATCH_ALARM",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            USER = "USER"
    }
    /**
        * <p>An object that describes a deployment event.</p>
        */
    export interface DeploymentEvent {
            /**
                * <p>The type of deployment event. Deployment event types include the start, stop, or
                *          completion of a deployment; a percentage update; the start or stop of a bake period; and
                *          the start or completion of a rollback.</p>
                */
            EventType?: DeploymentEventType | string;
            /**
                * <p>The entity that triggered the deployment event. Events can be triggered by a user,
                *             AppConfig, an Amazon CloudWatch alarm, or an internal error.</p>
                */
            TriggeredBy?: TriggeredBy | string;
            /**
                * <p>A description of the deployment event. Descriptions include, but are not limited to, the
                *          user account or the Amazon CloudWatch alarm ARN that initiated a rollback, the percentage of hosts
                *          that received the deployment, or in the case of an internal error, a recommendation to
                *          attempt a new deployment.</p>
                */
            Description?: string;
            /**
                * <p>The list of extensions that were invoked as part of the deployment.</p>
                */
            ActionInvocations?: ActionInvocation[];
            /**
                * <p>The date and time the event occurred.</p>
                */
            OccurredAt?: Date;
    }
    export namespace DeploymentEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentEvent) => any;
    }
    export enum DeploymentState {
            BAKING = "BAKING",
            COMPLETE = "COMPLETE",
            DEPLOYING = "DEPLOYING",
            ROLLED_BACK = "ROLLED_BACK",
            ROLLING_BACK = "ROLLING_BACK",
            VALIDATING = "VALIDATING"
    }
    export interface Deployment {
            /**
                * <p>The ID of the application that was deployed.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The ID of the environment that was deployed.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>The ID of the deployment strategy that was deployed.</p>
                */
            DeploymentStrategyId?: string;
            /**
                * <p>The ID of the configuration profile that was deployed.</p>
                */
            ConfigurationProfileId?: string;
            /**
                * <p>The sequence number of the deployment.</p>
                */
            DeploymentNumber?: number;
            /**
                * <p>The name of the configuration.</p>
                */
            ConfigurationName?: string;
            /**
                * <p>Information about the source location of the configuration.</p>
                */
            ConfigurationLocationUri?: string;
            /**
                * <p>The configuration version that was deployed.</p>
                */
            ConfigurationVersion?: string;
            /**
                * <p>The description of the deployment.</p>
                */
            Description?: string;
            /**
                * <p>Total amount of time the deployment lasted.</p>
                */
            DeploymentDurationInMinutes?: number;
            /**
                * <p>The algorithm used to define how percentage grew over time.</p>
                */
            GrowthType?: GrowthType | string;
            /**
                * <p>The percentage of targets to receive a deployed configuration during each
                *          interval.</p>
                */
            GrowthFactor?: number;
            /**
                * <p>The amount of time that AppConfig monitored for alarms before considering the
                *          deployment to be complete and no longer eligible for automatic rollback.</p>
                */
            FinalBakeTimeInMinutes?: number;
            /**
                * <p>The state of the deployment.</p>
                */
            State?: DeploymentState | string;
            /**
                * <p>A list containing all events related to a deployment. The most recent events are
                *          displayed first.</p>
                */
            EventLog?: DeploymentEvent[];
            /**
                * <p>The percentage of targets for which the deployment is available.</p>
                */
            PercentageComplete?: number;
            /**
                * <p>The time the deployment started.</p>
                */
            StartedAt?: Date;
            /**
                * <p>The time the deployment completed. </p>
                */
            CompletedAt?: Date;
            /**
                * <p>A list of extensions that were processed as part of the deployment. The extensions that
                *          were previously associated to the configuration profile, environment, or the application
                *          when <code>StartDeployment</code> was called.</p>
                */
            AppliedExtensions?: AppliedExtension[];
    }
    export namespace Deployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployment) => any;
    }
    export interface GetDeploymentRequest {
            /**
                * <p>The ID of the application that includes the deployment you want to get. </p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The ID of the environment that includes the deployment you want to get. </p>
                */
            EnvironmentId: string | undefined;
            /**
                * <p>The sequence number of the deployment.</p>
                */
            DeploymentNumber: number | undefined;
    }
    export namespace GetDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentRequest) => any;
    }
    export interface GetDeploymentStrategyRequest {
            /**
                * <p>The ID of the deployment strategy to get.</p>
                */
            DeploymentStrategyId: string | undefined;
    }
    export namespace GetDeploymentStrategyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentStrategyRequest) => any;
    }
    export interface GetEnvironmentRequest {
            /**
                * <p>The ID of the application that includes the environment you want to get.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The ID of the environment that you want to get.</p>
                */
            EnvironmentId: string | undefined;
    }
    export namespace GetEnvironmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEnvironmentRequest) => any;
    }
    export interface GetExtensionRequest {
            /**
                * <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
                */
            ExtensionIdentifier: string | undefined;
            /**
                * <p>The extension version number. If no version number was defined, AppConfig uses
                *          the highest version.</p>
                */
            VersionNumber?: number;
    }
    export namespace GetExtensionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExtensionRequest) => any;
    }
    export interface GetExtensionAssociationRequest {
            /**
                * <p>The extension association ID to get.</p>
                */
            ExtensionAssociationId: string | undefined;
    }
    export namespace GetExtensionAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExtensionAssociationRequest) => any;
    }
    export interface GetHostedConfigurationVersionRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId: string | undefined;
            /**
                * <p>The version.</p>
                */
            VersionNumber: number | undefined;
    }
    export namespace GetHostedConfigurationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetHostedConfigurationVersionRequest) => any;
    }
    export interface Applications {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Application[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace Applications {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Applications) => any;
    }
    export interface ListApplicationsRequest {
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that
                *          you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Next token is a pagination token generated by AppConfig to describe what page the previous List call ended on. For the first List
                *          request, the nextToken should not be set. On subsequent calls, the nextToken parameter
                *          should be set to the previous responses nextToken value. Use this token to get the next set
                *          of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListApplicationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApplicationsRequest) => any;
    }
    /**
        * <p>A summary of a configuration profile.</p>
        */
    export interface ConfigurationProfileSummary {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The ID of the configuration profile.</p>
                */
            Id?: string;
            /**
                * <p>The name of the configuration profile.</p>
                */
            Name?: string;
            /**
                * <p>The URI location of the configuration.</p>
                */
            LocationUri?: string;
            /**
                * <p>The types of validators in the configuration profile.</p>
                */
            ValidatorTypes?: (ValidatorType | string)[];
            /**
                * <p>The type of configurations contained in the profile. AppConfig supports
                *             <code>feature flags</code> and <code>freeform</code> configurations. We recommend you
                *          create feature flag configurations to enable or disable new features and freeform
                *          configurations to distribute configurations to an application. When calling this API, enter
                *          one of the following values for <code>Type</code>:</p>
                *          <p>
                *             <code>AWS.AppConfig.FeatureFlags</code>
                *          </p>
                *          <p>
                *             <code>AWS.Freeform</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace ConfigurationProfileSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationProfileSummary) => any;
    }
    export interface ConfigurationProfiles {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: ConfigurationProfileSummary[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace ConfigurationProfiles {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationProfiles) => any;
    }
    export interface ListConfigurationProfilesRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that
                *          you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>A filter based on the type of configurations that the configuration profile contains. A
                *          configuration can be a feature flag or a freeform configuration.</p>
                */
            Type?: string;
    }
    export namespace ListConfigurationProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationProfilesRequest) => any;
    }
    /**
        * <p>Information about the deployment.</p>
        */
    export interface DeploymentSummary {
            /**
                * <p>The sequence number of the deployment.</p>
                */
            DeploymentNumber?: number;
            /**
                * <p>The name of the configuration.</p>
                */
            ConfigurationName?: string;
            /**
                * <p>The version of the configuration.</p>
                */
            ConfigurationVersion?: string;
            /**
                * <p>Total amount of time the deployment lasted.</p>
                */
            DeploymentDurationInMinutes?: number;
            /**
                * <p>The algorithm used to define how percentage grows over time.</p>
                */
            GrowthType?: GrowthType | string;
            /**
                * <p>The percentage of targets to receive a deployed configuration during each
                *          interval.</p>
                */
            GrowthFactor?: number;
            /**
                * <p>The amount of time that AppConfig monitors for alarms before considering the
                *          deployment to be complete and no longer eligible for automatic rollback.</p>
                */
            FinalBakeTimeInMinutes?: number;
            /**
                * <p>The state of the deployment.</p>
                */
            State?: DeploymentState | string;
            /**
                * <p>The percentage of targets for which the deployment is available.</p>
                */
            PercentageComplete?: number;
            /**
                * <p>Time the deployment started.</p>
                */
            StartedAt?: Date;
            /**
                * <p>Time the deployment completed.</p>
                */
            CompletedAt?: Date;
    }
    export namespace DeploymentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentSummary) => any;
    }
    export interface Deployments {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: DeploymentSummary[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace Deployments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployments) => any;
    }
    export interface ListDeploymentsRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The environment ID.</p>
                */
            EnvironmentId: string | undefined;
            /**
                * <p>The maximum number of items that may be returned for this call. If there are items that
                *          have not yet been returned, the response will include a non-null <code>NextToken</code>
                *          that you can provide in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned by a prior call to this operation indicating the next set of results
                *          to be returned. If not specified, the operation will return the first set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentsRequest) => any;
    }
    export interface DeploymentStrategies {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: DeploymentStrategy[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace DeploymentStrategies {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentStrategies) => any;
    }
    export interface ListDeploymentStrategiesRequest {
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that
                *          you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDeploymentStrategiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentStrategiesRequest) => any;
    }
    export interface Environments {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Environment[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace Environments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Environments) => any;
    }
    export interface ListEnvironmentsRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that
                *          you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEnvironmentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEnvironmentsRequest) => any;
    }
    /**
        * <p>Information about an association between an extension and an AppConfig
        *          resource such as an application, environment, or configuration profile. Call
        *             <code>GetExtensionAssociation</code> to get more information about an
        *          association.</p>
        */
    export interface ExtensionAssociationSummary {
            /**
                * <p>The extension association ID. This ID is used to call other
                *             <code>ExtensionAssociation</code> API actions such as
                *             <code>GetExtensionAssociation</code> or <code>DeleteExtensionAssociation</code>.</p>
                */
            Id?: string;
            /**
                * <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
                */
            ExtensionArn?: string;
            /**
                * <p>The ARNs of applications, configuration profiles, or environments defined in the
                *          association.</p>
                */
            ResourceArn?: string;
    }
    export namespace ExtensionAssociationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtensionAssociationSummary) => any;
    }
    export interface ExtensionAssociations {
            /**
                * <p>The list of extension associations. Each item represents an extension association to an
                *          application, environment, or configuration profile. </p>
                */
            Items?: ExtensionAssociationSummary[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace ExtensionAssociations {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtensionAssociations) => any;
    }
    export interface ListExtensionAssociationsRequest {
            /**
                * <p>The ARN of an application, configuration profile, or environment.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
                */
            ExtensionIdentifier?: string;
            /**
                * <p>The version number for the extension defined in the association.</p>
                */
            ExtensionVersionNumber?: number;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that
                *          you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results or pass null to
                *          get the first set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListExtensionAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExtensionAssociationsRequest) => any;
    }
    /**
        * <p>Information about an extension. Call <code>GetExtension</code> to get more information
        *          about an extension.</p>
        */
    export interface ExtensionSummary {
            /**
                * <p>The system-generated ID of the extension.</p>
                */
            Id?: string;
            /**
                * <p>The extension name.</p>
                */
            Name?: string;
            /**
                * <p>The extension version number.</p>
                */
            VersionNumber?: number;
            /**
                * <p>The system-generated Amazon Resource Name (ARN) for the extension.</p>
                */
            Arn?: string;
            /**
                * <p>Information about the extension.</p>
                */
            Description?: string;
    }
    export namespace ExtensionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExtensionSummary) => any;
    }
    export interface Extensions {
            /**
                * <p>The list of available extensions. The list includes Amazon Web Services-authored and
                *          user-created extensions.</p>
                */
            Items?: ExtensionSummary[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace Extensions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Extensions) => any;
    }
    export interface ListExtensionsRequest {
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that
                *          you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The extension name.</p>
                */
            Name?: string;
    }
    export namespace ListExtensionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExtensionsRequest) => any;
    }
    /**
        * <p>Information about the configuration.</p>
        */
    export interface HostedConfigurationVersionSummary {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId?: string;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId?: string;
            /**
                * <p>The configuration version.</p>
                */
            VersionNumber?: number;
            /**
                * <p>A description of the configuration.</p>
                */
            Description?: string;
            /**
                * <p>A standard MIME type describing the format of the configuration content. For more
                *          information, see <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a>.</p>
                */
            ContentType?: string;
    }
    export namespace HostedConfigurationVersionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HostedConfigurationVersionSummary) => any;
    }
    export interface HostedConfigurationVersions {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: HostedConfigurationVersionSummary[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace HostedConfigurationVersions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HostedConfigurationVersions) => any;
    }
    export interface ListHostedConfigurationVersionsRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that
                *          you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListHostedConfigurationVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHostedConfigurationVersionsRequest) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The resource ARN.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ResourceTags {
            /**
                * <p>Metadata to assign to AppConfig resources. Tags help organize and categorize
                *          your AppConfig resources. Each tag consists of a key and an optional value, both
                *          of which you define.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ResourceTags {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceTags) => any;
    }
    export interface StartDeploymentRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The environment ID.</p>
                */
            EnvironmentId: string | undefined;
            /**
                * <p>The deployment strategy ID.</p>
                */
            DeploymentStrategyId: string | undefined;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId: string | undefined;
            /**
                * <p>The configuration version to deploy.</p>
                */
            ConfigurationVersion: string | undefined;
            /**
                * <p>A description of the deployment.</p>
                */
            Description?: string;
            /**
                * <p>Metadata to assign to the deployment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which
                *          you define.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace StartDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDeploymentRequest) => any;
    }
    export interface StopDeploymentRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The environment ID.</p>
                */
            EnvironmentId: string | undefined;
            /**
                * <p>The sequence number of the deployment.</p>
                */
            DeploymentNumber: number | undefined;
    }
    export namespace StopDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDeploymentRequest) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the resource for which to retrieve tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The key-value string map. The valid character set is [a-zA-Z+-=._:/]. The tag key can be
                *          up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to
                *          256 characters.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the resource for which to remove tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag keys to delete.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UpdateApplicationRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The name of the application.</p>
                */
            Name?: string;
            /**
                * <p>A description of the application.</p>
                */
            Description?: string;
    }
    export namespace UpdateApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApplicationRequest) => any;
    }
    export interface UpdateConfigurationProfileRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The ID of the configuration profile.</p>
                */
            ConfigurationProfileId: string | undefined;
            /**
                * <p>The name of the configuration profile.</p>
                */
            Name?: string;
            /**
                * <p>A description of the configuration profile.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of an IAM role with permission to access the configuration at the specified
                *             <code>LocationUri</code>.</p>
                */
            RetrievalRoleArn?: string;
            /**
                * <p>A list of methods for validating the configuration.</p>
                */
            Validators?: Validator[];
    }
    export namespace UpdateConfigurationProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationProfileRequest) => any;
    }
    export interface UpdateDeploymentStrategyRequest {
            /**
                * <p>The deployment strategy ID.</p>
                */
            DeploymentStrategyId: string | undefined;
            /**
                * <p>A description of the deployment strategy.</p>
                */
            Description?: string;
            /**
                * <p>Total amount of time for a deployment to last.</p>
                */
            DeploymentDurationInMinutes?: number;
            /**
                * <p>The amount of time that AppConfig monitors for alarms before considering the
                *          deployment to be complete and no longer eligible for automatic rollback.</p>
                */
            FinalBakeTimeInMinutes?: number;
            /**
                * <p>The percentage of targets to receive a deployed configuration during each
                *          interval.</p>
                */
            GrowthFactor?: number;
            /**
                * <p>The algorithm used to define how percentage grows over time. AppConfig
                *          supports the following growth types:</p>
                *          <p>
                *             <b>Linear</b>: For this type, AppConfig processes
                *          the deployment by increments of the growth factor evenly distributed over the deployment
                *          time. For example, a linear deployment that uses a growth factor of 20 initially makes the
                *          configuration available to 20 percent of the targets. After 1/5th of the deployment time
                *          has passed, the system updates the percentage to 40 percent. This continues until 100% of
                *          the targets are set to receive the deployed configuration.</p>
                *
                *          <p>
                *             <b>Exponential</b>: For this type, AppConfig
                *          processes the deployment exponentially using the following formula: <code>G*(2^N)</code>.
                *          In this formula, <code>G</code> is the growth factor specified by the user and
                *             <code>N</code> is the number of steps until the configuration is deployed to all
                *          targets. For example, if you specify a growth factor of 2, then the system rolls out the
                *          configuration as follows:</p>
                *          <p>
                *             <code>2*(2^0)</code>
                *          </p>
                *          <p>
                *             <code>2*(2^1)</code>
                *          </p>
                *          <p>
                *             <code>2*(2^2)</code>
                *          </p>
                *          <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the
                *          targets, 8% of the targets, and continues until the configuration has been deployed to all
                *          targets.</p>
                */
            GrowthType?: GrowthType | string;
    }
    export namespace UpdateDeploymentStrategyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeploymentStrategyRequest) => any;
    }
    export interface UpdateEnvironmentRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The environment ID.</p>
                */
            EnvironmentId: string | undefined;
            /**
                * <p>The name of the environment.</p>
                */
            Name?: string;
            /**
                * <p>A description of the environment.</p>
                */
            Description?: string;
            /**
                * <p>Amazon CloudWatch alarms to monitor during the deployment process.</p>
                */
            Monitors?: Monitor[];
    }
    export namespace UpdateEnvironmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateEnvironmentRequest) => any;
    }
    export interface UpdateExtensionRequest {
            /**
                * <p>The name, the ID, or the Amazon Resource Name (ARN) of the extension.</p>
                */
            ExtensionIdentifier: string | undefined;
            /**
                * <p>Information about the extension.</p>
                */
            Description?: string;
            /**
                * <p>The actions defined in the extension.</p>
                */
            Actions?: Record<string, Action[]>;
            /**
                * <p>One or more parameters for the actions called by the extension.</p>
                */
            Parameters?: Record<string, Parameter>;
            /**
                * <p>The extension version number.</p>
                */
            VersionNumber?: number;
    }
    export namespace UpdateExtensionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExtensionRequest) => any;
    }
    export interface UpdateExtensionAssociationRequest {
            /**
                * <p>The system-generated ID for the association.</p>
                */
            ExtensionAssociationId: string | undefined;
            /**
                * <p>The parameter names and values defined in the extension.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace UpdateExtensionAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExtensionAssociationRequest) => any;
    }
    export interface ValidateConfigurationRequest {
            /**
                * <p>The application ID.</p>
                */
            ApplicationId: string | undefined;
            /**
                * <p>The configuration profile ID.</p>
                */
            ConfigurationProfileId: string | undefined;
            /**
                * <p>The version of the configuration to validate.</p>
                */
            ConfigurationVersion: string | undefined;
    }
    export namespace ValidateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidateConfigurationRequest) => any;
    }
}

declare module '@aws-sdk/client-appconfig/node_modules/@aws-sdk/client-appconfig/dist-types/models/AppConfigServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from AppConfig service.
        */
    export class AppConfigServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

