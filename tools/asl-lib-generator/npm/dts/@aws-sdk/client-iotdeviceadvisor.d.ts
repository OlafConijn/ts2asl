// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-iotdeviceadvisor' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateSuiteDefinitionCommandInput, CreateSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/CreateSuiteDefinitionCommand";
    import { DeleteSuiteDefinitionCommandInput, DeleteSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/DeleteSuiteDefinitionCommand";
    import { GetEndpointCommandInput, GetEndpointCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetEndpointCommand";
    import { GetSuiteDefinitionCommandInput, GetSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteDefinitionCommand";
    import { GetSuiteRunCommandInput, GetSuiteRunCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteRunCommand";
    import { GetSuiteRunReportCommandInput, GetSuiteRunReportCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteRunReportCommand";
    import { ListSuiteDefinitionsCommandInput, ListSuiteDefinitionsCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListSuiteDefinitionsCommand";
    import { ListSuiteRunsCommandInput, ListSuiteRunsCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListSuiteRunsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListTagsForResourceCommand";
    import { StartSuiteRunCommandInput, StartSuiteRunCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/StartSuiteRunCommand";
    import { StopSuiteRunCommandInput, StopSuiteRunCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/StopSuiteRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/UntagResourceCommand";
    import { UpdateSuiteDefinitionCommandInput, UpdateSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/UpdateSuiteDefinitionCommand";
    import { IotDeviceAdvisorClient } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    /**
        * <p>Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for
        *             validating IoT devices during device software development. Device Advisor provides
        *             pre-built tests that you can use to validate IoT devices for reliable and secure
        *             connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor,
        *             you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security
        *             best practices and, if applicable, receive software updates from IoT Device Management.
        *             You can also download signed qualification reports to submit to the Amazon Web Services Partner Network
        *             to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send
        *             your device in and wait for it to be tested.</p>
        */
    export class IotDeviceAdvisor extends IotDeviceAdvisorClient {
            /**
                * <p>Creates a Device Advisor test suite.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateSuiteDefinition</a> action.</p>
                */
            createSuiteDefinition(args: CreateSuiteDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<CreateSuiteDefinitionCommandOutput>;
            createSuiteDefinition(args: CreateSuiteDefinitionCommandInput, cb: (err: any, data?: CreateSuiteDefinitionCommandOutput) => void): void;
            createSuiteDefinition(args: CreateSuiteDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSuiteDefinitionCommandOutput) => void): void;
            /**
                * <p>Deletes a Device Advisor test suite.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteSuiteDefinition</a> action.</p>
                */
            deleteSuiteDefinition(args: DeleteSuiteDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSuiteDefinitionCommandOutput>;
            deleteSuiteDefinition(args: DeleteSuiteDefinitionCommandInput, cb: (err: any, data?: DeleteSuiteDefinitionCommandOutput) => void): void;
            deleteSuiteDefinition(args: DeleteSuiteDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSuiteDefinitionCommandOutput) => void): void;
            /**
                * <p>Gets information about an Device Advisor endpoint.</p>
                */
            getEndpoint(args: GetEndpointCommandInput, options?: __HttpHandlerOptions): Promise<GetEndpointCommandOutput>;
            getEndpoint(args: GetEndpointCommandInput, cb: (err: any, data?: GetEndpointCommandOutput) => void): void;
            getEndpoint(args: GetEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEndpointCommandOutput) => void): void;
            /**
                * <p>Gets information about a Device Advisor test suite.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteDefinition</a> action.</p>
                */
            getSuiteDefinition(args: GetSuiteDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<GetSuiteDefinitionCommandOutput>;
            getSuiteDefinition(args: GetSuiteDefinitionCommandInput, cb: (err: any, data?: GetSuiteDefinitionCommandOutput) => void): void;
            getSuiteDefinition(args: GetSuiteDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSuiteDefinitionCommandOutput) => void): void;
            /**
                * <p>Gets information about a Device Advisor test suite run.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteRun</a> action.</p>
                */
            getSuiteRun(args: GetSuiteRunCommandInput, options?: __HttpHandlerOptions): Promise<GetSuiteRunCommandOutput>;
            getSuiteRun(args: GetSuiteRunCommandInput, cb: (err: any, data?: GetSuiteRunCommandOutput) => void): void;
            getSuiteRun(args: GetSuiteRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSuiteRunCommandOutput) => void): void;
            /**
                * <p>Gets a report download link for a successful Device Advisor qualifying test suite run.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteRunReport</a> action.</p>
                */
            getSuiteRunReport(args: GetSuiteRunReportCommandInput, options?: __HttpHandlerOptions): Promise<GetSuiteRunReportCommandOutput>;
            getSuiteRunReport(args: GetSuiteRunReportCommandInput, cb: (err: any, data?: GetSuiteRunReportCommandOutput) => void): void;
            getSuiteRunReport(args: GetSuiteRunReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSuiteRunReportCommandOutput) => void): void;
            /**
                * <p>Lists the Device Advisor test suites you have created.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSuiteDefinitions</a> action.</p>
                */
            listSuiteDefinitions(args: ListSuiteDefinitionsCommandInput, options?: __HttpHandlerOptions): Promise<ListSuiteDefinitionsCommandOutput>;
            listSuiteDefinitions(args: ListSuiteDefinitionsCommandInput, cb: (err: any, data?: ListSuiteDefinitionsCommandOutput) => void): void;
            listSuiteDefinitions(args: ListSuiteDefinitionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSuiteDefinitionsCommandOutput) => void): void;
            /**
                * <p>Lists runs of the specified Device Advisor test suite. You can list all runs of the test
                *             suite, or the runs of a specific version of the test suite.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSuiteRuns</a> action.</p>
                */
            listSuiteRuns(args: ListSuiteRunsCommandInput, options?: __HttpHandlerOptions): Promise<ListSuiteRunsCommandOutput>;
            listSuiteRuns(args: ListSuiteRunsCommandInput, cb: (err: any, data?: ListSuiteRunsCommandOutput) => void): void;
            listSuiteRuns(args: ListSuiteRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSuiteRunsCommandOutput) => void): void;
            /**
                * <p>Lists the tags attached to an IoT Device Advisor resource.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTagsForResource</a> action.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Starts a Device Advisor test suite run.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StartSuiteRun</a> action.</p>
                */
            startSuiteRun(args: StartSuiteRunCommandInput, options?: __HttpHandlerOptions): Promise<StartSuiteRunCommandOutput>;
            startSuiteRun(args: StartSuiteRunCommandInput, cb: (err: any, data?: StartSuiteRunCommandOutput) => void): void;
            startSuiteRun(args: StartSuiteRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSuiteRunCommandOutput) => void): void;
            /**
                * <p>Stops a Device Advisor test suite run that is currently running.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StopSuiteRun</a> action.</p>
                */
            stopSuiteRun(args: StopSuiteRunCommandInput, options?: __HttpHandlerOptions): Promise<StopSuiteRunCommandOutput>;
            stopSuiteRun(args: StopSuiteRunCommandInput, cb: (err: any, data?: StopSuiteRunCommandOutput) => void): void;
            stopSuiteRun(args: StopSuiteRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopSuiteRunCommandOutput) => void): void;
            /**
                * <p>Adds to and modifies existing tags of an IoT Device Advisor resource.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">TagResource</a> action.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from an IoT Device Advisor resource.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UntagResource</a> action.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates a Device Advisor test suite.</p>
                *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateSuiteDefinition</a> action.</p>
                */
            updateSuiteDefinition(args: UpdateSuiteDefinitionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSuiteDefinitionCommandOutput>;
            updateSuiteDefinition(args: UpdateSuiteDefinitionCommandInput, cb: (err: any, data?: UpdateSuiteDefinitionCommandOutput) => void): void;
            updateSuiteDefinition(args: UpdateSuiteDefinitionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSuiteDefinitionCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/CreateSuiteDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { CreateSuiteDefinitionRequest, CreateSuiteDefinitionResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface CreateSuiteDefinitionCommandInput extends CreateSuiteDefinitionRequest {
    }
    export interface CreateSuiteDefinitionCommandOutput extends CreateSuiteDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a Device Advisor test suite.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CreateSuiteDefinition</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, CreateSuiteDefinitionCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, CreateSuiteDefinitionCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new CreateSuiteDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSuiteDefinitionCommandInput} for command's `input` shape.
        * @see {@link CreateSuiteDefinitionCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class CreateSuiteDefinitionCommand extends $Command<CreateSuiteDefinitionCommandInput, CreateSuiteDefinitionCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: CreateSuiteDefinitionCommandInput;
            constructor(input: CreateSuiteDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSuiteDefinitionCommandInput, CreateSuiteDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/DeleteSuiteDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { DeleteSuiteDefinitionRequest, DeleteSuiteDefinitionResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface DeleteSuiteDefinitionCommandInput extends DeleteSuiteDefinitionRequest {
    }
    export interface DeleteSuiteDefinitionCommandOutput extends DeleteSuiteDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a Device Advisor test suite.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DeleteSuiteDefinition</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, DeleteSuiteDefinitionCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, DeleteSuiteDefinitionCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new DeleteSuiteDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSuiteDefinitionCommandInput} for command's `input` shape.
        * @see {@link DeleteSuiteDefinitionCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class DeleteSuiteDefinitionCommand extends $Command<DeleteSuiteDefinitionCommandInput, DeleteSuiteDefinitionCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: DeleteSuiteDefinitionCommandInput;
            constructor(input: DeleteSuiteDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSuiteDefinitionCommandInput, DeleteSuiteDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { GetEndpointRequest, GetEndpointResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface GetEndpointCommandInput extends GetEndpointRequest {
    }
    export interface GetEndpointCommandOutput extends GetEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about an Device Advisor endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, GetEndpointCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, GetEndpointCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new GetEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEndpointCommandInput} for command's `input` shape.
        * @see {@link GetEndpointCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class GetEndpointCommand extends $Command<GetEndpointCommandInput, GetEndpointCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: GetEndpointCommandInput;
            constructor(input: GetEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEndpointCommandInput, GetEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { GetSuiteDefinitionRequest, GetSuiteDefinitionResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface GetSuiteDefinitionCommandInput extends GetSuiteDefinitionRequest {
    }
    export interface GetSuiteDefinitionCommandOutput extends GetSuiteDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a Device Advisor test suite.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteDefinition</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, GetSuiteDefinitionCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, GetSuiteDefinitionCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new GetSuiteDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSuiteDefinitionCommandInput} for command's `input` shape.
        * @see {@link GetSuiteDefinitionCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class GetSuiteDefinitionCommand extends $Command<GetSuiteDefinitionCommandInput, GetSuiteDefinitionCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: GetSuiteDefinitionCommandInput;
            constructor(input: GetSuiteDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSuiteDefinitionCommandInput, GetSuiteDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { GetSuiteRunRequest, GetSuiteRunResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface GetSuiteRunCommandInput extends GetSuiteRunRequest {
    }
    export interface GetSuiteRunCommandOutput extends GetSuiteRunResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a Device Advisor test suite run.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteRun</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, GetSuiteRunCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, GetSuiteRunCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new GetSuiteRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSuiteRunCommandInput} for command's `input` shape.
        * @see {@link GetSuiteRunCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class GetSuiteRunCommand extends $Command<GetSuiteRunCommandInput, GetSuiteRunCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: GetSuiteRunCommandInput;
            constructor(input: GetSuiteRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSuiteRunCommandInput, GetSuiteRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteRunReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { GetSuiteRunReportRequest, GetSuiteRunReportResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface GetSuiteRunReportCommandInput extends GetSuiteRunReportRequest {
    }
    export interface GetSuiteRunReportCommandOutput extends GetSuiteRunReportResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a report download link for a successful Device Advisor qualifying test suite run.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">GetSuiteRunReport</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, GetSuiteRunReportCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, GetSuiteRunReportCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new GetSuiteRunReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSuiteRunReportCommandInput} for command's `input` shape.
        * @see {@link GetSuiteRunReportCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class GetSuiteRunReportCommand extends $Command<GetSuiteRunReportCommandInput, GetSuiteRunReportCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: GetSuiteRunReportCommandInput;
            constructor(input: GetSuiteRunReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSuiteRunReportCommandInput, GetSuiteRunReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListSuiteDefinitionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { ListSuiteDefinitionsRequest, ListSuiteDefinitionsResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface ListSuiteDefinitionsCommandInput extends ListSuiteDefinitionsRequest {
    }
    export interface ListSuiteDefinitionsCommandOutput extends ListSuiteDefinitionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the Device Advisor test suites you have created.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSuiteDefinitions</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, ListSuiteDefinitionsCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, ListSuiteDefinitionsCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new ListSuiteDefinitionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSuiteDefinitionsCommandInput} for command's `input` shape.
        * @see {@link ListSuiteDefinitionsCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class ListSuiteDefinitionsCommand extends $Command<ListSuiteDefinitionsCommandInput, ListSuiteDefinitionsCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: ListSuiteDefinitionsCommandInput;
            constructor(input: ListSuiteDefinitionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSuiteDefinitionsCommandInput, ListSuiteDefinitionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListSuiteRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { ListSuiteRunsRequest, ListSuiteRunsResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface ListSuiteRunsCommandInput extends ListSuiteRunsRequest {
    }
    export interface ListSuiteRunsCommandOutput extends ListSuiteRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists runs of the specified Device Advisor test suite. You can list all runs of the test
        *             suite, or the runs of a specific version of the test suite.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListSuiteRuns</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, ListSuiteRunsCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, ListSuiteRunsCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new ListSuiteRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSuiteRunsCommandInput} for command's `input` shape.
        * @see {@link ListSuiteRunsCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class ListSuiteRunsCommand extends $Command<ListSuiteRunsCommandInput, ListSuiteRunsCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: ListSuiteRunsCommandInput;
            constructor(input: ListSuiteRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSuiteRunsCommandInput, ListSuiteRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags attached to an IoT Device Advisor resource.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTagsForResource</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, ListTagsForResourceCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, ListTagsForResourceCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/StartSuiteRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { StartSuiteRunRequest, StartSuiteRunResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface StartSuiteRunCommandInput extends StartSuiteRunRequest {
    }
    export interface StartSuiteRunCommandOutput extends StartSuiteRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a Device Advisor test suite run.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StartSuiteRun</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, StartSuiteRunCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, StartSuiteRunCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new StartSuiteRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSuiteRunCommandInput} for command's `input` shape.
        * @see {@link StartSuiteRunCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class StartSuiteRunCommand extends $Command<StartSuiteRunCommandInput, StartSuiteRunCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: StartSuiteRunCommandInput;
            constructor(input: StartSuiteRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSuiteRunCommandInput, StartSuiteRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/StopSuiteRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { StopSuiteRunRequest, StopSuiteRunResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface StopSuiteRunCommandInput extends StopSuiteRunRequest {
    }
    export interface StopSuiteRunCommandOutput extends StopSuiteRunResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a Device Advisor test suite run that is currently running.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">StopSuiteRun</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, StopSuiteRunCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, StopSuiteRunCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new StopSuiteRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopSuiteRunCommandInput} for command's `input` shape.
        * @see {@link StopSuiteRunCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class StopSuiteRunCommand extends $Command<StopSuiteRunCommandInput, StopSuiteRunCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: StopSuiteRunCommandInput;
            constructor(input: StopSuiteRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopSuiteRunCommandInput, StopSuiteRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds to and modifies existing tags of an IoT Device Advisor resource.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">TagResource</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, TagResourceCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, TagResourceCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes tags from an IoT Device Advisor resource.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UntagResource</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, UntagResourceCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, UntagResourceCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/UpdateSuiteDefinitionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IotDeviceAdvisorClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient";
    import { UpdateSuiteDefinitionRequest, UpdateSuiteDefinitionResponse } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0";
    export interface UpdateSuiteDefinitionCommandInput extends UpdateSuiteDefinitionRequest {
    }
    export interface UpdateSuiteDefinitionCommandOutput extends UpdateSuiteDefinitionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a Device Advisor test suite.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">UpdateSuiteDefinition</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IotDeviceAdvisorClient, UpdateSuiteDefinitionCommand } from "@aws-sdk/client-iotdeviceadvisor"; // ES Modules import
        * // const { IotDeviceAdvisorClient, UpdateSuiteDefinitionCommand } = require("@aws-sdk/client-iotdeviceadvisor"); // CommonJS import
        * const client = new IotDeviceAdvisorClient(config);
        * const command = new UpdateSuiteDefinitionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSuiteDefinitionCommandInput} for command's `input` shape.
        * @see {@link UpdateSuiteDefinitionCommandOutput} for command's `response` shape.
        * @see {@link IotDeviceAdvisorClientResolvedConfig | config} for IotDeviceAdvisorClient's `config` shape.
        *
        */
    export class UpdateSuiteDefinitionCommand extends $Command<UpdateSuiteDefinitionCommandInput, UpdateSuiteDefinitionCommandOutput, IotDeviceAdvisorClientResolvedConfig> {
            readonly input: UpdateSuiteDefinitionCommandInput;
            constructor(input: UpdateSuiteDefinitionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IotDeviceAdvisorClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSuiteDefinitionCommandInput, UpdateSuiteDefinitionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/IotDeviceAdvisorClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateSuiteDefinitionCommandInput, CreateSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/CreateSuiteDefinitionCommand";
    import { DeleteSuiteDefinitionCommandInput, DeleteSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/DeleteSuiteDefinitionCommand";
    import { GetEndpointCommandInput, GetEndpointCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetEndpointCommand";
    import { GetSuiteDefinitionCommandInput, GetSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteDefinitionCommand";
    import { GetSuiteRunCommandInput, GetSuiteRunCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteRunCommand";
    import { GetSuiteRunReportCommandInput, GetSuiteRunReportCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/GetSuiteRunReportCommand";
    import { ListSuiteDefinitionsCommandInput, ListSuiteDefinitionsCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListSuiteDefinitionsCommand";
    import { ListSuiteRunsCommandInput, ListSuiteRunsCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListSuiteRunsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/ListTagsForResourceCommand";
    import { StartSuiteRunCommandInput, StartSuiteRunCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/StartSuiteRunCommand";
    import { StopSuiteRunCommandInput, StopSuiteRunCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/StopSuiteRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/UntagResourceCommand";
    import { UpdateSuiteDefinitionCommandInput, UpdateSuiteDefinitionCommandOutput } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/commands/UpdateSuiteDefinitionCommand";
    export type ServiceInputTypes = CreateSuiteDefinitionCommandInput | DeleteSuiteDefinitionCommandInput | GetEndpointCommandInput | GetSuiteDefinitionCommandInput | GetSuiteRunCommandInput | GetSuiteRunReportCommandInput | ListSuiteDefinitionsCommandInput | ListSuiteRunsCommandInput | ListTagsForResourceCommandInput | StartSuiteRunCommandInput | StopSuiteRunCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateSuiteDefinitionCommandInput;
    export type ServiceOutputTypes = CreateSuiteDefinitionCommandOutput | DeleteSuiteDefinitionCommandOutput | GetEndpointCommandOutput | GetSuiteDefinitionCommandOutput | GetSuiteRunCommandOutput | GetSuiteRunReportCommandOutput | ListSuiteDefinitionsCommandOutput | ListSuiteRunsCommandOutput | ListTagsForResourceCommandOutput | StartSuiteRunCommandOutput | StopSuiteRunCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateSuiteDefinitionCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type IotDeviceAdvisorClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of IotDeviceAdvisorClient class constructor that set the region, credentials and other options.
        */
    export interface IotDeviceAdvisorClientConfig extends IotDeviceAdvisorClientConfigType {
    }
    type IotDeviceAdvisorClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of IotDeviceAdvisorClient class. This is resolved and normalized from the {@link IotDeviceAdvisorClientConfig | constructor configuration interface}.
        */
    export interface IotDeviceAdvisorClientResolvedConfig extends IotDeviceAdvisorClientResolvedConfigType {
    }
    /**
        * <p>Amazon Web Services IoT Core Device Advisor is a cloud-based, fully managed test capability for
        *             validating IoT devices during device software development. Device Advisor provides
        *             pre-built tests that you can use to validate IoT devices for reliable and secure
        *             connectivity with Amazon Web Services IoT Core before deploying devices to production. By using Device Advisor,
        *             you can confirm that your devices can connect to Amazon Web Services IoT Core, follow security
        *             best practices and, if applicable, receive software updates from IoT Device Management.
        *             You can also download signed qualification reports to submit to the Amazon Web Services Partner Network
        *             to get your device qualified for the Amazon Web Services Partner Device Catalog without the need to send
        *             your device in and wait for it to be tested.</p>
        */
    export class IotDeviceAdvisorClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, IotDeviceAdvisorClientResolvedConfig> {
            /**
                * The resolved configuration of IotDeviceAdvisorClient class. This is resolved and normalized from the {@link IotDeviceAdvisorClientConfig | constructor configuration interface}.
                */
            readonly config: IotDeviceAdvisorClientResolvedConfig;
            constructor(configuration: IotDeviceAdvisorClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { IotDeviceAdvisorServiceException as __BaseException } from "@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/IotDeviceAdvisorServiceException";
    /**
        * <p>Sends a Conflict Exception.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>Information of a test device. A thing ARN or a certificate ARN is required.</p>
        */
    export interface DeviceUnderTest {
            /**
                * <p>Lists devices thing ARN.</p>
                */
            thingArn?: string;
            /**
                * <p>Lists devices certificate ARN.</p>
                */
            certificateArn?: string;
    }
    export namespace DeviceUnderTest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceUnderTest) => any;
    }
    /**
        * <p>Gets Suite Definition Configuration.</p>
        */
    export interface SuiteDefinitionConfiguration {
            /**
                * <p>Gets Suite Definition Configuration name.</p>
                */
            suiteDefinitionName?: string;
            /**
                * <p>Gets the devices configured.</p>
                */
            devices?: DeviceUnderTest[];
            /**
                * <p>Gets the tests intended for qualification in a suite.</p>
                */
            intendedForQualification?: boolean;
            /**
                * <p>Gets test suite root group.</p>
                */
            rootGroup?: string;
            /**
                * <p>Gets the device permission ARN.</p>
                */
            devicePermissionRoleArn?: string;
    }
    export namespace SuiteDefinitionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuiteDefinitionConfiguration) => any;
    }
    export interface CreateSuiteDefinitionRequest {
            /**
                * <p>Creates a Device Advisor test suite with suite definition configuration.</p>
                */
            suiteDefinitionConfiguration?: SuiteDefinitionConfiguration;
            /**
                * <p>The tags to be attached to the suite definition.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateSuiteDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSuiteDefinitionRequest) => any;
    }
    export interface CreateSuiteDefinitionResponse {
            /**
                * <p>Creates a Device Advisor test suite with suite UUID.</p>
                */
            suiteDefinitionId?: string;
            /**
                * <p>Creates a Device Advisor test suite with Amazon Resource Name (ARN).</p>
                */
            suiteDefinitionArn?: string;
            /**
                * <p>Creates a Device Advisor test suite with suite definition name.</p>
                */
            suiteDefinitionName?: string;
            /**
                * <p>Creates a Device Advisor test suite with TimeStamp of when it was created.</p>
                */
            createdAt?: Date;
    }
    export namespace CreateSuiteDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSuiteDefinitionResponse) => any;
    }
    /**
        * <p>Sends an Internal Failure exception.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>Sends a validation exception.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface DeleteSuiteDefinitionRequest {
            /**
                * <p>Suite definition ID of the test suite to be deleted.</p>
                */
            suiteDefinitionId: string | undefined;
    }
    export namespace DeleteSuiteDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSuiteDefinitionRequest) => any;
    }
    export interface DeleteSuiteDefinitionResponse {
    }
    export namespace DeleteSuiteDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSuiteDefinitionResponse) => any;
    }
    export interface GetEndpointRequest {
            /**
                * <p>The thing ARN of the device. This is an optional parameter.</p>
                */
            thingArn?: string;
            /**
                * <p>The certificate ARN of the device. This is an optional parameter.</p>
                */
            certificateArn?: string;
    }
    export namespace GetEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEndpointRequest) => any;
    }
    export interface GetEndpointResponse {
            /**
                * <p>The response of an Device Advisor endpoint.</p>
                */
            endpoint?: string;
    }
    export namespace GetEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEndpointResponse) => any;
    }
    /**
        * <p>Sends a Resource Not Found exception.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface GetSuiteDefinitionRequest {
            /**
                * <p>Suite definition ID of the test suite to get.</p>
                */
            suiteDefinitionId: string | undefined;
            /**
                * <p>Suite definition version of the test suite to get.</p>
                */
            suiteDefinitionVersion?: string;
    }
    export namespace GetSuiteDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteDefinitionRequest) => any;
    }
    export interface GetSuiteDefinitionResponse {
            /**
                * <p>Suite definition ID of the suite definition.</p>
                */
            suiteDefinitionId?: string;
            /**
                * <p>The ARN of the suite definition.</p>
                */
            suiteDefinitionArn?: string;
            /**
                * <p>Suite definition version of the suite definition.</p>
                */
            suiteDefinitionVersion?: string;
            /**
                * <p>Latest suite definition version of the suite definition.</p>
                */
            latestVersion?: string;
            /**
                * <p>Suite configuration of the suite definition.</p>
                */
            suiteDefinitionConfiguration?: SuiteDefinitionConfiguration;
            /**
                * <p>Date (in Unix epoch time) when the suite definition was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>Date (in Unix epoch time) when the suite definition was last modified.</p>
                */
            lastModifiedAt?: Date;
            /**
                * <p>Tags attached to the suite definition.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetSuiteDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteDefinitionResponse) => any;
    }
    export interface GetSuiteRunRequest {
            /**
                * <p>Suite definition ID for the test suite run.</p>
                */
            suiteDefinitionId: string | undefined;
            /**
                * <p>Suite run ID for the test suite run.</p>
                */
            suiteRunId: string | undefined;
    }
    export namespace GetSuiteRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteRunRequest) => any;
    }
    export enum SuiteRunStatus {
            CANCELED = "CANCELED",
            ERROR = "ERROR",
            FAIL = "FAIL",
            PASS = "PASS",
            PASS_WITH_WARNINGS = "PASS_WITH_WARNINGS",
            PENDING = "PENDING",
            RUNNING = "RUNNING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING"
    }
    /**
        * <p>Gets suite run configuration.</p>
        */
    export interface SuiteRunConfiguration {
            /**
                * <p>Gets the primary device for suite run.</p>
                */
            primaryDevice?: DeviceUnderTest;
            /**
                * <p>Gets test case list.</p>
                */
            selectedTestList?: string[];
            /**
                * <p>TRUE if multiple test suites run in parallel.</p>
                */
            parallelRun?: boolean;
    }
    export namespace SuiteRunConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuiteRunConfiguration) => any;
    }
    export enum Status {
            CANCELED = "CANCELED",
            ERROR = "ERROR",
            FAIL = "FAIL",
            PASS = "PASS",
            PASS_WITH_WARNINGS = "PASS_WITH_WARNINGS",
            PENDING = "PENDING",
            RUNNING = "RUNNING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING"
    }
    /**
        * <p>Provides the test case run.</p>
        */
    export interface TestCaseRun {
            /**
                * <p>Provides the test case run ID.</p>
                */
            testCaseRunId?: string;
            /**
                * <p>Provides the test case run definition ID.</p>
                */
            testCaseDefinitionId?: string;
            /**
                * <p>Provides the test case run definition name.</p>
                */
            testCaseDefinitionName?: string;
            /**
                * <p>Provides the test case run status. Status is one of the following:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>PASS</code>: Test passed.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>FAIL</code>: Test failed.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PENDING</code>: Test has not started running but is scheduled.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RUNNING</code>: Test is running.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>STOPPING</code>: Test is performing cleanup steps. You will see this status only if you stop a suite run.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>STOPPED</code> Test is stopped. You will see this status only if you stop a suite run.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PASS_WITH_WARNINGS</code>: Test passed with warnings.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ERORR</code>: Test faced an error when running due to an internal issue.</p>
                *             </li>
                *          </ul>
                */
            status?: Status | string;
            /**
                * <p>Provides test case run start time.</p>
                */
            startTime?: Date;
            /**
                * <p>Provides test case run end time.</p>
                */
            endTime?: Date;
            /**
                * <p>Provides test case run log URL.</p>
                */
            logUrl?: string;
            /**
                * <p>Provides test case run warnings.</p>
                */
            warnings?: string;
            /**
                * <p>Provides test case run failure result.</p>
                */
            failure?: string;
    }
    export namespace TestCaseRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestCaseRun) => any;
    }
    /**
        * <p>Show Group Result.</p>
        */
    export interface GroupResult {
            /**
                * <p>Group result ID.</p>
                */
            groupId?: string;
            /**
                * <p>Group Result Name.</p>
                */
            groupName?: string;
            /**
                * <p>Tests under Group Result.</p>
                */
            tests?: TestCaseRun[];
    }
    export namespace GroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupResult) => any;
    }
    /**
        * <p>Show each group result.</p>
        */
    export interface TestResult {
            /**
                * <p>Show each group of test results.</p>
                */
            groups?: GroupResult[];
    }
    export namespace TestResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestResult) => any;
    }
    export interface GetSuiteRunResponse {
            /**
                * <p>Suite definition ID for the test suite run.</p>
                */
            suiteDefinitionId?: string;
            /**
                * <p>Suite definition version for the test suite run.</p>
                */
            suiteDefinitionVersion?: string;
            /**
                * <p>Suite run ID for the test suite run.</p>
                */
            suiteRunId?: string;
            /**
                * <p>The ARN of the suite run.</p>
                */
            suiteRunArn?: string;
            /**
                * <p>Suite run configuration for the test suite run.</p>
                */
            suiteRunConfiguration?: SuiteRunConfiguration;
            /**
                * <p>Test results for the test suite run.</p>
                */
            testResult?: TestResult;
            /**
                * <p>Date (in Unix epoch time) when the test suite run started.</p>
                */
            startTime?: Date;
            /**
                * <p>Date (in Unix epoch time) when the test suite run ended.</p>
                */
            endTime?: Date;
            /**
                * <p>Status for the test suite run.</p>
                */
            status?: SuiteRunStatus | string;
            /**
                * <p>Error reason for any test suite run failure.</p>
                */
            errorReason?: string;
            /**
                * <p>The tags attached to the suite run.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetSuiteRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteRunResponse) => any;
    }
    export interface GetSuiteRunReportRequest {
            /**
                * <p>Suite definition ID of the test suite.</p>
                */
            suiteDefinitionId: string | undefined;
            /**
                * <p>Suite run ID of the test suite run.</p>
                */
            suiteRunId: string | undefined;
    }
    export namespace GetSuiteRunReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteRunReportRequest) => any;
    }
    export interface GetSuiteRunReportResponse {
            /**
                * <p>Download URL of the qualification report.</p>
                */
            qualificationReportDownloadUrl?: string;
    }
    export namespace GetSuiteRunReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSuiteRunReportResponse) => any;
    }
    export interface ListSuiteDefinitionsRequest {
            /**
                * <p>The maximum number of results to return at once.</p>
                */
            maxResults?: number;
            /**
                * <p>A token used to get the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListSuiteDefinitionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSuiteDefinitionsRequest) => any;
    }
    /**
        * <p>Information about the suite definition.</p>
        */
    export interface SuiteDefinitionInformation {
            /**
                * <p>Suite definition ID of the test suite.</p>
                */
            suiteDefinitionId?: string;
            /**
                * <p>Suite name of the test suite.</p>
                */
            suiteDefinitionName?: string;
            /**
                * <p>Specifies the devices that are under test for the test suite.</p>
                */
            defaultDevices?: DeviceUnderTest[];
            /**
                * <p>Specifies if the test suite is intended for qualification.</p>
                */
            intendedForQualification?: boolean;
            /**
                * <p>Date (in Unix epoch time) when the test suite was created.</p>
                */
            createdAt?: Date;
    }
    export namespace SuiteDefinitionInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuiteDefinitionInformation) => any;
    }
    export interface ListSuiteDefinitionsResponse {
            /**
                * <p>An array of objects that provide summaries of information about the suite definitions in the list.</p>
                */
            suiteDefinitionInformationList?: SuiteDefinitionInformation[];
            /**
                * <p>A token used to get the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListSuiteDefinitionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSuiteDefinitionsResponse) => any;
    }
    export interface ListSuiteRunsRequest {
            /**
                * <p>Lists the test suite runs of the specified test suite based on suite definition
                *             ID.</p>
                */
            suiteDefinitionId?: string;
            /**
                * <p>Must be passed along with <code>suiteDefinitionId</code>. Lists the test suite runs of
                *             the specified test suite based on suite definition version.</p>
                */
            suiteDefinitionVersion?: string;
            /**
                * <p>The maximum number of results to return at once.</p>
                */
            maxResults?: number;
            /**
                * <p>A token to retrieve the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListSuiteRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSuiteRunsRequest) => any;
    }
    /**
        * <p>Information about the suite run.</p>
        *         <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">SuiteRunInformation</a> action.</p>
        */
    export interface SuiteRunInformation {
            /**
                * <p>Suite definition ID of the suite run.</p>
                */
            suiteDefinitionId?: string;
            /**
                * <p>Suite definition version of the suite run.</p>
                */
            suiteDefinitionVersion?: string;
            /**
                * <p>Suite definition name of the suite run.</p>
                */
            suiteDefinitionName?: string;
            /**
                * <p>Suite run ID of the suite run.</p>
                */
            suiteRunId?: string;
            /**
                * <p>Date (in Unix epoch time) when the suite run was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>Date (in Unix epoch time) when the suite run was started.</p>
                */
            startedAt?: Date;
            /**
                * <p>Date (in Unix epoch time) when the suite run ended.</p>
                */
            endAt?: Date;
            /**
                * <p>Status of the suite run.</p>
                */
            status?: SuiteRunStatus | string;
            /**
                * <p>Number of test cases that passed in the suite run.</p>
                */
            passed?: number;
            /**
                * <p>Number of test cases that failed in the suite run.</p>
                */
            failed?: number;
    }
    export namespace SuiteRunInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SuiteRunInformation) => any;
    }
    export interface ListSuiteRunsResponse {
            /**
                * <p>An array of objects that provide summaries of information about the suite runs in the list.</p>
                */
            suiteRunsList?: SuiteRunInformation[];
            /**
                * <p>A token to retrieve the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListSuiteRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSuiteRunsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the IoT Device Advisor resource.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags attached to the IoT Device Advisor resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface StartSuiteRunRequest {
            /**
                * <p>Suite definition ID of the test suite.</p>
                */
            suiteDefinitionId: string | undefined;
            /**
                * <p>Suite definition version of the test suite.</p>
                */
            suiteDefinitionVersion?: string;
            /**
                * <p>Suite run configuration.</p>
                */
            suiteRunConfiguration?: SuiteRunConfiguration;
            /**
                * <p>The tags to be attached to the suite run.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace StartSuiteRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSuiteRunRequest) => any;
    }
    export interface StartSuiteRunResponse {
            /**
                * <p>Suite Run ID of the started suite run.</p>
                */
            suiteRunId?: string;
            /**
                * <p>Amazon Resource Name (ARN) of the started suite run.</p>
                */
            suiteRunArn?: string;
            /**
                * <p>Starts a Device Advisor test suite run based on suite create time.</p>
                */
            createdAt?: Date;
    }
    export namespace StartSuiteRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSuiteRunResponse) => any;
    }
    export interface StopSuiteRunRequest {
            /**
                * <p>Suite definition ID of the test suite run to be stopped.</p>
                */
            suiteDefinitionId: string | undefined;
            /**
                * <p>Suite run ID of the test suite run to be stopped.</p>
                */
            suiteRunId: string | undefined;
    }
    export namespace StopSuiteRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSuiteRunRequest) => any;
    }
    export interface StopSuiteRunResponse {
    }
    export namespace StopSuiteRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopSuiteRunResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The resource ARN of an IoT Device Advisor resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tags to be attached to the IoT Device Advisor resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The resource ARN of an IoT Device Advisor resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>List of tag keys to remove from the IoT Device Advisor resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateSuiteDefinitionRequest {
            /**
                * <p>Suite definition ID of the test suite to be updated.</p>
                */
            suiteDefinitionId: string | undefined;
            /**
                * <p>Updates a Device Advisor test suite with suite definition configuration.</p>
                */
            suiteDefinitionConfiguration?: SuiteDefinitionConfiguration;
    }
    export namespace UpdateSuiteDefinitionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSuiteDefinitionRequest) => any;
    }
    export interface UpdateSuiteDefinitionResponse {
            /**
                * <p>Suite definition ID of the updated test suite.</p>
                */
            suiteDefinitionId?: string;
            /**
                * <p>Amazon Resource Name (ARN) of the updated test suite.</p>
                */
            suiteDefinitionArn?: string;
            /**
                * <p>Suite definition name of the updated test suite.</p>
                */
            suiteDefinitionName?: string;
            /**
                * <p>Suite definition version of the updated test suite.</p>
                */
            suiteDefinitionVersion?: string;
            /**
                * <p>Timestamp of when the test suite was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>Timestamp of when the test suite was updated.</p>
                */
            lastUpdatedAt?: Date;
    }
    export namespace UpdateSuiteDefinitionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSuiteDefinitionResponse) => any;
    }
}

declare module '@aws-sdk/client-iotdeviceadvisor/node_modules/@aws-sdk/client-iotdeviceadvisor/dist-types/models/IotDeviceAdvisorServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from IotDeviceAdvisor service.
        */
    export class IotDeviceAdvisorServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

