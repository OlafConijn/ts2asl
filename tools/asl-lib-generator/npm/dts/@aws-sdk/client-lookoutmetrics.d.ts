// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-lookoutmetrics' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ActivateAnomalyDetectorCommandInput, ActivateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ActivateAnomalyDetectorCommand";
    import { BackTestAnomalyDetectorCommandInput, BackTestAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/BackTestAnomalyDetectorCommand";
    import { CreateAlertCommandInput, CreateAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateAlertCommand";
    import { CreateAnomalyDetectorCommandInput, CreateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateAnomalyDetectorCommand";
    import { CreateMetricSetCommandInput, CreateMetricSetCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateMetricSetCommand";
    import { DeactivateAnomalyDetectorCommandInput, DeactivateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeactivateAnomalyDetectorCommand";
    import { DeleteAlertCommandInput, DeleteAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeleteAlertCommand";
    import { DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeleteAnomalyDetectorCommand";
    import { DescribeAlertCommandInput, DescribeAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAlertCommand";
    import { DescribeAnomalyDetectionExecutionsCommandInput, DescribeAnomalyDetectionExecutionsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAnomalyDetectionExecutionsCommand";
    import { DescribeAnomalyDetectorCommandInput, DescribeAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAnomalyDetectorCommand";
    import { DescribeMetricSetCommandInput, DescribeMetricSetCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeMetricSetCommand";
    import { DetectMetricSetConfigCommandInput, DetectMetricSetConfigCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DetectMetricSetConfigCommand";
    import { GetAnomalyGroupCommandInput, GetAnomalyGroupCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetAnomalyGroupCommand";
    import { GetFeedbackCommandInput, GetFeedbackCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetFeedbackCommand";
    import { GetSampleDataCommandInput, GetSampleDataCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetSampleDataCommand";
    import { ListAlertsCommandInput, ListAlertsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAlertsCommand";
    import { ListAnomalyDetectorsCommandInput, ListAnomalyDetectorsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyDetectorsCommand";
    import { ListAnomalyGroupRelatedMetricsCommandInput, ListAnomalyGroupRelatedMetricsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupRelatedMetricsCommand";
    import { ListAnomalyGroupSummariesCommandInput, ListAnomalyGroupSummariesCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupSummariesCommand";
    import { ListAnomalyGroupTimeSeriesCommandInput, ListAnomalyGroupTimeSeriesCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupTimeSeriesCommand";
    import { ListMetricSetsCommandInput, ListMetricSetsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListMetricSetsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListTagsForResourceCommand";
    import { PutFeedbackCommandInput, PutFeedbackCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/PutFeedbackCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UntagResourceCommand";
    import { UpdateAlertCommandInput, UpdateAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateAlertCommand";
    import { UpdateAnomalyDetectorCommandInput, UpdateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateAnomalyDetectorCommand";
    import { UpdateMetricSetCommandInput, UpdateMetricSetCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateMetricSetCommand";
    import { LookoutMetricsClient } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    /**
        * <p>This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service
        *       with tutorials for getting started, visit <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev">Amazon
        *         Lookout for Metrics Developer Guide</a>.</p>
        */
    export class LookoutMetrics extends LookoutMetricsClient {
            /**
                * <p>Activates an anomaly detector.</p>
                */
            activateAnomalyDetector(args: ActivateAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<ActivateAnomalyDetectorCommandOutput>;
            activateAnomalyDetector(args: ActivateAnomalyDetectorCommandInput, cb: (err: any, data?: ActivateAnomalyDetectorCommandOutput) => void): void;
            activateAnomalyDetector(args: ActivateAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ActivateAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Runs a backtest for anomaly detection for the specified resource.</p>
                */
            backTestAnomalyDetector(args: BackTestAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<BackTestAnomalyDetectorCommandOutput>;
            backTestAnomalyDetector(args: BackTestAnomalyDetectorCommandInput, cb: (err: any, data?: BackTestAnomalyDetectorCommandOutput) => void): void;
            backTestAnomalyDetector(args: BackTestAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BackTestAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Creates an alert for an anomaly detector.</p>
                */
            createAlert(args: CreateAlertCommandInput, options?: __HttpHandlerOptions): Promise<CreateAlertCommandOutput>;
            createAlert(args: CreateAlertCommandInput, cb: (err: any, data?: CreateAlertCommandOutput) => void): void;
            createAlert(args: CreateAlertCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAlertCommandOutput) => void): void;
            /**
                * <p>Creates an anomaly detector.</p>
                */
            createAnomalyDetector(args: CreateAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<CreateAnomalyDetectorCommandOutput>;
            createAnomalyDetector(args: CreateAnomalyDetectorCommandInput, cb: (err: any, data?: CreateAnomalyDetectorCommandOutput) => void): void;
            createAnomalyDetector(args: CreateAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Creates a dataset.</p>
                */
            createMetricSet(args: CreateMetricSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateMetricSetCommandOutput>;
            createMetricSet(args: CreateMetricSetCommandInput, cb: (err: any, data?: CreateMetricSetCommandOutput) => void): void;
            createMetricSet(args: CreateMetricSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMetricSetCommandOutput) => void): void;
            /**
                * <p>Deactivates an anomaly detector.</p>
                */
            deactivateAnomalyDetector(args: DeactivateAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<DeactivateAnomalyDetectorCommandOutput>;
            deactivateAnomalyDetector(args: DeactivateAnomalyDetectorCommandInput, cb: (err: any, data?: DeactivateAnomalyDetectorCommandOutput) => void): void;
            deactivateAnomalyDetector(args: DeactivateAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeactivateAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Deletes an alert.</p>
                */
            deleteAlert(args: DeleteAlertCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAlertCommandOutput>;
            deleteAlert(args: DeleteAlertCommandInput, cb: (err: any, data?: DeleteAlertCommandOutput) => void): void;
            deleteAlert(args: DeleteAlertCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAlertCommandOutput) => void): void;
            /**
                * <p>Deletes a detector. Deleting an anomaly detector will delete all of its corresponding resources including any
                *       configured datasets and alerts.</p>
                */
            deleteAnomalyDetector(args: DeleteAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAnomalyDetectorCommandOutput>;
            deleteAnomalyDetector(args: DeleteAnomalyDetectorCommandInput, cb: (err: any, data?: DeleteAnomalyDetectorCommandOutput) => void): void;
            deleteAnomalyDetector(args: DeleteAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Describes an alert.</p>
                *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
                *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
                */
            describeAlert(args: DescribeAlertCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAlertCommandOutput>;
            describeAlert(args: DescribeAlertCommandInput, cb: (err: any, data?: DescribeAlertCommandOutput) => void): void;
            describeAlert(args: DescribeAlertCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAlertCommandOutput) => void): void;
            /**
                * <p>Returns information about the status of the specified anomaly detection jobs.</p>
                */
            describeAnomalyDetectionExecutions(args: DescribeAnomalyDetectionExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAnomalyDetectionExecutionsCommandOutput>;
            describeAnomalyDetectionExecutions(args: DescribeAnomalyDetectionExecutionsCommandInput, cb: (err: any, data?: DescribeAnomalyDetectionExecutionsCommandOutput) => void): void;
            describeAnomalyDetectionExecutions(args: DescribeAnomalyDetectionExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAnomalyDetectionExecutionsCommandOutput) => void): void;
            /**
                * <p>Describes a detector.</p>
                *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
                *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
                */
            describeAnomalyDetector(args: DescribeAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAnomalyDetectorCommandOutput>;
            describeAnomalyDetector(args: DescribeAnomalyDetectorCommandInput, cb: (err: any, data?: DescribeAnomalyDetectorCommandOutput) => void): void;
            describeAnomalyDetector(args: DescribeAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Describes a dataset.</p>
                *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
                *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
                */
            describeMetricSet(args: DescribeMetricSetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMetricSetCommandOutput>;
            describeMetricSet(args: DescribeMetricSetCommandInput, cb: (err: any, data?: DescribeMetricSetCommandOutput) => void): void;
            describeMetricSet(args: DescribeMetricSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMetricSetCommandOutput) => void): void;
            /**
                * <p>Detects an Amazon S3 dataset's file format, interval, and offset.</p>
                */
            detectMetricSetConfig(args: DetectMetricSetConfigCommandInput, options?: __HttpHandlerOptions): Promise<DetectMetricSetConfigCommandOutput>;
            detectMetricSetConfig(args: DetectMetricSetConfigCommandInput, cb: (err: any, data?: DetectMetricSetConfigCommandOutput) => void): void;
            detectMetricSetConfig(args: DetectMetricSetConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetectMetricSetConfigCommandOutput) => void): void;
            /**
                * <p>Returns details about a group of anomalous metrics.</p>
                */
            getAnomalyGroup(args: GetAnomalyGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetAnomalyGroupCommandOutput>;
            getAnomalyGroup(args: GetAnomalyGroupCommandInput, cb: (err: any, data?: GetAnomalyGroupCommandOutput) => void): void;
            getAnomalyGroup(args: GetAnomalyGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAnomalyGroupCommandOutput) => void): void;
            /**
                * <p>Get feedback for an anomaly group.</p>
                */
            getFeedback(args: GetFeedbackCommandInput, options?: __HttpHandlerOptions): Promise<GetFeedbackCommandOutput>;
            getFeedback(args: GetFeedbackCommandInput, cb: (err: any, data?: GetFeedbackCommandOutput) => void): void;
            getFeedback(args: GetFeedbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFeedbackCommandOutput) => void): void;
            /**
                * <p>Returns a selection of sample records from an Amazon S3 datasource.</p>
                */
            getSampleData(args: GetSampleDataCommandInput, options?: __HttpHandlerOptions): Promise<GetSampleDataCommandOutput>;
            getSampleData(args: GetSampleDataCommandInput, cb: (err: any, data?: GetSampleDataCommandOutput) => void): void;
            getSampleData(args: GetSampleDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSampleDataCommandOutput) => void): void;
            /**
                * <p>Lists the alerts attached to a detector.</p>
                *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
                *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
                */
            listAlerts(args: ListAlertsCommandInput, options?: __HttpHandlerOptions): Promise<ListAlertsCommandOutput>;
            listAlerts(args: ListAlertsCommandInput, cb: (err: any, data?: ListAlertsCommandOutput) => void): void;
            listAlerts(args: ListAlertsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAlertsCommandOutput) => void): void;
            /**
                * <p>Lists the detectors in the current AWS Region.</p>
                *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
                *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
                */
            listAnomalyDetectors(args: ListAnomalyDetectorsCommandInput, options?: __HttpHandlerOptions): Promise<ListAnomalyDetectorsCommandOutput>;
            listAnomalyDetectors(args: ListAnomalyDetectorsCommandInput, cb: (err: any, data?: ListAnomalyDetectorsCommandOutput) => void): void;
            listAnomalyDetectors(args: ListAnomalyDetectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAnomalyDetectorsCommandOutput) => void): void;
            /**
                * <p>Returns a list of measures that are potential causes or effects of an
                *             anomaly group.</p>
                */
            listAnomalyGroupRelatedMetrics(args: ListAnomalyGroupRelatedMetricsCommandInput, options?: __HttpHandlerOptions): Promise<ListAnomalyGroupRelatedMetricsCommandOutput>;
            listAnomalyGroupRelatedMetrics(args: ListAnomalyGroupRelatedMetricsCommandInput, cb: (err: any, data?: ListAnomalyGroupRelatedMetricsCommandOutput) => void): void;
            listAnomalyGroupRelatedMetrics(args: ListAnomalyGroupRelatedMetricsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAnomalyGroupRelatedMetricsCommandOutput) => void): void;
            /**
                * <p>Returns a list of anomaly groups.</p>
                */
            listAnomalyGroupSummaries(args: ListAnomalyGroupSummariesCommandInput, options?: __HttpHandlerOptions): Promise<ListAnomalyGroupSummariesCommandOutput>;
            listAnomalyGroupSummaries(args: ListAnomalyGroupSummariesCommandInput, cb: (err: any, data?: ListAnomalyGroupSummariesCommandOutput) => void): void;
            listAnomalyGroupSummaries(args: ListAnomalyGroupSummariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAnomalyGroupSummariesCommandOutput) => void): void;
            /**
                * <p>Gets a list of anomalous metrics for a measure in an anomaly group.</p>
                */
            listAnomalyGroupTimeSeries(args: ListAnomalyGroupTimeSeriesCommandInput, options?: __HttpHandlerOptions): Promise<ListAnomalyGroupTimeSeriesCommandOutput>;
            listAnomalyGroupTimeSeries(args: ListAnomalyGroupTimeSeriesCommandInput, cb: (err: any, data?: ListAnomalyGroupTimeSeriesCommandOutput) => void): void;
            listAnomalyGroupTimeSeries(args: ListAnomalyGroupTimeSeriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAnomalyGroupTimeSeriesCommandOutput) => void): void;
            /**
                * <p>Lists the datasets in the current AWS Region.</p>
                *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
                *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
                */
            listMetricSets(args: ListMetricSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListMetricSetsCommandOutput>;
            listMetricSets(args: ListMetricSetsCommandInput, cb: (err: any, data?: ListMetricSetsCommandOutput) => void): void;
            listMetricSets(args: ListMetricSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMetricSetsCommandOutput) => void): void;
            /**
                * <p>Gets a list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> for a detector, dataset, or alert.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Add feedback for an anomalous metric.</p>
                */
            putFeedback(args: PutFeedbackCommandInput, options?: __HttpHandlerOptions): Promise<PutFeedbackCommandOutput>;
            putFeedback(args: PutFeedbackCommandInput, cb: (err: any, data?: PutFeedbackCommandOutput) => void): void;
            putFeedback(args: PutFeedbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutFeedbackCommandOutput) => void): void;
            /**
                * <p>Adds <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to a detector, dataset, or alert.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> from a detector, dataset, or alert.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Make changes to an existing alert.</p>
                */
            updateAlert(args: UpdateAlertCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAlertCommandOutput>;
            updateAlert(args: UpdateAlertCommandInput, cb: (err: any, data?: UpdateAlertCommandOutput) => void): void;
            updateAlert(args: UpdateAlertCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAlertCommandOutput) => void): void;
            /**
                * <p>Updates a detector. After activation, you can only change a detector's ingestion delay and description.</p>
                */
            updateAnomalyDetector(args: UpdateAnomalyDetectorCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAnomalyDetectorCommandOutput>;
            updateAnomalyDetector(args: UpdateAnomalyDetectorCommandInput, cb: (err: any, data?: UpdateAnomalyDetectorCommandOutput) => void): void;
            updateAnomalyDetector(args: UpdateAnomalyDetectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAnomalyDetectorCommandOutput) => void): void;
            /**
                * <p>Updates a dataset.</p>
                */
            updateMetricSet(args: UpdateMetricSetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMetricSetCommandOutput>;
            updateMetricSet(args: UpdateMetricSetCommandInput, cb: (err: any, data?: UpdateMetricSetCommandOutput) => void): void;
            updateMetricSet(args: UpdateMetricSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMetricSetCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ActivateAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ActivateAnomalyDetectorRequest, ActivateAnomalyDetectorResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ActivateAnomalyDetectorCommandInput extends ActivateAnomalyDetectorRequest {
    }
    export interface ActivateAnomalyDetectorCommandOutput extends ActivateAnomalyDetectorResponse, __MetadataBearer {
    }
    /**
        * <p>Activates an anomaly detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ActivateAnomalyDetectorCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ActivateAnomalyDetectorCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ActivateAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ActivateAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link ActivateAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ActivateAnomalyDetectorCommand extends $Command<ActivateAnomalyDetectorCommandInput, ActivateAnomalyDetectorCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ActivateAnomalyDetectorCommandInput;
            constructor(input: ActivateAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ActivateAnomalyDetectorCommandInput, ActivateAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/BackTestAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { BackTestAnomalyDetectorRequest, BackTestAnomalyDetectorResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface BackTestAnomalyDetectorCommandInput extends BackTestAnomalyDetectorRequest {
    }
    export interface BackTestAnomalyDetectorCommandOutput extends BackTestAnomalyDetectorResponse, __MetadataBearer {
    }
    /**
        * <p>Runs a backtest for anomaly detection for the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, BackTestAnomalyDetectorCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, BackTestAnomalyDetectorCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new BackTestAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BackTestAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link BackTestAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class BackTestAnomalyDetectorCommand extends $Command<BackTestAnomalyDetectorCommandInput, BackTestAnomalyDetectorCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: BackTestAnomalyDetectorCommandInput;
            constructor(input: BackTestAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BackTestAnomalyDetectorCommandInput, BackTestAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateAlertCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { CreateAlertRequest, CreateAlertResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface CreateAlertCommandInput extends CreateAlertRequest {
    }
    export interface CreateAlertCommandOutput extends CreateAlertResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an alert for an anomaly detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, CreateAlertCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, CreateAlertCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new CreateAlertCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAlertCommandInput} for command's `input` shape.
        * @see {@link CreateAlertCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class CreateAlertCommand extends $Command<CreateAlertCommandInput, CreateAlertCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: CreateAlertCommandInput;
            constructor(input: CreateAlertCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAlertCommandInput, CreateAlertCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { CreateAnomalyDetectorRequest, CreateAnomalyDetectorResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface CreateAnomalyDetectorCommandInput extends CreateAnomalyDetectorRequest {
    }
    export interface CreateAnomalyDetectorCommandOutput extends CreateAnomalyDetectorResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an anomaly detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, CreateAnomalyDetectorCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, CreateAnomalyDetectorCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new CreateAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link CreateAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class CreateAnomalyDetectorCommand extends $Command<CreateAnomalyDetectorCommandInput, CreateAnomalyDetectorCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: CreateAnomalyDetectorCommandInput;
            constructor(input: CreateAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAnomalyDetectorCommandInput, CreateAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateMetricSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { CreateMetricSetRequest, CreateMetricSetResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface CreateMetricSetCommandInput extends CreateMetricSetRequest {
    }
    export interface CreateMetricSetCommandOutput extends CreateMetricSetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, CreateMetricSetCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, CreateMetricSetCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new CreateMetricSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMetricSetCommandInput} for command's `input` shape.
        * @see {@link CreateMetricSetCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class CreateMetricSetCommand extends $Command<CreateMetricSetCommandInput, CreateMetricSetCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: CreateMetricSetCommandInput;
            constructor(input: CreateMetricSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMetricSetCommandInput, CreateMetricSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeactivateAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DeactivateAnomalyDetectorRequest, DeactivateAnomalyDetectorResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DeactivateAnomalyDetectorCommandInput extends DeactivateAnomalyDetectorRequest {
    }
    export interface DeactivateAnomalyDetectorCommandOutput extends DeactivateAnomalyDetectorResponse, __MetadataBearer {
    }
    /**
        * <p>Deactivates an anomaly detector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DeactivateAnomalyDetectorCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DeactivateAnomalyDetectorCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DeactivateAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeactivateAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link DeactivateAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DeactivateAnomalyDetectorCommand extends $Command<DeactivateAnomalyDetectorCommandInput, DeactivateAnomalyDetectorCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DeactivateAnomalyDetectorCommandInput;
            constructor(input: DeactivateAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeactivateAnomalyDetectorCommandInput, DeactivateAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeleteAlertCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DeleteAlertRequest, DeleteAlertResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DeleteAlertCommandInput extends DeleteAlertRequest {
    }
    export interface DeleteAlertCommandOutput extends DeleteAlertResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an alert.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DeleteAlertCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DeleteAlertCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DeleteAlertCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAlertCommandInput} for command's `input` shape.
        * @see {@link DeleteAlertCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DeleteAlertCommand extends $Command<DeleteAlertCommandInput, DeleteAlertCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DeleteAlertCommandInput;
            constructor(input: DeleteAlertCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAlertCommandInput, DeleteAlertCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeleteAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DeleteAnomalyDetectorRequest, DeleteAnomalyDetectorResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DeleteAnomalyDetectorCommandInput extends DeleteAnomalyDetectorRequest {
    }
    export interface DeleteAnomalyDetectorCommandOutput extends DeleteAnomalyDetectorResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a detector. Deleting an anomaly detector will delete all of its corresponding resources including any
        *       configured datasets and alerts.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DeleteAnomalyDetectorCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DeleteAnomalyDetectorCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DeleteAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link DeleteAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DeleteAnomalyDetectorCommand extends $Command<DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DeleteAnomalyDetectorCommandInput;
            constructor(input: DeleteAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAlertCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DescribeAlertRequest, DescribeAlertResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DescribeAlertCommandInput extends DescribeAlertRequest {
    }
    export interface DescribeAlertCommandOutput extends DescribeAlertResponse, __MetadataBearer {
    }
    /**
        * <p>Describes an alert.</p>
        *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
        *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DescribeAlertCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DescribeAlertCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DescribeAlertCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAlertCommandInput} for command's `input` shape.
        * @see {@link DescribeAlertCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DescribeAlertCommand extends $Command<DescribeAlertCommandInput, DescribeAlertCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DescribeAlertCommandInput;
            constructor(input: DescribeAlertCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAlertCommandInput, DescribeAlertCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAnomalyDetectionExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DescribeAnomalyDetectionExecutionsRequest, DescribeAnomalyDetectionExecutionsResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DescribeAnomalyDetectionExecutionsCommandInput extends DescribeAnomalyDetectionExecutionsRequest {
    }
    export interface DescribeAnomalyDetectionExecutionsCommandOutput extends DescribeAnomalyDetectionExecutionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the status of the specified anomaly detection jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DescribeAnomalyDetectionExecutionsCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DescribeAnomalyDetectionExecutionsCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DescribeAnomalyDetectionExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAnomalyDetectionExecutionsCommandInput} for command's `input` shape.
        * @see {@link DescribeAnomalyDetectionExecutionsCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DescribeAnomalyDetectionExecutionsCommand extends $Command<DescribeAnomalyDetectionExecutionsCommandInput, DescribeAnomalyDetectionExecutionsCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DescribeAnomalyDetectionExecutionsCommandInput;
            constructor(input: DescribeAnomalyDetectionExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAnomalyDetectionExecutionsCommandInput, DescribeAnomalyDetectionExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DescribeAnomalyDetectorRequest, DescribeAnomalyDetectorResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DescribeAnomalyDetectorCommandInput extends DescribeAnomalyDetectorRequest {
    }
    export interface DescribeAnomalyDetectorCommandOutput extends DescribeAnomalyDetectorResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a detector.</p>
        *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
        *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DescribeAnomalyDetectorCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DescribeAnomalyDetectorCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DescribeAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link DescribeAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DescribeAnomalyDetectorCommand extends $Command<DescribeAnomalyDetectorCommandInput, DescribeAnomalyDetectorCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DescribeAnomalyDetectorCommandInput;
            constructor(input: DescribeAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAnomalyDetectorCommandInput, DescribeAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeMetricSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DescribeMetricSetRequest, DescribeMetricSetResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DescribeMetricSetCommandInput extends DescribeMetricSetRequest {
    }
    export interface DescribeMetricSetCommandOutput extends DescribeMetricSetResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a dataset.</p>
        *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
        *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DescribeMetricSetCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DescribeMetricSetCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DescribeMetricSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMetricSetCommandInput} for command's `input` shape.
        * @see {@link DescribeMetricSetCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DescribeMetricSetCommand extends $Command<DescribeMetricSetCommandInput, DescribeMetricSetCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DescribeMetricSetCommandInput;
            constructor(input: DescribeMetricSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMetricSetCommandInput, DescribeMetricSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DetectMetricSetConfigCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { DetectMetricSetConfigRequest, DetectMetricSetConfigResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface DetectMetricSetConfigCommandInput extends DetectMetricSetConfigRequest {
    }
    export interface DetectMetricSetConfigCommandOutput extends DetectMetricSetConfigResponse, __MetadataBearer {
    }
    /**
        * <p>Detects an Amazon S3 dataset's file format, interval, and offset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, DetectMetricSetConfigCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, DetectMetricSetConfigCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new DetectMetricSetConfigCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetectMetricSetConfigCommandInput} for command's `input` shape.
        * @see {@link DetectMetricSetConfigCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class DetectMetricSetConfigCommand extends $Command<DetectMetricSetConfigCommandInput, DetectMetricSetConfigCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: DetectMetricSetConfigCommandInput;
            constructor(input: DetectMetricSetConfigCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetectMetricSetConfigCommandInput, DetectMetricSetConfigCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetAnomalyGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { GetAnomalyGroupRequest, GetAnomalyGroupResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface GetAnomalyGroupCommandInput extends GetAnomalyGroupRequest {
    }
    export interface GetAnomalyGroupCommandOutput extends GetAnomalyGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Returns details about a group of anomalous metrics.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, GetAnomalyGroupCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, GetAnomalyGroupCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new GetAnomalyGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAnomalyGroupCommandInput} for command's `input` shape.
        * @see {@link GetAnomalyGroupCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class GetAnomalyGroupCommand extends $Command<GetAnomalyGroupCommandInput, GetAnomalyGroupCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: GetAnomalyGroupCommandInput;
            constructor(input: GetAnomalyGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAnomalyGroupCommandInput, GetAnomalyGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetFeedbackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { GetFeedbackRequest, GetFeedbackResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface GetFeedbackCommandInput extends GetFeedbackRequest {
    }
    export interface GetFeedbackCommandOutput extends GetFeedbackResponse, __MetadataBearer {
    }
    /**
        * <p>Get feedback for an anomaly group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, GetFeedbackCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, GetFeedbackCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new GetFeedbackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFeedbackCommandInput} for command's `input` shape.
        * @see {@link GetFeedbackCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class GetFeedbackCommand extends $Command<GetFeedbackCommandInput, GetFeedbackCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: GetFeedbackCommandInput;
            constructor(input: GetFeedbackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFeedbackCommandInput, GetFeedbackCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetSampleDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { GetSampleDataRequest, GetSampleDataResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface GetSampleDataCommandInput extends GetSampleDataRequest {
    }
    export interface GetSampleDataCommandOutput extends GetSampleDataResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a selection of sample records from an Amazon S3 datasource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, GetSampleDataCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, GetSampleDataCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new GetSampleDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSampleDataCommandInput} for command's `input` shape.
        * @see {@link GetSampleDataCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class GetSampleDataCommand extends $Command<GetSampleDataCommandInput, GetSampleDataCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: GetSampleDataCommandInput;
            constructor(input: GetSampleDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSampleDataCommandInput, GetSampleDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAlertsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ListAlertsRequest, ListAlertsResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ListAlertsCommandInput extends ListAlertsRequest {
    }
    export interface ListAlertsCommandOutput extends ListAlertsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the alerts attached to a detector.</p>
        *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
        *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ListAlertsCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ListAlertsCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ListAlertsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAlertsCommandInput} for command's `input` shape.
        * @see {@link ListAlertsCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ListAlertsCommand extends $Command<ListAlertsCommandInput, ListAlertsCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ListAlertsCommandInput;
            constructor(input: ListAlertsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAlertsCommandInput, ListAlertsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyDetectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ListAnomalyDetectorsRequest, ListAnomalyDetectorsResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ListAnomalyDetectorsCommandInput extends ListAnomalyDetectorsRequest {
    }
    export interface ListAnomalyDetectorsCommandOutput extends ListAnomalyDetectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the detectors in the current AWS Region.</p>
        *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
        *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ListAnomalyDetectorsCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ListAnomalyDetectorsCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ListAnomalyDetectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAnomalyDetectorsCommandInput} for command's `input` shape.
        * @see {@link ListAnomalyDetectorsCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ListAnomalyDetectorsCommand extends $Command<ListAnomalyDetectorsCommandInput, ListAnomalyDetectorsCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ListAnomalyDetectorsCommandInput;
            constructor(input: ListAnomalyDetectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAnomalyDetectorsCommandInput, ListAnomalyDetectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupRelatedMetricsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ListAnomalyGroupRelatedMetricsRequest, ListAnomalyGroupRelatedMetricsResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ListAnomalyGroupRelatedMetricsCommandInput extends ListAnomalyGroupRelatedMetricsRequest {
    }
    export interface ListAnomalyGroupRelatedMetricsCommandOutput extends ListAnomalyGroupRelatedMetricsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of measures that are potential causes or effects of an
        *             anomaly group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ListAnomalyGroupRelatedMetricsCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ListAnomalyGroupRelatedMetricsCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ListAnomalyGroupRelatedMetricsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAnomalyGroupRelatedMetricsCommandInput} for command's `input` shape.
        * @see {@link ListAnomalyGroupRelatedMetricsCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ListAnomalyGroupRelatedMetricsCommand extends $Command<ListAnomalyGroupRelatedMetricsCommandInput, ListAnomalyGroupRelatedMetricsCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ListAnomalyGroupRelatedMetricsCommandInput;
            constructor(input: ListAnomalyGroupRelatedMetricsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAnomalyGroupRelatedMetricsCommandInput, ListAnomalyGroupRelatedMetricsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupSummariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ListAnomalyGroupSummariesRequest, ListAnomalyGroupSummariesResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ListAnomalyGroupSummariesCommandInput extends ListAnomalyGroupSummariesRequest {
    }
    export interface ListAnomalyGroupSummariesCommandOutput extends ListAnomalyGroupSummariesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of anomaly groups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ListAnomalyGroupSummariesCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ListAnomalyGroupSummariesCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ListAnomalyGroupSummariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAnomalyGroupSummariesCommandInput} for command's `input` shape.
        * @see {@link ListAnomalyGroupSummariesCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ListAnomalyGroupSummariesCommand extends $Command<ListAnomalyGroupSummariesCommandInput, ListAnomalyGroupSummariesCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ListAnomalyGroupSummariesCommandInput;
            constructor(input: ListAnomalyGroupSummariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAnomalyGroupSummariesCommandInput, ListAnomalyGroupSummariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupTimeSeriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ListAnomalyGroupTimeSeriesRequest, ListAnomalyGroupTimeSeriesResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ListAnomalyGroupTimeSeriesCommandInput extends ListAnomalyGroupTimeSeriesRequest {
    }
    export interface ListAnomalyGroupTimeSeriesCommandOutput extends ListAnomalyGroupTimeSeriesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of anomalous metrics for a measure in an anomaly group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ListAnomalyGroupTimeSeriesCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ListAnomalyGroupTimeSeriesCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ListAnomalyGroupTimeSeriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAnomalyGroupTimeSeriesCommandInput} for command's `input` shape.
        * @see {@link ListAnomalyGroupTimeSeriesCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ListAnomalyGroupTimeSeriesCommand extends $Command<ListAnomalyGroupTimeSeriesCommandInput, ListAnomalyGroupTimeSeriesCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ListAnomalyGroupTimeSeriesCommandInput;
            constructor(input: ListAnomalyGroupTimeSeriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAnomalyGroupTimeSeriesCommandInput, ListAnomalyGroupTimeSeriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListMetricSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ListMetricSetsRequest, ListMetricSetsResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ListMetricSetsCommandInput extends ListMetricSetsRequest {
    }
    export interface ListMetricSetsCommandOutput extends ListMetricSetsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the datasets in the current AWS Region.</p>
        *          <p>Amazon Lookout for Metrics API actions are eventually consistent. If you do a read operation on a resource
        *       immediately after creating or modifying it, use retries to allow time for the write operation to complete.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ListMetricSetsCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ListMetricSetsCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ListMetricSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMetricSetsCommandInput} for command's `input` shape.
        * @see {@link ListMetricSetsCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ListMetricSetsCommand extends $Command<ListMetricSetsCommandInput, ListMetricSetsCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ListMetricSetsCommandInput;
            constructor(input: ListMetricSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMetricSetsCommandInput, ListMetricSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> for a detector, dataset, or alert.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, ListTagsForResourceCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, ListTagsForResourceCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/PutFeedbackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { PutFeedbackRequest, PutFeedbackResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface PutFeedbackCommandInput extends PutFeedbackRequest {
    }
    export interface PutFeedbackCommandOutput extends PutFeedbackResponse, __MetadataBearer {
    }
    /**
        * <p>Add feedback for an anomalous metric.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, PutFeedbackCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, PutFeedbackCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new PutFeedbackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutFeedbackCommandInput} for command's `input` shape.
        * @see {@link PutFeedbackCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class PutFeedbackCommand extends $Command<PutFeedbackCommandInput, PutFeedbackCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: PutFeedbackCommandInput;
            constructor(input: PutFeedbackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutFeedbackCommandInput, PutFeedbackCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to a detector, dataset, or alert.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, TagResourceCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, TagResourceCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> from a detector, dataset, or alert.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, UntagResourceCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, UntagResourceCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateAlertCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { UpdateAlertRequest, UpdateAlertResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface UpdateAlertCommandInput extends UpdateAlertRequest {
    }
    export interface UpdateAlertCommandOutput extends UpdateAlertResponse, __MetadataBearer {
    }
    /**
        * <p>Make changes to an existing alert.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, UpdateAlertCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, UpdateAlertCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new UpdateAlertCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAlertCommandInput} for command's `input` shape.
        * @see {@link UpdateAlertCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class UpdateAlertCommand extends $Command<UpdateAlertCommandInput, UpdateAlertCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: UpdateAlertCommandInput;
            constructor(input: UpdateAlertCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAlertCommandInput, UpdateAlertCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateAnomalyDetectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { UpdateAnomalyDetectorRequest, UpdateAnomalyDetectorResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface UpdateAnomalyDetectorCommandInput extends UpdateAnomalyDetectorRequest {
    }
    export interface UpdateAnomalyDetectorCommandOutput extends UpdateAnomalyDetectorResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a detector. After activation, you can only change a detector's ingestion delay and description.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, UpdateAnomalyDetectorCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, UpdateAnomalyDetectorCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new UpdateAnomalyDetectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAnomalyDetectorCommandInput} for command's `input` shape.
        * @see {@link UpdateAnomalyDetectorCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class UpdateAnomalyDetectorCommand extends $Command<UpdateAnomalyDetectorCommandInput, UpdateAnomalyDetectorCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: UpdateAnomalyDetectorCommandInput;
            constructor(input: UpdateAnomalyDetectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAnomalyDetectorCommandInput, UpdateAnomalyDetectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateMetricSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LookoutMetricsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient";
    import { UpdateMetricSetRequest, UpdateMetricSetResponse } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0";
    export interface UpdateMetricSetCommandInput extends UpdateMetricSetRequest {
    }
    export interface UpdateMetricSetCommandOutput extends UpdateMetricSetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LookoutMetricsClient, UpdateMetricSetCommand } from "@aws-sdk/client-lookoutmetrics"; // ES Modules import
        * // const { LookoutMetricsClient, UpdateMetricSetCommand } = require("@aws-sdk/client-lookoutmetrics"); // CommonJS import
        * const client = new LookoutMetricsClient(config);
        * const command = new UpdateMetricSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMetricSetCommandInput} for command's `input` shape.
        * @see {@link UpdateMetricSetCommandOutput} for command's `response` shape.
        * @see {@link LookoutMetricsClientResolvedConfig | config} for LookoutMetricsClient's `config` shape.
        *
        */
    export class UpdateMetricSetCommand extends $Command<UpdateMetricSetCommandInput, UpdateMetricSetCommandOutput, LookoutMetricsClientResolvedConfig> {
            readonly input: UpdateMetricSetCommandInput;
            constructor(input: UpdateMetricSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LookoutMetricsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMetricSetCommandInput, UpdateMetricSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/LookoutMetricsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { ActivateAnomalyDetectorCommandInput, ActivateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ActivateAnomalyDetectorCommand";
    import { BackTestAnomalyDetectorCommandInput, BackTestAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/BackTestAnomalyDetectorCommand";
    import { CreateAlertCommandInput, CreateAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateAlertCommand";
    import { CreateAnomalyDetectorCommandInput, CreateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateAnomalyDetectorCommand";
    import { CreateMetricSetCommandInput, CreateMetricSetCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/CreateMetricSetCommand";
    import { DeactivateAnomalyDetectorCommandInput, DeactivateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeactivateAnomalyDetectorCommand";
    import { DeleteAlertCommandInput, DeleteAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeleteAlertCommand";
    import { DeleteAnomalyDetectorCommandInput, DeleteAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DeleteAnomalyDetectorCommand";
    import { DescribeAlertCommandInput, DescribeAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAlertCommand";
    import { DescribeAnomalyDetectionExecutionsCommandInput, DescribeAnomalyDetectionExecutionsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAnomalyDetectionExecutionsCommand";
    import { DescribeAnomalyDetectorCommandInput, DescribeAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeAnomalyDetectorCommand";
    import { DescribeMetricSetCommandInput, DescribeMetricSetCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DescribeMetricSetCommand";
    import { DetectMetricSetConfigCommandInput, DetectMetricSetConfigCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/DetectMetricSetConfigCommand";
    import { GetAnomalyGroupCommandInput, GetAnomalyGroupCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetAnomalyGroupCommand";
    import { GetFeedbackCommandInput, GetFeedbackCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetFeedbackCommand";
    import { GetSampleDataCommandInput, GetSampleDataCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/GetSampleDataCommand";
    import { ListAlertsCommandInput, ListAlertsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAlertsCommand";
    import { ListAnomalyDetectorsCommandInput, ListAnomalyDetectorsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyDetectorsCommand";
    import { ListAnomalyGroupRelatedMetricsCommandInput, ListAnomalyGroupRelatedMetricsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupRelatedMetricsCommand";
    import { ListAnomalyGroupSummariesCommandInput, ListAnomalyGroupSummariesCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupSummariesCommand";
    import { ListAnomalyGroupTimeSeriesCommandInput, ListAnomalyGroupTimeSeriesCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListAnomalyGroupTimeSeriesCommand";
    import { ListMetricSetsCommandInput, ListMetricSetsCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListMetricSetsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/ListTagsForResourceCommand";
    import { PutFeedbackCommandInput, PutFeedbackCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/PutFeedbackCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UntagResourceCommand";
    import { UpdateAlertCommandInput, UpdateAlertCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateAlertCommand";
    import { UpdateAnomalyDetectorCommandInput, UpdateAnomalyDetectorCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateAnomalyDetectorCommand";
    import { UpdateMetricSetCommandInput, UpdateMetricSetCommandOutput } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/commands/UpdateMetricSetCommand";
    export type ServiceInputTypes = ActivateAnomalyDetectorCommandInput | BackTestAnomalyDetectorCommandInput | CreateAlertCommandInput | CreateAnomalyDetectorCommandInput | CreateMetricSetCommandInput | DeactivateAnomalyDetectorCommandInput | DeleteAlertCommandInput | DeleteAnomalyDetectorCommandInput | DescribeAlertCommandInput | DescribeAnomalyDetectionExecutionsCommandInput | DescribeAnomalyDetectorCommandInput | DescribeMetricSetCommandInput | DetectMetricSetConfigCommandInput | GetAnomalyGroupCommandInput | GetFeedbackCommandInput | GetSampleDataCommandInput | ListAlertsCommandInput | ListAnomalyDetectorsCommandInput | ListAnomalyGroupRelatedMetricsCommandInput | ListAnomalyGroupSummariesCommandInput | ListAnomalyGroupTimeSeriesCommandInput | ListMetricSetsCommandInput | ListTagsForResourceCommandInput | PutFeedbackCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAlertCommandInput | UpdateAnomalyDetectorCommandInput | UpdateMetricSetCommandInput;
    export type ServiceOutputTypes = ActivateAnomalyDetectorCommandOutput | BackTestAnomalyDetectorCommandOutput | CreateAlertCommandOutput | CreateAnomalyDetectorCommandOutput | CreateMetricSetCommandOutput | DeactivateAnomalyDetectorCommandOutput | DeleteAlertCommandOutput | DeleteAnomalyDetectorCommandOutput | DescribeAlertCommandOutput | DescribeAnomalyDetectionExecutionsCommandOutput | DescribeAnomalyDetectorCommandOutput | DescribeMetricSetCommandOutput | DetectMetricSetConfigCommandOutput | GetAnomalyGroupCommandOutput | GetFeedbackCommandOutput | GetSampleDataCommandOutput | ListAlertsCommandOutput | ListAnomalyDetectorsCommandOutput | ListAnomalyGroupRelatedMetricsCommandOutput | ListAnomalyGroupSummariesCommandOutput | ListAnomalyGroupTimeSeriesCommandOutput | ListMetricSetsCommandOutput | ListTagsForResourceCommandOutput | PutFeedbackCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAlertCommandOutput | UpdateAnomalyDetectorCommandOutput | UpdateMetricSetCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type LookoutMetricsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of LookoutMetricsClient class constructor that set the region, credentials and other options.
        */
    export interface LookoutMetricsClientConfig extends LookoutMetricsClientConfigType {
    }
    type LookoutMetricsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of LookoutMetricsClient class. This is resolved and normalized from the {@link LookoutMetricsClientConfig | constructor configuration interface}.
        */
    export interface LookoutMetricsClientResolvedConfig extends LookoutMetricsClientResolvedConfigType {
    }
    /**
        * <p>This is the <i>Amazon Lookout for Metrics API Reference</i>. For an introduction to the service
        *       with tutorials for getting started, visit <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev">Amazon
        *         Lookout for Metrics Developer Guide</a>.</p>
        */
    export class LookoutMetricsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, LookoutMetricsClientResolvedConfig> {
            /**
                * The resolved configuration of LookoutMetricsClient class. This is resolved and normalized from the {@link LookoutMetricsClientConfig | constructor configuration interface}.
                */
            readonly config: LookoutMetricsClientResolvedConfig;
            constructor(configuration: LookoutMetricsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { LookoutMetricsServiceException as __BaseException } from "@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/LookoutMetricsServiceException";
    /**
        * <p>You do not have sufficient permissions to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Contains information about a Lambda configuration.</p>
        */
    export interface LambdaConfiguration {
            /**
                * <p>The ARN of an IAM role that has permission to invoke the Lambda function.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The ARN of the Lambda function.</p>
                */
            LambdaArn: string | undefined;
    }
    export namespace LambdaConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaConfiguration) => any;
    }
    export enum SnsFormat {
            JSON = "JSON",
            LONG_TEXT = "LONG_TEXT",
            SHORT_TEXT = "SHORT_TEXT"
    }
    /**
        * <p>Contains information about the SNS topic to which you want to send your alerts and the IAM role that has
        *       access to that topic.</p>
        */
    export interface SNSConfiguration {
            /**
                * <p>The ARN of the IAM role that has access to the target SNS topic.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The ARN of the target SNS topic.</p>
                */
            SnsTopicArn: string | undefined;
            /**
                * <p>The format of the SNS topic.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>JSON</code> – Send JSON alerts with an anomaly ID and a link to the anomaly detail page. This is the default.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LONG_TEXT</code> – Send human-readable alerts with information about the impacted timeseries and a link to the anomaly detail page. We recommend this for email.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SHORT_TEXT</code> – Send human-readable alerts with a link to the anomaly detail page. We recommend this for SMS.</p>
                *             </li>
                *          </ul>
                */
            SnsFormat?: SnsFormat | string;
    }
    export namespace SNSConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SNSConfiguration) => any;
    }
    /**
        * <p>A configuration that specifies the action to perform when anomalies are detected.</p>
        */
    export interface Action {
            /**
                * <p>A configuration for an Amazon SNS channel.</p>
                */
            SNSConfiguration?: SNSConfiguration;
            /**
                * <p>A configuration for an AWS Lambda channel.</p>
                */
            LambdaConfiguration?: LambdaConfiguration;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    export interface ActivateAnomalyDetectorRequest {
            /**
                * <p>The ARN of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
    }
    export namespace ActivateAnomalyDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivateAnomalyDetectorRequest) => any;
    }
    export interface ActivateAnomalyDetectorResponse {
    }
    export namespace ActivateAnomalyDetectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActivateAnomalyDetectorResponse) => any;
    }
    /**
        * <p>There was a conflict processing the request. Try your request again.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The request processing has failed because of an unknown error, exception, or failure.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The specified resource cannot be found. Check the ARN of the resource and try again.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The request was denied due to too many requests being submitted at the same time.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>Contains information about a a field in a validation exception.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The name of the field.</p>
                */
            Name: string | undefined;
            /**
                * <p>The message with more information about the validation exception.</p>
                */
            Message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CANNOT_PARSE",
            FIELD_VALIDATION_FAILED = "FIELD_VALIDATION_FAILED",
            OTHER = "OTHER",
            UNKNOWN_OPERATION = "UNKNOWN_OPERATION"
    }
    /**
        * <p>The input fails to satisfy the constraints specified by the AWS service. Check your input values and try
        *       again.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The reason that validation failed.</p>
                */
            Reason?: ValidationExceptionReason | string;
            /**
                * <p>Fields that failed validation.</p>
                */
            Fields?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export enum AggregationFunction {
            AVG = "AVG",
            SUM = "SUM"
    }
    /**
        * <p>The dimension filter, containing DimensionName and DimensionValueList.</p>
        */
    export interface DimensionFilter {
            /**
                * <p>The name of the dimension to filter on.</p>
                */
            DimensionName?: string;
            /**
                * <p>The list of values for the dimension specified in DimensionName that you want to filter on.</p>
                */
            DimensionValueList?: string[];
    }
    export namespace DimensionFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DimensionFilter) => any;
    }
    /**
        * <p>The configuration of the alert filters.</p>
        */
    export interface AlertFilters {
            /**
                * <p>The list of measures that you want to get alerts for.</p>
                */
            MetricList?: string[];
            /**
                * <p>The list of DimensionFilter objects that are used for dimension-based filtering.</p>
                */
            DimensionFilterList?: DimensionFilter[];
    }
    export namespace AlertFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlertFilters) => any;
    }
    export enum AlertStatus {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE"
    }
    export enum AlertType {
            LAMBDA = "LAMBDA",
            SNS = "SNS"
    }
    /**
        * <p>A configuration for Amazon SNS-integrated notifications.</p>
        */
    export interface Alert {
            /**
                * <p>Action that will be triggered when there is an alert.</p>
                */
            Action?: Action;
            /**
                * <p>A description of the alert.</p>
                */
            AlertDescription?: string;
            /**
                * <p>The ARN of the alert.</p>
                */
            AlertArn?: string;
            /**
                * <p>The ARN of the detector to which the alert is attached.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>The name of the alert.</p>
                */
            AlertName?: string;
            /**
                * <p>The minimum severity for an anomaly to trigger the alert.</p>
                */
            AlertSensitivityThreshold?: number;
            /**
                * <p>The type of the alert.</p>
                */
            AlertType?: AlertType | string;
            /**
                * <p>The status of the alert.</p>
                */
            AlertStatus?: AlertStatus | string;
            /**
                * <p>The time at which the alert was last modified.</p>
                */
            LastModificationTime?: Date;
            /**
                * <p>The time at which the alert was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The configuration of the alert filters, containing MetricList and DimensionFilter.</p>
                */
            AlertFilters?: AlertFilters;
    }
    export namespace Alert {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Alert) => any;
    }
    /**
        * <p>Provides a summary of an alert's configuration.</p>
        */
    export interface AlertSummary {
            /**
                * <p>The ARN of the alert.</p>
                */
            AlertArn?: string;
            /**
                * <p>The ARN of the detector to which the alert is attached.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>The name of the alert.</p>
                */
            AlertName?: string;
            /**
                * <p>The minimum severity for an anomaly to trigger the alert.</p>
                */
            AlertSensitivityThreshold?: number;
            /**
                * <p>The type of the alert.</p>
                */
            AlertType?: AlertType | string;
            /**
                * <p>The status of the alert.</p>
                */
            AlertStatus?: AlertStatus | string;
            /**
                * <p>The time at which the alert was last modified.</p>
                */
            LastModificationTime?: Date;
            /**
                * <p>The time at which the alert was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The alert's <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a>.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace AlertSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlertSummary) => any;
    }
    export enum AnomalyDetectionTaskStatus {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            FAILED_TO_SCHEDULE = "FAILED_TO_SCHEDULE",
            IN_PROGRESS = "IN_PROGRESS",
            PENDING = "PENDING"
    }
    export enum Frequency {
            P1D = "P1D",
            PT10M = "PT10M",
            PT1H = "PT1H",
            PT5M = "PT5M"
    }
    /**
        * <p>Contains information about a detector's configuration.</p>
        */
    export interface AnomalyDetectorConfig {
            /**
                * <p>The frequency at which the detector analyzes its source data.</p>
                */
            AnomalyDetectorFrequency?: Frequency | string;
    }
    export namespace AnomalyDetectorConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyDetectorConfig) => any;
    }
    /**
        * <p>Contains information about a detector's configuration.</p>
        */
    export interface AnomalyDetectorConfigSummary {
            /**
                * <p>The interval at which the detector analyzes its source data.</p>
                */
            AnomalyDetectorFrequency?: Frequency | string;
    }
    export namespace AnomalyDetectorConfigSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyDetectorConfigSummary) => any;
    }
    export enum AnomalyDetectorFailureType {
            ACTIVATION_FAILURE = "ACTIVATION_FAILURE",
            BACK_TEST_ACTIVATION_FAILURE = "BACK_TEST_ACTIVATION_FAILURE",
            DEACTIVATION_FAILURE = "DEACTIVATION_FAILURE",
            DELETION_FAILURE = "DELETION_FAILURE"
    }
    export enum AnomalyDetectorStatus {
            ACTIVATING = "ACTIVATING",
            ACTIVE = "ACTIVE",
            BACK_TEST_ACTIVATING = "BACK_TEST_ACTIVATING",
            BACK_TEST_ACTIVE = "BACK_TEST_ACTIVE",
            BACK_TEST_COMPLETE = "BACK_TEST_COMPLETE",
            DEACTIVATED = "DEACTIVATED",
            DEACTIVATING = "DEACTIVATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            INACTIVE = "INACTIVE",
            LEARNING = "LEARNING"
    }
    /**
        * <p>Contains information about an an anomaly detector.</p>
        */
    export interface AnomalyDetectorSummary {
            /**
                * <p>The ARN of the detector.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>The name of the detector.</p>
                */
            AnomalyDetectorName?: string;
            /**
                * <p>A description of the detector.</p>
                */
            AnomalyDetectorDescription?: string;
            /**
                * <p>The time at which the detector was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time at which the detector was last modified.</p>
                */
            LastModificationTime?: Date;
            /**
                * <p>The status of detector.</p>
                */
            Status?: AnomalyDetectorStatus | string;
            /**
                * <p>The detector's <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a>.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace AnomalyDetectorSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyDetectorSummary) => any;
    }
    /**
        * <p>The severity of a value of a dimension that contributed to an anomaly.</p>
        */
    export interface DimensionValueContribution {
            /**
                * <p>The value of the dimension.</p>
                */
            DimensionValue?: string;
            /**
                * <p>The severity score of the value.</p>
                */
            ContributionScore?: number;
    }
    export namespace DimensionValueContribution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DimensionValueContribution) => any;
    }
    /**
        * <p>Details about a dimension that contributed to an anomaly.</p>
        */
    export interface DimensionContribution {
            /**
                * <p>The name of the dimension.</p>
                */
            DimensionName?: string;
            /**
                * <p>A list of dimension values that contributed to the anomaly.</p>
                */
            DimensionValueContributionList?: DimensionValueContribution[];
    }
    export namespace DimensionContribution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DimensionContribution) => any;
    }
    /**
        * <p>Details about dimensions that contributed to an anomaly.</p>
        */
    export interface ContributionMatrix {
            /**
                * <p>A list of contributing dimensions.</p>
                */
            DimensionContributionList?: DimensionContribution[];
    }
    export namespace ContributionMatrix {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContributionMatrix) => any;
    }
    /**
        * <p>Details about a measure affected by an anomaly.</p>
        */
    export interface MetricLevelImpact {
            /**
                * <p>The name of the measure.</p>
                */
            MetricName?: string;
            /**
                * <p>The number of anomalous metrics for the measure.</p>
                */
            NumTimeSeries?: number;
            /**
                * <p>Details about the dimensions that contributed to the anomaly.</p>
                */
            ContributionMatrix?: ContributionMatrix;
    }
    export namespace MetricLevelImpact {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricLevelImpact) => any;
    }
    /**
        * <p>A group of anomalous metrics</p>
        */
    export interface AnomalyGroup {
            /**
                * <p>The start time for the group.</p>
                */
            StartTime?: string;
            /**
                * <p>The end time for the group.</p>
                */
            EndTime?: string;
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId?: string;
            /**
                * <p>The severity score of the group.</p>
                */
            AnomalyGroupScore?: number;
            /**
                * <p>The name of the primary affected measure for the group.</p>
                */
            PrimaryMetricName?: string;
            /**
                * <p>A list of measures affected by the anomaly.</p>
                */
            MetricLevelImpactList?: MetricLevelImpact[];
    }
    export namespace AnomalyGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyGroup) => any;
    }
    /**
        * <p>Aggregated statistics about a measure affected by an anomaly.</p>
        */
    export interface ItemizedMetricStats {
            /**
                * <p>The name of the measure.</p>
                */
            MetricName?: string;
            /**
                * <p>The number of times that the measure appears.</p>
                */
            OccurrenceCount?: number;
    }
    export namespace ItemizedMetricStats {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ItemizedMetricStats) => any;
    }
    /**
        * <p>Aggregated statistics for a group of anomalous metrics.</p>
        */
    export interface AnomalyGroupStatistics {
            /**
                * <p>The start of the time range that was searched.</p>
                */
            EvaluationStartDate?: string;
            /**
                * <p>The number of groups found.</p>
                */
            TotalCount?: number;
            /**
                * <p>Statistics for individual metrics within the group.</p>
                */
            ItemizedMetricStatsList?: ItemizedMetricStats[];
    }
    export namespace AnomalyGroupStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyGroupStatistics) => any;
    }
    /**
        * <p>Details about a group of anomalous metrics.</p>
        */
    export interface AnomalyGroupSummary {
            /**
                * <p>The start time for the group.</p>
                */
            StartTime?: string;
            /**
                * <p>The end time for the group.</p>
                */
            EndTime?: string;
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId?: string;
            /**
                * <p>The severity score of the group.</p>
                */
            AnomalyGroupScore?: number;
            /**
                * <p>The name of the primary affected measure for the group.</p>
                */
            PrimaryMetricName?: string;
    }
    export namespace AnomalyGroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyGroupSummary) => any;
    }
    /**
        * <p>An anomalous metric in an anomaly group.</p>
        */
    export interface AnomalyGroupTimeSeries {
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId: string | undefined;
            /**
                * <p>The ID of the metric.</p>
                */
            TimeSeriesId?: string;
    }
    export namespace AnomalyGroupTimeSeries {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyGroupTimeSeries) => any;
    }
    /**
        * <p>Feedback for an anomalous metric.</p>
        */
    export interface AnomalyGroupTimeSeriesFeedback {
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId: string | undefined;
            /**
                * <p>The ID of the metric.</p>
                */
            TimeSeriesId: string | undefined;
            /**
                * <p>Feedback on whether the metric is a legitimate anomaly.</p>
                */
            IsAnomaly: boolean | undefined;
    }
    export namespace AnomalyGroupTimeSeriesFeedback {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AnomalyGroupTimeSeriesFeedback) => any;
    }
    /**
        * <p>Details about an Amazon AppFlow flow datasource.</p>
        */
    export interface AppFlowConfig {
            /**
                * <p>An IAM role that gives Amazon Lookout for Metrics permission to access the flow.</p>
                */
            RoleArn?: string;
            /**
                * <p> name of the flow.</p>
                */
            FlowName?: string;
    }
    export namespace AppFlowConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppFlowConfig) => any;
    }
    /**
        * <p>Settings for backtest mode.</p>
        */
    export interface BackTestConfiguration {
            /**
                * <p>Run a backtest instead of monitoring new data.</p>
                */
            RunBackTestMode: boolean | undefined;
    }
    export namespace BackTestConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BackTestConfiguration) => any;
    }
    /**
        * <p>Details about an Amazon Athena datasource.</p>
        */
    export interface AthenaSourceConfig {
            /**
                * <p>An IAM role that gives Amazon Lookout for Metrics permission to access the data.</p>
                */
            RoleArn?: string;
            /**
                * <p>The database's name.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The database's data catalog.</p>
                */
            DataCatalog?: string;
            /**
                * <p>The database's table name.</p>
                */
            TableName?: string;
            /**
                * <p>The database's work group name.</p>
                */
            WorkGroupName?: string;
            /**
                * <p>The database's results path.</p>
                */
            S3ResultsPath?: string;
            /**
                * <p>Settings for backtest mode.</p>
                */
            BackTestConfiguration?: BackTestConfiguration;
    }
    export namespace AthenaSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AthenaSourceConfig) => any;
    }
    /**
        * <p>An attribute value.</p>
        */
    export interface AttributeValue {
            /**
                * <p>A string.</p>
                */
            S?: string;
            /**
                * <p>A number.</p>
                */
            N?: string;
            /**
                * <p>A binary value.</p>
                */
            B?: string;
            /**
                * <p>A list of strings.</p>
                */
            SS?: string[];
            /**
                * <p>A list of numbers.</p>
                */
            NS?: string[];
            /**
                * <p>A list of binary values.</p>
                */
            BS?: string[];
    }
    export namespace AttributeValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttributeValue) => any;
    }
    /**
        * <p>An auto detection source config.</p>
        */
    export interface AutoDetectionS3SourceConfig {
            /**
                * <p>The config's templated path list.</p>
                */
            TemplatedPathList?: string[];
            /**
                * <p>The config's historical data path list.</p>
                */
            HistoricalDataPathList?: string[];
    }
    export namespace AutoDetectionS3SourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoDetectionS3SourceConfig) => any;
    }
    /**
        * <p>An auto detection metric source.</p>
        */
    export interface AutoDetectionMetricSource {
            /**
                * <p>The source's source config.</p>
                */
            S3SourceConfig?: AutoDetectionS3SourceConfig;
    }
    export namespace AutoDetectionMetricSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoDetectionMetricSource) => any;
    }
    export interface BackTestAnomalyDetectorRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
    }
    export namespace BackTestAnomalyDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BackTestAnomalyDetectorRequest) => any;
    }
    export interface BackTestAnomalyDetectorResponse {
    }
    export namespace BackTestAnomalyDetectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BackTestAnomalyDetectorResponse) => any;
    }
    /**
        * <p>Details about an Amazon CloudWatch datasource.</p>
        */
    export interface CloudWatchConfig {
            /**
                * <p>An IAM role that gives Amazon Lookout for Metrics permission to access data in Amazon CloudWatch.</p>
                */
            RoleArn?: string;
            /**
                * <p>Settings for backtest mode.</p>
                */
            BackTestConfiguration?: BackTestConfiguration;
    }
    export namespace CloudWatchConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchConfig) => any;
    }
    export enum Confidence {
            HIGH = "HIGH",
            LOW = "LOW",
            NONE = "NONE"
    }
    export interface CreateAlertRequest {
            /**
                * <p>The name of the alert.</p>
                */
            AlertName: string | undefined;
            /**
                * <p>An integer from 0 to 100 specifying the alert sensitivity threshold.</p>
                */
            AlertSensitivityThreshold?: number;
            /**
                * <p>A description of the alert.</p>
                */
            AlertDescription?: string;
            /**
                * <p>The ARN of the detector to which the alert is attached.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>Action that will be triggered when there is an alert.</p>
                */
            Action: Action | undefined;
            /**
                * <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the alert.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The configuration of the alert filters, containing MetricList and DimensionFilterList.</p>
                */
            AlertFilters?: AlertFilters;
    }
    export namespace CreateAlertRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAlertRequest) => any;
    }
    export interface CreateAlertResponse {
            /**
                * <p>The ARN of the alert.</p>
                */
            AlertArn?: string;
    }
    export namespace CreateAlertResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAlertResponse) => any;
    }
    /**
        * <p>The request exceeded the service's quotas. Check the service quotas and try again.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The ID of the resource.</p>
                */
            ResourceId?: string;
            /**
                * <p>The type of the resource.</p>
                */
            ResourceType?: string;
            /**
                * <p>The quota code.</p>
                */
            QuotaCode?: string;
            /**
                * <p>The service code.</p>
                */
            ServiceCode?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export interface CreateAnomalyDetectorRequest {
            /**
                * <p>The name of the detector.</p>
                */
            AnomalyDetectorName: string | undefined;
            /**
                * <p>A description of the detector.</p>
                */
            AnomalyDetectorDescription?: string;
            /**
                * <p>Contains information about the configuration of the anomaly detector.</p>
                */
            AnomalyDetectorConfig: AnomalyDetectorConfig | undefined;
            /**
                * <p>The ARN of the KMS key to use to encrypt your data.</p>
                */
            KmsKeyArn?: string;
            /**
                * <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the anomaly detector.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateAnomalyDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAnomalyDetectorRequest) => any;
    }
    export interface CreateAnomalyDetectorResponse {
            /**
                * <p>The ARN of the detector.</p>
                */
            AnomalyDetectorArn?: string;
    }
    export namespace CreateAnomalyDetectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAnomalyDetectorResponse) => any;
    }
    /**
        * <p>A calculation made by contrasting a measure and a dimension from your source data.</p>
        */
    export interface Metric {
            /**
                * <p>The name of the metric.</p>
                */
            MetricName: string | undefined;
            /**
                * <p>The function with which the metric is calculated.</p>
                */
            AggregationFunction: AggregationFunction | string | undefined;
            /**
                * <p>The namespace for the metric.</p>
                */
            Namespace?: string;
    }
    export namespace Metric {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Metric) => any;
    }
    /**
        * <p>Contains configuration information about the Amazon Virtual Private Cloud (VPC).</p>
        */
    export interface VpcConfiguration {
            /**
                * <p>An array of strings containing the Amazon VPC subnet IDs (e.g., <code>subnet-0bb1c79de3EXAMPLE</code>.</p>
                */
            SubnetIdList: string[] | undefined;
            /**
                * <p>An array of strings containing the list of security groups.</p>
                */
            SecurityGroupIdList: string[] | undefined;
    }
    export namespace VpcConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfiguration) => any;
    }
    /**
        * <p>Contains information about the Amazon Relational Database Service (RDS) configuration.</p>
        */
    export interface RDSSourceConfig {
            /**
                * <p>A string identifying the database instance.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>The host name of the database.</p>
                */
            DatabaseHost?: string;
            /**
                * <p>The port number where the database can be accessed.</p>
                */
            DatabasePort?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager role.</p>
                */
            SecretManagerArn?: string;
            /**
                * <p>The name of the RDS database.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The name of the table in the database.</p>
                */
            TableName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role.</p>
                */
            RoleArn?: string;
            /**
                * <p>An object containing information about the Amazon Virtual Private Cloud (VPC) configuration.</p>
                */
            VpcConfiguration?: VpcConfiguration;
    }
    export namespace RDSSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RDSSourceConfig) => any;
    }
    /**
        * <p>Provides information about the Amazon Redshift database configuration.</p>
        */
    export interface RedshiftSourceConfig {
            /**
                * <p>A string identifying the Redshift cluster.</p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The name of the database host.</p>
                */
            DatabaseHost?: string;
            /**
                * <p>The port number where the database can be accessed.</p>
                */
            DatabasePort?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager role.</p>
                */
            SecretManagerArn?: string;
            /**
                * <p>The Redshift database name.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The table name of the Redshift database.</p>
                */
            TableName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role providing access to the database.</p>
                */
            RoleArn?: string;
            /**
                * <p>Contains information about the Amazon Virtual Private Cloud (VPC) configuration.</p>
                */
            VpcConfiguration?: VpcConfiguration;
    }
    export namespace RedshiftSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedshiftSourceConfig) => any;
    }
    export enum CSVFileCompression {
            GZIP = "GZIP",
            NONE = "NONE"
    }
    /**
        * <p>Contains information about how a source CSV data file should be analyzed.</p>
        */
    export interface CsvFormatDescriptor {
            /**
                * <p>The level of compression of the source CSV file.</p>
                */
            FileCompression?: CSVFileCompression | string;
            /**
                * <p>The character set in which the source CSV file is written.</p>
                */
            Charset?: string;
            /**
                * <p>Whether or not the source CSV file contains a header.</p>
                */
            ContainsHeader?: boolean;
            /**
                * <p>The character used to delimit the source CSV file.</p>
                */
            Delimiter?: string;
            /**
                * <p>A list of the source CSV file's headers, if any.</p>
                */
            HeaderList?: string[];
            /**
                * <p>The character used as a quote character.</p>
                */
            QuoteSymbol?: string;
    }
    export namespace CsvFormatDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CsvFormatDescriptor) => any;
    }
    export enum JsonFileCompression {
            GZIP = "GZIP",
            NONE = "NONE"
    }
    /**
        * <p>Contains information about how a source JSON data file should be analyzed.</p>
        */
    export interface JsonFormatDescriptor {
            /**
                * <p>The level of compression of the source CSV file.</p>
                */
            FileCompression?: JsonFileCompression | string;
            /**
                * <p>The character set in which the source JSON file is written.</p>
                */
            Charset?: string;
    }
    export namespace JsonFormatDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JsonFormatDescriptor) => any;
    }
    /**
        * <p>Contains information about a source file's formatting.</p>
        */
    export interface FileFormatDescriptor {
            /**
                * <p>Contains information about how a source CSV data file should be analyzed.</p>
                */
            CsvFormatDescriptor?: CsvFormatDescriptor;
            /**
                * <p>Contains information about how a source JSON data file should be analyzed.</p>
                */
            JsonFormatDescriptor?: JsonFormatDescriptor;
    }
    export namespace FileFormatDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FileFormatDescriptor) => any;
    }
    /**
        * <p>Contains information about the configuration of the S3 bucket that contains source files.</p>
        */
    export interface S3SourceConfig {
            /**
                * <p>The ARN of an IAM role that has read and write access permissions to the source S3 bucket.</p>
                */
            RoleArn?: string;
            /**
                * <p>A list of templated paths to the source files.</p>
                */
            TemplatedPathList?: string[];
            /**
                * <p>A list of paths to the historical data files.</p>
                */
            HistoricalDataPathList?: string[];
            /**
                * <p>Contains information about a source file's formatting.</p>
                */
            FileFormatDescriptor?: FileFormatDescriptor;
    }
    export namespace S3SourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3SourceConfig) => any;
    }
    /**
        * <p>Contains information about source data used to generate metrics.</p>
        */
    export interface MetricSource {
            /**
                * <p>Contains information about the configuration of the S3 bucket that contains source files.</p>
                */
            S3SourceConfig?: S3SourceConfig;
            /**
                * <p>Details about an AppFlow datasource.</p>
                */
            AppFlowConfig?: AppFlowConfig;
            /**
                * <p>Details about an Amazon CloudWatch monitoring datasource.</p>
                */
            CloudWatchConfig?: CloudWatchConfig;
            /**
                * <p>Details about an Amazon Relational Database Service (RDS) datasource.</p>
                */
            RDSSourceConfig?: RDSSourceConfig;
            /**
                * <p>Details about an Amazon Redshift database datasource.</p>
                */
            RedshiftSourceConfig?: RedshiftSourceConfig;
            /**
                * <p>Details about an Amazon Athena datasource.</p>
                */
            AthenaSourceConfig?: AthenaSourceConfig;
    }
    export namespace MetricSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricSource) => any;
    }
    /**
        * <p>Contains information about the column used to track time in a source data file.</p>
        */
    export interface TimestampColumn {
            /**
                * <p>The name of the timestamp column.</p>
                */
            ColumnName?: string;
            /**
                * <p>The format of the timestamp column.</p>
                */
            ColumnFormat?: string;
    }
    export namespace TimestampColumn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimestampColumn) => any;
    }
    export interface CreateMetricSetRequest {
            /**
                * <p>The ARN of the anomaly detector that will use the dataset.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>The name of the dataset.</p>
                */
            MetricSetName: string | undefined;
            /**
                * <p>A description of the dataset you are creating.</p>
                */
            MetricSetDescription?: string;
            /**
                * <p>A list of metrics that the dataset will contain.</p>
                */
            MetricList: Metric[] | undefined;
            /**
                * <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3 and Redshift datasources.</p>
                */
            Offset?: number;
            /**
                * <p>Contains information about the column used for tracking time in your source data.</p>
                */
            TimestampColumn?: TimestampColumn;
            /**
                * <p>A list of the fields you want to treat as dimensions.</p>
                */
            DimensionList?: string[];
            /**
                * <p>The frequency with which the source data will be analyzed for anomalies.</p>
                */
            MetricSetFrequency?: Frequency | string;
            /**
                * <p>Contains information about how the source data should be interpreted.</p>
                */
            MetricSource: MetricSource | undefined;
            /**
                * <p>The time zone in which your source data was recorded.</p>
                */
            Timezone?: string;
            /**
                * <p>A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateMetricSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMetricSetRequest) => any;
    }
    export interface CreateMetricSetResponse {
            /**
                * <p>The ARN of the dataset.</p>
                */
            MetricSetArn?: string;
    }
    export namespace CreateMetricSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMetricSetResponse) => any;
    }
    export interface DeactivateAnomalyDetectorRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
    }
    export namespace DeactivateAnomalyDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeactivateAnomalyDetectorRequest) => any;
    }
    export interface DeactivateAnomalyDetectorResponse {
    }
    export namespace DeactivateAnomalyDetectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeactivateAnomalyDetectorResponse) => any;
    }
    export interface DeleteAlertRequest {
            /**
                * <p>The ARN of the alert to delete.</p>
                */
            AlertArn: string | undefined;
    }
    export namespace DeleteAlertRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAlertRequest) => any;
    }
    export interface DeleteAlertResponse {
    }
    export namespace DeleteAlertResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAlertResponse) => any;
    }
    export interface DeleteAnomalyDetectorRequest {
            /**
                * <p>The ARN of the detector to delete.</p>
                */
            AnomalyDetectorArn: string | undefined;
    }
    export namespace DeleteAnomalyDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAnomalyDetectorRequest) => any;
    }
    export interface DeleteAnomalyDetectorResponse {
    }
    export namespace DeleteAnomalyDetectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAnomalyDetectorResponse) => any;
    }
    export interface DescribeAlertRequest {
            /**
                * <p>The ARN of the alert to describe.</p>
                */
            AlertArn: string | undefined;
    }
    export namespace DescribeAlertRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlertRequest) => any;
    }
    export interface DescribeAlertResponse {
            /**
                * <p>Contains information about an alert.</p>
                */
            Alert?: Alert;
    }
    export namespace DescribeAlertResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAlertResponse) => any;
    }
    export interface DescribeAnomalyDetectionExecutionsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>The timestamp of the anomaly detection job.</p>
                */
            Timestamp?: string;
            /**
                * <p>The number of items to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAnomalyDetectionExecutionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnomalyDetectionExecutionsRequest) => any;
    }
    /**
        * <p>The status of an anomaly detector run.</p>
        */
    export interface ExecutionStatus {
            /**
                * <p>The run's timestamp.</p>
                */
            Timestamp?: string;
            /**
                * <p>The run's status.</p>
                */
            Status?: AnomalyDetectionTaskStatus | string;
            /**
                * <p>The reason that the run failed, if applicable.</p>
                */
            FailureReason?: string;
    }
    export namespace ExecutionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecutionStatus) => any;
    }
    export interface DescribeAnomalyDetectionExecutionsResponse {
            /**
                * <p>A list of detection jobs.</p>
                */
            ExecutionList?: ExecutionStatus[];
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAnomalyDetectionExecutionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnomalyDetectionExecutionsResponse) => any;
    }
    export interface DescribeAnomalyDetectorRequest {
            /**
                * <p>The ARN of the detector to describe.</p>
                */
            AnomalyDetectorArn: string | undefined;
    }
    export namespace DescribeAnomalyDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnomalyDetectorRequest) => any;
    }
    export interface DescribeAnomalyDetectorResponse {
            /**
                * <p>The ARN of the detector.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>The name of the detector.</p>
                */
            AnomalyDetectorName?: string;
            /**
                * <p>A description of the detector.</p>
                */
            AnomalyDetectorDescription?: string;
            /**
                * <p>Contains information about the detector's configuration.</p>
                */
            AnomalyDetectorConfig?: AnomalyDetectorConfigSummary;
            /**
                * <p>The time at which the detector was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time at which the detector was last modified.</p>
                */
            LastModificationTime?: Date;
            /**
                * <p>The status of the detector.</p>
                */
            Status?: AnomalyDetectorStatus | string;
            /**
                * <p>The reason that the detector failed.</p>
                */
            FailureReason?: string;
            /**
                * <p>The ARN of the KMS key to use to encrypt your data.</p>
                */
            KmsKeyArn?: string;
            /**
                * <p>The process that caused the detector to fail.</p>
                */
            FailureType?: AnomalyDetectorFailureType | string;
    }
    export namespace DescribeAnomalyDetectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAnomalyDetectorResponse) => any;
    }
    export interface DescribeMetricSetRequest {
            /**
                * <p>The ARN of the dataset.</p>
                */
            MetricSetArn: string | undefined;
    }
    export namespace DescribeMetricSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMetricSetRequest) => any;
    }
    export interface DescribeMetricSetResponse {
            /**
                * <p>The ARN of the dataset.</p>
                */
            MetricSetArn?: string;
            /**
                * <p>The ARN of the detector that contains the dataset.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>The name of the dataset.</p>
                */
            MetricSetName?: string;
            /**
                * <p>The dataset's description.</p>
                */
            MetricSetDescription?: string;
            /**
                * <p>The time at which the dataset was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time at which the dataset was last modified.</p>
                */
            LastModificationTime?: Date;
            /**
                * <p>The offset in seconds. Only supported for S3 and Redshift datasources.</p>
                */
            Offset?: number;
            /**
                * <p>A list of the metrics defined by the dataset.</p>
                */
            MetricList?: Metric[];
            /**
                * <p>Contains information about the column used for tracking time in your source data.</p>
                */
            TimestampColumn?: TimestampColumn;
            /**
                * <p>A list of the dimensions chosen for analysis.</p>
                */
            DimensionList?: string[];
            /**
                * <p>The interval at which the data will be analyzed for anomalies.</p>
                */
            MetricSetFrequency?: Frequency | string;
            /**
                * <p>The time zone in which the dataset's data was recorded.</p>
                */
            Timezone?: string;
            /**
                * <p>Contains information about the dataset's source data.</p>
                */
            MetricSource?: MetricSource;
    }
    export namespace DescribeMetricSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMetricSetResponse) => any;
    }
    /**
        * <p>An inferred field.</p>
        */
    export interface DetectedField {
            /**
                * <p>The field's value.</p>
                */
            Value?: AttributeValue;
            /**
                * <p>The field's confidence.</p>
                */
            Confidence?: Confidence | string;
            /**
                * <p>The field's message.</p>
                */
            Message?: string;
    }
    export namespace DetectedField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectedField) => any;
    }
    /**
        * <p>Properties of an inferred CSV format.</p>
        */
    export interface DetectedCsvFormatDescriptor {
            /**
                * <p>The format's file compression.</p>
                */
            FileCompression?: DetectedField;
            /**
                * <p>The format's charset.</p>
                */
            Charset?: DetectedField;
            /**
                * <p>Whether the format includes a header.</p>
                */
            ContainsHeader?: DetectedField;
            /**
                * <p>The format's delimiter.</p>
                */
            Delimiter?: DetectedField;
            /**
                * <p>The format's header list.</p>
                */
            HeaderList?: DetectedField;
            /**
                * <p>The format's quote symbol.</p>
                */
            QuoteSymbol?: DetectedField;
    }
    export namespace DetectedCsvFormatDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectedCsvFormatDescriptor) => any;
    }
    /**
        * <p>A detected JSON format descriptor.</p>
        */
    export interface DetectedJsonFormatDescriptor {
            /**
                * <p>The format's file compression.</p>
                */
            FileCompression?: DetectedField;
            /**
                * <p>The format's character set.</p>
                */
            Charset?: DetectedField;
    }
    export namespace DetectedJsonFormatDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectedJsonFormatDescriptor) => any;
    }
    /**
        * <p>Properties of an inferred data format.</p>
        */
    export interface DetectedFileFormatDescriptor {
            /**
                * <p>Details about a CSV format.</p>
                */
            CsvFormatDescriptor?: DetectedCsvFormatDescriptor;
            /**
                * <p>Details about a JSON format.</p>
                */
            JsonFormatDescriptor?: DetectedJsonFormatDescriptor;
    }
    export namespace DetectedFileFormatDescriptor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectedFileFormatDescriptor) => any;
    }
    /**
        * <p>An inferred source configuration.</p>
        */
    export interface DetectedS3SourceConfig {
            /**
                * <p>The source's file format descriptor.</p>
                */
            FileFormatDescriptor?: DetectedFileFormatDescriptor;
    }
    export namespace DetectedS3SourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectedS3SourceConfig) => any;
    }
    /**
        * <p>An inferred data source.</p>
        */
    export interface DetectedMetricSource {
            /**
                * <p>The data source's source configuration.</p>
                */
            S3SourceConfig?: DetectedS3SourceConfig;
    }
    export namespace DetectedMetricSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectedMetricSource) => any;
    }
    /**
        * <p>An inferred dataset configuration.</p>
        */
    export interface DetectedMetricSetConfig {
            /**
                * <p>The dataset's offset.</p>
                */
            Offset?: DetectedField;
            /**
                * <p>The dataset's interval.</p>
                */
            MetricSetFrequency?: DetectedField;
            /**
                * <p>The dataset's data source.</p>
                */
            MetricSource?: DetectedMetricSource;
    }
    export namespace DetectedMetricSetConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectedMetricSetConfig) => any;
    }
    export interface DetectMetricSetConfigRequest {
            /**
                * <p>An anomaly detector ARN.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>A data source.</p>
                */
            AutoDetectionMetricSource: AutoDetectionMetricSource | undefined;
    }
    export namespace DetectMetricSetConfigRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectMetricSetConfigRequest) => any;
    }
    export interface DetectMetricSetConfigResponse {
            /**
                * <p>The inferred dataset configuration for the datasource.</p>
                */
            DetectedMetricSetConfig?: DetectedMetricSetConfig;
    }
    export namespace DetectMetricSetConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetectMetricSetConfigResponse) => any;
    }
    /**
        * <p>A dimension name and value.</p>
        */
    export interface DimensionNameValue {
            /**
                * <p>The name of the dimension.</p>
                */
            DimensionName: string | undefined;
            /**
                * <p>The value of the dimension.</p>
                */
            DimensionValue: string | undefined;
    }
    export namespace DimensionNameValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DimensionNameValue) => any;
    }
    export interface GetAnomalyGroupRequest {
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
    }
    export namespace GetAnomalyGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAnomalyGroupRequest) => any;
    }
    export interface GetAnomalyGroupResponse {
            /**
                * <p>Details about the anomaly group.</p>
                */
            AnomalyGroup?: AnomalyGroup;
    }
    export namespace GetAnomalyGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAnomalyGroupResponse) => any;
    }
    export interface GetFeedbackRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>The anomalous metric and group ID.</p>
                */
            AnomalyGroupTimeSeriesFeedback: AnomalyGroupTimeSeries | undefined;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetFeedbackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFeedbackRequest) => any;
    }
    /**
        * <p>Details about feedback submitted for an anomalous metric.</p>
        */
    export interface TimeSeriesFeedback {
            /**
                * <p>The ID of the metric.</p>
                */
            TimeSeriesId?: string;
            /**
                * <p>Feedback on whether the metric is a legitimate anomaly.</p>
                */
            IsAnomaly?: boolean;
    }
    export namespace TimeSeriesFeedback {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimeSeriesFeedback) => any;
    }
    export interface GetFeedbackResponse {
            /**
                * <p>Feedback for an anomalous metric.</p>
                */
            AnomalyGroupTimeSeriesFeedback?: TimeSeriesFeedback[];
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace GetFeedbackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFeedbackResponse) => any;
    }
    /**
        * <p>Contains information about the source configuration in Amazon S3.</p>
        */
    export interface SampleDataS3SourceConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of the role.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>An array of strings containing the list of templated paths.</p>
                */
            TemplatedPathList?: string[];
            /**
                * <p>An array of strings containing the historical set of data paths.</p>
                */
            HistoricalDataPathList?: string[];
            /**
                * <p>Contains information about a source file's formatting.</p>
                */
            FileFormatDescriptor: FileFormatDescriptor | undefined;
    }
    export namespace SampleDataS3SourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SampleDataS3SourceConfig) => any;
    }
    export interface GetSampleDataRequest {
            /**
                * <p>A datasource bucket in Amazon S3.</p>
                */
            S3SourceConfig?: SampleDataS3SourceConfig;
    }
    export namespace GetSampleDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSampleDataRequest) => any;
    }
    export interface GetSampleDataResponse {
            /**
                * <p>A list of header labels for the records.</p>
                */
            HeaderValues?: string[];
            /**
                * <p>A list of records.</p>
                */
            SampleRows?: string[][];
    }
    export namespace GetSampleDataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSampleDataResponse) => any;
    }
    export enum RelationshipType {
            CAUSE_OF_INPUT_ANOMALY_GROUP = "CAUSE_OF_INPUT_ANOMALY_GROUP",
            EFFECT_OF_INPUT_ANOMALY_GROUP = "EFFECT_OF_INPUT_ANOMALY_GROUP"
    }
    /**
        * <p>Aggregated details about the measures contributing to the anomaly group, and the measures
        *             potentially impacted by the anomaly group.</p>
        *         <p></p>
        */
    export interface InterMetricImpactDetails {
            /**
                * <p>The name of the measure.</p>
                */
            MetricName?: string;
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId?: string;
            /**
                * <p>Whether a measure is a potential cause of the anomaly group
                *             (<code>CAUSE_OF_INPUT_ANOMALY_GROUP</code>), or whether the measure is impacted by the
                *             anomaly group (<code>EFFECT_OF_INPUT_ANOMALY_GROUP</code>).</p>
                */
            RelationshipType?: RelationshipType | string;
            /**
                * <p>For potential causes (<code>CAUSE_OF_INPUT_ANOMALY_GROUP</code>), the percentage
                *             contribution the measure has in causing the anomalies.</p>
                */
            ContributionPercentage?: number;
    }
    export namespace InterMetricImpactDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InterMetricImpactDetails) => any;
    }
    export interface ListAlertsRequest {
            /**
                * <p>The ARN of the alert's detector.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>If the result of the previous request is truncated, the response includes a <code>NextToken</code>. To
                *       retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results that will be displayed by the request.</p>
                */
            MaxResults?: number;
    }
    export namespace ListAlertsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAlertsRequest) => any;
    }
    export interface ListAlertsResponse {
            /**
                * <p>Contains information about an alert.</p>
                */
            AlertSummaryList?: AlertSummary[];
            /**
                * <p>If the response is truncated, the service returns this token. To retrieve the next set of results, use this
                *       token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListAlertsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAlertsResponse) => any;
    }
    export interface ListAnomalyDetectorsRequest {
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To
                *       retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnomalyDetectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyDetectorsRequest) => any;
    }
    export interface ListAnomalyDetectorsResponse {
            /**
                * <p>A list of anomaly detectors in the account in the current region.</p>
                */
            AnomalyDetectorSummaryList?: AnomalyDetectorSummary[];
            /**
                * <p>If the response is truncated, the service returns this token. To retrieve the next set of results, use the
                *       token in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnomalyDetectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyDetectorsResponse) => any;
    }
    export interface ListAnomalyGroupRelatedMetricsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId: string | undefined;
            /**
                * <p>Filter for potential causes (<code>CAUSE_OF_INPUT_ANOMALY_GROUP</code>) or
                *             downstream effects (<code>EFFECT_OF_INPUT_ANOMALY_GROUP</code>) of the anomaly group.</p>
                */
            RelationshipTypeFilter?: RelationshipType | string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next
                *             page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnomalyGroupRelatedMetricsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyGroupRelatedMetricsRequest) => any;
    }
    export interface ListAnomalyGroupRelatedMetricsResponse {
            /**
                * <p>Aggregated details about the measures contributing to the anomaly group, and the measures
                *             potentially impacted by the anomaly group.</p>
                */
            InterMetricImpactList?: InterMetricImpactDetails[];
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnomalyGroupRelatedMetricsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyGroupRelatedMetricsResponse) => any;
    }
    export interface ListAnomalyGroupSummariesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>The minimum severity score for inclusion in the output.</p>
                */
            SensitivityThreshold: number | undefined;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnomalyGroupSummariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyGroupSummariesRequest) => any;
    }
    export interface ListAnomalyGroupSummariesResponse {
            /**
                * <p>A list of anomaly group summaries.</p>
                */
            AnomalyGroupSummaryList?: AnomalyGroupSummary[];
            /**
                * <p>Aggregated details about the anomaly groups.</p>
                */
            AnomalyGroupStatistics?: AnomalyGroupStatistics;
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnomalyGroupSummariesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyGroupSummariesResponse) => any;
    }
    export interface ListAnomalyGroupTimeSeriesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId: string | undefined;
            /**
                * <p>The name of the measure field.</p>
                */
            MetricName: string | undefined;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token that's returned by a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAnomalyGroupTimeSeriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyGroupTimeSeriesRequest) => any;
    }
    /**
        * <p>Details about a metric. A metric is an aggregation of the values of a measure for a dimension value, such as
        *         <i>availability</i> in the <i>us-east-1</i> Region.</p>
        */
    export interface TimeSeries {
            /**
                * <p>The ID of the metric.</p>
                */
            TimeSeriesId: string | undefined;
            /**
                * <p>The dimensions of the metric.</p>
                */
            DimensionList: DimensionNameValue[] | undefined;
            /**
                * <p>The values for the metric.</p>
                */
            MetricValueList: number[] | undefined;
    }
    export namespace TimeSeries {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimeSeries) => any;
    }
    export interface ListAnomalyGroupTimeSeriesResponse {
            /**
                * <p>The ID of the anomaly group.</p>
                */
            AnomalyGroupId?: string;
            /**
                * <p>The name of the measure field.</p>
                */
            MetricName?: string;
            /**
                * <p>Timestamps for the anomalous metrics.</p>
                */
            TimestampList?: string[];
            /**
                * <p>The pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of anomalous metrics.</p>
                */
            TimeSeriesList?: TimeSeries[];
    }
    export namespace ListAnomalyGroupTimeSeriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAnomalyGroupTimeSeriesResponse) => any;
    }
    export interface ListMetricSetsRequest {
            /**
                * <p>The ARN of the anomaly detector containing the metrics sets to list.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>If the result of the previous request was truncated, the response includes a
                *         <code>NextToken</code>. To retrieve the next set of results, use the token in the next
                *       request. Tokens expire after 24 hours.</p>
                */
            NextToken?: string;
    }
    export namespace ListMetricSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMetricSetsRequest) => any;
    }
    /**
        * <p>Contains information about a dataset.</p>
        */
    export interface MetricSetSummary {
            /**
                * <p>The ARN of the dataset.</p>
                */
            MetricSetArn?: string;
            /**
                * <p>The ARN of the detector to which the dataset belongs.</p>
                */
            AnomalyDetectorArn?: string;
            /**
                * <p>The description of the dataset.</p>
                */
            MetricSetDescription?: string;
            /**
                * <p>The name of the dataset.</p>
                */
            MetricSetName?: string;
            /**
                * <p>The time at which the dataset was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time at which the dataset was last modified.</p>
                */
            LastModificationTime?: Date;
            /**
                * <p>The dataset's <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a>.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace MetricSetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricSetSummary) => any;
    }
    export interface ListMetricSetsResponse {
            /**
                * <p>A list of the datasets in the AWS Region, with configuration details for each.</p>
                */
            MetricSetSummaryList?: MetricSetSummary[];
            /**
                * <p>If the response is truncated, the list call returns this token. To retrieve the next set
                *       of results, use the token in the next list request. </p>
                */
            NextToken?: string;
    }
    export namespace ListMetricSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMetricSetsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The resource's Amazon Resource Name (ARN).</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The resource's tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface PutFeedbackRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the anomaly detector.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>Feedback for an anomalous metric.</p>
                */
            AnomalyGroupTimeSeriesFeedback: AnomalyGroupTimeSeriesFeedback | undefined;
    }
    export namespace PutFeedbackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFeedbackRequest) => any;
    }
    export interface PutFeedbackResponse {
    }
    export namespace PutFeedbackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutFeedbackResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The resource's Amazon Resource Name (ARN).</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tags to apply to the resource. Tag keys and values can contain letters, numbers, spaces, and the following
                *       symbols: <code>_.:/=+@-</code>
                *          </p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The resource's Amazon Resource Name (ARN).</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Keys to remove from the resource's tags.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateAlertRequest {
            /**
                * <p>The ARN of the alert to update.</p>
                */
            AlertArn: string | undefined;
            /**
                * <p>A description of the alert.</p>
                */
            AlertDescription?: string;
            /**
                * <p>An integer from 0 to 100 specifying the alert sensitivity threshold.</p>
                */
            AlertSensitivityThreshold?: number;
            /**
                * <p>Action that will be triggered when there is an alert.</p>
                */
            Action?: Action;
            /**
                * <p>The configuration of the alert filters, containing MetricList and DimensionFilterList.</p>
                */
            AlertFilters?: AlertFilters;
    }
    export namespace UpdateAlertRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAlertRequest) => any;
    }
    export interface UpdateAlertResponse {
            /**
                * <p>The ARN of the updated alert.</p>
                */
            AlertArn?: string;
    }
    export namespace UpdateAlertResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAlertResponse) => any;
    }
    export interface UpdateAnomalyDetectorRequest {
            /**
                * <p>The ARN of the detector to update.</p>
                */
            AnomalyDetectorArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an AWS KMS encryption key.</p>
                */
            KmsKeyArn?: string;
            /**
                * <p>The updated detector description.</p>
                */
            AnomalyDetectorDescription?: string;
            /**
                * <p>Contains information about the configuration to which the detector will be updated.</p>
                */
            AnomalyDetectorConfig?: AnomalyDetectorConfig;
    }
    export namespace UpdateAnomalyDetectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnomalyDetectorRequest) => any;
    }
    export interface UpdateAnomalyDetectorResponse {
            /**
                * <p>The ARN of the updated detector.</p>
                */
            AnomalyDetectorArn?: string;
    }
    export namespace UpdateAnomalyDetectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAnomalyDetectorResponse) => any;
    }
    export interface UpdateMetricSetRequest {
            /**
                * <p>The ARN of the dataset to update.</p>
                */
            MetricSetArn: string | undefined;
            /**
                * <p>The dataset's description.</p>
                */
            MetricSetDescription?: string;
            /**
                * <p>The metric list.</p>
                */
            MetricList?: Metric[];
            /**
                * <p>After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3 and Redshift datasources.</p>
                */
            Offset?: number;
            /**
                * <p>The timestamp column.</p>
                */
            TimestampColumn?: TimestampColumn;
            /**
                * <p>The dimension list.</p>
                */
            DimensionList?: string[];
            /**
                * <p>The dataset's interval.</p>
                */
            MetricSetFrequency?: Frequency | string;
            /**
                * <p>Contains information about source data used to generate metrics.</p>
                */
            MetricSource?: MetricSource;
    }
    export namespace UpdateMetricSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMetricSetRequest) => any;
    }
    export interface UpdateMetricSetResponse {
            /**
                * <p>The ARN of the dataset.</p>
                */
            MetricSetArn?: string;
    }
    export namespace UpdateMetricSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMetricSetResponse) => any;
    }
}

declare module '@aws-sdk/client-lookoutmetrics/node_modules/@aws-sdk/client-lookoutmetrics/dist-types/models/LookoutMetricsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from LookoutMetrics service.
        */
    export class LookoutMetricsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

