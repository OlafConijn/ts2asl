// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-snowball' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CancelClusterCommandInput, CancelClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CancelClusterCommand";
    import { CancelJobCommandInput, CancelJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CancelJobCommand";
    import { CreateAddressCommandInput, CreateAddressCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateAddressCommand";
    import { CreateClusterCommandInput, CreateClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateClusterCommand";
    import { CreateJobCommandInput, CreateJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateJobCommand";
    import { CreateLongTermPricingCommandInput, CreateLongTermPricingCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateLongTermPricingCommand";
    import { CreateReturnShippingLabelCommandInput, CreateReturnShippingLabelCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateReturnShippingLabelCommand";
    import { DescribeAddressCommandInput, DescribeAddressCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeAddressCommand";
    import { DescribeAddressesCommandInput, DescribeAddressesCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeAddressesCommand";
    import { DescribeClusterCommandInput, DescribeClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeClusterCommand";
    import { DescribeJobCommandInput, DescribeJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeJobCommand";
    import { DescribeReturnShippingLabelCommandInput, DescribeReturnShippingLabelCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeReturnShippingLabelCommand";
    import { GetJobManifestCommandInput, GetJobManifestCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetJobManifestCommand";
    import { GetJobUnlockCodeCommandInput, GetJobUnlockCodeCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetJobUnlockCodeCommand";
    import { GetSnowballUsageCommandInput, GetSnowballUsageCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetSnowballUsageCommand";
    import { GetSoftwareUpdatesCommandInput, GetSoftwareUpdatesCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetSoftwareUpdatesCommand";
    import { ListClusterJobsCommandInput, ListClusterJobsCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListClusterJobsCommand";
    import { ListClustersCommandInput, ListClustersCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListClustersCommand";
    import { ListCompatibleImagesCommandInput, ListCompatibleImagesCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListCompatibleImagesCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListJobsCommand";
    import { ListLongTermPricingCommandInput, ListLongTermPricingCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListLongTermPricingCommand";
    import { UpdateClusterCommandInput, UpdateClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateClusterCommand";
    import { UpdateJobCommandInput, UpdateJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateJobCommand";
    import { UpdateJobShipmentStateCommandInput, UpdateJobShipmentStateCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateJobShipmentStateCommand";
    import { UpdateLongTermPricingCommandInput, UpdateLongTermPricingCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateLongTermPricingCommand";
    import { SnowballClient } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    /**
        * <p>The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses
        *       secure devices to transfer large amounts of data between your on-premises data centers and
        *       Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same
        *       functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create
        *       and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device,
        *       you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href="https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html">User Guide</a>.</p>
        */
    export class Snowball extends SnowballClient {
            /**
                * <p>Cancels a cluster job. You can only cancel a cluster job while it's in the
                *         <code>AwaitingQuorum</code> status. You'll have at least an hour after creating a cluster
                *       job to cancel it.</p>
                */
            cancelCluster(args: CancelClusterCommandInput, options?: __HttpHandlerOptions): Promise<CancelClusterCommandOutput>;
            cancelCluster(args: CancelClusterCommandInput, cb: (err: any, data?: CancelClusterCommandOutput) => void): void;
            cancelCluster(args: CancelClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelClusterCommandOutput) => void): void;
            /**
                * <p>Cancels the specified job. You can only cancel a job before its <code>JobState</code>
                *       value changes to <code>PreparingAppliance</code>. Requesting the <code>ListJobs</code> or
                *         <code>DescribeJob</code> action returns a job's <code>JobState</code> as part of the
                *       response element data returned.</p>
                */
            cancelJob(args: CancelJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelJobCommandOutput>;
            cancelJob(args: CancelJobCommandInput, cb: (err: any, data?: CancelJobCommandOutput) => void): void;
            cancelJob(args: CancelJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelJobCommandOutput) => void): void;
            /**
                * <p>Creates an address for a Snow device to be shipped to. In most regions,
                *       addresses are validated at the time of creation. The address you provide must be located
                *       within the serviceable area of your region. If the address is invalid or unsupported, then an
                *       exception is thrown.</p>
                */
            createAddress(args: CreateAddressCommandInput, options?: __HttpHandlerOptions): Promise<CreateAddressCommandOutput>;
            createAddress(args: CreateAddressCommandInput, cb: (err: any, data?: CreateAddressCommandOutput) => void): void;
            createAddress(args: CreateAddressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAddressCommandOutput) => void): void;
            /**
                * <p>Creates an empty cluster. Each cluster supports five nodes. You use the <a>CreateJob</a> action separately to create the jobs for each of these nodes. The
                *       cluster does not ship until these five node jobs have been created.</p>
                */
            createCluster(args: CreateClusterCommandInput, options?: __HttpHandlerOptions): Promise<CreateClusterCommandOutput>;
            createCluster(args: CreateClusterCommandInput, cb: (err: any, data?: CreateClusterCommandOutput) => void): void;
            createCluster(args: CreateClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateClusterCommandOutput) => void): void;
            /**
                * <p>Creates a job to import or export data between Amazon S3 and your on-premises data
                *       center. Your Amazon Web Services account must have the right trust policies and permissions in
                *       place to create a job for a Snow device. If you're creating a job for a node in a cluster, you
                *       only need to provide the <code>clusterId</code> value; the other job attributes are inherited
                *       from the cluster. </p>
                *          <note>
                *             <p>Only the Snowball; Edge device type is supported when ordering clustered jobs.</p>
                *             <p>The device capacity is optional.</p>
                *             <p>Availability of device types differ by Amazon Web Services Region. For more information
                *         about Region availability, see <a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=ngi&loc=4">Amazon Web Services Regional Services</a>.</p>
                *          </note>
                *
                *          <p></p>
                *
                *          <p class="title">
                *             <b>Snow Family Devices and their capacities.</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>Snow Family device type: <b>SNC1_SSD</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T14</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Snowcone </p>
                *                   </li>
                *                </ul>
                *
                *                <p></p>
                *             </li>
                *             <li>
                *                <p>Snow Family device type: <b>SNC1_HDD</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T8</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Snowcone </p>
                *                   </li>
                *                </ul>
                *                <p></p>
                *             </li>
                *             <li>
                *                <p>Device type: <b>EDGE_S</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T98</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Snowball Edge Storage Optimized for data transfer only </p>
                *                   </li>
                *                </ul>
                *
                *
                *                <p></p>
                *             </li>
                *             <li>
                *                <p>Device type: <b>EDGE_CG</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T42</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Snowball Edge Compute Optimized with GPU</p>
                *                   </li>
                *                </ul>
                *                <p></p>
                *             </li>
                *             <li>
                *                <p>Device type: <b>EDGE_C</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T42</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Snowball Edge Compute Optimized without GPU</p>
                *                   </li>
                *                </ul>
                *                <p></p>
                *             </li>
                *             <li>
                *                <p>Device type: <b>EDGE</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T100</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Snowball Edge Storage Optimized with EC2 Compute</p>
                *                   </li>
                *                </ul>
                *                <p></p>
                *             </li>
                *             <li>
                *                <p>Device type: <b>STANDARD</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T50</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Original Snowball device</p>
                *                      <note>
                *                         <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region
                *               </p>
                *                      </note>
                *                   </li>
                *                </ul>
                *                <p></p>
                *             </li>
                *             <li>
                *                <p>Device type: <b>STANDARD</b>
                *                </p>
                *                <ul>
                *                   <li>
                *                      <p>Capacity: T80</p>
                *                   </li>
                *                   <li>
                *                      <p>Description: Original Snowball device</p>
                *                      <note>
                *                         <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region. </p>
                *                      </note>
                *                   </li>
                *                </ul>
                *                <p></p>
                *             </li>
                *          </ul>
                */
            createJob(args: CreateJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateJobCommandOutput>;
            createJob(args: CreateJobCommandInput, cb: (err: any, data?: CreateJobCommandOutput) => void): void;
            createJob(args: CreateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateJobCommandOutput) => void): void;
            /**
                * <p>Creates a job with the long-term usage option for a device. The long-term usage is a
                *       1-year or 3-year long-term pricing type for the device. You are billed upfront, and Amazon Web Services provides discounts for long-term pricing.
                *       </p>
                */
            createLongTermPricing(args: CreateLongTermPricingCommandInput, options?: __HttpHandlerOptions): Promise<CreateLongTermPricingCommandOutput>;
            createLongTermPricing(args: CreateLongTermPricingCommandInput, cb: (err: any, data?: CreateLongTermPricingCommandOutput) => void): void;
            createLongTermPricing(args: CreateLongTermPricingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLongTermPricingCommandOutput) => void): void;
            /**
                * <p>Creates a shipping label that will be used to return the Snow device to Amazon Web Services.</p>
                */
            createReturnShippingLabel(args: CreateReturnShippingLabelCommandInput, options?: __HttpHandlerOptions): Promise<CreateReturnShippingLabelCommandOutput>;
            createReturnShippingLabel(args: CreateReturnShippingLabelCommandInput, cb: (err: any, data?: CreateReturnShippingLabelCommandOutput) => void): void;
            createReturnShippingLabel(args: CreateReturnShippingLabelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReturnShippingLabelCommandOutput) => void): void;
            /**
                * <p>Takes an <code>AddressId</code> and returns specific details about that address in the
                *       form of an <code>Address</code> object.</p>
                */
            describeAddress(args: DescribeAddressCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAddressCommandOutput>;
            describeAddress(args: DescribeAddressCommandInput, cb: (err: any, data?: DescribeAddressCommandOutput) => void): void;
            describeAddress(args: DescribeAddressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAddressCommandOutput) => void): void;
            /**
                * <p>Returns a specified number of <code>ADDRESS</code> objects. Calling this API in one of
                *       the US regions will return addresses from the list of all addresses associated with this
                *       account in all US regions.</p>
                */
            describeAddresses(args: DescribeAddressesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAddressesCommandOutput>;
            describeAddresses(args: DescribeAddressesCommandInput, cb: (err: any, data?: DescribeAddressesCommandOutput) => void): void;
            describeAddresses(args: DescribeAddressesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAddressesCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific cluster including shipping information, cluster
                *       status, and other important metadata.</p>
                */
            describeCluster(args: DescribeClusterCommandInput, options?: __HttpHandlerOptions): Promise<DescribeClusterCommandOutput>;
            describeCluster(args: DescribeClusterCommandInput, cb: (err: any, data?: DescribeClusterCommandOutput) => void): void;
            describeCluster(args: DescribeClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeClusterCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific job including shipping information, job status,
                *       and other important metadata. </p>
                */
            describeJob(args: DescribeJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeJobCommandOutput>;
            describeJob(args: DescribeJobCommandInput, cb: (err: any, data?: DescribeJobCommandOutput) => void): void;
            describeJob(args: DescribeJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeJobCommandOutput) => void): void;
            /**
                * <p>Information on the shipping label of a Snow device that is being returned to Amazon Web Services.</p>
                */
            describeReturnShippingLabel(args: DescribeReturnShippingLabelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReturnShippingLabelCommandOutput>;
            describeReturnShippingLabel(args: DescribeReturnShippingLabelCommandInput, cb: (err: any, data?: DescribeReturnShippingLabelCommandOutput) => void): void;
            describeReturnShippingLabel(args: DescribeReturnShippingLabelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReturnShippingLabelCommandOutput) => void): void;
            /**
                * <p>Returns a link to an Amazon S3 presigned URL for the manifest file associated with the
                *       specified <code>JobId</code> value. You can access the manifest file for up to 60 minutes
                *       after this request has been made. To access the manifest file after 60 minutes have passed,
                *       you'll have to make another call to the <code>GetJobManifest</code> action.</p>
                *
                *          <p>The manifest is an encrypted file that you can download after your job enters the
                *         <code>WithCustomer</code> status. The manifest is decrypted by using the
                *         <code>UnlockCode</code> code value, when you pass both values to the Snow device through the
                *       Snowball client when the client is started for the first time.</p>
                *
                *
                *          <p>As a best practice, we recommend that you don't save a copy of an
                *         <code>UnlockCode</code> value in the same location as the manifest file for that job. Saving
                *       these separately helps prevent unauthorized parties from gaining access to the Snow device
                *       associated with that job.</p>
                *
                *
                *          <p>The credentials of a given job, including its manifest file and unlock code, expire 360
                *       days after the job is created.</p>
                */
            getJobManifest(args: GetJobManifestCommandInput, options?: __HttpHandlerOptions): Promise<GetJobManifestCommandOutput>;
            getJobManifest(args: GetJobManifestCommandInput, cb: (err: any, data?: GetJobManifestCommandOutput) => void): void;
            getJobManifest(args: GetJobManifestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobManifestCommandOutput) => void): void;
            /**
                * <p>Returns the <code>UnlockCode</code> code value for the specified job. A particular
                *         <code>UnlockCode</code> value can be accessed for up to 360 days after the associated job
                *       has been created.</p>
                *
                *          <p>The <code>UnlockCode</code> value is a 29-character code with 25 alphanumeric
                *       characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed
                *       along with the manifest to the Snow device through the Snowball client when the client is
                *       started for the first time.</p>
                *
                *          <p>As a best practice, we recommend that you don't save a copy of the
                *         <code>UnlockCode</code> in the same location as the manifest file for that job. Saving these
                *       separately helps prevent unauthorized parties from gaining access to the Snow device
                *       associated with that job.</p>
                */
            getJobUnlockCode(args: GetJobUnlockCodeCommandInput, options?: __HttpHandlerOptions): Promise<GetJobUnlockCodeCommandOutput>;
            getJobUnlockCode(args: GetJobUnlockCodeCommandInput, cb: (err: any, data?: GetJobUnlockCodeCommandOutput) => void): void;
            getJobUnlockCode(args: GetJobUnlockCodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetJobUnlockCodeCommandOutput) => void): void;
            /**
                * <p>Returns information about the Snow Family service limit for your account, and also the
                *       number of Snow devices your account has in use.</p>
                *
                *          <p>The default service limit for the number of Snow devices that you can have at one time
                *       is 1. If you want to increase your service limit, contact Amazon Web Services Support.</p>
                */
            getSnowballUsage(args: GetSnowballUsageCommandInput, options?: __HttpHandlerOptions): Promise<GetSnowballUsageCommandOutput>;
            getSnowballUsage(args: GetSnowballUsageCommandInput, cb: (err: any, data?: GetSnowballUsageCommandOutput) => void): void;
            getSnowballUsage(args: GetSnowballUsageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSnowballUsageCommandOutput) => void): void;
            /**
                * <p>Returns an Amazon S3 presigned URL for an update file associated with a specified
                *         <code>JobId</code>.</p>
                */
            getSoftwareUpdates(args: GetSoftwareUpdatesCommandInput, options?: __HttpHandlerOptions): Promise<GetSoftwareUpdatesCommandOutput>;
            getSoftwareUpdates(args: GetSoftwareUpdatesCommandInput, cb: (err: any, data?: GetSoftwareUpdatesCommandOutput) => void): void;
            getSoftwareUpdates(args: GetSoftwareUpdatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSoftwareUpdatesCommandOutput) => void): void;
            /**
                * <p>Returns an array of <code>JobListEntry</code> objects of the specified length. Each
                *         <code>JobListEntry</code> object is for a job in the specified cluster and contains a job's
                *       state, a job's ID, and other information.</p>
                */
            listClusterJobs(args: ListClusterJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListClusterJobsCommandOutput>;
            listClusterJobs(args: ListClusterJobsCommandInput, cb: (err: any, data?: ListClusterJobsCommandOutput) => void): void;
            listClusterJobs(args: ListClusterJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListClusterJobsCommandOutput) => void): void;
            /**
                * <p>Returns an array of <code>ClusterListEntry</code> objects of the specified length. Each
                *         <code>ClusterListEntry</code> object contains a cluster's state, a cluster's ID, and other
                *       important status information.</p>
                */
            listClusters(args: ListClustersCommandInput, options?: __HttpHandlerOptions): Promise<ListClustersCommandOutput>;
            listClusters(args: ListClustersCommandInput, cb: (err: any, data?: ListClustersCommandOutput) => void): void;
            listClusters(args: ListClustersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListClustersCommandOutput) => void): void;
            /**
                * <p>This action returns a list of the different Amazon EC2 Amazon Machine Images (AMIs)
                *       that are owned by your Amazon Web Services accountthat would be supported for use on a Snow
                *       device. Currently, supported AMIs are based on the CentOS 7 (x86_64) - with Updates HVM,
                *       Ubuntu Server 14.04 LTS (HVM), and Ubuntu 16.04 LTS - Xenial (HVM) images, available on the
                *         Amazon Web Services Marketplace.</p>
                */
            listCompatibleImages(args: ListCompatibleImagesCommandInput, options?: __HttpHandlerOptions): Promise<ListCompatibleImagesCommandOutput>;
            listCompatibleImages(args: ListCompatibleImagesCommandInput, cb: (err: any, data?: ListCompatibleImagesCommandOutput) => void): void;
            listCompatibleImages(args: ListCompatibleImagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCompatibleImagesCommandOutput) => void): void;
            /**
                * <p>Returns an array of <code>JobListEntry</code> objects of the specified length. Each
                *         <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that
                *       indicates whether the job is a job part, in the case of export jobs. Calling this API action
                *       in one of the US regions will return jobs from the list of all jobs associated with this
                *       account in all US regions.</p>
                */
            listJobs(args: ListJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListJobsCommandOutput>;
            listJobs(args: ListJobsCommandInput, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            listJobs(args: ListJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            /**
                * <p>Lists all long-term pricing types.</p>
                */
            listLongTermPricing(args: ListLongTermPricingCommandInput, options?: __HttpHandlerOptions): Promise<ListLongTermPricingCommandOutput>;
            listLongTermPricing(args: ListLongTermPricingCommandInput, cb: (err: any, data?: ListLongTermPricingCommandOutput) => void): void;
            listLongTermPricing(args: ListLongTermPricingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLongTermPricingCommandOutput) => void): void;
            /**
                * <p>While a cluster's <code>ClusterState</code> value is in the <code>AwaitingQuorum</code>
                *       state, you can update some of the information associated with a cluster. Once the cluster
                *       changes to a different job state, usually 60 minutes after the cluster being created, this
                *       action is no longer available.</p>
                */
            updateCluster(args: UpdateClusterCommandInput, options?: __HttpHandlerOptions): Promise<UpdateClusterCommandOutput>;
            updateCluster(args: UpdateClusterCommandInput, cb: (err: any, data?: UpdateClusterCommandOutput) => void): void;
            updateCluster(args: UpdateClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateClusterCommandOutput) => void): void;
            /**
                * <p>While a job's <code>JobState</code> value is <code>New</code>, you can update some of
                *       the information associated with a job. Once the job changes to a different job state, usually
                *       within 60 minutes of the job being created, this action is no longer available.</p>
                */
            updateJob(args: UpdateJobCommandInput, options?: __HttpHandlerOptions): Promise<UpdateJobCommandOutput>;
            updateJob(args: UpdateJobCommandInput, cb: (err: any, data?: UpdateJobCommandOutput) => void): void;
            updateJob(args: UpdateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateJobCommandOutput) => void): void;
            /**
                * <p>Updates the state when a shipment state changes to a different state.</p>
                */
            updateJobShipmentState(args: UpdateJobShipmentStateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateJobShipmentStateCommandOutput>;
            updateJobShipmentState(args: UpdateJobShipmentStateCommandInput, cb: (err: any, data?: UpdateJobShipmentStateCommandOutput) => void): void;
            updateJobShipmentState(args: UpdateJobShipmentStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateJobShipmentStateCommandOutput) => void): void;
            /**
                * <p>Updates the long-term pricing type.</p>
                */
            updateLongTermPricing(args: UpdateLongTermPricingCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLongTermPricingCommandOutput>;
            updateLongTermPricing(args: UpdateLongTermPricingCommandInput, cb: (err: any, data?: UpdateLongTermPricingCommandOutput) => void): void;
            updateLongTermPricing(args: UpdateLongTermPricingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLongTermPricingCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CancelClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelClusterRequest, CancelClusterResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface CancelClusterCommandInput extends CancelClusterRequest {
    }
    export interface CancelClusterCommandOutput extends CancelClusterResult, __MetadataBearer {
    }
    /**
        * <p>Cancels a cluster job. You can only cancel a cluster job while it's in the
        *         <code>AwaitingQuorum</code> status. You'll have at least an hour after creating a cluster
        *       job to cancel it.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, CancelClusterCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, CancelClusterCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new CancelClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelClusterCommandInput} for command's `input` shape.
        * @see {@link CancelClusterCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class CancelClusterCommand extends $Command<CancelClusterCommandInput, CancelClusterCommandOutput, SnowballClientResolvedConfig> {
            readonly input: CancelClusterCommandInput;
            constructor(input: CancelClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelClusterCommandInput, CancelClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CancelJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelJobRequest, CancelJobResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface CancelJobCommandInput extends CancelJobRequest {
    }
    export interface CancelJobCommandOutput extends CancelJobResult, __MetadataBearer {
    }
    /**
        * <p>Cancels the specified job. You can only cancel a job before its <code>JobState</code>
        *       value changes to <code>PreparingAppliance</code>. Requesting the <code>ListJobs</code> or
        *         <code>DescribeJob</code> action returns a job's <code>JobState</code> as part of the
        *       response element data returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, CancelJobCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, CancelJobCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new CancelJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelJobCommandInput} for command's `input` shape.
        * @see {@link CancelJobCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class CancelJobCommand extends $Command<CancelJobCommandInput, CancelJobCommandOutput, SnowballClientResolvedConfig> {
            readonly input: CancelJobCommandInput;
            constructor(input: CancelJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelJobCommandInput, CancelJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateAddressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAddressRequest, CreateAddressResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface CreateAddressCommandInput extends CreateAddressRequest {
    }
    export interface CreateAddressCommandOutput extends CreateAddressResult, __MetadataBearer {
    }
    /**
        * <p>Creates an address for a Snow device to be shipped to. In most regions,
        *       addresses are validated at the time of creation. The address you provide must be located
        *       within the serviceable area of your region. If the address is invalid or unsupported, then an
        *       exception is thrown.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, CreateAddressCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, CreateAddressCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new CreateAddressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAddressCommandInput} for command's `input` shape.
        * @see {@link CreateAddressCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class CreateAddressCommand extends $Command<CreateAddressCommandInput, CreateAddressCommandOutput, SnowballClientResolvedConfig> {
            readonly input: CreateAddressCommandInput;
            constructor(input: CreateAddressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAddressCommandInput, CreateAddressCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateClusterRequest, CreateClusterResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface CreateClusterCommandInput extends CreateClusterRequest {
    }
    export interface CreateClusterCommandOutput extends CreateClusterResult, __MetadataBearer {
    }
    /**
        * <p>Creates an empty cluster. Each cluster supports five nodes. You use the <a>CreateJob</a> action separately to create the jobs for each of these nodes. The
        *       cluster does not ship until these five node jobs have been created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, CreateClusterCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, CreateClusterCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new CreateClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateClusterCommandInput} for command's `input` shape.
        * @see {@link CreateClusterCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class CreateClusterCommand extends $Command<CreateClusterCommandInput, CreateClusterCommandOutput, SnowballClientResolvedConfig> {
            readonly input: CreateClusterCommandInput;
            constructor(input: CreateClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateClusterCommandInput, CreateClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateJobRequest, CreateJobResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface CreateJobCommandInput extends CreateJobRequest {
    }
    export interface CreateJobCommandOutput extends CreateJobResult, __MetadataBearer {
    }
    /**
        * <p>Creates a job to import or export data between Amazon S3 and your on-premises data
        *       center. Your Amazon Web Services account must have the right trust policies and permissions in
        *       place to create a job for a Snow device. If you're creating a job for a node in a cluster, you
        *       only need to provide the <code>clusterId</code> value; the other job attributes are inherited
        *       from the cluster. </p>
        *          <note>
        *             <p>Only the Snowball; Edge device type is supported when ordering clustered jobs.</p>
        *             <p>The device capacity is optional.</p>
        *             <p>Availability of device types differ by Amazon Web Services Region. For more information
        *         about Region availability, see <a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=ngi&loc=4">Amazon Web Services Regional Services</a>.</p>
        *          </note>
        *
        *          <p></p>
        *
        *          <p class="title">
        *             <b>Snow Family Devices and their capacities.</b>
        *          </p>
        *          <ul>
        *             <li>
        *                <p>Snow Family device type: <b>SNC1_SSD</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T14</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Snowcone </p>
        *                   </li>
        *                </ul>
        *
        *                <p></p>
        *             </li>
        *             <li>
        *                <p>Snow Family device type: <b>SNC1_HDD</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T8</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Snowcone </p>
        *                   </li>
        *                </ul>
        *                <p></p>
        *             </li>
        *             <li>
        *                <p>Device type: <b>EDGE_S</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T98</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Snowball Edge Storage Optimized for data transfer only </p>
        *                   </li>
        *                </ul>
        *
        *
        *                <p></p>
        *             </li>
        *             <li>
        *                <p>Device type: <b>EDGE_CG</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T42</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Snowball Edge Compute Optimized with GPU</p>
        *                   </li>
        *                </ul>
        *                <p></p>
        *             </li>
        *             <li>
        *                <p>Device type: <b>EDGE_C</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T42</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Snowball Edge Compute Optimized without GPU</p>
        *                   </li>
        *                </ul>
        *                <p></p>
        *             </li>
        *             <li>
        *                <p>Device type: <b>EDGE</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T100</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Snowball Edge Storage Optimized with EC2 Compute</p>
        *                   </li>
        *                </ul>
        *                <p></p>
        *             </li>
        *             <li>
        *                <p>Device type: <b>STANDARD</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T50</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Original Snowball device</p>
        *                      <note>
        *                         <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region
        *               </p>
        *                      </note>
        *                   </li>
        *                </ul>
        *                <p></p>
        *             </li>
        *             <li>
        *                <p>Device type: <b>STANDARD</b>
        *                </p>
        *                <ul>
        *                   <li>
        *                      <p>Capacity: T80</p>
        *                   </li>
        *                   <li>
        *                      <p>Description: Original Snowball device</p>
        *                      <note>
        *                         <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region. </p>
        *                      </note>
        *                   </li>
        *                </ul>
        *                <p></p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, CreateJobCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, CreateJobCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new CreateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateJobCommandInput} for command's `input` shape.
        * @see {@link CreateJobCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class CreateJobCommand extends $Command<CreateJobCommandInput, CreateJobCommandOutput, SnowballClientResolvedConfig> {
            readonly input: CreateJobCommandInput;
            constructor(input: CreateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateJobCommandInput, CreateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateLongTermPricingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLongTermPricingRequest, CreateLongTermPricingResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface CreateLongTermPricingCommandInput extends CreateLongTermPricingRequest {
    }
    export interface CreateLongTermPricingCommandOutput extends CreateLongTermPricingResult, __MetadataBearer {
    }
    /**
        * <p>Creates a job with the long-term usage option for a device. The long-term usage is a
        *       1-year or 3-year long-term pricing type for the device. You are billed upfront, and Amazon Web Services provides discounts for long-term pricing.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, CreateLongTermPricingCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, CreateLongTermPricingCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new CreateLongTermPricingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLongTermPricingCommandInput} for command's `input` shape.
        * @see {@link CreateLongTermPricingCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class CreateLongTermPricingCommand extends $Command<CreateLongTermPricingCommandInput, CreateLongTermPricingCommandOutput, SnowballClientResolvedConfig> {
            readonly input: CreateLongTermPricingCommandInput;
            constructor(input: CreateLongTermPricingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLongTermPricingCommandInput, CreateLongTermPricingCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateReturnShippingLabelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateReturnShippingLabelRequest, CreateReturnShippingLabelResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface CreateReturnShippingLabelCommandInput extends CreateReturnShippingLabelRequest {
    }
    export interface CreateReturnShippingLabelCommandOutput extends CreateReturnShippingLabelResult, __MetadataBearer {
    }
    /**
        * <p>Creates a shipping label that will be used to return the Snow device to Amazon Web Services.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, CreateReturnShippingLabelCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, CreateReturnShippingLabelCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new CreateReturnShippingLabelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReturnShippingLabelCommandInput} for command's `input` shape.
        * @see {@link CreateReturnShippingLabelCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class CreateReturnShippingLabelCommand extends $Command<CreateReturnShippingLabelCommandInput, CreateReturnShippingLabelCommandOutput, SnowballClientResolvedConfig> {
            readonly input: CreateReturnShippingLabelCommandInput;
            constructor(input: CreateReturnShippingLabelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReturnShippingLabelCommandInput, CreateReturnShippingLabelCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeAddressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAddressRequest, DescribeAddressResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface DescribeAddressCommandInput extends DescribeAddressRequest {
    }
    export interface DescribeAddressCommandOutput extends DescribeAddressResult, __MetadataBearer {
    }
    /**
        * <p>Takes an <code>AddressId</code> and returns specific details about that address in the
        *       form of an <code>Address</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, DescribeAddressCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, DescribeAddressCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new DescribeAddressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAddressCommandInput} for command's `input` shape.
        * @see {@link DescribeAddressCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class DescribeAddressCommand extends $Command<DescribeAddressCommandInput, DescribeAddressCommandOutput, SnowballClientResolvedConfig> {
            readonly input: DescribeAddressCommandInput;
            constructor(input: DescribeAddressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAddressCommandInput, DescribeAddressCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeAddressesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAddressesRequest, DescribeAddressesResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface DescribeAddressesCommandInput extends DescribeAddressesRequest {
    }
    export interface DescribeAddressesCommandOutput extends DescribeAddressesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a specified number of <code>ADDRESS</code> objects. Calling this API in one of
        *       the US regions will return addresses from the list of all addresses associated with this
        *       account in all US regions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, DescribeAddressesCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, DescribeAddressesCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new DescribeAddressesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAddressesCommandInput} for command's `input` shape.
        * @see {@link DescribeAddressesCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class DescribeAddressesCommand extends $Command<DescribeAddressesCommandInput, DescribeAddressesCommandOutput, SnowballClientResolvedConfig> {
            readonly input: DescribeAddressesCommandInput;
            constructor(input: DescribeAddressesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAddressesCommandInput, DescribeAddressesCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeClusterRequest, DescribeClusterResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface DescribeClusterCommandInput extends DescribeClusterRequest {
    }
    export interface DescribeClusterCommandOutput extends DescribeClusterResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific cluster including shipping information, cluster
        *       status, and other important metadata.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, DescribeClusterCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, DescribeClusterCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new DescribeClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeClusterCommandInput} for command's `input` shape.
        * @see {@link DescribeClusterCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class DescribeClusterCommand extends $Command<DescribeClusterCommandInput, DescribeClusterCommandOutput, SnowballClientResolvedConfig> {
            readonly input: DescribeClusterCommandInput;
            constructor(input: DescribeClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeClusterCommandInput, DescribeClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeJobRequest, DescribeJobResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface DescribeJobCommandInput extends DescribeJobRequest {
    }
    export interface DescribeJobCommandOutput extends DescribeJobResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific job including shipping information, job status,
        *       and other important metadata. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, DescribeJobCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, DescribeJobCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new DescribeJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeJobCommandInput} for command's `input` shape.
        * @see {@link DescribeJobCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class DescribeJobCommand extends $Command<DescribeJobCommandInput, DescribeJobCommandOutput, SnowballClientResolvedConfig> {
            readonly input: DescribeJobCommandInput;
            constructor(input: DescribeJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeJobCommandInput, DescribeJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeReturnShippingLabelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeReturnShippingLabelRequest, DescribeReturnShippingLabelResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface DescribeReturnShippingLabelCommandInput extends DescribeReturnShippingLabelRequest {
    }
    export interface DescribeReturnShippingLabelCommandOutput extends DescribeReturnShippingLabelResult, __MetadataBearer {
    }
    /**
        * <p>Information on the shipping label of a Snow device that is being returned to Amazon Web Services.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, DescribeReturnShippingLabelCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, DescribeReturnShippingLabelCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new DescribeReturnShippingLabelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReturnShippingLabelCommandInput} for command's `input` shape.
        * @see {@link DescribeReturnShippingLabelCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class DescribeReturnShippingLabelCommand extends $Command<DescribeReturnShippingLabelCommandInput, DescribeReturnShippingLabelCommandOutput, SnowballClientResolvedConfig> {
            readonly input: DescribeReturnShippingLabelCommandInput;
            constructor(input: DescribeReturnShippingLabelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReturnShippingLabelCommandInput, DescribeReturnShippingLabelCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetJobManifestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetJobManifestRequest, GetJobManifestResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface GetJobManifestCommandInput extends GetJobManifestRequest {
    }
    export interface GetJobManifestCommandOutput extends GetJobManifestResult, __MetadataBearer {
    }
    /**
        * <p>Returns a link to an Amazon S3 presigned URL for the manifest file associated with the
        *       specified <code>JobId</code> value. You can access the manifest file for up to 60 minutes
        *       after this request has been made. To access the manifest file after 60 minutes have passed,
        *       you'll have to make another call to the <code>GetJobManifest</code> action.</p>
        *
        *          <p>The manifest is an encrypted file that you can download after your job enters the
        *         <code>WithCustomer</code> status. The manifest is decrypted by using the
        *         <code>UnlockCode</code> code value, when you pass both values to the Snow device through the
        *       Snowball client when the client is started for the first time.</p>
        *
        *
        *          <p>As a best practice, we recommend that you don't save a copy of an
        *         <code>UnlockCode</code> value in the same location as the manifest file for that job. Saving
        *       these separately helps prevent unauthorized parties from gaining access to the Snow device
        *       associated with that job.</p>
        *
        *
        *          <p>The credentials of a given job, including its manifest file and unlock code, expire 360
        *       days after the job is created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, GetJobManifestCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, GetJobManifestCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new GetJobManifestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobManifestCommandInput} for command's `input` shape.
        * @see {@link GetJobManifestCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class GetJobManifestCommand extends $Command<GetJobManifestCommandInput, GetJobManifestCommandOutput, SnowballClientResolvedConfig> {
            readonly input: GetJobManifestCommandInput;
            constructor(input: GetJobManifestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobManifestCommandInput, GetJobManifestCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetJobUnlockCodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetJobUnlockCodeRequest, GetJobUnlockCodeResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface GetJobUnlockCodeCommandInput extends GetJobUnlockCodeRequest {
    }
    export interface GetJobUnlockCodeCommandOutput extends GetJobUnlockCodeResult, __MetadataBearer {
    }
    /**
        * <p>Returns the <code>UnlockCode</code> code value for the specified job. A particular
        *         <code>UnlockCode</code> value can be accessed for up to 360 days after the associated job
        *       has been created.</p>
        *
        *          <p>The <code>UnlockCode</code> value is a 29-character code with 25 alphanumeric
        *       characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed
        *       along with the manifest to the Snow device through the Snowball client when the client is
        *       started for the first time.</p>
        *
        *          <p>As a best practice, we recommend that you don't save a copy of the
        *         <code>UnlockCode</code> in the same location as the manifest file for that job. Saving these
        *       separately helps prevent unauthorized parties from gaining access to the Snow device
        *       associated with that job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, GetJobUnlockCodeCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, GetJobUnlockCodeCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new GetJobUnlockCodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetJobUnlockCodeCommandInput} for command's `input` shape.
        * @see {@link GetJobUnlockCodeCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class GetJobUnlockCodeCommand extends $Command<GetJobUnlockCodeCommandInput, GetJobUnlockCodeCommandOutput, SnowballClientResolvedConfig> {
            readonly input: GetJobUnlockCodeCommandInput;
            constructor(input: GetJobUnlockCodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetJobUnlockCodeCommandInput, GetJobUnlockCodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetSnowballUsageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSnowballUsageRequest, GetSnowballUsageResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface GetSnowballUsageCommandInput extends GetSnowballUsageRequest {
    }
    export interface GetSnowballUsageCommandOutput extends GetSnowballUsageResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the Snow Family service limit for your account, and also the
        *       number of Snow devices your account has in use.</p>
        *
        *          <p>The default service limit for the number of Snow devices that you can have at one time
        *       is 1. If you want to increase your service limit, contact Amazon Web Services Support.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, GetSnowballUsageCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, GetSnowballUsageCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new GetSnowballUsageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSnowballUsageCommandInput} for command's `input` shape.
        * @see {@link GetSnowballUsageCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class GetSnowballUsageCommand extends $Command<GetSnowballUsageCommandInput, GetSnowballUsageCommandOutput, SnowballClientResolvedConfig> {
            readonly input: GetSnowballUsageCommandInput;
            constructor(input: GetSnowballUsageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSnowballUsageCommandInput, GetSnowballUsageCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetSoftwareUpdatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSoftwareUpdatesRequest, GetSoftwareUpdatesResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface GetSoftwareUpdatesCommandInput extends GetSoftwareUpdatesRequest {
    }
    export interface GetSoftwareUpdatesCommandOutput extends GetSoftwareUpdatesResult, __MetadataBearer {
    }
    /**
        * <p>Returns an Amazon S3 presigned URL for an update file associated with a specified
        *         <code>JobId</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, GetSoftwareUpdatesCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, GetSoftwareUpdatesCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new GetSoftwareUpdatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSoftwareUpdatesCommandInput} for command's `input` shape.
        * @see {@link GetSoftwareUpdatesCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class GetSoftwareUpdatesCommand extends $Command<GetSoftwareUpdatesCommandInput, GetSoftwareUpdatesCommandOutput, SnowballClientResolvedConfig> {
            readonly input: GetSoftwareUpdatesCommandInput;
            constructor(input: GetSoftwareUpdatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSoftwareUpdatesCommandInput, GetSoftwareUpdatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListClusterJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListClusterJobsRequest, ListClusterJobsResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface ListClusterJobsCommandInput extends ListClusterJobsRequest {
    }
    export interface ListClusterJobsCommandOutput extends ListClusterJobsResult, __MetadataBearer {
    }
    /**
        * <p>Returns an array of <code>JobListEntry</code> objects of the specified length. Each
        *         <code>JobListEntry</code> object is for a job in the specified cluster and contains a job's
        *       state, a job's ID, and other information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, ListClusterJobsCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, ListClusterJobsCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new ListClusterJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListClusterJobsCommandInput} for command's `input` shape.
        * @see {@link ListClusterJobsCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class ListClusterJobsCommand extends $Command<ListClusterJobsCommandInput, ListClusterJobsCommandOutput, SnowballClientResolvedConfig> {
            readonly input: ListClusterJobsCommandInput;
            constructor(input: ListClusterJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListClusterJobsCommandInput, ListClusterJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListClustersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListClustersRequest, ListClustersResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface ListClustersCommandInput extends ListClustersRequest {
    }
    export interface ListClustersCommandOutput extends ListClustersResult, __MetadataBearer {
    }
    /**
        * <p>Returns an array of <code>ClusterListEntry</code> objects of the specified length. Each
        *         <code>ClusterListEntry</code> object contains a cluster's state, a cluster's ID, and other
        *       important status information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, ListClustersCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, ListClustersCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new ListClustersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListClustersCommandInput} for command's `input` shape.
        * @see {@link ListClustersCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class ListClustersCommand extends $Command<ListClustersCommandInput, ListClustersCommandOutput, SnowballClientResolvedConfig> {
            readonly input: ListClustersCommandInput;
            constructor(input: ListClustersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListClustersCommandInput, ListClustersCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListCompatibleImagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCompatibleImagesRequest, ListCompatibleImagesResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface ListCompatibleImagesCommandInput extends ListCompatibleImagesRequest {
    }
    export interface ListCompatibleImagesCommandOutput extends ListCompatibleImagesResult, __MetadataBearer {
    }
    /**
        * <p>This action returns a list of the different Amazon EC2 Amazon Machine Images (AMIs)
        *       that are owned by your Amazon Web Services accountthat would be supported for use on a Snow
        *       device. Currently, supported AMIs are based on the CentOS 7 (x86_64) - with Updates HVM,
        *       Ubuntu Server 14.04 LTS (HVM), and Ubuntu 16.04 LTS - Xenial (HVM) images, available on the
        *         Amazon Web Services Marketplace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, ListCompatibleImagesCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, ListCompatibleImagesCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new ListCompatibleImagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCompatibleImagesCommandInput} for command's `input` shape.
        * @see {@link ListCompatibleImagesCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class ListCompatibleImagesCommand extends $Command<ListCompatibleImagesCommandInput, ListCompatibleImagesCommandOutput, SnowballClientResolvedConfig> {
            readonly input: ListCompatibleImagesCommandInput;
            constructor(input: ListCompatibleImagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCompatibleImagesCommandInput, ListCompatibleImagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListJobsRequest, ListJobsResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface ListJobsCommandInput extends ListJobsRequest {
    }
    export interface ListJobsCommandOutput extends ListJobsResult, __MetadataBearer {
    }
    /**
        * <p>Returns an array of <code>JobListEntry</code> objects of the specified length. Each
        *         <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that
        *       indicates whether the job is a job part, in the case of export jobs. Calling this API action
        *       in one of the US regions will return jobs from the list of all jobs associated with this
        *       account in all US regions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, ListJobsCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, ListJobsCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new ListJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJobsCommandInput} for command's `input` shape.
        * @see {@link ListJobsCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class ListJobsCommand extends $Command<ListJobsCommandInput, ListJobsCommandOutput, SnowballClientResolvedConfig> {
            readonly input: ListJobsCommandInput;
            constructor(input: ListJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJobsCommandInput, ListJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListLongTermPricingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLongTermPricingRequest, ListLongTermPricingResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface ListLongTermPricingCommandInput extends ListLongTermPricingRequest {
    }
    export interface ListLongTermPricingCommandOutput extends ListLongTermPricingResult, __MetadataBearer {
    }
    /**
        * <p>Lists all long-term pricing types.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, ListLongTermPricingCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, ListLongTermPricingCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new ListLongTermPricingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLongTermPricingCommandInput} for command's `input` shape.
        * @see {@link ListLongTermPricingCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class ListLongTermPricingCommand extends $Command<ListLongTermPricingCommandInput, ListLongTermPricingCommandOutput, SnowballClientResolvedConfig> {
            readonly input: ListLongTermPricingCommandInput;
            constructor(input: ListLongTermPricingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLongTermPricingCommandInput, ListLongTermPricingCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateClusterRequest, UpdateClusterResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface UpdateClusterCommandInput extends UpdateClusterRequest {
    }
    export interface UpdateClusterCommandOutput extends UpdateClusterResult, __MetadataBearer {
    }
    /**
        * <p>While a cluster's <code>ClusterState</code> value is in the <code>AwaitingQuorum</code>
        *       state, you can update some of the information associated with a cluster. Once the cluster
        *       changes to a different job state, usually 60 minutes after the cluster being created, this
        *       action is no longer available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, UpdateClusterCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, UpdateClusterCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new UpdateClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateClusterCommandInput} for command's `input` shape.
        * @see {@link UpdateClusterCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class UpdateClusterCommand extends $Command<UpdateClusterCommandInput, UpdateClusterCommandOutput, SnowballClientResolvedConfig> {
            readonly input: UpdateClusterCommandInput;
            constructor(input: UpdateClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateClusterCommandInput, UpdateClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateJobRequest, UpdateJobResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface UpdateJobCommandInput extends UpdateJobRequest {
    }
    export interface UpdateJobCommandOutput extends UpdateJobResult, __MetadataBearer {
    }
    /**
        * <p>While a job's <code>JobState</code> value is <code>New</code>, you can update some of
        *       the information associated with a job. Once the job changes to a different job state, usually
        *       within 60 minutes of the job being created, this action is no longer available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, UpdateJobCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, UpdateJobCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new UpdateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateJobCommandInput} for command's `input` shape.
        * @see {@link UpdateJobCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class UpdateJobCommand extends $Command<UpdateJobCommandInput, UpdateJobCommandOutput, SnowballClientResolvedConfig> {
            readonly input: UpdateJobCommandInput;
            constructor(input: UpdateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateJobCommandInput, UpdateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateJobShipmentStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateJobShipmentStateRequest, UpdateJobShipmentStateResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface UpdateJobShipmentStateCommandInput extends UpdateJobShipmentStateRequest {
    }
    export interface UpdateJobShipmentStateCommandOutput extends UpdateJobShipmentStateResult, __MetadataBearer {
    }
    /**
        * <p>Updates the state when a shipment state changes to a different state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, UpdateJobShipmentStateCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, UpdateJobShipmentStateCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new UpdateJobShipmentStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateJobShipmentStateCommandInput} for command's `input` shape.
        * @see {@link UpdateJobShipmentStateCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class UpdateJobShipmentStateCommand extends $Command<UpdateJobShipmentStateCommandInput, UpdateJobShipmentStateCommandOutput, SnowballClientResolvedConfig> {
            readonly input: UpdateJobShipmentStateCommandInput;
            constructor(input: UpdateJobShipmentStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateJobShipmentStateCommandInput, UpdateJobShipmentStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateLongTermPricingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLongTermPricingRequest, UpdateLongTermPricingResult } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient";
    export interface UpdateLongTermPricingCommandInput extends UpdateLongTermPricingRequest {
    }
    export interface UpdateLongTermPricingCommandOutput extends UpdateLongTermPricingResult, __MetadataBearer {
    }
    /**
        * <p>Updates the long-term pricing type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SnowballClient, UpdateLongTermPricingCommand } from "@aws-sdk/client-snowball"; // ES Modules import
        * // const { SnowballClient, UpdateLongTermPricingCommand } = require("@aws-sdk/client-snowball"); // CommonJS import
        * const client = new SnowballClient(config);
        * const command = new UpdateLongTermPricingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLongTermPricingCommandInput} for command's `input` shape.
        * @see {@link UpdateLongTermPricingCommandOutput} for command's `response` shape.
        * @see {@link SnowballClientResolvedConfig | config} for SnowballClient's `config` shape.
        *
        */
    export class UpdateLongTermPricingCommand extends $Command<UpdateLongTermPricingCommandInput, UpdateLongTermPricingCommandOutput, SnowballClientResolvedConfig> {
            readonly input: UpdateLongTermPricingCommandInput;
            constructor(input: UpdateLongTermPricingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SnowballClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLongTermPricingCommandInput, UpdateLongTermPricingCommandOutput>;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/SnowballClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CancelClusterCommandInput, CancelClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CancelClusterCommand";
    import { CancelJobCommandInput, CancelJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CancelJobCommand";
    import { CreateAddressCommandInput, CreateAddressCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateAddressCommand";
    import { CreateClusterCommandInput, CreateClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateClusterCommand";
    import { CreateJobCommandInput, CreateJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateJobCommand";
    import { CreateLongTermPricingCommandInput, CreateLongTermPricingCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateLongTermPricingCommand";
    import { CreateReturnShippingLabelCommandInput, CreateReturnShippingLabelCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/CreateReturnShippingLabelCommand";
    import { DescribeAddressCommandInput, DescribeAddressCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeAddressCommand";
    import { DescribeAddressesCommandInput, DescribeAddressesCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeAddressesCommand";
    import { DescribeClusterCommandInput, DescribeClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeClusterCommand";
    import { DescribeJobCommandInput, DescribeJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeJobCommand";
    import { DescribeReturnShippingLabelCommandInput, DescribeReturnShippingLabelCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/DescribeReturnShippingLabelCommand";
    import { GetJobManifestCommandInput, GetJobManifestCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetJobManifestCommand";
    import { GetJobUnlockCodeCommandInput, GetJobUnlockCodeCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetJobUnlockCodeCommand";
    import { GetSnowballUsageCommandInput, GetSnowballUsageCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetSnowballUsageCommand";
    import { GetSoftwareUpdatesCommandInput, GetSoftwareUpdatesCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/GetSoftwareUpdatesCommand";
    import { ListClusterJobsCommandInput, ListClusterJobsCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListClusterJobsCommand";
    import { ListClustersCommandInput, ListClustersCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListClustersCommand";
    import { ListCompatibleImagesCommandInput, ListCompatibleImagesCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListCompatibleImagesCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListJobsCommand";
    import { ListLongTermPricingCommandInput, ListLongTermPricingCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/ListLongTermPricingCommand";
    import { UpdateClusterCommandInput, UpdateClusterCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateClusterCommand";
    import { UpdateJobCommandInput, UpdateJobCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateJobCommand";
    import { UpdateJobShipmentStateCommandInput, UpdateJobShipmentStateCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateJobShipmentStateCommand";
    import { UpdateLongTermPricingCommandInput, UpdateLongTermPricingCommandOutput } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/commands/UpdateLongTermPricingCommand";
    export type ServiceInputTypes = CancelClusterCommandInput | CancelJobCommandInput | CreateAddressCommandInput | CreateClusterCommandInput | CreateJobCommandInput | CreateLongTermPricingCommandInput | CreateReturnShippingLabelCommandInput | DescribeAddressCommandInput | DescribeAddressesCommandInput | DescribeClusterCommandInput | DescribeJobCommandInput | DescribeReturnShippingLabelCommandInput | GetJobManifestCommandInput | GetJobUnlockCodeCommandInput | GetSnowballUsageCommandInput | GetSoftwareUpdatesCommandInput | ListClusterJobsCommandInput | ListClustersCommandInput | ListCompatibleImagesCommandInput | ListJobsCommandInput | ListLongTermPricingCommandInput | UpdateClusterCommandInput | UpdateJobCommandInput | UpdateJobShipmentStateCommandInput | UpdateLongTermPricingCommandInput;
    export type ServiceOutputTypes = CancelClusterCommandOutput | CancelJobCommandOutput | CreateAddressCommandOutput | CreateClusterCommandOutput | CreateJobCommandOutput | CreateLongTermPricingCommandOutput | CreateReturnShippingLabelCommandOutput | DescribeAddressCommandOutput | DescribeAddressesCommandOutput | DescribeClusterCommandOutput | DescribeJobCommandOutput | DescribeReturnShippingLabelCommandOutput | GetJobManifestCommandOutput | GetJobUnlockCodeCommandOutput | GetSnowballUsageCommandOutput | GetSoftwareUpdatesCommandOutput | ListClusterJobsCommandOutput | ListClustersCommandOutput | ListCompatibleImagesCommandOutput | ListJobsCommandOutput | ListLongTermPricingCommandOutput | UpdateClusterCommandOutput | UpdateJobCommandOutput | UpdateJobShipmentStateCommandOutput | UpdateLongTermPricingCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SnowballClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SnowballClient class constructor that set the region, credentials and other options.
        */
    export interface SnowballClientConfig extends SnowballClientConfigType {
    }
    type SnowballClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SnowballClient class. This is resolved and normalized from the {@link SnowballClientConfig | constructor configuration interface}.
        */
    export interface SnowballClientResolvedConfig extends SnowballClientResolvedConfigType {
    }
    /**
        * <p>The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses
        *       secure devices to transfer large amounts of data between your on-premises data centers and
        *       Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same
        *       functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create
        *       and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device,
        *       you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href="https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html">User Guide</a>.</p>
        */
    export class SnowballClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SnowballClientResolvedConfig> {
            /**
                * The resolved configuration of SnowballClient class. This is resolved and normalized from the {@link SnowballClientConfig | constructor configuration interface}.
                */
            readonly config: SnowballClientResolvedConfig;
            constructor(configuration: SnowballClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SnowballServiceException as __BaseException } from "@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/SnowballServiceException";
    /**
        * <p>The address that you want the Snow device(s) associated with a specific job to be
        *       shipped to. Addresses are validated at the time of creation. The address you provide must be
        *       located within the serviceable area of your region. Although no individual elements of the
        *         <code>Address</code> are required, if the address is invalid or unsupported, then an
        *       exception is thrown.</p>
        */
    export interface Address {
            /**
                * <p>The unique ID for an address.</p>
                */
            AddressId?: string;
            /**
                * <p>The name of a person to receive a Snow device at an address.</p>
                */
            Name?: string;
            /**
                * <p>The name of the company to receive a Snow device at an address.</p>
                */
            Company?: string;
            /**
                * <p>The first line in a street address that a Snow device is to be delivered
                *       to.</p>
                */
            Street1?: string;
            /**
                * <p>The second line in a street address that a Snow device is to be delivered
                *       to.</p>
                */
            Street2?: string;
            /**
                * <p>The third line in a street address that a Snow device is to be delivered
                *       to.</p>
                */
            Street3?: string;
            /**
                * <p>The city in an address that a Snow device is to be delivered to.</p>
                */
            City?: string;
            /**
                * <p>The state or province in an address that a Snow device is to be delivered to.</p>
                */
            StateOrProvince?: string;
            /**
                * <p>This field is no longer used and the value is ignored.</p>
                */
            PrefectureOrDistrict?: string;
            /**
                * <p>This field is no longer used and the value is ignored.</p>
                */
            Landmark?: string;
            /**
                * <p>The country in an address that a Snow device is to be delivered to.</p>
                */
            Country?: string;
            /**
                * <p>The postal code in an address that a Snow device is to be delivered to.</p>
                */
            PostalCode?: string;
            /**
                * <p>The phone number associated with an address that a Snow device is to be delivered
                *       to.</p>
                */
            PhoneNumber?: string;
            /**
                * <p>If the address you are creating is a primary address, then set this option to
                *       true. This field is not supported in most regions.</p>
                */
            IsRestricted?: boolean;
    }
    export namespace Address {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Address) => any;
    }
    export interface CancelClusterRequest {
            /**
                * <p>The 39-character ID for the cluster that you want to cancel, for example
                *         <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            ClusterId: string | undefined;
    }
    export namespace CancelClusterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelClusterRequest) => any;
    }
    export interface CancelClusterResult {
    }
    export namespace CancelClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelClusterResult) => any;
    }
    /**
        * <p>The action can't be performed because the job's current state doesn't allow that action
        *       to be performed.</p>
        */
    export class InvalidJobStateException extends __BaseException {
            readonly name: "InvalidJobStateException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidJobStateException, __BaseException>);
    }
    /**
        * <p>The specified resource can't be found. Check the information you provided in your last
        *       request, and try again.</p>
        */
    export class InvalidResourceException extends __BaseException {
            readonly name: "InvalidResourceException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The provided resource value is invalid.</p>
                */
            ResourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResourceException, __BaseException>);
    }
    /**
        * <p>The provided Key Management Service key lacks the permissions to perform the specified
        *         <a>CreateJob</a> or <a>UpdateJob</a> action.</p>
        */
    export class KMSRequestFailedException extends __BaseException {
            readonly name: "KMSRequestFailedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSRequestFailedException, __BaseException>);
    }
    export interface CancelJobRequest {
            /**
                * <p>The 39-character job ID for the job that you want to cancel, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
    }
    export namespace CancelJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelJobRequest) => any;
    }
    export interface CancelJobResult {
    }
    export namespace CancelJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelJobResult) => any;
    }
    export interface CreateAddressRequest {
            /**
                * <p>The address that you want the Snow device shipped to.</p>
                */
            Address: Address | undefined;
    }
    export namespace CreateAddressRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAddressRequest) => any;
    }
    export interface CreateAddressResult {
            /**
                * <p>The automatically generated ID for a specific address. You'll use this ID when you
                *       create a job to specify which address you want the Snow device for that job shipped
                *       to.</p>
                */
            AddressId?: string;
    }
    export namespace CreateAddressResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAddressResult) => any;
    }
    /**
        * <p>The address provided was invalid. Check the address with your region's carrier, and try
        *       again.</p>
        */
    export class InvalidAddressException extends __BaseException {
            readonly name: "InvalidAddressException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAddressException, __BaseException>);
    }
    /**
        * <p>The address is either outside the serviceable area for your region, or an error
        *       occurred. Check the address with your region's carrier and try again. If the issue persists,
        *       contact Amazon Web Services Support.</p>
        */
    export class UnsupportedAddressException extends __BaseException {
            readonly name: "UnsupportedAddressException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedAddressException, __BaseException>);
    }
    export enum JobType {
            EXPORT = "EXPORT",
            IMPORT = "IMPORT",
            LOCAL_USE = "LOCAL_USE"
    }
    export enum JobState {
            CANCELLED = "Cancelled",
            COMPLETE = "Complete",
            IN_PROGRESS = "InProgress",
            IN_TRANSIT_TO_AWS = "InTransitToAWS",
            IN_TRANSIT_TO_CUSTOMER = "InTransitToCustomer",
            LISTING = "Listing",
            NEW = "New",
            PENDING = "Pending",
            PREPARING_APPLIANCE = "PreparingAppliance",
            PREPARING_SHIPMENT = "PreparingShipment",
            WITH_AWS = "WithAWS",
            WITH_AWS_SORTING_FACILITY = "WithAWSSortingFacility",
            WITH_CUSTOMER = "WithCustomer"
    }
    /**
        * <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated
        *       with a specific job. The <code>Notification</code> object is returned as a part of the
        *       response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data
        *       type.</p>
        *
        *          <p>When the notification settings are defined during job creation, you can choose to
        *       notify based on a specific set of job states using the <code>JobStatesToNotify</code> array of
        *       strings, or you can specify that you want to have Amazon SNS notifications sent out for all
        *       job states with <code>NotifyAll</code> set to true.</p>
        */
    export interface Notification {
            /**
                * <p>The new SNS <code>TopicArn</code> that you want to associate with this job. You can
                *       create Amazon Resource Names (ARNs) for topics by using the <a href="https://docs.aws.amazon.com/sns/latest/api/API_CreateTopic.html">CreateTopic</a> Amazon SNS API
                *       action.</p>
                *
                *          <p>You can subscribe email addresses to an Amazon SNS topic through the Amazon Web Services Management Console, or by using the <a href="https://docs.aws.amazon.com/sns/latest/api/API_Subscribe.html">Subscribe</a> Amazon Simple Notification
                *       Service (Amazon SNS) API action.</p>
                */
            SnsTopicARN?: string;
            /**
                * <p>The list of job states that will trigger a notification for this job.</p>
                */
            JobStatesToNotify?: (JobState | string)[];
            /**
                * <p>Any change in job state will trigger a notification for this job.</p>
                */
            NotifyAll?: boolean;
    }
    export namespace Notification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Notification) => any;
    }
    export enum StorageUnit {
            TB = "TB"
    }
    /**
        * <p>An object that represents the metadata and configuration settings for the NFS (Network
        *       File System) service on an Amazon Web Services Snow Family device.</p>
        */
    export interface NFSOnDeviceServiceConfiguration {
            /**
                * <p>The maximum NFS storage for one Snow Family device.</p>
                */
            StorageLimit?: number;
            /**
                * <p>The scale unit of the NFS storage on the device.</p>
                *          <p>Valid values: TB.</p>
                */
            StorageUnit?: StorageUnit | string;
    }
    export namespace NFSOnDeviceServiceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NFSOnDeviceServiceConfiguration) => any;
    }
    /**
        * <p>An object that represents the metadata and configuration settings for the Storage Gateway
        *       service Tape Gateway type on an Amazon Web Services Snow Family device.</p>
        */
    export interface TGWOnDeviceServiceConfiguration {
            /**
                * <p>The maximum number of virtual tapes to store on one Snow Family device. Due to physical
                *       resource limitations, this value must be set to 80 for Snowball Edge.</p>
                */
            StorageLimit?: number;
            /**
                * <p>The scale unit of the virtual tapes on the device.</p>
                */
            StorageUnit?: StorageUnit | string;
    }
    export namespace TGWOnDeviceServiceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TGWOnDeviceServiceConfiguration) => any;
    }
    /**
        * <p>An object that represents the metadata and configuration settings for services on an Amazon Web Services
        *       Snow Family device.</p>
        */
    export interface OnDeviceServiceConfiguration {
            /**
                * <p>Represents the NFS (Network File System) service on a Snow Family device.</p>
                */
            NFSOnDeviceService?: NFSOnDeviceServiceConfiguration;
            /**
                * <p>Represents the Storage Gateway service Tape Gateway type on a Snow Family device.</p>
                */
            TGWOnDeviceService?: TGWOnDeviceServiceConfiguration;
    }
    export namespace OnDeviceServiceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OnDeviceServiceConfiguration) => any;
    }
    export enum RemoteManagement {
            INSTALLED_AUTOSTART = "INSTALLED_AUTOSTART",
            INSTALLED_ONLY = "INSTALLED_ONLY"
    }
    /**
        * <p>A JSON-formatted object that contains the IDs for an Amazon Machine Image (AMI),
        *       including the Amazon EC2 AMI ID and the Snow device AMI ID. Each AMI has these two IDs to
        *       simplify identifying the AMI in both the Amazon Web Services Cloud and on the device.</p>
        */
    export interface Ec2AmiResource {
            /**
                * <p>The ID of the AMI in Amazon EC2.</p>
                */
            AmiId: string | undefined;
            /**
                * <p>The ID of the AMI on the Snow device.</p>
                */
            SnowballAmiId?: string;
    }
    export namespace Ec2AmiResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Ec2AmiResource) => any;
    }
    /**
        * <p>The container for the <a>EventTriggerDefinition$EventResourceARN</a>.</p>
        */
    export interface EventTriggerDefinition {
            /**
                * <p>The Amazon Resource Name (ARN) for any local Amazon S3 resource that is an Lambda function's event trigger associated with this job.</p>
                */
            EventResourceARN?: string;
    }
    export namespace EventTriggerDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventTriggerDefinition) => any;
    }
    /**
        * <p>Identifies </p>
        */
    export interface LambdaResource {
            /**
                * <p>An Amazon Resource Name (ARN) that represents an Lambda function to be
                *       triggered by PUT object actions on the associated local Amazon S3 resource.</p>
                */
            LambdaArn?: string;
            /**
                * <p>The array of ARNs for <a>S3Resource</a> objects to trigger the <a>LambdaResource</a> objects associated with this job.</p>
                */
            EventTriggers?: EventTriggerDefinition[];
    }
    export namespace LambdaResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaResource) => any;
    }
    /**
        * <p>Contains a key range. For export jobs, a <code>S3Resource</code> object can have an
        *       optional <code>KeyRange</code> value. The length of the range is defined at job creation, and
        *       has either an inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or
        *       both. Ranges are UTF-8 binary sorted.</p>
        */
    export interface KeyRange {
            /**
                * <p>The key that starts an optional key range for an export job. Ranges are inclusive and
                *       UTF-8 binary sorted.</p>
                */
            BeginMarker?: string;
            /**
                * <p>The key that ends an optional key range for an export job. Ranges are inclusive and
                *       UTF-8 binary sorted.</p>
                */
            EndMarker?: string;
    }
    export namespace KeyRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KeyRange) => any;
    }
    export enum DeviceServiceName {
            NFS_ON_DEVICE_SERVICE = "NFS_ON_DEVICE_SERVICE",
            S3_ON_DEVICE_SERVICE = "S3_ON_DEVICE_SERVICE"
    }
    export enum TransferOption {
            EXPORT = "EXPORT",
            IMPORT = "IMPORT",
            LOCAL_USE = "LOCAL_USE"
    }
    /**
        * <p>An object that represents the service or services on the Snow Family device that your
        *       transferred data will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and
        *       NFS (Network File System).</p>
        */
    export interface TargetOnDeviceService {
            /**
                * <p>Specifies the name of the service on the Snow Family device that your transferred data
                *       will be exported from or imported into.</p>
                */
            ServiceName?: DeviceServiceName | string;
            /**
                * <p>Specifies whether the data is being imported or exported. You can import or export the
                *       data, or use it locally on the device.</p>
                */
            TransferOption?: TransferOption | string;
    }
    export namespace TargetOnDeviceService {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetOnDeviceService) => any;
    }
    /**
        * <p>Each <code>S3Resource</code> object represents an Amazon S3 bucket that your
        *       transferred data will be exported from or imported into. For export jobs, this object can have
        *       an optional <code>KeyRange</code> value. The length of the range is defined at job creation,
        *       and has either an inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or
        *       both. Ranges are UTF-8 binary sorted.</p>
        */
    export interface S3Resource {
            /**
                * <p>The Amazon Resource Name (ARN) of an Amazon S3 bucket.</p>
                */
            BucketArn?: string;
            /**
                * <p>For export jobs, you can provide an optional <code>KeyRange</code> within a specific
                *       Amazon S3 bucket. The length of the range is defined at job creation, and has either an
                *       inclusive <code>BeginMarker</code>, an inclusive <code>EndMarker</code>, or both. Ranges are
                *       UTF-8 binary sorted.</p>
                */
            KeyRange?: KeyRange;
            /**
                * <p>Specifies the service or services on the Snow Family device that your transferred data
                *       will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File
                *       System).</p>
                */
            TargetOnDeviceServices?: TargetOnDeviceService[];
    }
    export namespace S3Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Resource) => any;
    }
    /**
        * <p>Contains an array of Amazon Web Services resource objects. Each object represents an
        *       Amazon S3 bucket, an Lambda function, or an Amazon Machine Image (AMI) based
        *       on Amazon EC2 that is associated with a particular job.</p>
        */
    export interface JobResource {
            /**
                * <p>An array of <code>S3Resource</code> objects.</p>
                */
            S3Resources?: S3Resource[];
            /**
                * <p>The Python-language Lambda functions for this job.</p>
                */
            LambdaResources?: LambdaResource[];
            /**
                * <p>The Amazon Machine Images (AMIs) associated with this job.</p>
                */
            Ec2AmiResources?: Ec2AmiResource[];
    }
    export namespace JobResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobResource) => any;
    }
    export enum ShippingOption {
            EXPRESS = "EXPRESS",
            NEXT_DAY = "NEXT_DAY",
            SECOND_DAY = "SECOND_DAY",
            STANDARD = "STANDARD"
    }
    export enum SnowballType {
            EDGE = "EDGE",
            EDGE_C = "EDGE_C",
            EDGE_CG = "EDGE_CG",
            EDGE_S = "EDGE_S",
            SNC1_HDD = "SNC1_HDD",
            SNC1_SSD = "SNC1_SSD",
            STANDARD = "STANDARD"
    }
    /**
        * <p>The tax documents required in Amazon Web Services Region in India.</p>
        */
    export interface INDTaxDocuments {
            /**
                * <p>The Goods and Services Tax (GST) documents required in Amazon Web Services Region in
                *       India.</p>
                */
            GSTIN?: string;
    }
    export namespace INDTaxDocuments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: INDTaxDocuments) => any;
    }
    /**
        * <p>The tax documents required in your Amazon Web Services Region.</p>
        */
    export interface TaxDocuments {
            /**
                * <p>The tax documents required in Amazon Web Services Region in India.</p>
                */
            IND?: INDTaxDocuments;
    }
    export namespace TaxDocuments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TaxDocuments) => any;
    }
    export interface CreateClusterRequest {
            /**
                * <p>The type of job for this cluster. Currently, the only job type supported for clusters
                *       is <code>LOCAL_USE</code>.</p>
                *
                *          <p>For more information, see
                *       "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i> or
                *       "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
                */
            JobType: JobType | string | undefined;
            /**
                * <p>The resources associated with the cluster job. These resources include Amazon S3
                *       buckets and optional Lambda functions written in the Python language.
                *     </p>
                */
            Resources: JobResource | undefined;
            /**
                * <p>Specifies the service or services on the Snow Family device that your transferred data
                *       will be exported from or imported into. Amazon Web Services Snow Family device clusters support Amazon S3 and NFS
                *       (Network File System).</p>
                */
            OnDeviceServiceConfiguration?: OnDeviceServiceConfiguration;
            /**
                * <p>An optional description of this specific cluster, for example <code>Environmental Data
                *         Cluster-01</code>.</p>
                */
            Description?: string;
            /**
                * <p>The ID for the address that you want the cluster shipped to.</p>
                */
            AddressId: string | undefined;
            /**
                * <p>The <code>KmsKeyARN</code> value that you want to associate with this cluster.
                *         <code>KmsKeyARN</code> values are created by using the <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateKey.html">CreateKey</a> API action in Key Management Service (KMS). </p>
                */
            KmsKeyARN?: string;
            /**
                * <p>The <code>RoleARN</code> that you want to associate with this cluster.
                *         <code>RoleArn</code> values are created by using the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a> API action in Identity and Access Management (IAM).</p>
                */
            RoleARN: string | undefined;
            /**
                * <p>The type of Snow Family Devices to use for this cluster. </p>
                *          <note>
                *             <p>For cluster jobs, Amazon Web Services Snow Family currently supports only the
                *           <code>EDGE</code> device type.</p>
                *          </note>
                *
                *          <p>For more information, see
                *       "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i> or
                *       "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
                */
            SnowballType: SnowballType | string | undefined;
            /**
                * <p>The shipping speed for each node in this cluster. This speed doesn't dictate how soon
                *       you'll get each Snowball Edge device, rather it represents how quickly each device moves to
                *       its destination while in transit. Regional shipping speeds are as follows: </p>
                *          <ul>
                *             <li>
                *                <p>In Australia, you have access to express shipping. Typically, Snow devices shipped
                *           express are delivered in about a day.</p>
                *             </li>
                *             <li>
                *                <p>In the European Union (EU), you have access to express shipping. Typically, Snow
                *           devices shipped express are delivered in about a day. In addition, most countries in the
                *           EU have access to standard shipping, which typically takes less than a week, one
                *           way.</p>
                *             </li>
                *             <li>
                *                <p>In India, Snow devices are delivered in one to seven days.</p>
                *             </li>
                *             <li>
                *                <p>In the United States of America (US), you have access to one-day shipping and
                *           two-day shipping.</p>
                *             </li>
                *          </ul>
                *
                *          <ul>
                *             <li>
                *                <p>In Australia, you have access to express shipping. Typically, devices shipped
                *           express are delivered in about a day.</p>
                *             </li>
                *             <li>
                *                <p>In the European Union (EU), you have access to express shipping. Typically, Snow
                *           devices shipped express are delivered in about a day. In addition, most countries in the
                *           EU have access to standard shipping, which typically takes less than a week, one
                *           way.</p>
                *             </li>
                *             <li>
                *                <p>In India, Snow devices are delivered in one to seven days.</p>
                *             </li>
                *             <li>
                *                <p>In the US, you have access to one-day shipping and two-day shipping.</p>
                *             </li>
                *          </ul>
                */
            ShippingOption: ShippingOption | string | undefined;
            /**
                * <p>The Amazon Simple Notification Service (Amazon SNS) notification settings for this
                *       cluster.</p>
                */
            Notification?: Notification;
            /**
                * <p>The forwarding address ID for a cluster. This field is not supported in most
                *       regions.</p>
                */
            ForwardingAddressId?: string;
            /**
                * <p>The tax documents required in your Amazon Web Services Region.</p>
                */
            TaxDocuments?: TaxDocuments;
            /**
                * <p>Allows you to securely operate and manage Snow devices in a cluster remotely from outside
                *       of your internal network. When set to <code>INSTALLED_AUTOSTART</code>, remote management will
                *       automatically be available when the device arrives at your location. Otherwise, you need to
                *       use the Snowball Client to manage the device.</p>
                */
            RemoteManagement?: RemoteManagement | string;
    }
    export namespace CreateClusterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClusterRequest) => any;
    }
    export interface CreateClusterResult {
            /**
                * <p>The automatically generated ID for a cluster.</p>
                */
            ClusterId?: string;
    }
    export namespace CreateClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClusterResult) => any;
    }
    /**
        * <p>Your IAM user lacks the necessary Amazon EC2 permissions to perform the attempted
        *       action.</p>
        */
    export class Ec2RequestFailedException extends __BaseException {
            readonly name: "Ec2RequestFailedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<Ec2RequestFailedException, __BaseException>);
    }
    /**
        * <p>Job or cluster creation failed. One or more inputs were invalid. Confirm that the <a>CreateClusterRequest$SnowballType</a> value supports your <a>CreateJobRequest$JobType</a>, and try again.</p>
        */
    export class InvalidInputCombinationException extends __BaseException {
            readonly name: "InvalidInputCombinationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputCombinationException, __BaseException>);
    }
    /**
        * <p>Job creation failed. Currently, clusters support five nodes. If you have fewer than
        *       five nodes for your cluster and you have more nodes to create for this cluster, try again and
        *       create jobs until your cluster has exactly five nodes.</p>
        */
    export class ClusterLimitExceededException extends __BaseException {
            readonly name: "ClusterLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ClusterLimitExceededException, __BaseException>);
    }
    /**
        * <p>Configures the wireless connection on an Snowcone device.</p>
        */
    export interface WirelessConnection {
            /**
                * <p>Enables the Wi-Fi adapter on an Snowcone device.</p>
                */
            IsWifiEnabled?: boolean;
    }
    export namespace WirelessConnection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WirelessConnection) => any;
    }
    /**
        * <p>Specifies the device configuration for an Snowcone job.</p>
        */
    export interface SnowconeDeviceConfiguration {
            /**
                * <p>Configures the wireless connection for the Snowcone device.</p>
                */
            WirelessConnection?: WirelessConnection;
    }
    export namespace SnowconeDeviceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SnowconeDeviceConfiguration) => any;
    }
    /**
        * <p>The container for <code>SnowconeDeviceConfiguration</code>. </p>
        */
    export interface DeviceConfiguration {
            /**
                * <p>Returns information about the device configuration for an Snowcone
                *       job.</p>
                */
            SnowconeDeviceConfiguration?: SnowconeDeviceConfiguration;
    }
    export namespace DeviceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceConfiguration) => any;
    }
    export enum SnowballCapacity {
            NO_PREFERENCE = "NoPreference",
            T100 = "T100",
            T14 = "T14",
            T42 = "T42",
            T50 = "T50",
            T8 = "T8",
            T80 = "T80",
            T98 = "T98"
    }
    export interface CreateJobRequest {
            /**
                * <p>Defines the type of job that you're creating.
                *       </p>
                */
            JobType?: JobType | string;
            /**
                * <p>Defines the Amazon S3 buckets associated with this job.</p>
                *
                *          <p>With <code>IMPORT</code> jobs, you specify the bucket or buckets that your transferred
                *       data will be imported into.</p>
                *
                *          <p>With <code>EXPORT</code> jobs, you specify the bucket or buckets that your transferred
                *       data will be exported from. Optionally, you can also specify a <code>KeyRange</code> value. If
                *       you choose to export a range, you define the length of the range by providing either an
                *       inclusive <code>BeginMarker</code> value, an inclusive <code>EndMarker</code> value, or both.
                *       Ranges are UTF-8 binary sorted.</p>
                */
            Resources?: JobResource;
            /**
                * <p>Specifies the service or services on the Snow Family device that your transferred data
                *       will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File
                *       System) and the Amazon Web Services Storage Gateway service Tape Gateway type.</p>
                */
            OnDeviceServiceConfiguration?: OnDeviceServiceConfiguration;
            /**
                * <p>Defines an optional description of this specific job, for example <code>Important
                *         Photos 2016-08-11</code>.</p>
                */
            Description?: string;
            /**
                * <p>The ID for the address that you want the Snow device shipped to.</p>
                */
            AddressId?: string;
            /**
                * <p>The <code>KmsKeyARN</code> that you want to associate with this job.
                *         <code>KmsKeyARN</code>s are created using the <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateKey.html">CreateKey</a>
                *       Key Management Service (KMS) API action.</p>
                */
            KmsKeyARN?: string;
            /**
                * <p>The <code>RoleARN</code> that you want to associate with this job.
                *       <code>RoleArn</code>s are created using the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>
                *       Identity and Access Management (IAM) API action.</p>
                */
            RoleARN?: string;
            /**
                * <p>If your job is being created in one of the US regions, you have the option of
                *       specifying what size Snow device you'd like for this job. In all other regions, Snowballs come
                *       with 80 TB in storage capacity.</p>
                *
                *          <p>For more information, see
                *       "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i> or
                *       "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
                */
            SnowballCapacityPreference?: SnowballCapacity | string;
            /**
                * <p>The shipping speed for this job. This speed doesn't dictate how soon you'll get the
                *       Snow device, rather it represents how quickly the Snow device moves to its destination while
                *       in transit. Regional shipping speeds are as follows:</p>
                *
                *          <ul>
                *             <li>
                *                <p>In Australia, you have access to express shipping. Typically, Snow devices shipped
                *           express are delivered in about a day.</p>
                *             </li>
                *             <li>
                *                <p>In the European Union (EU), you have access to express shipping. Typically, Snow
                *           devices shipped express are delivered in about a day. In addition, most countries in the
                *           EU have access to standard shipping, which typically takes less than a week, one
                *           way.</p>
                *             </li>
                *             <li>
                *                <p>In India, Snow devices are delivered in one to seven days.</p>
                *             </li>
                *             <li>
                *                <p>In the US, you have access to one-day shipping and two-day shipping.</p>
                *             </li>
                *          </ul>
                */
            ShippingOption?: ShippingOption | string;
            /**
                * <p>Defines the Amazon Simple Notification Service (Amazon SNS) notification settings for
                *       this job.</p>
                */
            Notification?: Notification;
            /**
                * <p>The ID of a cluster. If you're creating a job for a node in a cluster, you need to
                *       provide only this <code>clusterId</code> value. The other job attributes are inherited from
                *       the cluster.</p>
                */
            ClusterId?: string;
            /**
                * <p>The type of Snow Family Devices to use for this job.
                *       </p>
                *          <note>
                *             <p>For cluster jobs, Amazon Web Services Snow Family currently supports only the
                *           <code>EDGE</code> device type.</p>
                *          </note>
                *          <p>The type of Amazon Web Services Snow device to use for this job. Currently, the only
                *       supported device type for cluster jobs is <code>EDGE</code>.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/snowball/latest/developer-guide/device-differences.html">Snowball Edge Device
                *         Options</a> in the Snowball Edge Developer Guide.</p>
                *
                *          <p>For more information, see
                *       "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i> or
                *       "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
                */
            SnowballType?: SnowballType | string;
            /**
                * <p>The forwarding address ID for a job. This field is not supported in most
                *       Regions.</p>
                */
            ForwardingAddressId?: string;
            /**
                * <p>The tax documents required in your Amazon Web Services Region.</p>
                */
            TaxDocuments?: TaxDocuments;
            /**
                * <p>Defines the device configuration for an Snowcone job.</p>
                *
                *          <p>For more information, see
                *       "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i> or
                *       "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
                */
            DeviceConfiguration?: DeviceConfiguration;
            /**
                * <p>Allows you to securely operate and manage Snowcone devices remotely from outside of your
                *       internal network. When set to <code>INSTALLED_AUTOSTART</code>, remote management will
                *       automatically be available when the device arrives at your location. Otherwise, you need to
                *       use the Snowball Client to manage the device.</p>
                */
            RemoteManagement?: RemoteManagement | string;
            /**
                * <p>The ID of the long-term pricing type for the device.</p>
                */
            LongTermPricingId?: string;
    }
    export namespace CreateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobRequest) => any;
    }
    export interface CreateJobResult {
            /**
                * <p>The automatically generated ID for a job, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId?: string;
    }
    export namespace CreateJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobResult) => any;
    }
    export enum LongTermPricingType {
            ONE_YEAR = "OneYear",
            THREE_YEAR = "ThreeYear"
    }
    export interface CreateLongTermPricingRequest {
            /**
                * <p>The type of long-term pricing option you want for the device, either 1-year or 3-year
                *       long-term pricing.</p>
                */
            LongTermPricingType: LongTermPricingType | string | undefined;
            /**
                * <p>Specifies whether the current long-term pricing type for the device should be
                *       renewed.</p>
                */
            IsLongTermPricingAutoRenew?: boolean;
            /**
                * <p>The type of Snow Family Devices to use for the long-term pricing job.</p>
                */
            SnowballType?: SnowballType | string;
    }
    export namespace CreateLongTermPricingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLongTermPricingRequest) => any;
    }
    export interface CreateLongTermPricingResult {
            /**
                * <p>The ID of the long-term pricing type for the device.</p>
                */
            LongTermPricingId?: string;
    }
    export namespace CreateLongTermPricingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLongTermPricingResult) => any;
    }
    /**
        * <p>You get this exception when you call <code>CreateReturnShippingLabel</code> more than once
        *       when other requests are not completed.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>You get this resource when you call <code>CreateReturnShippingLabel</code> more than once when other requests are not completed. .</p>
                */
            ConflictResource?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface CreateReturnShippingLabelRequest {
            /**
                * <p>The ID for a job that you want to create the return shipping label for; for example,
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
            /**
                * <p>The shipping speed for a particular job. This speed doesn't dictate how soon the device
                *       is returned to Amazon Web Services. This speed represents how quickly it moves to its
                *       destination while in transit. Regional shipping speeds are as follows:</p>
                */
            ShippingOption?: ShippingOption | string;
    }
    export namespace CreateReturnShippingLabelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReturnShippingLabelRequest) => any;
    }
    export enum ShippingLabelStatus {
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            SUCCEEDED = "Succeeded",
            TIMED_OUT = "TimedOut"
    }
    export interface CreateReturnShippingLabelResult {
            /**
                * <p>The status information of the task on a Snow device that is being returned to Amazon Web Services.</p>
                */
            Status?: ShippingLabelStatus | string;
    }
    export namespace CreateReturnShippingLabelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReturnShippingLabelResult) => any;
    }
    /**
        * <p>You get this exception if you call <code>CreateReturnShippingLabel</code> and a valid
        *       return shipping label already exists. In this case, use
        *         <code>DescribeReturnShippingLabel</code> to get the URL.</p>
        */
    export class ReturnShippingLabelAlreadyExistsException extends __BaseException {
            readonly name: "ReturnShippingLabelAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReturnShippingLabelAlreadyExistsException, __BaseException>);
    }
    export interface DescribeAddressRequest {
            /**
                * <p>The automatically generated ID for a specific address.</p>
                */
            AddressId: string | undefined;
    }
    export namespace DescribeAddressRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAddressRequest) => any;
    }
    export interface DescribeAddressResult {
            /**
                * <p>The address that you want the Snow device(s) associated with a specific job to be
                *       shipped to.</p>
                */
            Address?: Address;
    }
    export namespace DescribeAddressResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAddressResult) => any;
    }
    export interface DescribeAddressesRequest {
            /**
                * <p>The number of <code>ADDRESS</code> objects to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>HTTP requests are stateless. To identify what object comes "next" in the list of
                *         <code>ADDRESS</code> objects, you have the option of specifying a value for
                *         <code>NextToken</code> as the starting point for your list of returned addresses.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAddressesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAddressesRequest) => any;
    }
    export interface DescribeAddressesResult {
            /**
                * <p>The Snow device shipping addresses that were created for this account.</p>
                */
            Addresses?: Address[];
            /**
                * <p>HTTP requests are stateless. If you use the automatically generated
                *         <code>NextToken</code> value in your next <code>DescribeAddresses</code> call, your list of
                *       returned addresses will start from this point in the array.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAddressesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAddressesResult) => any;
    }
    /**
        * <p>The <code>NextToken</code> string was altered unexpectedly, and the operation has
        *       stopped. Run the operation without changing the <code>NextToken</code> string, and try
        *       again.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface DescribeClusterRequest {
            /**
                * <p>The automatically generated ID for a cluster.</p>
                */
            ClusterId: string | undefined;
    }
    export namespace DescribeClusterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterRequest) => any;
    }
    export enum ClusterState {
            AWAITING_QUORUM = "AwaitingQuorum",
            CANCELLED = "Cancelled",
            COMPLETE = "Complete",
            IN_USE = "InUse",
            PENDING = "Pending"
    }
    /**
        * <p>Contains metadata about a specific cluster.</p>
        */
    export interface ClusterMetadata {
            /**
                * <p>The automatically generated ID for a cluster.</p>
                */
            ClusterId?: string;
            /**
                * <p>The optional description of the cluster.</p>
                */
            Description?: string;
            /**
                * <p>The <code>KmsKeyARN</code> Amazon Resource Name (ARN) associated with this cluster.
                *       This ARN was created using the <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateKey.html">CreateKey</a> API action in Key Management Service (KMS.</p>
                */
            KmsKeyARN?: string;
            /**
                * <p>The role ARN associated with this cluster. This ARN was created using the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>
                *       API action in Identity and Access Management (IAM).</p>
                */
            RoleARN?: string;
            /**
                * <p>The current status of the cluster.</p>
                */
            ClusterState?: ClusterState | string;
            /**
                * <p>The type of job for this cluster. Currently, the only job type supported for clusters
                *       is <code>LOCAL_USE</code>.</p>
                */
            JobType?: JobType | string;
            /**
                * <p>The type of Snowcone device to use for this cluster.
                *       </p>
                *          <note>
                *             <p>For cluster jobs, Amazon Web Services Snow Family currently supports only the
                *           <code>EDGE</code> device type.</p>
                *          </note>
                */
            SnowballType?: SnowballType | string;
            /**
                * <p>The creation date for this cluster.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The arrays of <a>JobResource</a> objects that can include updated <a>S3Resource</a> objects or <a>LambdaResource</a> objects.</p>
                */
            Resources?: JobResource;
            /**
                * <p>The automatically generated ID for a specific address.</p>
                */
            AddressId?: string;
            /**
                * <p>The shipping speed for each node in this cluster. This speed doesn't dictate how soon
                *       you'll get each device, rather it represents how quickly each device moves to its destination
                *       while in transit. Regional shipping speeds are as follows:</p>
                *
                *          <ul>
                *             <li>
                *                <p>In Australia, you have access to express shipping. Typically, devices shipped
                *           express are delivered in about a day.</p>
                *             </li>
                *             <li>
                *                <p>In the European Union (EU), you have access to express shipping. Typically, Snow
                *           devices shipped express are delivered in about a day. In addition, most countries in the
                *           EU have access to standard shipping, which typically takes less than a week, one
                *           way.</p>
                *             </li>
                *             <li>
                *                <p>In India, Snow devices are delivered in one to seven days.</p>
                *             </li>
                *             <li>
                *                <p>In the US, you have access to one-day shipping and two-day shipping.</p>
                *             </li>
                *          </ul>
                */
            ShippingOption?: ShippingOption | string;
            /**
                * <p>The Amazon Simple Notification Service (Amazon SNS) notification settings for this
                *       cluster.</p>
                */
            Notification?: Notification;
            /**
                * <p>The ID of the address that you want a cluster shipped to, after it will be
                *       shipped to its primary address. This field is not supported in most regions.</p>
                */
            ForwardingAddressId?: string;
            /**
                * <p>The tax documents required in your Amazon Web Services Region.</p>
                */
            TaxDocuments?: TaxDocuments;
            /**
                * <p>Represents metadata and configuration settings for services on an Amazon Web Services Snow Family
                *       device.</p>
                */
            OnDeviceServiceConfiguration?: OnDeviceServiceConfiguration;
    }
    export namespace ClusterMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClusterMetadata) => any;
    }
    export interface DescribeClusterResult {
            /**
                * <p>Information about a specific cluster, including shipping information, cluster status,
                *       and other important metadata.</p>
                */
            ClusterMetadata?: ClusterMetadata;
    }
    export namespace DescribeClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterResult) => any;
    }
    export interface DescribeJobRequest {
            /**
                * <p>The automatically generated ID for a job, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobRequest) => any;
    }
    /**
        * <p>Defines the real-time status of a Snow device's data transfer while the device is at
        *         Amazon Web Services. This data is only available while a job has a <code>JobState</code>
        *       value of <code>InProgress</code>, for both import and export jobs.</p>
        */
    export interface DataTransfer {
            /**
                * <p>The number of bytes transferred between a Snow device and Amazon S3.</p>
                */
            BytesTransferred?: number;
            /**
                * <p>The number of objects transferred between a Snow device and Amazon S3.</p>
                */
            ObjectsTransferred?: number;
            /**
                * <p>The total bytes of data for a transfer between a Snow device and Amazon S3. This value
                *       is set to 0 (zero) until all the keys that will be transferred have been listed.</p>
                */
            TotalBytes?: number;
            /**
                * <p>The total number of objects for a transfer between a Snow device and Amazon S3. This
                *       value is set to 0 (zero) until all the keys that will be transferred have been
                *       listed.</p>
                */
            TotalObjects?: number;
    }
    export namespace DataTransfer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataTransfer) => any;
    }
    /**
        * <p>Contains job logs. Whenever a Snow device is used to import data into or export data
        *       out of Amazon S3, you'll have the option of downloading a PDF job report. Job logs are
        *       returned as a part of the response syntax of the <code>DescribeJob</code> action in the
        *         <code>JobMetadata</code> data type. The job logs can be accessed for up to 60 minutes after
        *       this request has been made. To access any of the job logs after 60 minutes have passed, you'll
        *       have to make another call to the <code>DescribeJob</code> action.</p>
        *
        *          <p>For import jobs, the PDF job report becomes available at the end of the import process.
        *       For export jobs, your job report typically becomes available while the Snow device for your
        *       job part is being delivered to you.</p>
        *
        *          <p>The job report provides you insight into the state of your Amazon S3 data transfer. The
        *       report includes details about your job or job part for your records.</p>
        *
        *          <p>For deeper visibility into the status of your transferred objects, you can look at the
        *       two associated logs: a success log and a failure log. The logs are saved in comma-separated
        *       value (CSV) format, and the name of each log includes the ID of the job or job part that the
        *       log describes.</p>
        */
    export interface JobLogs {
            /**
                * <p>A link to an Amazon S3 presigned URL where the job completion report is
                *       located.</p>
                */
            JobCompletionReportURI?: string;
            /**
                * <p>A link to an Amazon S3 presigned URL where the job success log is located.</p>
                */
            JobSuccessLogURI?: string;
            /**
                * <p>A link to an Amazon S3 presigned URL where the job failure log is located.</p>
                */
            JobFailureLogURI?: string;
    }
    export namespace JobLogs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobLogs) => any;
    }
    /**
        * <p>The <code>Status</code> and <code>TrackingNumber</code> information for an inbound or
        *       outbound shipment.</p>
        */
    export interface Shipment {
            /**
                * <p>Status information for a shipment.</p>
                */
            Status?: string;
            /**
                * <p>The tracking number for this job. Using this tracking number with your region's
                *       carrier's website, you can track a Snow device as the carrier transports it.</p>
                *          <p>For India, the carrier is Amazon Logistics. For all other regions, UPS is the
                *       carrier.</p>
                */
            TrackingNumber?: string;
    }
    export namespace Shipment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Shipment) => any;
    }
    /**
        * <p>A job's shipping information, including inbound and outbound tracking numbers and
        *       shipping speed options.</p>
        */
    export interface ShippingDetails {
            /**
                * <p>The shipping speed for a particular job. This speed doesn't dictate how soon you'll get
                *       the Snow device from the job's creation date. This speed represents how quickly it moves to
                *       its destination while in transit. Regional shipping speeds are as follows:</p>
                *
                *          <ul>
                *             <li>
                *                <p>In Australia, you have access to express shipping. Typically, Snow devices shipped
                *           express are delivered in about a day.</p>
                *             </li>
                *             <li>
                *                <p>In the European Union (EU), you have access to express shipping. Typically, Snow
                *           devices shipped express are delivered in about a day. In addition, most countries in the
                *           EU have access to standard shipping, which typically takes less than a week, one
                *           way.</p>
                *             </li>
                *             <li>
                *                <p>In India, Snow devices are delivered in one to seven days.</p>
                *             </li>
                *             <li>
                *                <p>In the United States of America (US), you have access to one-day shipping and
                *           two-day shipping.</p>
                *             </li>
                *          </ul>
                */
            ShippingOption?: ShippingOption | string;
            /**
                * <p>The <code>Status</code> and <code>TrackingNumber</code> values for a Snow device being
                *       returned to Amazon Web Services for a particular job.</p>
                */
            InboundShipment?: Shipment;
            /**
                * <p>The <code>Status</code> and <code>TrackingNumber</code> values for a Snow device being
                *       delivered to the address that you specified for a particular job.</p>
                */
            OutboundShipment?: Shipment;
    }
    export namespace ShippingDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ShippingDetails) => any;
    }
    /**
        * <p>Contains information about a specific job including shipping information, job status,
        *       and other important metadata. This information is returned as a part of the response syntax of
        *       the <code>DescribeJob</code> action.</p>
        */
    export interface JobMetadata {
            /**
                * <p>The automatically generated ID for a job, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId?: string;
            /**
                * <p>The current status of the jobs.</p>
                */
            JobState?: JobState | string;
            /**
                * <p>The type of job.</p>
                */
            JobType?: JobType | string;
            /**
                * <p>The type of device used with this job.</p>
                */
            SnowballType?: SnowballType | string;
            /**
                * <p>The creation date for this job.</p>
                */
            CreationDate?: Date;
            /**
                * <p>An array of <code>S3Resource</code> objects. Each <code>S3Resource</code> object
                *       represents an Amazon S3 bucket that your transferred data will be exported from or imported
                *       into.</p>
                */
            Resources?: JobResource;
            /**
                * <p>The description of the job, provided at job creation.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the Key Management Service (KMS) key
                *       associated with this job. This ARN was created using the <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_CreateKey.html">CreateKey</a> API action in KMS.</p>
                */
            KmsKeyARN?: string;
            /**
                * <p>The role ARN associated with this job. This ARN was created using the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>
                *       API action in Identity and Access Management.</p>
                */
            RoleARN?: string;
            /**
                * <p>The ID for the address that you want the Snow device shipped to.</p>
                */
            AddressId?: string;
            /**
                * <p>A job's shipping information, including inbound and outbound tracking numbers and
                *       shipping speed options.</p>
                */
            ShippingDetails?: ShippingDetails;
            /**
                * <p>The Snow device capacity preference for this job, specified at job creation. In US
                *       regions, you can choose between 50 TB and 80 TB Snowballs. All other regions use 80 TB
                *       capacity Snowballs.</p>
                *
                *          <p>For more information, see
                *       "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i> or
                *       "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
                */
            SnowballCapacityPreference?: SnowballCapacity | string;
            /**
                * <p>The Amazon Simple Notification Service (Amazon SNS) notification settings associated
                *       with a specific job. The <code>Notification</code> object is returned as a part of the
                *       response syntax of the <code>DescribeJob</code> action in the <code>JobMetadata</code> data
                *       type.</p>
                */
            Notification?: Notification;
            /**
                * <p>A value that defines the real-time status of a Snow device's data transfer while the
                *       device is at Amazon Web Services. This data is only available while a job has a
                *         <code>JobState</code> value of <code>InProgress</code>, for both import and export
                *       jobs.</p>
                */
            DataTransferProgress?: DataTransfer;
            /**
                * <p>Links to Amazon S3 presigned URLs for the job report and logs. For import jobs, the PDF
                *       job report becomes available at the end of the import process. For export jobs, your job
                *       report typically becomes available while the Snow device for your job part is being delivered
                *       to you.</p>
                */
            JobLogInfo?: JobLogs;
            /**
                * <p>The 39-character ID for the cluster, for example
                *         <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            ClusterId?: string;
            /**
                * <p>The ID of the address that you want a job shipped to, after it will be
                *       shipped to its primary address. This field is not supported in most regions.</p>
                */
            ForwardingAddressId?: string;
            /**
                * <p>The metadata associated with the tax documents required in your Amazon Web Services Region.</p>
                */
            TaxDocuments?: TaxDocuments;
            /**
                * <p>The container for <code>SnowconeDeviceConfiguration</code>. </p>
                */
            DeviceConfiguration?: DeviceConfiguration;
            /**
                * <p>Allows you to securely operate and manage Snowcone devices remotely from outside of your
                *       internal network. When set to <code>INSTALLED_AUTOSTART</code>, remote management will
                *       automatically be available when the device arrives at your location. Otherwise, you need to
                *       use the Snowball Client to manage the device.</p>
                */
            RemoteManagement?: RemoteManagement | string;
            /**
                * <p>The ID of the long-term pricing type for the device.</p>
                */
            LongTermPricingId?: string;
            /**
                * <p>Represents metadata and configuration settings for services on an Amazon Web Services Snow Family
                *       device.</p>
                */
            OnDeviceServiceConfiguration?: OnDeviceServiceConfiguration;
    }
    export namespace JobMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobMetadata) => any;
    }
    export interface DescribeJobResult {
            /**
                * <p>Information about a specific job, including shipping information, job status, and other
                *       important metadata.</p>
                */
            JobMetadata?: JobMetadata;
            /**
                * <p>Information about a specific job part (in the case of an export job), including
                *       shipping information, job status, and other important metadata.</p>
                */
            SubJobMetadata?: JobMetadata[];
    }
    export namespace DescribeJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobResult) => any;
    }
    export interface DescribeReturnShippingLabelRequest {
            /**
                * <p>The automatically generated ID for a job, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeReturnShippingLabelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReturnShippingLabelRequest) => any;
    }
    export interface DescribeReturnShippingLabelResult {
            /**
                * <p>The status information of the task on a Snow device that is being returned to Amazon Web Services.</p>
                */
            Status?: ShippingLabelStatus | string;
            /**
                * <p>The expiration date of the current return shipping label.</p>
                */
            ExpirationDate?: Date;
            /**
                * <p>The pre-signed Amazon S3 URI used to download the return shipping label.</p>
                */
            ReturnShippingLabelURI?: string;
    }
    export namespace DescribeReturnShippingLabelResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReturnShippingLabelResult) => any;
    }
    export interface GetJobManifestRequest {
            /**
                * <p>The ID for a job that you want to get the manifest file for, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
    }
    export namespace GetJobManifestRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobManifestRequest) => any;
    }
    export interface GetJobManifestResult {
            /**
                * <p>The Amazon S3 presigned URL for the manifest file associated with the specified
                *         <code>JobId</code> value.</p>
                */
            ManifestURI?: string;
    }
    export namespace GetJobManifestResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobManifestResult) => any;
    }
    export interface GetJobUnlockCodeRequest {
            /**
                * <p>The ID for the job that you want to get the <code>UnlockCode</code> value for, for
                *       example <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
    }
    export namespace GetJobUnlockCodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobUnlockCodeRequest) => any;
    }
    export interface GetJobUnlockCodeResult {
            /**
                * <p>The <code>UnlockCode</code> value for the specified job. The <code>UnlockCode</code>
                *       value can be accessed for up to 360 days after the job has been created.</p>
                */
            UnlockCode?: string;
    }
    export namespace GetJobUnlockCodeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetJobUnlockCodeResult) => any;
    }
    export interface GetSnowballUsageRequest {
    }
    export namespace GetSnowballUsageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSnowballUsageRequest) => any;
    }
    export interface GetSnowballUsageResult {
            /**
                * <p>The service limit for number of Snow devices this account can have at once. The default
                *       service limit is 1 (one).</p>
                */
            SnowballLimit?: number;
            /**
                * <p>The number of Snow devices that this account is currently using.</p>
                */
            SnowballsInUse?: number;
    }
    export namespace GetSnowballUsageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSnowballUsageResult) => any;
    }
    export interface GetSoftwareUpdatesRequest {
            /**
                * <p>The ID for a job that you want to get the software update file for, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
    }
    export namespace GetSoftwareUpdatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSoftwareUpdatesRequest) => any;
    }
    export interface GetSoftwareUpdatesResult {
            /**
                * <p>The Amazon S3 presigned URL for the update file associated with the specified
                *         <code>JobId</code> value. The software update will be available for 2 days after this
                *       request is made. To access an update after the 2 days have passed, you'll have to make another
                *       call to <code>GetSoftwareUpdates</code>.</p>
                */
            UpdatesURI?: string;
    }
    export namespace GetSoftwareUpdatesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSoftwareUpdatesResult) => any;
    }
    export interface ListClusterJobsRequest {
            /**
                * <p>The 39-character ID for the cluster that you want to list, for example
                *         <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            ClusterId: string | undefined;
            /**
                * <p>The number of <code>JobListEntry</code> objects to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>HTTP requests are stateless. To identify what object comes "next" in the list of
                *         <code>JobListEntry</code> objects, you have the option of specifying <code>NextToken</code>
                *       as the starting point for your returned list.</p>
                */
            NextToken?: string;
    }
    export namespace ListClusterJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClusterJobsRequest) => any;
    }
    /**
        * <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value
        *       that indicates whether the job is a job part, in the case of an export job.</p>
        */
    export interface JobListEntry {
            /**
                * <p>The automatically generated ID for a job, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId?: string;
            /**
                * <p>The current state of this job.</p>
                */
            JobState?: JobState | string;
            /**
                * <p>A value that indicates that this job is a main job. A main job represents a successful
                *       request to create an export job. Main jobs aren't associated with any Snowballs. Instead, each
                *       main job will have at least one job part, and each job part is associated with a Snowball. It
                *       might take some time before the job parts associated with a particular main job are listed,
                *       because they are created after the main job is created.</p>
                */
            IsMaster?: boolean;
            /**
                * <p>The type of job.</p>
                */
            JobType?: JobType | string;
            /**
                * <p>The type of device used with this job.</p>
                */
            SnowballType?: SnowballType | string;
            /**
                * <p>The creation date for this job.</p>
                */
            CreationDate?: Date;
            /**
                * <p>The optional description of this specific job, for example <code>Important Photos
                *         2016-08-11</code>.</p>
                */
            Description?: string;
    }
    export namespace JobListEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobListEntry) => any;
    }
    export interface ListClusterJobsResult {
            /**
                * <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value
                *       that indicates whether the job is a job part, in the case of export jobs. </p>
                */
            JobListEntries?: JobListEntry[];
            /**
                * <p>HTTP requests are stateless. If you use the automatically generated
                *         <code>NextToken</code> value in your next <code>ListClusterJobsResult</code> call, your list
                *       of returned jobs will start from this point in the array.</p>
                */
            NextToken?: string;
    }
    export namespace ListClusterJobsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClusterJobsResult) => any;
    }
    export interface ListClustersRequest {
            /**
                * <p>The number of <code>ClusterListEntry</code> objects to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>HTTP requests are stateless. To identify what object comes "next" in the list of
                *         <code>ClusterListEntry</code> objects, you have the option of specifying
                *         <code>NextToken</code> as the starting point for your returned list.</p>
                */
            NextToken?: string;
    }
    export namespace ListClustersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClustersRequest) => any;
    }
    /**
        * <p>Contains a cluster's state, a cluster's ID, and other important information.</p>
        */
    export interface ClusterListEntry {
            /**
                * <p>The 39-character ID for the cluster that you want to list, for example
                *         <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            ClusterId?: string;
            /**
                * <p>The current state of this cluster. For information about the state of a specific node,
                *       see <a>JobListEntry$JobState</a>.</p>
                */
            ClusterState?: ClusterState | string;
            /**
                * <p>The creation date for this cluster.</p>
                */
            CreationDate?: Date;
            /**
                * <p>Defines an optional description of the cluster, for example <code>Environmental Data
                *         Cluster-01</code>.</p>
                */
            Description?: string;
    }
    export namespace ClusterListEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClusterListEntry) => any;
    }
    export interface ListClustersResult {
            /**
                * <p>Each <code>ClusterListEntry</code> object contains a cluster's state, a cluster's ID,
                *       and other important status information.</p>
                */
            ClusterListEntries?: ClusterListEntry[];
            /**
                * <p>HTTP requests are stateless. If you use the automatically generated
                *         <code>NextToken</code> value in your next <code>ClusterListEntry</code> call, your list of
                *       returned clusters will start from this point in the array.</p>
                */
            NextToken?: string;
    }
    export namespace ListClustersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClustersResult) => any;
    }
    export interface ListCompatibleImagesRequest {
            /**
                * <p>The maximum number of results for the list of compatible images. Currently, a Snowball
                *       Edge device can store 10 AMIs.</p>
                */
            MaxResults?: number;
            /**
                * <p>HTTP requests are stateless. To identify what object comes "next" in the list of
                *       compatible images, you can specify a value for <code>NextToken</code> as the starting point
                *       for your list of returned images.</p>
                */
            NextToken?: string;
    }
    export namespace ListCompatibleImagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCompatibleImagesRequest) => any;
    }
    /**
        * <p>A JSON-formatted object that describes a compatible Amazon Machine Image (AMI),
        *       including the ID and name for a Snow device AMI. This AMI is compatible with the device's
        *       physical hardware requirements, and it should be able to be run in an SBE1 instance on the
        *       device.</p>
        */
    export interface CompatibleImage {
            /**
                * <p>The unique identifier for an individual Snow device AMI.</p>
                */
            AmiId?: string;
            /**
                * <p>The optional name of a compatible image.</p>
                */
            Name?: string;
    }
    export namespace CompatibleImage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompatibleImage) => any;
    }
    export interface ListCompatibleImagesResult {
            /**
                * <p>A JSON-formatted object that describes a compatible AMI, including the ID and name for
                *       a Snow device AMI.</p>
                */
            CompatibleImages?: CompatibleImage[];
            /**
                * <p>Because HTTP requests are stateless, this is the starting point for your next list of
                *       returned images.</p>
                */
            NextToken?: string;
    }
    export namespace ListCompatibleImagesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCompatibleImagesResult) => any;
    }
    export interface ListJobsRequest {
            /**
                * <p>The number of <code>JobListEntry</code> objects to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>HTTP requests are stateless. To identify what object comes "next" in the list of
                *         <code>JobListEntry</code> objects, you have the option of specifying <code>NextToken</code>
                *       as the starting point for your returned list.</p>
                */
            NextToken?: string;
    }
    export namespace ListJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsRequest) => any;
    }
    export interface ListJobsResult {
            /**
                * <p>Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value
                *       that indicates whether the job is a job part, in the case of export jobs. </p>
                */
            JobListEntries?: JobListEntry[];
            /**
                * <p>HTTP requests are stateless. If you use this automatically generated
                *         <code>NextToken</code> value in your next <code>ListJobs</code> call, your returned
                *         <code>JobListEntry</code> objects will start from this point in the array.</p>
                */
            NextToken?: string;
    }
    export namespace ListJobsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsResult) => any;
    }
    export interface ListLongTermPricingRequest {
            /**
                * <p>The maximum number of <code>ListLongTermPricing</code> objects to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>Because HTTP requests are stateless, this is the starting point for your next list of
                *         <code>ListLongTermPricing</code> to return.</p>
                */
            NextToken?: string;
    }
    export namespace ListLongTermPricingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLongTermPricingRequest) => any;
    }
    /**
        * <p>Each <code>LongTermPricingListEntry</code> object contains information about a long-term
        *       pricing type.</p>
        */
    export interface LongTermPricingListEntry {
            /**
                * <p>The ID of the long-term pricing type for the device.</p>
                */
            LongTermPricingId?: string;
            /**
                * <p>The end date the long-term pricing contract.</p>
                */
            LongTermPricingEndDate?: Date;
            /**
                * <p>The start date of the long-term pricing contract.</p>
                */
            LongTermPricingStartDate?: Date;
            /**
                * <p>The type of long-term pricing that was selected for the device.</p>
                */
            LongTermPricingType?: LongTermPricingType | string;
            /**
                * <p>The current active jobs on the device the long-term pricing type.</p>
                */
            CurrentActiveJob?: string;
            /**
                * <p>A new device that replaces a device that is ordered with long-term pricing.</p>
                */
            ReplacementJob?: string;
            /**
                * <p>If set to <code>true</code>, specifies that the current long-term pricing type for the
                *       device should be automatically renewed before the long-term pricing contract expires.</p>
                */
            IsLongTermPricingAutoRenew?: boolean;
            /**
                * <p>The status of the long-term pricing type.</p>
                */
            LongTermPricingStatus?: string;
            /**
                * <p>The type of Snow Family Devices associated with this long-term pricing job.</p>
                */
            SnowballType?: SnowballType | string;
            /**
                * <p>The IDs of the jobs that are associated with a long-term pricing type.</p>
                */
            JobIds?: string[];
    }
    export namespace LongTermPricingListEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LongTermPricingListEntry) => any;
    }
    export interface ListLongTermPricingResult {
            /**
                * <p>Each <code>LongTermPricingEntry</code> object contains a status, ID, and other information
                *       about the <code>LongTermPricing</code> type. </p>
                */
            LongTermPricingEntries?: LongTermPricingListEntry[];
            /**
                * <p>Because HTTP requests are stateless, this is the starting point for your next list of
                *       returned <code>ListLongTermPricing</code> list.</p>
                */
            NextToken?: string;
    }
    export namespace ListLongTermPricingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLongTermPricingResult) => any;
    }
    export interface UpdateClusterRequest {
            /**
                * <p>The cluster ID of the cluster that you want to update, for example
                *         <code>CID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            ClusterId: string | undefined;
            /**
                * <p>The new role Amazon Resource Name (ARN) that you want to associate with this cluster.
                *       To create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a> API action in Identity and Access Management (IAM).</p>
                */
            RoleARN?: string;
            /**
                * <p>The updated description of this cluster.</p>
                */
            Description?: string;
            /**
                * <p>The updated arrays of <a>JobResource</a> objects that can include updated
                *         <a>S3Resource</a> objects or <a>LambdaResource</a> objects.</p>
                */
            Resources?: JobResource;
            /**
                * <p>Specifies the service or services on the Snow Family device that your transferred data
                *       will be exported from or imported into. Amazon Web Services Snow Family device clusters support Amazon S3 and NFS
                *       (Network File System).</p>
                */
            OnDeviceServiceConfiguration?: OnDeviceServiceConfiguration;
            /**
                * <p>The ID of the updated <a>Address</a> object.</p>
                */
            AddressId?: string;
            /**
                * <p>The updated shipping option value of this cluster's <a>ShippingDetails</a>
                *       object.</p>
                */
            ShippingOption?: ShippingOption | string;
            /**
                * <p>The new or updated <a>Notification</a> object.</p>
                */
            Notification?: Notification;
            /**
                * <p>The updated ID for the forwarding address for a cluster. This field is not
                *       supported in most regions.</p>
                */
            ForwardingAddressId?: string;
    }
    export namespace UpdateClusterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClusterRequest) => any;
    }
    export interface UpdateClusterResult {
    }
    export namespace UpdateClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClusterResult) => any;
    }
    export interface UpdateJobRequest {
            /**
                * <p>The job ID of the job that you want to update, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
            /**
                * <p>The new role Amazon Resource Name (ARN) that you want to associate with this job. To
                *       create a role ARN, use the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html">CreateRole</a>Identity and Access Management
                *       (IAM) API action.</p>
                */
            RoleARN?: string;
            /**
                * <p>The new or updated <a>Notification</a> object.</p>
                */
            Notification?: Notification;
            /**
                * <p>The updated <code>JobResource</code> object, or the updated <a>JobResource</a> object. </p>
                */
            Resources?: JobResource;
            /**
                * <p>Specifies the service or services on the Snow Family device that your transferred data
                *       will be exported from or imported into. Amazon Web Services Snow Family supports Amazon S3 and NFS (Network File
                *       System) and the Amazon Web Services Storage Gateway service Tape Gateway type.</p>
                */
            OnDeviceServiceConfiguration?: OnDeviceServiceConfiguration;
            /**
                * <p>The ID of the updated <a>Address</a> object.</p>
                */
            AddressId?: string;
            /**
                * <p>The updated shipping option value of this job's <a>ShippingDetails</a>
                *       object.</p>
                */
            ShippingOption?: ShippingOption | string;
            /**
                * <p>The updated description of this job's <a>JobMetadata</a> object.</p>
                */
            Description?: string;
            /**
                * <p>The updated <code>SnowballCapacityPreference</code> of this job's <a>JobMetadata</a> object. The 50 TB Snowballs are only available in the US
                *       regions.</p>
                *
                *          <p>For more information, see
                *       "https://docs.aws.amazon.com/snowball/latest/snowcone-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i> or
                *       "https://docs.aws.amazon.com/snowball/latest/developer-guide/snow-device-types.html" (Snow
                *       Family Devices and Capacity) in the <i>Snowcone User Guide</i>.</p>
                */
            SnowballCapacityPreference?: SnowballCapacity | string;
            /**
                * <p>The updated ID for the forwarding address for a job. This field is not
                *       supported in most regions.</p>
                */
            ForwardingAddressId?: string;
    }
    export namespace UpdateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateJobRequest) => any;
    }
    export interface UpdateJobResult {
    }
    export namespace UpdateJobResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateJobResult) => any;
    }
    export enum ShipmentState {
            RECEIVED = "RECEIVED",
            RETURNED = "RETURNED"
    }
    export interface UpdateJobShipmentStateRequest {
            /**
                * <p>The job ID of the job whose shipment date you want to update, for example
                *         <code>JID123e4567-e89b-12d3-a456-426655440000</code>.</p>
                */
            JobId: string | undefined;
            /**
                * <p>The state of a device when it is being shipped. </p>
                *          <p>Set to <code>RECEIVED</code> when the device arrives at your location.</p>
                *          <p>Set to <code>RETURNED</code> when you have returned the device to Amazon Web Services.</p>
                */
            ShipmentState: ShipmentState | string | undefined;
    }
    export namespace UpdateJobShipmentStateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateJobShipmentStateRequest) => any;
    }
    export interface UpdateJobShipmentStateResult {
    }
    export namespace UpdateJobShipmentStateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateJobShipmentStateResult) => any;
    }
    export interface UpdateLongTermPricingRequest {
            /**
                * <p>The ID of the long-term pricing type for the device.</p>
                */
            LongTermPricingId: string | undefined;
            /**
                * <p>Specifies that a device that is ordered with long-term pricing should be replaced with a
                *       new device.</p>
                */
            ReplacementJob?: string;
            /**
                * <p>If set to <code>true</code>, specifies that the current long-term pricing type for the
                *       device should be automatically renewed before the long-term pricing contract expires.</p>
                */
            IsLongTermPricingAutoRenew?: boolean;
    }
    export namespace UpdateLongTermPricingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLongTermPricingRequest) => any;
    }
    export interface UpdateLongTermPricingResult {
    }
    export namespace UpdateLongTermPricingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLongTermPricingResult) => any;
    }
}

declare module '@aws-sdk/client-snowball/node_modules/@aws-sdk/client-snowball/dist-types/models/SnowballServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Snowball service.
        */
    export class SnowballServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

