// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-fms' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateAdminAccountCommandInput, AssociateAdminAccountCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/AssociateAdminAccountCommand";
    import { AssociateThirdPartyFirewallCommandInput, AssociateThirdPartyFirewallCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/AssociateThirdPartyFirewallCommand";
    import { DeleteAppsListCommandInput, DeleteAppsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteAppsListCommand";
    import { DeleteNotificationChannelCommandInput, DeleteNotificationChannelCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteNotificationChannelCommand";
    import { DeletePolicyCommandInput, DeletePolicyCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeletePolicyCommand";
    import { DeleteProtocolsListCommandInput, DeleteProtocolsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteProtocolsListCommand";
    import { DisassociateAdminAccountCommandInput, DisassociateAdminAccountCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DisassociateAdminAccountCommand";
    import { DisassociateThirdPartyFirewallCommandInput, DisassociateThirdPartyFirewallCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DisassociateThirdPartyFirewallCommand";
    import { GetAdminAccountCommandInput, GetAdminAccountCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetAdminAccountCommand";
    import { GetAppsListCommandInput, GetAppsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetAppsListCommand";
    import { GetComplianceDetailCommandInput, GetComplianceDetailCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetComplianceDetailCommand";
    import { GetNotificationChannelCommandInput, GetNotificationChannelCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetNotificationChannelCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetPolicyCommand";
    import { GetProtectionStatusCommandInput, GetProtectionStatusCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetProtectionStatusCommand";
    import { GetProtocolsListCommandInput, GetProtocolsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetProtocolsListCommand";
    import { GetThirdPartyFirewallAssociationStatusCommandInput, GetThirdPartyFirewallAssociationStatusCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetThirdPartyFirewallAssociationStatusCommand";
    import { GetViolationDetailsCommandInput, GetViolationDetailsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetViolationDetailsCommand";
    import { ListAppsListsCommandInput, ListAppsListsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListAppsListsCommand";
    import { ListComplianceStatusCommandInput, ListComplianceStatusCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListComplianceStatusCommand";
    import { ListMemberAccountsCommandInput, ListMemberAccountsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListMemberAccountsCommand";
    import { ListPoliciesCommandInput, ListPoliciesCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListPoliciesCommand";
    import { ListProtocolsListsCommandInput, ListProtocolsListsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListProtocolsListsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListTagsForResourceCommand";
    import { ListThirdPartyFirewallFirewallPoliciesCommandInput, ListThirdPartyFirewallFirewallPoliciesCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListThirdPartyFirewallFirewallPoliciesCommand";
    import { PutAppsListCommandInput, PutAppsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutAppsListCommand";
    import { PutNotificationChannelCommandInput, PutNotificationChannelCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutNotificationChannelCommand";
    import { PutPolicyCommandInput, PutPolicyCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutPolicyCommand";
    import { PutProtocolsListCommandInput, PutProtocolsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutProtocolsListCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/UntagResourceCommand";
    import { FMSClient } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    /**
        * <p>This is the <i>Firewall Manager API Reference</i>. This guide is for
        *       developers who need detailed information about the Firewall Manager API actions, data
        *       types, and errors. For detailed information about Firewall Manager features, see the
        *         <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-chapter.html">Firewall Manager Developer Guide</a>.</p>
        *          <p>Some API actions require explicit resource permissions. For information, see the developer guide topic
        *         <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-api-permissions-ref.html">Firewall Manager required permissions for API actions</a>.
        * </p>
        */
    export class FMS extends FMSClient {
            /**
                * <p>Sets the Firewall Manager administrator account. The account must be
                *       a member of the organization in Organizations whose resources you want to protect.
                *           Firewall Manager sets the permissions that allow the account to administer your Firewall Manager policies.</p>
                *          <p>The account that you associate with Firewall Manager is called the Firewall Manager administrator account. </p>
                */
            associateAdminAccount(args: AssociateAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<AssociateAdminAccountCommandOutput>;
            associateAdminAccount(args: AssociateAdminAccountCommandInput, cb: (err: any, data?: AssociateAdminAccountCommandOutput) => void): void;
            associateAdminAccount(args: AssociateAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateAdminAccountCommandOutput) => void): void;
            /**
                * <p>Sets the Firewall Manager policy administrator as a tenant administrator of a third-party firewall service. A tenant is an instance of the third-party firewall service that's associated with your Amazon Web Services customer account.</p>
                */
            associateThirdPartyFirewall(args: AssociateThirdPartyFirewallCommandInput, options?: __HttpHandlerOptions): Promise<AssociateThirdPartyFirewallCommandOutput>;
            associateThirdPartyFirewall(args: AssociateThirdPartyFirewallCommandInput, cb: (err: any, data?: AssociateThirdPartyFirewallCommandOutput) => void): void;
            associateThirdPartyFirewall(args: AssociateThirdPartyFirewallCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateThirdPartyFirewallCommandOutput) => void): void;
            /**
                * <p>Permanently deletes an Firewall Manager applications list.</p>
                */
            deleteAppsList(args: DeleteAppsListCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppsListCommandOutput>;
            deleteAppsList(args: DeleteAppsListCommandInput, cb: (err: any, data?: DeleteAppsListCommandOutput) => void): void;
            deleteAppsList(args: DeleteAppsListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppsListCommandOutput) => void): void;
            /**
                * <p>Deletes an Firewall Manager association with the IAM role and the Amazon Simple
                *       Notification Service (SNS) topic that is used to record Firewall Manager SNS logs.</p>
                */
            deleteNotificationChannel(args: DeleteNotificationChannelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNotificationChannelCommandOutput>;
            deleteNotificationChannel(args: DeleteNotificationChannelCommandInput, cb: (err: any, data?: DeleteNotificationChannelCommandOutput) => void): void;
            deleteNotificationChannel(args: DeleteNotificationChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNotificationChannelCommandOutput) => void): void;
            /**
                * <p>Permanently deletes an Firewall Manager policy. </p>
                */
            deletePolicy(args: DeletePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeletePolicyCommandOutput>;
            deletePolicy(args: DeletePolicyCommandInput, cb: (err: any, data?: DeletePolicyCommandOutput) => void): void;
            deletePolicy(args: DeletePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePolicyCommandOutput) => void): void;
            /**
                * <p>Permanently deletes an Firewall Manager protocols list.</p>
                */
            deleteProtocolsList(args: DeleteProtocolsListCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProtocolsListCommandOutput>;
            deleteProtocolsList(args: DeleteProtocolsListCommandInput, cb: (err: any, data?: DeleteProtocolsListCommandOutput) => void): void;
            deleteProtocolsList(args: DeleteProtocolsListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProtocolsListCommandOutput) => void): void;
            /**
                * <p>Disassociates the account that has been set as the Firewall Manager administrator
                *       account. To set a different account as the administrator account, you must submit an
                *         <code>AssociateAdminAccount</code> request.</p>
                */
            disassociateAdminAccount(args: DisassociateAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateAdminAccountCommandOutput>;
            disassociateAdminAccount(args: DisassociateAdminAccountCommandInput, cb: (err: any, data?: DisassociateAdminAccountCommandOutput) => void): void;
            disassociateAdminAccount(args: DisassociateAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateAdminAccountCommandOutput) => void): void;
            /**
                * <p>Disassociates a Firewall Manager policy administrator from a third-party firewall tenant. When you call <code>DisassociateThirdPartyFirewall</code>, the third-party firewall vendor deletes all of the firewalls that are associated with the account.</p>
                */
            disassociateThirdPartyFirewall(args: DisassociateThirdPartyFirewallCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateThirdPartyFirewallCommandOutput>;
            disassociateThirdPartyFirewall(args: DisassociateThirdPartyFirewallCommandInput, cb: (err: any, data?: DisassociateThirdPartyFirewallCommandOutput) => void): void;
            disassociateThirdPartyFirewall(args: DisassociateThirdPartyFirewallCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateThirdPartyFirewallCommandOutput) => void): void;
            /**
                * <p>Returns the Organizations account that is associated with Firewall Manager
                *       as the Firewall Manager administrator.</p>
                */
            getAdminAccount(args: GetAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetAdminAccountCommandOutput>;
            getAdminAccount(args: GetAdminAccountCommandInput, cb: (err: any, data?: GetAdminAccountCommandOutput) => void): void;
            getAdminAccount(args: GetAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAdminAccountCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified Firewall Manager applications list.</p>
                */
            getAppsList(args: GetAppsListCommandInput, options?: __HttpHandlerOptions): Promise<GetAppsListCommandOutput>;
            getAppsList(args: GetAppsListCommandInput, cb: (err: any, data?: GetAppsListCommandOutput) => void): void;
            getAppsList(args: GetAppsListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppsListCommandOutput) => void): void;
            /**
                * <p>Returns detailed compliance information about the specified member account. Details
                *       include resources that are in and out of compliance with the specified policy. </p>
                *          <ul>
                *             <li>
                *               <p>Resources are
                *               considered noncompliant for WAF and Shield Advanced policies if the specified policy has
                *               not been applied to them.</p>
                *             </li>
                *             <li>
                *               <p>Resources are considered noncompliant for security group policies if
                *               they are in scope of the policy, they violate one or more of the policy rules, and remediation
                *               is disabled or not possible.</p>
                *             </li>
                *             <li>
                *               <p>Resources are considered noncompliant for Network Firewall policies
                *                 if a firewall is missing in the VPC, if the firewall endpoint isn't set up in an expected Availability Zone and subnet,
                *                 if a subnet created by the Firewall Manager doesn't have the expected route table,
                *                 and for modifications to a firewall policy that violate the Firewall Manager policy's rules.</p>
                *             </li>
                *             <li>
                *               <p>Resources are considered noncompliant for DNS Firewall policies
                *               if a DNS Firewall rule group is missing from the rule group associations for the VPC. </p>
                *             </li>
                *          </ul>
                */
            getComplianceDetail(args: GetComplianceDetailCommandInput, options?: __HttpHandlerOptions): Promise<GetComplianceDetailCommandOutput>;
            getComplianceDetail(args: GetComplianceDetailCommandInput, cb: (err: any, data?: GetComplianceDetailCommandOutput) => void): void;
            getComplianceDetail(args: GetComplianceDetailCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComplianceDetailCommandOutput) => void): void;
            /**
                * <p>Information
                *       about the Amazon Simple Notification Service (SNS) topic that is used to
                *       record Firewall Manager SNS logs.</p>
                */
            getNotificationChannel(args: GetNotificationChannelCommandInput, options?: __HttpHandlerOptions): Promise<GetNotificationChannelCommandOutput>;
            getNotificationChannel(args: GetNotificationChannelCommandInput, cb: (err: any, data?: GetNotificationChannelCommandOutput) => void): void;
            getNotificationChannel(args: GetNotificationChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetNotificationChannelCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified Firewall Manager policy.</p>
                */
            getPolicy(args: GetPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetPolicyCommandOutput>;
            getPolicy(args: GetPolicyCommandInput, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            getPolicy(args: GetPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            /**
                * <p>If you created a Shield Advanced policy, returns policy-level attack summary information
                *          in the event of a potential DDoS attack. Other policy types are currently unsupported.</p>
                */
            getProtectionStatus(args: GetProtectionStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetProtectionStatusCommandOutput>;
            getProtectionStatus(args: GetProtectionStatusCommandInput, cb: (err: any, data?: GetProtectionStatusCommandOutput) => void): void;
            getProtectionStatus(args: GetProtectionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetProtectionStatusCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified Firewall Manager protocols list.</p>
                */
            getProtocolsList(args: GetProtocolsListCommandInput, options?: __HttpHandlerOptions): Promise<GetProtocolsListCommandOutput>;
            getProtocolsList(args: GetProtocolsListCommandInput, cb: (err: any, data?: GetProtocolsListCommandOutput) => void): void;
            getProtocolsList(args: GetProtocolsListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetProtocolsListCommandOutput) => void): void;
            /**
                * <p>The onboarding status of a Firewall Manager admin account to third-party firewall vendor tenant.</p>
                */
            getThirdPartyFirewallAssociationStatus(args: GetThirdPartyFirewallAssociationStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetThirdPartyFirewallAssociationStatusCommandOutput>;
            getThirdPartyFirewallAssociationStatus(args: GetThirdPartyFirewallAssociationStatusCommandInput, cb: (err: any, data?: GetThirdPartyFirewallAssociationStatusCommandOutput) => void): void;
            getThirdPartyFirewallAssociationStatus(args: GetThirdPartyFirewallAssociationStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetThirdPartyFirewallAssociationStatusCommandOutput) => void): void;
            /**
                * <p>Retrieves violations for a resource based on the specified Firewall Manager policy and Amazon Web Services account.</p>
                */
            getViolationDetails(args: GetViolationDetailsCommandInput, options?: __HttpHandlerOptions): Promise<GetViolationDetailsCommandOutput>;
            getViolationDetails(args: GetViolationDetailsCommandInput, cb: (err: any, data?: GetViolationDetailsCommandOutput) => void): void;
            getViolationDetails(args: GetViolationDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetViolationDetailsCommandOutput) => void): void;
            /**
                * <p>Returns an array of <code>AppsListDataSummary</code> objects.</p>
                */
            listAppsLists(args: ListAppsListsCommandInput, options?: __HttpHandlerOptions): Promise<ListAppsListsCommandOutput>;
            listAppsLists(args: ListAppsListsCommandInput, cb: (err: any, data?: ListAppsListsCommandOutput) => void): void;
            listAppsLists(args: ListAppsListsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAppsListsCommandOutput) => void): void;
            /**
                * <p>Returns an array of <code>PolicyComplianceStatus</code> objects. Use
                *         <code>PolicyComplianceStatus</code> to get a summary of which member accounts are protected
                *       by the specified policy. </p>
                */
            listComplianceStatus(args: ListComplianceStatusCommandInput, options?: __HttpHandlerOptions): Promise<ListComplianceStatusCommandOutput>;
            listComplianceStatus(args: ListComplianceStatusCommandInput, cb: (err: any, data?: ListComplianceStatusCommandOutput) => void): void;
            listComplianceStatus(args: ListComplianceStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListComplianceStatusCommandOutput) => void): void;
            /**
                * <p>Returns a <code>MemberAccounts</code> object that lists the member accounts in the
                *       administrator's Amazon Web Services organization.</p>
                *          <p>The <code>ListMemberAccounts</code> must be submitted by the account that is set as the
                *       Firewall Manager administrator.</p>
                */
            listMemberAccounts(args: ListMemberAccountsCommandInput, options?: __HttpHandlerOptions): Promise<ListMemberAccountsCommandOutput>;
            listMemberAccounts(args: ListMemberAccountsCommandInput, cb: (err: any, data?: ListMemberAccountsCommandOutput) => void): void;
            listMemberAccounts(args: ListMemberAccountsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMemberAccountsCommandOutput) => void): void;
            /**
                * <p>Returns an array of <code>PolicySummary</code> objects.</p>
                */
            listPolicies(args: ListPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListPoliciesCommandOutput>;
            listPolicies(args: ListPoliciesCommandInput, cb: (err: any, data?: ListPoliciesCommandOutput) => void): void;
            listPolicies(args: ListPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPoliciesCommandOutput) => void): void;
            /**
                * <p>Returns an array of <code>ProtocolsListDataSummary</code> objects.</p>
                */
            listProtocolsLists(args: ListProtocolsListsCommandInput, options?: __HttpHandlerOptions): Promise<ListProtocolsListsCommandOutput>;
            listProtocolsLists(args: ListProtocolsListsCommandInput, cb: (err: any, data?: ListProtocolsListsCommandOutput) => void): void;
            listProtocolsLists(args: ListProtocolsListsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProtocolsListsCommandOutput) => void): void;
            /**
                * <p>Retrieves the list of tags for the specified Amazon Web Services resource.   </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of all of the third-party firewall policies that are associated with the third-party firewall administrator's account.</p>
                */
            listThirdPartyFirewallFirewallPolicies(args: ListThirdPartyFirewallFirewallPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListThirdPartyFirewallFirewallPoliciesCommandOutput>;
            listThirdPartyFirewallFirewallPolicies(args: ListThirdPartyFirewallFirewallPoliciesCommandInput, cb: (err: any, data?: ListThirdPartyFirewallFirewallPoliciesCommandOutput) => void): void;
            listThirdPartyFirewallFirewallPolicies(args: ListThirdPartyFirewallFirewallPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListThirdPartyFirewallFirewallPoliciesCommandOutput) => void): void;
            /**
                * <p>Creates an Firewall Manager applications list.</p>
                */
            putAppsList(args: PutAppsListCommandInput, options?: __HttpHandlerOptions): Promise<PutAppsListCommandOutput>;
            putAppsList(args: PutAppsListCommandInput, cb: (err: any, data?: PutAppsListCommandOutput) => void): void;
            putAppsList(args: PutAppsListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAppsListCommandOutput) => void): void;
            /**
                * <p>Designates the IAM role and Amazon Simple Notification Service (SNS) topic that
                *       Firewall Manager uses to record SNS logs.</p>
                *          <p>To perform this action outside of the console, you must configure the SNS topic to allow the Firewall Manager
                *       role <code>AWSServiceRoleForFMS</code> to publish SNS logs. For more information, see
                *       <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-api-permissions-ref.html">Firewall Manager required permissions for API actions</a> in the <i>Firewall Manager Developer Guide</i>.</p>
                */
            putNotificationChannel(args: PutNotificationChannelCommandInput, options?: __HttpHandlerOptions): Promise<PutNotificationChannelCommandOutput>;
            putNotificationChannel(args: PutNotificationChannelCommandInput, cb: (err: any, data?: PutNotificationChannelCommandOutput) => void): void;
            putNotificationChannel(args: PutNotificationChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutNotificationChannelCommandOutput) => void): void;
            /**
                * <p>Creates an Firewall Manager policy.</p>
                *          <p>Firewall Manager provides the following types of policies: </p>
                *          <ul>
                *             <li>
                *                <p>An WAF policy (type WAFV2), which defines rule groups to run first in the
                *               corresponding WAF web ACL and rule groups to run last in the web ACL.</p>
                *             </li>
                *             <li>
                *                <p>An WAF Classic policy (type WAF), which defines a rule group. </p>
                *             </li>
                *             <li>
                *                <p>A Shield Advanced policy, which applies Shield Advanced protection to specified
                *           accounts and resources.</p>
                *             </li>
                *             <li>
                *                <p>A security group policy, which manages VPC security groups across your Amazon Web Services
                *           organization. </p>
                *             </li>
                *             <li>
                *                <p>An Network Firewall policy, which provides firewall rules to filter network traffic in specified
                *           Amazon VPCs.</p>
                *             </li>
                *             <li>
                *                <p>A DNS Firewall policy, which provides Route 53 Resolver DNS Firewall rules to filter DNS queries for
                *             specified VPCs.</p>
                *             </li>
                *          </ul>
                *          <p>Each policy is specific to one of the types. If you want to enforce more than one
                *       policy type across accounts, create multiple policies. You can create multiple
                *       policies for each type.</p>
                *          <p>You must be subscribed to Shield Advanced to create a Shield Advanced policy. For more
                *         information about subscribing to Shield Advanced, see
                *     <a href="https://docs.aws.amazon.com/waf/latest/DDOSAPIReference/API_CreateSubscription.html">CreateSubscription</a>.</p>
                */
            putPolicy(args: PutPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutPolicyCommandOutput>;
            putPolicy(args: PutPolicyCommandInput, cb: (err: any, data?: PutPolicyCommandOutput) => void): void;
            putPolicy(args: PutPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPolicyCommandOutput) => void): void;
            /**
                * <p>Creates an Firewall Manager protocols list.</p>
                */
            putProtocolsList(args: PutProtocolsListCommandInput, options?: __HttpHandlerOptions): Promise<PutProtocolsListCommandOutput>;
            putProtocolsList(args: PutProtocolsListCommandInput, cb: (err: any, data?: PutProtocolsListCommandOutput) => void): void;
            putProtocolsList(args: PutProtocolsListCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutProtocolsListCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an Amazon Web Services resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from an Amazon Web Services resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/AssociateAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { AssociateAdminAccountRequest } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface AssociateAdminAccountCommandInput extends AssociateAdminAccountRequest {
    }
    export interface AssociateAdminAccountCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the Firewall Manager administrator account. The account must be
        *       a member of the organization in Organizations whose resources you want to protect.
        *           Firewall Manager sets the permissions that allow the account to administer your Firewall Manager policies.</p>
        *          <p>The account that you associate with Firewall Manager is called the Firewall Manager administrator account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, AssociateAdminAccountCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, AssociateAdminAccountCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new AssociateAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateAdminAccountCommandInput} for command's `input` shape.
        * @see {@link AssociateAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class AssociateAdminAccountCommand extends $Command<AssociateAdminAccountCommandInput, AssociateAdminAccountCommandOutput, FMSClientResolvedConfig> {
            readonly input: AssociateAdminAccountCommandInput;
            constructor(input: AssociateAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateAdminAccountCommandInput, AssociateAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/AssociateThirdPartyFirewallCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { AssociateThirdPartyFirewallRequest, AssociateThirdPartyFirewallResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface AssociateThirdPartyFirewallCommandInput extends AssociateThirdPartyFirewallRequest {
    }
    export interface AssociateThirdPartyFirewallCommandOutput extends AssociateThirdPartyFirewallResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the Firewall Manager policy administrator as a tenant administrator of a third-party firewall service. A tenant is an instance of the third-party firewall service that's associated with your Amazon Web Services customer account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, AssociateThirdPartyFirewallCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, AssociateThirdPartyFirewallCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new AssociateThirdPartyFirewallCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateThirdPartyFirewallCommandInput} for command's `input` shape.
        * @see {@link AssociateThirdPartyFirewallCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class AssociateThirdPartyFirewallCommand extends $Command<AssociateThirdPartyFirewallCommandInput, AssociateThirdPartyFirewallCommandOutput, FMSClientResolvedConfig> {
            readonly input: AssociateThirdPartyFirewallCommandInput;
            constructor(input: AssociateThirdPartyFirewallCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateThirdPartyFirewallCommandInput, AssociateThirdPartyFirewallCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteAppsListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { DeleteAppsListRequest } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface DeleteAppsListCommandInput extends DeleteAppsListRequest {
    }
    export interface DeleteAppsListCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Permanently deletes an Firewall Manager applications list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, DeleteAppsListCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, DeleteAppsListCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new DeleteAppsListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppsListCommandInput} for command's `input` shape.
        * @see {@link DeleteAppsListCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class DeleteAppsListCommand extends $Command<DeleteAppsListCommandInput, DeleteAppsListCommandOutput, FMSClientResolvedConfig> {
            readonly input: DeleteAppsListCommandInput;
            constructor(input: DeleteAppsListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppsListCommandInput, DeleteAppsListCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteNotificationChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { DeleteNotificationChannelRequest } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface DeleteNotificationChannelCommandInput extends DeleteNotificationChannelRequest {
    }
    export interface DeleteNotificationChannelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an Firewall Manager association with the IAM role and the Amazon Simple
        *       Notification Service (SNS) topic that is used to record Firewall Manager SNS logs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, DeleteNotificationChannelCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, DeleteNotificationChannelCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new DeleteNotificationChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNotificationChannelCommandInput} for command's `input` shape.
        * @see {@link DeleteNotificationChannelCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class DeleteNotificationChannelCommand extends $Command<DeleteNotificationChannelCommandInput, DeleteNotificationChannelCommandOutput, FMSClientResolvedConfig> {
            readonly input: DeleteNotificationChannelCommandInput;
            constructor(input: DeleteNotificationChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNotificationChannelCommandInput, DeleteNotificationChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeletePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { DeletePolicyRequest } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface DeletePolicyCommandInput extends DeletePolicyRequest {
    }
    export interface DeletePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Permanently deletes an Firewall Manager policy. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, DeletePolicyCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, DeletePolicyCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new DeletePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePolicyCommandInput} for command's `input` shape.
        * @see {@link DeletePolicyCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class DeletePolicyCommand extends $Command<DeletePolicyCommandInput, DeletePolicyCommandOutput, FMSClientResolvedConfig> {
            readonly input: DeletePolicyCommandInput;
            constructor(input: DeletePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePolicyCommandInput, DeletePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteProtocolsListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { DeleteProtocolsListRequest } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface DeleteProtocolsListCommandInput extends DeleteProtocolsListRequest {
    }
    export interface DeleteProtocolsListCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Permanently deletes an Firewall Manager protocols list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, DeleteProtocolsListCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, DeleteProtocolsListCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new DeleteProtocolsListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProtocolsListCommandInput} for command's `input` shape.
        * @see {@link DeleteProtocolsListCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class DeleteProtocolsListCommand extends $Command<DeleteProtocolsListCommandInput, DeleteProtocolsListCommandOutput, FMSClientResolvedConfig> {
            readonly input: DeleteProtocolsListCommandInput;
            constructor(input: DeleteProtocolsListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProtocolsListCommandInput, DeleteProtocolsListCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DisassociateAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { DisassociateAdminAccountRequest } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface DisassociateAdminAccountCommandInput extends DisassociateAdminAccountRequest {
    }
    export interface DisassociateAdminAccountCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Disassociates the account that has been set as the Firewall Manager administrator
        *       account. To set a different account as the administrator account, you must submit an
        *         <code>AssociateAdminAccount</code> request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, DisassociateAdminAccountCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, DisassociateAdminAccountCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new DisassociateAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateAdminAccountCommandInput} for command's `input` shape.
        * @see {@link DisassociateAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class DisassociateAdminAccountCommand extends $Command<DisassociateAdminAccountCommandInput, DisassociateAdminAccountCommandOutput, FMSClientResolvedConfig> {
            readonly input: DisassociateAdminAccountCommandInput;
            constructor(input: DisassociateAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateAdminAccountCommandInput, DisassociateAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DisassociateThirdPartyFirewallCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { DisassociateThirdPartyFirewallRequest, DisassociateThirdPartyFirewallResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface DisassociateThirdPartyFirewallCommandInput extends DisassociateThirdPartyFirewallRequest {
    }
    export interface DisassociateThirdPartyFirewallCommandOutput extends DisassociateThirdPartyFirewallResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates a Firewall Manager policy administrator from a third-party firewall tenant. When you call <code>DisassociateThirdPartyFirewall</code>, the third-party firewall vendor deletes all of the firewalls that are associated with the account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, DisassociateThirdPartyFirewallCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, DisassociateThirdPartyFirewallCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new DisassociateThirdPartyFirewallCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateThirdPartyFirewallCommandInput} for command's `input` shape.
        * @see {@link DisassociateThirdPartyFirewallCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class DisassociateThirdPartyFirewallCommand extends $Command<DisassociateThirdPartyFirewallCommandInput, DisassociateThirdPartyFirewallCommandOutput, FMSClientResolvedConfig> {
            readonly input: DisassociateThirdPartyFirewallCommandInput;
            constructor(input: DisassociateThirdPartyFirewallCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateThirdPartyFirewallCommandInput, DisassociateThirdPartyFirewallCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetAdminAccountRequest, GetAdminAccountResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetAdminAccountCommandInput extends GetAdminAccountRequest {
    }
    export interface GetAdminAccountCommandOutput extends GetAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the Organizations account that is associated with Firewall Manager
        *       as the Firewall Manager administrator.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetAdminAccountCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetAdminAccountCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAdminAccountCommandInput} for command's `input` shape.
        * @see {@link GetAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetAdminAccountCommand extends $Command<GetAdminAccountCommandInput, GetAdminAccountCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetAdminAccountCommandInput;
            constructor(input: GetAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAdminAccountCommandInput, GetAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetAppsListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetAppsListRequest, GetAppsListResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetAppsListCommandInput extends GetAppsListRequest {
    }
    export interface GetAppsListCommandOutput extends GetAppsListResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified Firewall Manager applications list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetAppsListCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetAppsListCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetAppsListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppsListCommandInput} for command's `input` shape.
        * @see {@link GetAppsListCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetAppsListCommand extends $Command<GetAppsListCommandInput, GetAppsListCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetAppsListCommandInput;
            constructor(input: GetAppsListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppsListCommandInput, GetAppsListCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetComplianceDetailCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetComplianceDetailRequest, GetComplianceDetailResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetComplianceDetailCommandInput extends GetComplianceDetailRequest {
    }
    export interface GetComplianceDetailCommandOutput extends GetComplianceDetailResponse, __MetadataBearer {
    }
    /**
        * <p>Returns detailed compliance information about the specified member account. Details
        *       include resources that are in and out of compliance with the specified policy. </p>
        *          <ul>
        *             <li>
        *               <p>Resources are
        *               considered noncompliant for WAF and Shield Advanced policies if the specified policy has
        *               not been applied to them.</p>
        *             </li>
        *             <li>
        *               <p>Resources are considered noncompliant for security group policies if
        *               they are in scope of the policy, they violate one or more of the policy rules, and remediation
        *               is disabled or not possible.</p>
        *             </li>
        *             <li>
        *               <p>Resources are considered noncompliant for Network Firewall policies
        *                 if a firewall is missing in the VPC, if the firewall endpoint isn't set up in an expected Availability Zone and subnet,
        *                 if a subnet created by the Firewall Manager doesn't have the expected route table,
        *                 and for modifications to a firewall policy that violate the Firewall Manager policy's rules.</p>
        *             </li>
        *             <li>
        *               <p>Resources are considered noncompliant for DNS Firewall policies
        *               if a DNS Firewall rule group is missing from the rule group associations for the VPC. </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetComplianceDetailCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetComplianceDetailCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetComplianceDetailCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComplianceDetailCommandInput} for command's `input` shape.
        * @see {@link GetComplianceDetailCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetComplianceDetailCommand extends $Command<GetComplianceDetailCommandInput, GetComplianceDetailCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetComplianceDetailCommandInput;
            constructor(input: GetComplianceDetailCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComplianceDetailCommandInput, GetComplianceDetailCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetNotificationChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetNotificationChannelRequest, GetNotificationChannelResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetNotificationChannelCommandInput extends GetNotificationChannelRequest {
    }
    export interface GetNotificationChannelCommandOutput extends GetNotificationChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Information
        *       about the Amazon Simple Notification Service (SNS) topic that is used to
        *       record Firewall Manager SNS logs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetNotificationChannelCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetNotificationChannelCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetNotificationChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetNotificationChannelCommandInput} for command's `input` shape.
        * @see {@link GetNotificationChannelCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetNotificationChannelCommand extends $Command<GetNotificationChannelCommandInput, GetNotificationChannelCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetNotificationChannelCommandInput;
            constructor(input: GetNotificationChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetNotificationChannelCommandInput, GetNotificationChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetPolicyRequest, GetPolicyResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetPolicyCommandInput extends GetPolicyRequest {
    }
    export interface GetPolicyCommandOutput extends GetPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified Firewall Manager policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetPolicyCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetPolicyCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPolicyCommandInput} for command's `input` shape.
        * @see {@link GetPolicyCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetPolicyCommand extends $Command<GetPolicyCommandInput, GetPolicyCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetPolicyCommandInput;
            constructor(input: GetPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPolicyCommandInput, GetPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetProtectionStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetProtectionStatusRequest, GetProtectionStatusResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetProtectionStatusCommandInput extends GetProtectionStatusRequest {
    }
    export interface GetProtectionStatusCommandOutput extends GetProtectionStatusResponse, __MetadataBearer {
    }
    /**
        * <p>If you created a Shield Advanced policy, returns policy-level attack summary information
        *          in the event of a potential DDoS attack. Other policy types are currently unsupported.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetProtectionStatusCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetProtectionStatusCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetProtectionStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetProtectionStatusCommandInput} for command's `input` shape.
        * @see {@link GetProtectionStatusCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetProtectionStatusCommand extends $Command<GetProtectionStatusCommandInput, GetProtectionStatusCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetProtectionStatusCommandInput;
            constructor(input: GetProtectionStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetProtectionStatusCommandInput, GetProtectionStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetProtocolsListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetProtocolsListRequest, GetProtocolsListResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetProtocolsListCommandInput extends GetProtocolsListRequest {
    }
    export interface GetProtocolsListCommandOutput extends GetProtocolsListResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified Firewall Manager protocols list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetProtocolsListCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetProtocolsListCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetProtocolsListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetProtocolsListCommandInput} for command's `input` shape.
        * @see {@link GetProtocolsListCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetProtocolsListCommand extends $Command<GetProtocolsListCommandInput, GetProtocolsListCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetProtocolsListCommandInput;
            constructor(input: GetProtocolsListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetProtocolsListCommandInput, GetProtocolsListCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetThirdPartyFirewallAssociationStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetThirdPartyFirewallAssociationStatusRequest, GetThirdPartyFirewallAssociationStatusResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetThirdPartyFirewallAssociationStatusCommandInput extends GetThirdPartyFirewallAssociationStatusRequest {
    }
    export interface GetThirdPartyFirewallAssociationStatusCommandOutput extends GetThirdPartyFirewallAssociationStatusResponse, __MetadataBearer {
    }
    /**
        * <p>The onboarding status of a Firewall Manager admin account to third-party firewall vendor tenant.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetThirdPartyFirewallAssociationStatusCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetThirdPartyFirewallAssociationStatusCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetThirdPartyFirewallAssociationStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetThirdPartyFirewallAssociationStatusCommandInput} for command's `input` shape.
        * @see {@link GetThirdPartyFirewallAssociationStatusCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetThirdPartyFirewallAssociationStatusCommand extends $Command<GetThirdPartyFirewallAssociationStatusCommandInput, GetThirdPartyFirewallAssociationStatusCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetThirdPartyFirewallAssociationStatusCommandInput;
            constructor(input: GetThirdPartyFirewallAssociationStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetThirdPartyFirewallAssociationStatusCommandInput, GetThirdPartyFirewallAssociationStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetViolationDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { GetViolationDetailsRequest, GetViolationDetailsResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface GetViolationDetailsCommandInput extends GetViolationDetailsRequest {
    }
    export interface GetViolationDetailsCommandOutput extends GetViolationDetailsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves violations for a resource based on the specified Firewall Manager policy and Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, GetViolationDetailsCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, GetViolationDetailsCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new GetViolationDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetViolationDetailsCommandInput} for command's `input` shape.
        * @see {@link GetViolationDetailsCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class GetViolationDetailsCommand extends $Command<GetViolationDetailsCommandInput, GetViolationDetailsCommandOutput, FMSClientResolvedConfig> {
            readonly input: GetViolationDetailsCommandInput;
            constructor(input: GetViolationDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetViolationDetailsCommandInput, GetViolationDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListAppsListsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { ListAppsListsRequest, ListAppsListsResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface ListAppsListsCommandInput extends ListAppsListsRequest {
    }
    export interface ListAppsListsCommandOutput extends ListAppsListsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of <code>AppsListDataSummary</code> objects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, ListAppsListsCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, ListAppsListsCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new ListAppsListsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAppsListsCommandInput} for command's `input` shape.
        * @see {@link ListAppsListsCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class ListAppsListsCommand extends $Command<ListAppsListsCommandInput, ListAppsListsCommandOutput, FMSClientResolvedConfig> {
            readonly input: ListAppsListsCommandInput;
            constructor(input: ListAppsListsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAppsListsCommandInput, ListAppsListsCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListComplianceStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { ListComplianceStatusRequest, ListComplianceStatusResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface ListComplianceStatusCommandInput extends ListComplianceStatusRequest {
    }
    export interface ListComplianceStatusCommandOutput extends ListComplianceStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of <code>PolicyComplianceStatus</code> objects. Use
        *         <code>PolicyComplianceStatus</code> to get a summary of which member accounts are protected
        *       by the specified policy. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, ListComplianceStatusCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, ListComplianceStatusCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new ListComplianceStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListComplianceStatusCommandInput} for command's `input` shape.
        * @see {@link ListComplianceStatusCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class ListComplianceStatusCommand extends $Command<ListComplianceStatusCommandInput, ListComplianceStatusCommandOutput, FMSClientResolvedConfig> {
            readonly input: ListComplianceStatusCommandInput;
            constructor(input: ListComplianceStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListComplianceStatusCommandInput, ListComplianceStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListMemberAccountsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { ListMemberAccountsRequest, ListMemberAccountsResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface ListMemberAccountsCommandInput extends ListMemberAccountsRequest {
    }
    export interface ListMemberAccountsCommandOutput extends ListMemberAccountsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a <code>MemberAccounts</code> object that lists the member accounts in the
        *       administrator's Amazon Web Services organization.</p>
        *          <p>The <code>ListMemberAccounts</code> must be submitted by the account that is set as the
        *       Firewall Manager administrator.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, ListMemberAccountsCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, ListMemberAccountsCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new ListMemberAccountsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMemberAccountsCommandInput} for command's `input` shape.
        * @see {@link ListMemberAccountsCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class ListMemberAccountsCommand extends $Command<ListMemberAccountsCommandInput, ListMemberAccountsCommandOutput, FMSClientResolvedConfig> {
            readonly input: ListMemberAccountsCommandInput;
            constructor(input: ListMemberAccountsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMemberAccountsCommandInput, ListMemberAccountsCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { ListPoliciesRequest, ListPoliciesResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface ListPoliciesCommandInput extends ListPoliciesRequest {
    }
    export interface ListPoliciesCommandOutput extends ListPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of <code>PolicySummary</code> objects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, ListPoliciesCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, ListPoliciesCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new ListPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListPoliciesCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class ListPoliciesCommand extends $Command<ListPoliciesCommandInput, ListPoliciesCommandOutput, FMSClientResolvedConfig> {
            readonly input: ListPoliciesCommandInput;
            constructor(input: ListPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPoliciesCommandInput, ListPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListProtocolsListsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { ListProtocolsListsRequest, ListProtocolsListsResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface ListProtocolsListsCommandInput extends ListProtocolsListsRequest {
    }
    export interface ListProtocolsListsCommandOutput extends ListProtocolsListsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of <code>ProtocolsListDataSummary</code> objects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, ListProtocolsListsCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, ListProtocolsListsCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new ListProtocolsListsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProtocolsListsCommandInput} for command's `input` shape.
        * @see {@link ListProtocolsListsCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class ListProtocolsListsCommand extends $Command<ListProtocolsListsCommandInput, ListProtocolsListsCommandOutput, FMSClientResolvedConfig> {
            readonly input: ListProtocolsListsCommandInput;
            constructor(input: ListProtocolsListsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProtocolsListsCommandInput, ListProtocolsListsCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the list of tags for the specified Amazon Web Services resource.   </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, ListTagsForResourceCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, ListTagsForResourceCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, FMSClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListThirdPartyFirewallFirewallPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { ListThirdPartyFirewallFirewallPoliciesRequest, ListThirdPartyFirewallFirewallPoliciesResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface ListThirdPartyFirewallFirewallPoliciesCommandInput extends ListThirdPartyFirewallFirewallPoliciesRequest {
    }
    export interface ListThirdPartyFirewallFirewallPoliciesCommandOutput extends ListThirdPartyFirewallFirewallPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of all of the third-party firewall policies that are associated with the third-party firewall administrator's account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, ListThirdPartyFirewallFirewallPoliciesCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, ListThirdPartyFirewallFirewallPoliciesCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new ListThirdPartyFirewallFirewallPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListThirdPartyFirewallFirewallPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListThirdPartyFirewallFirewallPoliciesCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class ListThirdPartyFirewallFirewallPoliciesCommand extends $Command<ListThirdPartyFirewallFirewallPoliciesCommandInput, ListThirdPartyFirewallFirewallPoliciesCommandOutput, FMSClientResolvedConfig> {
            readonly input: ListThirdPartyFirewallFirewallPoliciesCommandInput;
            constructor(input: ListThirdPartyFirewallFirewallPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListThirdPartyFirewallFirewallPoliciesCommandInput, ListThirdPartyFirewallFirewallPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutAppsListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { PutAppsListRequest, PutAppsListResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface PutAppsListCommandInput extends PutAppsListRequest {
    }
    export interface PutAppsListCommandOutput extends PutAppsListResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Firewall Manager applications list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, PutAppsListCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, PutAppsListCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new PutAppsListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAppsListCommandInput} for command's `input` shape.
        * @see {@link PutAppsListCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class PutAppsListCommand extends $Command<PutAppsListCommandInput, PutAppsListCommandOutput, FMSClientResolvedConfig> {
            readonly input: PutAppsListCommandInput;
            constructor(input: PutAppsListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAppsListCommandInput, PutAppsListCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutNotificationChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { PutNotificationChannelRequest } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface PutNotificationChannelCommandInput extends PutNotificationChannelRequest {
    }
    export interface PutNotificationChannelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Designates the IAM role and Amazon Simple Notification Service (SNS) topic that
        *       Firewall Manager uses to record SNS logs.</p>
        *          <p>To perform this action outside of the console, you must configure the SNS topic to allow the Firewall Manager
        *       role <code>AWSServiceRoleForFMS</code> to publish SNS logs. For more information, see
        *       <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-api-permissions-ref.html">Firewall Manager required permissions for API actions</a> in the <i>Firewall Manager Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, PutNotificationChannelCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, PutNotificationChannelCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new PutNotificationChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutNotificationChannelCommandInput} for command's `input` shape.
        * @see {@link PutNotificationChannelCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class PutNotificationChannelCommand extends $Command<PutNotificationChannelCommandInput, PutNotificationChannelCommandOutput, FMSClientResolvedConfig> {
            readonly input: PutNotificationChannelCommandInput;
            constructor(input: PutNotificationChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutNotificationChannelCommandInput, PutNotificationChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { PutPolicyRequest, PutPolicyResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface PutPolicyCommandInput extends PutPolicyRequest {
    }
    export interface PutPolicyCommandOutput extends PutPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Firewall Manager policy.</p>
        *          <p>Firewall Manager provides the following types of policies: </p>
        *          <ul>
        *             <li>
        *                <p>An WAF policy (type WAFV2), which defines rule groups to run first in the
        *               corresponding WAF web ACL and rule groups to run last in the web ACL.</p>
        *             </li>
        *             <li>
        *                <p>An WAF Classic policy (type WAF), which defines a rule group. </p>
        *             </li>
        *             <li>
        *                <p>A Shield Advanced policy, which applies Shield Advanced protection to specified
        *           accounts and resources.</p>
        *             </li>
        *             <li>
        *                <p>A security group policy, which manages VPC security groups across your Amazon Web Services
        *           organization. </p>
        *             </li>
        *             <li>
        *                <p>An Network Firewall policy, which provides firewall rules to filter network traffic in specified
        *           Amazon VPCs.</p>
        *             </li>
        *             <li>
        *                <p>A DNS Firewall policy, which provides Route 53 Resolver DNS Firewall rules to filter DNS queries for
        *             specified VPCs.</p>
        *             </li>
        *          </ul>
        *          <p>Each policy is specific to one of the types. If you want to enforce more than one
        *       policy type across accounts, create multiple policies. You can create multiple
        *       policies for each type.</p>
        *          <p>You must be subscribed to Shield Advanced to create a Shield Advanced policy. For more
        *         information about subscribing to Shield Advanced, see
        *     <a href="https://docs.aws.amazon.com/waf/latest/DDOSAPIReference/API_CreateSubscription.html">CreateSubscription</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, PutPolicyCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, PutPolicyCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new PutPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPolicyCommandInput} for command's `input` shape.
        * @see {@link PutPolicyCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class PutPolicyCommand extends $Command<PutPolicyCommandInput, PutPolicyCommandOutput, FMSClientResolvedConfig> {
            readonly input: PutPolicyCommandInput;
            constructor(input: PutPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPolicyCommandInput, PutPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutProtocolsListCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { PutProtocolsListRequest, PutProtocolsListResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface PutProtocolsListCommandInput extends PutProtocolsListRequest {
    }
    export interface PutProtocolsListCommandOutput extends PutProtocolsListResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Firewall Manager protocols list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, PutProtocolsListCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, PutProtocolsListCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new PutProtocolsListCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutProtocolsListCommandInput} for command's `input` shape.
        * @see {@link PutProtocolsListCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class PutProtocolsListCommand extends $Command<PutProtocolsListCommandInput, PutProtocolsListCommandOutput, FMSClientResolvedConfig> {
            readonly input: PutProtocolsListCommandInput;
            constructor(input: PutProtocolsListCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutProtocolsListCommandInput, PutProtocolsListCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an Amazon Web Services resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, TagResourceCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, TagResourceCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, FMSClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FMSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from an Amazon Web Services resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FMSClient, UntagResourceCommand } from "@aws-sdk/client-fms"; // ES Modules import
        * // const { FMSClient, UntagResourceCommand } = require("@aws-sdk/client-fms"); // CommonJS import
        * const client = new FMSClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link FMSClientResolvedConfig | config} for FMSClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, FMSClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FMSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/FMSClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateAdminAccountCommandInput, AssociateAdminAccountCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/AssociateAdminAccountCommand";
    import { AssociateThirdPartyFirewallCommandInput, AssociateThirdPartyFirewallCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/AssociateThirdPartyFirewallCommand";
    import { DeleteAppsListCommandInput, DeleteAppsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteAppsListCommand";
    import { DeleteNotificationChannelCommandInput, DeleteNotificationChannelCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteNotificationChannelCommand";
    import { DeletePolicyCommandInput, DeletePolicyCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeletePolicyCommand";
    import { DeleteProtocolsListCommandInput, DeleteProtocolsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DeleteProtocolsListCommand";
    import { DisassociateAdminAccountCommandInput, DisassociateAdminAccountCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DisassociateAdminAccountCommand";
    import { DisassociateThirdPartyFirewallCommandInput, DisassociateThirdPartyFirewallCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/DisassociateThirdPartyFirewallCommand";
    import { GetAdminAccountCommandInput, GetAdminAccountCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetAdminAccountCommand";
    import { GetAppsListCommandInput, GetAppsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetAppsListCommand";
    import { GetComplianceDetailCommandInput, GetComplianceDetailCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetComplianceDetailCommand";
    import { GetNotificationChannelCommandInput, GetNotificationChannelCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetNotificationChannelCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetPolicyCommand";
    import { GetProtectionStatusCommandInput, GetProtectionStatusCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetProtectionStatusCommand";
    import { GetProtocolsListCommandInput, GetProtocolsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetProtocolsListCommand";
    import { GetThirdPartyFirewallAssociationStatusCommandInput, GetThirdPartyFirewallAssociationStatusCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetThirdPartyFirewallAssociationStatusCommand";
    import { GetViolationDetailsCommandInput, GetViolationDetailsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/GetViolationDetailsCommand";
    import { ListAppsListsCommandInput, ListAppsListsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListAppsListsCommand";
    import { ListComplianceStatusCommandInput, ListComplianceStatusCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListComplianceStatusCommand";
    import { ListMemberAccountsCommandInput, ListMemberAccountsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListMemberAccountsCommand";
    import { ListPoliciesCommandInput, ListPoliciesCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListPoliciesCommand";
    import { ListProtocolsListsCommandInput, ListProtocolsListsCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListProtocolsListsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListTagsForResourceCommand";
    import { ListThirdPartyFirewallFirewallPoliciesCommandInput, ListThirdPartyFirewallFirewallPoliciesCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/ListThirdPartyFirewallFirewallPoliciesCommand";
    import { PutAppsListCommandInput, PutAppsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutAppsListCommand";
    import { PutNotificationChannelCommandInput, PutNotificationChannelCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutNotificationChannelCommand";
    import { PutPolicyCommandInput, PutPolicyCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutPolicyCommand";
    import { PutProtocolsListCommandInput, PutProtocolsListCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/PutProtocolsListCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/commands/UntagResourceCommand";
    export type ServiceInputTypes = AssociateAdminAccountCommandInput | AssociateThirdPartyFirewallCommandInput | DeleteAppsListCommandInput | DeleteNotificationChannelCommandInput | DeletePolicyCommandInput | DeleteProtocolsListCommandInput | DisassociateAdminAccountCommandInput | DisassociateThirdPartyFirewallCommandInput | GetAdminAccountCommandInput | GetAppsListCommandInput | GetComplianceDetailCommandInput | GetNotificationChannelCommandInput | GetPolicyCommandInput | GetProtectionStatusCommandInput | GetProtocolsListCommandInput | GetThirdPartyFirewallAssociationStatusCommandInput | GetViolationDetailsCommandInput | ListAppsListsCommandInput | ListComplianceStatusCommandInput | ListMemberAccountsCommandInput | ListPoliciesCommandInput | ListProtocolsListsCommandInput | ListTagsForResourceCommandInput | ListThirdPartyFirewallFirewallPoliciesCommandInput | PutAppsListCommandInput | PutNotificationChannelCommandInput | PutPolicyCommandInput | PutProtocolsListCommandInput | TagResourceCommandInput | UntagResourceCommandInput;
    export type ServiceOutputTypes = AssociateAdminAccountCommandOutput | AssociateThirdPartyFirewallCommandOutput | DeleteAppsListCommandOutput | DeleteNotificationChannelCommandOutput | DeletePolicyCommandOutput | DeleteProtocolsListCommandOutput | DisassociateAdminAccountCommandOutput | DisassociateThirdPartyFirewallCommandOutput | GetAdminAccountCommandOutput | GetAppsListCommandOutput | GetComplianceDetailCommandOutput | GetNotificationChannelCommandOutput | GetPolicyCommandOutput | GetProtectionStatusCommandOutput | GetProtocolsListCommandOutput | GetThirdPartyFirewallAssociationStatusCommandOutput | GetViolationDetailsCommandOutput | ListAppsListsCommandOutput | ListComplianceStatusCommandOutput | ListMemberAccountsCommandOutput | ListPoliciesCommandOutput | ListProtocolsListsCommandOutput | ListTagsForResourceCommandOutput | ListThirdPartyFirewallFirewallPoliciesCommandOutput | PutAppsListCommandOutput | PutNotificationChannelCommandOutput | PutPolicyCommandOutput | PutProtocolsListCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type FMSClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of FMSClient class constructor that set the region, credentials and other options.
        */
    export interface FMSClientConfig extends FMSClientConfigType {
    }
    type FMSClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of FMSClient class. This is resolved and normalized from the {@link FMSClientConfig | constructor configuration interface}.
        */
    export interface FMSClientResolvedConfig extends FMSClientResolvedConfigType {
    }
    /**
        * <p>This is the <i>Firewall Manager API Reference</i>. This guide is for
        *       developers who need detailed information about the Firewall Manager API actions, data
        *       types, and errors. For detailed information about Firewall Manager features, see the
        *         <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-chapter.html">Firewall Manager Developer Guide</a>.</p>
        *          <p>Some API actions require explicit resource permissions. For information, see the developer guide topic
        *         <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-api-permissions-ref.html">Firewall Manager required permissions for API actions</a>.
        * </p>
        */
    export class FMSClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, FMSClientResolvedConfig> {
            /**
                * The resolved configuration of FMSClient class. This is resolved and normalized from the {@link FMSClientConfig | constructor configuration interface}.
                */
            readonly config: FMSClientResolvedConfig;
            constructor(configuration: FMSClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { FMSServiceException as __BaseException } from "@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/FMSServiceException";
    export enum AccountRoleStatus {
            Creating = "CREATING",
            Deleted = "DELETED",
            Deleting = "DELETING",
            PendingDeletion = "PENDING_DELETION",
            Ready = "READY"
    }
    /**
        * <p>Describes a remediation action target.</p>
        */
    export interface ActionTarget {
            /**
                * <p>The ID of the remediation target.</p>
                */
            ResourceId?: string;
            /**
                * <p>A description of the remediation action target.</p>
                */
            Description?: string;
    }
    export namespace ActionTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionTarget) => any;
    }
    /**
        * <p>An individual Firewall Manager application.</p>
        */
    export interface App {
            /**
                * <p>The application's name.</p>
                */
            AppName: string | undefined;
            /**
                * <p>The IP protocol name or number. The name can be one of <code>tcp</code>, <code>udp</code>, or <code>icmp</code>. For information on possible numbers, see <a href="https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml">Protocol Numbers</a>.</p>
                */
            Protocol: string | undefined;
            /**
                * <p>The application's port number, for example <code>80</code>.</p>
                */
            Port: number | undefined;
    }
    export namespace App {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: App) => any;
    }
    /**
        * <p>An Firewall Manager applications list.</p>
        */
    export interface AppsListData {
            /**
                * <p>The ID of the Firewall Manager applications list.</p>
                */
            ListId?: string;
            /**
                * <p>The name of the Firewall Manager applications list.</p>
                */
            ListName: string | undefined;
            /**
                * <p>A unique identifier for each update to the list. When you update
                *         the list, the update token must match the token of the current version of the application list.
                *         You can retrieve the update token by getting the list. </p>
                */
            ListUpdateToken?: string;
            /**
                * <p>The time that the Firewall Manager applications list was created.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The time that the Firewall Manager applications list was last updated.</p>
                */
            LastUpdateTime?: Date;
            /**
                * <p>An array of applications in the Firewall Manager applications list.</p>
                */
            AppsList: App[] | undefined;
            /**
                * <p>A map of previous version numbers to their corresponding <code>App</code> object arrays.</p>
                */
            PreviousAppsList?: Record<string, App[]>;
    }
    export namespace AppsListData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppsListData) => any;
    }
    /**
        * <p>Details of the Firewall Manager applications list.</p>
        */
    export interface AppsListDataSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the applications list.</p>
                */
            ListArn?: string;
            /**
                * <p>The ID of the applications list.</p>
                */
            ListId?: string;
            /**
                * <p>The name of the applications list.</p>
                */
            ListName?: string;
            /**
                * <p>An array of <code>App</code> objects in the Firewall Manager applications list.</p>
                */
            AppsList?: App[];
    }
    export namespace AppsListDataSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppsListDataSummary) => any;
    }
    export interface AssociateAdminAccountRequest {
            /**
                * <p>The Amazon Web Services account ID to associate with Firewall Manager as the Firewall Manager
                *       administrator account. This must be an Organizations member account.
                *         For more information about Organizations, see
                *         <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_accounts.html">Managing the Amazon Web Services Accounts in Your Organization</a>.  </p>
                */
            AdminAccount: string | undefined;
    }
    export namespace AssociateAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateAdminAccountRequest) => any;
    }
    /**
        * <p>The operation failed because of a system problem, even though the request was valid. Retry
        *       your request.</p>
        */
    export class InternalErrorException extends __BaseException {
            readonly name: "InternalErrorException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
    }
    /**
        * <p>The parameters of the request were invalid.</p>
        */
    export class InvalidInputException extends __BaseException {
            readonly name: "InvalidInputException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputException, __BaseException>);
    }
    /**
        * <p>The operation failed because there was nothing to do or the operation wasn't possible. For example, you might have
        *         submitted an <code>AssociateAdminAccount</code> request for an account ID that
        *             was already set as the Firewall Manager administrator. Or you might have tried to access a Region
        *   that's disabled by default, and that you need to enable for the Firewall Manager
        *   administrator account and for Organizations before you can access it.</p>
        */
    export class InvalidOperationException extends __BaseException {
            readonly name: "InvalidOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOperationException, __BaseException>);
    }
    /**
        * <p>The operation exceeds a resource limit, for example, the maximum number of
        *         <code>policy</code> objects that you can create for an Amazon Web Services account. For more information,
        *       see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-limits.html">Firewall
        *         Manager Limits</a> in the <i>WAF Developer Guide</i>.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum ThirdPartyFirewall {
            PALO_ALTO_NETWORKS_CLOUD_NGFW = "PALO_ALTO_NETWORKS_CLOUD_NGFW"
    }
    export interface AssociateThirdPartyFirewallRequest {
            /**
                * <p>The name of the third-party firewall vendor.</p>
                */
            ThirdPartyFirewall: ThirdPartyFirewall | string | undefined;
    }
    export namespace AssociateThirdPartyFirewallRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateThirdPartyFirewallRequest) => any;
    }
    export enum ThirdPartyFirewallAssociationStatus {
            NOT_EXIST = "NOT_EXIST",
            OFFBOARDING = "OFFBOARDING",
            OFFBOARD_COMPLETE = "OFFBOARD_COMPLETE",
            ONBOARDING = "ONBOARDING",
            ONBOARD_COMPLETE = "ONBOARD_COMPLETE"
    }
    export interface AssociateThirdPartyFirewallResponse {
            /**
                * <p>The current status for setting a Firewall Manager policy administrator's account as an administrator of the third-party firewall tenant.</p>
                *         <ul>
                *             <li>
                *               <p>
                *                   <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p>
                *            </li>
                *             <li>
                *               <p>
                *                   <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p>
                *            </li>
                *             <li>
                *               <p>
                *                   <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p>
                *            </li>
                *             <li>
                *               <p>
                *                   <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p>
                *            </li>
                *             <li>
                *               <p>
                *                   <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p>
                *            </li>
                *          </ul>
                */
            ThirdPartyFirewallStatus?: ThirdPartyFirewallAssociationStatus | string;
    }
    export namespace AssociateThirdPartyFirewallResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateThirdPartyFirewallResponse) => any;
    }
    /**
        * <p>Violation detail for network interfaces associated with an EC2 instance.</p>
        */
    export interface AwsEc2NetworkInterfaceViolation {
            /**
                * <p>The resource ID of the network interface.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>List of security groups that violate the rules specified in the primary security group of the Firewall Manager policy.</p>
                */
            ViolatingSecurityGroups?: string[];
    }
    export namespace AwsEc2NetworkInterfaceViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkInterfaceViolation) => any;
    }
    /**
        * <p>Violation detail for an EC2 instance resource.</p>
        */
    export interface AwsEc2InstanceViolation {
            /**
                * <p>The resource ID of the EC2 instance.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>Violation detail for network interfaces associated with the EC2 instance.</p>
                */
            AwsEc2NetworkInterfaceViolations?: AwsEc2NetworkInterfaceViolation[];
    }
    export namespace AwsEc2InstanceViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2InstanceViolation) => any;
    }
    export interface DeleteAppsListRequest {
            /**
                * <p>The ID of the applications list that you want to delete. You can retrieve this ID from
                *       <code>PutAppsList</code>, <code>ListAppsLists</code>, and <code>GetAppsList</code>.</p>
                */
            ListId: string | undefined;
    }
    export namespace DeleteAppsListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppsListRequest) => any;
    }
    export interface DeleteNotificationChannelRequest {
    }
    export namespace DeleteNotificationChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotificationChannelRequest) => any;
    }
    export interface DeletePolicyRequest {
            /**
                * <p>The ID of the policy that you want to delete. You can retrieve this ID from
                *         <code>PutPolicy</code> and <code>ListPolicies</code>.</p>
                */
            PolicyId: string | undefined;
            /**
                * <p>If <code>True</code>, the request performs cleanup according to the policy type. </p>
                *          <p>For WAF and Shield Advanced policies, the cleanup does the following:</p>
                *          <ul>
                *             <li>
                *                <p>Deletes rule groups created by Firewall Manager</p>
                *             </li>
                *             <li>
                *                <p>Removes web ACLs from in-scope resources</p>
                *             </li>
                *             <li>
                *                <p>Deletes web ACLs that contain no rules or rule groups</p>
                *             </li>
                *          </ul>
                *          <p>For security group policies, the cleanup does the following for each security group in
                *       the policy:</p>
                *          <ul>
                *             <li>
                *                <p>Disassociates the security group from in-scope resources </p>
                *             </li>
                *             <li>
                *                <p>Deletes the security group if it was created through Firewall Manager and if it's
                *           no longer associated with any resources through another policy</p>
                *             </li>
                *          </ul>
                *          <p>After the cleanup, in-scope resources are no longer protected by web ACLs in this policy.
                *       Protection of out-of-scope resources remains unchanged. Scope is determined by tags that you
                *       create and accounts that you associate with the policy. When creating the policy, if you
                *       specify that only resources in specific accounts or with specific tags are in scope of the
                *       policy, those accounts and resources are handled by the policy. All others are out of scope.
                *       If you don't specify tags or accounts, all resources are in scope. </p>
                */
            DeleteAllPolicyResources?: boolean;
    }
    export namespace DeletePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePolicyRequest) => any;
    }
    export interface DeleteProtocolsListRequest {
            /**
                * <p>The ID of the protocols list that you want to delete. You can retrieve this ID from
                *       <code>PutProtocolsList</code>, <code>ListProtocolsLists</code>, and <code>GetProtocolsLost</code>.</p>
                */
            ListId: string | undefined;
    }
    export namespace DeleteProtocolsListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProtocolsListRequest) => any;
    }
    export interface DisassociateAdminAccountRequest {
    }
    export namespace DisassociateAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateAdminAccountRequest) => any;
    }
    export interface DisassociateThirdPartyFirewallRequest {
            /**
                * <p>The name of the third-party firewall vendor.</p>
                */
            ThirdPartyFirewall: ThirdPartyFirewall | string | undefined;
    }
    export namespace DisassociateThirdPartyFirewallRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateThirdPartyFirewallRequest) => any;
    }
    export interface DisassociateThirdPartyFirewallResponse {
            /**
                * <p>The current status for the disassociation of a Firewall Manager administrators account with a third-party firewall.</p>
                */
            ThirdPartyFirewallStatus?: ThirdPartyFirewallAssociationStatus | string;
    }
    export namespace DisassociateThirdPartyFirewallResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateThirdPartyFirewallResponse) => any;
    }
    export interface GetAdminAccountRequest {
    }
    export namespace GetAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAdminAccountRequest) => any;
    }
    export interface GetAdminAccountResponse {
            /**
                * <p>The Amazon Web Services account that is set as the Firewall Manager administrator.</p>
                */
            AdminAccount?: string;
            /**
                * <p>The status of the Amazon Web Services account that you set as the Firewall Manager
                *       administrator.</p>
                */
            RoleStatus?: AccountRoleStatus | string;
    }
    export namespace GetAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAdminAccountResponse) => any;
    }
    export interface GetAppsListRequest {
            /**
                * <p>The ID of the Firewall Manager applications list that you want the details for.</p>
                */
            ListId: string | undefined;
            /**
                * <p>Specifies whether the list to retrieve is a default list owned by Firewall Manager.</p>
                */
            DefaultList?: boolean;
    }
    export namespace GetAppsListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppsListRequest) => any;
    }
    export interface GetAppsListResponse {
            /**
                * <p>Information about the specified Firewall Manager applications list.</p>
                */
            AppsList?: AppsListData;
            /**
                * <p>The Amazon Resource Name (ARN) of the applications list.</p>
                */
            AppsListArn?: string;
    }
    export namespace GetAppsListResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppsListResponse) => any;
    }
    export interface GetComplianceDetailRequest {
            /**
                * <p>The ID of the policy that you want to get the details for. <code>PolicyId</code> is
                *       returned by <code>PutPolicy</code> and by <code>ListPolicies</code>.</p>
                */
            PolicyId: string | undefined;
            /**
                * <p>The Amazon Web Services account that owns the resources that you want to get the details for.</p>
                */
            MemberAccount: string | undefined;
    }
    export namespace GetComplianceDetailRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceDetailRequest) => any;
    }
    export enum DependentServiceName {
            AWSConfig = "AWSCONFIG",
            AWSShieldAdvanced = "AWSSHIELD_ADVANCED",
            AWSVirtualPrivateCloud = "AWSVPC",
            AWSWAF = "AWSWAF"
    }
    export enum ViolationReason {
            BlackHoleRouteDetected = "BLACK_HOLE_ROUTE_DETECTED",
            BlackHoleRouteDetectedInFirewallSubnet = "BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET",
            FMSCreatedSecurityGroupEdited = "FMS_CREATED_SECURITY_GROUP_EDITED",
            FirewallSubnetIsOutOfScope = "FIREWALL_SUBNET_IS_OUT_OF_SCOPE",
            FirewallSubnetMissingExpectedRoute = "FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE",
            FirewallSubnetMissingVPCEndpoint = "FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT",
            InternetGatewayMissingExpectedRoute = "INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE",
            InternetTrafficNotInspected = "INTERNET_TRAFFIC_NOT_INSPECTED",
            InvalidRouteConfiguration = "INVALID_ROUTE_CONFIGURATION",
            MissingExpectedRouteTable = "MISSING_EXPECTED_ROUTE_TABLE",
            MissingFirewall = "MISSING_FIREWALL",
            MissingFirewallSubnetInAZ = "MISSING_FIREWALL_SUBNET_IN_AZ",
            MissingTargetGateway = "MISSING_TARGET_GATEWAY",
            NetworkFirewallPolicyModified = "NETWORK_FIREWALL_POLICY_MODIFIED",
            ResourceIncorrectWebAcl = "RESOURCE_INCORRECT_WEB_ACL",
            ResourceMissingDnsFirewall = "RESOURCE_MISSING_DNS_FIREWALL",
            ResourceMissingSecurityGroup = "RESOURCE_MISSING_SECURITY_GROUP",
            ResourceMissingShieldProtection = "RESOURCE_MISSING_SHIELD_PROTECTION",
            ResourceMissingWebAcl = "RESOURCE_MISSING_WEB_ACL",
            ResourceMissingWebaclOrShieldProtection = "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION",
            ResourceViolatesAuditSecurityGroup = "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP",
            RouteHasOutOfScopeEndpoint = "ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT",
            SecurityGroupRedundant = "SECURITY_GROUP_REDUNDANT",
            SecurityGroupUnused = "SECURITY_GROUP_UNUSED",
            TrafficInspectionCrossesAZBoundary = "TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY",
            UnexpectedFirewallRoutes = "UNEXPECTED_FIREWALL_ROUTES",
            UnexpectedTargetGatewayRoutes = "UNEXPECTED_TARGET_GATEWAY_ROUTES",
            WebAclMissingRuleGroup = "WEB_ACL_MISSING_RULE_GROUP"
    }
    /**
        * <p>Details of the resource that is not protected by the policy.</p>
        */
    export interface ComplianceViolator {
            /**
                * <p>The resource ID.</p>
                */
            ResourceId?: string;
            /**
                * <p>The reason that the resource is not protected by the policy.</p>
                */
            ViolationReason?: ViolationReason | string;
            /**
                * <p>The resource type. This is in the format shown in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a>. For example:
                *         <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code>,
                *         <code>AWS::CloudFront::Distribution</code>, or
                *         <code>AWS::NetworkFirewall::FirewallPolicy</code>.</p>
                */
            ResourceType?: string;
            /**
                * <p>Metadata about the resource that doesn't comply with the policy scope.</p>
                */
            Metadata?: Record<string, string>;
    }
    export namespace ComplianceViolator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceViolator) => any;
    }
    /**
        * <p>Describes
        *       the noncompliant resources in a member account for a specific Firewall Manager policy. A maximum of 100 entries are displayed. If more than 100 resources are
        *       noncompliant, <code>EvaluationLimitExceeded</code> is set to <code>True</code>.</p>
        */
    export interface PolicyComplianceDetail {
            /**
                * <p>The Amazon Web Services account that created the Firewall Manager policy.</p>
                */
            PolicyOwner?: string;
            /**
                * <p>The ID of the Firewall Manager policy.</p>
                */
            PolicyId?: string;
            /**
                * <p>The Amazon Web Services account ID.</p>
                */
            MemberAccount?: string;
            /**
                * <p>An array of resources that aren't protected by the WAF or Shield Advanced policy or
                *       that aren't in compliance with the security group policy.</p>
                */
            Violators?: ComplianceViolator[];
            /**
                * <p>Indicates if over 100 resources are noncompliant with the Firewall Manager
                *       policy.</p>
                */
            EvaluationLimitExceeded?: boolean;
            /**
                * <p>A timestamp that indicates when the returned information should be considered out of
                *       date.</p>
                */
            ExpiredAt?: Date;
            /**
                * <p>Details about problems with dependent services, such as WAF or Config,
                *       and the error message received that indicates the problem with the service.</p>
                */
            IssueInfoMap?: Record<string, string>;
    }
    export namespace PolicyComplianceDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyComplianceDetail) => any;
    }
    export interface GetComplianceDetailResponse {
            /**
                * <p>Information about the resources and the policy that you specified in the
                *         <code>GetComplianceDetail</code> request.</p>
                */
            PolicyComplianceDetail?: PolicyComplianceDetail;
    }
    export namespace GetComplianceDetailResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComplianceDetailResponse) => any;
    }
    export interface GetNotificationChannelRequest {
    }
    export namespace GetNotificationChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNotificationChannelRequest) => any;
    }
    export interface GetNotificationChannelResponse {
            /**
                * <p>The SNS topic that records Firewall Manager activity. </p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
                */
            SnsRoleName?: string;
    }
    export namespace GetNotificationChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetNotificationChannelResponse) => any;
    }
    export interface GetPolicyRequest {
            /**
                * <p>The ID of the Firewall Manager policy that you want the details for.</p>
                */
            PolicyId: string | undefined;
    }
    export namespace GetPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyRequest) => any;
    }
    export enum CustomerPolicyScopeIdType {
            ACCOUNT = "ACCOUNT",
            ORG_UNIT = "ORG_UNIT"
    }
    /**
        * <p>The resource tags that Firewall Manager uses to determine if a particular resource
        *       should be included or excluded from the Firewall Manager policy. Tags enable you to
        *       categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or
        *       environment. Each tag consists of a key and an optional value. Firewall Manager combines the
        *       tags with "AND" so that, if you add more than one tag to a policy scope, a resource must have
        *         all the specified tags to be included or excluded. For more information, see
        *     <a href="https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/tag-editor.html">Working with Tag Editor</a>.</p>
        */
    export interface ResourceTag {
            /**
                * <p>The resource tag key.</p>
                */
            Key: string | undefined;
            /**
                * <p>The resource tag value.</p>
                */
            Value?: string;
    }
    export namespace ResourceTag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceTag) => any;
    }
    export enum FirewallDeploymentModel {
            CENTRALIZED = "CENTRALIZED",
            DISTRIBUTED = "DISTRIBUTED"
    }
    /**
        * <p>Configures the firewall policy deployment model of Network Firewall. For information about
        *          Network Firewall deployment models, see <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/architectures.html">Network Firewall example
        *             architectures with routing</a> in the <i>Network Firewall Developer
        *          Guide</i>.</p>
        */
    export interface NetworkFirewallPolicy {
            /**
                * <p>Defines the deployment model to use for the firewall policy. To use a distributed model,
                *          set <a href="https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_PolicyOption.html">PolicyOption</a> to <code>NULL</code>.</p>
                */
            FirewallDeploymentModel?: FirewallDeploymentModel | string;
    }
    export namespace NetworkFirewallPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallPolicy) => any;
    }
    /**
        * <p>Configures the deployment model for the third-party firewall.</p>
        */
    export interface ThirdPartyFirewallPolicy {
            /**
                * <p>Defines the deployment model to use for the third-party firewall policy.</p>
                */
            FirewallDeploymentModel?: FirewallDeploymentModel | string;
    }
    export namespace ThirdPartyFirewallPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThirdPartyFirewallPolicy) => any;
    }
    /**
        * <p>Contains the Network Firewall firewall policy options to configure the policy's deployment model and third-party firewall policy settings.</p>
        */
    export interface PolicyOption {
            /**
                * <p>Defines the deployment model to use for the firewall policy.</p>
                */
            NetworkFirewallPolicy?: NetworkFirewallPolicy;
            /**
                * <p>Defines the policy options for a third-party firewall policy.</p>
                */
            ThirdPartyFirewallPolicy?: ThirdPartyFirewallPolicy;
    }
    export namespace PolicyOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyOption) => any;
    }
    export enum SecurityServiceType {
            DNS_FIREWALL = "DNS_FIREWALL",
            NETWORK_FIREWALL = "NETWORK_FIREWALL",
            SECURITY_GROUPS_COMMON = "SECURITY_GROUPS_COMMON",
            SECURITY_GROUPS_CONTENT_AUDIT = "SECURITY_GROUPS_CONTENT_AUDIT",
            SECURITY_GROUPS_USAGE_AUDIT = "SECURITY_GROUPS_USAGE_AUDIT",
            SHIELD_ADVANCED = "SHIELD_ADVANCED",
            THIRD_PARTY_FIREWALL = "THIRD_PARTY_FIREWALL",
            WAF = "WAF",
            WAFV2 = "WAFV2"
    }
    /**
        * <p>Details about the security service that is being used to protect the resources.</p>
        */
    export interface SecurityServicePolicyData {
            /**
                * <p>The service that the policy is using to protect the resources. This specifies the type of
                *       policy that is created, either an WAF policy, a Shield Advanced policy, or a security
                *       group policy. For security group policies, Firewall Manager supports one security group for
                *       each common policy and for each content audit policy. This is an adjustable limit that you can
                *       increase by contacting Amazon Web Services Support.</p>
                */
            Type: SecurityServiceType | string | undefined;
            /**
                * <p>Details about the service that are specific to the service type, in JSON format. </p>
                *          <ul>
                *             <li>
                *                <p>Example: <code>DNS_FIREWALL</code>
                *                </p>
                *                <p>
                *                   <code>"{\"type\":\"DNS_FIREWALL\",\"preProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-1\",\"priority\":10}],\"postProcessRuleGroups\":[{\"ruleGroupId\":\"rslvr-frg-2\",\"priority\":9911}]}"</code>
                *                </p>
                *                <note>
                *                   <p>Valid values for <code>preProcessRuleGroups</code> are between 1 and 99. Valid
                *                  values for <code>postProcessRuleGroups</code> are between 9901 and 10000.</p>
                *                </note>
                *             </li>
                *             <li>
                *                <p>Example: <code>NETWORK_FIREWALL</code> - Centralized deployment
                *              model</p>
                *                <p>
                *                   <code>"{\"type\":\"NETWORK_FIREWALL\",\"awsNetworkFirewallConfig\":{\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}},\"firewallDeploymentModel\":{\"centralizedFirewallDeploymentModel\":{\"centralizedFirewallOrchestrationConfig\":{\"inspectionVpcIds\":[{\"resourceId\":\"vpc-1234\",\"accountId\":\"123456789011\"}],\"firewallCreationConfig\":{\"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneId\":null,\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]}]}},\"allowedIPV4CidrList\":[]}}}}"</code>
                *                </p>
                *                <p> To use the centralized deployment model, you must set <a href="https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_PolicyOption.html">PolicyOption</a> to
                *                 <code>CENTRALIZED</code>. </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>NETWORK_FIREWALL</code> - Distributed deployment model with
                *               automatic Availability Zone configuration</p>
                *                <p>
                *                   <code>
                *                 "{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":[\"10.0.0.0/28\",\"192.168.0.0/28\"],\"routeManagementAction\":\"OFF\"},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}}"
                *               </code>
                *                </p>
                *                <p> With automatic Availbility Zone configuration, Firewall Manager chooses which Availability Zones to create the endpoints in. To use the distributed deployment model, you must set <a href="https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_PolicyOption.html">PolicyOption</a> to
                *                  <code>NULL</code>. </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>NETWORK_FIREWALL</code> - Distributed deployment model with
                *               automatic Availability Zone configuration and route management</p>
                *                <p>
                *                   <code>
                *                 "{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":[\"10.0.0.0/28\",\"192.168.0.0/28\"],\"routeManagementAction\":\"MONITOR\",\"routeManagementTargetTypes\":[\"InternetGateway\"]},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\": \"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":true}}"
                *               </code>
                *                </p>
                *                <p>To use the distributed deployment model, you must set <a href="https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_PolicyOption.html">PolicyOption</a> to
                *                  <code>NULL</code>. </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>NETWORK_FIREWALL</code> - Distributed deployment model with
                *               custom Availability Zone configuration</p>
                *                <p>
                *                   <code>"{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"fragmentcustomactionname\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\", \"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}},{\"actionName\":\"fragmentcustomactionname\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"fragmentmetricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"firewallCreationConfig\":{ \"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]},{\"availabilityZoneName\":\"us-east-1b\",\"allowedIPV4CidrList\":[ \"10.0.0.0/28\"]}]} },\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":null,\"routeManagementAction\":\"OFF\",\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":boolean}}"
                *               </code>
                *                </p>
                *                <p>
                *              With custom Availability Zone configuration,
                *              you define which specific Availability Zones to create endpoints in by configuring
                *                 <code>firewallCreationConfig</code>. To configure the Availability Zones in <code>firewallCreationConfig</code>, specify either the <code>availabilityZoneName</code> or <code>availabilityZoneId</code> parameter, not both parameters.
                *            </p>
                *                <p>To use the distributed deployment model, you must set <a href="https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_PolicyOption.html">PolicyOption</a> to
                *                  <code>NULL</code>. </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>NETWORK_FIREWALL</code> - Distributed deployment model with
                *               custom Availability Zone configuration and route management</p>
                *                <p>
                *                   <code>"{\"type\":\"NETWORK_FIREWALL\",\"networkFirewallStatelessRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateless-rulegroup/test\",\"priority\":1}],\"networkFirewallStatelessDefaultActions\":[\"aws:forward_to_sfe\",\"customActionName\"],\"networkFirewallStatelessFragmentDefaultActions\":[\"aws:forward_to_sfe\",\"fragmentcustomactionname\"],\"networkFirewallStatelessCustomActions\":[{\"actionName\":\"customActionName\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"metricdimensionvalue\"}]}}},{\"actionName\":\"fragmentcustomactionname\",\"actionDefinition\":{\"publishMetricAction\":{\"dimensions\":[{\"value\":\"fragmentmetricdimensionvalue\"}]}}}],\"networkFirewallStatefulRuleGroupReferences\":[{\"resourceARN\":\"arn:aws:network-firewall:us-east-1:123456789011:stateful-rulegroup/test\"}],\"networkFirewallOrchestrationConfig\":{\"firewallCreationConfig\":{\"endpointLocation\":{\"availabilityZoneConfigList\":[{\"availabilityZoneName\":\"us-east-1a\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]},{\"availabilityZoneName\":\"us-east-1b\",\"allowedIPV4CidrList\":[\"10.0.0.0/28\"]}]}},\"singleFirewallEndpointPerVPC\":false,\"allowedIPV4CidrList\":null,\"routeManagementAction\":\"MONITOR\",\"routeManagementTargetTypes\":[\"InternetGateway\"],\"routeManagementConfig\":{\"allowCrossAZTrafficIfNoEndpoint\":true}},\"networkFirewallLoggingConfiguration\":{\"logDestinationConfigs\":[{\"logDestinationType\":\"S3\",\"logType\":\"ALERT\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}},{\"logDestinationType\":\"S3\",\"logType\":\"FLOW\",\"logDestination\":{\"bucketName\":\"s3-bucket-name\"}}],\"overrideExistingConfig\":boolean}}"
                *               </code>
                *                </p>
                *                <p>To use the distributed deployment model, you must set <a href="https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_PolicyOption.html">PolicyOption</a> to
                *                  <code>NULL</code>. </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>THIRD_PARTY_FIREWALL</code>
                *                </p>
                *                <p>
                *                   <code>"{
                *               "type":"THIRD_PARTY_FIREWALL",
                *               "thirdPartyFirewall":"PALO_ALTO_NETWORKS_CLOUD_NGFW",
                *               "thirdPartyFirewallConfig":{
                *                 "thirdPartyFirewallPolicyList":["global-1"]
                *               },
                * 	          "firewallDeploymentModel":{
                *                 "distributedFirewallDeploymentModel":{
                *                   "distributedFirewallOrchestrationConfig":{
                *                     "firewallCreationConfig":{
                *                       "endpointLocation":{
                *                         "availabilityZoneConfigList":[
                *                           {
                *                             "availabilityZoneName":"${AvailabilityZone}"
                *                           }
                *                         ]
                *                       }
                *                     },
                *                     "allowedIPV4CidrList":[
                *                     ]
                *                   }
                *                 }
                *               }
                *             }"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Specification for <code>SHIELD_ADVANCED</code> for Amazon CloudFront distributions </p>
                *                <p>
                *                   <code>"{\"type\":\"SHIELD_ADVANCED\",\"automaticResponseConfiguration\":
                *                  {\"automaticResponseStatus\":\"ENABLED|IGNORED|DISABLED\",
                *                  \"automaticResponseAction\":\"BLOCK|COUNT\"},
                *                  \"overrideCustomerWebaclClassic\":true|false}"</code>
                *                </p>
                *                <p>For example:
                *                  <code>"{\"type\":\"SHIELD_ADVANCED\",\"automaticResponseConfiguration\":
                *                  {\"automaticResponseStatus\":\"ENABLED\",
                *                  \"automaticResponseAction\":\"COUNT\"}}"</code>
                *                </p>
                *                <p>The default value for <code>automaticResponseStatus</code> is
                *                  <code>IGNORED</code>. The value for <code>automaticResponseAction</code> is only
                *               required when <code>automaticResponseStatus</code> is set to <code>ENABLED</code>.
                *               The default value for <code>overrideCustomerWebaclClassic</code> is
                *                  <code>false</code>.</p>
                *                <p>For other resource types that you can protect with a Shield Advanced policy, this
                *                  <code>ManagedServiceData</code> configuration is an empty string.</p>
                *             </li>
                *             <li>
                *                <p>Example: <code>WAFV2</code>
                *                </p>
                *                <p>
                *                   <code>"{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"version\":null,\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesAmazonIpReputationList\"},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[{\"name\":\"NoUserAgent_HEADER\"}]}],\"postProcessRuleGroups\":[],\"defaultAction\":{\"type\":\"ALLOW\"},\"overrideCustomerWebACLAssociation\":false,\"loggingConfiguration\":{\"logDestinationConfigs\":[\"arn:aws:firehose:us-west-2:12345678912:deliverystream/aws-waf-logs-fms-admin-destination\"],\"redactedFields\":[{\"redactedFieldType\":\"SingleHeader\",\"redactedFieldValue\":\"Cookies\"},{\"redactedFieldType\":\"Method\"}]}}"</code>
                *                </p>
                *                <p>In the <code>loggingConfiguration</code>, you can specify one
                *                  <code>logDestinationConfigs</code>, you can optionally provide up to 20
                *                  <code>redactedFields</code>, and the <code>RedactedFieldType</code> must be one of
                *                  <code>URI</code>, <code>QUERY_STRING</code>, <code>HEADER</code>, or
                *                  <code>METHOD</code>.</p>
                *             </li>
                *             <li>
                *                <p>Example: <code>WAF Classic</code>
                *                </p>
                *                <p>
                *                   <code>"{\"type\": \"WAF\", \"ruleGroups\":
                *                  [{\"id\":\"12345678-1bcd-9012-efga-0987654321ab\", \"overrideAction\" : {\"type\":
                *                  \"COUNT\"}}], \"defaultAction\": {\"type\": \"BLOCK\"}}"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>WAFV2</code> -  Firewall Manager support for WAF managed rule group versioning
                *           </p>
                *                <p>
                *                   <code>"{\"type\":\"WAFV2\",\"preProcessRuleGroups\":[{\"ruleGroupArn\":null,\"overrideAction\":{\"type\":\"NONE\"},\"managedRuleGroupIdentifier\":{\"versionEnabled\":true,\"version\":\"Version_2.0\",\"vendorName\":\"AWS\",\"managedRuleGroupName\":\"AWSManagedRulesCommonRuleSet\"},\"ruleGroupType\":\"ManagedRuleGroup\",\"excludeRules\":[{\"name\":\"NoUserAgent_HEADER\"}]}],\"postProcessRuleGroups\":[],\"defaultAction\":{\"type\":\"ALLOW\"},\"overrideCustomerWebACLAssociation\":false,\"loggingConfiguration\":{\"logDestinationConfigs\":[\"arn:aws:firehose:us-west-2:12345678912:deliverystream/aws-waf-logs-fms-admin-destination\"],\"redactedFields\":[{\"redactedFieldType\":\"SingleHeader\",\"redactedFieldValue\":\"Cookies\"},{\"redactedFieldType\":\"Method\"}]}}"</code>
                *                </p>
                *                <p>
                *             To use a specific version of a WAF managed rule group in your Firewall Manager policy, you must set <code>versionEnabled</code> to <code>true</code>, and set <code>version</code> to the version you'd like to use. If you don't set <code>versionEnabled</code> to <code>true</code>, or if you omit <code>versionEnabled</code>, then Firewall Manager uses the default version of the WAF managed rule group.
                *           </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>SECURITY_GROUPS_COMMON</code>
                *                </p>
                *                <p>
                *                   <code>"{\"type\":\"SECURITY_GROUPS_COMMON\",\"revertManualSecurityGroupChanges\":false,\"exclusiveResourceSecurityGroupManagement\":false,
                *                  \"applyToAllEC2InstanceENIs\":false,\"securityGroups\":[{\"id\":\"
                *                  sg-000e55995d61a06bd\"}]}"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>SECURITY_GROUPS_COMMON</code> - Security group tag distribution
                *            </p>
                *                <p>
                *                   <code>""{\"type\":\"SECURITY_GROUPS_COMMON\",\"securityGroups\":[{\"id\":\"sg-000e55995d61a06bd\"}],\"revertManualSecurityGroupChanges\":true,\"exclusiveResourceSecurityGroupManagement\":false,\"applyToAllEC2InstanceENIs\":false,\"includeSharedVPC\":false,\"enableTagDistribution\":true}""</code>
                *                </p>
                *                <p>
                *              Firewall Manager automatically distributes tags from the primary group to the security groups created by this policy. To use security group tag distribution, you must also set <code>revertManualSecurityGroupChanges</code> to <code>true</code>, otherwise Firewall Manager won't be able to create the policy. When you enable <code>revertManualSecurityGroupChanges</code>, Firewall Manager identifies and reports when the security groups created by this policy become non-compliant.
                *            </p>
                *                <p>
                *              Firewall Manager won't distrubute system tags added by Amazon Web Services services into the replica security groups. System tags begin with the <code>aws:</code> prefix.
                *            </p>
                *             </li>
                *             <li>
                *                <p>Example: Shared VPCs. Apply the preceding policy to resources in shared VPCs as
                *               well as to those in VPCs that the account owns </p>
                *                <p>
                *                   <code>"{\"type\":\"SECURITY_GROUPS_COMMON\",\"revertManualSecurityGroupChanges\":false,\"exclusiveResourceSecurityGroupManagement\":false,
                *                  \"applyToAllEC2InstanceENIs\":false,\"includeSharedVPC\":true,\"securityGroups\":[{\"id\":\"
                *                  sg-000e55995d61a06bd\"}]}"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Example: <code>SECURITY_GROUPS_CONTENT_AUDIT</code>
                *                </p>
                *                <p>
                *                   <code>"{\"type\":\"SECURITY_GROUPS_CONTENT_AUDIT\",\"securityGroups\":[{\"id\":\"sg-000e55995d61a06bd\"}],\"securityGroupAction\":{\"type\":\"ALLOW\"}}"</code>
                *                </p>
                *                <p>The security group action for content audit can be <code>ALLOW</code> or
                *                  <code>DENY</code>. For <code>ALLOW</code>, all in-scope security group rules must
                *               be within the allowed range of the policy's security group rules. For
                *                  <code>DENY</code>, all in-scope security group rules must not contain a value or a
                *               range that matches a rule value or range in the policy security group.</p>
                *             </li>
                *             <li>
                *                <p>Example: <code>SECURITY_GROUPS_USAGE_AUDIT</code>
                *                </p>
                *                <p>
                *                   <code>"{\"type\":\"SECURITY_GROUPS_USAGE_AUDIT\",\"deleteUnusedSecurityGroups\":true,\"coalesceRedundantSecurityGroups\":true}"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ManagedServiceData?: string;
            /**
                * <p>Contains the Network Firewall firewall policy options to configure a centralized deployment
                *          model.</p>
                */
            PolicyOption?: PolicyOption;
    }
    export namespace SecurityServicePolicyData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecurityServicePolicyData) => any;
    }
    /**
        * <p>An Firewall Manager policy.</p>
        */
    export interface Policy {
            /**
                * <p>The ID of the Firewall Manager policy.</p>
                */
            PolicyId?: string;
            /**
                * <p>The name of the Firewall Manager policy.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>A unique identifier for each update to the policy. When issuing a <code>PutPolicy</code>
                *       request, the <code>PolicyUpdateToken</code> in the request must match the
                *         <code>PolicyUpdateToken</code> of the current policy version. To get the
                *         <code>PolicyUpdateToken</code> of the current policy version, use a <code>GetPolicy</code>
                *       request.</p>
                */
            PolicyUpdateToken?: string;
            /**
                * <p>Details about the security service that is being used to protect the resources.</p>
                */
            SecurityServicePolicyData: SecurityServicePolicyData | undefined;
            /**
                * <p>The type of resource protected by or in scope of the policy. This is in the format shown
                *         in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a>.
                *                     To apply this policy to multiple resource types, specify a resource type of <code>ResourceTypeList</code> and then specify the resource types in a <code>ResourceTypeList</code>.</p>
                *                 <p>For WAF and Shield Advanced, resource types include
                *                 <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code>, <code>AWS::ElasticLoadBalancing::LoadBalancer</code>, <code>AWS::EC2::EIP</code>, and
                *         <code>AWS::CloudFront::Distribution</code>. For a security group common policy, valid values
                *       are <code>AWS::EC2::NetworkInterface</code> and <code>AWS::EC2::Instance</code>. For a
                *       security group content audit policy, valid values are <code>AWS::EC2::SecurityGroup</code>,
                *         <code>AWS::EC2::NetworkInterface</code>, and <code>AWS::EC2::Instance</code>. For a security
                *             group usage audit policy, the value is <code>AWS::EC2::SecurityGroup</code>. For an Network Firewall policy or DNS Firewall policy,
                *                 the value is <code>AWS::EC2::VPC</code>.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>An array of <code>ResourceType</code> objects. Use this only to specify multiple resource types. To specify a single resource type, use <code>ResourceType</code>.</p>
                */
            ResourceTypeList?: string[];
            /**
                * <p>An array of <code>ResourceTag</code> objects.</p>
                */
            ResourceTags?: ResourceTag[];
            /**
                * <p>If set to <code>True</code>, resources with the tags that are specified in the
                *         <code>ResourceTag</code> array are not in scope of the policy. If set to <code>False</code>,
                *       and the <code>ResourceTag</code> array is not null, only resources with the specified tags are
                *       in scope of the policy.</p>
                */
            ExcludeResourceTags: boolean | undefined;
            /**
                * <p>Indicates if the policy should be automatically applied to new resources.</p>
                */
            RemediationEnabled: boolean | undefined;
            /**
                * <p>Indicates whether Firewall Manager should automatically remove protections from resources that leave the policy scope and clean up resources
                *        that Firewall Manager is managing for accounts when those accounts leave policy scope. For example, Firewall Manager will disassociate a Firewall Manager managed web ACL
                *        from a protected customer resource when the customer resource leaves policy scope. </p>
                *          <p>By default, Firewall Manager doesn't remove protections or delete Firewall Manager managed resources. </p>
                *          <p>This option is not available for Shield Advanced or WAF Classic policies.</p>
                */
            DeleteUnusedFMManagedResources?: boolean;
            /**
                * <p>Specifies the Amazon Web Services account IDs and Organizations organizational units (OUs) to include in the policy.
                *           Specifying an OU is the equivalent of specifying all accounts in the OU and in any of its child OUs, including any child OUs and accounts that are added at a later time.</p>
                *               <p>You can specify inclusions or exclusions, but not both. If you specify an <code>IncludeMap</code>, Firewall Manager
                *           applies the policy to all accounts specified by the <code>IncludeMap</code>, and
                *           does not evaluate any <code>ExcludeMap</code> specifications. If you do not specify an <code>IncludeMap</code>, then Firewall Manager
                *             applies the policy to all accounts except for those specified by the <code>ExcludeMap</code>.</p>
                *          <p>You can specify account IDs, OUs, or a combination: </p>
                *          <ul>
                *             <li>
                *                <p>Specify account IDs by setting the key to <code>ACCOUNT</code>. For example, the following is a valid map:
                *       <code>{“ACCOUNT” : [“accountID1”, “accountID2”]}</code>.</p>
                *             </li>
                *             <li>
                *                <p>Specify OUs by setting the key to <code>ORG_UNIT</code>. For example, the following is a valid map:
                *   <code>{“ORG_UNIT” : [“ouid111”, “ouid112”]}</code>.</p>
                *             </li>
                *             <li>
                *                <p>Specify accounts and OUs together in a single map, separated with a comma. For example, the following is a valid map:
                *       <code>{“ACCOUNT” : [“accountID1”, “accountID2”], “ORG_UNIT” : [“ouid111”, “ouid112”]}</code>.</p>
                *             </li>
                *          </ul>
                */
            IncludeMap?: Record<string, string[]>;
            /**
                * <p>Specifies the Amazon Web Services account IDs and Organizations organizational units (OUs) to exclude from the policy.
                *           Specifying an OU is the equivalent of specifying all accounts in the OU and in any of its child OUs, including any child OUs and accounts that are added at a later time.</p>
                *               <p>You can specify inclusions or exclusions, but not both. If you specify an <code>IncludeMap</code>, Firewall Manager
                *           applies the policy to all accounts specified by the <code>IncludeMap</code>, and
                *           does not evaluate any <code>ExcludeMap</code> specifications. If you do not specify an <code>IncludeMap</code>, then Firewall Manager
                *             applies the policy to all accounts except for those specified by the <code>ExcludeMap</code>.</p>
                *          <p>You can specify account IDs, OUs, or a combination: </p>
                *          <ul>
                *             <li>
                *                <p>Specify account IDs by setting the key to <code>ACCOUNT</code>. For example, the following is a valid map:
                *       <code>{“ACCOUNT” : [“accountID1”, “accountID2”]}</code>.</p>
                *             </li>
                *             <li>
                *                <p>Specify OUs by setting the key to <code>ORG_UNIT</code>. For example, the following is a valid map:
                *   <code>{“ORG_UNIT” : [“ouid111”, “ouid112”]}</code>.</p>
                *             </li>
                *             <li>
                *                <p>Specify accounts and OUs together in a single map, separated with a comma. For example, the following is a valid map:
                *       <code>{“ACCOUNT” : [“accountID1”, “accountID2”], “ORG_UNIT” : [“ouid111”, “ouid112”]}</code>.</p>
                *             </li>
                *          </ul>
                */
            ExcludeMap?: Record<string, string[]>;
    }
    export namespace Policy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Policy) => any;
    }
    export interface GetPolicyResponse {
            /**
                * <p>Information about the specified Firewall Manager policy.</p>
                */
            Policy?: Policy;
            /**
                * <p>The Amazon Resource Name (ARN) of the specified policy.</p>
                */
            PolicyArn?: string;
    }
    export namespace GetPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyResponse) => any;
    }
    /**
        * <p>The value of the <code>Type</code> parameter is invalid.</p>
        */
    export class InvalidTypeException extends __BaseException {
            readonly name: "InvalidTypeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTypeException, __BaseException>);
    }
    export interface GetProtectionStatusRequest {
            /**
                * <p>The ID of the policy for which you want to get the attack information.</p>
                */
            PolicyId: string | undefined;
            /**
                * <p>The Amazon Web Services account that is in scope of the policy that you want to get the details
                *          for.</p>
                */
            MemberAccountId?: string;
            /**
                * <p>The start of the time period to query for the attacks. This is a <code>timestamp</code> type. The
                *           request syntax listing indicates a <code>number</code> type because the default used by Firewall Manager is Unix time in seconds. However, any valid <code>timestamp</code> format is
                *          allowed.</p>
                */
            StartTime?: Date;
            /**
                * <p>The end of the time period to query for the attacks. This is a <code>timestamp</code> type. The
                *          request syntax listing indicates a <code>number</code> type because the default used by Firewall Manager is Unix time in seconds. However, any valid <code>timestamp</code> format is
                *          allowed.</p>
                */
            EndTime?: Date;
            /**
                * <p>If you specify a value for <code>MaxResults</code> and you have more objects than the number that you specify
                *          for <code>MaxResults</code>, Firewall Manager returns a <code>NextToken</code> value in the response, which you can use to retrieve another group of
                *          objects. For the second and subsequent <code>GetProtectionStatus</code> requests, specify the value of <code>NextToken</code>
                *          from the previous response to get information about another batch of objects.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies the number of objects that you want Firewall Manager to return for this request. If you have more
                *         objects than the number that you specify for <code>MaxResults</code>, the response includes a
                *          <code>NextToken</code> value that you can use to get another batch of objects.</p>
                */
            MaxResults?: number;
    }
    export namespace GetProtectionStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProtectionStatusRequest) => any;
    }
    export interface GetProtectionStatusResponse {
            /**
                * <p>The ID of the Firewall Manager administrator account for this policy.</p>
                */
            AdminAccountId?: string;
            /**
                * <p>The service type that is protected by the policy. Currently, this is always
                *             <code>SHIELD_ADVANCED</code>.</p>
                */
            ServiceType?: SecurityServiceType | string;
            /**
                * <p>Details about the attack, including the following:</p>
                *          <ul>
                *             <li>
                *                <p>Attack type</p>
                *             </li>
                *             <li>
                *                <p>Account ID</p>
                *             </li>
                *             <li>
                *                <p>ARN of the resource attacked</p>
                *             </li>
                *             <li>
                *                <p>Start time of the attack</p>
                *             </li>
                *             <li>
                *                <p>End time of the attack (ongoing attacks will not have an end time)</p>
                *             </li>
                *          </ul>
                *          <p>The details are in JSON format. </p>
                */
            Data?: string;
            /**
                * <p>If you have more objects than the number that you specified for <code>MaxResults</code> in the request,
                *          the response includes a <code>NextToken</code> value. To list more objects, submit another
                *          <code>GetProtectionStatus</code> request, and specify the <code>NextToken</code> value from the response in the
                *          <code>NextToken</code> value in the next request.</p>
                *          <p>Amazon Web Services SDKs provide auto-pagination that identify <code>NextToken</code> in a response and
                *          make subsequent request calls automatically on your behalf. However, this feature is not
                *          supported by <code>GetProtectionStatus</code>. You must submit subsequent requests with
                *             <code>NextToken</code> using your own processes. </p>
                */
            NextToken?: string;
    }
    export namespace GetProtectionStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProtectionStatusResponse) => any;
    }
    export interface GetProtocolsListRequest {
            /**
                * <p>The ID of the Firewall Manager protocols list that you want the details for.</p>
                */
            ListId: string | undefined;
            /**
                * <p>Specifies whether the list to retrieve is a default list owned by Firewall Manager.</p>
                */
            DefaultList?: boolean;
    }
    export namespace GetProtocolsListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProtocolsListRequest) => any;
    }
    /**
        * <p>An Firewall Manager protocols list.</p>
        */
    export interface ProtocolsListData {
            /**
                * <p>The ID of the Firewall Manager protocols list.</p>
                */
            ListId?: string;
            /**
                * <p>The name of the Firewall Manager protocols list.</p>
                */
            ListName: string | undefined;
            /**
                * <p>A unique identifier for each update to the list. When you update
                *         the list, the update token must match the token of the current version of the application list.
                *         You can retrieve the update token by getting the list. </p>
                */
            ListUpdateToken?: string;
            /**
                * <p>The time that the Firewall Manager protocols list was created.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The time that the Firewall Manager protocols list was last updated.</p>
                */
            LastUpdateTime?: Date;
            /**
                * <p>An array of protocols in the Firewall Manager protocols list.</p>
                */
            ProtocolsList: string[] | undefined;
            /**
                * <p>A map of previous version numbers to their corresponding protocol arrays.</p>
                */
            PreviousProtocolsList?: Record<string, string[]>;
    }
    export namespace ProtocolsListData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProtocolsListData) => any;
    }
    export interface GetProtocolsListResponse {
            /**
                * <p>Information about the specified Firewall Manager protocols list.</p>
                */
            ProtocolsList?: ProtocolsListData;
            /**
                * <p>The Amazon Resource Name (ARN) of the specified protocols list.</p>
                */
            ProtocolsListArn?: string;
    }
    export namespace GetProtocolsListResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetProtocolsListResponse) => any;
    }
    export interface GetThirdPartyFirewallAssociationStatusRequest {
            /**
                * <p>The name of the third-party firewall vendor.</p>
                */
            ThirdPartyFirewall: ThirdPartyFirewall | string | undefined;
    }
    export namespace GetThirdPartyFirewallAssociationStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetThirdPartyFirewallAssociationStatusRequest) => any;
    }
    export enum MarketplaceSubscriptionOnboardingStatus {
            COMPLETE = "COMPLETE",
            NOT_COMPLETE = "NOT_COMPLETE",
            NO_SUBSCRIPTION = "NO_SUBSCRIPTION"
    }
    export interface GetThirdPartyFirewallAssociationStatusResponse {
            /**
                * <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p>
                *             </li>
                *          </ul>
                */
            ThirdPartyFirewallStatus?: ThirdPartyFirewallAssociationStatus | string;
            /**
                * <p>The status for subscribing to the third-party firewall vendor in the Amazon Web Services Marketplace.</p>
                *         <ul>
                *             <li>
                *               <p>
                *                   <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the Amazon Web Services Marketplace.</p>
                *            </li>
                *             <li>
                *               <p>
                *                   <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p>
                *            </li>
                *             <li>
                *               <p>
                *                   <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p>
                *            </li>
                *          </ul>
                */
            MarketplaceOnboardingStatus?: MarketplaceSubscriptionOnboardingStatus | string;
    }
    export namespace GetThirdPartyFirewallAssociationStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetThirdPartyFirewallAssociationStatusResponse) => any;
    }
    export interface GetViolationDetailsRequest {
            /**
                * <p>The ID of the Firewall Manager policy that you want the details for. This currently only supports security group content audit policies.</p>
                */
            PolicyId: string | undefined;
            /**
                * <p>The Amazon Web Services account ID that you want the details for.</p>
                */
            MemberAccount: string | undefined;
            /**
                * <p>The ID of the resource that has violations.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The resource type. This is in the format shown in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a>.
                *       Supported resource types are:
                *       <code>AWS::EC2::Instance</code>,
                *       <code>AWS::EC2::NetworkInterface</code>,
                *       <code>AWS::EC2::SecurityGroup</code>,
                *       <code>AWS::NetworkFirewall::FirewallPolicy</code>, and
                *       <code>AWS::EC2::Subnet</code>.
                *    </p>
                */
            ResourceType: string | undefined;
    }
    export namespace GetViolationDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetViolationDetailsRequest) => any;
    }
    /**
        * <p>A collection of key:value pairs associated with an Amazon Web Services resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each Amazon Web Services resource.  </p>
        */
    export interface Tag {
            /**
                * <p>Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as "customer." Tag keys are case-sensitive.</p>
                */
            Key: string | undefined;
            /**
                * <p>Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as "companyA" or "companyB." Tag values are case-sensitive.  </p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>The reference rule that partially matches the <code>ViolationTarget</code> rule and violation reason.</p>
        */
    export interface PartialMatch {
            /**
                * <p>The reference rule from the primary security group of the Firewall Manager policy.</p>
                */
            Reference?: string;
            /**
                * <p>The violation reason.</p>
                */
            TargetViolationReasons?: string[];
    }
    export namespace PartialMatch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PartialMatch) => any;
    }
    export enum RemediationActionType {
            Modify = "MODIFY",
            Remove = "REMOVE"
    }
    /**
        * <p>Describes a set of permissions for a security group rule.</p>
        */
    export interface SecurityGroupRuleDescription {
            /**
                * <p>The IPv4 ranges for the security group rule.</p>
                */
            IPV4Range?: string;
            /**
                * <p>The IPv6 ranges for the security group rule.</p>
                */
            IPV6Range?: string;
            /**
                * <p>The ID of the prefix list for the security group rule.</p>
                */
            PrefixListId?: string;
            /**
                * <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number.</p>
                */
            Protocol?: string;
            /**
                * <p>The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of <code>-1</code> indicates all ICMP/ICMPv6 types.</p>
                */
            FromPort?: number;
            /**
                * <p>The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes.</p>
                */
            ToPort?: number;
    }
    export namespace SecurityGroupRuleDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecurityGroupRuleDescription) => any;
    }
    /**
        * <p>Remediation option for the rule specified in the <code>ViolationTarget</code>.</p>
        */
    export interface SecurityGroupRemediationAction {
            /**
                * <p>The remediation action that will be performed.</p>
                */
            RemediationActionType?: RemediationActionType | string;
            /**
                * <p>Brief description of the action that will be performed.</p>
                */
            Description?: string;
            /**
                * <p>The final state of the rule specified in the <code>ViolationTarget</code> after it is remediated.</p>
                */
            RemediationResult?: SecurityGroupRuleDescription;
            /**
                * <p>Indicates if the current action is the default action.</p>
                */
            IsDefaultAction?: boolean;
    }
    export namespace SecurityGroupRemediationAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecurityGroupRemediationAction) => any;
    }
    /**
        * <p>Violation detail for the rule violation in a security group when compared to the primary security group of the Firewall Manager policy.</p>
        */
    export interface AwsVPCSecurityGroupViolation {
            /**
                * <p>The security group rule that is being evaluated.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>A description of the security group that violates the policy.</p>
                */
            ViolationTargetDescription?: string;
            /**
                * <p>List of rules specified in the security group of the Firewall Manager policy that partially match the <code>ViolationTarget</code> rule.</p>
                */
            PartialMatches?: PartialMatch[];
            /**
                * <p>Remediation options for the rule specified in the <code>ViolationTarget</code>.</p>
                */
            PossibleSecurityGroupRemediationActions?: SecurityGroupRemediationAction[];
    }
    export namespace AwsVPCSecurityGroupViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsVPCSecurityGroupViolation) => any;
    }
    /**
        * <p>A DNS Firewall rule group that Firewall Manager
        *        tried to associate with a VPC is already associated with the VPC and can't be associated again. </p>
        */
    export interface DnsDuplicateRuleGroupViolation {
            /**
                * <p>Information about the VPC ID. </p>
                */
            ViolationTarget?: string;
            /**
                * <p>A description of the violation that specifies the rule group and VPC.</p>
                */
            ViolationTargetDescription?: string;
    }
    export namespace DnsDuplicateRuleGroupViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DnsDuplicateRuleGroupViolation) => any;
    }
    /**
        * <p>The VPC that Firewall Manager was applying a DNS Fireall policy to reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed due to the limit. </p>
        */
    export interface DnsRuleGroupLimitExceededViolation {
            /**
                * <p>Information about the VPC ID. </p>
                */
            ViolationTarget?: string;
            /**
                * <p>A description of the violation that specifies the rule group and VPC.</p>
                */
            ViolationTargetDescription?: string;
            /**
                * <p>The number of rule groups currently associated with the VPC.  </p>
                */
            NumberOfRuleGroupsAlreadyAssociated?: number;
    }
    export namespace DnsRuleGroupLimitExceededViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DnsRuleGroupLimitExceededViolation) => any;
    }
    /**
        * <p>A rule group that Firewall Manager
        *        tried to associate with a VPC has the same priority as a rule group that's already associated. </p>
        */
    export interface DnsRuleGroupPriorityConflictViolation {
            /**
                * <p>Information about the VPC ID. </p>
                */
            ViolationTarget?: string;
            /**
                * <p>A description of the violation that specifies the VPC and the rule group that's already associated with it.</p>
                */
            ViolationTargetDescription?: string;
            /**
                * <p>The priority setting of the two conflicting rule groups.</p>
                */
            ConflictingPriority?: number;
            /**
                * <p>The ID of the Firewall Manager DNS Firewall policy that was already applied to the VPC.
                *        This policy contains the rule group that's already associated with the VPC. </p>
                */
            ConflictingPolicyId?: string;
            /**
                * <p>The priorities of rule groups that are already associated with the VPC. To retry your operation,
                *        choose priority settings that aren't in this list for the rule groups in your new DNS Firewall policy. </p>
                */
            UnavailablePriorities?: number[];
    }
    export namespace DnsRuleGroupPriorityConflictViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DnsRuleGroupPriorityConflictViolation) => any;
    }
    /**
        * <p>Contains details about the firewall subnet that violates the policy scope.</p>
        */
    export interface FirewallSubnetIsOutOfScopeViolation {
            /**
                * <p>The ID of the firewall subnet that violates the policy scope.</p>
                */
            FirewallSubnetId?: string;
            /**
                * <p>The VPC ID of the firewall subnet that violates the policy scope.</p>
                */
            VpcId?: string;
            /**
                * <p>The Availability Zone of the firewall subnet that violates the policy scope.</p>
                */
            SubnetAvailabilityZone?: string;
            /**
                * <p>The Availability Zone ID of the firewall subnet that violates the policy scope.</p>
                */
            SubnetAvailabilityZoneId?: string;
            /**
                * <p>The VPC endpoint ID of the firewall subnet that violates the policy scope.</p>
                */
            VpcEndpointId?: string;
    }
    export namespace FirewallSubnetIsOutOfScopeViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallSubnetIsOutOfScopeViolation) => any;
    }
    /**
        * <p>The violation details for a firewall subnet's VPC endpoint that's deleted or missing.</p>
        */
    export interface FirewallSubnetMissingVPCEndpointViolation {
            /**
                * <p>The ID of the firewall that this VPC endpoint is associated with.</p>
                */
            FirewallSubnetId?: string;
            /**
                * <p>The resource ID of the VPC associated with the deleted VPC subnet.</p>
                */
            VpcId?: string;
            /**
                * <p>The name of the Availability Zone of the deleted VPC subnet.</p>
                */
            SubnetAvailabilityZone?: string;
            /**
                * <p>The ID of the Availability Zone of the deleted VPC subnet.</p>
                */
            SubnetAvailabilityZoneId?: string;
    }
    export namespace FirewallSubnetMissingVPCEndpointViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallSubnetMissingVPCEndpointViolation) => any;
    }
    export enum DestinationType {
            IPV4 = "IPV4",
            IPV6 = "IPV6",
            PrefixList = "PREFIX_LIST"
    }
    export enum TargetType {
            CarrierGateway = "CARRIER_GATEWAY",
            EgressOnlyInternetGateway = "EGRESS_ONLY_INTERNET_GATEWAY",
            Gateway = "GATEWAY",
            Instance = "INSTANCE",
            LocalGateway = "LOCAL_GATEWAY",
            NatGateway = "NAT_GATEWAY",
            NetworkInterface = "NETWORK_INTERFACE",
            TransitGateway = "TRANSIT_GATEWAY",
            VPCEndpoint = "VPC_ENDPOINT",
            VPCPeeringConnection = "VPC_PEERING_CONNECTION"
    }
    /**
        * <p>Describes a route in a route table.</p>
        */
    export interface Route {
            /**
                * <p>The type of destination for the route.</p>
                */
            DestinationType?: DestinationType | string;
            /**
                * <p>The type of target for the route.</p>
                */
            TargetType?: TargetType | string;
            /**
                * <p>The destination of the route.</p>
                */
            Destination?: string;
            /**
                * <p>The route's target.</p>
                */
            Target?: string;
    }
    export namespace Route {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Route) => any;
    }
    /**
        * <p>Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.</p>
        */
    export interface NetworkFirewallBlackHoleRouteDetectedViolation {
            /**
                * <p>The subnet that has an inactive state.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>Information about the route table ID.</p>
                */
            RouteTableId?: string;
            /**
                * <p>Information about the VPC ID.</p>
                */
            VpcId?: string;
            /**
                * <p>Information about the route or routes that are in violation.</p>
                */
            ViolatingRoutes?: Route[];
    }
    export namespace NetworkFirewallBlackHoleRouteDetectedViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallBlackHoleRouteDetectedViolation) => any;
    }
    /**
        * <p>Information about the expected route in the route table.</p>
        */
    export interface ExpectedRoute {
            /**
                * <p>Information about the IPv4 CIDR block.</p>
                */
            IpV4Cidr?: string;
            /**
                * <p>Information about the ID of the prefix list for the route.</p>
                */
            PrefixListId?: string;
            /**
                * <p>Information about the IPv6 CIDR block.</p>
                */
            IpV6Cidr?: string;
            /**
                * <p>Information about the contributing subnets.</p>
                */
            ContributingSubnets?: string[];
            /**
                * <p>Information about the allowed targets.</p>
                */
            AllowedTargets?: string[];
            /**
                * <p>Information about the route table ID.</p>
                */
            RouteTableId?: string;
    }
    export namespace ExpectedRoute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExpectedRoute) => any;
    }
    /**
        * <p>Violation detail for the subnet for which internet traffic that hasn't been inspected.</p>
        */
    export interface NetworkFirewallInternetTrafficNotInspectedViolation {
            /**
                * <p>The subnet ID.</p>
                */
            SubnetId?: string;
            /**
                * <p>The subnet Availability Zone.</p>
                */
            SubnetAvailabilityZone?: string;
            /**
                * <p>Information about the route table ID.</p>
                */
            RouteTableId?: string;
            /**
                * <p>The route or routes that are in violation.</p>
                */
            ViolatingRoutes?: Route[];
            /**
                * <p>Information about whether the route table is used in another Availability Zone.</p>
                */
            IsRouteTableUsedInDifferentAZ?: boolean;
            /**
                * <p>Information about the subnet route table for the current firewall.</p>
                */
            CurrentFirewallSubnetRouteTable?: string;
            /**
                * <p>The expected endpoint for the current firewall.</p>
                */
            ExpectedFirewallEndpoint?: string;
            /**
                * <p>The firewall subnet ID.</p>
                */
            FirewallSubnetId?: string;
            /**
                * <p>The firewall subnet routes that are expected.</p>
                */
            ExpectedFirewallSubnetRoutes?: ExpectedRoute[];
            /**
                * <p>The actual firewall subnet routes.</p>
                */
            ActualFirewallSubnetRoutes?: Route[];
            /**
                * <p>The internet gateway ID.</p>
                */
            InternetGatewayId?: string;
            /**
                * <p>The current route table for the internet gateway.</p>
                */
            CurrentInternetGatewayRouteTable?: string;
            /**
                * <p>The internet gateway routes that are expected.</p>
                */
            ExpectedInternetGatewayRoutes?: ExpectedRoute[];
            /**
                * <p>The actual internet gateway routes.</p>
                */
            ActualInternetGatewayRoutes?: Route[];
            /**
                * <p>Information about the VPC ID.</p>
                */
            VpcId?: string;
    }
    export namespace NetworkFirewallInternetTrafficNotInspectedViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallInternetTrafficNotInspectedViolation) => any;
    }
    /**
        * <p>Violation detail for the improperly configured subnet route. It's possible there is a missing route table route,
        *       or a configuration that causes traffic to cross an Availability Zone boundary.</p>
        */
    export interface NetworkFirewallInvalidRouteConfigurationViolation {
            /**
                * <p>The subnets that are affected.</p>
                */
            AffectedSubnets?: string[];
            /**
                * <p>The route table ID.</p>
                */
            RouteTableId?: string;
            /**
                * <p>Information about whether the route table is used in another Availability Zone.</p>
                */
            IsRouteTableUsedInDifferentAZ?: boolean;
            /**
                * <p>The route that's in violation.</p>
                */
            ViolatingRoute?: Route;
            /**
                * <p>The subnet route table for the current firewall.</p>
                */
            CurrentFirewallSubnetRouteTable?: string;
            /**
                * <p>The firewall endpoint that's expected.</p>
                */
            ExpectedFirewallEndpoint?: string;
            /**
                * <p>The actual firewall endpoint.</p>
                */
            ActualFirewallEndpoint?: string;
            /**
                * <p>The expected subnet ID for the firewall.</p>
                */
            ExpectedFirewallSubnetId?: string;
            /**
                * <p>The actual subnet ID for the firewall.</p>
                */
            ActualFirewallSubnetId?: string;
            /**
                * <p>The firewall subnet routes that are expected.</p>
                */
            ExpectedFirewallSubnetRoutes?: ExpectedRoute[];
            /**
                * <p>The actual firewall subnet routes that are expected.</p>
                */
            ActualFirewallSubnetRoutes?: Route[];
            /**
                * <p>The internet gateway ID.</p>
                */
            InternetGatewayId?: string;
            /**
                * <p>The route table for the current internet gateway.</p>
                */
            CurrentInternetGatewayRouteTable?: string;
            /**
                * <p>The expected routes for the internet gateway.</p>
                */
            ExpectedInternetGatewayRoutes?: ExpectedRoute[];
            /**
                * <p>The actual internet gateway routes.</p>
                */
            ActualInternetGatewayRoutes?: Route[];
            /**
                * <p>Information about the VPC ID.</p>
                */
            VpcId?: string;
    }
    export namespace NetworkFirewallInvalidRouteConfigurationViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallInvalidRouteConfigurationViolation) => any;
    }
    /**
        * <p>Violation detail for an expected route missing in Network Firewall.</p>
        */
    export interface NetworkFirewallMissingExpectedRoutesViolation {
            /**
                * <p>The target of the violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The expected routes.</p>
                */
            ExpectedRoutes?: ExpectedRoute[];
            /**
                * <p>Information about the VPC ID.</p>
                */
            VpcId?: string;
    }
    export namespace NetworkFirewallMissingExpectedRoutesViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallMissingExpectedRoutesViolation) => any;
    }
    /**
        * <p>Violation detail for Network Firewall for a subnet that's not associated to the expected
        *        Firewall Manager managed route table.</p>
        */
    export interface NetworkFirewallMissingExpectedRTViolation {
            /**
                * <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The resource ID of the VPC associated with a violating subnet.</p>
                */
            VPC?: string;
            /**
                * <p>The Availability Zone of a violating subnet. </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The resource ID of the current route table that's associated with the subnet, if one is available.</p>
                */
            CurrentRouteTable?: string;
            /**
                * <p>The resource ID of the route table that should be associated with the subnet.</p>
                */
            ExpectedRouteTable?: string;
    }
    export namespace NetworkFirewallMissingExpectedRTViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallMissingExpectedRTViolation) => any;
    }
    /**
        * <p>Violation detail for Network Firewall for a subnet that doesn't have a
        *        Firewall Manager managed firewall in its VPC. </p>
        */
    export interface NetworkFirewallMissingFirewallViolation {
            /**
                * <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The resource ID of the VPC associated with a violating subnet.</p>
                */
            VPC?: string;
            /**
                * <p>The Availability Zone of a violating subnet. </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The reason the resource has this violation, if one is available. </p>
                */
            TargetViolationReason?: string;
    }
    export namespace NetworkFirewallMissingFirewallViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallMissingFirewallViolation) => any;
    }
    /**
        * <p>Violation detail for Network Firewall for an Availability Zone that's
        *        missing the expected Firewall Manager managed subnet.</p>
        */
    export interface NetworkFirewallMissingSubnetViolation {
            /**
                * <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The resource ID of the VPC associated with a violating subnet.</p>
                */
            VPC?: string;
            /**
                * <p>The Availability Zone of a violating subnet. </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The reason the resource has this violation, if one is available. </p>
                */
            TargetViolationReason?: string;
    }
    export namespace NetworkFirewallMissingSubnetViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallMissingSubnetViolation) => any;
    }
    export enum RuleOrder {
            DEFAULT_ACTION_ORDER = "DEFAULT_ACTION_ORDER",
            STRICT_ORDER = "STRICT_ORDER"
    }
    /**
        * <p>Configuration settings for the handling of the stateful rule groups in a Network Firewall firewall policy.</p>
        */
    export interface StatefulEngineOptions {
            /**
                * <p>Indicates how to manage the order of stateful rule evaluation for the policy.
                * <code>DEFAULT_ACTION_ORDER</code> is the default behavior. Stateful rules are provided to the rule engine
                * as Suricata compatible strings, and Suricata evaluates them based on certain settings. For more
                * information, see <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html">Evaluation order for stateful rules</a> in the <i>Network Firewall Developer Guide</i>.</p>
                */
            RuleOrder?: RuleOrder | string;
    }
    export namespace StatefulEngineOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatefulEngineOptions) => any;
    }
    /**
        * <p>Network Firewall stateful rule group, used in a <a>NetworkFirewallPolicyDescription</a>. </p>
        */
    export interface StatefulRuleGroup {
            /**
                * <p>The name of the rule group.</p>
                */
            RuleGroupName?: string;
            /**
                * <p>The resource ID of the rule group.</p>
                */
            ResourceId?: string;
            /**
                * <p>An integer setting that indicates the order in which to run the stateful rule groups in a single
                * Network Firewall firewall policy. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code>
                * rule order in the stateful engine options settings.</p>
                *          <p>
                *   Network Firewall evalutes each stateful rule group against a packet starting with the group that has
                * the lowest priority setting. You must ensure that the priority settings are unique within each policy. For information about
                * </p>
                *          <p>
                *   You can change the priority settings of your rule groups at any time. To make it easier to insert rule
                * groups later, number them so there's a wide range in between, for example use 100, 200, and so on.
                * </p>
                */
            Priority?: number;
    }
    export namespace StatefulRuleGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatefulRuleGroup) => any;
    }
    /**
        * <p>Network Firewall stateless rule group, used in a <a>NetworkFirewallPolicyDescription</a>. </p>
        */
    export interface StatelessRuleGroup {
            /**
                * <p>The name of the rule group.</p>
                */
            RuleGroupName?: string;
            /**
                * <p>The resource ID of the rule group.</p>
                */
            ResourceId?: string;
            /**
                * <p>The priority of the rule group. Network Firewall evaluates the stateless rule groups in a firewall policy starting from the lowest priority setting. </p>
                */
            Priority?: number;
    }
    export namespace StatelessRuleGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatelessRuleGroup) => any;
    }
    /**
        * <p>The definition of the Network Firewall firewall policy.</p>
        */
    export interface NetworkFirewallPolicyDescription {
            /**
                * <p>The stateless rule groups that are used in the Network Firewall firewall policy. </p>
                */
            StatelessRuleGroups?: StatelessRuleGroup[];
            /**
                * <p>The actions to take on packets that don't match any of the stateless rule groups. </p>
                */
            StatelessDefaultActions?: string[];
            /**
                * <p>The actions to take on packet fragments that don't match any of the stateless rule groups. </p>
                */
            StatelessFragmentDefaultActions?: string[];
            /**
                * <p>Names of custom actions that are available for use in the stateless default actions settings.</p>
                */
            StatelessCustomActions?: string[];
            /**
                * <p>The stateful rule groups that are used in the Network Firewall firewall policy. </p>
                */
            StatefulRuleGroups?: StatefulRuleGroup[];
            /**
                * <p>The default actions to take on a packet that doesn't match any stateful rules. The stateful default
                * action is optional, and is only valid when using the strict rule order.</p>
                *          <p>
                *   Valid values of the stateful default action:
                * </p>
                *          <ul>
                *             <li>
                *                <p>aws:drop_strict</p>
                *             </li>
                *             <li>
                *                <p>aws:drop_established</p>
                *             </li>
                *             <li>
                *                <p>aws:alert_strict</p>
                *             </li>
                *             <li>
                *                <p>aws:alert_established</p>
                *             </li>
                *          </ul>
                */
            StatefulDefaultActions?: string[];
            /**
                * <p>Additional options governing how Network Firewall handles stateful rules. The stateful rule groups
                * that you use in your policy must have stateful rule options settings that are compatible with these
                * settings.</p>
                */
            StatefulEngineOptions?: StatefulEngineOptions;
    }
    export namespace NetworkFirewallPolicyDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallPolicyDescription) => any;
    }
    /**
        * <p>Violation detail for Network Firewall for a firewall policy that has a different
        *        <a>NetworkFirewallPolicyDescription</a> than is required by the Firewall Manager policy. </p>
        */
    export interface NetworkFirewallPolicyModifiedViolation {
            /**
                * <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The policy that's currently in use in the individual account. </p>
                */
            CurrentPolicyDescription?: NetworkFirewallPolicyDescription;
            /**
                * <p>The policy that should be in use in the individual account in order to be compliant. </p>
                */
            ExpectedPolicyDescription?: NetworkFirewallPolicyDescription;
    }
    export namespace NetworkFirewallPolicyModifiedViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallPolicyModifiedViolation) => any;
    }
    /**
        * <p>Violation detail for an unexpected route that's present in a route table.</p>
        */
    export interface NetworkFirewallUnexpectedFirewallRoutesViolation {
            /**
                * <p>The subnet ID for the firewall.</p>
                */
            FirewallSubnetId?: string;
            /**
                * <p>The routes that are in violation.</p>
                */
            ViolatingRoutes?: Route[];
            /**
                * <p>The ID of the route table.</p>
                */
            RouteTableId?: string;
            /**
                * <p>The endpoint of the firewall.</p>
                */
            FirewallEndpoint?: string;
            /**
                * <p>Information about the VPC ID.</p>
                */
            VpcId?: string;
    }
    export namespace NetworkFirewallUnexpectedFirewallRoutesViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallUnexpectedFirewallRoutesViolation) => any;
    }
    /**
        * <p>Violation detail for an unexpected gateway route that’s present in a route table.</p>
        */
    export interface NetworkFirewallUnexpectedGatewayRoutesViolation {
            /**
                * <p>Information about the gateway ID.</p>
                */
            GatewayId?: string;
            /**
                * <p>The routes that are in violation.</p>
                */
            ViolatingRoutes?: Route[];
            /**
                * <p>Information about the  route table.</p>
                */
            RouteTableId?: string;
            /**
                * <p>Information about the VPC ID.</p>
                */
            VpcId?: string;
    }
    export namespace NetworkFirewallUnexpectedGatewayRoutesViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkFirewallUnexpectedGatewayRoutesViolation) => any;
    }
    /**
        * <p>The action of associating an EC2 resource, such as a subnet or internet gateway, with a route table.</p>
        */
    export interface EC2AssociateRouteTableAction {
            /**
                * <p>A description of the EC2 route table that is associated with the remediation action.</p>
                */
            Description?: string;
            /**
                * <p>The ID of the EC2 route table that is associated with the remediation action.</p>
                */
            RouteTableId: ActionTarget | undefined;
            /**
                * <p>The ID of the subnet for the EC2 route table that is associated with the remediation action.</p>
                */
            SubnetId?: ActionTarget;
            /**
                * <p>The ID of the gateway to be used with the EC2 route table that is associated with the remediation action.</p>
                */
            GatewayId?: ActionTarget;
    }
    export namespace EC2AssociateRouteTableAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2AssociateRouteTableAction) => any;
    }
    /**
        * <p>An action that copies the EC2 route table for use in remediation.</p>
        */
    export interface EC2CopyRouteTableAction {
            /**
                * <p>A description of the copied EC2 route table that is associated with the remediation action.</p>
                */
            Description?: string;
            /**
                * <p>The VPC ID of the copied EC2 route table that is associated with the remediation action.</p>
                */
            VpcId: ActionTarget | undefined;
            /**
                * <p>The ID of the copied EC2 route table that is associated with the remediation action.</p>
                */
            RouteTableId: ActionTarget | undefined;
    }
    export namespace EC2CopyRouteTableAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2CopyRouteTableAction) => any;
    }
    /**
        * <p>Information about the CreateRoute action in Amazon EC2.</p>
        */
    export interface EC2CreateRouteAction {
            /**
                * <p>A description of CreateRoute action in Amazon EC2.</p>
                */
            Description?: string;
            /**
                * <p>Information about the IPv4 CIDR address block used for the destination match.</p>
                */
            DestinationCidrBlock?: string;
            /**
                * <p>Information about the ID of a prefix list used for the destination match.</p>
                */
            DestinationPrefixListId?: string;
            /**
                * <p>Information about the IPv6 CIDR block destination.</p>
                */
            DestinationIpv6CidrBlock?: string;
            /**
                * <p>Information about the ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.</p>
                */
            VpcEndpointId?: ActionTarget;
            /**
                * <p>Information about the ID of an internet gateway or virtual private gateway attached to your VPC.</p>
                */
            GatewayId?: ActionTarget;
            /**
                * <p>Information about the ID of the route table for the route.</p>
                */
            RouteTableId: ActionTarget | undefined;
    }
    export namespace EC2CreateRouteAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2CreateRouteAction) => any;
    }
    /**
        * <p>Information about the CreateRouteTable action in Amazon EC2.</p>
        */
    export interface EC2CreateRouteTableAction {
            /**
                * <p>A description of the CreateRouteTable action.</p>
                */
            Description?: string;
            /**
                * <p>Information about the ID of a VPC.</p>
                */
            VpcId: ActionTarget | undefined;
    }
    export namespace EC2CreateRouteTableAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2CreateRouteTableAction) => any;
    }
    /**
        * <p>Information about the DeleteRoute action in Amazon EC2.</p>
        */
    export interface EC2DeleteRouteAction {
            /**
                * <p>A description of the DeleteRoute action.</p>
                */
            Description?: string;
            /**
                * <p>Information about the IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
                */
            DestinationCidrBlock?: string;
            /**
                * <p>Information about the ID of the prefix list for the route.</p>
                */
            DestinationPrefixListId?: string;
            /**
                * <p>Information about the IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.</p>
                */
            DestinationIpv6CidrBlock?: string;
            /**
                * <p>Information about the ID of the route table.</p>
                */
            RouteTableId: ActionTarget | undefined;
    }
    export namespace EC2DeleteRouteAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2DeleteRouteAction) => any;
    }
    /**
        * <p>Information about the ReplaceRoute action in Amazon EC2.</p>
        */
    export interface EC2ReplaceRouteAction {
            /**
                * <p>A description of the ReplaceRoute action in Amazon EC2.</p>
                */
            Description?: string;
            /**
                * <p>Information about the IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.</p>
                */
            DestinationCidrBlock?: string;
            /**
                * <p>Information about the ID of the prefix list for the route.</p>
                */
            DestinationPrefixListId?: string;
            /**
                * <p>Information about the IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.</p>
                */
            DestinationIpv6CidrBlock?: string;
            /**
                * <p>Information about the ID of an internet gateway or virtual private gateway.</p>
                */
            GatewayId?: ActionTarget;
            /**
                * <p>Information about the ID of the route table.</p>
                */
            RouteTableId: ActionTarget | undefined;
    }
    export namespace EC2ReplaceRouteAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2ReplaceRouteAction) => any;
    }
    /**
        * <p>Information about the ReplaceRouteTableAssociation action in Amazon EC2.</p>
        */
    export interface EC2ReplaceRouteTableAssociationAction {
            /**
                * <p>A description of the ReplaceRouteTableAssociation action in Amazon EC2.</p>
                */
            Description?: string;
            /**
                * <p>Information about the association ID.</p>
                */
            AssociationId: ActionTarget | undefined;
            /**
                * <p>Information about the ID of the new route table to associate with the subnet.</p>
                */
            RouteTableId: ActionTarget | undefined;
    }
    export namespace EC2ReplaceRouteTableAssociationAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2ReplaceRouteTableAssociationAction) => any;
    }
    /**
        * <p>Contains information about the actions that you can take to remediate scope violations
        *          caused by your policy's <code>FirewallCreationConfig</code>.
        *             <code>FirewallCreationConfig</code> is an optional configuration that you can use to
        *          choose which Availability Zones Firewall Manager creates Network Firewall endpoints in.</p>
        */
    export interface FMSPolicyUpdateFirewallCreationConfigAction {
            /**
                * <p>Describes the remedial action.</p>
                */
            Description?: string;
            /**
                * <p>A <code>FirewallCreationConfig</code> that you can copy into your current policy's
                *             <a href="https://docs.aws.amazon.com/fms/2018-01-01/APIReference/API_SecurityServicePolicyData.html">SecurityServiceData</a> in order to remedy scope violations.</p>
                */
            FirewallCreationConfig?: string;
    }
    export namespace FMSPolicyUpdateFirewallCreationConfigAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FMSPolicyUpdateFirewallCreationConfigAction) => any;
    }
    /**
        * <p>Information about an individual action you can take to remediate a violation.</p>
        */
    export interface RemediationAction {
            /**
                * <p>A description of a remediation action.</p>
                */
            Description?: string;
            /**
                * <p>Information about the CreateRoute action in the Amazon EC2 API.</p>
                */
            EC2CreateRouteAction?: EC2CreateRouteAction;
            /**
                * <p>Information about the ReplaceRoute action in the Amazon EC2 API.</p>
                */
            EC2ReplaceRouteAction?: EC2ReplaceRouteAction;
            /**
                * <p>Information about the DeleteRoute action in the Amazon EC2 API.</p>
                */
            EC2DeleteRouteAction?: EC2DeleteRouteAction;
            /**
                * <p>Information about the CopyRouteTable action in the Amazon EC2 API.</p>
                */
            EC2CopyRouteTableAction?: EC2CopyRouteTableAction;
            /**
                * <p>Information about the ReplaceRouteTableAssociation action in the Amazon EC2 API.</p>
                */
            EC2ReplaceRouteTableAssociationAction?: EC2ReplaceRouteTableAssociationAction;
            /**
                * <p>Information about the AssociateRouteTable action in the Amazon EC2 API.</p>
                */
            EC2AssociateRouteTableAction?: EC2AssociateRouteTableAction;
            /**
                * <p>Information about the CreateRouteTable action in the Amazon EC2 API.</p>
                */
            EC2CreateRouteTableAction?: EC2CreateRouteTableAction;
            /**
                * <p>The remedial action to take when updating a firewall configuration.</p>
                */
            FMSPolicyUpdateFirewallCreationConfigAction?: FMSPolicyUpdateFirewallCreationConfigAction;
    }
    export namespace RemediationAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationAction) => any;
    }
    /**
        * <p>An ordered list of actions you can take to remediate a violation.</p>
        */
    export interface RemediationActionWithOrder {
            /**
                * <p>Information about an action you can take to remediate a violation.</p>
                */
            RemediationAction?: RemediationAction;
            /**
                * <p>The order of the remediation actions in the list.</p>
                */
            Order?: number;
    }
    export namespace RemediationActionWithOrder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemediationActionWithOrder) => any;
    }
    /**
        * <p>A list of remediation actions.</p>
        */
    export interface PossibleRemediationAction {
            /**
                * <p>A description of the list of remediation actions.</p>
                */
            Description?: string;
            /**
                * <p>The ordered list of remediation actions.</p>
                */
            OrderedRemediationActions: RemediationActionWithOrder[] | undefined;
            /**
                * <p>Information about whether an action is taken by default.</p>
                */
            IsDefaultAction?: boolean;
    }
    export namespace PossibleRemediationAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PossibleRemediationAction) => any;
    }
    /**
        * <p>A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.</p>
        */
    export interface PossibleRemediationActions {
            /**
                * <p>A description of the possible remediation actions list.</p>
                */
            Description?: string;
            /**
                * <p>Information about the actions.</p>
                */
            Actions?: PossibleRemediationAction[];
    }
    export namespace PossibleRemediationActions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PossibleRemediationActions) => any;
    }
    /**
        * <p>Contains details about the route endpoint that violates the policy scope.</p>
        */
    export interface RouteHasOutOfScopeEndpointViolation {
            /**
                * <p>The ID of the subnet associated with the route that violates the policy scope.</p>
                */
            SubnetId?: string;
            /**
                * <p>The VPC ID of the route that violates the policy scope.</p>
                */
            VpcId?: string;
            /**
                * <p>The ID of the route table.</p>
                */
            RouteTableId?: string;
            /**
                * <p>The list of routes that violate the route table.</p>
                */
            ViolatingRoutes?: Route[];
            /**
                * <p>The subnet's Availability Zone.</p>
                */
            SubnetAvailabilityZone?: string;
            /**
                * <p>The ID of the subnet's Availability Zone.</p>
                */
            SubnetAvailabilityZoneId?: string;
            /**
                * <p>The route table associated with the current firewall subnet.</p>
                */
            CurrentFirewallSubnetRouteTable?: string;
            /**
                * <p>The ID of the firewall subnet.</p>
                */
            FirewallSubnetId?: string;
            /**
                * <p>The list of firewall subnet routes.</p>
                */
            FirewallSubnetRoutes?: Route[];
            /**
                * <p>The ID of the Internet Gateway.</p>
                */
            InternetGatewayId?: string;
            /**
                * <p>The current route table associated with the Internet Gateway.</p>
                */
            CurrentInternetGatewayRouteTable?: string;
            /**
                * <p>The routes in the route table associated with the Internet Gateway.</p>
                */
            InternetGatewayRoutes?: Route[];
    }
    export namespace RouteHasOutOfScopeEndpointViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteHasOutOfScopeEndpointViolation) => any;
    }
    /**
        * <p>The violation details for a third-party firewall that's not associated with an Firewall Manager managed route table.</p>
        */
    export interface ThirdPartyFirewallMissingExpectedRouteTableViolation {
            /**
                * <p>The ID of the third-party firewall or VPC resource that's causing the violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The resource ID of the VPC associated with a fireawll subnet that's causing the violation.</p>
                */
            VPC?: string;
            /**
                * <p>The Availability Zone of the firewall subnet that's causing the violation.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The resource ID of the current route table that's associated with the subnet, if one is available.</p>
                */
            CurrentRouteTable?: string;
            /**
                * <p>The resource ID of the route table that should be associated with the subnet.</p>
                */
            ExpectedRouteTable?: string;
    }
    export namespace ThirdPartyFirewallMissingExpectedRouteTableViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThirdPartyFirewallMissingExpectedRouteTableViolation) => any;
    }
    /**
        * <p>The violation details about a third-party firewall's subnet that doesn't have a Firewall Manager managed firewall in its VPC.</p>
        */
    export interface ThirdPartyFirewallMissingFirewallViolation {
            /**
                * <p>The ID of the third-party firewall that's causing the violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The resource ID of the VPC associated with a third-party firewall.</p>
                */
            VPC?: string;
            /**
                * <p>The Availability Zone of the third-party firewall that's causing the violation.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The reason the resource is causing this violation, if a reason is available.</p>
                */
            TargetViolationReason?: string;
    }
    export namespace ThirdPartyFirewallMissingFirewallViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThirdPartyFirewallMissingFirewallViolation) => any;
    }
    /**
        * <p>The violation details for a third-party firewall for an Availability Zone that's missing the Firewall Manager managed subnet.</p>
        */
    export interface ThirdPartyFirewallMissingSubnetViolation {
            /**
                * <p>The ID of the third-party firewall or VPC resource that's causing the violation.</p>
                */
            ViolationTarget?: string;
            /**
                * <p>The resource ID of the VPC associated with a subnet that's causing the violation.</p>
                */
            VPC?: string;
            /**
                * <p>The Availability Zone of a subnet that's causing the violation.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The reason the resource is causing the violation, if a reason is available.</p>
                */
            TargetViolationReason?: string;
    }
    export namespace ThirdPartyFirewallMissingSubnetViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThirdPartyFirewallMissingSubnetViolation) => any;
    }
    /**
        * <p>Violation detail based on resource type.</p>
        */
    export interface ResourceViolation {
            /**
                * <p>Violation detail for security groups.</p>
                */
            AwsVPCSecurityGroupViolation?: AwsVPCSecurityGroupViolation;
            /**
                * <p>Violation detail for a network interface.</p>
                */
            AwsEc2NetworkInterfaceViolation?: AwsEc2NetworkInterfaceViolation;
            /**
                * <p>Violation detail for an EC2 instance.</p>
                */
            AwsEc2InstanceViolation?: AwsEc2InstanceViolation;
            /**
                * <p>Violation detail for an Network Firewall policy that indicates that a subnet has no Firewall Manager
                *         managed firewall in its VPC. </p>
                */
            NetworkFirewallMissingFirewallViolation?: NetworkFirewallMissingFirewallViolation;
            /**
                * <p>Violation detail for an Network Firewall policy that indicates that an Availability Zone is
                *        missing the expected Firewall Manager managed subnet.</p>
                */
            NetworkFirewallMissingSubnetViolation?: NetworkFirewallMissingSubnetViolation;
            /**
                * <p>Violation detail for an Network Firewall policy that indicates that a subnet
                *       is not associated with the expected Firewall Manager managed route table. </p>
                */
            NetworkFirewallMissingExpectedRTViolation?: NetworkFirewallMissingExpectedRTViolation;
            /**
                * <p>Violation detail for an Network Firewall policy that indicates that a firewall policy
                *        in an individual account has been modified in a way that makes it noncompliant.
                *        For example, the individual account owner might have deleted a rule group,
                *        changed the priority of a stateless rule group, or changed a policy default action.</p>
                */
            NetworkFirewallPolicyModifiedViolation?: NetworkFirewallPolicyModifiedViolation;
            /**
                * <p>Violation detail for the subnet for which internet traffic hasn't been inspected.</p>
                */
            NetworkFirewallInternetTrafficNotInspectedViolation?: NetworkFirewallInternetTrafficNotInspectedViolation;
            /**
                * <p>The route configuration is invalid.</p>
                */
            NetworkFirewallInvalidRouteConfigurationViolation?: NetworkFirewallInvalidRouteConfigurationViolation;
            /**
                * <p>Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.</p>
                */
            NetworkFirewallBlackHoleRouteDetectedViolation?: NetworkFirewallBlackHoleRouteDetectedViolation;
            /**
                * <p>There's an unexpected firewall route.</p>
                */
            NetworkFirewallUnexpectedFirewallRoutesViolation?: NetworkFirewallUnexpectedFirewallRoutesViolation;
            /**
                * <p>There's an unexpected gateway route.</p>
                */
            NetworkFirewallUnexpectedGatewayRoutesViolation?: NetworkFirewallUnexpectedGatewayRoutesViolation;
            /**
                * <p>Expected routes are missing from Network Firewall.</p>
                */
            NetworkFirewallMissingExpectedRoutesViolation?: NetworkFirewallMissingExpectedRoutesViolation;
            /**
                * <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager
                *        tried to associate with a VPC has the same priority as a rule group that's already associated. </p>
                */
            DnsRuleGroupPriorityConflictViolation?: DnsRuleGroupPriorityConflictViolation;
            /**
                * <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager
                *        tried to associate with a VPC is already associated with the VPC and can't be associated again. </p>
                */
            DnsDuplicateRuleGroupViolation?: DnsDuplicateRuleGroupViolation;
            /**
                * <p>Violation detail for a DNS Firewall policy that indicates that the VPC reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed. </p>
                */
            DnsRuleGroupLimitExceededViolation?: DnsRuleGroupLimitExceededViolation;
            /**
                * <p>A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.</p>
                */
            PossibleRemediationActions?: PossibleRemediationActions;
            /**
                * <p>Contains details about the firewall subnet that violates the policy scope.</p>
                */
            FirewallSubnetIsOutOfScopeViolation?: FirewallSubnetIsOutOfScopeViolation;
            /**
                * <p>Contains details about the route endpoint that violates the policy scope.</p>
                */
            RouteHasOutOfScopeEndpointViolation?: RouteHasOutOfScopeEndpointViolation;
            /**
                * <p>The violation details for a third-party firewall that's been deleted.</p>
                */
            ThirdPartyFirewallMissingFirewallViolation?: ThirdPartyFirewallMissingFirewallViolation;
            /**
                * <p>The violation details for a third-party firewall's subnet that's been deleted.</p>
                */
            ThirdPartyFirewallMissingSubnetViolation?: ThirdPartyFirewallMissingSubnetViolation;
            /**
                * <p>The violation details for a third-party firewall that has the Firewall Manager managed route table that was associated with the third-party firewall has been deleted.</p>
                */
            ThirdPartyFirewallMissingExpectedRouteTableViolation?: ThirdPartyFirewallMissingExpectedRouteTableViolation;
            /**
                * <p>The violation details for a third-party firewall's VPC endpoint subnet that was deleted.</p>
                */
            FirewallSubnetMissingVPCEndpointViolation?: FirewallSubnetMissingVPCEndpointViolation;
    }
    export namespace ResourceViolation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceViolation) => any;
    }
    /**
        * <p>Violations for a resource based on the specified Firewall Manager policy and Amazon Web Services account.</p>
        */
    export interface ViolationDetail {
            /**
                * <p>The ID of the Firewall Manager policy that the violation details were requested for.</p>
                */
            PolicyId: string | undefined;
            /**
                * <p>The Amazon Web Services account that the violation details were requested for.</p>
                */
            MemberAccount: string | undefined;
            /**
                * <p>The resource ID that the violation details were requested for.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The resource type that the violation details were requested for.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>List of violations for the requested resource.</p>
                */
            ResourceViolations: ResourceViolation[] | undefined;
            /**
                * <p>The <code>ResourceTag</code> objects associated with the resource.</p>
                */
            ResourceTags?: Tag[];
            /**
                * <p>Brief description for the requested resource.</p>
                */
            ResourceDescription?: string;
    }
    export namespace ViolationDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ViolationDetail) => any;
    }
    export interface GetViolationDetailsResponse {
            /**
                * <p>Violation detail for a resource.</p>
                */
            ViolationDetail?: ViolationDetail;
    }
    export namespace GetViolationDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetViolationDetailsResponse) => any;
    }
    export interface ListAppsListsRequest {
            /**
                * <p>Specifies whether the lists to retrieve are default lists owned by Firewall Manager.</p>
                */
            DefaultLists?: boolean;
            /**
                * <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum,
                *         Firewall Manager returns this token in the response. For all but the first request, you provide the token returned by the prior request
                *         in the request parameters, to retrieve the next batch of objects.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of objects that you want Firewall Manager to return for this request. If more
                *             objects are available, in the response, Firewall Manager provides a
                *            <code>NextToken</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                *          <p>If you don't specify this, Firewall Manager returns all available objects.</p>
                */
            MaxResults: number | undefined;
    }
    export namespace ListAppsListsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppsListsRequest) => any;
    }
    export interface ListAppsListsResponse {
            /**
                * <p>An array of <code>AppsListDataSummary</code> objects.</p>
                */
            AppsLists?: AppsListDataSummary[];
            /**
                * <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum,
                *         Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
                */
            NextToken?: string;
    }
    export namespace ListAppsListsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppsListsResponse) => any;
    }
    export interface ListComplianceStatusRequest {
            /**
                * <p>The ID of the Firewall Manager policy that you want the details for.</p>
                */
            PolicyId: string | undefined;
            /**
                * <p>If you specify a value for <code>MaxResults</code> and you have more
                *         <code>PolicyComplianceStatus</code> objects than the number that you specify for
                *         <code>MaxResults</code>, Firewall Manager returns a <code>NextToken</code> value in the
                *       response that allows you to list another group of <code>PolicyComplianceStatus</code> objects.
                *       For the second and subsequent <code>ListComplianceStatus</code> requests, specify the value of
                *         <code>NextToken</code> from the previous response to get information about another batch of
                *         <code>PolicyComplianceStatus</code> objects.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies the number of <code>PolicyComplianceStatus</code> objects that you want
                *       Firewall Manager to return for this request. If you have more
                *         <code>PolicyComplianceStatus</code> objects than the number that you specify for
                *         <code>MaxResults</code>, the response includes a <code>NextToken</code> value that you can
                *       use to get another batch of <code>PolicyComplianceStatus</code> objects.</p>
                */
            MaxResults?: number;
    }
    export namespace ListComplianceStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComplianceStatusRequest) => any;
    }
    export enum PolicyComplianceStatusType {
            Compliant = "COMPLIANT",
            NonCompliant = "NON_COMPLIANT"
    }
    /**
        * <p>Describes the compliance status for the account. An account is considered noncompliant if
        *       it includes resources that are not protected by the specified policy or that don't comply with
        *       the policy.</p>
        */
    export interface EvaluationResult {
            /**
                * <p>Describes an Amazon Web Services account's compliance with the Firewall Manager policy.</p>
                */
            ComplianceStatus?: PolicyComplianceStatusType | string;
            /**
                * <p>The number of resources that are noncompliant with the specified policy. For WAF and
                *       Shield Advanced policies, a resource is considered noncompliant if it is not associated with
                *       the policy. For security group policies, a resource is considered noncompliant if it doesn't
                *       comply with the rules of the policy and remediation is disabled or not possible.</p>
                */
            ViolatorCount?: number;
            /**
                * <p>Indicates that over 100 resources are noncompliant with the Firewall Manager
                *       policy.</p>
                */
            EvaluationLimitExceeded?: boolean;
    }
    export namespace EvaluationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationResult) => any;
    }
    /**
        * <p>Indicates whether the account is compliant with the specified policy. An account is
        *       considered noncompliant if it includes resources that are not protected by the policy, for
        *       WAF and Shield Advanced policies, or that are noncompliant with the policy, for security group
        *       policies.</p>
        */
    export interface PolicyComplianceStatus {
            /**
                * <p>The Amazon Web Services account that created the Firewall Manager policy.</p>
                */
            PolicyOwner?: string;
            /**
                * <p>The ID of the Firewall Manager policy.</p>
                */
            PolicyId?: string;
            /**
                * <p>The name of the Firewall Manager policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The member account ID.</p>
                */
            MemberAccount?: string;
            /**
                * <p>An array of <code>EvaluationResult</code> objects.</p>
                */
            EvaluationResults?: EvaluationResult[];
            /**
                * <p>Timestamp of the last update to the <code>EvaluationResult</code> objects.</p>
                */
            LastUpdated?: Date;
            /**
                * <p>Details about problems with dependent services, such as WAF or Config,
                *       and the error message received that indicates the problem with the service.</p>
                */
            IssueInfoMap?: Record<string, string>;
    }
    export namespace PolicyComplianceStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyComplianceStatus) => any;
    }
    export interface ListComplianceStatusResponse {
            /**
                * <p>An array of <code>PolicyComplianceStatus</code> objects.</p>
                */
            PolicyComplianceStatusList?: PolicyComplianceStatus[];
            /**
                * <p>If you have more <code>PolicyComplianceStatus</code> objects than the number that you
                *       specified for <code>MaxResults</code> in the request, the response includes a
                *         <code>NextToken</code> value. To list more <code>PolicyComplianceStatus</code> objects,
                *       submit another <code>ListComplianceStatus</code> request, and specify the
                *         <code>NextToken</code> value from the response in the <code>NextToken</code> value in the
                *       next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListComplianceStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComplianceStatusResponse) => any;
    }
    export interface ListMemberAccountsRequest {
            /**
                * <p>If you specify a value for <code>MaxResults</code> and you have more account IDs than the
                *       number that you specify for <code>MaxResults</code>, Firewall Manager returns a
                *         <code>NextToken</code> value in the response that allows you to list another group of IDs.
                *       For the second and subsequent <code>ListMemberAccountsRequest</code> requests, specify the
                *       value of <code>NextToken</code> from the previous response to get information about another
                *       batch of member account IDs.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies the number of member account IDs that you want Firewall Manager to return
                *       for this request. If you have more IDs than the number that you specify for
                *         <code>MaxResults</code>, the response includes a <code>NextToken</code> value that you can
                *       use to get another batch of member account IDs.</p>
                */
            MaxResults?: number;
    }
    export namespace ListMemberAccountsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMemberAccountsRequest) => any;
    }
    export interface ListMemberAccountsResponse {
            /**
                * <p>An array of account IDs.</p>
                */
            MemberAccounts?: string[];
            /**
                * <p>If you have more member account IDs than the number that you specified for
                *         <code>MaxResults</code> in the request, the response includes a <code>NextToken</code>
                *       value. To list more IDs, submit another <code>ListMemberAccounts</code> request, and specify
                *       the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the
                *       next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListMemberAccountsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMemberAccountsResponse) => any;
    }
    export interface ListPoliciesRequest {
            /**
                * <p>If you specify a value for <code>MaxResults</code> and you have more
                *         <code>PolicySummary</code> objects than the number that you specify for
                *         <code>MaxResults</code>, Firewall Manager returns a <code>NextToken</code> value in the
                *       response that allows you to list another group of <code>PolicySummary</code> objects. For the
                *       second and subsequent <code>ListPolicies</code> requests, specify the value of
                *         <code>NextToken</code> from the previous response to get information about another batch of
                *         <code>PolicySummary</code> objects.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies the number of <code>PolicySummary</code> objects that you want Firewall Manager to return for this request. If you have more <code>PolicySummary</code> objects than
                *       the number that you specify for <code>MaxResults</code>, the response includes a
                *         <code>NextToken</code> value that you can use to get another batch of
                *         <code>PolicySummary</code> objects.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPoliciesRequest) => any;
    }
    /**
        * <p>Details of the Firewall Manager policy. </p>
        */
    export interface PolicySummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the specified policy.</p>
                */
            PolicyArn?: string;
            /**
                * <p>The ID of the specified policy.</p>
                */
            PolicyId?: string;
            /**
                * <p>The name of the specified policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The type of resource protected by or in scope of the policy. This is in the format shown
                *         in the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services Resource Types Reference</a>.
                *             For WAF and Shield Advanced, examples include
                *         <code>AWS::ElasticLoadBalancingV2::LoadBalancer</code> and
                *         <code>AWS::CloudFront::Distribution</code>. For a security group common policy, valid values
                *       are <code>AWS::EC2::NetworkInterface</code> and <code>AWS::EC2::Instance</code>. For a
                *       security group content audit policy, valid values are <code>AWS::EC2::SecurityGroup</code>,
                *         <code>AWS::EC2::NetworkInterface</code>, and <code>AWS::EC2::Instance</code>. For a security
                *       group usage audit policy, the value is <code>AWS::EC2::SecurityGroup</code>. For an Network Firewall policy or DNS Firewall policy,
                *           the value is <code>AWS::EC2::VPC</code>.</p>
                */
            ResourceType?: string;
            /**
                * <p>The service that the policy is using to protect the resources. This specifies the type of
                *       policy that is created, either an WAF policy, a Shield Advanced policy, or a security
                *       group policy.</p>
                */
            SecurityServiceType?: SecurityServiceType | string;
            /**
                * <p>Indicates if the policy should be automatically applied to new resources.</p>
                */
            RemediationEnabled?: boolean;
            /**
                * <p>Indicates whether Firewall Manager should automatically remove protections from resources that leave the policy scope and clean up resources
                *        that Firewall Manager is managing for accounts when those accounts leave policy scope. For example, Firewall Manager will disassociate a Firewall Manager managed web ACL
                *        from a protected customer resource when the customer resource leaves policy scope. </p>
                *          <p>By default, Firewall Manager doesn't remove protections or delete Firewall Manager managed resources. </p>
                *          <p>This option is not available for Shield Advanced or WAF Classic policies.</p>
                */
            DeleteUnusedFMManagedResources?: boolean;
    }
    export namespace PolicySummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicySummary) => any;
    }
    export interface ListPoliciesResponse {
            /**
                * <p>An array of <code>PolicySummary</code> objects.</p>
                */
            PolicyList?: PolicySummary[];
            /**
                * <p>If you have more <code>PolicySummary</code> objects than the number that you specified for
                *         <code>MaxResults</code> in the request, the response includes a <code>NextToken</code>
                *       value. To list more <code>PolicySummary</code> objects, submit another
                *         <code>ListPolicies</code> request, and specify the <code>NextToken</code> value from the
                *       response in the <code>NextToken</code> value in the next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPoliciesResponse) => any;
    }
    export interface ListProtocolsListsRequest {
            /**
                * <p>Specifies whether the lists to retrieve are default lists owned by Firewall Manager.</p>
                */
            DefaultLists?: boolean;
            /**
                * <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum,
                *         Firewall Manager returns this token in the response. For all but the first request, you provide the token returned by the prior request
                *         in the request parameters, to retrieve the next batch of objects.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of objects that you want Firewall Manager to return for this request. If more
                *             objects are available, in the response, Firewall Manager provides a
                *            <code>NextToken</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                *          <p>If you don't specify this, Firewall Manager returns all available objects.</p>
                */
            MaxResults: number | undefined;
    }
    export namespace ListProtocolsListsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProtocolsListsRequest) => any;
    }
    /**
        * <p>Details of the Firewall Manager protocols list.</p>
        */
    export interface ProtocolsListDataSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the specified protocols list.</p>
                */
            ListArn?: string;
            /**
                * <p>The ID of the specified protocols list.</p>
                */
            ListId?: string;
            /**
                * <p>The name of the specified protocols list.</p>
                */
            ListName?: string;
            /**
                * <p>An array of protocols in the Firewall Manager protocols list.</p>
                */
            ProtocolsList?: string[];
    }
    export namespace ProtocolsListDataSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProtocolsListDataSummary) => any;
    }
    export interface ListProtocolsListsResponse {
            /**
                * <p>An array of <code>ProtocolsListDataSummary</code> objects.</p>
                */
            ProtocolsLists?: ProtocolsListDataSummary[];
            /**
                * <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum,
                *         Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
                */
            NextToken?: string;
    }
    export namespace ListProtocolsListsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProtocolsListsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to return tags for. The Firewall Manager resources that support tagging are policies, applications lists, and protocols lists. </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags associated with the resource.</p>
                */
            TagList?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListThirdPartyFirewallFirewallPoliciesRequest {
            /**
                * <p>The name of the third-party firewall vendor.</p>
                */
            ThirdPartyFirewall: ThirdPartyFirewall | string | undefined;
            /**
                * <p>If the previous response included a <code>NextToken</code> element, the specified third-party firewall vendor is associated with more
                * third-party firewall policies. To get more third-party firewall policies, submit another <code>ListThirdPartyFirewallFirewallPoliciesRequest</code> request.</p>
                *          <p>
                *   For the value of <code>NextToken</code>, specify the value of <code>NextToken</code> from the previous response.
                *   If the previous response didn't include a <code>NextToken</code> element, there are no more third-party firewall policies to
                *   get.
                * </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of third-party firewall policies that you want Firewall Manager to return. If
                * the specified third-party firewall vendor is associated with more than <code>MaxResults</code> firewall policies, the response includes a
                * <code>NextToken</code> element. <code>NextToken</code> contains an encrypted token that identifies the first third-party firewall policies
                * that Firewall Manager will return if you submit another request.</p>
                */
            MaxResults: number | undefined;
    }
    export namespace ListThirdPartyFirewallFirewallPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThirdPartyFirewallFirewallPoliciesRequest) => any;
    }
    /**
        * <p>Configures the third-party firewall's firewall policy.</p>
        */
    export interface ThirdPartyFirewallFirewallPolicy {
            /**
                * <p>The ID of the specified firewall policy.</p>
                */
            FirewallPolicyId?: string;
            /**
                * <p>The name of the specified firewall policy.</p>
                */
            FirewallPolicyName?: string;
    }
    export namespace ThirdPartyFirewallFirewallPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThirdPartyFirewallFirewallPolicy) => any;
    }
    export interface ListThirdPartyFirewallFirewallPoliciesResponse {
            /**
                * <p>A list that contains one <code>ThirdPartyFirewallFirewallPolicies</code> element for each third-party firewall policies that the specified
                * third-party firewall vendor is associated with. Each <code>ThirdPartyFirewallFirewallPolicies</code> element contains the firewall policy name and ID.</p>
                */
            ThirdPartyFirewallFirewallPolicies?: ThirdPartyFirewallFirewallPolicy[];
            /**
                * <p>The value that you will use for <code>NextToken</code> in the next <code>ListThirdPartyFirewallFirewallPolicies</code> request.</p>
                */
            NextToken?: string;
    }
    export namespace ListThirdPartyFirewallFirewallPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListThirdPartyFirewallFirewallPoliciesResponse) => any;
    }
    export interface PutAppsListRequest {
            /**
                * <p>The details of the Firewall Manager applications list to be created.</p>
                */
            AppsList: AppsListData | undefined;
            /**
                * <p>The tags associated with the resource.</p>
                */
            TagList?: Tag[];
    }
    export namespace PutAppsListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppsListRequest) => any;
    }
    export interface PutAppsListResponse {
            /**
                * <p>The details of the Firewall Manager applications list.</p>
                */
            AppsList?: AppsListData;
            /**
                * <p>The Amazon Resource Name (ARN) of the applications list.</p>
                */
            AppsListArn?: string;
    }
    export namespace PutAppsListResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAppsListResponse) => any;
    }
    export interface PutNotificationChannelRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic that collects notifications from
                *       Firewall Manager.</p>
                */
            SnsTopicArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record
                *       Firewall Manager activity. </p>
                */
            SnsRoleName: string | undefined;
    }
    export namespace PutNotificationChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutNotificationChannelRequest) => any;
    }
    export interface PutPolicyRequest {
            /**
                * <p>The details of the Firewall Manager policy to be created.</p>
                */
            Policy: Policy | undefined;
            /**
                * <p>The tags to add to the Amazon Web Services resource.</p>
                */
            TagList?: Tag[];
    }
    export namespace PutPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPolicyRequest) => any;
    }
    export interface PutPolicyResponse {
            /**
                * <p>The details of the Firewall Manager policy.</p>
                */
            Policy?: Policy;
            /**
                * <p>The Amazon Resource Name (ARN) of the policy.</p>
                */
            PolicyArn?: string;
    }
    export namespace PutPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPolicyResponse) => any;
    }
    export interface PutProtocolsListRequest {
            /**
                * <p>The details of the Firewall Manager protocols list to be created.</p>
                */
            ProtocolsList: ProtocolsListData | undefined;
            /**
                * <p>The tags associated with the resource.</p>
                */
            TagList?: Tag[];
    }
    export namespace PutProtocolsListRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutProtocolsListRequest) => any;
    }
    export interface PutProtocolsListResponse {
            /**
                * <p>The details of the Firewall Manager protocols list.</p>
                */
            ProtocolsList?: ProtocolsListData;
            /**
                * <p>The Amazon Resource Name (ARN) of the protocols list.</p>
                */
            ProtocolsListArn?: string;
    }
    export namespace PutProtocolsListResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutProtocolsListResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to return tags for. The Firewall Manager resources that support tagging are policies, applications lists, and protocols lists. </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to add to the resource.</p>
                */
            TagList: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to return tags for. The Firewall Manager resources that support tagging are policies, applications lists, and protocols lists. </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The keys of the tags to remove from the resource. </p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-fms/node_modules/@aws-sdk/client-fms/dist-types/models/FMSServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from FMS service.
        */
    export class FMSServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

