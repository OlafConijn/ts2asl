// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-greengrassv2' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/AssociateServiceRoleToAccountCommand";
    import { BatchAssociateClientDeviceWithCoreDeviceCommandInput, BatchAssociateClientDeviceWithCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/BatchAssociateClientDeviceWithCoreDeviceCommand";
    import { BatchDisassociateClientDeviceFromCoreDeviceCommandInput, BatchDisassociateClientDeviceFromCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/BatchDisassociateClientDeviceFromCoreDeviceCommand";
    import { CancelDeploymentCommandInput, CancelDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CancelDeploymentCommand";
    import { CreateComponentVersionCommandInput, CreateComponentVersionCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CreateComponentVersionCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CreateDeploymentCommand";
    import { DeleteComponentCommandInput, DeleteComponentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteComponentCommand";
    import { DeleteCoreDeviceCommandInput, DeleteCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteCoreDeviceCommand";
    import { DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteDeploymentCommand";
    import { DescribeComponentCommandInput, DescribeComponentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DescribeComponentCommand";
    import { DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DisassociateServiceRoleFromAccountCommand";
    import { GetComponentCommandInput, GetComponentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetComponentCommand";
    import { GetComponentVersionArtifactCommandInput, GetComponentVersionArtifactCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetComponentVersionArtifactCommand";
    import { GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetConnectivityInfoCommand";
    import { GetCoreDeviceCommandInput, GetCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetCoreDeviceCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetDeploymentCommand";
    import { GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetServiceRoleForAccountCommand";
    import { ListClientDevicesAssociatedWithCoreDeviceCommandInput, ListClientDevicesAssociatedWithCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListClientDevicesAssociatedWithCoreDeviceCommand";
    import { ListComponentsCommandInput, ListComponentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListComponentsCommand";
    import { ListComponentVersionsCommandInput, ListComponentVersionsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListComponentVersionsCommand";
    import { ListCoreDevicesCommandInput, ListCoreDevicesCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListCoreDevicesCommand";
    import { ListDeploymentsCommandInput, ListDeploymentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListDeploymentsCommand";
    import { ListEffectiveDeploymentsCommandInput, ListEffectiveDeploymentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListEffectiveDeploymentsCommand";
    import { ListInstalledComponentsCommandInput, ListInstalledComponentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListInstalledComponentsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListTagsForResourceCommand";
    import { ResolveComponentCandidatesCommandInput, ResolveComponentCandidatesCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ResolveComponentCandidatesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/UntagResourceCommand";
    import { UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/UpdateConnectivityInfoCommand";
    import { GreengrassV2Client } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    /**
        * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities
        *       to edge devices. This enables devices to collect and analyze data closer to the source of
        *       information, react autonomously to local events, and communicate securely with each other on
        *       local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data
        *       to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and
        *       deploy applications to fleets of edge devices for local operation.</p>
        *          <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console.
        *       Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components,
        *       manage deployments, and core devices.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html">What is IoT Greengrass?</a> in
        *       the <i>IoT Greengrass V2 Developer Guide</i>.</p>
        */
    export class GreengrassV2 extends GreengrassV2Client {
            /**
                * <p>Associates a Greengrass service role with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass
                *       uses this role to verify the identity of client devices and manage core device connectivity
                *       information. The role must include the <a href="https://console.aws.amazon.com/iam/home#/policies/arn:awsiam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy">AWSGreengrassResourceAccessRolePolicy</a> managed policy or a custom policy that
                *       defines equivalent permissions for the IoT Greengrass features that you use. For more information, see
                *         <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
                */
            associateServiceRoleToAccount(args: AssociateServiceRoleToAccountCommandInput, options?: __HttpHandlerOptions): Promise<AssociateServiceRoleToAccountCommandOutput>;
            associateServiceRoleToAccount(args: AssociateServiceRoleToAccountCommandInput, cb: (err: any, data?: AssociateServiceRoleToAccountCommandOutput) => void): void;
            associateServiceRoleToAccount(args: AssociateServiceRoleToAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateServiceRoleToAccountCommandOutput) => void): void;
            /**
                * <p>Associates a list of client devices with a core device. Use this API operation to specify
                *       which client devices can discover a core device through cloud discovery. With cloud discovery,
                *       client devices connect to IoT Greengrass to retrieve associated core devices' connectivity information
                *       and certificates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-cloud-discovery.html">Configure cloud
                *         discovery</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                *
                *          <note>
                *             <p>Client devices are local IoT devices that connect to and communicate with an IoT Greengrass core
                *         device over MQTT. You can connect client devices to a core device to sync MQTT messages and
                *         data to Amazon Web Services IoT Core and interact with client devices in Greengrass components. For more information,
                *         see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interact-with-local-iot-devices.html">Interact with
                *           local IoT devices</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                *          </note>
                */
            batchAssociateClientDeviceWithCoreDevice(args: BatchAssociateClientDeviceWithCoreDeviceCommandInput, options?: __HttpHandlerOptions): Promise<BatchAssociateClientDeviceWithCoreDeviceCommandOutput>;
            batchAssociateClientDeviceWithCoreDevice(args: BatchAssociateClientDeviceWithCoreDeviceCommandInput, cb: (err: any, data?: BatchAssociateClientDeviceWithCoreDeviceCommandOutput) => void): void;
            batchAssociateClientDeviceWithCoreDevice(args: BatchAssociateClientDeviceWithCoreDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchAssociateClientDeviceWithCoreDeviceCommandOutput) => void): void;
            /**
                * <p>Disassociates a list of client devices from a core device. After you disassociate a client
                *       device from a core device, the client device won't be able to use cloud discovery to retrieve
                *       the core device's connectivity information and certificates.</p>
                */
            batchDisassociateClientDeviceFromCoreDevice(args: BatchDisassociateClientDeviceFromCoreDeviceCommandInput, options?: __HttpHandlerOptions): Promise<BatchDisassociateClientDeviceFromCoreDeviceCommandOutput>;
            batchDisassociateClientDeviceFromCoreDevice(args: BatchDisassociateClientDeviceFromCoreDeviceCommandInput, cb: (err: any, data?: BatchDisassociateClientDeviceFromCoreDeviceCommandOutput) => void): void;
            batchDisassociateClientDeviceFromCoreDevice(args: BatchDisassociateClientDeviceFromCoreDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDisassociateClientDeviceFromCoreDeviceCommandOutput) => void): void;
            /**
                * <p>Cancels a deployment. This operation cancels the deployment for devices that haven't yet
                *       received it. If a device already received the deployment, this operation doesn't change
                *       anything for that device.</p>
                */
            cancelDeployment(args: CancelDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<CancelDeploymentCommandOutput>;
            cancelDeployment(args: CancelDeploymentCommandInput, cb: (err: any, data?: CancelDeploymentCommandOutput) => void): void;
            cancelDeployment(args: CancelDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelDeploymentCommandOutput) => void): void;
            /**
                * <p>Creates a component. Components are software that run on Greengrass core devices. After you
                *       develop and test a component on your core device, you can use this operation to upload your
                *       component to IoT Greengrass. Then, you can deploy the component to other core devices.</p>
                *          <p>You can use this operation to do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Create components from recipes</b>
                *                </p>
                *                <p>Create a component from a recipe, which is a file that defines the component's
                *           metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For
                *           more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html">IoT Greengrass component recipe
                *             reference</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                *                <p>To create a component from a recipe, specify <code>inlineRecipe</code> when you call
                *           this operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Create components from Lambda functions</b>
                *                </p>
                *                <p>Create a component from an Lambda function that runs on IoT Greengrass. This creates a recipe
                *           and artifacts from the Lambda function's deployment package. You can use this operation to
                *           migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2.</p>
                *                <p>This function only accepts Lambda functions that use the following runtimes:</p>
                *                <ul>
                *                   <li>
                *                      <p>Python 2.7 – <code>python2.7</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Python 3.7 – <code>python3.7</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Python 3.8 – <code>python3.8</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Python 3.9 – <code>python3.9</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Java 8 – <code>java8</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Java 11 – <code>java11</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Node.js 10 – <code>nodejs10.x</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Node.js 12 – <code>nodejs12.x</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Node.js 14 – <code>nodejs14.x</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>To create a component from a Lambda function, specify <code>lambdaFunction</code>
                *           when you call this operation.</p>
                *                <note>
                *                   <p>IoT Greengrass currently supports Lambda functions on only Linux core devices.</p>
                *                </note>
                *             </li>
                *          </ul>
                */
            createComponentVersion(args: CreateComponentVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateComponentVersionCommandOutput>;
            createComponentVersion(args: CreateComponentVersionCommandInput, cb: (err: any, data?: CreateComponentVersionCommandOutput) => void): void;
            createComponentVersion(args: CreateComponentVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateComponentVersionCommandOutput) => void): void;
            /**
                * <p>Creates a continuous deployment for a target, which is a Greengrass core device or group of core
                *       devices. When you add a new core device to a group of core devices that has a deployment, IoT Greengrass
                *       deploys that group's deployment to the new device.</p>
                *          <p>You can define one deployment for each target. When you create a new deployment for a
                *       target that has an existing deployment, you replace the previous deployment. IoT Greengrass applies the
                *       new deployment to the target devices.</p>
                *          <p>Every deployment has a revision number that indicates how many deployment revisions you
                *       define for a target. Use this operation to create a new revision of an existing
                *       deployment.</p>
                *          <p>For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the
                *         <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            createDeployment(args: CreateDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeploymentCommandOutput>;
            createDeployment(args: CreateDeploymentCommandInput, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            createDeployment(args: CreateDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            /**
                * <p>Deletes a version of a component from IoT Greengrass.</p>
                *          <note>
                *             <p>This operation deletes the component's recipe and artifacts. As a result, deployments
                *         that refer to this component version will fail. If you have deployments that use this
                *         component version, you can remove the component from the deployment or update the deployment
                *         to use a valid version.</p>
                *          </note>
                */
            deleteComponent(args: DeleteComponentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteComponentCommandOutput>;
            deleteComponent(args: DeleteComponentCommandInput, cb: (err: any, data?: DeleteComponentCommandOutput) => void): void;
            deleteComponent(args: DeleteComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteComponentCommandOutput) => void): void;
            /**
                * <p>Deletes a Greengrass core device, which is an IoT thing. This operation removes the core
                *       device from the list of core devices. This operation doesn't delete the IoT thing. For more
                *       information about how to delete the IoT thing, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html">DeleteThing</a> in the
                *         <i>IoT API Reference</i>.</p>
                */
            deleteCoreDevice(args: DeleteCoreDeviceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCoreDeviceCommandOutput>;
            deleteCoreDevice(args: DeleteCoreDeviceCommandInput, cb: (err: any, data?: DeleteCoreDeviceCommandOutput) => void): void;
            deleteCoreDevice(args: DeleteCoreDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCoreDeviceCommandOutput) => void): void;
            /**
                * <p>Deletes a deployment. To delete an active deployment, you must first cancel it. For more
                *       information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CancelDeployment.html">CancelDeployment</a>.</p>
                *          <p>Deleting a deployment doesn't affect core devices that run that deployment, because core
                *       devices store the deployment's configuration on the device. Additionally, core devices can
                *       roll back to a previous deployment that has been deleted.</p>
                */
            deleteDeployment(args: DeleteDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeploymentCommandOutput>;
            deleteDeployment(args: DeleteDeploymentCommandInput, cb: (err: any, data?: DeleteDeploymentCommandOutput) => void): void;
            deleteDeployment(args: DeleteDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeploymentCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata for a version of a component.</p>
                */
            describeComponent(args: DescribeComponentCommandInput, options?: __HttpHandlerOptions): Promise<DescribeComponentCommandOutput>;
            describeComponent(args: DescribeComponentCommandInput, cb: (err: any, data?: DescribeComponentCommandOutput) => void): void;
            describeComponent(args: DescribeComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeComponentCommandOutput) => void): void;
            /**
                * <p>Disassociates the Greengrass service role from IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region.
                *       Without a service role, IoT Greengrass can't verify the identity of client devices or manage core device
                *       connectivity information. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in
                *       the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
                */
            disassociateServiceRoleFromAccount(args: DisassociateServiceRoleFromAccountCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateServiceRoleFromAccountCommandOutput>;
            disassociateServiceRoleFromAccount(args: DisassociateServiceRoleFromAccountCommandInput, cb: (err: any, data?: DisassociateServiceRoleFromAccountCommandOutput) => void): void;
            disassociateServiceRoleFromAccount(args: DisassociateServiceRoleFromAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateServiceRoleFromAccountCommandOutput) => void): void;
            /**
                * <p>Gets the recipe for a version of a component. Core devices can call this operation to
                *       identify the artifacts and requirements to install a component.</p>
                */
            getComponent(args: GetComponentCommandInput, options?: __HttpHandlerOptions): Promise<GetComponentCommandOutput>;
            getComponent(args: GetComponentCommandInput, cb: (err: any, data?: GetComponentCommandOutput) => void): void;
            getComponent(args: GetComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComponentCommandOutput) => void): void;
            /**
                * <p>Gets the pre-signed URL to download a public or a Lambda component artifact. Core devices call this
                *       operation to identify the URL that they can use to download an artifact to install.</p>
                */
            getComponentVersionArtifact(args: GetComponentVersionArtifactCommandInput, options?: __HttpHandlerOptions): Promise<GetComponentVersionArtifactCommandOutput>;
            getComponentVersionArtifact(args: GetComponentVersionArtifactCommandInput, cb: (err: any, data?: GetComponentVersionArtifactCommandOutput) => void): void;
            getComponentVersionArtifact(args: GetComponentVersionArtifactCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetComponentVersionArtifactCommandOutput) => void): void;
            /**
                * <p>Retrieves connectivity information for a Greengrass core device.</p>
                *          <p>Connectivity information includes endpoints and ports where client devices
                *       can connect to an MQTT broker on the core device. When a client device
                *       calls the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html">IoT Greengrass discovery API</a>,
                *       IoT Greengrass returns connectivity information for all of the core devices where the client device can
                *       connect. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html">Connect client devices to
                *         core devices</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
                */
            getConnectivityInfo(args: GetConnectivityInfoCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectivityInfoCommandOutput>;
            getConnectivityInfo(args: GetConnectivityInfoCommandInput, cb: (err: any, data?: GetConnectivityInfoCommandOutput) => void): void;
            getConnectivityInfo(args: GetConnectivityInfoCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectivityInfoCommandOutput) => void): void;
            /**
                * <p>Retrieves metadata for a Greengrass core device.</p>
                *          <note>
                *             <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core
                *         software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then
                *         the reported status of that device might not reflect its current status. The status timestamp
                *         indicates when the device status was last updated.</p>
                *             <p>Core devices send status updates at the following times:</p>
                *             <ul>
                *                <li>
                *                   <p>When the IoT Greengrass Core software starts</p>
                *                </li>
                *                <li>
                *                   <p>When the core device receives a deployment from the Amazon Web Services Cloud</p>
                *                </li>
                *                <li>
                *                   <p>When the status of any component on the core device becomes <code>BROKEN</code>
                *                   </p>
                *                </li>
                *                <li>
                *                   <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval
                *             that you can configure</a>, which defaults to 24 hours</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            getCoreDevice(args: GetCoreDeviceCommandInput, options?: __HttpHandlerOptions): Promise<GetCoreDeviceCommandOutput>;
            getCoreDevice(args: GetCoreDeviceCommandInput, cb: (err: any, data?: GetCoreDeviceCommandOutput) => void): void;
            getCoreDevice(args: GetCoreDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCoreDeviceCommandOutput) => void): void;
            /**
                * <p>Gets a deployment. Deployments define the components that run on Greengrass core devices.</p>
                */
            getDeployment(args: GetDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentCommandOutput>;
            getDeployment(args: GetDeploymentCommandInput, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            getDeployment(args: GetDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            /**
                * <p>Gets the service role associated with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region.
                *       IoT Greengrass uses this role to verify the identity of client devices and manage core device
                *       connectivity information. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in
                *       the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
                */
            getServiceRoleForAccount(args: GetServiceRoleForAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetServiceRoleForAccountCommandOutput>;
            getServiceRoleForAccount(args: GetServiceRoleForAccountCommandInput, cb: (err: any, data?: GetServiceRoleForAccountCommandOutput) => void): void;
            getServiceRoleForAccount(args: GetServiceRoleForAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServiceRoleForAccountCommandOutput) => void): void;
            /**
                * <p>Retrieves a paginated list of client devices that are associated with a core
                *       device.</p>
                */
            listClientDevicesAssociatedWithCoreDevice(args: ListClientDevicesAssociatedWithCoreDeviceCommandInput, options?: __HttpHandlerOptions): Promise<ListClientDevicesAssociatedWithCoreDeviceCommandOutput>;
            listClientDevicesAssociatedWithCoreDevice(args: ListClientDevicesAssociatedWithCoreDeviceCommandInput, cb: (err: any, data?: ListClientDevicesAssociatedWithCoreDeviceCommandOutput) => void): void;
            listClientDevicesAssociatedWithCoreDevice(args: ListClientDevicesAssociatedWithCoreDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListClientDevicesAssociatedWithCoreDeviceCommandOutput) => void): void;
            /**
                * <p>Retrieves a paginated list of component summaries. This list includes components that you
                *       have permission to view.</p>
                */
            listComponents(args: ListComponentsCommandInput, options?: __HttpHandlerOptions): Promise<ListComponentsCommandOutput>;
            listComponents(args: ListComponentsCommandInput, cb: (err: any, data?: ListComponentsCommandOutput) => void): void;
            listComponents(args: ListComponentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListComponentsCommandOutput) => void): void;
            /**
                * <p>Retrieves a paginated list of all versions for a component. Greater versions are listed first.</p>
                */
            listComponentVersions(args: ListComponentVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListComponentVersionsCommandOutput>;
            listComponentVersions(args: ListComponentVersionsCommandInput, cb: (err: any, data?: ListComponentVersionsCommandOutput) => void): void;
            listComponentVersions(args: ListComponentVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListComponentVersionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a paginated list of Greengrass core devices.</p>
                *          <note>
                *             <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core
                *         software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then
                *         the reported status of that device might not reflect its current status. The status timestamp
                *         indicates when the device status was last updated.</p>
                *             <p>Core devices send status updates at the following times:</p>
                *             <ul>
                *                <li>
                *                   <p>When the IoT Greengrass Core software starts</p>
                *                </li>
                *                <li>
                *                   <p>When the core device receives a deployment from the Amazon Web Services Cloud</p>
                *                </li>
                *                <li>
                *                   <p>When the status of any component on the core device becomes <code>BROKEN</code>
                *                   </p>
                *                </li>
                *                <li>
                *                   <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval
                *             that you can configure</a>, which defaults to 24 hours</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            listCoreDevices(args: ListCoreDevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListCoreDevicesCommandOutput>;
            listCoreDevices(args: ListCoreDevicesCommandInput, cb: (err: any, data?: ListCoreDevicesCommandOutput) => void): void;
            listCoreDevices(args: ListCoreDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCoreDevicesCommandOutput) => void): void;
            /**
                * <p>Retrieves a paginated list of deployments.</p>
                */
            listDeployments(args: ListDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeploymentsCommandOutput>;
            listDeployments(args: ListDeploymentsCommandInput, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
            listDeployments(args: ListDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeploymentsCommandOutput) => void): void;
            /**
                * <p>Retrieves a paginated list of deployment jobs that IoT Greengrass sends to Greengrass core
                *       devices.</p>
                */
            listEffectiveDeployments(args: ListEffectiveDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<ListEffectiveDeploymentsCommandOutput>;
            listEffectiveDeployments(args: ListEffectiveDeploymentsCommandInput, cb: (err: any, data?: ListEffectiveDeploymentsCommandOutput) => void): void;
            listEffectiveDeployments(args: ListEffectiveDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEffectiveDeploymentsCommandOutput) => void): void;
            /**
                * <p>Retrieves a paginated list of the components that a Greengrass core device runs.
                *       This list doesn't include components that are deployed from local deployments or
                *       components that are deployed as dependencies of other components.</p>
                *          <note>
                *             <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core
                *         software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then
                *         the reported status of that device might not reflect its current status. The status timestamp
                *         indicates when the device status was last updated.</p>
                *             <p>Core devices send status updates at the following times:</p>
                *             <ul>
                *                <li>
                *                   <p>When the IoT Greengrass Core software starts</p>
                *                </li>
                *                <li>
                *                   <p>When the core device receives a deployment from the Amazon Web Services Cloud</p>
                *                </li>
                *                <li>
                *                   <p>When the status of any component on the core device becomes <code>BROKEN</code>
                *                   </p>
                *                </li>
                *                <li>
                *                   <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval
                *             that you can configure</a>, which defaults to 24 hours</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            listInstalledComponents(args: ListInstalledComponentsCommandInput, options?: __HttpHandlerOptions): Promise<ListInstalledComponentsCommandOutput>;
            listInstalledComponents(args: ListInstalledComponentsCommandInput, cb: (err: any, data?: ListInstalledComponentsCommandOutput) => void): void;
            listInstalledComponents(args: ListInstalledComponentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInstalledComponentsCommandOutput) => void): void;
            /**
                * <p>Retrieves the list of tags for an IoT Greengrass resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of components that meet the component, version, and platform requirements
                *       of a deployment. Greengrass core devices call this operation when they receive a deployment to
                *       identify the components to install.</p>
                *          <p>This operation identifies components that meet all dependency requirements for a
                *       deployment. If the requirements conflict, then this operation returns an error and the
                *       deployment fails. For example, this occurs if component <code>A</code> requires version
                *         <code>>2.0.0</code> and component <code>B</code> requires version <code><2.0.0</code>
                *       of a component dependency.</p>
                *          <p>When you specify the component candidates to resolve, IoT Greengrass compares each component's
                *       digest from the core device with the component's digest in the Amazon Web Services Cloud. If the digests don't
                *       match, then IoT Greengrass specifies to use the version from the Amazon Web Services Cloud.</p>
                *          <important>
                *             <p>To use this operation, you must use the data plane API endpoint and authenticate with an
                *         IoT device certificate. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/greengrass.html">IoT Greengrass endpoints and quotas</a>.</p>
                *          </important>
                */
            resolveComponentCandidates(args: ResolveComponentCandidatesCommandInput, options?: __HttpHandlerOptions): Promise<ResolveComponentCandidatesCommandOutput>;
            resolveComponentCandidates(args: ResolveComponentCandidatesCommandInput, cb: (err: any, data?: ResolveComponentCandidatesCommandOutput) => void): void;
            resolveComponentCandidates(args: ResolveComponentCandidatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResolveComponentCandidatesCommandOutput) => void): void;
            /**
                * <p>Adds tags to an IoT Greengrass resource. If a tag already exists for the resource, this operation
                *       updates the tag's value.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes a tag from an IoT Greengrass resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates connectivity information for a Greengrass core device.</p>
                *          <p>Connectivity information includes endpoints and ports where client devices
                *       can connect to an MQTT broker on the core device. When a client device
                *       calls the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html">IoT Greengrass discovery API</a>,
                *       IoT Greengrass returns connectivity information for all of the core devices where the client device can
                *       connect. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html">Connect client devices to
                *         core devices</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
                */
            updateConnectivityInfo(args: UpdateConnectivityInfoCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectivityInfoCommandOutput>;
            updateConnectivityInfo(args: UpdateConnectivityInfoCommandInput, cb: (err: any, data?: UpdateConnectivityInfoCommandOutput) => void): void;
            updateConnectivityInfo(args: UpdateConnectivityInfoCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectivityInfoCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/AssociateServiceRoleToAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { AssociateServiceRoleToAccountRequest, AssociateServiceRoleToAccountResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface AssociateServiceRoleToAccountCommandInput extends AssociateServiceRoleToAccountRequest {
    }
    export interface AssociateServiceRoleToAccountCommandOutput extends AssociateServiceRoleToAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a Greengrass service role with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region. IoT Greengrass
        *       uses this role to verify the identity of client devices and manage core device connectivity
        *       information. The role must include the <a href="https://console.aws.amazon.com/iam/home#/policies/arn:awsiam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy">AWSGreengrassResourceAccessRolePolicy</a> managed policy or a custom policy that
        *       defines equivalent permissions for the IoT Greengrass features that you use. For more information, see
        *         <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, AssociateServiceRoleToAccountCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, AssociateServiceRoleToAccountCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new AssociateServiceRoleToAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateServiceRoleToAccountCommandInput} for command's `input` shape.
        * @see {@link AssociateServiceRoleToAccountCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class AssociateServiceRoleToAccountCommand extends $Command<AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: AssociateServiceRoleToAccountCommandInput;
            constructor(input: AssociateServiceRoleToAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/BatchAssociateClientDeviceWithCoreDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { BatchAssociateClientDeviceWithCoreDeviceRequest, BatchAssociateClientDeviceWithCoreDeviceResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface BatchAssociateClientDeviceWithCoreDeviceCommandInput extends BatchAssociateClientDeviceWithCoreDeviceRequest {
    }
    export interface BatchAssociateClientDeviceWithCoreDeviceCommandOutput extends BatchAssociateClientDeviceWithCoreDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a list of client devices with a core device. Use this API operation to specify
        *       which client devices can discover a core device through cloud discovery. With cloud discovery,
        *       client devices connect to IoT Greengrass to retrieve associated core devices' connectivity information
        *       and certificates. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-cloud-discovery.html">Configure cloud
        *         discovery</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
        *
        *          <note>
        *             <p>Client devices are local IoT devices that connect to and communicate with an IoT Greengrass core
        *         device over MQTT. You can connect client devices to a core device to sync MQTT messages and
        *         data to Amazon Web Services IoT Core and interact with client devices in Greengrass components. For more information,
        *         see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interact-with-local-iot-devices.html">Interact with
        *           local IoT devices</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, BatchAssociateClientDeviceWithCoreDeviceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, BatchAssociateClientDeviceWithCoreDeviceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new BatchAssociateClientDeviceWithCoreDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchAssociateClientDeviceWithCoreDeviceCommandInput} for command's `input` shape.
        * @see {@link BatchAssociateClientDeviceWithCoreDeviceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class BatchAssociateClientDeviceWithCoreDeviceCommand extends $Command<BatchAssociateClientDeviceWithCoreDeviceCommandInput, BatchAssociateClientDeviceWithCoreDeviceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: BatchAssociateClientDeviceWithCoreDeviceCommandInput;
            constructor(input: BatchAssociateClientDeviceWithCoreDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchAssociateClientDeviceWithCoreDeviceCommandInput, BatchAssociateClientDeviceWithCoreDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/BatchDisassociateClientDeviceFromCoreDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { BatchDisassociateClientDeviceFromCoreDeviceRequest, BatchDisassociateClientDeviceFromCoreDeviceResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface BatchDisassociateClientDeviceFromCoreDeviceCommandInput extends BatchDisassociateClientDeviceFromCoreDeviceRequest {
    }
    export interface BatchDisassociateClientDeviceFromCoreDeviceCommandOutput extends BatchDisassociateClientDeviceFromCoreDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates a list of client devices from a core device. After you disassociate a client
        *       device from a core device, the client device won't be able to use cloud discovery to retrieve
        *       the core device's connectivity information and certificates.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, BatchDisassociateClientDeviceFromCoreDeviceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, BatchDisassociateClientDeviceFromCoreDeviceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new BatchDisassociateClientDeviceFromCoreDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDisassociateClientDeviceFromCoreDeviceCommandInput} for command's `input` shape.
        * @see {@link BatchDisassociateClientDeviceFromCoreDeviceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class BatchDisassociateClientDeviceFromCoreDeviceCommand extends $Command<BatchDisassociateClientDeviceFromCoreDeviceCommandInput, BatchDisassociateClientDeviceFromCoreDeviceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: BatchDisassociateClientDeviceFromCoreDeviceCommandInput;
            constructor(input: BatchDisassociateClientDeviceFromCoreDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDisassociateClientDeviceFromCoreDeviceCommandInput, BatchDisassociateClientDeviceFromCoreDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CancelDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { CancelDeploymentRequest, CancelDeploymentResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface CancelDeploymentCommandInput extends CancelDeploymentRequest {
    }
    export interface CancelDeploymentCommandOutput extends CancelDeploymentResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels a deployment. This operation cancels the deployment for devices that haven't yet
        *       received it. If a device already received the deployment, this operation doesn't change
        *       anything for that device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, CancelDeploymentCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, CancelDeploymentCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new CancelDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelDeploymentCommandInput} for command's `input` shape.
        * @see {@link CancelDeploymentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class CancelDeploymentCommand extends $Command<CancelDeploymentCommandInput, CancelDeploymentCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: CancelDeploymentCommandInput;
            constructor(input: CancelDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelDeploymentCommandInput, CancelDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CreateComponentVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { CreateComponentVersionRequest, CreateComponentVersionResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface CreateComponentVersionCommandInput extends CreateComponentVersionRequest {
    }
    export interface CreateComponentVersionCommandOutput extends CreateComponentVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a component. Components are software that run on Greengrass core devices. After you
        *       develop and test a component on your core device, you can use this operation to upload your
        *       component to IoT Greengrass. Then, you can deploy the component to other core devices.</p>
        *          <p>You can use this operation to do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Create components from recipes</b>
        *                </p>
        *                <p>Create a component from a recipe, which is a file that defines the component's
        *           metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For
        *           more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html">IoT Greengrass component recipe
        *             reference</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
        *                <p>To create a component from a recipe, specify <code>inlineRecipe</code> when you call
        *           this operation.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Create components from Lambda functions</b>
        *                </p>
        *                <p>Create a component from an Lambda function that runs on IoT Greengrass. This creates a recipe
        *           and artifacts from the Lambda function's deployment package. You can use this operation to
        *           migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2.</p>
        *                <p>This function only accepts Lambda functions that use the following runtimes:</p>
        *                <ul>
        *                   <li>
        *                      <p>Python 2.7 – <code>python2.7</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Python 3.7 – <code>python3.7</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Python 3.8 – <code>python3.8</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Python 3.9 – <code>python3.9</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Java 8 – <code>java8</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Java 11 – <code>java11</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Node.js 10 – <code>nodejs10.x</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Node.js 12 – <code>nodejs12.x</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>Node.js 14 – <code>nodejs14.x</code>
        *                      </p>
        *                   </li>
        *                </ul>
        *                <p>To create a component from a Lambda function, specify <code>lambdaFunction</code>
        *           when you call this operation.</p>
        *                <note>
        *                   <p>IoT Greengrass currently supports Lambda functions on only Linux core devices.</p>
        *                </note>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, CreateComponentVersionCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, CreateComponentVersionCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new CreateComponentVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateComponentVersionCommandInput} for command's `input` shape.
        * @see {@link CreateComponentVersionCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class CreateComponentVersionCommand extends $Command<CreateComponentVersionCommandInput, CreateComponentVersionCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: CreateComponentVersionCommandInput;
            constructor(input: CreateComponentVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateComponentVersionCommandInput, CreateComponentVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CreateDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { CreateDeploymentRequest, CreateDeploymentResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface CreateDeploymentCommandInput extends CreateDeploymentRequest {
    }
    export interface CreateDeploymentCommandOutput extends CreateDeploymentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a continuous deployment for a target, which is a Greengrass core device or group of core
        *       devices. When you add a new core device to a group of core devices that has a deployment, IoT Greengrass
        *       deploys that group's deployment to the new device.</p>
        *          <p>You can define one deployment for each target. When you create a new deployment for a
        *       target that has an existing deployment, you replace the previous deployment. IoT Greengrass applies the
        *       new deployment to the target devices.</p>
        *          <p>Every deployment has a revision number that indicates how many deployment revisions you
        *       define for a target. Use this operation to create a new revision of an existing
        *       deployment.</p>
        *          <p>For more information, see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the
        *         <i>IoT Greengrass V2 Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, CreateDeploymentCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, CreateDeploymentCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new CreateDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeploymentCommandInput} for command's `input` shape.
        * @see {@link CreateDeploymentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class CreateDeploymentCommand extends $Command<CreateDeploymentCommandInput, CreateDeploymentCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: CreateDeploymentCommandInput;
            constructor(input: CreateDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeploymentCommandInput, CreateDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { DeleteComponentRequest } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface DeleteComponentCommandInput extends DeleteComponentRequest {
    }
    export interface DeleteComponentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a version of a component from IoT Greengrass.</p>
        *          <note>
        *             <p>This operation deletes the component's recipe and artifacts. As a result, deployments
        *         that refer to this component version will fail. If you have deployments that use this
        *         component version, you can remove the component from the deployment or update the deployment
        *         to use a valid version.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, DeleteComponentCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, DeleteComponentCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new DeleteComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteComponentCommandInput} for command's `input` shape.
        * @see {@link DeleteComponentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class DeleteComponentCommand extends $Command<DeleteComponentCommandInput, DeleteComponentCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: DeleteComponentCommandInput;
            constructor(input: DeleteComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteComponentCommandInput, DeleteComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteCoreDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { DeleteCoreDeviceRequest } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface DeleteCoreDeviceCommandInput extends DeleteCoreDeviceRequest {
    }
    export interface DeleteCoreDeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Greengrass core device, which is an IoT thing. This operation removes the core
        *       device from the list of core devices. This operation doesn't delete the IoT thing. For more
        *       information about how to delete the IoT thing, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_DeleteThing.html">DeleteThing</a> in the
        *         <i>IoT API Reference</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, DeleteCoreDeviceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, DeleteCoreDeviceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new DeleteCoreDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCoreDeviceCommandInput} for command's `input` shape.
        * @see {@link DeleteCoreDeviceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class DeleteCoreDeviceCommand extends $Command<DeleteCoreDeviceCommandInput, DeleteCoreDeviceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: DeleteCoreDeviceCommandInput;
            constructor(input: DeleteCoreDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCoreDeviceCommandInput, DeleteCoreDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { DeleteDeploymentRequest } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface DeleteDeploymentCommandInput extends DeleteDeploymentRequest {
    }
    export interface DeleteDeploymentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a deployment. To delete an active deployment, you must first cancel it. For more
        *       information, see <a href="https://docs.aws.amazon.com/iot/latest/apireference/API_CancelDeployment.html">CancelDeployment</a>.</p>
        *          <p>Deleting a deployment doesn't affect core devices that run that deployment, because core
        *       devices store the deployment's configuration on the device. Additionally, core devices can
        *       roll back to a previous deployment that has been deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, DeleteDeploymentCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, DeleteDeploymentCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new DeleteDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeploymentCommandInput} for command's `input` shape.
        * @see {@link DeleteDeploymentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class DeleteDeploymentCommand extends $Command<DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: DeleteDeploymentCommandInput;
            constructor(input: DeleteDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DescribeComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { DescribeComponentRequest, DescribeComponentResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface DescribeComponentCommandInput extends DescribeComponentRequest {
    }
    export interface DescribeComponentCommandOutput extends DescribeComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata for a version of a component.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, DescribeComponentCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, DescribeComponentCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new DescribeComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeComponentCommandInput} for command's `input` shape.
        * @see {@link DescribeComponentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class DescribeComponentCommand extends $Command<DescribeComponentCommandInput, DescribeComponentCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: DescribeComponentCommandInput;
            constructor(input: DescribeComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeComponentCommandInput, DescribeComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DisassociateServiceRoleFromAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { DisassociateServiceRoleFromAccountRequest, DisassociateServiceRoleFromAccountResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface DisassociateServiceRoleFromAccountCommandInput extends DisassociateServiceRoleFromAccountRequest {
    }
    export interface DisassociateServiceRoleFromAccountCommandOutput extends DisassociateServiceRoleFromAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates the Greengrass service role from IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region.
        *       Without a service role, IoT Greengrass can't verify the identity of client devices or manage core device
        *       connectivity information. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in
        *       the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, DisassociateServiceRoleFromAccountCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, DisassociateServiceRoleFromAccountCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new DisassociateServiceRoleFromAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateServiceRoleFromAccountCommandInput} for command's `input` shape.
        * @see {@link DisassociateServiceRoleFromAccountCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class DisassociateServiceRoleFromAccountCommand extends $Command<DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: DisassociateServiceRoleFromAccountCommandInput;
            constructor(input: DisassociateServiceRoleFromAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { GetComponentRequest, GetComponentResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface GetComponentCommandInput extends GetComponentRequest {
    }
    export interface GetComponentCommandOutput extends GetComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the recipe for a version of a component. Core devices can call this operation to
        *       identify the artifacts and requirements to install a component.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, GetComponentCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, GetComponentCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new GetComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComponentCommandInput} for command's `input` shape.
        * @see {@link GetComponentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class GetComponentCommand extends $Command<GetComponentCommandInput, GetComponentCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: GetComponentCommandInput;
            constructor(input: GetComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComponentCommandInput, GetComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetComponentVersionArtifactCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { GetComponentVersionArtifactRequest, GetComponentVersionArtifactResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface GetComponentVersionArtifactCommandInput extends GetComponentVersionArtifactRequest {
    }
    export interface GetComponentVersionArtifactCommandOutput extends GetComponentVersionArtifactResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the pre-signed URL to download a public or a Lambda component artifact. Core devices call this
        *       operation to identify the URL that they can use to download an artifact to install.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, GetComponentVersionArtifactCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, GetComponentVersionArtifactCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new GetComponentVersionArtifactCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetComponentVersionArtifactCommandInput} for command's `input` shape.
        * @see {@link GetComponentVersionArtifactCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class GetComponentVersionArtifactCommand extends $Command<GetComponentVersionArtifactCommandInput, GetComponentVersionArtifactCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: GetComponentVersionArtifactCommandInput;
            constructor(input: GetComponentVersionArtifactCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetComponentVersionArtifactCommandInput, GetComponentVersionArtifactCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetConnectivityInfoCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { GetConnectivityInfoRequest, GetConnectivityInfoResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface GetConnectivityInfoCommandInput extends GetConnectivityInfoRequest {
    }
    export interface GetConnectivityInfoCommandOutput extends GetConnectivityInfoResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves connectivity information for a Greengrass core device.</p>
        *          <p>Connectivity information includes endpoints and ports where client devices
        *       can connect to an MQTT broker on the core device. When a client device
        *       calls the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html">IoT Greengrass discovery API</a>,
        *       IoT Greengrass returns connectivity information for all of the core devices where the client device can
        *       connect. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html">Connect client devices to
        *         core devices</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, GetConnectivityInfoCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, GetConnectivityInfoCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new GetConnectivityInfoCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectivityInfoCommandInput} for command's `input` shape.
        * @see {@link GetConnectivityInfoCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class GetConnectivityInfoCommand extends $Command<GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: GetConnectivityInfoCommandInput;
            constructor(input: GetConnectivityInfoCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetCoreDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { GetCoreDeviceRequest, GetCoreDeviceResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface GetCoreDeviceCommandInput extends GetCoreDeviceRequest {
    }
    export interface GetCoreDeviceCommandOutput extends GetCoreDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves metadata for a Greengrass core device.</p>
        *          <note>
        *             <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core
        *         software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then
        *         the reported status of that device might not reflect its current status. The status timestamp
        *         indicates when the device status was last updated.</p>
        *             <p>Core devices send status updates at the following times:</p>
        *             <ul>
        *                <li>
        *                   <p>When the IoT Greengrass Core software starts</p>
        *                </li>
        *                <li>
        *                   <p>When the core device receives a deployment from the Amazon Web Services Cloud</p>
        *                </li>
        *                <li>
        *                   <p>When the status of any component on the core device becomes <code>BROKEN</code>
        *                   </p>
        *                </li>
        *                <li>
        *                   <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval
        *             that you can configure</a>, which defaults to 24 hours</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, GetCoreDeviceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, GetCoreDeviceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new GetCoreDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCoreDeviceCommandInput} for command's `input` shape.
        * @see {@link GetCoreDeviceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class GetCoreDeviceCommand extends $Command<GetCoreDeviceCommandInput, GetCoreDeviceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: GetCoreDeviceCommandInput;
            constructor(input: GetCoreDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCoreDeviceCommandInput, GetCoreDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { GetDeploymentRequest, GetDeploymentResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface GetDeploymentCommandInput extends GetDeploymentRequest {
    }
    export interface GetDeploymentCommandOutput extends GetDeploymentResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a deployment. Deployments define the components that run on Greengrass core devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, GetDeploymentCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, GetDeploymentCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new GetDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class GetDeploymentCommand extends $Command<GetDeploymentCommandInput, GetDeploymentCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: GetDeploymentCommandInput;
            constructor(input: GetDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentCommandInput, GetDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetServiceRoleForAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { GetServiceRoleForAccountRequest, GetServiceRoleForAccountResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface GetServiceRoleForAccountCommandInput extends GetServiceRoleForAccountRequest {
    }
    export interface GetServiceRoleForAccountCommandOutput extends GetServiceRoleForAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the service role associated with IoT Greengrass for your Amazon Web Services account in this Amazon Web Services Region.
        *       IoT Greengrass uses this role to verify the identity of client devices and manage core device
        *       connectivity information. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-service-role.html">Greengrass service role</a> in
        *       the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, GetServiceRoleForAccountCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, GetServiceRoleForAccountCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new GetServiceRoleForAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServiceRoleForAccountCommandInput} for command's `input` shape.
        * @see {@link GetServiceRoleForAccountCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class GetServiceRoleForAccountCommand extends $Command<GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: GetServiceRoleForAccountCommandInput;
            constructor(input: GetServiceRoleForAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListClientDevicesAssociatedWithCoreDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListClientDevicesAssociatedWithCoreDeviceRequest, ListClientDevicesAssociatedWithCoreDeviceResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListClientDevicesAssociatedWithCoreDeviceCommandInput extends ListClientDevicesAssociatedWithCoreDeviceRequest {
    }
    export interface ListClientDevicesAssociatedWithCoreDeviceCommandOutput extends ListClientDevicesAssociatedWithCoreDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a paginated list of client devices that are associated with a core
        *       device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListClientDevicesAssociatedWithCoreDeviceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListClientDevicesAssociatedWithCoreDeviceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListClientDevicesAssociatedWithCoreDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListClientDevicesAssociatedWithCoreDeviceCommandInput} for command's `input` shape.
        * @see {@link ListClientDevicesAssociatedWithCoreDeviceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListClientDevicesAssociatedWithCoreDeviceCommand extends $Command<ListClientDevicesAssociatedWithCoreDeviceCommandInput, ListClientDevicesAssociatedWithCoreDeviceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListClientDevicesAssociatedWithCoreDeviceCommandInput;
            constructor(input: ListClientDevicesAssociatedWithCoreDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListClientDevicesAssociatedWithCoreDeviceCommandInput, ListClientDevicesAssociatedWithCoreDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListComponentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListComponentsRequest, ListComponentsResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListComponentsCommandInput extends ListComponentsRequest {
    }
    export interface ListComponentsCommandOutput extends ListComponentsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a paginated list of component summaries. This list includes components that you
        *       have permission to view.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListComponentsCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListComponentsCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListComponentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListComponentsCommandInput} for command's `input` shape.
        * @see {@link ListComponentsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListComponentsCommand extends $Command<ListComponentsCommandInput, ListComponentsCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListComponentsCommandInput;
            constructor(input: ListComponentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListComponentsCommandInput, ListComponentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListComponentVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListComponentVersionsRequest, ListComponentVersionsResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListComponentVersionsCommandInput extends ListComponentVersionsRequest {
    }
    export interface ListComponentVersionsCommandOutput extends ListComponentVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a paginated list of all versions for a component. Greater versions are listed first.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListComponentVersionsCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListComponentVersionsCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListComponentVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListComponentVersionsCommandInput} for command's `input` shape.
        * @see {@link ListComponentVersionsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListComponentVersionsCommand extends $Command<ListComponentVersionsCommandInput, ListComponentVersionsCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListComponentVersionsCommandInput;
            constructor(input: ListComponentVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListComponentVersionsCommandInput, ListComponentVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListCoreDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListCoreDevicesRequest, ListCoreDevicesResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListCoreDevicesCommandInput extends ListCoreDevicesRequest {
    }
    export interface ListCoreDevicesCommandOutput extends ListCoreDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a paginated list of Greengrass core devices.</p>
        *          <note>
        *             <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core
        *         software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then
        *         the reported status of that device might not reflect its current status. The status timestamp
        *         indicates when the device status was last updated.</p>
        *             <p>Core devices send status updates at the following times:</p>
        *             <ul>
        *                <li>
        *                   <p>When the IoT Greengrass Core software starts</p>
        *                </li>
        *                <li>
        *                   <p>When the core device receives a deployment from the Amazon Web Services Cloud</p>
        *                </li>
        *                <li>
        *                   <p>When the status of any component on the core device becomes <code>BROKEN</code>
        *                   </p>
        *                </li>
        *                <li>
        *                   <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval
        *             that you can configure</a>, which defaults to 24 hours</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListCoreDevicesCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListCoreDevicesCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListCoreDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCoreDevicesCommandInput} for command's `input` shape.
        * @see {@link ListCoreDevicesCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListCoreDevicesCommand extends $Command<ListCoreDevicesCommandInput, ListCoreDevicesCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListCoreDevicesCommandInput;
            constructor(input: ListCoreDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCoreDevicesCommandInput, ListCoreDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListDeploymentsRequest, ListDeploymentsResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListDeploymentsCommandInput extends ListDeploymentsRequest {
    }
    export interface ListDeploymentsCommandOutput extends ListDeploymentsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a paginated list of deployments.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListDeploymentsCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListDeploymentsCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeploymentsCommandInput} for command's `input` shape.
        * @see {@link ListDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListDeploymentsCommand extends $Command<ListDeploymentsCommandInput, ListDeploymentsCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListDeploymentsCommandInput;
            constructor(input: ListDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeploymentsCommandInput, ListDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListEffectiveDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListEffectiveDeploymentsRequest, ListEffectiveDeploymentsResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListEffectiveDeploymentsCommandInput extends ListEffectiveDeploymentsRequest {
    }
    export interface ListEffectiveDeploymentsCommandOutput extends ListEffectiveDeploymentsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a paginated list of deployment jobs that IoT Greengrass sends to Greengrass core
        *       devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListEffectiveDeploymentsCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListEffectiveDeploymentsCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListEffectiveDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEffectiveDeploymentsCommandInput} for command's `input` shape.
        * @see {@link ListEffectiveDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListEffectiveDeploymentsCommand extends $Command<ListEffectiveDeploymentsCommandInput, ListEffectiveDeploymentsCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListEffectiveDeploymentsCommandInput;
            constructor(input: ListEffectiveDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEffectiveDeploymentsCommandInput, ListEffectiveDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListInstalledComponentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListInstalledComponentsRequest, ListInstalledComponentsResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListInstalledComponentsCommandInput extends ListInstalledComponentsRequest {
    }
    export interface ListInstalledComponentsCommandOutput extends ListInstalledComponentsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a paginated list of the components that a Greengrass core device runs.
        *       This list doesn't include components that are deployed from local deployments or
        *       components that are deployed as dependencies of other components.</p>
        *          <note>
        *             <p>IoT Greengrass relies on individual devices to send status updates to the Amazon Web Services Cloud. If the IoT Greengrass Core
        *         software isn't running on the device, or if device isn't connected to the Amazon Web Services Cloud, then
        *         the reported status of that device might not reflect its current status. The status timestamp
        *         indicates when the device status was last updated.</p>
        *             <p>Core devices send status updates at the following times:</p>
        *             <ul>
        *                <li>
        *                   <p>When the IoT Greengrass Core software starts</p>
        *                </li>
        *                <li>
        *                   <p>When the core device receives a deployment from the Amazon Web Services Cloud</p>
        *                </li>
        *                <li>
        *                   <p>When the status of any component on the core device becomes <code>BROKEN</code>
        *                   </p>
        *                </li>
        *                <li>
        *                   <p>At a <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html#greengrass-nucleus-component-configuration-fss">regular interval
        *             that you can configure</a>, which defaults to 24 hours</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListInstalledComponentsCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListInstalledComponentsCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListInstalledComponentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInstalledComponentsCommandInput} for command's `input` shape.
        * @see {@link ListInstalledComponentsCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListInstalledComponentsCommand extends $Command<ListInstalledComponentsCommandInput, ListInstalledComponentsCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListInstalledComponentsCommandInput;
            constructor(input: ListInstalledComponentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInstalledComponentsCommandInput, ListInstalledComponentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the list of tags for an IoT Greengrass resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ListTagsForResourceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ListTagsForResourceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ResolveComponentCandidatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { ResolveComponentCandidatesRequest, ResolveComponentCandidatesResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface ResolveComponentCandidatesCommandInput extends ResolveComponentCandidatesRequest {
    }
    export interface ResolveComponentCandidatesCommandOutput extends ResolveComponentCandidatesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of components that meet the component, version, and platform requirements
        *       of a deployment. Greengrass core devices call this operation when they receive a deployment to
        *       identify the components to install.</p>
        *          <p>This operation identifies components that meet all dependency requirements for a
        *       deployment. If the requirements conflict, then this operation returns an error and the
        *       deployment fails. For example, this occurs if component <code>A</code> requires version
        *         <code>>2.0.0</code> and component <code>B</code> requires version <code><2.0.0</code>
        *       of a component dependency.</p>
        *          <p>When you specify the component candidates to resolve, IoT Greengrass compares each component's
        *       digest from the core device with the component's digest in the Amazon Web Services Cloud. If the digests don't
        *       match, then IoT Greengrass specifies to use the version from the Amazon Web Services Cloud.</p>
        *          <important>
        *             <p>To use this operation, you must use the data plane API endpoint and authenticate with an
        *         IoT device certificate. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/greengrass.html">IoT Greengrass endpoints and quotas</a>.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, ResolveComponentCandidatesCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, ResolveComponentCandidatesCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new ResolveComponentCandidatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResolveComponentCandidatesCommandInput} for command's `input` shape.
        * @see {@link ResolveComponentCandidatesCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class ResolveComponentCandidatesCommand extends $Command<ResolveComponentCandidatesCommandInput, ResolveComponentCandidatesCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: ResolveComponentCandidatesCommandInput;
            constructor(input: ResolveComponentCandidatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResolveComponentCandidatesCommandInput, ResolveComponentCandidatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds tags to an IoT Greengrass resource. If a tag already exists for the resource, this operation
        *       updates the tag's value.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, TagResourceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, TagResourceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a tag from an IoT Greengrass resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, UntagResourceCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, UntagResourceCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/UpdateConnectivityInfoCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GreengrassV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client";
    import { UpdateConnectivityInfoRequest, UpdateConnectivityInfoResponse } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0";
    export interface UpdateConnectivityInfoCommandInput extends UpdateConnectivityInfoRequest {
    }
    export interface UpdateConnectivityInfoCommandOutput extends UpdateConnectivityInfoResponse, __MetadataBearer {
    }
    /**
        * <p>Updates connectivity information for a Greengrass core device.</p>
        *          <p>Connectivity information includes endpoints and ports where client devices
        *       can connect to an MQTT broker on the core device. When a client device
        *       calls the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-discover-api.html">IoT Greengrass discovery API</a>,
        *       IoT Greengrass returns connectivity information for all of the core devices where the client device can
        *       connect. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/connect-client-devices.html">Connect client devices to
        *         core devices</a> in the <i>IoT Greengrass Version 2 Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { GreengrassV2Client, UpdateConnectivityInfoCommand } from "@aws-sdk/client-greengrassv2"; // ES Modules import
        * // const { GreengrassV2Client, UpdateConnectivityInfoCommand } = require("@aws-sdk/client-greengrassv2"); // CommonJS import
        * const client = new GreengrassV2Client(config);
        * const command = new UpdateConnectivityInfoCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectivityInfoCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectivityInfoCommandOutput} for command's `response` shape.
        * @see {@link GreengrassV2ClientResolvedConfig | config} for GreengrassV2Client's `config` shape.
        *
        */
    export class UpdateConnectivityInfoCommand extends $Command<UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput, GreengrassV2ClientResolvedConfig> {
            readonly input: UpdateConnectivityInfoCommandInput;
            constructor(input: UpdateConnectivityInfoCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: GreengrassV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput>;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/GreengrassV2Client' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateServiceRoleToAccountCommandInput, AssociateServiceRoleToAccountCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/AssociateServiceRoleToAccountCommand";
    import { BatchAssociateClientDeviceWithCoreDeviceCommandInput, BatchAssociateClientDeviceWithCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/BatchAssociateClientDeviceWithCoreDeviceCommand";
    import { BatchDisassociateClientDeviceFromCoreDeviceCommandInput, BatchDisassociateClientDeviceFromCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/BatchDisassociateClientDeviceFromCoreDeviceCommand";
    import { CancelDeploymentCommandInput, CancelDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CancelDeploymentCommand";
    import { CreateComponentVersionCommandInput, CreateComponentVersionCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CreateComponentVersionCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/CreateDeploymentCommand";
    import { DeleteComponentCommandInput, DeleteComponentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteComponentCommand";
    import { DeleteCoreDeviceCommandInput, DeleteCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteCoreDeviceCommand";
    import { DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DeleteDeploymentCommand";
    import { DescribeComponentCommandInput, DescribeComponentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DescribeComponentCommand";
    import { DisassociateServiceRoleFromAccountCommandInput, DisassociateServiceRoleFromAccountCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/DisassociateServiceRoleFromAccountCommand";
    import { GetComponentCommandInput, GetComponentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetComponentCommand";
    import { GetComponentVersionArtifactCommandInput, GetComponentVersionArtifactCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetComponentVersionArtifactCommand";
    import { GetConnectivityInfoCommandInput, GetConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetConnectivityInfoCommand";
    import { GetCoreDeviceCommandInput, GetCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetCoreDeviceCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetDeploymentCommand";
    import { GetServiceRoleForAccountCommandInput, GetServiceRoleForAccountCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/GetServiceRoleForAccountCommand";
    import { ListClientDevicesAssociatedWithCoreDeviceCommandInput, ListClientDevicesAssociatedWithCoreDeviceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListClientDevicesAssociatedWithCoreDeviceCommand";
    import { ListComponentsCommandInput, ListComponentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListComponentsCommand";
    import { ListComponentVersionsCommandInput, ListComponentVersionsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListComponentVersionsCommand";
    import { ListCoreDevicesCommandInput, ListCoreDevicesCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListCoreDevicesCommand";
    import { ListDeploymentsCommandInput, ListDeploymentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListDeploymentsCommand";
    import { ListEffectiveDeploymentsCommandInput, ListEffectiveDeploymentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListEffectiveDeploymentsCommand";
    import { ListInstalledComponentsCommandInput, ListInstalledComponentsCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListInstalledComponentsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ListTagsForResourceCommand";
    import { ResolveComponentCandidatesCommandInput, ResolveComponentCandidatesCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/ResolveComponentCandidatesCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/UntagResourceCommand";
    import { UpdateConnectivityInfoCommandInput, UpdateConnectivityInfoCommandOutput } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/commands/UpdateConnectivityInfoCommand";
    export type ServiceInputTypes = AssociateServiceRoleToAccountCommandInput | BatchAssociateClientDeviceWithCoreDeviceCommandInput | BatchDisassociateClientDeviceFromCoreDeviceCommandInput | CancelDeploymentCommandInput | CreateComponentVersionCommandInput | CreateDeploymentCommandInput | DeleteComponentCommandInput | DeleteCoreDeviceCommandInput | DeleteDeploymentCommandInput | DescribeComponentCommandInput | DisassociateServiceRoleFromAccountCommandInput | GetComponentCommandInput | GetComponentVersionArtifactCommandInput | GetConnectivityInfoCommandInput | GetCoreDeviceCommandInput | GetDeploymentCommandInput | GetServiceRoleForAccountCommandInput | ListClientDevicesAssociatedWithCoreDeviceCommandInput | ListComponentVersionsCommandInput | ListComponentsCommandInput | ListCoreDevicesCommandInput | ListDeploymentsCommandInput | ListEffectiveDeploymentsCommandInput | ListInstalledComponentsCommandInput | ListTagsForResourceCommandInput | ResolveComponentCandidatesCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateConnectivityInfoCommandInput;
    export type ServiceOutputTypes = AssociateServiceRoleToAccountCommandOutput | BatchAssociateClientDeviceWithCoreDeviceCommandOutput | BatchDisassociateClientDeviceFromCoreDeviceCommandOutput | CancelDeploymentCommandOutput | CreateComponentVersionCommandOutput | CreateDeploymentCommandOutput | DeleteComponentCommandOutput | DeleteCoreDeviceCommandOutput | DeleteDeploymentCommandOutput | DescribeComponentCommandOutput | DisassociateServiceRoleFromAccountCommandOutput | GetComponentCommandOutput | GetComponentVersionArtifactCommandOutput | GetConnectivityInfoCommandOutput | GetCoreDeviceCommandOutput | GetDeploymentCommandOutput | GetServiceRoleForAccountCommandOutput | ListClientDevicesAssociatedWithCoreDeviceCommandOutput | ListComponentVersionsCommandOutput | ListComponentsCommandOutput | ListCoreDevicesCommandOutput | ListDeploymentsCommandOutput | ListEffectiveDeploymentsCommandOutput | ListInstalledComponentsCommandOutput | ListTagsForResourceCommandOutput | ResolveComponentCandidatesCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateConnectivityInfoCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type GreengrassV2ClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of GreengrassV2Client class constructor that set the region, credentials and other options.
        */
    export interface GreengrassV2ClientConfig extends GreengrassV2ClientConfigType {
    }
    type GreengrassV2ClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of GreengrassV2Client class. This is resolved and normalized from the {@link GreengrassV2ClientConfig | constructor configuration interface}.
        */
    export interface GreengrassV2ClientResolvedConfig extends GreengrassV2ClientResolvedConfigType {
    }
    /**
        * <p>IoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities
        *       to edge devices. This enables devices to collect and analyze data closer to the source of
        *       information, react autonomously to local events, and communicate securely with each other on
        *       local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data
        *       to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and
        *       deploy applications to fleets of edge devices for local operation.</p>
        *          <p>IoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console.
        *       Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components,
        *       manage deployments, and core devices.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/what-is-iot-greengrass.html">What is IoT Greengrass?</a> in
        *       the <i>IoT Greengrass V2 Developer Guide</i>.</p>
        */
    export class GreengrassV2Client extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, GreengrassV2ClientResolvedConfig> {
            /**
                * The resolved configuration of GreengrassV2Client class. This is resolved and normalized from the {@link GreengrassV2ClientConfig | constructor configuration interface}.
                */
            readonly config: GreengrassV2ClientResolvedConfig;
            constructor(configuration: GreengrassV2ClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { GreengrassV2ServiceException as __BaseException } from "@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/GreengrassV2ServiceException";
    /**
        * <p>You don't have permission to perform the action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Contains a request to associate a client device with a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation consumes a list of these
        *       requests.</p>
        */
    export interface AssociateClientDeviceWithCoreDeviceEntry {
            /**
                * <p>The name of the IoT thing that represents the client device to associate.</p>
                */
            thingName: string | undefined;
    }
    export namespace AssociateClientDeviceWithCoreDeviceEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateClientDeviceWithCoreDeviceEntry) => any;
    }
    /**
        * <p>Contains an error that occurs from a request to associate a client device with a core
        *       device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchAssociateClientDeviceWithCoreDevice.html">BatchAssociateClientDeviceWithCoreDevice</a> operation returns a list of these
        *       errors.</p>
        */
    export interface AssociateClientDeviceWithCoreDeviceErrorEntry {
            /**
                * <p>The name of the IoT thing whose associate request failed.</p>
                */
            thingName?: string;
            /**
                * <p>The error code for the request.</p>
                */
            code?: string;
            /**
                * <p>A message that provides additional information about the error.</p>
                */
            message?: string;
    }
    export namespace AssociateClientDeviceWithCoreDeviceErrorEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateClientDeviceWithCoreDeviceErrorEntry) => any;
    }
    /**
        * <p>Contains information about a client device that is associated to a core device for cloud
        *       discovery.</p>
        */
    export interface AssociatedClientDevice {
            /**
                * <p>The name of the IoT thing that represents the associated client device.</p>
                */
            thingName?: string;
            /**
                * <p>The time that the client device was associated, expressed in ISO 8601 format.</p>
                */
            associationTimestamp?: Date;
    }
    export namespace AssociatedClientDevice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociatedClientDevice) => any;
    }
    export interface AssociateServiceRoleToAccountRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the service role to associate with IoT Greengrass for your
                *       Amazon Web Services account in this Amazon Web Services Region.</p>
                */
            roleArn: string | undefined;
    }
    export namespace AssociateServiceRoleToAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateServiceRoleToAccountRequest) => any;
    }
    export interface AssociateServiceRoleToAccountResponse {
            /**
                * <p>The time when the service role was associated with IoT Greengrass for your Amazon Web Services account in this
                *       Amazon Web Services Region.</p>
                */
            associatedAt?: string;
    }
    export namespace AssociateServiceRoleToAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateServiceRoleToAccountResponse) => any;
    }
    /**
        * <p>IoT Greengrass can't process your request right now. Try again later.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * <p>The amount of time to wait before you retry the request.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>Contains information about a validation exception field.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The name of the exception field.</p>
                */
            name: string | undefined;
            /**
                * <p>The message of the exception field.</p>
                */
            message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CANNOT_PARSE",
            FIELD_VALIDATION_FAILED = "FIELD_VALIDATION_FAILED",
            OTHER = "OTHER",
            UNKNOWN_OPERATION = "UNKNOWN_OPERATION"
    }
    /**
        * <p>The request isn't valid. This can occur if your request contains malformed JSON or
        *       unsupported characters.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>The reason for the validation exception.</p>
                */
            reason?: ValidationExceptionReason | string;
            /**
                * <p>The list of fields that failed to validate.</p>
                */
            fields?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface BatchAssociateClientDeviceWithCoreDeviceRequest {
            /**
                * <p>The list of client devices to associate.</p>
                */
            entries?: AssociateClientDeviceWithCoreDeviceEntry[];
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName: string | undefined;
    }
    export namespace BatchAssociateClientDeviceWithCoreDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateClientDeviceWithCoreDeviceRequest) => any;
    }
    export interface BatchAssociateClientDeviceWithCoreDeviceResponse {
            /**
                * <p>The list of any errors for the entries in the request. Each error entry contains the name
                *       of the IoT thing that failed to associate.</p>
                */
            errorEntries?: AssociateClientDeviceWithCoreDeviceErrorEntry[];
    }
    export namespace BatchAssociateClientDeviceWithCoreDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateClientDeviceWithCoreDeviceResponse) => any;
    }
    /**
        * <p>The requested resource can't be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that isn't found.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The type of the resource that isn't found.</p>
                */
            resourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Your request exceeded a request rate quota. For example, you might have exceeded the
        *       amount of times that you can retrieve device or deployment status per second.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * <p>The code for the quota in <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html">Service Quotas</a>.</p>
                */
            quotaCode?: string;
            /**
                * <p>The code for the service in <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html">Service Quotas</a>.</p>
                */
            serviceCode?: string;
            /**
                * <p>The amount of time to wait before you retry the request.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>Contains a request to disassociate a client device from a core device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation consumes a list of these
        *       requests.</p>
        */
    export interface DisassociateClientDeviceFromCoreDeviceEntry {
            /**
                * <p>The name of the IoT thing that represents the client device to disassociate.</p>
                */
            thingName: string | undefined;
    }
    export namespace DisassociateClientDeviceFromCoreDeviceEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateClientDeviceFromCoreDeviceEntry) => any;
    }
    export interface BatchDisassociateClientDeviceFromCoreDeviceRequest {
            /**
                * <p>The list of client devices to disassociate.</p>
                */
            entries?: DisassociateClientDeviceFromCoreDeviceEntry[];
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName: string | undefined;
    }
    export namespace BatchDisassociateClientDeviceFromCoreDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateClientDeviceFromCoreDeviceRequest) => any;
    }
    /**
        * <p>Contains an error that occurs from a request to disassociate a client device from a core
        *       device. The <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_BatchDisassociateClientDeviceWithCoreDevice.html">BatchDisassociateClientDeviceWithCoreDevice</a> operation returns a list of these
        *       errors.</p>
        */
    export interface DisassociateClientDeviceFromCoreDeviceErrorEntry {
            /**
                * <p>The name of the IoT thing whose disassociate request failed.</p>
                */
            thingName?: string;
            /**
                * <p>The error code for the request.</p>
                */
            code?: string;
            /**
                * <p>A message that provides additional information about the error.</p>
                */
            message?: string;
    }
    export namespace DisassociateClientDeviceFromCoreDeviceErrorEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateClientDeviceFromCoreDeviceErrorEntry) => any;
    }
    export interface BatchDisassociateClientDeviceFromCoreDeviceResponse {
            /**
                * <p>The list of any errors for the entries in the request. Each error entry contains the name
                *       of the IoT thing that failed to disassociate.</p>
                */
            errorEntries?: DisassociateClientDeviceFromCoreDeviceErrorEntry[];
    }
    export namespace BatchDisassociateClientDeviceFromCoreDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateClientDeviceFromCoreDeviceResponse) => any;
    }
    export interface CancelDeploymentRequest {
            /**
                * <p>The ID of the deployment.</p>
                */
            deploymentId: string | undefined;
    }
    export namespace CancelDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelDeploymentRequest) => any;
    }
    export interface CancelDeploymentResponse {
            /**
                * <p>A message that communicates if the cancel was successful.</p>
                */
            message?: string;
    }
    export namespace CancelDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelDeploymentResponse) => any;
    }
    /**
        * <p>Your request has conflicting operations. This can occur if you're trying to perform more
        *       than one operation on the same resource at the same time.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that conflicts with the request.</p>
                */
            resourceId: string | undefined;
            /**
                * <p>The type of the resource that conflicts with the request.</p>
                */
            resourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export enum CloudComponentState {
            DEPLOYABLE = "DEPLOYABLE",
            DEPRECATED = "DEPRECATED",
            FAILED = "FAILED",
            INITIATED = "INITIATED",
            REQUESTED = "REQUESTED"
    }
    export enum VendorGuidance {
            ACTIVE = "ACTIVE",
            DELETED = "DELETED",
            DISCONTINUED = "DISCONTINUED"
    }
    /**
        * <p>Contains the status of a component version in the IoT Greengrass service.</p>
        */
    export interface CloudComponentStatus {
            /**
                * <p>The state of the component version.</p>
                */
            componentState?: CloudComponentState | string;
            /**
                * <p>A message that communicates details, such as errors, about the status of the component
                *       version.</p>
                */
            message?: string;
            /**
                * <p>A dictionary of errors that communicate why the component version is in an error state.
                *       For example, if IoT Greengrass can't access an artifact for the component version, then
                *         <code>errors</code> contains the artifact's URI as a key, and the error message as the value
                *       for that key.</p>
                */
            errors?: Record<string, string>;
            /**
                * <p>The vendor guidance state for the component version. This state indicates whether
                *       the component version has any issues that you should consider before you deploy it. The vendor guidance state can be:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ACTIVE</code> – This component version is available and recommended for use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DISCONTINUED</code> – This component version has been discontinued by its publisher.
                *           You can deploy this component version, but we recommend that you use a different version of this component.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETED</code> – This component version has been deleted by its publisher, so you can't
                *           deploy it. If you have any existing deployments that specify this component version, those deployments will fail.</p>
                *             </li>
                *          </ul>
                */
            vendorGuidance?: VendorGuidance | string;
            /**
                * <p>A message that communicates details about the vendor guidance state
                *     of the component version. This message communicates why a component version is discontinued or deleted.</p>
                */
            vendorGuidanceMessage?: string;
    }
    export namespace CloudComponentStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudComponentStatus) => any;
    }
    /**
        * <p>Contains information about a platform that a component supports.</p>
        */
    export interface ComponentPlatform {
            /**
                * <p>The friendly name of the platform. This name helps you identify the platform.</p>
                *          <p>If you omit this parameter, IoT Greengrass creates a friendly name from the <code>os</code> and
                *         <code>architecture</code> of the platform.</p>
                */
            name?: string;
            /**
                * <p>A dictionary of attributes for the platform. The IoT Greengrass Core software defines the
                *         <code>os</code> and <code>platform</code> by default. You can specify additional platform
                *       attributes for a core device when you deploy the Greengrass nucleus component. For more information,
                *       see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html">Greengrass nucleus
                *         component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            attributes?: Record<string, string>;
    }
    export namespace ComponentPlatform {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentPlatform) => any;
    }
    /**
        * <p>Contains information about the latest version of a component.</p>
        */
    export interface ComponentLatestVersion {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn?: string;
            /**
                * <p>The version of the component.</p>
                */
            componentVersion?: string;
            /**
                * <p>The time at which the component was created, expressed in ISO 8601 format.</p>
                */
            creationTimestamp?: Date;
            /**
                * <p>The description of the component version.</p>
                */
            description?: string;
            /**
                * <p>The publisher of the component version.</p>
                */
            publisher?: string;
            /**
                * <p>The platforms that the component version supports.</p>
                */
            platforms?: ComponentPlatform[];
    }
    export namespace ComponentLatestVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentLatestVersion) => any;
    }
    /**
        * <p>Contains information about a component.</p>
        */
    export interface Component {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn?: string;
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The latest version of the component and its details.</p>
                */
            latestVersion?: ComponentLatestVersion;
    }
    export namespace Component {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Component) => any;
    }
    /**
        * <p>Contains information about a component that is a candidate to deploy to a Greengrass core
        *       device.</p>
        */
    export interface ComponentCandidate {
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The version of the component.</p>
                */
            componentVersion?: string;
            /**
                * <p>The version requirements for the component's dependencies. Greengrass core devices get the
                *       version requirements from component recipes.</p>
                *          <p>IoT Greengrass V2 uses semantic version constraints. For more information, see <a href="https://semver.org/">Semantic Versioning</a>.</p>
                */
            versionRequirements?: Record<string, string>;
    }
    export namespace ComponentCandidate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentCandidate) => any;
    }
    /**
        * <p>Contains information about a deployment's update to a component's configuration on
        *       Greengrass core devices. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component
        *         configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
        */
    export interface ComponentConfigurationUpdate {
            /**
                * <p>A serialized JSON string that contains the configuration object to merge to target
                *       devices. The core device merges this configuration with the component's existing
                *       configuration. If this is the first time a component deploys on a device, the core device
                *       merges this configuration with the component's default configuration. This means that the core
                *       device keeps it's existing configuration for keys and values that you don't specify in this
                *       object. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#merge-configuration-update">Merge configuration updates</a> in the <i>IoT Greengrass V2 Developer
                *           Guide</i>.</p>
                */
            merge?: string;
            /**
                * <p>The list of configuration nodes to reset to default values on target devices. Use JSON
                *       pointers to specify each node to reset. JSON pointers start with a forward slash
                *       (<code>/</code>) and use forward slashes to separate the key for each level in the object.
                *       For more information, see the <a href="https://tools.ietf.org/html/rfc6901">JSON pointer
                *         specification</a> and <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html#reset-configuration-update">Reset configuration updates</a> in the <i>IoT Greengrass V2 Developer
                *             Guide</i>.</p>
                */
            reset?: string[];
    }
    export namespace ComponentConfigurationUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentConfigurationUpdate) => any;
    }
    export enum ComponentDependencyType {
            HARD = "HARD",
            SOFT = "SOFT"
    }
    /**
        * <p>Contains information about a component dependency for a Lambda function component.</p>
        */
    export interface ComponentDependencyRequirement {
            /**
                * <p>The component version requirement for the component dependency.</p>
                *          <p>IoT Greengrass V2 uses semantic version constraints. For more information, see <a href="https://semver.org/">Semantic Versioning</a>.</p>
                */
            versionRequirement?: string;
            /**
                * <p>The type of this dependency. Choose from the following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SOFT</code> – The component doesn't restart if the dependency changes
                *           state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HARD</code> – The component restarts if the dependency changes
                *           state.</p>
                *             </li>
                *          </ul>
                *          <p>Default: <code>HARD</code>
                *          </p>
                */
            dependencyType?: ComponentDependencyType | string;
    }
    export namespace ComponentDependencyRequirement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentDependencyRequirement) => any;
    }
    /**
        * <p>Contains information about system resource limits that the IoT Greengrass Core software applies to a
        *       component's processes. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits">Configure system resource limits for components</a>.</p>
        */
    export interface SystemResourceLimits {
            /**
                * <p>The maximum amount of RAM, expressed in kilobytes, that a component's processes can use on
                *       the core device.</p>
                */
            memory?: number;
            /**
                * <p>The maximum amount of CPU time that a component's processes can use on the core device. A
                *       core device's total CPU time is equivalent to the device's number of CPU cores. For example,
                *       on a core device with 4 CPU cores, you can set this value to <code>2</code> to limit the
                *       component's processes to 50 percent usage of each CPU core. On a device with 1 CPU core, you
                *       can set this value to <code>0.25</code> to limit the component's processes to 25 percent usage
                *       of the CPU. If you set this value to a number greater than the number of CPU cores, the IoT Greengrass Core
                *       software doesn't limit the component's CPU usage.</p>
                */
            cpus?: number;
    }
    export namespace SystemResourceLimits {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SystemResourceLimits) => any;
    }
    /**
        * <p>Contains information system user and group that the IoT Greengrass Core software uses to run component
        *       processes on the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer
        *         Guide</i>.</p>
        */
    export interface ComponentRunWith {
            /**
                * <p>The POSIX system user and, optionally, group to use to run this component on Linux core
                *       devices. The user, and group if specified, must exist on each Linux core device. Specify the
                *       user and group separated by a colon (<code>:</code>) in the following format:
                *         <code>user:group</code>. The group is optional. If you don't specify a group, the IoT Greengrass Core
                *       software uses the primary user for the group.</p>
                *          <p>If you omit this parameter, the IoT Greengrass Core software uses the default system user and group that
                *       you configure on the Greengrass nucleus component. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a>.</p>
                */
            posixUser?: string;
            /**
                * <p>The system resource limits to apply to this component's process on the core device. IoT Greengrass
                *       currently supports this feature on only Linux core devices.</p>
                *          <p>If you omit this parameter, the IoT Greengrass Core software uses the default system resource limits
                *       that you configure on the Greengrass nucleus component. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-system-resource-limits">Configure system resource limits for components</a>.</p>
                */
            systemResourceLimits?: SystemResourceLimits;
            /**
                * <p>The Windows user to use to run this component on Windows core devices. The user must exist
                *       on each Windows core device, and its name and password must be in the LocalSystem account's
                *       Credentials Manager instance.</p>
                *          <p>If you omit this parameter, the IoT Greengrass Core software uses the default Windows user that you
                *       configure on the Greengrass nucleus component. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a>.</p>
                */
            windowsUser?: string;
    }
    export namespace ComponentRunWith {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentRunWith) => any;
    }
    /**
        * <p>Contains information about a component to deploy.</p>
        */
    export interface ComponentDeploymentSpecification {
            /**
                * <p>The version of the component.</p>
                */
            componentVersion?: string;
            /**
                * <p>The configuration updates to deploy for the component. You can define
                *       <i>reset</i> updates and <i>merge</i> updates. A reset updates
                *       the keys that you specify to the default configuration for the component. A merge updates the
                *       core device's component configuration with the keys and values that you specify. The IoT Greengrass Core
                *       software applies reset updates before it applies merge updates. For more information, see
                *       <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/update-component-configurations.html">Update component
                *         configurations</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            configurationUpdate?: ComponentConfigurationUpdate;
            /**
                * <p>The system user and group that the IoT Greengrass Core software uses to run component processes on the
                *       core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group
                *       that you configure for the core device. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/configure-greengrass-core-v2.html#configure-component-user">Configure the user and group that run components</a> in the <i>IoT Greengrass V2 Developer
                *         Guide</i>.</p>
                */
            runWith?: ComponentRunWith;
    }
    export namespace ComponentDeploymentSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentDeploymentSpecification) => any;
    }
    /**
        * <p>Contains information about a component version in a list.</p>
        */
    export interface ComponentVersionListItem {
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The version of the component.</p>
                */
            componentVersion?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn?: string;
    }
    export namespace ComponentVersionListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComponentVersionListItem) => any;
    }
    export enum ComponentVisibilityScope {
            PRIVATE = "PRIVATE",
            PUBLIC = "PUBLIC"
    }
    /**
        * <p>Contains information about an endpoint and port where client devices can connect to an
        *       MQTT broker on a Greengrass core device.</p>
        */
    export interface ConnectivityInfo {
            /**
                * <p>An ID for the connectivity information.</p>
                */
            id?: string;
            /**
                * <p>The IP address or DNS address where client devices can connect to an MQTT broker on the
                *       Greengrass core device.</p>
                */
            hostAddress?: string;
            /**
                * <p>The port where the MQTT broker operates on the core device. This port is typically 8883,
                *       which is the default port for the MQTT broker component that runs on core devices.</p>
                */
            portNumber?: number;
            /**
                * <p>Additional metadata to provide to client devices that connect to this core device.</p>
                */
            metadata?: string;
    }
    export namespace ConnectivityInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectivityInfo) => any;
    }
    export enum CoreDeviceStatus {
            HEALTHY = "HEALTHY",
            UNHEALTHY = "UNHEALTHY"
    }
    /**
        * <p>Contains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass
        *       Core software.</p>
        */
    export interface CoreDevice {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName?: string;
            /**
                * <p>The status of the core device. Core devices can have the following
                *       statuses:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>HEALTHY</code> – The IoT Greengrass Core software and all components run on the core device without issue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UNHEALTHY</code> – The IoT Greengrass Core software or a component is in a failed state
                *           on the core device.</p>
                *             </li>
                *          </ul>
                */
            status?: CoreDeviceStatus | string;
            /**
                * <p>The time at which the core device's status last updated, expressed in ISO 8601
                *       format.</p>
                */
            lastStatusUpdateTimestamp?: Date;
    }
    export namespace CoreDevice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CoreDevice) => any;
    }
    export enum LambdaEventSourceType {
            IOT_CORE = "IOT_CORE",
            PUB_SUB = "PUB_SUB"
    }
    /**
        * <p>Contains information about an event source for an Lambda function. The event source
        *       defines the topics on which this Lambda function subscribes to receive messages that run the
        *       function.</p>
        */
    export interface LambdaEventSource {
            /**
                * <p>The topic to which to subscribe to receive event messages.</p>
                */
            topic: string | undefined;
            /**
                * <p>The type of event source. Choose from the following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event
                *           source type doesn't support MQTT wildcards (<code>+</code> and <code>#</code>) in the
                *           event source topic.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source
                *           type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source
                *           topic.</p>
                *             </li>
                *          </ul>
                */
            type: LambdaEventSourceType | string | undefined;
    }
    export namespace LambdaEventSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaEventSource) => any;
    }
    export enum LambdaInputPayloadEncodingType {
            BINARY = "binary",
            JSON = "json"
    }
    export enum LambdaFilesystemPermission {
            RO = "ro",
            RW = "rw"
    }
    /**
        * <p>Contains information about a device that Linux processes in a container can access.</p>
        */
    export interface LambdaDeviceMount {
            /**
                * <p>The mount path for the device in the file system.</p>
                */
            path: string | undefined;
            /**
                * <p>The permission to access the device: read/only (<code>ro</code>) or read/write
                *       (<code>rw</code>).</p>
                *          <p>Default: <code>ro</code>
                *          </p>
                */
            permission?: LambdaFilesystemPermission | string;
            /**
                * <p>Whether or not to add the component's system user as an owner of the device.</p>
                *          <p>Default: <code>false</code>
                *          </p>
                */
            addGroupOwner?: boolean;
    }
    export namespace LambdaDeviceMount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaDeviceMount) => any;
    }
    /**
        * <p>Contains information about a volume that Linux processes in a container can access. When
        *       you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the
        *       container.</p>
        */
    export interface LambdaVolumeMount {
            /**
                * <p>The path to the physical volume in the file system.</p>
                */
            sourcePath: string | undefined;
            /**
                * <p>The path to the logical volume in the file system.</p>
                */
            destinationPath: string | undefined;
            /**
                * <p>The permission to access the volume: read/only (<code>ro</code>) or read/write
                *         (<code>rw</code>).</p>
                *          <p>Default: <code>ro</code>
                *          </p>
                */
            permission?: LambdaFilesystemPermission | string;
            /**
                * <p>Whether or not to add the IoT Greengrass user group as an owner of the volume.</p>
                *          <p>Default: <code>false</code>
                *          </p>
                */
            addGroupOwner?: boolean;
    }
    export namespace LambdaVolumeMount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaVolumeMount) => any;
    }
    /**
        * <p>Contains information about a container in which Lambda functions run on Greengrass core
        *       devices.</p>
        */
    export interface LambdaContainerParams {
            /**
                * <p>The memory size of the container, expressed in kilobytes.</p>
                *          <p>Default: <code>16384</code> (16 MB)</p>
                */
            memorySizeInKB?: number;
            /**
                * <p>Whether or not the container can read information from the device's <code>/sys</code>
                *       folder.</p>
                *          <p>Default: <code>false</code>
                *          </p>
                */
            mountROSysfs?: boolean;
            /**
                * <p>The list of volumes that the container can access.</p>
                */
            volumes?: LambdaVolumeMount[];
            /**
                * <p>The list of system devices that the container can access.</p>
                */
            devices?: LambdaDeviceMount[];
    }
    export namespace LambdaContainerParams {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaContainerParams) => any;
    }
    export enum LambdaIsolationMode {
            GREENGRASS_CONTAINER = "GreengrassContainer",
            NO_CONTAINER = "NoContainer"
    }
    /**
        * <p>Contains parameters for a Linux process that contains an Lambda function.</p>
        */
    export interface LambdaLinuxProcessParams {
            /**
                * <p>The isolation mode for the process that contains the Lambda function. The process can run
                *       in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside
                *       any container.</p>
                *          <p>Default: <code>GreengrassContainer</code>
                *          </p>
                */
            isolationMode?: LambdaIsolationMode | string;
            /**
                * <p>The parameters for the container in which the Lambda function runs.</p>
                */
            containerParams?: LambdaContainerParams;
    }
    export namespace LambdaLinuxProcessParams {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaLinuxProcessParams) => any;
    }
    /**
        * <p>Contains parameters for a Lambda function that runs on IoT Greengrass.</p>
        */
    export interface LambdaExecutionParameters {
            /**
                * <p>The list of event sources to which to subscribe to receive work messages. The Lambda
                *       function runs when it receives a message from an event source. You can subscribe this function
                *       to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.</p>
                */
            eventSources?: LambdaEventSource[];
            /**
                * <p>The maximum size of the message queue for the Lambda function component. The IoT Greengrass core
                *       stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to
                *       consume each message.</p>
                */
            maxQueueSize?: number;
            /**
                * <p>The maximum number of instances that a non-pinned Lambda function can run at the same
                *       time.</p>
                */
            maxInstancesCount?: number;
            /**
                * <p>The maximum amount of time in seconds that a non-pinned Lambda function can idle before the
                *       IoT Greengrass Core software stops its process.</p>
                */
            maxIdleTimeInSeconds?: number;
            /**
                * <p>The maximum amount of time in seconds that the Lambda function can process a work
                *       item.</p>
                */
            timeoutInSeconds?: number;
            /**
                * <p>The interval in seconds at which a pinned (also known as long-lived) Lambda function
                *       component sends status updates to the Lambda manager component.</p>
                */
            statusTimeoutInSeconds?: number;
            /**
                * <p>Whether or not the Lambda function is pinned, or long-lived.</p>
                *          <ul>
                *             <li>
                *                <p>A pinned Lambda function starts
                *           when IoT Greengrass starts and keeps running in its own container.</p>
                *             </li>
                *             <li>
                *                <p>A non-pinned Lambda function starts only when it receives a work item and exists after
                *           it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items,
                *           the IoT Greengrass Core software creates multiple instances of the function.</p>
                *             </li>
                *          </ul>
                *          <p>Default: <code>true</code>
                *          </p>
                */
            pinned?: boolean;
            /**
                * <p>The encoding type that the Lambda function supports.</p>
                *          <p>Default: <code>json</code>
                *          </p>
                */
            inputPayloadEncodingType?: LambdaInputPayloadEncodingType | string;
            /**
                * <p>The list of arguments to pass to the Lambda function when it runs.</p>
                */
            execArgs?: string[];
            /**
                * <p>The map of environment variables that are available to the Lambda function when it runs.</p>
                */
            environmentVariables?: Record<string, string>;
            /**
                * <p>The parameters for the Linux process that contains the Lambda function.</p>
                */
            linuxProcessParams?: LambdaLinuxProcessParams;
    }
    export namespace LambdaExecutionParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaExecutionParameters) => any;
    }
    /**
        * <p>Contains information about an Lambda function to import to create a component.</p>
        */
    export interface LambdaFunctionRecipeSource {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the Lambda function. The ARN must include the version of the function to
                *       import. You can't use version aliases like <code>$LATEST</code>.</p>
                */
            lambdaArn: string | undefined;
            /**
                * <p>The name of the component.</p>
                *          <p>Defaults to the name of the Lambda function.</p>
                */
            componentName?: string;
            /**
                * <p>The version of the component.</p>
                *          <p>Defaults to the version of the Lambda function as a semantic version. For example, if your
                *       function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>
                */
            componentVersion?: string;
            /**
                * <p>The platforms that the component version supports.</p>
                */
            componentPlatforms?: ComponentPlatform[];
            /**
                * <p>The component versions on which this Lambda function component depends.</p>
                */
            componentDependencies?: Record<string, ComponentDependencyRequirement>;
            /**
                * <p>The system and runtime parameters for the Lambda function as it runs on the Greengrass core
                *       device.</p>
                */
            componentLambdaParameters?: LambdaExecutionParameters;
    }
    export namespace LambdaFunctionRecipeSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaFunctionRecipeSource) => any;
    }
    export interface CreateComponentVersionRequest {
            /**
                * <p>The recipe to use to create the component. The recipe defines the component's metadata,
                *       parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p>
                *          <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>
                */
            inlineRecipe?: Uint8Array;
            /**
                * <p>The parameters to create a component from a Lambda function.</p>
                *          <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>
                */
            lambdaFunction?: LambdaFunctionRecipeSource;
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent.
                *     Idempotency means that the request is successfully processed only once, even if you send the request multiple times.
                *     When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service
                *     returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for
                *     idempotent requests for up to 8 hours.</p>
                */
            clientToken?: string;
    }
    export namespace CreateComponentVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateComponentVersionRequest) => any;
    }
    export interface CreateComponentVersionResponse {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn?: string;
            /**
                * <p>The name of the component.</p>
                */
            componentName: string | undefined;
            /**
                * <p>The version of the component.</p>
                */
            componentVersion: string | undefined;
            /**
                * <p>The time at which the component was created, expressed in ISO 8601 format.</p>
                */
            creationTimestamp: Date | undefined;
            /**
                * <p>The status of the component version in IoT Greengrass V2. This status
                *       is different from the status of the component on a core device.</p>
                */
            status: CloudComponentStatus | undefined;
    }
    export namespace CreateComponentVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateComponentVersionResponse) => any;
    }
    /**
        * <p>The request is already in progress. This exception occurs when you use a client token for
        *       multiple requests while IoT Greengrass is still processing an earlier request that uses the same client
        *       token.</p>
        */
    export class RequestAlreadyInProgressException extends __BaseException {
            readonly name: "RequestAlreadyInProgressException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RequestAlreadyInProgressException, __BaseException>);
    }
    /**
        * <p>Your request exceeds a service quota. For example, you might have the maximum number of
        *       components that you can create.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that exceeds the service quota.</p>
                */
            resourceId?: string;
            /**
                * <p>The type of the resource that exceeds the service quota.</p>
                */
            resourceType?: string;
            /**
                * <p>The code for the quota in <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html">Service Quotas</a>.</p>
                */
            quotaCode: string | undefined;
            /**
                * <p>The code for the service in <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html">Service Quotas</a>.</p>
                */
            serviceCode: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    export enum DeploymentComponentUpdatePolicyAction {
            NOTIFY_COMPONENTS = "NOTIFY_COMPONENTS",
            SKIP_NOTIFY_COMPONENTS = "SKIP_NOTIFY_COMPONENTS"
    }
    /**
        * <p>Contains information about a deployment's policy that defines when components are safe to
        *       update.</p>
        *          <p>Each component on a device can report whether or not it's ready to update. After a
        *       component and its dependencies are ready, they can apply the update in the deployment. You can
        *       configure whether or not the deployment notifies components of an update and waits for a
        *       response. You specify the amount of time each component has to respond to the update
        *       notification.</p>
        */
    export interface DeploymentComponentUpdatePolicy {
            /**
                * <p>The amount of time in seconds that each component on a device has to report that it's safe
                *       to update. If the component waits for longer than this timeout, then the deployment proceeds
                *       on the device.</p>
                *          <p>Default: <code>60</code>
                *          </p>
                */
            timeoutInSeconds?: number;
            /**
                * <p>Whether or not to notify components and wait for components to become safe to update.
                *       Choose from the following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>NOTIFY_COMPONENTS</code> – The deployment notifies each component before
                *           it stops and updates that component. Components can use the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetocomponentupdates">SubscribeToComponentUpdates</a> IPC operation to receive these notifications. Then,
                *           components can respond with the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-defercomponentupdate">DeferComponentUpdate</a> IPC operation. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SKIP_NOTIFY_COMPONENTS</code> – The deployment doesn't notify components
                *           or wait for them to be safe to update.</p>
                *             </li>
                *          </ul>
                *          <p>Default: <code>NOTIFY_COMPONENTS</code>
                *          </p>
                */
            action?: DeploymentComponentUpdatePolicyAction | string;
    }
    export namespace DeploymentComponentUpdatePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentComponentUpdatePolicy) => any;
    }
    /**
        * <p>Contains information about how long a component on a core device can validate its
        *       configuration updates before it times out. Components can use the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-subscribetovalidateconfigurationupdates">SubscribeToValidateConfigurationUpdates</a> IPC operation to receive notifications when
        *       a deployment specifies a configuration update. Then, components can respond with the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/interprocess-communication.html#ipc-operation-sendconfigurationvalidityreport">SendConfigurationValidityReport</a> IPC operation. For more information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/create-deployments.html">Create deployments</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
        */
    export interface DeploymentConfigurationValidationPolicy {
            /**
                * <p>The amount of time in seconds that a component can validate its configuration updates. If
                *       the validation time exceeds this timeout, then the deployment proceeds for the device.</p>
                *          <p>Default: <code>30</code>
                *          </p>
                */
            timeoutInSeconds?: number;
    }
    export namespace DeploymentConfigurationValidationPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentConfigurationValidationPolicy) => any;
    }
    export enum DeploymentFailureHandlingPolicy {
            DO_NOTHING = "DO_NOTHING",
            ROLLBACK = "ROLLBACK"
    }
    /**
        * <p>Contains information about policies that define how a deployment updates components and
        *       handles failure.</p>
        */
    export interface DeploymentPolicies {
            /**
                * <p>The failure handling policy for the configuration deployment. This policy defines what to
                *       do if the deployment fails.</p>
                *          <p>Default: <code>ROLLBACK</code>
                *          </p>
                */
            failureHandlingPolicy?: DeploymentFailureHandlingPolicy | string;
            /**
                * <p>The component update policy for the configuration deployment. This policy defines when
                *       it's safe to deploy the configuration to devices.</p>
                */
            componentUpdatePolicy?: DeploymentComponentUpdatePolicy;
            /**
                * <p>The configuration validation policy for the configuration deployment. This policy defines
                *       how long each component has to validate its configure updates.</p>
                */
            configurationValidationPolicy?: DeploymentConfigurationValidationPolicy;
    }
    export namespace DeploymentPolicies {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentPolicies) => any;
    }
    export enum IoTJobAbortAction {
            CANCEL = "CANCEL"
    }
    export enum IoTJobExecutionFailureType {
            ALL = "ALL",
            FAILED = "FAILED",
            REJECTED = "REJECTED",
            TIMED_OUT = "TIMED_OUT"
    }
    /**
        * <p>Contains criteria that define when and how to cancel a job.</p>
        *          <p>The deployment stops if the following conditions are true:</p>
        *          <ol>
        *             <li>
        *                <p>The number of things that receive the deployment exceeds the
        *           <code>minNumberOfExecutedThings</code>.</p>
        *             </li>
        *             <li>
        *                <p>The percentage of failures with type <code>failureType</code> exceeds the
        *           <code>thresholdPercentage</code>.</p>
        *             </li>
        *          </ol>
        */
    export interface IoTJobAbortCriteria {
            /**
                * <p>The type of job deployment failure that can cancel a job.</p>
                */
            failureType: IoTJobExecutionFailureType | string | undefined;
            /**
                * <p>The action to perform when the criteria are met.</p>
                */
            action: IoTJobAbortAction | string | undefined;
            /**
                * <p>The minimum percentage of <code>failureType</code> failures that occur before the job can
                *       cancel.</p>
                *          <p>This parameter supports up to two digits after the decimal (for example, you can specify
                *       <code>10.9</code> or <code>10.99</code>, but not <code>10.999</code>).</p>
                */
            thresholdPercentage: number | undefined;
            /**
                * <p>The minimum number of things that receive the configuration before the job can
                *       cancel.</p>
                */
            minNumberOfExecutedThings: number | undefined;
    }
    export namespace IoTJobAbortCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IoTJobAbortCriteria) => any;
    }
    /**
        * <p>Contains a list of criteria that define when and how to cancel a configuration
        *       deployment.</p>
        */
    export interface IoTJobAbortConfig {
            /**
                * <p>The list of criteria that define when and how to cancel the configuration deployment.</p>
                */
            criteriaList: IoTJobAbortCriteria[] | undefined;
    }
    export namespace IoTJobAbortConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IoTJobAbortConfig) => any;
    }
    /**
        * <p>Contains information about criteria to meet before a job increases its rollout rate.
        *       Specify either <code>numberOfNotifiedThings</code> or
        *       <code>numberOfSucceededThings</code>.</p>
        */
    export interface IoTJobRateIncreaseCriteria {
            /**
                * <p>The number of devices to receive the job notification before the rollout rate
                *       increases.</p>
                */
            numberOfNotifiedThings?: number;
            /**
                * <p>The number of devices to successfully run the configuration job before the rollout rate
                *       increases.</p>
                */
            numberOfSucceededThings?: number;
    }
    export namespace IoTJobRateIncreaseCriteria {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IoTJobRateIncreaseCriteria) => any;
    }
    /**
        * <p>Contains information about an exponential rollout rate for a configuration deployment
        *       job.</p>
        */
    export interface IoTJobExponentialRolloutRate {
            /**
                * <p>The minimum number of devices that receive a pending job notification, per minute, when
                *       the job starts. This parameter defines the initial rollout rate of the job.</p>
                */
            baseRatePerMinute: number | undefined;
            /**
                * <p>The exponential factor to increase the rollout rate for the job.</p>
                *          <p>This parameter supports up to one digit after the decimal (for example, you can specify
                *       <code>1.5</code>, but not <code>1.55</code>).</p>
                */
            incrementFactor: number | undefined;
            /**
                * <p>The criteria to increase the rollout rate for the job.</p>
                */
            rateIncreaseCriteria: IoTJobRateIncreaseCriteria | undefined;
    }
    export namespace IoTJobExponentialRolloutRate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IoTJobExponentialRolloutRate) => any;
    }
    /**
        * <p>Contains information about the rollout configuration for a job. This configuration defines
        *       the rate at which the job deploys a configuration to a fleet of target devices.</p>
        */
    export interface IoTJobExecutionsRolloutConfig {
            /**
                * <p>The exponential rate to increase the job rollout rate.</p>
                */
            exponentialRate?: IoTJobExponentialRolloutRate;
            /**
                * <p>The maximum number of devices that receive a pending job notification, per minute.</p>
                */
            maximumPerMinute?: number;
    }
    export namespace IoTJobExecutionsRolloutConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IoTJobExecutionsRolloutConfig) => any;
    }
    /**
        * <p>Contains information about the timeout configuration for a job.</p>
        */
    export interface IoTJobTimeoutConfig {
            /**
                * <p>The amount of time, in minutes, that devices have to complete the job. The timer starts
                *       when the job status is set to <code>IN_PROGRESS</code>. If the job status doesn't change to a
                *       terminal state before the time expires, then the job status is set to
                *       <code>TIMED_OUT</code>.</p>
                *          <p>The timeout interval must be between 1 minute and 7 days (10080 minutes).</p>
                */
            inProgressTimeoutInMinutes?: number;
    }
    export namespace IoTJobTimeoutConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IoTJobTimeoutConfig) => any;
    }
    /**
        * <p>Contains information about an IoT job configuration.</p>
        */
    export interface DeploymentIoTJobConfiguration {
            /**
                * <p>The rollout configuration for the job. This configuration defines the rate at which the
                *       job rolls out to the fleet of target devices.</p>
                */
            jobExecutionsRolloutConfig?: IoTJobExecutionsRolloutConfig;
            /**
                * <p>The stop configuration for the job. This configuration defines when and how to stop a job
                *       rollout.</p>
                */
            abortConfig?: IoTJobAbortConfig;
            /**
                * <p>The timeout configuration for the job. This configuration defines the amount of time each
                *       device has to complete the job.</p>
                */
            timeoutConfig?: IoTJobTimeoutConfig;
    }
    export namespace DeploymentIoTJobConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentIoTJobConfiguration) => any;
    }
    export interface CreateDeploymentRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
                */
            targetArn: string | undefined;
            /**
                * <p>The name of the deployment.</p>
                */
            deploymentName?: string;
            /**
                * <p>The components to deploy. This is a dictionary, where each key is the name of a component,
                *         and each key's value is the version and configuration to deploy for that component.</p>
                */
            components?: Record<string, ComponentDeploymentSpecification>;
            /**
                * <p>The job configuration for the deployment configuration. The job configuration specifies
                *       the rollout, timeout, and stop configurations for the deployment configuration.</p>
                */
            iotJobConfiguration?: DeploymentIoTJobConfiguration;
            /**
                * <p>The deployment policies for the deployment. These policies define how the deployment
                *       updates components and handles failure.</p>
                */
            deploymentPolicies?: DeploymentPolicies;
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent.
                *     Idempotency means that the request is successfully processed only once, even if you send the request multiple times.
                *     When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service
                *     returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for
                *     idempotent requests for up to 8 hours.</p>
                */
            clientToken?: string;
    }
    export namespace CreateDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentRequest) => any;
    }
    export interface CreateDeploymentResponse {
            /**
                * <p>The ID of the deployment.</p>
                */
            deploymentId?: string;
            /**
                * <p>The ID of the IoT job that applies the deployment to target devices.</p>
                */
            iotJobId?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
                */
            iotJobArn?: string;
    }
    export namespace CreateDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentResponse) => any;
    }
    export interface DeleteComponentRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn: string | undefined;
    }
    export namespace DeleteComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteComponentRequest) => any;
    }
    export interface DeleteCoreDeviceRequest {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName: string | undefined;
    }
    export namespace DeleteCoreDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCoreDeviceRequest) => any;
    }
    export interface DeleteDeploymentRequest {
            /**
                * <p>The ID of the deployment.</p>
                */
            deploymentId: string | undefined;
    }
    export namespace DeleteDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeploymentRequest) => any;
    }
    export enum DeploymentStatus {
            ACTIVE = "ACTIVE",
            CANCELED = "CANCELED",
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            INACTIVE = "INACTIVE"
    }
    /**
        * <p>Contains information about a deployment.</p>
        */
    export interface Deployment {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
                */
            targetArn?: string;
            /**
                * <p>The revision number of the deployment.</p>
                */
            revisionId?: string;
            /**
                * <p>The ID of the deployment.</p>
                */
            deploymentId?: string;
            /**
                * <p>The name of the deployment.</p>
                */
            deploymentName?: string;
            /**
                * <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
                */
            creationTimestamp?: Date;
            /**
                * <p>The status of the deployment.</p>
                */
            deploymentStatus?: DeploymentStatus | string;
            /**
                * <p>Whether or not the deployment is the latest revision for its target.</p>
                */
            isLatestForTarget?: boolean;
    }
    export namespace Deployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployment) => any;
    }
    export enum DeploymentHistoryFilter {
            ALL = "ALL",
            LATEST_ONLY = "LATEST_ONLY"
    }
    export interface DescribeComponentRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn: string | undefined;
    }
    export namespace DescribeComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeComponentRequest) => any;
    }
    export interface DescribeComponentResponse {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn?: string;
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The version of the component.</p>
                */
            componentVersion?: string;
            /**
                * <p>The time at which the component was created, expressed in ISO 8601 format.</p>
                */
            creationTimestamp?: Date;
            /**
                * <p>The publisher of the component version.</p>
                */
            publisher?: string;
            /**
                * <p>The description of the component version.</p>
                */
            description?: string;
            /**
                * <p>The status of the component version in IoT Greengrass V2. This status
                *       is different from the status of the component on a core device.</p>
                */
            status?: CloudComponentStatus;
            /**
                * <p>The platforms that the component version supports.</p>
                */
            platforms?: ComponentPlatform[];
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace DescribeComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeComponentResponse) => any;
    }
    export interface DisassociateServiceRoleFromAccountRequest {
    }
    export namespace DisassociateServiceRoleFromAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateServiceRoleFromAccountRequest) => any;
    }
    export interface DisassociateServiceRoleFromAccountResponse {
            /**
                * <p>The time when the service role was disassociated from IoT Greengrass for your Amazon Web Services account in this
                *       Amazon Web Services Region.</p>
                */
            disassociatedAt?: string;
    }
    export namespace DisassociateServiceRoleFromAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateServiceRoleFromAccountResponse) => any;
    }
    export enum EffectiveDeploymentExecutionStatus {
            CANCELED = "CANCELED",
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            QUEUED = "QUEUED",
            REJECTED = "REJECTED",
            TIMED_OUT = "TIMED_OUT"
    }
    /**
        * <p>Contains information about a deployment job that IoT Greengrass sends to a Greengrass core device.</p>
        */
    export interface EffectiveDeployment {
            /**
                * <p>The ID of the deployment.</p>
                */
            deploymentId: string | undefined;
            /**
                * <p>The name of the deployment.</p>
                */
            deploymentName: string | undefined;
            /**
                * <p>The ID of the IoT job that applies the deployment to target devices.</p>
                */
            iotJobId?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
                */
            iotJobArn?: string;
            /**
                * <p>The description of the deployment job.</p>
                */
            description?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
                */
            targetArn: string | undefined;
            /**
                * <p>The status of the deployment job on the Greengrass core device.</p>
                */
            coreDeviceExecutionStatus: EffectiveDeploymentExecutionStatus | string | undefined;
            /**
                * <p>The reason code for the update, if the job was updated.</p>
                */
            reason?: string;
            /**
                * <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
                */
            creationTimestamp: Date | undefined;
            /**
                * <p>The time at which the deployment job was last modified, expressed in ISO 8601
                *       format.</p>
                */
            modifiedTimestamp: Date | undefined;
    }
    export namespace EffectiveDeployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EffectiveDeployment) => any;
    }
    export enum RecipeOutputFormat {
            JSON = "JSON",
            YAML = "YAML"
    }
    export interface GetComponentRequest {
            /**
                * <p>The format of the recipe.</p>
                */
            recipeOutputFormat?: RecipeOutputFormat | string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn: string | undefined;
    }
    export namespace GetComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComponentRequest) => any;
    }
    export interface GetComponentResponse {
            /**
                * <p>The format of the recipe.</p>
                */
            recipeOutputFormat: RecipeOutputFormat | string | undefined;
            /**
                * <p>The recipe of the component version.</p>
                */
            recipe: Uint8Array | undefined;
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComponentResponse) => any;
    }
    export interface GetComponentVersionArtifactRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version. Specify the ARN of a public or a Lambda component version.</p>
                */
            arn: string | undefined;
            /**
                * <p>The name of the artifact.</p>
                *          <p>You can use the <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_GetComponent.html">GetComponent</a> operation to
                *       download the component recipe, which includes the URI of the artifact. The artifact name is
                *       the section of the URI after the scheme. For example, in the artifact URI
                *         <code>greengrass:SomeArtifact.zip</code>, the artifact name is
                *       <code>SomeArtifact.zip</code>.</p>
                */
            artifactName: string | undefined;
    }
    export namespace GetComponentVersionArtifactRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComponentVersionArtifactRequest) => any;
    }
    export interface GetComponentVersionArtifactResponse {
            /**
                * <p>The URL of the artifact.</p>
                */
            preSignedUrl: string | undefined;
    }
    export namespace GetComponentVersionArtifactResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetComponentVersionArtifactResponse) => any;
    }
    export interface GetConnectivityInfoRequest {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            thingName: string | undefined;
    }
    export namespace GetConnectivityInfoRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectivityInfoRequest) => any;
    }
    export interface GetConnectivityInfoResponse {
            /**
                * <p>The connectivity information for the core device.</p>
                */
            connectivityInfo?: ConnectivityInfo[];
            /**
                * <p>A message about the connectivity information request.</p>
                */
            message?: string;
    }
    export namespace GetConnectivityInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectivityInfoResponse) => any;
    }
    export interface GetCoreDeviceRequest {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName: string | undefined;
    }
    export namespace GetCoreDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreDeviceRequest) => any;
    }
    export interface GetCoreDeviceResponse {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName?: string;
            /**
                * <p>The version of the IoT Greengrass Core software that the core device runs. This version is equivalent to
                *       the version of the Greengrass nucleus component that runs on the core device. For more information,
                *       see the <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html">Greengrass nucleus
                *         component</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            coreVersion?: string;
            /**
                * <p>The operating system platform that the core device runs.</p>
                */
            platform?: string;
            /**
                * <p>The computer architecture of the core device.</p>
                */
            architecture?: string;
            /**
                * <p>The status of the core device. The core device status can be:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>HEALTHY</code> – The IoT Greengrass Core software and all components run on the core device without issue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UNHEALTHY</code> – The IoT Greengrass Core software or a component is in a failed state
                *           on the core device.</p>
                *             </li>
                *          </ul>
                */
            status?: CoreDeviceStatus | string;
            /**
                * <p>The time at which the core device's status last updated, expressed in ISO 8601
                *       format.</p>
                */
            lastStatusUpdateTimestamp?: Date;
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetCoreDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCoreDeviceResponse) => any;
    }
    export interface GetDeploymentRequest {
            /**
                * <p>The ID of the deployment.</p>
                */
            deploymentId: string | undefined;
    }
    export namespace GetDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentRequest) => any;
    }
    export interface GetDeploymentResponse {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
                */
            targetArn?: string;
            /**
                * <p>The revision number of the deployment.</p>
                */
            revisionId?: string;
            /**
                * <p>The ID of the deployment.</p>
                */
            deploymentId?: string;
            /**
                * <p>The name of the deployment.</p>
                */
            deploymentName?: string;
            /**
                * <p>The status of the deployment.</p>
                */
            deploymentStatus?: DeploymentStatus | string;
            /**
                * <p>The ID of the IoT job that applies the deployment to target devices.</p>
                */
            iotJobId?: string;
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT job that applies the deployment to target devices.</p>
                */
            iotJobArn?: string;
            /**
                * <p>The components to deploy. This is a dictionary, where each key is the name of a component,
                *         and each key's value is the version and configuration to deploy for that component.</p>
                */
            components?: Record<string, ComponentDeploymentSpecification>;
            /**
                * <p>The deployment policies for the deployment. These policies define how the deployment
                *       updates components and handles failure.</p>
                */
            deploymentPolicies?: DeploymentPolicies;
            /**
                * <p>The job configuration for the deployment configuration. The job configuration specifies
                *       the rollout, timeout, and stop configurations for the deployment configuration.</p>
                */
            iotJobConfiguration?: DeploymentIoTJobConfiguration;
            /**
                * <p>The time at which the deployment was created, expressed in ISO 8601 format.</p>
                */
            creationTimestamp?: Date;
            /**
                * <p>Whether or not the deployment is the latest revision for its target.</p>
                */
            isLatestForTarget?: boolean;
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentResponse) => any;
    }
    export interface GetServiceRoleForAccountRequest {
    }
    export namespace GetServiceRoleForAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceRoleForAccountRequest) => any;
    }
    export interface GetServiceRoleForAccountResponse {
            /**
                * <p>The time when the service role was associated with IoT Greengrass for your Amazon Web Services account in this
                *       Amazon Web Services Region.</p>
                */
            associatedAt?: string;
            /**
                * <p>The ARN of the service role that is associated with IoT Greengrass for your Amazon Web Services account in this
                *       Amazon Web Services Region.</p>
                */
            roleArn?: string;
    }
    export namespace GetServiceRoleForAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceRoleForAccountResponse) => any;
    }
    export interface ListClientDevicesAssociatedWithCoreDeviceRequest {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName: string | undefined;
            /**
                * <p>The maximum number of results to be returned per paginated request.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to be used for the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListClientDevicesAssociatedWithCoreDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClientDevicesAssociatedWithCoreDeviceRequest) => any;
    }
    export interface ListClientDevicesAssociatedWithCoreDeviceResponse {
            /**
                * <p>A list that describes the client devices that are associated with the core device.</p>
                */
            associatedClientDevices?: AssociatedClientDevice[];
            /**
                * <p>The token for the next set of results, or null if there are no additional results.</p>
                */
            nextToken?: string;
    }
    export namespace ListClientDevicesAssociatedWithCoreDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClientDevicesAssociatedWithCoreDeviceResponse) => any;
    }
    export interface ListComponentsRequest {
            /**
                * <p>The scope of the components to list.</p>
                *          <p>Default: <code>PRIVATE</code>
                *          </p>
                */
            scope?: ComponentVisibilityScope | string;
            /**
                * <p>The maximum number of results to be returned per paginated request.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to be used for the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListComponentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComponentsRequest) => any;
    }
    export interface ListComponentsResponse {
            /**
                * <p>A list that summarizes each component.</p>
                */
            components?: Component[];
            /**
                * <p>The token for the next set of results, or null if there are no additional results.</p>
                */
            nextToken?: string;
    }
    export namespace ListComponentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComponentsResponse) => any;
    }
    export interface ListComponentVersionsRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component.</p>
                */
            arn: string | undefined;
            /**
                * <p>The maximum number of results to be returned per paginated request.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to be used for the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListComponentVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComponentVersionsRequest) => any;
    }
    export interface ListComponentVersionsResponse {
            /**
                * <p>A list of versions that exist for the component.</p>
                */
            componentVersions?: ComponentVersionListItem[];
            /**
                * <p>The token for the next set of results, or null if there are no additional results.</p>
                */
            nextToken?: string;
    }
    export namespace ListComponentVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComponentVersionsResponse) => any;
    }
    export interface ListCoreDevicesRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the IoT thing group by which to filter. If you specify this parameter,
                *       the list includes only core devices that have successfully deployed a deployment that targets
                *       the thing group. When you remove a core device from a thing group, the list continues to
                *       include that core device.</p>
                */
            thingGroupArn?: string;
            /**
                * <p>The core device status by which to filter. If you specify this parameter, the list
                *       includes only core devices that have this status. Choose one of the following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>HEALTHY</code> – The IoT Greengrass Core software and all components run on the core device without issue.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UNHEALTHY</code> – The IoT Greengrass Core software or a component is in a failed state
                *           on the core device.</p>
                *             </li>
                *          </ul>
                */
            status?: CoreDeviceStatus | string;
            /**
                * <p>The maximum number of results to be returned per paginated request.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to be used for the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListCoreDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreDevicesRequest) => any;
    }
    export interface ListCoreDevicesResponse {
            /**
                * <p>A list that summarizes each core device.</p>
                */
            coreDevices?: CoreDevice[];
            /**
                * <p>The token for the next set of results, or null if there are no additional results.</p>
                */
            nextToken?: string;
    }
    export namespace ListCoreDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCoreDevicesResponse) => any;
    }
    export interface ListDeploymentsRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the target IoT thing or thing group.</p>
                */
            targetArn?: string;
            /**
                * <p>The filter for the list of deployments. Choose one of the following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALL</code> – The list includes all deployments.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LATEST_ONLY</code> – The list includes only the latest revision of each
                *           deployment.</p>
                *             </li>
                *          </ul>
                *          <p>Default: <code>LATEST_ONLY</code>
                *          </p>
                */
            historyFilter?: DeploymentHistoryFilter | string;
            /**
                * <p>The maximum number of results to be returned per paginated request.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to be used for the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentsRequest) => any;
    }
    export interface ListDeploymentsResponse {
            /**
                * <p>A list that summarizes each deployment.</p>
                */
            deployments?: Deployment[];
            /**
                * <p>The token for the next set of results, or null if there are no additional results.</p>
                */
            nextToken?: string;
    }
    export namespace ListDeploymentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentsResponse) => any;
    }
    export interface ListEffectiveDeploymentsRequest {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName: string | undefined;
            /**
                * <p>The maximum number of results to be returned per paginated request.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to be used for the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListEffectiveDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEffectiveDeploymentsRequest) => any;
    }
    export interface ListEffectiveDeploymentsResponse {
            /**
                * <p>A list that summarizes each deployment on the core device.</p>
                */
            effectiveDeployments?: EffectiveDeployment[];
            /**
                * <p>The token for the next set of results, or null if there are no additional results.</p>
                */
            nextToken?: string;
    }
    export namespace ListEffectiveDeploymentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEffectiveDeploymentsResponse) => any;
    }
    export interface ListInstalledComponentsRequest {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            coreDeviceThingName: string | undefined;
            /**
                * <p>The maximum number of results to be returned per paginated request.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to be used for the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListInstalledComponentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstalledComponentsRequest) => any;
    }
    export enum InstalledComponentLifecycleState {
            BROKEN = "BROKEN",
            ERRORED = "ERRORED",
            FINISHED = "FINISHED",
            INSTALLED = "INSTALLED",
            NEW = "NEW",
            RUNNING = "RUNNING",
            STARTING = "STARTING",
            STOPPING = "STOPPING"
    }
    /**
        * <p>Contains information about a component on a Greengrass core device.</p>
        */
    export interface InstalledComponent {
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The version of the component.</p>
                */
            componentVersion?: string;
            /**
                * <p>The lifecycle state of the component.</p>
                */
            lifecycleState?: InstalledComponentLifecycleState | string;
            /**
                * <p>The details about the lifecycle state of the component.</p>
                */
            lifecycleStateDetails?: string;
            /**
                * <p>Whether or not the component is a root component.</p>
                */
            isRoot?: boolean;
    }
    export namespace InstalledComponent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstalledComponent) => any;
    }
    export interface ListInstalledComponentsResponse {
            /**
                * <p>A list that summarizes each component on the core device.</p>
                */
            installedComponents?: InstalledComponent[];
            /**
                * <p>The token for the next set of results, or null if there are no additional results.</p>
                */
            nextToken?: string;
    }
    export namespace ListInstalledComponentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstalledComponentsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ResolveComponentCandidatesRequest {
            /**
                * <p>The platform to use to resolve compatible components.</p>
                */
            platform?: ComponentPlatform;
            /**
                * <p>The list of components to resolve.</p>
                */
            componentCandidates?: ComponentCandidate[];
    }
    export namespace ResolveComponentCandidatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResolveComponentCandidatesRequest) => any;
    }
    /**
        * <p>Contains information about a component version that is compatible to run on a Greengrass core
        *       device.</p>
        */
    export interface ResolvedComponentVersion {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the component version.</p>
                */
            arn?: string;
            /**
                * <p>The name of the component.</p>
                */
            componentName?: string;
            /**
                * <p>The version of the component.</p>
                */
            componentVersion?: string;
            /**
                * <p>The recipe of the component version.</p>
                */
            recipe?: Uint8Array;
            /**
                * <p>The vendor guidance state for the component version. This state indicates whether
                *       the component version has any issues that you should consider before you deploy it. The vendor guidance state can be:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ACTIVE</code> – This component version is available and recommended for use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DISCONTINUED</code> – This component version has been discontinued by its publisher.
                *           You can deploy this component version, but we recommend that you use a different version of this component.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETED</code> – This component version has been deleted by its publisher, so you can't
                *           deploy it. If you have any existing deployments that specify this component version, those deployments will fail.</p>
                *             </li>
                *          </ul>
                */
            vendorGuidance?: VendorGuidance | string;
            /**
                * <p>A message that communicates details about the vendor guidance state
                *     of the component version. This message communicates why a component version is discontinued or deleted.</p>
                */
            message?: string;
    }
    export namespace ResolvedComponentVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResolvedComponentVersion) => any;
    }
    export interface ResolveComponentCandidatesResponse {
            /**
                * <p>A list of components that meet the requirements that you specify in the request. This list
                *       includes each component's recipe that you can use to install the component.</p>
                */
            resolvedComponentVersions?: ResolvedComponentVersion[];
    }
    export namespace ResolveComponentCandidatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResolveComponentCandidatesResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource to tag.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A list of key-value pairs that contain metadata for the resource. For more
                *       information, see <a href="https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html">Tag your
                *         resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">ARN</a> of the resource to untag.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A list of keys for tags to remove from the resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateConnectivityInfoRequest {
            /**
                * <p>The name of the core device. This is also the name of the IoT thing.</p>
                */
            thingName: string | undefined;
            /**
                * <p>The connectivity information for the core device.</p>
                */
            connectivityInfo: ConnectivityInfo[] | undefined;
    }
    export namespace UpdateConnectivityInfoRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectivityInfoRequest) => any;
    }
    export interface UpdateConnectivityInfoResponse {
            /**
                * <p>The new version of the connectivity information for the core device.</p>
                */
            version?: string;
            /**
                * <p>A message about the connectivity information update request.</p>
                */
            message?: string;
    }
    export namespace UpdateConnectivityInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectivityInfoResponse) => any;
    }
}

declare module '@aws-sdk/client-greengrassv2/node_modules/@aws-sdk/client-greengrassv2/dist-types/models/GreengrassV2ServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from GreengrassV2 service.
        */
    export class GreengrassV2ServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

