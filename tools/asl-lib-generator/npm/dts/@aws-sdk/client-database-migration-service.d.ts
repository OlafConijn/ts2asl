// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-database-migration-service' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/AddTagsToResourceCommand";
    import { ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ApplyPendingMaintenanceActionCommand";
    import { CancelReplicationTaskAssessmentRunCommandInput, CancelReplicationTaskAssessmentRunCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CancelReplicationTaskAssessmentRunCommand";
    import { CreateEndpointCommandInput, CreateEndpointCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateEndpointCommand";
    import { CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateEventSubscriptionCommand";
    import { CreateFleetAdvisorCollectorCommandInput, CreateFleetAdvisorCollectorCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateFleetAdvisorCollectorCommand";
    import { CreateReplicationInstanceCommandInput, CreateReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationInstanceCommand";
    import { CreateReplicationSubnetGroupCommandInput, CreateReplicationSubnetGroupCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationSubnetGroupCommand";
    import { CreateReplicationTaskCommandInput, CreateReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationTaskCommand";
    import { DeleteCertificateCommandInput, DeleteCertificateCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteCertificateCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteConnectionCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteEndpointCommand";
    import { DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteEventSubscriptionCommand";
    import { DeleteFleetAdvisorCollectorCommandInput, DeleteFleetAdvisorCollectorCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteFleetAdvisorCollectorCommand";
    import { DeleteFleetAdvisorDatabasesCommandInput, DeleteFleetAdvisorDatabasesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteFleetAdvisorDatabasesCommand";
    import { DeleteReplicationInstanceCommandInput, DeleteReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationInstanceCommand";
    import { DeleteReplicationSubnetGroupCommandInput, DeleteReplicationSubnetGroupCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationSubnetGroupCommand";
    import { DeleteReplicationTaskAssessmentRunCommandInput, DeleteReplicationTaskAssessmentRunCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationTaskAssessmentRunCommand";
    import { DeleteReplicationTaskCommandInput, DeleteReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationTaskCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeApplicableIndividualAssessmentsCommandInput, DescribeApplicableIndividualAssessmentsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeApplicableIndividualAssessmentsCommand";
    import { DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeCertificatesCommand";
    import { DescribeConnectionsCommandInput, DescribeConnectionsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeConnectionsCommand";
    import { DescribeEndpointsCommandInput, DescribeEndpointsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointsCommand";
    import { DescribeEndpointSettingsCommandInput, DescribeEndpointSettingsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointSettingsCommand";
    import { DescribeEndpointTypesCommandInput, DescribeEndpointTypesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointTypesCommand";
    import { DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventCategoriesCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventsCommand";
    import { DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventSubscriptionsCommand";
    import { DescribeFleetAdvisorCollectorsCommandInput, DescribeFleetAdvisorCollectorsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorCollectorsCommand";
    import { DescribeFleetAdvisorDatabasesCommandInput, DescribeFleetAdvisorDatabasesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorDatabasesCommand";
    import { DescribeFleetAdvisorLsaAnalysisCommandInput, DescribeFleetAdvisorLsaAnalysisCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorLsaAnalysisCommand";
    import { DescribeFleetAdvisorSchemaObjectSummaryCommandInput, DescribeFleetAdvisorSchemaObjectSummaryCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorSchemaObjectSummaryCommand";
    import { DescribeFleetAdvisorSchemasCommandInput, DescribeFleetAdvisorSchemasCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorSchemasCommand";
    import { DescribeOrderableReplicationInstancesCommandInput, DescribeOrderableReplicationInstancesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeOrderableReplicationInstancesCommand";
    import { DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribePendingMaintenanceActionsCommand";
    import { DescribeRefreshSchemasStatusCommandInput, DescribeRefreshSchemasStatusCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeRefreshSchemasStatusCommand";
    import { DescribeReplicationInstancesCommandInput, DescribeReplicationInstancesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationInstancesCommand";
    import { DescribeReplicationInstanceTaskLogsCommandInput, DescribeReplicationInstanceTaskLogsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationInstanceTaskLogsCommand";
    import { DescribeReplicationSubnetGroupsCommandInput, DescribeReplicationSubnetGroupsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationSubnetGroupsCommand";
    import { DescribeReplicationTaskAssessmentResultsCommandInput, DescribeReplicationTaskAssessmentResultsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskAssessmentResultsCommand";
    import { DescribeReplicationTaskAssessmentRunsCommandInput, DescribeReplicationTaskAssessmentRunsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskAssessmentRunsCommand";
    import { DescribeReplicationTaskIndividualAssessmentsCommandInput, DescribeReplicationTaskIndividualAssessmentsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskIndividualAssessmentsCommand";
    import { DescribeReplicationTasksCommandInput, DescribeReplicationTasksCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTasksCommand";
    import { DescribeSchemasCommandInput, DescribeSchemasCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeSchemasCommand";
    import { DescribeTableStatisticsCommandInput, DescribeTableStatisticsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeTableStatisticsCommand";
    import { ImportCertificateCommandInput, ImportCertificateCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ImportCertificateCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyEndpointCommandInput, ModifyEndpointCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyEndpointCommand";
    import { ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyEventSubscriptionCommand";
    import { ModifyReplicationInstanceCommandInput, ModifyReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationInstanceCommand";
    import { ModifyReplicationSubnetGroupCommandInput, ModifyReplicationSubnetGroupCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationSubnetGroupCommand";
    import { ModifyReplicationTaskCommandInput, ModifyReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationTaskCommand";
    import { MoveReplicationTaskCommandInput, MoveReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/MoveReplicationTaskCommand";
    import { RebootReplicationInstanceCommandInput, RebootReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RebootReplicationInstanceCommand";
    import { RefreshSchemasCommandInput, RefreshSchemasCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RefreshSchemasCommand";
    import { ReloadTablesCommandInput, ReloadTablesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ReloadTablesCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RemoveTagsFromResourceCommand";
    import { RunFleetAdvisorLsaAnalysisCommandInput, RunFleetAdvisorLsaAnalysisCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RunFleetAdvisorLsaAnalysisCommand";
    import { StartReplicationTaskAssessmentCommandInput, StartReplicationTaskAssessmentCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskAssessmentCommand";
    import { StartReplicationTaskAssessmentRunCommandInput, StartReplicationTaskAssessmentRunCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskAssessmentRunCommand";
    import { StartReplicationTaskCommandInput, StartReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskCommand";
    import { StopReplicationTaskCommandInput, StopReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StopReplicationTaskCommand";
    import { TestConnectionCommandInput, TestConnectionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/TestConnectionCommand";
    import { UpdateSubscriptionsToEventBridgeCommandInput, UpdateSubscriptionsToEventBridgeCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/UpdateSubscriptionsToEventBridgeCommand";
    import { DatabaseMigrationServiceClient } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    /**
        * <fullname>Database Migration Service</fullname>
        *          <p>Database Migration Service (DMS) can migrate your data to and from the most
        *          widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL
        *          Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise
        *          (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as
        *          heterogeneous migrations between different database platforms, such as Oracle to MySQL or
        *          SQL Server to PostgreSQL.</p>
        *          <p>For more information about DMS, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html">What Is Database Migration Service?</a>
        *          in the <i>Database Migration Service User Guide.</i>
        *          </p>
        */
    export class DatabaseMigrationService extends DatabaseMigrationServiceClient {
            /**
                * <p>Adds metadata tags to an DMS resource, including replication instance, endpoint,
                *          security group, and migration task. These tags can also be used with cost allocation
                *          reporting to track cost associated with DMS resources, or used in a Condition statement in
                *          an IAM policy for DMS. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
                *                <code>Tag</code>
                *             </a> data type description.</p>
                */
            addTagsToResource(args: AddTagsToResourceCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsToResourceCommandOutput>;
            addTagsToResource(args: AddTagsToResourceCommandInput, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            addTagsToResource(args: AddTagsToResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            /**
                * <p>Applies a pending maintenance action to a resource (for example, to a replication instance).</p>
                */
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, options?: __HttpHandlerOptions): Promise<ApplyPendingMaintenanceActionCommandOutput>;
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, cb: (err: any, data?: ApplyPendingMaintenanceActionCommandOutput) => void): void;
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ApplyPendingMaintenanceActionCommandOutput) => void): void;
            /**
                * <p>Cancels a single premigration assessment run.</p>
                *          <p>This operation prevents any individual assessments from running if they haven't started
                *          running. It also attempts to cancel any individual assessments that are currently
                *          running.</p>
                */
            cancelReplicationTaskAssessmentRun(args: CancelReplicationTaskAssessmentRunCommandInput, options?: __HttpHandlerOptions): Promise<CancelReplicationTaskAssessmentRunCommandOutput>;
            cancelReplicationTaskAssessmentRun(args: CancelReplicationTaskAssessmentRunCommandInput, cb: (err: any, data?: CancelReplicationTaskAssessmentRunCommandOutput) => void): void;
            cancelReplicationTaskAssessmentRun(args: CancelReplicationTaskAssessmentRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelReplicationTaskAssessmentRunCommandOutput) => void): void;
            /**
                * <p>Creates an endpoint using the provided settings.</p>
                *          <note>
                *             <p>For a MySQL source or target endpoint, don't explicitly specify the database using
                *          the <code>DatabaseName</code> request parameter on the <code>CreateEndpoint</code> API call.
                *          Specifying <code>DatabaseName</code> when you create a MySQL endpoint replicates all the
                *          task tables to this single database. For MySQL endpoints, you specify the database only when
                *          you specify the schema in the table-mapping rules of the DMS task.</p>
                *          </note>
                */
            createEndpoint(args: CreateEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreateEndpointCommandOutput>;
            createEndpoint(args: CreateEndpointCommandInput, cb: (err: any, data?: CreateEndpointCommandOutput) => void): void;
            createEndpoint(args: CreateEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEndpointCommandOutput) => void): void;
            /**
                * <p> Creates an DMS event notification subscription. </p>
                *          <p>You can specify the type of source (<code>SourceType</code>) you want to be notified of,
                *          provide a list of DMS source IDs (<code>SourceIds</code>) that triggers the events, and
                *          provide a list of event categories (<code>EventCategories</code>) for events you want to be
                *          notified of. If you specify both the <code>SourceType</code> and <code>SourceIds</code>,
                *          such as <code>SourceType = replication-instance</code> and <code>SourceIdentifier =
                *             my-replinstance</code>, you will be notified of all the replication instance events for
                *          the specified source. If you specify a <code>SourceType</code> but don't specify a
                *             <code>SourceIdentifier</code>, you receive notice of the events for that source type for
                *          all your DMS sources. If you don't specify either <code>SourceType</code> nor
                *             <code>SourceIdentifier</code>, you will be notified of events generated from all DMS
                *          sources belonging to your customer account.</p>
                *          <p>For more information about DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
                *             Notifications</a> in the <i>Database Migration Service User
                *             Guide.</i>
                *          </p>
                */
            createEventSubscription(args: CreateEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<CreateEventSubscriptionCommandOutput>;
            createEventSubscription(args: CreateEventSubscriptionCommandInput, cb: (err: any, data?: CreateEventSubscriptionCommandOutput) => void): void;
            createEventSubscription(args: CreateEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Creates a Fleet Advisor collector using the specified parameters.</p>
                */
            createFleetAdvisorCollector(args: CreateFleetAdvisorCollectorCommandInput, options?: __HttpHandlerOptions): Promise<CreateFleetAdvisorCollectorCommandOutput>;
            createFleetAdvisorCollector(args: CreateFleetAdvisorCollectorCommandInput, cb: (err: any, data?: CreateFleetAdvisorCollectorCommandOutput) => void): void;
            createFleetAdvisorCollector(args: CreateFleetAdvisorCollectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFleetAdvisorCollectorCommandOutput) => void): void;
            /**
                * <p>Creates the replication instance using the specified parameters.</p>
                *          <p>DMS requires that your account have certain roles with appropriate permissions
                *          before you can create a replication instance. For information on the required roles, see
                *       <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole">Creating the IAM Roles to Use With the CLI and DMS API</a>. For
                *          information on the required permissions, see
                *       <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions">IAM Permissions Needed to Use DMS</a>.</p>
                */
            createReplicationInstance(args: CreateReplicationInstanceCommandInput, options?: __HttpHandlerOptions): Promise<CreateReplicationInstanceCommandOutput>;
            createReplicationInstance(args: CreateReplicationInstanceCommandInput, cb: (err: any, data?: CreateReplicationInstanceCommandOutput) => void): void;
            createReplicationInstance(args: CreateReplicationInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReplicationInstanceCommandOutput) => void): void;
            /**
                * <p>Creates a replication subnet group given a list of the subnet IDs in a VPC.</p>
                *          <p>The VPC needs to have at least one subnet in at least two availability zones in the Amazon Web Services Region, otherwise the
                *           service will throw a <code>ReplicationSubnetGroupDoesNotCoverEnoughAZs</code> exception.</p>
                */
            createReplicationSubnetGroup(args: CreateReplicationSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateReplicationSubnetGroupCommandOutput>;
            createReplicationSubnetGroup(args: CreateReplicationSubnetGroupCommandInput, cb: (err: any, data?: CreateReplicationSubnetGroupCommandOutput) => void): void;
            createReplicationSubnetGroup(args: CreateReplicationSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReplicationSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Creates a replication task using the specified parameters.</p>
                */
            createReplicationTask(args: CreateReplicationTaskCommandInput, options?: __HttpHandlerOptions): Promise<CreateReplicationTaskCommandOutput>;
            createReplicationTask(args: CreateReplicationTaskCommandInput, cb: (err: any, data?: CreateReplicationTaskCommandOutput) => void): void;
            createReplicationTask(args: CreateReplicationTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateReplicationTaskCommandOutput) => void): void;
            /**
                * <p>Deletes the specified certificate. </p>
                */
            deleteCertificate(args: DeleteCertificateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCertificateCommandOutput>;
            deleteCertificate(args: DeleteCertificateCommandInput, cb: (err: any, data?: DeleteCertificateCommandOutput) => void): void;
            deleteCertificate(args: DeleteCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCertificateCommandOutput) => void): void;
            /**
                * <p>Deletes the connection between a replication instance and an endpoint.</p>
                */
            deleteConnection(args: DeleteConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectionCommandOutput>;
            deleteConnection(args: DeleteConnectionCommandInput, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            deleteConnection(args: DeleteConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified endpoint.</p>
                *          <note>
                *             <p>All tasks associated with the endpoint must be deleted before you can delete the
                *             endpoint.</p>
                *          </note>
                *          <p></p>
                */
            deleteEndpoint(args: DeleteEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEndpointCommandOutput>;
            deleteEndpoint(args: DeleteEndpointCommandInput, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            deleteEndpoint(args: DeleteEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEndpointCommandOutput) => void): void;
            /**
                * <p> Deletes an DMS event subscription. </p>
                */
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventSubscriptionCommandOutput>;
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, cb: (err: any, data?: DeleteEventSubscriptionCommandOutput) => void): void;
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified Fleet Advisor collector.</p>
                */
            deleteFleetAdvisorCollector(args: DeleteFleetAdvisorCollectorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFleetAdvisorCollectorCommandOutput>;
            deleteFleetAdvisorCollector(args: DeleteFleetAdvisorCollectorCommandInput, cb: (err: any, data?: DeleteFleetAdvisorCollectorCommandOutput) => void): void;
            deleteFleetAdvisorCollector(args: DeleteFleetAdvisorCollectorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFleetAdvisorCollectorCommandOutput) => void): void;
            /**
                * <p>Deletes the specified Fleet Advisor collector databases.</p>
                */
            deleteFleetAdvisorDatabases(args: DeleteFleetAdvisorDatabasesCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFleetAdvisorDatabasesCommandOutput>;
            deleteFleetAdvisorDatabases(args: DeleteFleetAdvisorDatabasesCommandInput, cb: (err: any, data?: DeleteFleetAdvisorDatabasesCommandOutput) => void): void;
            deleteFleetAdvisorDatabases(args: DeleteFleetAdvisorDatabasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFleetAdvisorDatabasesCommandOutput) => void): void;
            /**
                * <p>Deletes the specified replication instance.</p>
                *          <note>
                *             <p>You must delete any migration tasks that are associated with the replication instance
                *             before you can delete it.</p>
                *          </note>
                *          <p></p>
                */
            deleteReplicationInstance(args: DeleteReplicationInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReplicationInstanceCommandOutput>;
            deleteReplicationInstance(args: DeleteReplicationInstanceCommandInput, cb: (err: any, data?: DeleteReplicationInstanceCommandOutput) => void): void;
            deleteReplicationInstance(args: DeleteReplicationInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReplicationInstanceCommandOutput) => void): void;
            /**
                * <p>Deletes a subnet group.</p>
                */
            deleteReplicationSubnetGroup(args: DeleteReplicationSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReplicationSubnetGroupCommandOutput>;
            deleteReplicationSubnetGroup(args: DeleteReplicationSubnetGroupCommandInput, cb: (err: any, data?: DeleteReplicationSubnetGroupCommandOutput) => void): void;
            deleteReplicationSubnetGroup(args: DeleteReplicationSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReplicationSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified replication task.</p>
                */
            deleteReplicationTask(args: DeleteReplicationTaskCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReplicationTaskCommandOutput>;
            deleteReplicationTask(args: DeleteReplicationTaskCommandInput, cb: (err: any, data?: DeleteReplicationTaskCommandOutput) => void): void;
            deleteReplicationTask(args: DeleteReplicationTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReplicationTaskCommandOutput) => void): void;
            /**
                * <p>Deletes the record of a single premigration assessment run.</p>
                *          <p>This operation removes all metadata that DMS maintains about this assessment run.
                *          However, the operation leaves untouched all information about this assessment run that is
                *          stored in your Amazon S3 bucket.</p>
                */
            deleteReplicationTaskAssessmentRun(args: DeleteReplicationTaskAssessmentRunCommandInput, options?: __HttpHandlerOptions): Promise<DeleteReplicationTaskAssessmentRunCommandOutput>;
            deleteReplicationTaskAssessmentRun(args: DeleteReplicationTaskAssessmentRunCommandInput, cb: (err: any, data?: DeleteReplicationTaskAssessmentRunCommandOutput) => void): void;
            deleteReplicationTaskAssessmentRun(args: DeleteReplicationTaskAssessmentRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteReplicationTaskAssessmentRunCommandOutput) => void): void;
            /**
                * <p>Lists all of the DMS attributes for a customer account. These attributes include DMS
                *          quotas for the account and a unique account identifier in a particular DMS region. DMS
                *          quotas include a list of resource quotas supported by the account, such as the number of
                *          replication instances allowed. The description for each resource quota, includes the quota
                *          name, current usage toward that quota, and the quota's maximum value. DMS uses the unique
                *          account identifier to name each artifact used by DMS in the given region.</p>
                *          <p>This command does not take any parameters.</p>
                */
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountAttributesCommandOutput>;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            /**
                * <p>Provides a list of individual assessments that you can specify for a new premigration
                *          assessment run, given one or more parameters.</p>
                *          <p>If you specify an existing migration task, this operation provides the default individual
                *          assessments you can specify for that task. Otherwise, the specified parameters model elements
                *          of a possible migration task on which to base a premigration assessment run.</p>
                *          <p>To use these migration task modeling parameters, you must specify an existing replication instance,
                *          a source database engine, a target database engine, and a migration type. This combination of
                *          parameters potentially limits the default individual assessments available for an assessment run
                *          created for a corresponding migration task.</p>
                *          <p>If you specify no parameters, this operation provides a list of all possible individual assessments
                *          that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must
                *          specify all of them or the operation cannot provide a list of individual assessments.
                *          The only parameter that you can specify alone is for an existing migration task. The specified task
                *          definition then determines the default list of individual assessments that you can specify in an
                *          assessment run for the task.</p>
                */
            describeApplicableIndividualAssessments(args: DescribeApplicableIndividualAssessmentsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApplicableIndividualAssessmentsCommandOutput>;
            describeApplicableIndividualAssessments(args: DescribeApplicableIndividualAssessmentsCommandInput, cb: (err: any, data?: DescribeApplicableIndividualAssessmentsCommandOutput) => void): void;
            describeApplicableIndividualAssessments(args: DescribeApplicableIndividualAssessmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApplicableIndividualAssessmentsCommandOutput) => void): void;
            /**
                * <p>Provides a description of the certificate.</p>
                */
            describeCertificates(args: DescribeCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCertificatesCommandOutput>;
            describeCertificates(args: DescribeCertificatesCommandInput, cb: (err: any, data?: DescribeCertificatesCommandOutput) => void): void;
            describeCertificates(args: DescribeCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCertificatesCommandOutput) => void): void;
            /**
                * <p>Describes the status of the connections that have been made between the replication
                *          instance and an endpoint. Connections are created when you test an endpoint.</p>
                */
            describeConnections(args: DescribeConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConnectionsCommandOutput>;
            describeConnections(args: DescribeConnectionsCommandInput, cb: (err: any, data?: DescribeConnectionsCommandOutput) => void): void;
            describeConnections(args: DescribeConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConnectionsCommandOutput) => void): void;
            /**
                * <p>Returns information about the endpoints for your account in the current region.</p>
                */
            describeEndpoints(args: DescribeEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEndpointsCommandOutput>;
            describeEndpoints(args: DescribeEndpointsCommandInput, cb: (err: any, data?: DescribeEndpointsCommandOutput) => void): void;
            describeEndpoints(args: DescribeEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEndpointsCommandOutput) => void): void;
            /**
                * <p>Returns information about the possible endpoint settings available
                *          when you create an endpoint for a specific database engine.</p>
                */
            describeEndpointSettings(args: DescribeEndpointSettingsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEndpointSettingsCommandOutput>;
            describeEndpointSettings(args: DescribeEndpointSettingsCommandInput, cb: (err: any, data?: DescribeEndpointSettingsCommandOutput) => void): void;
            describeEndpointSettings(args: DescribeEndpointSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEndpointSettingsCommandOutput) => void): void;
            /**
                * <p>Returns information about the type of endpoints available.</p>
                */
            describeEndpointTypes(args: DescribeEndpointTypesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEndpointTypesCommandOutput>;
            describeEndpointTypes(args: DescribeEndpointTypesCommandInput, cb: (err: any, data?: DescribeEndpointTypesCommandOutput) => void): void;
            describeEndpointTypes(args: DescribeEndpointTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEndpointTypesCommandOutput) => void): void;
            /**
                * <p>Lists categories for all event source types, or, if specified, for a specified source
                *          type. You can see a list of the event categories and source types in <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events
                *             and Notifications</a> in the <i>Database Migration Service User
                *             Guide.</i>
                *          </p>
                */
            describeEventCategories(args: DescribeEventCategoriesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventCategoriesCommandOutput>;
            describeEventCategories(args: DescribeEventCategoriesCommandInput, cb: (err: any, data?: DescribeEventCategoriesCommandOutput) => void): void;
            describeEventCategories(args: DescribeEventCategoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventCategoriesCommandOutput) => void): void;
            /**
                * <p> Lists events for a given source identifier and source type. You can also specify a
                *          start and end time. For more information on DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
                *             Notifications</a> in the <i>Database Migration Service User
                *          Guide.</i>
                *          </p>
                */
            describeEvents(args: DescribeEventsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventsCommandOutput>;
            describeEvents(args: DescribeEventsCommandInput, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            describeEvents(args: DescribeEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            /**
                * <p>Lists all the event subscriptions for a customer account. The description of a
                *          subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>,
                *             <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>,
                *             <code>CreationTime</code>, and <code>Status</code>. </p>
                *          <p>If you specify <code>SubscriptionName</code>, this action lists the description for that
                *          subscription.</p>
                */
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventSubscriptionsCommandOutput>;
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, cb: (err: any, data?: DescribeEventSubscriptionsCommandOutput) => void): void;
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventSubscriptionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the Fleet Advisor collectors in your account.</p>
                */
            describeFleetAdvisorCollectors(args: DescribeFleetAdvisorCollectorsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFleetAdvisorCollectorsCommandOutput>;
            describeFleetAdvisorCollectors(args: DescribeFleetAdvisorCollectorsCommandInput, cb: (err: any, data?: DescribeFleetAdvisorCollectorsCommandOutput) => void): void;
            describeFleetAdvisorCollectors(args: DescribeFleetAdvisorCollectorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFleetAdvisorCollectorsCommandOutput) => void): void;
            /**
                * <p>Returns a list of Fleet Advisor databases in your account.</p>
                */
            describeFleetAdvisorDatabases(args: DescribeFleetAdvisorDatabasesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFleetAdvisorDatabasesCommandOutput>;
            describeFleetAdvisorDatabases(args: DescribeFleetAdvisorDatabasesCommandInput, cb: (err: any, data?: DescribeFleetAdvisorDatabasesCommandOutput) => void): void;
            describeFleetAdvisorDatabases(args: DescribeFleetAdvisorDatabasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFleetAdvisorDatabasesCommandOutput) => void): void;
            /**
                * <p>Provides descriptions of large-scale assessment (LSA) analyses produced by your
                *             Fleet Advisor collectors.
                *         </p>
                */
            describeFleetAdvisorLsaAnalysis(args: DescribeFleetAdvisorLsaAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFleetAdvisorLsaAnalysisCommandOutput>;
            describeFleetAdvisorLsaAnalysis(args: DescribeFleetAdvisorLsaAnalysisCommandInput, cb: (err: any, data?: DescribeFleetAdvisorLsaAnalysisCommandOutput) => void): void;
            describeFleetAdvisorLsaAnalysis(args: DescribeFleetAdvisorLsaAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFleetAdvisorLsaAnalysisCommandOutput) => void): void;
            /**
                * <p>Provides descriptions of the schemas discovered by your Fleet Advisor
                *             collectors.</p>
                */
            describeFleetAdvisorSchemaObjectSummary(args: DescribeFleetAdvisorSchemaObjectSummaryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFleetAdvisorSchemaObjectSummaryCommandOutput>;
            describeFleetAdvisorSchemaObjectSummary(args: DescribeFleetAdvisorSchemaObjectSummaryCommandInput, cb: (err: any, data?: DescribeFleetAdvisorSchemaObjectSummaryCommandOutput) => void): void;
            describeFleetAdvisorSchemaObjectSummary(args: DescribeFleetAdvisorSchemaObjectSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFleetAdvisorSchemaObjectSummaryCommandOutput) => void): void;
            /**
                * <p>Returns a list of schemas detected by Fleet Advisor Collectors in your account.</p>
                */
            describeFleetAdvisorSchemas(args: DescribeFleetAdvisorSchemasCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFleetAdvisorSchemasCommandOutput>;
            describeFleetAdvisorSchemas(args: DescribeFleetAdvisorSchemasCommandInput, cb: (err: any, data?: DescribeFleetAdvisorSchemasCommandOutput) => void): void;
            describeFleetAdvisorSchemas(args: DescribeFleetAdvisorSchemasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFleetAdvisorSchemasCommandOutput) => void): void;
            /**
                * <p>Returns information about the replication instance types that can be created in the
                *          specified region.</p>
                */
            describeOrderableReplicationInstances(args: DescribeOrderableReplicationInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrderableReplicationInstancesCommandOutput>;
            describeOrderableReplicationInstances(args: DescribeOrderableReplicationInstancesCommandInput, cb: (err: any, data?: DescribeOrderableReplicationInstancesCommandOutput) => void): void;
            describeOrderableReplicationInstances(args: DescribeOrderableReplicationInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrderableReplicationInstancesCommandOutput) => void): void;
            /**
                * <p>For internal use only</p>
                */
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribePendingMaintenanceActionsCommandOutput>;
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, cb: (err: any, data?: DescribePendingMaintenanceActionsCommandOutput) => void): void;
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePendingMaintenanceActionsCommandOutput) => void): void;
            /**
                * <p>Returns the status of the RefreshSchemas operation.</p>
                */
            describeRefreshSchemasStatus(args: DescribeRefreshSchemasStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRefreshSchemasStatusCommandOutput>;
            describeRefreshSchemasStatus(args: DescribeRefreshSchemasStatusCommandInput, cb: (err: any, data?: DescribeRefreshSchemasStatusCommandOutput) => void): void;
            describeRefreshSchemasStatus(args: DescribeRefreshSchemasStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRefreshSchemasStatusCommandOutput) => void): void;
            /**
                * <p>Returns information about replication instances for your account in the current
                *          region.</p>
                */
            describeReplicationInstances(args: DescribeReplicationInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationInstancesCommandOutput>;
            describeReplicationInstances(args: DescribeReplicationInstancesCommandInput, cb: (err: any, data?: DescribeReplicationInstancesCommandOutput) => void): void;
            describeReplicationInstances(args: DescribeReplicationInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationInstancesCommandOutput) => void): void;
            /**
                * <p>Returns information about the task logs for the specified task.</p>
                */
            describeReplicationInstanceTaskLogs(args: DescribeReplicationInstanceTaskLogsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationInstanceTaskLogsCommandOutput>;
            describeReplicationInstanceTaskLogs(args: DescribeReplicationInstanceTaskLogsCommandInput, cb: (err: any, data?: DescribeReplicationInstanceTaskLogsCommandOutput) => void): void;
            describeReplicationInstanceTaskLogs(args: DescribeReplicationInstanceTaskLogsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationInstanceTaskLogsCommandOutput) => void): void;
            /**
                * <p>Returns information about the replication subnet groups.</p>
                */
            describeReplicationSubnetGroups(args: DescribeReplicationSubnetGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationSubnetGroupsCommandOutput>;
            describeReplicationSubnetGroups(args: DescribeReplicationSubnetGroupsCommandInput, cb: (err: any, data?: DescribeReplicationSubnetGroupsCommandOutput) => void): void;
            describeReplicationSubnetGroups(args: DescribeReplicationSubnetGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationSubnetGroupsCommandOutput) => void): void;
            /**
                * <p>Returns the task assessment results from the Amazon S3 bucket that DMS creates in your
                *           Amazon Web Services account.  This action always returns the
                *          latest results.</p>
                *          <p>For more information about DMS task assessments, see
                *            <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Creating a task assessment report</a>
                *            in the <i>Database Migration Service User Guide</i>.</p>
                */
            describeReplicationTaskAssessmentResults(args: DescribeReplicationTaskAssessmentResultsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationTaskAssessmentResultsCommandOutput>;
            describeReplicationTaskAssessmentResults(args: DescribeReplicationTaskAssessmentResultsCommandInput, cb: (err: any, data?: DescribeReplicationTaskAssessmentResultsCommandOutput) => void): void;
            describeReplicationTaskAssessmentResults(args: DescribeReplicationTaskAssessmentResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationTaskAssessmentResultsCommandOutput) => void): void;
            /**
                * <p>Returns a paginated list of premigration assessment runs based on filter
                *          settings.</p>
                *          <p>These filter settings can specify a combination of premigration assessment runs,
                *          migration tasks, replication instances, and assessment run status values.</p>
                *          <note>
                *             <p>This operation doesn't return information about individual assessments. For this
                *             information, see the <code>DescribeReplicationTaskIndividualAssessments</code>
                *             operation. </p>
                *          </note>
                */
            describeReplicationTaskAssessmentRuns(args: DescribeReplicationTaskAssessmentRunsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationTaskAssessmentRunsCommandOutput>;
            describeReplicationTaskAssessmentRuns(args: DescribeReplicationTaskAssessmentRunsCommandInput, cb: (err: any, data?: DescribeReplicationTaskAssessmentRunsCommandOutput) => void): void;
            describeReplicationTaskAssessmentRuns(args: DescribeReplicationTaskAssessmentRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationTaskAssessmentRunsCommandOutput) => void): void;
            /**
                * <p>Returns a paginated list of individual assessments based on filter settings.</p>
                *          <p>These filter settings can specify a combination of premigration assessment runs,
                *          migration tasks, and assessment status values.</p>
                */
            describeReplicationTaskIndividualAssessments(args: DescribeReplicationTaskIndividualAssessmentsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationTaskIndividualAssessmentsCommandOutput>;
            describeReplicationTaskIndividualAssessments(args: DescribeReplicationTaskIndividualAssessmentsCommandInput, cb: (err: any, data?: DescribeReplicationTaskIndividualAssessmentsCommandOutput) => void): void;
            describeReplicationTaskIndividualAssessments(args: DescribeReplicationTaskIndividualAssessmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationTaskIndividualAssessmentsCommandOutput) => void): void;
            /**
                * <p>Returns information about replication tasks for your account in the current
                *          region.</p>
                */
            describeReplicationTasks(args: DescribeReplicationTasksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReplicationTasksCommandOutput>;
            describeReplicationTasks(args: DescribeReplicationTasksCommandInput, cb: (err: any, data?: DescribeReplicationTasksCommandOutput) => void): void;
            describeReplicationTasks(args: DescribeReplicationTasksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReplicationTasksCommandOutput) => void): void;
            /**
                * <p>Returns information about the schema for the specified endpoint.</p>
                *
                *          <p></p>
                */
            describeSchemas(args: DescribeSchemasCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSchemasCommandOutput>;
            describeSchemas(args: DescribeSchemasCommandInput, cb: (err: any, data?: DescribeSchemasCommandOutput) => void): void;
            describeSchemas(args: DescribeSchemasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSchemasCommandOutput) => void): void;
            /**
                * <p>Returns table statistics on the database migration task, including table name, rows
                *          inserted, rows updated, and rows deleted.</p>
                *          <p>Note that the "last updated" column the DMS console only indicates the time that DMS
                *          last updated the table statistics record for a table. It does not indicate the time of the
                *          last update to the table.</p>
                */
            describeTableStatistics(args: DescribeTableStatisticsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTableStatisticsCommandOutput>;
            describeTableStatistics(args: DescribeTableStatisticsCommandInput, cb: (err: any, data?: DescribeTableStatisticsCommandOutput) => void): void;
            describeTableStatistics(args: DescribeTableStatisticsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTableStatisticsCommandOutput) => void): void;
            /**
                * <p>Uploads the specified certificate.</p>
                */
            importCertificate(args: ImportCertificateCommandInput, options?: __HttpHandlerOptions): Promise<ImportCertificateCommandOutput>;
            importCertificate(args: ImportCertificateCommandInput, cb: (err: any, data?: ImportCertificateCommandOutput) => void): void;
            importCertificate(args: ImportCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportCertificateCommandOutput) => void): void;
            /**
                * <p>Lists all metadata tags attached to an DMS resource, including
                *          replication instance, endpoint, security group, and migration task.
                *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
                *                <code>Tag</code>
                *             </a> data type description.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Modifies the specified endpoint.</p>
                *          <note>
                *             <p>For a MySQL source or target endpoint, don't explicitly specify the database using
                *          the <code>DatabaseName</code> request parameter on the <code>ModifyEndpoint</code> API call.
                *          Specifying <code>DatabaseName</code> when you modify a MySQL endpoint replicates all the
                *          task tables to this single database. For MySQL endpoints, you specify the database only when
                *          you specify the schema in the table-mapping rules of the DMS task.</p>
                *          </note>
                */
            modifyEndpoint(args: ModifyEndpointCommandInput, options?: __HttpHandlerOptions): Promise<ModifyEndpointCommandOutput>;
            modifyEndpoint(args: ModifyEndpointCommandInput, cb: (err: any, data?: ModifyEndpointCommandOutput) => void): void;
            modifyEndpoint(args: ModifyEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyEndpointCommandOutput) => void): void;
            /**
                * <p>Modifies an existing DMS event notification subscription. </p>
                */
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<ModifyEventSubscriptionCommandOutput>;
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, cb: (err: any, data?: ModifyEventSubscriptionCommandOutput) => void): void;
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Modifies the replication instance to apply new settings. You can change one or more
                *          parameters by specifying these parameters and the new values in the request.</p>
                *          <p>Some settings are applied during the maintenance window.</p>
                *
                *          <p></p>
                */
            modifyReplicationInstance(args: ModifyReplicationInstanceCommandInput, options?: __HttpHandlerOptions): Promise<ModifyReplicationInstanceCommandOutput>;
            modifyReplicationInstance(args: ModifyReplicationInstanceCommandInput, cb: (err: any, data?: ModifyReplicationInstanceCommandOutput) => void): void;
            modifyReplicationInstance(args: ModifyReplicationInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyReplicationInstanceCommandOutput) => void): void;
            /**
                * <p>Modifies the settings for the specified replication subnet group.</p>
                */
            modifyReplicationSubnetGroup(args: ModifyReplicationSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyReplicationSubnetGroupCommandOutput>;
            modifyReplicationSubnetGroup(args: ModifyReplicationSubnetGroupCommandInput, cb: (err: any, data?: ModifyReplicationSubnetGroupCommandOutput) => void): void;
            modifyReplicationSubnetGroup(args: ModifyReplicationSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyReplicationSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Modifies the specified replication task.</p>
                *          <p>You can't modify the task endpoints. The task must be stopped before you can modify it. </p>
                *          <p>For more information about DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks</a> in the
                *             <i>Database Migration Service User Guide</i>.</p>
                */
            modifyReplicationTask(args: ModifyReplicationTaskCommandInput, options?: __HttpHandlerOptions): Promise<ModifyReplicationTaskCommandOutput>;
            modifyReplicationTask(args: ModifyReplicationTaskCommandInput, cb: (err: any, data?: ModifyReplicationTaskCommandOutput) => void): void;
            modifyReplicationTask(args: ModifyReplicationTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyReplicationTaskCommandOutput) => void): void;
            /**
                * <p>Moves a replication task from its current replication instance to a different target
                *          replication instance using the specified parameters. The target replication instance must
                *          be created with the same or later DMS version as the current replication
                *          instance.</p>
                */
            moveReplicationTask(args: MoveReplicationTaskCommandInput, options?: __HttpHandlerOptions): Promise<MoveReplicationTaskCommandOutput>;
            moveReplicationTask(args: MoveReplicationTaskCommandInput, cb: (err: any, data?: MoveReplicationTaskCommandOutput) => void): void;
            moveReplicationTask(args: MoveReplicationTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MoveReplicationTaskCommandOutput) => void): void;
            /**
                * <p>Reboots a replication instance. Rebooting results in a momentary outage, until the
                *          replication instance becomes available again.</p>
                */
            rebootReplicationInstance(args: RebootReplicationInstanceCommandInput, options?: __HttpHandlerOptions): Promise<RebootReplicationInstanceCommandOutput>;
            rebootReplicationInstance(args: RebootReplicationInstanceCommandInput, cb: (err: any, data?: RebootReplicationInstanceCommandOutput) => void): void;
            rebootReplicationInstance(args: RebootReplicationInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootReplicationInstanceCommandOutput) => void): void;
            /**
                * <p>Populates the schema for the specified endpoint. This is an asynchronous operation and
                *          can take several minutes. You can check the status of this operation by calling the
                *          DescribeRefreshSchemasStatus operation.</p>
                */
            refreshSchemas(args: RefreshSchemasCommandInput, options?: __HttpHandlerOptions): Promise<RefreshSchemasCommandOutput>;
            refreshSchemas(args: RefreshSchemasCommandInput, cb: (err: any, data?: RefreshSchemasCommandOutput) => void): void;
            refreshSchemas(args: RefreshSchemasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RefreshSchemasCommandOutput) => void): void;
            /**
                * <p>Reloads the target database table with the source data. </p>
                *          <p>You can only use this operation with a task in the <code>RUNNING</code> state, otherwise the service
                *            will throw an <code>InvalidResourceStateFault</code> exception.</p>
                */
            reloadTables(args: ReloadTablesCommandInput, options?: __HttpHandlerOptions): Promise<ReloadTablesCommandOutput>;
            reloadTables(args: ReloadTablesCommandInput, cb: (err: any, data?: ReloadTablesCommandOutput) => void): void;
            reloadTables(args: ReloadTablesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ReloadTablesCommandOutput) => void): void;
            /**
                * <p>Removes metadata tags from an DMS resource, including replication instance,
                *          endpoint, security group, and migration task. For more information, see
                *          <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
                *                <code>Tag</code>
                *             </a>
                *          data type description.</p>
                */
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsFromResourceCommandOutput>;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            /**
                * <p>Runs large-scale assessment (LSA) analysis on every Fleet Advisor collector in your account.</p>
                */
            runFleetAdvisorLsaAnalysis(args: RunFleetAdvisorLsaAnalysisCommandInput, options?: __HttpHandlerOptions): Promise<RunFleetAdvisorLsaAnalysisCommandOutput>;
            runFleetAdvisorLsaAnalysis(args: RunFleetAdvisorLsaAnalysisCommandInput, cb: (err: any, data?: RunFleetAdvisorLsaAnalysisCommandOutput) => void): void;
            runFleetAdvisorLsaAnalysis(args: RunFleetAdvisorLsaAnalysisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RunFleetAdvisorLsaAnalysisCommandOutput) => void): void;
            /**
                * <p>Starts the replication task.</p>
                *          <p>For more information about DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks </a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            startReplicationTask(args: StartReplicationTaskCommandInput, options?: __HttpHandlerOptions): Promise<StartReplicationTaskCommandOutput>;
            startReplicationTask(args: StartReplicationTaskCommandInput, cb: (err: any, data?: StartReplicationTaskCommandOutput) => void): void;
            startReplicationTask(args: StartReplicationTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartReplicationTaskCommandOutput) => void): void;
            /**
                * <p> Starts the replication task assessment for unsupported data types in the source
                *          database. </p>
                *          <p>You can only use this operation for a task if the following conditions are true:</p>
                *          <ul>
                *             <li>
                *                <p>The task must be in the <code>stopped</code> state.</p>
                *             </li>
                *             <li>
                *                <p>The task must have successful connections to the source and target.</p>
                *             </li>
                *          </ul>
                *          <p>If either of these conditions are not met, an <code>InvalidResourceStateFault</code> error will result. </p>
                *          <p>For information about DMS task assessments, see
                *           <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Creating a task assessment report</a>
                *           in the <i>Database Migration Service User Guide</i>.</p>
                */
            startReplicationTaskAssessment(args: StartReplicationTaskAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<StartReplicationTaskAssessmentCommandOutput>;
            startReplicationTaskAssessment(args: StartReplicationTaskAssessmentCommandInput, cb: (err: any, data?: StartReplicationTaskAssessmentCommandOutput) => void): void;
            startReplicationTaskAssessment(args: StartReplicationTaskAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartReplicationTaskAssessmentCommandOutput) => void): void;
            /**
                * <p>Starts a new premigration assessment run for one or more individual assessments
                *          of a migration task.</p>
                *          <p>The assessments that you can specify depend on the source and target database engine and
                *          the migration type defined for the given task. To run this operation, your migration task
                *          must already be created. After you run this operation, you can review the status of each
                *          individual assessment. You can also run the migration task manually after the assessment
                *          run and its individual assessments complete.</p>
                */
            startReplicationTaskAssessmentRun(args: StartReplicationTaskAssessmentRunCommandInput, options?: __HttpHandlerOptions): Promise<StartReplicationTaskAssessmentRunCommandOutput>;
            startReplicationTaskAssessmentRun(args: StartReplicationTaskAssessmentRunCommandInput, cb: (err: any, data?: StartReplicationTaskAssessmentRunCommandOutput) => void): void;
            startReplicationTaskAssessmentRun(args: StartReplicationTaskAssessmentRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartReplicationTaskAssessmentRunCommandOutput) => void): void;
            /**
                * <p>Stops the replication task.</p>
                */
            stopReplicationTask(args: StopReplicationTaskCommandInput, options?: __HttpHandlerOptions): Promise<StopReplicationTaskCommandOutput>;
            stopReplicationTask(args: StopReplicationTaskCommandInput, cb: (err: any, data?: StopReplicationTaskCommandOutput) => void): void;
            stopReplicationTask(args: StopReplicationTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopReplicationTaskCommandOutput) => void): void;
            /**
                * <p>Tests the connection between the replication instance and the endpoint.</p>
                */
            testConnection(args: TestConnectionCommandInput, options?: __HttpHandlerOptions): Promise<TestConnectionCommandOutput>;
            testConnection(args: TestConnectionCommandInput, cb: (err: any, data?: TestConnectionCommandOutput) => void): void;
            testConnection(args: TestConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestConnectionCommandOutput) => void): void;
            /**
                * <p>Migrates 10 active and enabled Amazon SNS subscriptions at a time and converts them to corresponding Amazon EventBridge rules.
                *          By default, this operation migrates subscriptions only when all your replication instance versions are 3.4.6 or higher.
                *          If any replication instances are from versions earlier than 3.4.6, the operation raises an error and tells you
                *          to upgrade these instances to version 3.4.6 or higher. To enable migration regardless of version, set the <code>Force</code>
                *          option to true. However, if you don't upgrade instances earlier than version 3.4.6, some types of events might not be
                *          available when you use Amazon EventBridge.</p>
                *          <p>To call this operation, make sure that you have certain permissions added to your user account.
                *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html#CHAP_Events-migrate-to-eventbridge">Migrating event subscriptions to Amazon EventBridge</a>
                *             in the <i>Amazon Web Services Database Migration Service User Guide</i>.</p>
                */
            updateSubscriptionsToEventBridge(args: UpdateSubscriptionsToEventBridgeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSubscriptionsToEventBridgeCommandOutput>;
            updateSubscriptionsToEventBridge(args: UpdateSubscriptionsToEventBridgeCommandInput, cb: (err: any, data?: UpdateSubscriptionsToEventBridgeCommandOutput) => void): void;
            updateSubscriptionsToEventBridge(args: UpdateSubscriptionsToEventBridgeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSubscriptionsToEventBridgeCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/AddTagsToResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { AddTagsToResourceMessage, AddTagsToResourceResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface AddTagsToResourceCommandInput extends AddTagsToResourceMessage {
    }
    export interface AddTagsToResourceCommandOutput extends AddTagsToResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds metadata tags to an DMS resource, including replication instance, endpoint,
        *          security group, and migration task. These tags can also be used with cost allocation
        *          reporting to track cost associated with DMS resources, or used in a Condition statement in
        *          an IAM policy for DMS. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
        *                <code>Tag</code>
        *             </a> data type description.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, AddTagsToResourceCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, AddTagsToResourceCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new AddTagsToResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsToResourceCommandInput} for command's `input` shape.
        * @see {@link AddTagsToResourceCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class AddTagsToResourceCommand extends $Command<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: AddTagsToResourceCommandInput;
            constructor(input: AddTagsToResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ApplyPendingMaintenanceActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ApplyPendingMaintenanceActionMessage, ApplyPendingMaintenanceActionResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ApplyPendingMaintenanceActionCommandInput extends ApplyPendingMaintenanceActionMessage {
    }
    export interface ApplyPendingMaintenanceActionCommandOutput extends ApplyPendingMaintenanceActionResponse, __MetadataBearer {
    }
    /**
        * <p>Applies a pending maintenance action to a resource (for example, to a replication instance).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ApplyPendingMaintenanceActionCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ApplyPendingMaintenanceActionCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ApplyPendingMaintenanceActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ApplyPendingMaintenanceActionCommandInput} for command's `input` shape.
        * @see {@link ApplyPendingMaintenanceActionCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ApplyPendingMaintenanceActionCommand extends $Command<ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ApplyPendingMaintenanceActionCommandInput;
            constructor(input: ApplyPendingMaintenanceActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CancelReplicationTaskAssessmentRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { CancelReplicationTaskAssessmentRunMessage, CancelReplicationTaskAssessmentRunResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface CancelReplicationTaskAssessmentRunCommandInput extends CancelReplicationTaskAssessmentRunMessage {
    }
    export interface CancelReplicationTaskAssessmentRunCommandOutput extends CancelReplicationTaskAssessmentRunResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels a single premigration assessment run.</p>
        *          <p>This operation prevents any individual assessments from running if they haven't started
        *          running. It also attempts to cancel any individual assessments that are currently
        *          running.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, CancelReplicationTaskAssessmentRunCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, CancelReplicationTaskAssessmentRunCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new CancelReplicationTaskAssessmentRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelReplicationTaskAssessmentRunCommandInput} for command's `input` shape.
        * @see {@link CancelReplicationTaskAssessmentRunCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class CancelReplicationTaskAssessmentRunCommand extends $Command<CancelReplicationTaskAssessmentRunCommandInput, CancelReplicationTaskAssessmentRunCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: CancelReplicationTaskAssessmentRunCommandInput;
            constructor(input: CancelReplicationTaskAssessmentRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelReplicationTaskAssessmentRunCommandInput, CancelReplicationTaskAssessmentRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { CreateEndpointMessage, CreateEndpointResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface CreateEndpointCommandInput extends CreateEndpointMessage {
    }
    export interface CreateEndpointCommandOutput extends CreateEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an endpoint using the provided settings.</p>
        *          <note>
        *             <p>For a MySQL source or target endpoint, don't explicitly specify the database using
        *          the <code>DatabaseName</code> request parameter on the <code>CreateEndpoint</code> API call.
        *          Specifying <code>DatabaseName</code> when you create a MySQL endpoint replicates all the
        *          task tables to this single database. For MySQL endpoints, you specify the database only when
        *          you specify the schema in the table-mapping rules of the DMS task.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, CreateEndpointCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, CreateEndpointCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new CreateEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEndpointCommandInput} for command's `input` shape.
        * @see {@link CreateEndpointCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class CreateEndpointCommand extends $Command<CreateEndpointCommandInput, CreateEndpointCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: CreateEndpointCommandInput;
            constructor(input: CreateEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEndpointCommandInput, CreateEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { CreateEventSubscriptionMessage, CreateEventSubscriptionResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface CreateEventSubscriptionCommandInput extends CreateEventSubscriptionMessage {
    }
    export interface CreateEventSubscriptionCommandOutput extends CreateEventSubscriptionResponse, __MetadataBearer {
    }
    /**
        * <p> Creates an DMS event notification subscription. </p>
        *          <p>You can specify the type of source (<code>SourceType</code>) you want to be notified of,
        *          provide a list of DMS source IDs (<code>SourceIds</code>) that triggers the events, and
        *          provide a list of event categories (<code>EventCategories</code>) for events you want to be
        *          notified of. If you specify both the <code>SourceType</code> and <code>SourceIds</code>,
        *          such as <code>SourceType = replication-instance</code> and <code>SourceIdentifier =
        *             my-replinstance</code>, you will be notified of all the replication instance events for
        *          the specified source. If you specify a <code>SourceType</code> but don't specify a
        *             <code>SourceIdentifier</code>, you receive notice of the events for that source type for
        *          all your DMS sources. If you don't specify either <code>SourceType</code> nor
        *             <code>SourceIdentifier</code>, you will be notified of events generated from all DMS
        *          sources belonging to your customer account.</p>
        *          <p>For more information about DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
        *             Notifications</a> in the <i>Database Migration Service User
        *             Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, CreateEventSubscriptionCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, CreateEventSubscriptionCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new CreateEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link CreateEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class CreateEventSubscriptionCommand extends $Command<CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: CreateEventSubscriptionCommandInput;
            constructor(input: CreateEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateFleetAdvisorCollectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { CreateFleetAdvisorCollectorRequest, CreateFleetAdvisorCollectorResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface CreateFleetAdvisorCollectorCommandInput extends CreateFleetAdvisorCollectorRequest {
    }
    export interface CreateFleetAdvisorCollectorCommandOutput extends CreateFleetAdvisorCollectorResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a Fleet Advisor collector using the specified parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, CreateFleetAdvisorCollectorCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, CreateFleetAdvisorCollectorCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new CreateFleetAdvisorCollectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFleetAdvisorCollectorCommandInput} for command's `input` shape.
        * @see {@link CreateFleetAdvisorCollectorCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class CreateFleetAdvisorCollectorCommand extends $Command<CreateFleetAdvisorCollectorCommandInput, CreateFleetAdvisorCollectorCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: CreateFleetAdvisorCollectorCommandInput;
            constructor(input: CreateFleetAdvisorCollectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFleetAdvisorCollectorCommandInput, CreateFleetAdvisorCollectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { CreateReplicationInstanceMessage, CreateReplicationInstanceResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface CreateReplicationInstanceCommandInput extends CreateReplicationInstanceMessage {
    }
    export interface CreateReplicationInstanceCommandOutput extends CreateReplicationInstanceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the replication instance using the specified parameters.</p>
        *          <p>DMS requires that your account have certain roles with appropriate permissions
        *          before you can create a replication instance. For information on the required roles, see
        *       <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole">Creating the IAM Roles to Use With the CLI and DMS API</a>. For
        *          information on the required permissions, see
        *       <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions">IAM Permissions Needed to Use DMS</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, CreateReplicationInstanceCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, CreateReplicationInstanceCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new CreateReplicationInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReplicationInstanceCommandInput} for command's `input` shape.
        * @see {@link CreateReplicationInstanceCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class CreateReplicationInstanceCommand extends $Command<CreateReplicationInstanceCommandInput, CreateReplicationInstanceCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: CreateReplicationInstanceCommandInput;
            constructor(input: CreateReplicationInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReplicationInstanceCommandInput, CreateReplicationInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { CreateReplicationSubnetGroupMessage, CreateReplicationSubnetGroupResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface CreateReplicationSubnetGroupCommandInput extends CreateReplicationSubnetGroupMessage {
    }
    export interface CreateReplicationSubnetGroupCommandOutput extends CreateReplicationSubnetGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a replication subnet group given a list of the subnet IDs in a VPC.</p>
        *          <p>The VPC needs to have at least one subnet in at least two availability zones in the Amazon Web Services Region, otherwise the
        *           service will throw a <code>ReplicationSubnetGroupDoesNotCoverEnoughAZs</code> exception.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, CreateReplicationSubnetGroupCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, CreateReplicationSubnetGroupCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new CreateReplicationSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReplicationSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link CreateReplicationSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class CreateReplicationSubnetGroupCommand extends $Command<CreateReplicationSubnetGroupCommandInput, CreateReplicationSubnetGroupCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: CreateReplicationSubnetGroupCommandInput;
            constructor(input: CreateReplicationSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReplicationSubnetGroupCommandInput, CreateReplicationSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { CreateReplicationTaskMessage, CreateReplicationTaskResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface CreateReplicationTaskCommandInput extends CreateReplicationTaskMessage {
    }
    export interface CreateReplicationTaskCommandOutput extends CreateReplicationTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a replication task using the specified parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, CreateReplicationTaskCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, CreateReplicationTaskCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new CreateReplicationTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateReplicationTaskCommandInput} for command's `input` shape.
        * @see {@link CreateReplicationTaskCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class CreateReplicationTaskCommand extends $Command<CreateReplicationTaskCommandInput, CreateReplicationTaskCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: CreateReplicationTaskCommandInput;
            constructor(input: CreateReplicationTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateReplicationTaskCommandInput, CreateReplicationTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteCertificateMessage, DeleteCertificateResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteCertificateCommandInput extends DeleteCertificateMessage {
    }
    export interface DeleteCertificateCommandOutput extends DeleteCertificateResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified certificate. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteCertificateCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteCertificateCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCertificateCommandInput} for command's `input` shape.
        * @see {@link DeleteCertificateCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteCertificateCommand extends $Command<DeleteCertificateCommandInput, DeleteCertificateCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteCertificateCommandInput;
            constructor(input: DeleteCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCertificateCommandInput, DeleteCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteConnectionMessage, DeleteConnectionResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteConnectionCommandInput extends DeleteConnectionMessage {
    }
    export interface DeleteConnectionCommandOutput extends DeleteConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the connection between a replication instance and an endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteConnectionCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteConnectionCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectionCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectionCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteConnectionCommand extends $Command<DeleteConnectionCommandInput, DeleteConnectionCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteConnectionCommandInput;
            constructor(input: DeleteConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectionCommandInput, DeleteConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteEndpointMessage, DeleteEndpointResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteEndpointCommandInput extends DeleteEndpointMessage {
    }
    export interface DeleteEndpointCommandOutput extends DeleteEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified endpoint.</p>
        *          <note>
        *             <p>All tasks associated with the endpoint must be deleted before you can delete the
        *             endpoint.</p>
        *          </note>
        *          <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteEndpointCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteEndpointCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteEndpointCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteEndpointCommand extends $Command<DeleteEndpointCommandInput, DeleteEndpointCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteEndpointCommandInput;
            constructor(input: DeleteEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEndpointCommandInput, DeleteEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteEventSubscriptionMessage, DeleteEventSubscriptionResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteEventSubscriptionCommandInput extends DeleteEventSubscriptionMessage {
    }
    export interface DeleteEventSubscriptionCommandOutput extends DeleteEventSubscriptionResponse, __MetadataBearer {
    }
    /**
        * <p> Deletes an DMS event subscription. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteEventSubscriptionCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteEventSubscriptionCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link DeleteEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteEventSubscriptionCommand extends $Command<DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteEventSubscriptionCommandInput;
            constructor(input: DeleteEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteFleetAdvisorCollectorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteCollectorRequest } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteFleetAdvisorCollectorCommandInput extends DeleteCollectorRequest {
    }
    export interface DeleteFleetAdvisorCollectorCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified Fleet Advisor collector.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteFleetAdvisorCollectorCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteFleetAdvisorCollectorCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteFleetAdvisorCollectorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFleetAdvisorCollectorCommandInput} for command's `input` shape.
        * @see {@link DeleteFleetAdvisorCollectorCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteFleetAdvisorCollectorCommand extends $Command<DeleteFleetAdvisorCollectorCommandInput, DeleteFleetAdvisorCollectorCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteFleetAdvisorCollectorCommandInput;
            constructor(input: DeleteFleetAdvisorCollectorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFleetAdvisorCollectorCommandInput, DeleteFleetAdvisorCollectorCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteFleetAdvisorDatabasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteFleetAdvisorDatabasesRequest, DeleteFleetAdvisorDatabasesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteFleetAdvisorDatabasesCommandInput extends DeleteFleetAdvisorDatabasesRequest {
    }
    export interface DeleteFleetAdvisorDatabasesCommandOutput extends DeleteFleetAdvisorDatabasesResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified Fleet Advisor collector databases.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteFleetAdvisorDatabasesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteFleetAdvisorDatabasesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteFleetAdvisorDatabasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFleetAdvisorDatabasesCommandInput} for command's `input` shape.
        * @see {@link DeleteFleetAdvisorDatabasesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteFleetAdvisorDatabasesCommand extends $Command<DeleteFleetAdvisorDatabasesCommandInput, DeleteFleetAdvisorDatabasesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteFleetAdvisorDatabasesCommandInput;
            constructor(input: DeleteFleetAdvisorDatabasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFleetAdvisorDatabasesCommandInput, DeleteFleetAdvisorDatabasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteReplicationInstanceMessage, DeleteReplicationInstanceResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteReplicationInstanceCommandInput extends DeleteReplicationInstanceMessage {
    }
    export interface DeleteReplicationInstanceCommandOutput extends DeleteReplicationInstanceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified replication instance.</p>
        *          <note>
        *             <p>You must delete any migration tasks that are associated with the replication instance
        *             before you can delete it.</p>
        *          </note>
        *          <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteReplicationInstanceCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteReplicationInstanceCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteReplicationInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReplicationInstanceCommandInput} for command's `input` shape.
        * @see {@link DeleteReplicationInstanceCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteReplicationInstanceCommand extends $Command<DeleteReplicationInstanceCommandInput, DeleteReplicationInstanceCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteReplicationInstanceCommandInput;
            constructor(input: DeleteReplicationInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReplicationInstanceCommandInput, DeleteReplicationInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteReplicationSubnetGroupMessage, DeleteReplicationSubnetGroupResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteReplicationSubnetGroupCommandInput extends DeleteReplicationSubnetGroupMessage {
    }
    export interface DeleteReplicationSubnetGroupCommandOutput extends DeleteReplicationSubnetGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a subnet group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteReplicationSubnetGroupCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteReplicationSubnetGroupCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteReplicationSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReplicationSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteReplicationSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteReplicationSubnetGroupCommand extends $Command<DeleteReplicationSubnetGroupCommandInput, DeleteReplicationSubnetGroupCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteReplicationSubnetGroupCommandInput;
            constructor(input: DeleteReplicationSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReplicationSubnetGroupCommandInput, DeleteReplicationSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationTaskAssessmentRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteReplicationTaskAssessmentRunMessage, DeleteReplicationTaskAssessmentRunResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteReplicationTaskAssessmentRunCommandInput extends DeleteReplicationTaskAssessmentRunMessage {
    }
    export interface DeleteReplicationTaskAssessmentRunCommandOutput extends DeleteReplicationTaskAssessmentRunResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the record of a single premigration assessment run.</p>
        *          <p>This operation removes all metadata that DMS maintains about this assessment run.
        *          However, the operation leaves untouched all information about this assessment run that is
        *          stored in your Amazon S3 bucket.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteReplicationTaskAssessmentRunCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteReplicationTaskAssessmentRunCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteReplicationTaskAssessmentRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReplicationTaskAssessmentRunCommandInput} for command's `input` shape.
        * @see {@link DeleteReplicationTaskAssessmentRunCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteReplicationTaskAssessmentRunCommand extends $Command<DeleteReplicationTaskAssessmentRunCommandInput, DeleteReplicationTaskAssessmentRunCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteReplicationTaskAssessmentRunCommandInput;
            constructor(input: DeleteReplicationTaskAssessmentRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReplicationTaskAssessmentRunCommandInput, DeleteReplicationTaskAssessmentRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DeleteReplicationTaskMessage, DeleteReplicationTaskResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DeleteReplicationTaskCommandInput extends DeleteReplicationTaskMessage {
    }
    export interface DeleteReplicationTaskCommandOutput extends DeleteReplicationTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified replication task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DeleteReplicationTaskCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DeleteReplicationTaskCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DeleteReplicationTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteReplicationTaskCommandInput} for command's `input` shape.
        * @see {@link DeleteReplicationTaskCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DeleteReplicationTaskCommand extends $Command<DeleteReplicationTaskCommandInput, DeleteReplicationTaskCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DeleteReplicationTaskCommandInput;
            constructor(input: DeleteReplicationTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteReplicationTaskCommandInput, DeleteReplicationTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeAccountAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeAccountAttributesMessage, DescribeAccountAttributesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeAccountAttributesCommandInput extends DescribeAccountAttributesMessage {
    }
    export interface DescribeAccountAttributesCommandOutput extends DescribeAccountAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the DMS attributes for a customer account. These attributes include DMS
        *          quotas for the account and a unique account identifier in a particular DMS region. DMS
        *          quotas include a list of resource quotas supported by the account, such as the number of
        *          replication instances allowed. The description for each resource quota, includes the quota
        *          name, current usage toward that quota, and the quota's maximum value. DMS uses the unique
        *          account identifier to name each artifact used by DMS in the given region.</p>
        *          <p>This command does not take any parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeAccountAttributesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeAccountAttributesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeAccountAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountAttributesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeAccountAttributesCommand extends $Command<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeAccountAttributesCommandInput;
            constructor(input: DescribeAccountAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeApplicableIndividualAssessmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeApplicableIndividualAssessmentsMessage, DescribeApplicableIndividualAssessmentsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeApplicableIndividualAssessmentsCommandInput extends DescribeApplicableIndividualAssessmentsMessage {
    }
    export interface DescribeApplicableIndividualAssessmentsCommandOutput extends DescribeApplicableIndividualAssessmentsResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a list of individual assessments that you can specify for a new premigration
        *          assessment run, given one or more parameters.</p>
        *          <p>If you specify an existing migration task, this operation provides the default individual
        *          assessments you can specify for that task. Otherwise, the specified parameters model elements
        *          of a possible migration task on which to base a premigration assessment run.</p>
        *          <p>To use these migration task modeling parameters, you must specify an existing replication instance,
        *          a source database engine, a target database engine, and a migration type. This combination of
        *          parameters potentially limits the default individual assessments available for an assessment run
        *          created for a corresponding migration task.</p>
        *          <p>If you specify no parameters, this operation provides a list of all possible individual assessments
        *          that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must
        *          specify all of them or the operation cannot provide a list of individual assessments.
        *          The only parameter that you can specify alone is for an existing migration task. The specified task
        *          definition then determines the default list of individual assessments that you can specify in an
        *          assessment run for the task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeApplicableIndividualAssessmentsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeApplicableIndividualAssessmentsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeApplicableIndividualAssessmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApplicableIndividualAssessmentsCommandInput} for command's `input` shape.
        * @see {@link DescribeApplicableIndividualAssessmentsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeApplicableIndividualAssessmentsCommand extends $Command<DescribeApplicableIndividualAssessmentsCommandInput, DescribeApplicableIndividualAssessmentsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeApplicableIndividualAssessmentsCommandInput;
            constructor(input: DescribeApplicableIndividualAssessmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApplicableIndividualAssessmentsCommandInput, DescribeApplicableIndividualAssessmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeCertificatesMessage, DescribeCertificatesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeCertificatesCommandInput extends DescribeCertificatesMessage {
    }
    export interface DescribeCertificatesCommandOutput extends DescribeCertificatesResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a description of the certificate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeCertificatesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeCertificatesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCertificatesCommandInput} for command's `input` shape.
        * @see {@link DescribeCertificatesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeCertificatesCommand extends $Command<DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeCertificatesCommandInput;
            constructor(input: DescribeCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeConnectionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeConnectionsMessage, DescribeConnectionsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeConnectionsCommandInput extends DescribeConnectionsMessage {
    }
    export interface DescribeConnectionsCommandOutput extends DescribeConnectionsResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the status of the connections that have been made between the replication
        *          instance and an endpoint. Connections are created when you test an endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeConnectionsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeConnectionsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeConnectionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConnectionsCommandInput} for command's `input` shape.
        * @see {@link DescribeConnectionsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeConnectionsCommand extends $Command<DescribeConnectionsCommandInput, DescribeConnectionsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeConnectionsCommandInput;
            constructor(input: DescribeConnectionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConnectionsCommandInput, DescribeConnectionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeEndpointsMessage, DescribeEndpointsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeEndpointsCommandInput extends DescribeEndpointsMessage {
    }
    export interface DescribeEndpointsCommandOutput extends DescribeEndpointsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the endpoints for your account in the current region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeEndpointsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeEndpointsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEndpointsCommandInput} for command's `input` shape.
        * @see {@link DescribeEndpointsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeEndpointsCommand extends $Command<DescribeEndpointsCommandInput, DescribeEndpointsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeEndpointsCommandInput;
            constructor(input: DescribeEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEndpointsCommandInput, DescribeEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeEndpointSettingsMessage, DescribeEndpointSettingsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeEndpointSettingsCommandInput extends DescribeEndpointSettingsMessage {
    }
    export interface DescribeEndpointSettingsCommandOutput extends DescribeEndpointSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the possible endpoint settings available
        *          when you create an endpoint for a specific database engine.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeEndpointSettingsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeEndpointSettingsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeEndpointSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEndpointSettingsCommandInput} for command's `input` shape.
        * @see {@link DescribeEndpointSettingsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeEndpointSettingsCommand extends $Command<DescribeEndpointSettingsCommandInput, DescribeEndpointSettingsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeEndpointSettingsCommandInput;
            constructor(input: DescribeEndpointSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEndpointSettingsCommandInput, DescribeEndpointSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeEndpointTypesMessage, DescribeEndpointTypesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeEndpointTypesCommandInput extends DescribeEndpointTypesMessage {
    }
    export interface DescribeEndpointTypesCommandOutput extends DescribeEndpointTypesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the type of endpoints available.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeEndpointTypesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeEndpointTypesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeEndpointTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEndpointTypesCommandInput} for command's `input` shape.
        * @see {@link DescribeEndpointTypesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeEndpointTypesCommand extends $Command<DescribeEndpointTypesCommandInput, DescribeEndpointTypesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeEndpointTypesCommandInput;
            constructor(input: DescribeEndpointTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEndpointTypesCommandInput, DescribeEndpointTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventCategoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeEventCategoriesMessage, DescribeEventCategoriesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeEventCategoriesCommandInput extends DescribeEventCategoriesMessage {
    }
    export interface DescribeEventCategoriesCommandOutput extends DescribeEventCategoriesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists categories for all event source types, or, if specified, for a specified source
        *          type. You can see a list of the event categories and source types in <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events
        *             and Notifications</a> in the <i>Database Migration Service User
        *             Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeEventCategoriesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeEventCategoriesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeEventCategoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventCategoriesCommandInput} for command's `input` shape.
        * @see {@link DescribeEventCategoriesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeEventCategoriesCommand extends $Command<DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeEventCategoriesCommandInput;
            constructor(input: DescribeEventCategoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeEventsMessage, DescribeEventsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeEventsCommandInput extends DescribeEventsMessage {
    }
    export interface DescribeEventsCommandOutput extends DescribeEventsResponse, __MetadataBearer {
    }
    /**
        * <p> Lists events for a given source identifier and source type. You can also specify a
        *          start and end time. For more information on DMS events, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
        *             Notifications</a> in the <i>Database Migration Service User
        *          Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeEventsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeEventsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeEventsCommand extends $Command<DescribeEventsCommandInput, DescribeEventsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeEventsCommandInput;
            constructor(input: DescribeEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventsCommandInput, DescribeEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventSubscriptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeEventSubscriptionsMessage, DescribeEventSubscriptionsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeEventSubscriptionsCommandInput extends DescribeEventSubscriptionsMessage {
    }
    export interface DescribeEventSubscriptionsCommandOutput extends DescribeEventSubscriptionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the event subscriptions for a customer account. The description of a
        *          subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>,
        *             <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>,
        *             <code>CreationTime</code>, and <code>Status</code>. </p>
        *          <p>If you specify <code>SubscriptionName</code>, this action lists the description for that
        *          subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeEventSubscriptionsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeEventSubscriptionsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeEventSubscriptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventSubscriptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventSubscriptionsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeEventSubscriptionsCommand extends $Command<DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeEventSubscriptionsCommandInput;
            constructor(input: DescribeEventSubscriptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorCollectorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeFleetAdvisorCollectorsRequest, DescribeFleetAdvisorCollectorsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeFleetAdvisorCollectorsCommandInput extends DescribeFleetAdvisorCollectorsRequest {
    }
    export interface DescribeFleetAdvisorCollectorsCommandOutput extends DescribeFleetAdvisorCollectorsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the Fleet Advisor collectors in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeFleetAdvisorCollectorsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeFleetAdvisorCollectorsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeFleetAdvisorCollectorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFleetAdvisorCollectorsCommandInput} for command's `input` shape.
        * @see {@link DescribeFleetAdvisorCollectorsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeFleetAdvisorCollectorsCommand extends $Command<DescribeFleetAdvisorCollectorsCommandInput, DescribeFleetAdvisorCollectorsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeFleetAdvisorCollectorsCommandInput;
            constructor(input: DescribeFleetAdvisorCollectorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFleetAdvisorCollectorsCommandInput, DescribeFleetAdvisorCollectorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorDatabasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeFleetAdvisorDatabasesRequest, DescribeFleetAdvisorDatabasesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeFleetAdvisorDatabasesCommandInput extends DescribeFleetAdvisorDatabasesRequest {
    }
    export interface DescribeFleetAdvisorDatabasesCommandOutput extends DescribeFleetAdvisorDatabasesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of Fleet Advisor databases in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeFleetAdvisorDatabasesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeFleetAdvisorDatabasesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeFleetAdvisorDatabasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFleetAdvisorDatabasesCommandInput} for command's `input` shape.
        * @see {@link DescribeFleetAdvisorDatabasesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeFleetAdvisorDatabasesCommand extends $Command<DescribeFleetAdvisorDatabasesCommandInput, DescribeFleetAdvisorDatabasesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeFleetAdvisorDatabasesCommandInput;
            constructor(input: DescribeFleetAdvisorDatabasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFleetAdvisorDatabasesCommandInput, DescribeFleetAdvisorDatabasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorLsaAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeFleetAdvisorLsaAnalysisRequest, DescribeFleetAdvisorLsaAnalysisResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeFleetAdvisorLsaAnalysisCommandInput extends DescribeFleetAdvisorLsaAnalysisRequest {
    }
    export interface DescribeFleetAdvisorLsaAnalysisCommandOutput extends DescribeFleetAdvisorLsaAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Provides descriptions of large-scale assessment (LSA) analyses produced by your
        *             Fleet Advisor collectors.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeFleetAdvisorLsaAnalysisCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeFleetAdvisorLsaAnalysisCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeFleetAdvisorLsaAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFleetAdvisorLsaAnalysisCommandInput} for command's `input` shape.
        * @see {@link DescribeFleetAdvisorLsaAnalysisCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeFleetAdvisorLsaAnalysisCommand extends $Command<DescribeFleetAdvisorLsaAnalysisCommandInput, DescribeFleetAdvisorLsaAnalysisCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeFleetAdvisorLsaAnalysisCommandInput;
            constructor(input: DescribeFleetAdvisorLsaAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFleetAdvisorLsaAnalysisCommandInput, DescribeFleetAdvisorLsaAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorSchemaObjectSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeFleetAdvisorSchemaObjectSummaryRequest, DescribeFleetAdvisorSchemaObjectSummaryResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeFleetAdvisorSchemaObjectSummaryCommandInput extends DescribeFleetAdvisorSchemaObjectSummaryRequest {
    }
    export interface DescribeFleetAdvisorSchemaObjectSummaryCommandOutput extends DescribeFleetAdvisorSchemaObjectSummaryResponse, __MetadataBearer {
    }
    /**
        * <p>Provides descriptions of the schemas discovered by your Fleet Advisor
        *             collectors.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeFleetAdvisorSchemaObjectSummaryCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeFleetAdvisorSchemaObjectSummaryCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeFleetAdvisorSchemaObjectSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFleetAdvisorSchemaObjectSummaryCommandInput} for command's `input` shape.
        * @see {@link DescribeFleetAdvisorSchemaObjectSummaryCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeFleetAdvisorSchemaObjectSummaryCommand extends $Command<DescribeFleetAdvisorSchemaObjectSummaryCommandInput, DescribeFleetAdvisorSchemaObjectSummaryCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeFleetAdvisorSchemaObjectSummaryCommandInput;
            constructor(input: DescribeFleetAdvisorSchemaObjectSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFleetAdvisorSchemaObjectSummaryCommandInput, DescribeFleetAdvisorSchemaObjectSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorSchemasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeFleetAdvisorSchemasRequest, DescribeFleetAdvisorSchemasResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeFleetAdvisorSchemasCommandInput extends DescribeFleetAdvisorSchemasRequest {
    }
    export interface DescribeFleetAdvisorSchemasCommandOutput extends DescribeFleetAdvisorSchemasResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of schemas detected by Fleet Advisor Collectors in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeFleetAdvisorSchemasCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeFleetAdvisorSchemasCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeFleetAdvisorSchemasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFleetAdvisorSchemasCommandInput} for command's `input` shape.
        * @see {@link DescribeFleetAdvisorSchemasCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeFleetAdvisorSchemasCommand extends $Command<DescribeFleetAdvisorSchemasCommandInput, DescribeFleetAdvisorSchemasCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeFleetAdvisorSchemasCommandInput;
            constructor(input: DescribeFleetAdvisorSchemasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFleetAdvisorSchemasCommandInput, DescribeFleetAdvisorSchemasCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeOrderableReplicationInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeOrderableReplicationInstancesMessage, DescribeOrderableReplicationInstancesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeOrderableReplicationInstancesCommandInput extends DescribeOrderableReplicationInstancesMessage {
    }
    export interface DescribeOrderableReplicationInstancesCommandOutput extends DescribeOrderableReplicationInstancesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the replication instance types that can be created in the
        *          specified region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeOrderableReplicationInstancesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeOrderableReplicationInstancesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeOrderableReplicationInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrderableReplicationInstancesCommandInput} for command's `input` shape.
        * @see {@link DescribeOrderableReplicationInstancesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeOrderableReplicationInstancesCommand extends $Command<DescribeOrderableReplicationInstancesCommandInput, DescribeOrderableReplicationInstancesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeOrderableReplicationInstancesCommandInput;
            constructor(input: DescribeOrderableReplicationInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrderableReplicationInstancesCommandInput, DescribeOrderableReplicationInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribePendingMaintenanceActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribePendingMaintenanceActionsMessage, DescribePendingMaintenanceActionsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribePendingMaintenanceActionsCommandInput extends DescribePendingMaintenanceActionsMessage {
    }
    export interface DescribePendingMaintenanceActionsCommandOutput extends DescribePendingMaintenanceActionsResponse, __MetadataBearer {
    }
    /**
        * <p>For internal use only</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribePendingMaintenanceActionsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribePendingMaintenanceActionsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribePendingMaintenanceActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePendingMaintenanceActionsCommandInput} for command's `input` shape.
        * @see {@link DescribePendingMaintenanceActionsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribePendingMaintenanceActionsCommand extends $Command<DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribePendingMaintenanceActionsCommandInput;
            constructor(input: DescribePendingMaintenanceActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeRefreshSchemasStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeRefreshSchemasStatusMessage, DescribeRefreshSchemasStatusResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeRefreshSchemasStatusCommandInput extends DescribeRefreshSchemasStatusMessage {
    }
    export interface DescribeRefreshSchemasStatusCommandOutput extends DescribeRefreshSchemasStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the status of the RefreshSchemas operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeRefreshSchemasStatusCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeRefreshSchemasStatusCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeRefreshSchemasStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRefreshSchemasStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeRefreshSchemasStatusCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeRefreshSchemasStatusCommand extends $Command<DescribeRefreshSchemasStatusCommandInput, DescribeRefreshSchemasStatusCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeRefreshSchemasStatusCommandInput;
            constructor(input: DescribeRefreshSchemasStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRefreshSchemasStatusCommandInput, DescribeRefreshSchemasStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeReplicationInstancesMessage, DescribeReplicationInstancesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeReplicationInstancesCommandInput extends DescribeReplicationInstancesMessage {
    }
    export interface DescribeReplicationInstancesCommandOutput extends DescribeReplicationInstancesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about replication instances for your account in the current
        *          region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeReplicationInstancesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeReplicationInstancesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeReplicationInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationInstancesCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationInstancesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeReplicationInstancesCommand extends $Command<DescribeReplicationInstancesCommandInput, DescribeReplicationInstancesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeReplicationInstancesCommandInput;
            constructor(input: DescribeReplicationInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationInstancesCommandInput, DescribeReplicationInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationInstanceTaskLogsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeReplicationInstanceTaskLogsMessage, DescribeReplicationInstanceTaskLogsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeReplicationInstanceTaskLogsCommandInput extends DescribeReplicationInstanceTaskLogsMessage {
    }
    export interface DescribeReplicationInstanceTaskLogsCommandOutput extends DescribeReplicationInstanceTaskLogsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the task logs for the specified task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeReplicationInstanceTaskLogsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeReplicationInstanceTaskLogsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeReplicationInstanceTaskLogsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationInstanceTaskLogsCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationInstanceTaskLogsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeReplicationInstanceTaskLogsCommand extends $Command<DescribeReplicationInstanceTaskLogsCommandInput, DescribeReplicationInstanceTaskLogsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeReplicationInstanceTaskLogsCommandInput;
            constructor(input: DescribeReplicationInstanceTaskLogsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationInstanceTaskLogsCommandInput, DescribeReplicationInstanceTaskLogsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationSubnetGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeReplicationSubnetGroupsMessage, DescribeReplicationSubnetGroupsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeReplicationSubnetGroupsCommandInput extends DescribeReplicationSubnetGroupsMessage {
    }
    export interface DescribeReplicationSubnetGroupsCommandOutput extends DescribeReplicationSubnetGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the replication subnet groups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeReplicationSubnetGroupsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeReplicationSubnetGroupsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeReplicationSubnetGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationSubnetGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationSubnetGroupsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeReplicationSubnetGroupsCommand extends $Command<DescribeReplicationSubnetGroupsCommandInput, DescribeReplicationSubnetGroupsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeReplicationSubnetGroupsCommandInput;
            constructor(input: DescribeReplicationSubnetGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationSubnetGroupsCommandInput, DescribeReplicationSubnetGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskAssessmentResultsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeReplicationTaskAssessmentResultsMessage, DescribeReplicationTaskAssessmentResultsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeReplicationTaskAssessmentResultsCommandInput extends DescribeReplicationTaskAssessmentResultsMessage {
    }
    export interface DescribeReplicationTaskAssessmentResultsCommandOutput extends DescribeReplicationTaskAssessmentResultsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the task assessment results from the Amazon S3 bucket that DMS creates in your
        *           Amazon Web Services account.  This action always returns the
        *          latest results.</p>
        *          <p>For more information about DMS task assessments, see
        *            <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Creating a task assessment report</a>
        *            in the <i>Database Migration Service User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeReplicationTaskAssessmentResultsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeReplicationTaskAssessmentResultsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeReplicationTaskAssessmentResultsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationTaskAssessmentResultsCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationTaskAssessmentResultsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeReplicationTaskAssessmentResultsCommand extends $Command<DescribeReplicationTaskAssessmentResultsCommandInput, DescribeReplicationTaskAssessmentResultsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeReplicationTaskAssessmentResultsCommandInput;
            constructor(input: DescribeReplicationTaskAssessmentResultsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationTaskAssessmentResultsCommandInput, DescribeReplicationTaskAssessmentResultsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskAssessmentRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeReplicationTaskAssessmentRunsMessage, DescribeReplicationTaskAssessmentRunsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeReplicationTaskAssessmentRunsCommandInput extends DescribeReplicationTaskAssessmentRunsMessage {
    }
    export interface DescribeReplicationTaskAssessmentRunsCommandOutput extends DescribeReplicationTaskAssessmentRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated list of premigration assessment runs based on filter
        *          settings.</p>
        *          <p>These filter settings can specify a combination of premigration assessment runs,
        *          migration tasks, replication instances, and assessment run status values.</p>
        *          <note>
        *             <p>This operation doesn't return information about individual assessments. For this
        *             information, see the <code>DescribeReplicationTaskIndividualAssessments</code>
        *             operation. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeReplicationTaskAssessmentRunsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeReplicationTaskAssessmentRunsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeReplicationTaskAssessmentRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationTaskAssessmentRunsCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationTaskAssessmentRunsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeReplicationTaskAssessmentRunsCommand extends $Command<DescribeReplicationTaskAssessmentRunsCommandInput, DescribeReplicationTaskAssessmentRunsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeReplicationTaskAssessmentRunsCommandInput;
            constructor(input: DescribeReplicationTaskAssessmentRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationTaskAssessmentRunsCommandInput, DescribeReplicationTaskAssessmentRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskIndividualAssessmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeReplicationTaskIndividualAssessmentsMessage, DescribeReplicationTaskIndividualAssessmentsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeReplicationTaskIndividualAssessmentsCommandInput extends DescribeReplicationTaskIndividualAssessmentsMessage {
    }
    export interface DescribeReplicationTaskIndividualAssessmentsCommandOutput extends DescribeReplicationTaskIndividualAssessmentsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated list of individual assessments based on filter settings.</p>
        *          <p>These filter settings can specify a combination of premigration assessment runs,
        *          migration tasks, and assessment status values.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeReplicationTaskIndividualAssessmentsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeReplicationTaskIndividualAssessmentsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeReplicationTaskIndividualAssessmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationTaskIndividualAssessmentsCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationTaskIndividualAssessmentsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeReplicationTaskIndividualAssessmentsCommand extends $Command<DescribeReplicationTaskIndividualAssessmentsCommandInput, DescribeReplicationTaskIndividualAssessmentsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeReplicationTaskIndividualAssessmentsCommandInput;
            constructor(input: DescribeReplicationTaskIndividualAssessmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationTaskIndividualAssessmentsCommandInput, DescribeReplicationTaskIndividualAssessmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTasksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeReplicationTasksMessage, DescribeReplicationTasksResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeReplicationTasksCommandInput extends DescribeReplicationTasksMessage {
    }
    export interface DescribeReplicationTasksCommandOutput extends DescribeReplicationTasksResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about replication tasks for your account in the current
        *          region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeReplicationTasksCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeReplicationTasksCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeReplicationTasksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReplicationTasksCommandInput} for command's `input` shape.
        * @see {@link DescribeReplicationTasksCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeReplicationTasksCommand extends $Command<DescribeReplicationTasksCommandInput, DescribeReplicationTasksCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeReplicationTasksCommandInput;
            constructor(input: DescribeReplicationTasksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReplicationTasksCommandInput, DescribeReplicationTasksCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeSchemasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeSchemasMessage, DescribeSchemasResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeSchemasCommandInput extends DescribeSchemasMessage {
    }
    export interface DescribeSchemasCommandOutput extends DescribeSchemasResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the schema for the specified endpoint.</p>
        *
        *          <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeSchemasCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeSchemasCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeSchemasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSchemasCommandInput} for command's `input` shape.
        * @see {@link DescribeSchemasCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeSchemasCommand extends $Command<DescribeSchemasCommandInput, DescribeSchemasCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeSchemasCommandInput;
            constructor(input: DescribeSchemasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSchemasCommandInput, DescribeSchemasCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeTableStatisticsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { DescribeTableStatisticsMessage, DescribeTableStatisticsResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface DescribeTableStatisticsCommandInput extends DescribeTableStatisticsMessage {
    }
    export interface DescribeTableStatisticsCommandOutput extends DescribeTableStatisticsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns table statistics on the database migration task, including table name, rows
        *          inserted, rows updated, and rows deleted.</p>
        *          <p>Note that the "last updated" column the DMS console only indicates the time that DMS
        *          last updated the table statistics record for a table. It does not indicate the time of the
        *          last update to the table.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, DescribeTableStatisticsCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, DescribeTableStatisticsCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new DescribeTableStatisticsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTableStatisticsCommandInput} for command's `input` shape.
        * @see {@link DescribeTableStatisticsCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class DescribeTableStatisticsCommand extends $Command<DescribeTableStatisticsCommandInput, DescribeTableStatisticsCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: DescribeTableStatisticsCommandInput;
            constructor(input: DescribeTableStatisticsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTableStatisticsCommandInput, DescribeTableStatisticsCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ImportCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ImportCertificateMessage, ImportCertificateResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ImportCertificateCommandInput extends ImportCertificateMessage {
    }
    export interface ImportCertificateCommandOutput extends ImportCertificateResponse, __MetadataBearer {
    }
    /**
        * <p>Uploads the specified certificate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ImportCertificateCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ImportCertificateCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ImportCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportCertificateCommandInput} for command's `input` shape.
        * @see {@link ImportCertificateCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ImportCertificateCommand extends $Command<ImportCertificateCommandInput, ImportCertificateCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ImportCertificateCommandInput;
            constructor(input: ImportCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportCertificateCommandInput, ImportCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ListTagsForResourceMessage, ListTagsForResourceResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceMessage {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all metadata tags attached to an DMS resource, including
        *          replication instance, endpoint, security group, and migration task.
        *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
        *                <code>Tag</code>
        *             </a> data type description.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ListTagsForResourceCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ListTagsForResourceCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ModifyEndpointMessage, ModifyEndpointResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ModifyEndpointCommandInput extends ModifyEndpointMessage {
    }
    export interface ModifyEndpointCommandOutput extends ModifyEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the specified endpoint.</p>
        *          <note>
        *             <p>For a MySQL source or target endpoint, don't explicitly specify the database using
        *          the <code>DatabaseName</code> request parameter on the <code>ModifyEndpoint</code> API call.
        *          Specifying <code>DatabaseName</code> when you modify a MySQL endpoint replicates all the
        *          task tables to this single database. For MySQL endpoints, you specify the database only when
        *          you specify the schema in the table-mapping rules of the DMS task.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ModifyEndpointCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ModifyEndpointCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ModifyEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyEndpointCommandInput} for command's `input` shape.
        * @see {@link ModifyEndpointCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ModifyEndpointCommand extends $Command<ModifyEndpointCommandInput, ModifyEndpointCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ModifyEndpointCommandInput;
            constructor(input: ModifyEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyEndpointCommandInput, ModifyEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ModifyEventSubscriptionMessage, ModifyEventSubscriptionResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ModifyEventSubscriptionCommandInput extends ModifyEventSubscriptionMessage {
    }
    export interface ModifyEventSubscriptionCommandOutput extends ModifyEventSubscriptionResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing DMS event notification subscription. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ModifyEventSubscriptionCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ModifyEventSubscriptionCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ModifyEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link ModifyEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ModifyEventSubscriptionCommand extends $Command<ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ModifyEventSubscriptionCommandInput;
            constructor(input: ModifyEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ModifyReplicationInstanceMessage, ModifyReplicationInstanceResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ModifyReplicationInstanceCommandInput extends ModifyReplicationInstanceMessage {
    }
    export interface ModifyReplicationInstanceCommandOutput extends ModifyReplicationInstanceResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the replication instance to apply new settings. You can change one or more
        *          parameters by specifying these parameters and the new values in the request.</p>
        *          <p>Some settings are applied during the maintenance window.</p>
        *
        *          <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ModifyReplicationInstanceCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ModifyReplicationInstanceCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ModifyReplicationInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyReplicationInstanceCommandInput} for command's `input` shape.
        * @see {@link ModifyReplicationInstanceCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ModifyReplicationInstanceCommand extends $Command<ModifyReplicationInstanceCommandInput, ModifyReplicationInstanceCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ModifyReplicationInstanceCommandInput;
            constructor(input: ModifyReplicationInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyReplicationInstanceCommandInput, ModifyReplicationInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ModifyReplicationSubnetGroupMessage, ModifyReplicationSubnetGroupResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ModifyReplicationSubnetGroupCommandInput extends ModifyReplicationSubnetGroupMessage {
    }
    export interface ModifyReplicationSubnetGroupCommandOutput extends ModifyReplicationSubnetGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the settings for the specified replication subnet group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ModifyReplicationSubnetGroupCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ModifyReplicationSubnetGroupCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ModifyReplicationSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyReplicationSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyReplicationSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ModifyReplicationSubnetGroupCommand extends $Command<ModifyReplicationSubnetGroupCommandInput, ModifyReplicationSubnetGroupCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ModifyReplicationSubnetGroupCommandInput;
            constructor(input: ModifyReplicationSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyReplicationSubnetGroupCommandInput, ModifyReplicationSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ModifyReplicationTaskMessage, ModifyReplicationTaskResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ModifyReplicationTaskCommandInput extends ModifyReplicationTaskMessage {
    }
    export interface ModifyReplicationTaskCommandOutput extends ModifyReplicationTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the specified replication task.</p>
        *          <p>You can't modify the task endpoints. The task must be stopped before you can modify it. </p>
        *          <p>For more information about DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks</a> in the
        *             <i>Database Migration Service User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ModifyReplicationTaskCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ModifyReplicationTaskCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ModifyReplicationTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyReplicationTaskCommandInput} for command's `input` shape.
        * @see {@link ModifyReplicationTaskCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ModifyReplicationTaskCommand extends $Command<ModifyReplicationTaskCommandInput, ModifyReplicationTaskCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ModifyReplicationTaskCommandInput;
            constructor(input: ModifyReplicationTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyReplicationTaskCommandInput, ModifyReplicationTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/MoveReplicationTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { MoveReplicationTaskMessage, MoveReplicationTaskResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface MoveReplicationTaskCommandInput extends MoveReplicationTaskMessage {
    }
    export interface MoveReplicationTaskCommandOutput extends MoveReplicationTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Moves a replication task from its current replication instance to a different target
        *          replication instance using the specified parameters. The target replication instance must
        *          be created with the same or later DMS version as the current replication
        *          instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, MoveReplicationTaskCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, MoveReplicationTaskCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new MoveReplicationTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MoveReplicationTaskCommandInput} for command's `input` shape.
        * @see {@link MoveReplicationTaskCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class MoveReplicationTaskCommand extends $Command<MoveReplicationTaskCommandInput, MoveReplicationTaskCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: MoveReplicationTaskCommandInput;
            constructor(input: MoveReplicationTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MoveReplicationTaskCommandInput, MoveReplicationTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RebootReplicationInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { RebootReplicationInstanceMessage, RebootReplicationInstanceResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface RebootReplicationInstanceCommandInput extends RebootReplicationInstanceMessage {
    }
    export interface RebootReplicationInstanceCommandOutput extends RebootReplicationInstanceResponse, __MetadataBearer {
    }
    /**
        * <p>Reboots a replication instance. Rebooting results in a momentary outage, until the
        *          replication instance becomes available again.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, RebootReplicationInstanceCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, RebootReplicationInstanceCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new RebootReplicationInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootReplicationInstanceCommandInput} for command's `input` shape.
        * @see {@link RebootReplicationInstanceCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class RebootReplicationInstanceCommand extends $Command<RebootReplicationInstanceCommandInput, RebootReplicationInstanceCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: RebootReplicationInstanceCommandInput;
            constructor(input: RebootReplicationInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootReplicationInstanceCommandInput, RebootReplicationInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RefreshSchemasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { RefreshSchemasMessage, RefreshSchemasResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface RefreshSchemasCommandInput extends RefreshSchemasMessage {
    }
    export interface RefreshSchemasCommandOutput extends RefreshSchemasResponse, __MetadataBearer {
    }
    /**
        * <p>Populates the schema for the specified endpoint. This is an asynchronous operation and
        *          can take several minutes. You can check the status of this operation by calling the
        *          DescribeRefreshSchemasStatus operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, RefreshSchemasCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, RefreshSchemasCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new RefreshSchemasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RefreshSchemasCommandInput} for command's `input` shape.
        * @see {@link RefreshSchemasCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class RefreshSchemasCommand extends $Command<RefreshSchemasCommandInput, RefreshSchemasCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: RefreshSchemasCommandInput;
            constructor(input: RefreshSchemasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RefreshSchemasCommandInput, RefreshSchemasCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ReloadTablesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { ReloadTablesMessage, ReloadTablesResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface ReloadTablesCommandInput extends ReloadTablesMessage {
    }
    export interface ReloadTablesCommandOutput extends ReloadTablesResponse, __MetadataBearer {
    }
    /**
        * <p>Reloads the target database table with the source data. </p>
        *          <p>You can only use this operation with a task in the <code>RUNNING</code> state, otherwise the service
        *            will throw an <code>InvalidResourceStateFault</code> exception.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, ReloadTablesCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, ReloadTablesCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new ReloadTablesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ReloadTablesCommandInput} for command's `input` shape.
        * @see {@link ReloadTablesCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class ReloadTablesCommand extends $Command<ReloadTablesCommandInput, ReloadTablesCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: ReloadTablesCommandInput;
            constructor(input: ReloadTablesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ReloadTablesCommandInput, ReloadTablesCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RemoveTagsFromResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { RemoveTagsFromResourceMessage, RemoveTagsFromResourceResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface RemoveTagsFromResourceCommandInput extends RemoveTagsFromResourceMessage {
    }
    export interface RemoveTagsFromResourceCommandOutput extends RemoveTagsFromResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes metadata tags from an DMS resource, including replication instance,
        *          endpoint, security group, and migration task. For more information, see
        *          <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html">
        *                <code>Tag</code>
        *             </a>
        *          data type description.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, RemoveTagsFromResourceCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, RemoveTagsFromResourceCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new RemoveTagsFromResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsFromResourceCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsFromResourceCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class RemoveTagsFromResourceCommand extends $Command<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: RemoveTagsFromResourceCommandInput;
            constructor(input: RemoveTagsFromResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RunFleetAdvisorLsaAnalysisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { RunFleetAdvisorLsaAnalysisResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface RunFleetAdvisorLsaAnalysisCommandInput {
    }
    export interface RunFleetAdvisorLsaAnalysisCommandOutput extends RunFleetAdvisorLsaAnalysisResponse, __MetadataBearer {
    }
    /**
        * <p>Runs large-scale assessment (LSA) analysis on every Fleet Advisor collector in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, RunFleetAdvisorLsaAnalysisCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, RunFleetAdvisorLsaAnalysisCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new RunFleetAdvisorLsaAnalysisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RunFleetAdvisorLsaAnalysisCommandInput} for command's `input` shape.
        * @see {@link RunFleetAdvisorLsaAnalysisCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class RunFleetAdvisorLsaAnalysisCommand extends $Command<RunFleetAdvisorLsaAnalysisCommandInput, RunFleetAdvisorLsaAnalysisCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: RunFleetAdvisorLsaAnalysisCommandInput;
            constructor(input: RunFleetAdvisorLsaAnalysisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RunFleetAdvisorLsaAnalysisCommandInput, RunFleetAdvisorLsaAnalysisCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { StartReplicationTaskAssessmentMessage, StartReplicationTaskAssessmentResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface StartReplicationTaskAssessmentCommandInput extends StartReplicationTaskAssessmentMessage {
    }
    export interface StartReplicationTaskAssessmentCommandOutput extends StartReplicationTaskAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p> Starts the replication task assessment for unsupported data types in the source
        *          database. </p>
        *          <p>You can only use this operation for a task if the following conditions are true:</p>
        *          <ul>
        *             <li>
        *                <p>The task must be in the <code>stopped</code> state.</p>
        *             </li>
        *             <li>
        *                <p>The task must have successful connections to the source and target.</p>
        *             </li>
        *          </ul>
        *          <p>If either of these conditions are not met, an <code>InvalidResourceStateFault</code> error will result. </p>
        *          <p>For information about DMS task assessments, see
        *           <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Creating a task assessment report</a>
        *           in the <i>Database Migration Service User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, StartReplicationTaskAssessmentCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, StartReplicationTaskAssessmentCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new StartReplicationTaskAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartReplicationTaskAssessmentCommandInput} for command's `input` shape.
        * @see {@link StartReplicationTaskAssessmentCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class StartReplicationTaskAssessmentCommand extends $Command<StartReplicationTaskAssessmentCommandInput, StartReplicationTaskAssessmentCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: StartReplicationTaskAssessmentCommandInput;
            constructor(input: StartReplicationTaskAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartReplicationTaskAssessmentCommandInput, StartReplicationTaskAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskAssessmentRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { StartReplicationTaskAssessmentRunMessage, StartReplicationTaskAssessmentRunResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface StartReplicationTaskAssessmentRunCommandInput extends StartReplicationTaskAssessmentRunMessage {
    }
    export interface StartReplicationTaskAssessmentRunCommandOutput extends StartReplicationTaskAssessmentRunResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a new premigration assessment run for one or more individual assessments
        *          of a migration task.</p>
        *          <p>The assessments that you can specify depend on the source and target database engine and
        *          the migration type defined for the given task. To run this operation, your migration task
        *          must already be created. After you run this operation, you can review the status of each
        *          individual assessment. You can also run the migration task manually after the assessment
        *          run and its individual assessments complete.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, StartReplicationTaskAssessmentRunCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, StartReplicationTaskAssessmentRunCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new StartReplicationTaskAssessmentRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartReplicationTaskAssessmentRunCommandInput} for command's `input` shape.
        * @see {@link StartReplicationTaskAssessmentRunCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class StartReplicationTaskAssessmentRunCommand extends $Command<StartReplicationTaskAssessmentRunCommandInput, StartReplicationTaskAssessmentRunCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: StartReplicationTaskAssessmentRunCommandInput;
            constructor(input: StartReplicationTaskAssessmentRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartReplicationTaskAssessmentRunCommandInput, StartReplicationTaskAssessmentRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { StartReplicationTaskMessage, StartReplicationTaskResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface StartReplicationTaskCommandInput extends StartReplicationTaskMessage {
    }
    export interface StartReplicationTaskCommandOutput extends StartReplicationTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Starts the replication task.</p>
        *          <p>For more information about DMS tasks, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html">Working with Migration Tasks </a> in the
        *             <i>Database Migration Service User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, StartReplicationTaskCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, StartReplicationTaskCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new StartReplicationTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartReplicationTaskCommandInput} for command's `input` shape.
        * @see {@link StartReplicationTaskCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class StartReplicationTaskCommand extends $Command<StartReplicationTaskCommandInput, StartReplicationTaskCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: StartReplicationTaskCommandInput;
            constructor(input: StartReplicationTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartReplicationTaskCommandInput, StartReplicationTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StopReplicationTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { StopReplicationTaskMessage, StopReplicationTaskResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface StopReplicationTaskCommandInput extends StopReplicationTaskMessage {
    }
    export interface StopReplicationTaskCommandOutput extends StopReplicationTaskResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the replication task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, StopReplicationTaskCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, StopReplicationTaskCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new StopReplicationTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopReplicationTaskCommandInput} for command's `input` shape.
        * @see {@link StopReplicationTaskCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class StopReplicationTaskCommand extends $Command<StopReplicationTaskCommandInput, StopReplicationTaskCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: StopReplicationTaskCommandInput;
            constructor(input: StopReplicationTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopReplicationTaskCommandInput, StopReplicationTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/TestConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { TestConnectionMessage, TestConnectionResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface TestConnectionCommandInput extends TestConnectionMessage {
    }
    export interface TestConnectionCommandOutput extends TestConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Tests the connection between the replication instance and the endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, TestConnectionCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, TestConnectionCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new TestConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestConnectionCommandInput} for command's `input` shape.
        * @see {@link TestConnectionCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class TestConnectionCommand extends $Command<TestConnectionCommandInput, TestConnectionCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: TestConnectionCommandInput;
            constructor(input: TestConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestConnectionCommandInput, TestConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/UpdateSubscriptionsToEventBridgeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DatabaseMigrationServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient";
    import { UpdateSubscriptionsToEventBridgeMessage, UpdateSubscriptionsToEventBridgeResponse } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0";
    export interface UpdateSubscriptionsToEventBridgeCommandInput extends UpdateSubscriptionsToEventBridgeMessage {
    }
    export interface UpdateSubscriptionsToEventBridgeCommandOutput extends UpdateSubscriptionsToEventBridgeResponse, __MetadataBearer {
    }
    /**
        * <p>Migrates 10 active and enabled Amazon SNS subscriptions at a time and converts them to corresponding Amazon EventBridge rules.
        *          By default, this operation migrates subscriptions only when all your replication instance versions are 3.4.6 or higher.
        *          If any replication instances are from versions earlier than 3.4.6, the operation raises an error and tells you
        *          to upgrade these instances to version 3.4.6 or higher. To enable migration regardless of version, set the <code>Force</code>
        *          option to true. However, if you don't upgrade instances earlier than version 3.4.6, some types of events might not be
        *          available when you use Amazon EventBridge.</p>
        *          <p>To call this operation, make sure that you have certain permissions added to your user account.
        *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html#CHAP_Events-migrate-to-eventbridge">Migrating event subscriptions to Amazon EventBridge</a>
        *             in the <i>Amazon Web Services Database Migration Service User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DatabaseMigrationServiceClient, UpdateSubscriptionsToEventBridgeCommand } from "@aws-sdk/client-database-migration-service"; // ES Modules import
        * // const { DatabaseMigrationServiceClient, UpdateSubscriptionsToEventBridgeCommand } = require("@aws-sdk/client-database-migration-service"); // CommonJS import
        * const client = new DatabaseMigrationServiceClient(config);
        * const command = new UpdateSubscriptionsToEventBridgeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSubscriptionsToEventBridgeCommandInput} for command's `input` shape.
        * @see {@link UpdateSubscriptionsToEventBridgeCommandOutput} for command's `response` shape.
        * @see {@link DatabaseMigrationServiceClientResolvedConfig | config} for DatabaseMigrationServiceClient's `config` shape.
        *
        */
    export class UpdateSubscriptionsToEventBridgeCommand extends $Command<UpdateSubscriptionsToEventBridgeCommandInput, UpdateSubscriptionsToEventBridgeCommandOutput, DatabaseMigrationServiceClientResolvedConfig> {
            readonly input: UpdateSubscriptionsToEventBridgeCommandInput;
            constructor(input: UpdateSubscriptionsToEventBridgeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DatabaseMigrationServiceClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSubscriptionsToEventBridgeCommandInput, UpdateSubscriptionsToEventBridgeCommandOutput>;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/DatabaseMigrationServiceClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/AddTagsToResourceCommand";
    import { ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ApplyPendingMaintenanceActionCommand";
    import { CancelReplicationTaskAssessmentRunCommandInput, CancelReplicationTaskAssessmentRunCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CancelReplicationTaskAssessmentRunCommand";
    import { CreateEndpointCommandInput, CreateEndpointCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateEndpointCommand";
    import { CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateEventSubscriptionCommand";
    import { CreateFleetAdvisorCollectorCommandInput, CreateFleetAdvisorCollectorCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateFleetAdvisorCollectorCommand";
    import { CreateReplicationInstanceCommandInput, CreateReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationInstanceCommand";
    import { CreateReplicationSubnetGroupCommandInput, CreateReplicationSubnetGroupCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationSubnetGroupCommand";
    import { CreateReplicationTaskCommandInput, CreateReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/CreateReplicationTaskCommand";
    import { DeleteCertificateCommandInput, DeleteCertificateCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteCertificateCommand";
    import { DeleteConnectionCommandInput, DeleteConnectionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteConnectionCommand";
    import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteEndpointCommand";
    import { DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteEventSubscriptionCommand";
    import { DeleteFleetAdvisorCollectorCommandInput, DeleteFleetAdvisorCollectorCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteFleetAdvisorCollectorCommand";
    import { DeleteFleetAdvisorDatabasesCommandInput, DeleteFleetAdvisorDatabasesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteFleetAdvisorDatabasesCommand";
    import { DeleteReplicationInstanceCommandInput, DeleteReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationInstanceCommand";
    import { DeleteReplicationSubnetGroupCommandInput, DeleteReplicationSubnetGroupCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationSubnetGroupCommand";
    import { DeleteReplicationTaskAssessmentRunCommandInput, DeleteReplicationTaskAssessmentRunCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationTaskAssessmentRunCommand";
    import { DeleteReplicationTaskCommandInput, DeleteReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DeleteReplicationTaskCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeApplicableIndividualAssessmentsCommandInput, DescribeApplicableIndividualAssessmentsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeApplicableIndividualAssessmentsCommand";
    import { DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeCertificatesCommand";
    import { DescribeConnectionsCommandInput, DescribeConnectionsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeConnectionsCommand";
    import { DescribeEndpointsCommandInput, DescribeEndpointsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointsCommand";
    import { DescribeEndpointSettingsCommandInput, DescribeEndpointSettingsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointSettingsCommand";
    import { DescribeEndpointTypesCommandInput, DescribeEndpointTypesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEndpointTypesCommand";
    import { DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventCategoriesCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventsCommand";
    import { DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeEventSubscriptionsCommand";
    import { DescribeFleetAdvisorCollectorsCommandInput, DescribeFleetAdvisorCollectorsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorCollectorsCommand";
    import { DescribeFleetAdvisorDatabasesCommandInput, DescribeFleetAdvisorDatabasesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorDatabasesCommand";
    import { DescribeFleetAdvisorLsaAnalysisCommandInput, DescribeFleetAdvisorLsaAnalysisCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorLsaAnalysisCommand";
    import { DescribeFleetAdvisorSchemaObjectSummaryCommandInput, DescribeFleetAdvisorSchemaObjectSummaryCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorSchemaObjectSummaryCommand";
    import { DescribeFleetAdvisorSchemasCommandInput, DescribeFleetAdvisorSchemasCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeFleetAdvisorSchemasCommand";
    import { DescribeOrderableReplicationInstancesCommandInput, DescribeOrderableReplicationInstancesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeOrderableReplicationInstancesCommand";
    import { DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribePendingMaintenanceActionsCommand";
    import { DescribeRefreshSchemasStatusCommandInput, DescribeRefreshSchemasStatusCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeRefreshSchemasStatusCommand";
    import { DescribeReplicationInstancesCommandInput, DescribeReplicationInstancesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationInstancesCommand";
    import { DescribeReplicationInstanceTaskLogsCommandInput, DescribeReplicationInstanceTaskLogsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationInstanceTaskLogsCommand";
    import { DescribeReplicationSubnetGroupsCommandInput, DescribeReplicationSubnetGroupsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationSubnetGroupsCommand";
    import { DescribeReplicationTaskAssessmentResultsCommandInput, DescribeReplicationTaskAssessmentResultsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskAssessmentResultsCommand";
    import { DescribeReplicationTaskAssessmentRunsCommandInput, DescribeReplicationTaskAssessmentRunsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskAssessmentRunsCommand";
    import { DescribeReplicationTaskIndividualAssessmentsCommandInput, DescribeReplicationTaskIndividualAssessmentsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTaskIndividualAssessmentsCommand";
    import { DescribeReplicationTasksCommandInput, DescribeReplicationTasksCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeReplicationTasksCommand";
    import { DescribeSchemasCommandInput, DescribeSchemasCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeSchemasCommand";
    import { DescribeTableStatisticsCommandInput, DescribeTableStatisticsCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/DescribeTableStatisticsCommand";
    import { ImportCertificateCommandInput, ImportCertificateCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ImportCertificateCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyEndpointCommandInput, ModifyEndpointCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyEndpointCommand";
    import { ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyEventSubscriptionCommand";
    import { ModifyReplicationInstanceCommandInput, ModifyReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationInstanceCommand";
    import { ModifyReplicationSubnetGroupCommandInput, ModifyReplicationSubnetGroupCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationSubnetGroupCommand";
    import { ModifyReplicationTaskCommandInput, ModifyReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ModifyReplicationTaskCommand";
    import { MoveReplicationTaskCommandInput, MoveReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/MoveReplicationTaskCommand";
    import { RebootReplicationInstanceCommandInput, RebootReplicationInstanceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RebootReplicationInstanceCommand";
    import { RefreshSchemasCommandInput, RefreshSchemasCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RefreshSchemasCommand";
    import { ReloadTablesCommandInput, ReloadTablesCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/ReloadTablesCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RemoveTagsFromResourceCommand";
    import { RunFleetAdvisorLsaAnalysisCommandInput, RunFleetAdvisorLsaAnalysisCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/RunFleetAdvisorLsaAnalysisCommand";
    import { StartReplicationTaskAssessmentCommandInput, StartReplicationTaskAssessmentCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskAssessmentCommand";
    import { StartReplicationTaskAssessmentRunCommandInput, StartReplicationTaskAssessmentRunCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskAssessmentRunCommand";
    import { StartReplicationTaskCommandInput, StartReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StartReplicationTaskCommand";
    import { StopReplicationTaskCommandInput, StopReplicationTaskCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/StopReplicationTaskCommand";
    import { TestConnectionCommandInput, TestConnectionCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/TestConnectionCommand";
    import { UpdateSubscriptionsToEventBridgeCommandInput, UpdateSubscriptionsToEventBridgeCommandOutput } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/commands/UpdateSubscriptionsToEventBridgeCommand";
    export type ServiceInputTypes = AddTagsToResourceCommandInput | ApplyPendingMaintenanceActionCommandInput | CancelReplicationTaskAssessmentRunCommandInput | CreateEndpointCommandInput | CreateEventSubscriptionCommandInput | CreateFleetAdvisorCollectorCommandInput | CreateReplicationInstanceCommandInput | CreateReplicationSubnetGroupCommandInput | CreateReplicationTaskCommandInput | DeleteCertificateCommandInput | DeleteConnectionCommandInput | DeleteEndpointCommandInput | DeleteEventSubscriptionCommandInput | DeleteFleetAdvisorCollectorCommandInput | DeleteFleetAdvisorDatabasesCommandInput | DeleteReplicationInstanceCommandInput | DeleteReplicationSubnetGroupCommandInput | DeleteReplicationTaskAssessmentRunCommandInput | DeleteReplicationTaskCommandInput | DescribeAccountAttributesCommandInput | DescribeApplicableIndividualAssessmentsCommandInput | DescribeCertificatesCommandInput | DescribeConnectionsCommandInput | DescribeEndpointSettingsCommandInput | DescribeEndpointTypesCommandInput | DescribeEndpointsCommandInput | DescribeEventCategoriesCommandInput | DescribeEventSubscriptionsCommandInput | DescribeEventsCommandInput | DescribeFleetAdvisorCollectorsCommandInput | DescribeFleetAdvisorDatabasesCommandInput | DescribeFleetAdvisorLsaAnalysisCommandInput | DescribeFleetAdvisorSchemaObjectSummaryCommandInput | DescribeFleetAdvisorSchemasCommandInput | DescribeOrderableReplicationInstancesCommandInput | DescribePendingMaintenanceActionsCommandInput | DescribeRefreshSchemasStatusCommandInput | DescribeReplicationInstanceTaskLogsCommandInput | DescribeReplicationInstancesCommandInput | DescribeReplicationSubnetGroupsCommandInput | DescribeReplicationTaskAssessmentResultsCommandInput | DescribeReplicationTaskAssessmentRunsCommandInput | DescribeReplicationTaskIndividualAssessmentsCommandInput | DescribeReplicationTasksCommandInput | DescribeSchemasCommandInput | DescribeTableStatisticsCommandInput | ImportCertificateCommandInput | ListTagsForResourceCommandInput | ModifyEndpointCommandInput | ModifyEventSubscriptionCommandInput | ModifyReplicationInstanceCommandInput | ModifyReplicationSubnetGroupCommandInput | ModifyReplicationTaskCommandInput | MoveReplicationTaskCommandInput | RebootReplicationInstanceCommandInput | RefreshSchemasCommandInput | ReloadTablesCommandInput | RemoveTagsFromResourceCommandInput | RunFleetAdvisorLsaAnalysisCommandInput | StartReplicationTaskAssessmentCommandInput | StartReplicationTaskAssessmentRunCommandInput | StartReplicationTaskCommandInput | StopReplicationTaskCommandInput | TestConnectionCommandInput | UpdateSubscriptionsToEventBridgeCommandInput;
    export type ServiceOutputTypes = AddTagsToResourceCommandOutput | ApplyPendingMaintenanceActionCommandOutput | CancelReplicationTaskAssessmentRunCommandOutput | CreateEndpointCommandOutput | CreateEventSubscriptionCommandOutput | CreateFleetAdvisorCollectorCommandOutput | CreateReplicationInstanceCommandOutput | CreateReplicationSubnetGroupCommandOutput | CreateReplicationTaskCommandOutput | DeleteCertificateCommandOutput | DeleteConnectionCommandOutput | DeleteEndpointCommandOutput | DeleteEventSubscriptionCommandOutput | DeleteFleetAdvisorCollectorCommandOutput | DeleteFleetAdvisorDatabasesCommandOutput | DeleteReplicationInstanceCommandOutput | DeleteReplicationSubnetGroupCommandOutput | DeleteReplicationTaskAssessmentRunCommandOutput | DeleteReplicationTaskCommandOutput | DescribeAccountAttributesCommandOutput | DescribeApplicableIndividualAssessmentsCommandOutput | DescribeCertificatesCommandOutput | DescribeConnectionsCommandOutput | DescribeEndpointSettingsCommandOutput | DescribeEndpointTypesCommandOutput | DescribeEndpointsCommandOutput | DescribeEventCategoriesCommandOutput | DescribeEventSubscriptionsCommandOutput | DescribeEventsCommandOutput | DescribeFleetAdvisorCollectorsCommandOutput | DescribeFleetAdvisorDatabasesCommandOutput | DescribeFleetAdvisorLsaAnalysisCommandOutput | DescribeFleetAdvisorSchemaObjectSummaryCommandOutput | DescribeFleetAdvisorSchemasCommandOutput | DescribeOrderableReplicationInstancesCommandOutput | DescribePendingMaintenanceActionsCommandOutput | DescribeRefreshSchemasStatusCommandOutput | DescribeReplicationInstanceTaskLogsCommandOutput | DescribeReplicationInstancesCommandOutput | DescribeReplicationSubnetGroupsCommandOutput | DescribeReplicationTaskAssessmentResultsCommandOutput | DescribeReplicationTaskAssessmentRunsCommandOutput | DescribeReplicationTaskIndividualAssessmentsCommandOutput | DescribeReplicationTasksCommandOutput | DescribeSchemasCommandOutput | DescribeTableStatisticsCommandOutput | ImportCertificateCommandOutput | ListTagsForResourceCommandOutput | ModifyEndpointCommandOutput | ModifyEventSubscriptionCommandOutput | ModifyReplicationInstanceCommandOutput | ModifyReplicationSubnetGroupCommandOutput | ModifyReplicationTaskCommandOutput | MoveReplicationTaskCommandOutput | RebootReplicationInstanceCommandOutput | RefreshSchemasCommandOutput | ReloadTablesCommandOutput | RemoveTagsFromResourceCommandOutput | RunFleetAdvisorLsaAnalysisCommandOutput | StartReplicationTaskAssessmentCommandOutput | StartReplicationTaskAssessmentRunCommandOutput | StartReplicationTaskCommandOutput | StopReplicationTaskCommandOutput | TestConnectionCommandOutput | UpdateSubscriptionsToEventBridgeCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type DatabaseMigrationServiceClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of DatabaseMigrationServiceClient class constructor that set the region, credentials and other options.
        */
    export interface DatabaseMigrationServiceClientConfig extends DatabaseMigrationServiceClientConfigType {
    }
    type DatabaseMigrationServiceClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of DatabaseMigrationServiceClient class. This is resolved and normalized from the {@link DatabaseMigrationServiceClientConfig | constructor configuration interface}.
        */
    export interface DatabaseMigrationServiceClientResolvedConfig extends DatabaseMigrationServiceClientResolvedConfigType {
    }
    /**
        * <fullname>Database Migration Service</fullname>
        *          <p>Database Migration Service (DMS) can migrate your data to and from the most
        *          widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL
        *          Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise
        *          (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as
        *          heterogeneous migrations between different database platforms, such as Oracle to MySQL or
        *          SQL Server to PostgreSQL.</p>
        *          <p>For more information about DMS, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html">What Is Database Migration Service?</a>
        *          in the <i>Database Migration Service User Guide.</i>
        *          </p>
        */
    export class DatabaseMigrationServiceClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, DatabaseMigrationServiceClientResolvedConfig> {
            /**
                * The resolved configuration of DatabaseMigrationServiceClient class. This is resolved and normalized from the {@link DatabaseMigrationServiceClientConfig | constructor configuration interface}.
                */
            readonly config: DatabaseMigrationServiceClientResolvedConfig;
            constructor(configuration: DatabaseMigrationServiceClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { DatabaseMigrationServiceServiceException as __BaseException } from "@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/DatabaseMigrationServiceServiceException";
    /**
        * <p>DMS was denied access to the endpoint. Check that the
        *             role is correctly configured.</p>
        */
    export class AccessDeniedFault extends __BaseException {
            readonly name: "AccessDeniedFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedFault, __BaseException>);
    }
    /**
        * <p>Describes a quota for an Amazon Web Services account, for example the number of replication instances
        *          allowed.</p>
        */
    export interface AccountQuota {
            /**
                * <p>The name of the DMS quota for this Amazon Web Services account.</p>
                */
            AccountQuotaName?: string;
            /**
                * <p>The amount currently used toward the quota maximum.</p>
                */
            Used?: number;
            /**
                * <p>The maximum allowed value for the quota.</p>
                */
            Max?: number;
    }
    export namespace AccountQuota {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountQuota) => any;
    }
    /**
        * <p>A user-defined key-value pair that describes metadata added to an DMS resource and
        *          that is used by operations such as the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>AddTagsToResource</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListTagsForResource</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>RemoveTagsFromResource</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface Tag {
            /**
                * <p>A key is the required name of the tag. The string value can be 1-128 Unicode characters
                *          in length and can't be prefixed with "aws:" or "dms:". The string can only contain
                *          only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java
                *          regular expressions: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").</p>
                */
            Key?: string;
            /**
                * <p>A value is the optional value of the tag. The string value can be 1-256 Unicode
                *          characters in length and can't be prefixed with "aws:" or "dms:". The string can only
                *          contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-'
                *          (Java regular expressions: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").</p>
                */
            Value?: string;
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the resource for which the tag is created.</p>
                */
            ResourceArn?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Associates a set of tags with an DMS resource.</p>
        */
    export interface AddTagsToResourceMessage {
            /**
                * <p>Identifies the DMS resource to which tags should be added. The value for this parameter is an Amazon Resource Name (ARN).</p>
                *          <p>For DMS, you can tag a replication instance, an endpoint, or a replication task.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>One or more tags to be assigned to the resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace AddTagsToResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsToResourceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface AddTagsToResourceResponse {
    }
    export namespace AddTagsToResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsToResourceResponse) => any;
    }
    /**
        * <p>The resource could not be found.</p>
        */
    export class ResourceNotFoundFault extends __BaseException {
            readonly name: "ResourceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface ApplyPendingMaintenanceActionMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the DMS resource that the pending maintenance
                *          action applies to.</p>
                */
            ReplicationInstanceArn: string | undefined;
            /**
                * <p>The pending maintenance action to apply to this resource.</p>
                *          <p>Valid values: <code>os-upgrade</code>, <code>system-update</code>, <code>db-upgrade</code>
                *          </p>
                */
            ApplyAction: string | undefined;
            /**
                * <p>A value that specifies the type of opt-in request, or undoes an opt-in request. You can't undo an
                *          opt-in request of type <code>immediate</code>.</p>
                *          <p>Valid values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>immediate</code> - Apply the maintenance action immediately.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>next-maintenance</code> - Apply the maintenance action during the next
                *                maintenance window for the resource.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in
                *                requests.</p>
                *             </li>
                *          </ul>
                */
            OptInType: string | undefined;
    }
    export namespace ApplyPendingMaintenanceActionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyPendingMaintenanceActionMessage) => any;
    }
    /**
        * <p>Describes a maintenance action pending for an DMS resource, including when and how
        *          it will be applied. This data type is a response element to the
        *             <code>DescribePendingMaintenanceActions</code> operation.</p>
        */
    export interface PendingMaintenanceAction {
            /**
                * <p>The type of pending maintenance action that is available for the resource.</p>
                */
            Action?: string;
            /**
                * <p>The date of the maintenance window when the action is to be applied. The maintenance
                *          action is applied to the resource during its first maintenance window after this date. If
                *          this date is specified, any <code>next-maintenance</code> opt-in requests are
                *          ignored.</p>
                */
            AutoAppliedAfterDate?: Date;
            /**
                * <p>The date when the maintenance action will be automatically applied. The maintenance
                *          action is applied to the resource on this date regardless of the maintenance window for the
                *          resource. If this date is specified, any <code>immediate</code> opt-in requests are
                *          ignored.</p>
                */
            ForcedApplyDate?: Date;
            /**
                * <p>The type of opt-in request that has been received for the resource.</p>
                */
            OptInStatus?: string;
            /**
                * <p>The effective date when the pending maintenance action will be applied to the resource.
                *          This date takes into account opt-in requests received from the
                *             <code>ApplyPendingMaintenanceAction</code> API operation, and also the
                *             <code>AutoAppliedAfterDate</code> and <code>ForcedApplyDate</code> parameter values.
                *          This value is blank if an opt-in request has not been received and nothing has been
                *          specified for <code>AutoAppliedAfterDate</code> or <code>ForcedApplyDate</code>.</p>
                */
            CurrentApplyDate?: Date;
            /**
                * <p>A description providing more detail about the maintenance action.</p>
                */
            Description?: string;
    }
    export namespace PendingMaintenanceAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingMaintenanceAction) => any;
    }
    /**
        * <p>Identifies an DMS resource and any pending actions for it.</p>
        */
    export interface ResourcePendingMaintenanceActions {
            /**
                * <p>The Amazon Resource Name (ARN) of the DMS resource that the pending maintenance action
                *          applies to. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Introduction.AWS.ARN.html"> Constructing an Amazon
                *             Resource Name (ARN) for DMS</a> in the DMS documentation.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>Detailed information about the pending maintenance action.</p>
                */
            PendingMaintenanceActionDetails?: PendingMaintenanceAction[];
    }
    export namespace ResourcePendingMaintenanceActions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourcePendingMaintenanceActions) => any;
    }
    /**
        * <p></p>
        */
    export interface ApplyPendingMaintenanceActionResponse {
            /**
                * <p>The DMS resource that the pending maintenance action will be applied to.</p>
                */
            ResourcePendingMaintenanceActions?: ResourcePendingMaintenanceActions;
    }
    export namespace ApplyPendingMaintenanceActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyPendingMaintenanceActionResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface CancelReplicationTaskAssessmentRunMessage {
            /**
                * <p>Amazon Resource Name (ARN) of the premigration assessment run to be canceled.</p>
                */
            ReplicationTaskAssessmentRunArn: string | undefined;
    }
    export namespace CancelReplicationTaskAssessmentRunMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelReplicationTaskAssessmentRunMessage) => any;
    }
    /**
        * <p>The progress values reported by the <code>AssessmentProgress</code> response
        *          element.</p>
        */
    export interface ReplicationTaskAssessmentRunProgress {
            /**
                * <p>The number of individual assessments that are specified to run.</p>
                */
            IndividualAssessmentCount?: number;
            /**
                * <p>The number of individual assessments that have completed, successfully or not.</p>
                */
            IndividualAssessmentCompletedCount?: number;
    }
    export namespace ReplicationTaskAssessmentRunProgress {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationTaskAssessmentRunProgress) => any;
    }
    /**
        * <p>Provides information that describes a premigration assessment run that you have started
        *          using the <code>StartReplicationTaskAssessmentRun</code> operation.</p>
        *          <p>Some of the information appears based on other operations that can return the
        *             <code>ReplicationTaskAssessmentRun</code> object.</p>
        */
    export interface ReplicationTaskAssessmentRun {
            /**
                * <p>Amazon Resource Name (ARN) of this assessment run.</p>
                */
            ReplicationTaskAssessmentRunArn?: string;
            /**
                * <p>ARN of the migration task associated with this premigration
                *          assessment run.</p>
                */
            ReplicationTaskArn?: string;
            /**
                * <p>Assessment run status. </p>
                *          <p>This status can have one of the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"cancelling"</code> – The assessment run was canceled by the
                *                   <code>CancelReplicationTaskAssessmentRun</code> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"deleting"</code> – The assessment run was deleted by the
                *                   <code>DeleteReplicationTaskAssessmentRun</code> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"failed"</code> – At least one individual assessment completed with a
                *                   <code>failed</code> status.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"error-provisioning"</code> – An internal error occurred while
                *                resources were provisioned (during <code>provisioning</code> status).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"error-executing"</code> – An internal error occurred while
                *                individual assessments ran (during <code>running</code> status).</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"invalid state"</code> – The assessment run is in an unknown state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"passed"</code> – All individual assessments have completed, and none
                *                has a <code>failed</code> status.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"provisioning"</code> – Resources required to run individual
                *                assessments are being provisioned.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"running"</code> – Individual assessments are being run.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"starting"</code> – The assessment run is starting, but resources are not yet
                *                being provisioned for individual assessments.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>Date on which the assessment run was created using the
                *             <code>StartReplicationTaskAssessmentRun</code> operation.</p>
                */
            ReplicationTaskAssessmentRunCreationDate?: Date;
            /**
                * <p>Indication of the completion progress for the individual assessments specified to
                *          run.</p>
                */
            AssessmentProgress?: ReplicationTaskAssessmentRunProgress;
            /**
                * <p>Last message generated by an individual assessment failure.</p>
                */
            LastFailureMessage?: string;
            /**
                * <p>ARN of the service role used to start the assessment run using the
                *          <code>StartReplicationTaskAssessmentRun</code> operation. The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>Amazon S3 bucket where DMS stores the results of this assessment run.</p>
                */
            ResultLocationBucket?: string;
            /**
                * <p>Folder in an Amazon S3 bucket where DMS stores the results of this assessment
                *          run.</p>
                */
            ResultLocationFolder?: string;
            /**
                * <p>Encryption mode used to encrypt the assessment run results.</p>
                */
            ResultEncryptionMode?: string;
            /**
                * <p>ARN of the KMS encryption key used to encrypt the assessment run results.</p>
                */
            ResultKmsKeyArn?: string;
            /**
                * <p>Unique name of the assessment run.</p>
                */
            AssessmentRunName?: string;
    }
    export namespace ReplicationTaskAssessmentRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationTaskAssessmentRun) => any;
    }
    /**
        * <p></p>
        */
    export interface CancelReplicationTaskAssessmentRunResponse {
            /**
                * <p>The <code>ReplicationTaskAssessmentRun</code> object for the canceled assessment
                *          run.</p>
                */
            ReplicationTaskAssessmentRun?: ReplicationTaskAssessmentRun;
    }
    export namespace CancelReplicationTaskAssessmentRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelReplicationTaskAssessmentRunResponse) => any;
    }
    /**
        * <p>The resource is in a state that prevents it from being used for database migration.</p>
        */
    export class InvalidResourceStateFault extends __BaseException {
            readonly name: "InvalidResourceStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResourceStateFault, __BaseException>);
    }
    /**
        * <p> The settings in JSON format for the DMS Transfer type source endpoint. </p>
        */
    export interface DmsTransferSettings {
            /**
                * <p>The Amazon Resource Name (ARN) used by the service access IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p> The name of the S3 bucket to use. </p>
                */
            BucketName?: string;
    }
    export namespace DmsTransferSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DmsTransferSettings) => any;
    }
    export enum NestingLevelValue {
            NONE = "none",
            ONE = "one"
    }
    /**
        * <p>Provides information that defines a DocumentDB endpoint.</p>
        */
    export interface DocDbSettings {
            /**
                * <p>The user name you use to access the DocumentDB source endpoint. </p>
                */
            Username?: string;
            /**
                * <p> The password for the user account you use to access the DocumentDB source endpoint.
                *       </p>
                */
            Password?: string;
            /**
                * <p> The name of the server on the DocumentDB source endpoint. </p>
                */
            ServerName?: string;
            /**
                * <p> The port value for the DocumentDB source endpoint. </p>
                */
            Port?: number;
            /**
                * <p> The database name on the DocumentDB source endpoint. </p>
                */
            DatabaseName?: string;
            /**
                * <p> Specifies either document or table mode. </p>
                *          <p>Default value is <code>"none"</code>. Specify <code>"none"</code> to use document mode.
                *          Specify <code>"one"</code> to use table mode.</p>
                */
            NestingLevel?: NestingLevelValue | string;
            /**
                * <p> Specifies the document ID. Use this setting when <code>NestingLevel</code> is set to
                *          <code>"none"</code>. </p>
                *          <p>Default value is <code>"false"</code>. </p>
                */
            ExtractDocId?: boolean;
            /**
                * <p> Indicates the number of documents to preview to determine the document organization.
                *          Use this setting when <code>NestingLevel</code> is set to <code>"one"</code>. </p>
                *          <p>Must be a positive value greater than <code>0</code>. Default value is
                *          <code>1000</code>.</p>
                */
            DocsToInvestigate?: number;
            /**
                * <p>The KMS key identifier that is used to encrypt the content on the replication
                *          instance. If you don't specify a value for the <code>KmsKeyId</code> parameter, then
                *          DMS uses your default encryption key. KMS creates the default encryption key for
                *          your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret that allows access to the DocumentDB endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *             <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *             <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                   Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code>
                *          that contains the DocumentDB endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
    }
    export namespace DocDbSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocDbSettings) => any;
    }
    /**
        * <p>Provides the Amazon Resource Name (ARN) of the Identity and Access Management (IAM)
        *          role used to define an Amazon DynamoDB target endpoint.</p>
        */
    export interface DynamoDbSettings {
            /**
                * <p> The Amazon Resource Name (ARN) used by the service to access the IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn: string | undefined;
    }
    export namespace DynamoDbSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DynamoDbSettings) => any;
    }
    /**
        * <p>Provides information that defines an OpenSearch endpoint.</p>
        */
    export interface ElasticsearchSettings {
            /**
                * <p>The Amazon Resource Name (ARN) used by the service to access the IAM role.
                *          The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn: string | undefined;
            /**
                * <p>The endpoint for the OpenSearch cluster. DMS uses HTTPS if a transport
                *          protocol (http/https) is not specified.</p>
                */
            EndpointUri: string | undefined;
            /**
                * <p>The maximum percentage of records that can fail to be written before a full load
                *             operation stops.</p>
                *          <p>To avoid early failure, this counter is only effective after 1000 records
                *          are transferred. OpenSearch also has the concept of error monitoring during the
                *          last 10 minutes of an Observation Window. If transfer of all records fail in the
                *          last 10 minutes, the full load operation stops. </p>
                */
            FullLoadErrorPercentage?: number;
            /**
                * <p>The maximum number of seconds for which DMS retries failed API requests to the
                *          OpenSearch cluster.</p>
                */
            ErrorRetryDuration?: number;
            /**
                * <p>Set this option to <code>true</code> for DMS to migrate documentation using the documentation type <code>_doc</code>.  OpenSearch and
                *       an Elasticsearch cluster only support the _doc documentation type in versions 7. x and later. The default value is <code>false</code>.</p>
                */
            UseNewMappingType?: boolean;
    }
    export namespace ElasticsearchSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ElasticsearchSettings) => any;
    }
    export enum ReplicationEndpointTypeValue {
            SOURCE = "source",
            TARGET = "target"
    }
    export enum TargetDbType {
            MULTIPLE_DATABASES = "multiple-databases",
            SPECIFIC_DATABASE = "specific-database"
    }
    /**
        * <p>Settings in JSON format for the source GCP MySQL endpoint.</p>
        */
    export interface GcpMySQLSettings {
            /**
                * <p>Specifies a script to run immediately after DMS connects to the endpoint.
                *          The migration task continues running regardless if the SQL statement succeeds or fails.</p>
                *
                *          <p>For this parameter, provide the code of the script itself, not the name of a file containing the script. </p>
                */
            AfterConnectScript?: string;
            /**
                * <p>Adjusts the behavior of DMS when migrating from an SQL Server source database
                *          that is hosted as part of an Always On availability group cluster. If you need DMS
                *          to poll all the nodes in the Always On cluster for transaction backups, set this attribute to <code>false</code>. </p>
                */
            CleanSourceMetadataOnMismatch?: boolean;
            /**
                * <p>Database name for the endpoint. For a MySQL source or target endpoint, don't explicitly specify
                *          the database using the <code>DatabaseName</code> request parameter on either the <code>CreateEndpoint</code>
                *          or <code>ModifyEndpoint</code> API call. Specifying <code>DatabaseName</code> when you create or modify a
                *          MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify
                *          the database only when you specify the schema in the table-mapping rules of the DMS task. </p>
                */
            DatabaseName?: string;
            /**
                * <p>Specifies how often to check the binary log for new changes/events when the database is idle. The default is five seconds.</p>
                *          <p>Example: <code>eventsPollInterval=5;</code>
                *          </p>
                *          <p>In the example, DMS checks for changes in the binary logs every five seconds. </p>
                */
            EventsPollInterval?: number;
            /**
                * <p>Specifies where to migrate source tables on the target, either to a single database or multiple databases.</p>
                *          <p>Example: <code>targetDbType=MULTIPLE_DATABASES</code>
                *          </p>
                */
            TargetDbType?: TargetDbType | string;
            /**
                * <p>Specifies the maximum size (in KB) of any .csv file used to transfer data to a MySQL-compatible database.</p>
                *          <p>Example: <code>maxFileSize=512</code>
                *          </p>
                */
            MaxFileSize?: number;
            /**
                * <p>Improves performance when loading data into the MySQL-compatible target database. Specifies how many
                *          threads to use to load the data into the MySQL-compatible target database. Setting a large number of
                *          threads can have an adverse effect on database performance, because a separate connection is required
                *          for each thread. The default is one.</p>
                *
                *          <p>Example: <code>parallelLoadThreads=1</code>
                *          </p>
                */
            ParallelLoadThreads?: number;
            /**
                * <p>Endpoint connection password.</p>
                */
            Password?: string;
            /**
                * <p></p>
                */
            Port?: number;
            /**
                * <p>Endpoint TCP port.</p>
                */
            ServerName?: string;
            /**
                * <p>Specifies the time zone for the source MySQL database.</p>
                *
                *          <p>Example: <code>serverTimezone=US/Pacific;</code>
                *          </p>
                *
                *          <p>Note: Do not enclose time zones in single quotes.</p>
                */
            ServerTimezone?: string;
            /**
                * <p>Endpoint connection user name.</p>
                */
            Username?: string;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS
                *          as the trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret.</code> The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret
                *          that allows access to the MySQL endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify
                *          the values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify clear-text
                *          values for <code>UserName</code>, <code>Password</code>, <code>ServerName</code>, and <code>Port</code>.
                *          You can't specify both. For more information on creating this <code>SecretsManagerSecret</code>
                *          and the <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code> required to
                *          access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service resources</a> in the
                *          Database Migration Service User Guide.
                *
                *       </p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code>
                *          that contains the MySQL endpoint connection details. </p>
                */
            SecretsManagerSecretId?: string;
    }
    export namespace GcpMySQLSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GcpMySQLSettings) => any;
    }
    /**
        * <p>Provides information that defines an IBM Db2 LUW endpoint.</p>
        */
    export interface IBMDb2Settings {
            /**
                * <p>Database name for the endpoint.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Endpoint connection password.</p>
                */
            Password?: string;
            /**
                * <p>Endpoint TCP port. The default value is 50000.</p>
                */
            Port?: number;
            /**
                * <p>Fully qualified domain name of the endpoint.</p>
                */
            ServerName?: string;
            /**
                * <p>Enables ongoing replication (CDC) as a BOOLEAN value. The
                *          default is true.</p>
                */
            SetDataCaptureChanges?: boolean;
            /**
                * <p>For ongoing replication (CDC), use CurrentLSN to specify a
                *          log sequence number (LSN) where you want the replication
                *          to start.</p>
                */
            CurrentLsn?: string;
            /**
                * <p>Maximum number of bytes per read, as a NUMBER value.
                *          The default is 64 KB.</p>
                */
            MaxKBytesPerRead?: number;
            /**
                * <p>Endpoint connection user name.</p>
                */
            Username?: string;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of
                *          the Amazon Web Services Secrets Manager secret that allows access to the Db2 LUW endpoint. </p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the Db2 LUW endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
    }
    export namespace IBMDb2Settings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IBMDb2Settings) => any;
    }
    export enum MessageFormatValue {
            JSON = "json",
            JSON_UNFORMATTED = "json-unformatted"
    }
    export enum KafkaSecurityProtocol {
            PLAINTEXT = "plaintext",
            SASL_SSL = "sasl-ssl",
            SSL_AUTHENTICATION = "ssl-authentication",
            SSL_ENCRYPTION = "ssl-encryption"
    }
    /**
        * <p>Provides information that describes an Apache Kafka endpoint. This
        *          information includes the output format of records applied to the endpoint and details of
        *          transaction and control table data information.</p>
        */
    export interface KafkaSettings {
            /**
                * <p>A comma-separated list of one or more broker locations in your Kafka cluster that host your Kafka instance. Specify each broker location
                *          in the form <code>
                *                <i>broker-hostname-or-ip</i>:<i>port</i>
                *             </code>. For example, <code>"ec2-12-345-678-901.compute-1.amazonaws.com:2345"</code>.
                *          For more information and examples of specifying a list of broker locations,
                *          see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Kafka.html">Using Apache Kafka as a target for Database Migration Service</a>
                *          in the <i>Database Migration Service User Guide</i>.
                *       </p>
                */
            Broker?: string;
            /**
                * <p>The topic to which you migrate the data. If you don't specify a topic, DMS
                *          specifies <code>"kafka-default-topic"</code> as the migration topic.</p>
                */
            Topic?: string;
            /**
                * <p>The output format for the records created on the endpoint. The message format is
                *             <code>JSON</code> (default) or <code>JSON_UNFORMATTED</code> (a single line with no
                *          tab).</p>
                */
            MessageFormat?: MessageFormatValue | string;
            /**
                * <p>Provides detailed transaction information from the source database. This information
                *          includes a commit timestamp, a log position, and values for <code>transaction_id</code>,
                *          previous <code>transaction_id</code>, and <code>transaction_record_id</code> (the record
                *          offset within a transaction). The default is <code>false</code>.</p>
                */
            IncludeTransactionDetails?: boolean;
            /**
                * <p>Shows the partition value within the Kafka message output unless the partition type is
                *             <code>schema-table-type</code>. The default is <code>false</code>.</p>
                */
            IncludePartitionValue?: boolean;
            /**
                * <p>Prefixes schema and table names to partition values, when the partition type is
                *             <code>primary-key-type</code>. Doing this increases data distribution among Kafka
                *          partitions. For example, suppose that a SysBench schema has thousands of tables and each
                *          table has only limited range for a primary key. In this case, the same primary key is sent
                *          from thousands of tables to the same partition, which causes throttling. The default is
                *             <code>false</code>.</p>
                */
            PartitionIncludeSchemaTable?: boolean;
            /**
                * <p>Includes any data definition language (DDL) operations that change the table in the
                *          control data, such as <code>rename-table</code>, <code>drop-table</code>,
                *             <code>add-column</code>, <code>drop-column</code>, and <code>rename-column</code>. The
                *          default is <code>false</code>.</p>
                */
            IncludeTableAlterOperations?: boolean;
            /**
                * <p>Shows detailed control information for table definition, column definition, and table
                *          and column changes in the Kafka message output. The default is <code>false</code>.</p>
                */
            IncludeControlDetails?: boolean;
            /**
                * <p>The maximum size in bytes for records created on the endpoint The default is 1,000,000.</p>
                */
            MessageMaxBytes?: number;
            /**
                * <p>Include NULL and empty columns for records migrated to the endpoint. The default is <code>false</code>.</p>
                */
            IncludeNullAndEmpty?: boolean;
            /**
                * <p>Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include
                *          <code>ssl-encryption</code>, <code>ssl-authentication</code>, and <code>sasl-ssl</code>.
                *          <code>sasl-ssl</code> requires <code>SaslUsername</code> and <code>SaslPassword</code>.</p>
                */
            SecurityProtocol?: KafkaSecurityProtocol | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the client certificate used to securely connect to a Kafka target endpoint.</p>
                */
            SslClientCertificateArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the client private key used to securely connect to a Kafka target endpoint.</p>
                */
            SslClientKeyArn?: string;
            /**
                * <p> The password for the client private key used to securely connect to a Kafka target endpoint.</p>
                */
            SslClientKeyPassword?: string;
            /**
                * <p> The Amazon Resource Name (ARN) for the private certificate authority (CA) cert that DMS uses
                *          to securely connect to your Kafka target endpoint.</p>
                */
            SslCaCertificateArn?: string;
            /**
                * <p> The secure user name you created when you first set up your MSK cluster to validate a
                *          client identity and make an encrypted connection between server and client using SASL-SSL
                *          authentication.</p>
                */
            SaslUsername?: string;
            /**
                * <p>The secure password you created when you first set up your MSK cluster to validate a client identity and
                *          make an encrypted connection between server and client using SASL-SSL authentication.</p>
                */
            SaslPassword?: string;
            /**
                * <p>Set this optional parameter to <code>true</code> to avoid adding a '0x' prefix
                *          to raw data in hexadecimal format. For example, by default, DMS adds a '0x'
                *          prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka
                *          target. Use the <code>NoHexPrefix</code> endpoint setting to enable migration of RAW data
                *          type columns without adding the '0x' prefix.</p>
                */
            NoHexPrefix?: boolean;
    }
    export namespace KafkaSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaSettings) => any;
    }
    /**
        * <p>Provides information that describes an Amazon Kinesis Data Stream endpoint. This
        *          information includes the output format of records applied to the endpoint and details of
        *          transaction and control table data information.</p>
        */
    export interface KinesisSettings {
            /**
                * <p>The Amazon Resource Name (ARN) for the Amazon Kinesis Data Streams endpoint.</p>
                */
            StreamArn?: string;
            /**
                * <p>The output format for the records created on the endpoint. The message format is
                *          <code>JSON</code> (default) or <code>JSON_UNFORMATTED</code> (a single line with no tab).</p>
                */
            MessageFormat?: MessageFormatValue | string;
            /**
                * <p>The Amazon Resource Name (ARN) for the IAM role
                *          that DMS uses to write to the Kinesis data stream.
                *          The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>Provides detailed transaction information from the source database. This information
                *          includes a commit timestamp, a log position, and values for <code>transaction_id</code>,
                *          previous <code>transaction_id</code>, and <code>transaction_record_id</code> (the record
                *          offset within a transaction). The default is <code>false</code>.</p>
                */
            IncludeTransactionDetails?: boolean;
            /**
                * <p>Shows the partition value within the Kinesis message output, unless the partition type
                *          is <code>schema-table-type</code>. The default is <code>false</code>.</p>
                */
            IncludePartitionValue?: boolean;
            /**
                * <p>Prefixes schema and table names to partition values, when the partition type is
                *             <code>primary-key-type</code>. Doing this increases data distribution among Kinesis
                *          shards. For example, suppose that a SysBench schema has thousands of tables and each table
                *          has only limited range for a primary key. In this case, the same primary key is sent from
                *          thousands of tables to the same shard, which causes throttling. The default is <code>false</code>.</p>
                */
            PartitionIncludeSchemaTable?: boolean;
            /**
                * <p>Includes any data definition language (DDL) operations that change the table in the
                *          control data, such as <code>rename-table</code>, <code>drop-table</code>,
                *             <code>add-column</code>, <code>drop-column</code>, and <code>rename-column</code>. The
                *          default is <code>false</code>.</p>
                */
            IncludeTableAlterOperations?: boolean;
            /**
                * <p>Shows detailed control information for table definition, column definition, and table
                *          and column changes in the Kinesis message output. The default is <code>false</code>.</p>
                */
            IncludeControlDetails?: boolean;
            /**
                * <p>Include NULL and empty columns for records migrated to the endpoint. The default is <code>false</code>.</p>
                */
            IncludeNullAndEmpty?: boolean;
            /**
                * <p>Set this optional parameter to <code>true</code> to avoid adding a '0x' prefix
                *          to raw data in hexadecimal format. For example, by default, DMS adds a '0x'
                *          prefix to the LOB column type in hexadecimal format moving from an Oracle source to an
                *          Amazon Kinesis target. Use the <code>NoHexPrefix</code> endpoint setting to enable
                *          migration of RAW data type columns without adding the '0x' prefix.</p>
                */
            NoHexPrefix?: boolean;
    }
    export namespace KinesisSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KinesisSettings) => any;
    }
    export enum SafeguardPolicy {
            EXCLUSIVE_AUTOMATIC_TRUNCATION = "exclusive-automatic-truncation",
            RELY_ON_SQL_SERVER_REPLICATION_AGENT = "rely-on-sql-server-replication-agent",
            SHARED_AUTOMATIC_TRUNCATION = "shared-automatic-truncation"
    }
    /**
        * <p>Provides information that defines a Microsoft SQL Server endpoint.</p>
        */
    export interface MicrosoftSQLServerSettings {
            /**
                * <p>Endpoint TCP port.</p>
                */
            Port?: number;
            /**
                * <p>The maximum size of the packets (in bytes) used to transfer
                *          data using BCP.</p>
                */
            BcpPacketSize?: number;
            /**
                * <p>Database name for the endpoint.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Specifies a file group for the DMS internal tables. When the replication task
                *          starts, all the internal DMS control tables (awsdms_ apply_exception, awsdms_apply,
                *          awsdms_changes) are created for the specified file group.</p>
                */
            ControlTablesFileGroup?: string;
            /**
                * <p>Endpoint connection password.</p>
                */
            Password?: string;
            /**
                * <p>Cleans and recreates table metadata information on the replication instance when
                *          a mismatch occurs. An example is a situation where running an alter DDL statement on
                *          a table might result in different information about the table cached in the replication
                *          instance.</p>
                */
            QuerySingleAlwaysOnNode?: boolean;
            /**
                * <p>When this attribute is set to <code>Y</code>, DMS only reads changes
                *          from transaction log backups and doesn't read from the
                *          active transaction log file during ongoing replication. Setting
                *          this parameter to <code>Y</code> enables you to control active transaction
                *          log file growth during full load and ongoing replication
                *          tasks. However, it can add some source latency to ongoing
                *          replication.</p>
                */
            ReadBackupOnly?: boolean;
            /**
                * <p>Use this attribute to minimize the need to access the
                *          backup log and enable DMS to prevent truncation using one of the
                *          following two methods.</p>
                *          <p>
                *             <i>Start transactions in the database:</i> This is the default
                *          method. When this method is used, DMS prevents
                *          TLOG truncation by mimicking a transaction in the database.
                *          As long as such a transaction is open, changes that appear
                *          after the transaction started aren't truncated. If you need
                *          Microsoft Replication to be enabled in your database, then
                *          you must choose this method.</p>
                *          <p>
                *             <i>Exclusively use sp_repldone within a single task</i>: When
                *          this method is used, DMS reads the changes and then
                *          uses sp_repldone to mark the TLOG transactions as ready
                *          for truncation. Although this method doesn't involve any
                *          transactional activities, it can only be used when Microsoft
                *          Replication isn't running. Also, when using this method, only
                *          one DMS task can access the database at any given
                *          time. Therefore, if you need to run parallel DMS tasks
                *          against the same database, use the default method.</p>
                */
            SafeguardPolicy?: SafeguardPolicy | string;
            /**
                * <p>Fully qualified domain name of the endpoint.</p>
                */
            ServerName?: string;
            /**
                * <p>Endpoint connection user name.</p>
                */
            Username?: string;
            /**
                * <p>Use this to attribute to transfer data for full-load operations
                *          using BCP. When the target table contains an identity
                *          column that does not exist in the source table, you must
                *          disable the use BCP for loading table option.</p>
                */
            UseBcpFullLoad?: boolean;
            /**
                * <p>When this attribute is set to <code>Y</code>, DMS processes third-party
                *          transaction log backups if they are created in native format.</p>
                */
            UseThirdPartyBackupDevice?: boolean;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager
                *           secret that allows access to the SQL Server endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the SQL Server endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
            /**
                * <p>Use the <code>TrimSpaceInChar</code> source endpoint setting to trim data
                *          on CHAR and NCHAR data types during migration. The default value is <code>true</code>.</p>
                */
            TrimSpaceInChar?: boolean;
    }
    export namespace MicrosoftSQLServerSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MicrosoftSQLServerSettings) => any;
    }
    export enum AuthMechanismValue {
            DEFAULT = "default",
            MONGODB_CR = "mongodb_cr",
            SCRAM_SHA_1 = "scram_sha_1"
    }
    export enum AuthTypeValue {
            NO = "no",
            PASSWORD = "password"
    }
    /**
        * <p>Provides information that defines a MongoDB endpoint.</p>
        */
    export interface MongoDbSettings {
            /**
                * <p>The user name you use to access the MongoDB source endpoint. </p>
                */
            Username?: string;
            /**
                * <p> The password for the user account you use to access the MongoDB source endpoint.
                *       </p>
                */
            Password?: string;
            /**
                * <p> The name of the server on the MongoDB source endpoint. </p>
                */
            ServerName?: string;
            /**
                * <p> The port value for the MongoDB source endpoint. </p>
                */
            Port?: number;
            /**
                * <p> The database name on the MongoDB source endpoint. </p>
                */
            DatabaseName?: string;
            /**
                * <p> The authentication type you use to access the MongoDB source endpoint.</p>
                *          <p>When when set to <code>"no"</code>, user name and password parameters are not used and
                *          can be empty. </p>
                */
            AuthType?: AuthTypeValue | string;
            /**
                * <p> The authentication mechanism you use to access the MongoDB source endpoint.</p>
                *          <p>For the default value, in MongoDB version 2.x, <code>"default"</code> is
                *             <code>"mongodb_cr"</code>. For MongoDB version 3.x or later, <code>"default"</code> is
                *             <code>"scram_sha_1"</code>. This setting isn't used when <code>AuthType</code> is
                *          set to <code>"no"</code>.</p>
                */
            AuthMechanism?: AuthMechanismValue | string;
            /**
                * <p> Specifies either document or table mode. </p>
                *          <p>Default value is <code>"none"</code>. Specify <code>"none"</code> to use document mode.
                *          Specify <code>"one"</code> to use table mode.</p>
                */
            NestingLevel?: NestingLevelValue | string;
            /**
                * <p> Specifies the document ID. Use this setting when <code>NestingLevel</code> is set to
                *             <code>"none"</code>. </p>
                *          <p>Default value is <code>"false"</code>. </p>
                */
            ExtractDocId?: string;
            /**
                * <p> Indicates the number of documents to preview to determine the document organization.
                *          Use this setting when <code>NestingLevel</code> is set to <code>"one"</code>. </p>
                *          <p>Must be a positive value greater than <code>0</code>. Default value is
                *          <code>1000</code>.</p>
                */
            DocsToInvestigate?: string;
            /**
                * <p> The MongoDB database name. This setting isn't used when <code>AuthType</code> is
                *          set to <code>"no"</code>. </p>
                *          <p>The default is <code>"admin"</code>.</p>
                */
            AuthSource?: string;
            /**
                * <p>The KMS key identifier that is used to encrypt the content on the replication
                *          instance. If you don't specify a value for the <code>KmsKeyId</code> parameter, then
                *          DMS uses your default encryption key. KMS creates the default encryption key for
                *          your Amazon Web Services account. Your Amazon Web Services account has a different default encryption key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret that allows access to the MongoDB endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the MongoDB endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
    }
    export namespace MongoDbSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MongoDbSettings) => any;
    }
    /**
        * <p>Provides information that defines a MySQL endpoint.</p>
        */
    export interface MySQLSettings {
            /**
                * <p>Specifies a script to run immediately after DMS
                *          connects to the endpoint. The migration task continues
                *          running regardless if the SQL statement succeeds or fails.</p>
                *          <p>For this parameter, provide the code of the script itself, not the name of a file
                *          containing the script.</p>
                */
            AfterConnectScript?: string;
            /**
                * <p>Adjusts the behavior of DMS when migrating from an SQL Server source database
                *          that is hosted as part of an Always On availability group cluster.  If you need DMS to poll
                *          all the nodes in the Always On cluster for transaction backups, set this attribute to
                *          <code>false</code>.</p>
                */
            CleanSourceMetadataOnMismatch?: boolean;
            /**
                * <p>Database name for the endpoint. For a MySQL source or target endpoint, don't explicitly
                *          specify the database using the <code>DatabaseName</code> request parameter on either the
                *          <code>CreateEndpoint</code> or <code>ModifyEndpoint</code> API call. Specifying
                *          <code>DatabaseName</code> when you create or modify a MySQL endpoint replicates all the
                *          task tables to this single database. For MySQL endpoints, you specify the database only when
                *          you specify the schema in the table-mapping rules of the DMS task.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Specifies how often to check the binary log for new
                *          changes/events when the database is idle. The default is five seconds.</p>
                *          <p>Example: <code>eventsPollInterval=5;</code>
                *          </p>
                *          <p>In the example, DMS checks for changes in the binary
                *          logs every five seconds.</p>
                */
            EventsPollInterval?: number;
            /**
                * <p>Specifies where to migrate source tables on the target, either
                *          to a single database or multiple databases. If you specify
                *       <code>SPECIFIC_DATABASE</code>, specify the database name using the <code>DatabaseName</code>
                *       parameter of the <code>Endpoint</code> object.</p>
                *          <p>Example: <code>targetDbType=MULTIPLE_DATABASES</code>
                *          </p>
                */
            TargetDbType?: TargetDbType | string;
            /**
                * <p>Specifies the maximum size (in KB) of any .csv file used to
                *          transfer data to a MySQL-compatible database.</p>
                *          <p>Example: <code>maxFileSize=512</code>
                *          </p>
                */
            MaxFileSize?: number;
            /**
                * <p>Improves performance when loading data into the MySQL-compatible target database.
                *          Specifies how many threads to use to load the data into the MySQL-compatible target
                *          database. Setting a large number of threads can have an adverse effect on database
                *          performance, because a separate connection is required for each thread. The default is one.</p>
                *          <p>Example: <code>parallelLoadThreads=1</code>
                *          </p>
                */
            ParallelLoadThreads?: number;
            /**
                * <p>Endpoint connection password.</p>
                */
            Password?: string;
            /**
                * <p>Endpoint TCP port.</p>
                */
            Port?: number;
            /**
                * <p>Fully qualified domain name of the endpoint.</p>
                */
            ServerName?: string;
            /**
                * <p>Specifies the time zone for the source MySQL database.</p>
                *          <p>Example: <code>serverTimezone=US/Pacific;</code>
                *          </p>
                *          <p>Note: Do not enclose time zones in single quotes.</p>
                */
            ServerTimezone?: string;
            /**
                * <p>Endpoint connection user name.</p>
                */
            Username?: string;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager
                *           secret that allows access to the MySQL endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the MySQL endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
    }
    export namespace MySQLSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MySQLSettings) => any;
    }
    /**
        * <p>Provides information that defines an Amazon Neptune endpoint.</p>
        */
    export interface NeptuneSettings {
            /**
                * <p>The Amazon Resource Name (ARN) of the service role that you created for the Neptune
                *          target endpoint. The role must allow the <code>iam:PassRole</code> action.
                *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.ServiceRole">Creating an IAM Service Role for Accessing Amazon Neptune as a Target</a> in the <i>Database Migration Service User
                *             Guide. </i>
                *          </p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>The name of the Amazon S3 bucket where DMS can temporarily store migrated graph data
                *          in .csv files before bulk-loading it to the Neptune target database. DMS maps the SQL
                *          source data to graph data before storing it in these .csv files.</p>
                */
            S3BucketName: string | undefined;
            /**
                * <p>A folder path where you want DMS to store migrated graph data in the S3 bucket
                *          specified by <code>S3BucketName</code>
                *          </p>
                */
            S3BucketFolder: string | undefined;
            /**
                * <p>The number of milliseconds for DMS to wait to retry a bulk-load of migrated graph
                *          data to the Neptune target database before raising an error. The default is 250.</p>
                */
            ErrorRetryDuration?: number;
            /**
                * <p>The maximum size in kilobytes of migrated graph data stored in a .csv file before DMS
                *          bulk-loads the data to the Neptune target database. The default is 1,048,576 KB. If the
                *          bulk load is successful, DMS clears the bucket, ready to store the next batch of
                *          migrated graph data.</p>
                */
            MaxFileSize?: number;
            /**
                * <p>The number of times for DMS to retry a bulk load of migrated graph data to the
                *          Neptune target database before raising an error. The default is 5.</p>
                */
            MaxRetryCount?: number;
            /**
                * <p>If you want Identity and Access Management (IAM) authorization enabled for this
                *          endpoint, set this parameter to <code>true</code>. Then attach the appropriate IAM policy
                *          document to your service role specified by <code>ServiceAccessRoleArn</code>. The default
                *          is <code>false</code>.</p>
                */
            IamAuthEnabled?: boolean;
    }
    export namespace NeptuneSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NeptuneSettings) => any;
    }
    export enum CharLengthSemantics {
            BYTE = "byte",
            CHAR = "char",
            DEFAULT = "default"
    }
    /**
        * <p>Provides information that defines an Oracle endpoint.</p>
        */
    export interface OracleSettings {
            /**
                * <p>Set this attribute to set up table-level supplemental logging
                *          for the Oracle database. This attribute enables PRIMARY KEY
                *          supplemental logging on all tables selected for a migration
                *          task.</p>
                *          <p>If you use this option, you still need to enable
                *          database-level supplemental logging.</p>
                */
            AddSupplementalLogging?: boolean;
            /**
                * <p>Specifies the ID of the destination for the archived redo logs. This value
                *          should be the same as a number in the dest_id column of the v$archived_log
                *          view. If you work with an additional redo log destination, use the
                *          <code>AdditionalArchivedLogDestId</code> option to specify the additional
                *          destination ID. Doing this improves performance by ensuring that the correct
                *          logs are accessed from the outset.</p>
                */
            ArchivedLogDestId?: number;
            /**
                * <p>Set this attribute with <code>ArchivedLogDestId</code> in a primary/
                *          standby setup. This attribute is useful in the case of a
                *          switchover. In this case, DMS needs to know which
                *          destination to get archive redo logs from to read changes.
                *          This need arises because the previous primary instance is
                *          now a standby instance after switchover.</p>
                *          <p>Although DMS supports the use of the Oracle
                *          <code>RESETLOGS</code> option to open the database, never
                *          use <code>RESETLOGS</code> unless necessary. For additional
                *          information about <code>RESETLOGS</code>, see <a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/bradv/rman-data-repair-concepts.html#GUID-1805CCF7-4AF2-482D-B65A-998192F89C2B">RMAN Data Repair Concepts</a> in the
                *          <i>Oracle Database Backup and Recovery User's Guide</i>.</p>
                */
            AdditionalArchivedLogDestId?: number;
            /**
                * <p>Specifies the IDs of one more destinations for one or more archived redo logs. These IDs
                *          are the values of the <code>dest_id</code> column in the <code>v$archived_log</code> view.
                *          Use this setting with the <code>archivedLogDestId</code> extra connection attribute in a
                *          primary-to-single setup or a primary-to-multiple-standby setup. </p>
                *          <p>This setting is useful in a switchover when you use an Oracle Data Guard database as a
                *          source. In this case, DMS needs information about what destination to get archive redo
                *          logs from to read changes. DMS needs this because after the switchover the previous
                *          primary is a standby instance. For example, in a primary-to-single standby setup you might
                *          apply the following settings. </p>
                *          <p>
                *             <code>archivedLogDestId=1; ExtraArchivedLogDestIds=[2]</code>
                *          </p>
                *          <p>In a primary-to-multiple-standby setup, you might apply the following settings.</p>
                *          <p>
                *             <code>archivedLogDestId=1; ExtraArchivedLogDestIds=[2,3,4]</code>
                *          </p>
                *          <p>Although DMS supports the use of the Oracle <code>RESETLOGS</code> option to open the
                *          database, never use <code>RESETLOGS</code> unless it's necessary. For more information
                *          about <code>RESETLOGS</code>, see <a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/bradv/rman-data-repair-concepts.html#GUID-1805CCF7-4AF2-482D-B65A-998192F89C2B"> RMAN Data Repair Concepts</a> in the <i>Oracle Database Backup and Recovery
                *             User's Guide</i>.</p>
                */
            ExtraArchivedLogDestIds?: number[];
            /**
                * <p>Set this attribute to <code>true</code> to enable replication of Oracle
                *          tables containing columns that are nested tables or defined
                *          types.</p>
                */
            AllowSelectNestedTables?: boolean;
            /**
                * <p>Set this attribute to change the number of threads that DMS configures to perform a
                *          change data capture (CDC) load using Oracle Automatic Storage Management (ASM). You can
                *          specify an integer value between 2 (the default) and 8 (the maximum). Use this attribute
                *          together with the <code>readAheadBlocks</code> attribute.</p>
                */
            ParallelAsmReadThreads?: number;
            /**
                * <p>Set this attribute to change the number of read-ahead blocks that DMS configures to
                *          perform a change data capture (CDC) load using Oracle Automatic Storage Management (ASM).
                *          You can specify an integer value between 1000 (the default) and 200,000 (the
                *          maximum).</p>
                */
            ReadAheadBlocks?: number;
            /**
                * <p>Set this attribute to <code>false</code> in order to use the Binary Reader
                *          to capture change data for an Amazon RDS for Oracle as the
                *          source. This tells the DMS instance to not access redo logs
                *          through any specified path prefix replacement using direct
                *          file access.</p>
                */
            AccessAlternateDirectly?: boolean;
            /**
                * <p>Set this attribute to <code>true</code> in order to use the Binary Reader
                *          to capture change data for an Amazon RDS for Oracle as
                *          the source. This tells the DMS instance to use any specified
                *          prefix replacement to access all online redo logs.</p>
                */
            UseAlternateFolderForOnline?: boolean;
            /**
                * <p>Set this string attribute to the required value in order to use
                *          the Binary Reader to capture change data for an Amazon
                *          RDS for Oracle as the source. This value specifies the
                *          default Oracle root used to access the redo logs.</p>
                */
            OraclePathPrefix?: string;
            /**
                * <p>Set this string attribute to the required value in order to use
                *          the Binary Reader to capture change data for an Amazon
                *          RDS for Oracle as the source. This value specifies the path
                *          prefix used to replace the default Oracle root to access the
                *          redo logs.</p>
                */
            UsePathPrefix?: string;
            /**
                * <p>Set this attribute to true in order to use the Binary Reader
                *          to capture change data for an Amazon RDS for Oracle as the
                *          source. This setting tells DMS instance to replace the default
                *          Oracle root with the specified <code>usePathPrefix</code> setting to
                *          access the redo logs.</p>
                */
            ReplacePathPrefix?: boolean;
            /**
                * <p>Set this attribute to enable homogenous tablespace
                *          replication and create existing tables or indexes under the
                *          same tablespace on the target.</p>
                */
            EnableHomogenousTablespace?: boolean;
            /**
                * <p>When set to <code>true</code>, this attribute helps to increase the
                *          commit rate on the Oracle target database by writing
                *          directly to tables and not writing a trail to database logs.</p>
                */
            DirectPathNoLog?: boolean;
            /**
                * <p>When this field is set to <code>Y</code>, DMS only accesses the
                *          archived redo logs. If the archived redo logs are stored on
                *          Oracle ASM only, the DMS user account needs to be
                *          granted ASM privileges.</p>
                */
            ArchivedLogsOnly?: boolean;
            /**
                * <p>For an Oracle source endpoint, your Oracle Automatic Storage Management (ASM) password.
                *          You can set this value from the <code>
                *                <i>asm_user_password</i>
                *             </code> value.
                *          You set this value as part of the comma-separated value that you set to the
                *             <code>Password</code> request parameter when you create the endpoint to access
                *          transaction logs using Binary Reader. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.CDC.Configuration">Configuration for change data capture (CDC) on an Oracle source
                *             database</a>.</p>
                */
            AsmPassword?: string;
            /**
                * <p>For an Oracle source endpoint, your ASM server address. You can set this value from the
                *             <code>asm_server</code> value. You set <code>asm_server</code> as part of the extra
                *          connection attribute string to access an Oracle server with Binary Reader that uses ASM.
                *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.CDC.Configuration">Configuration for change data capture (CDC) on an Oracle source
                *             database</a>.</p>
                */
            AsmServer?: string;
            /**
                * <p>For an Oracle source endpoint, your ASM user name. You can set this value from the
                *             <code>asm_user</code> value. You set <code>asm_user</code> as part of the extra
                *          connection attribute string to access an Oracle server with Binary Reader that uses ASM.
                *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.CDC.Configuration">Configuration for change data capture (CDC) on an Oracle source
                *             database</a>.</p>
                */
            AsmUser?: string;
            /**
                * <p>Specifies whether the length of a character column is in
                *          bytes or in characters. To indicate that the character column
                *          length is in characters, set this attribute to <code>CHAR</code>. Otherwise,
                *          the character column length is in bytes.</p>
                *          <p>Example: <code>charLengthSemantics=CHAR;</code>
                *          </p>
                */
            CharLengthSemantics?: CharLengthSemantics | string;
            /**
                * <p>Database name for the endpoint.</p>
                */
            DatabaseName?: string;
            /**
                * <p>When set to <code>true</code>, this attribute specifies a parallel load
                *          when <code>useDirectPathFullLoad</code> is set to <code>Y</code>. This attribute
                *          also only applies when you use the DMS parallel load
                *          feature.  Note that the target table cannot have any constraints or indexes.</p>
                */
            DirectPathParallelLoad?: boolean;
            /**
                * <p>When set to <code>true</code>, this attribute causes a task to fail if the
                *          actual size of an LOB column is greater than the specified
                *          <code>LobMaxSize</code>.</p>
                *          <p>If a task is set to limited LOB mode and this option is set to
                *          <code>true</code>, the task fails instead of truncating the LOB data.</p>
                */
            FailTasksOnLobTruncation?: boolean;
            /**
                * <p>Specifies the number scale. You can select a scale up to 38,
                *          or you can select FLOAT. By default, the NUMBER data type
                *          is converted to precision 38, scale 10.</p>
                *          <p>Example: <code>numberDataTypeScale=12</code>
                *          </p>
                */
            NumberDatatypeScale?: number;
            /**
                * <p>Endpoint connection password.</p>
                */
            Password?: string;
            /**
                * <p>Endpoint TCP port.</p>
                */
            Port?: number;
            /**
                * <p>When set to <code>true</code>, this attribute supports tablespace
                *          replication.</p>
                */
            ReadTableSpaceName?: boolean;
            /**
                * <p>Specifies the number of seconds that the system waits
                *          before resending a query.</p>
                *          <p>Example: <code>retryInterval=6;</code>
                *          </p>
                */
            RetryInterval?: number;
            /**
                * <p>For an Oracle source endpoint, the transparent data encryption (TDE) password required
                *          by AWM DMS to access Oracle redo logs encrypted by TDE using Binary Reader. It is also the
                *                <code>
                *                <i>TDE_Password</i>
                *             </code> part of the comma-separated value you
                *          set to the <code>Password</code> request parameter when you create the endpoint. The
                *             <code>SecurityDbEncryptian</code> setting is related to this
                *             <code>SecurityDbEncryptionName</code> setting. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.Encryption"> Supported encryption methods for using Oracle as a source for DMS
                *             </a> in the <i>Database Migration Service User Guide</i>. </p>
                */
            SecurityDbEncryption?: string;
            /**
                * <p>For an Oracle source endpoint, the name of a key used for the transparent data
                *          encryption (TDE) of the columns and tablespaces in an Oracle source database that is
                *          encrypted using TDE. The key value is the value of the <code>SecurityDbEncryption</code>
                *          setting. For more information on setting the key name value of
                *             <code>SecurityDbEncryptionName</code>, see the information and example for setting the
                *             <code>securityDbEncryptionName</code> extra connection attribute in <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.Encryption"> Supported encryption methods for using Oracle as a source for DMS
                *             </a> in the <i>Database Migration Service User
                *          Guide</i>.</p>
                */
            SecurityDbEncryptionName?: string;
            /**
                * <p>Fully qualified domain name of the endpoint.</p>
                */
            ServerName?: string;
            /**
                * <p>Use this attribute to convert <code>SDO_GEOMETRY</code> to
                *          <code>GEOJSON</code> format. By default, DMS calls the
                *          <code>SDO2GEOJSON</code> custom function if present and accessible.
                *          Or you can create your own custom function that mimics the operation of
                *          <code>SDOGEOJSON</code> and set
                *          <code>SpatialDataOptionToGeoJsonFunctionName</code> to call it instead. </p>
                */
            SpatialDataOptionToGeoJsonFunctionName?: string;
            /**
                * <p>Use this attribute to specify a time in minutes for the delay in standby sync. If the
                *          source is an Oracle Active Data Guard standby database, use this attribute to specify the
                *          time lag between primary and standby databases.</p>
                *          <p>In DMS, you can create an Oracle CDC task that uses an Active Data Guard standby
                *          instance as a source for replicating ongoing changes. Doing this eliminates the need to connect
                *          to an active database that might be in production.</p>
                */
            StandbyDelayTime?: number;
            /**
                * <p>Endpoint connection user name.</p>
                */
            Username?: string;
            /**
                * <p>Set this attribute to Y to capture change data using the Binary Reader utility. Set
                *             <code>UseLogminerReader</code> to N to set this attribute to Y. To use Binary Reader
                *          with Amazon RDS for Oracle as the source, you set additional attributes. For more information
                *          about using this setting with Oracle Automatic Storage Management (ASM), see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.CDC"> Using Oracle LogMiner or DMS Binary Reader for
                *          CDC</a>.</p>
                */
            UseBFile?: boolean;
            /**
                * <p>Set this attribute to Y to have DMS use a direct path full load.
                *          Specify this value to use the direct path protocol in the Oracle Call Interface (OCI).
                *          By using this OCI protocol, you can bulk-load Oracle target tables during a full load.</p>
                */
            UseDirectPathFullLoad?: boolean;
            /**
                * <p>Set this attribute to Y to capture change data using the Oracle LogMiner utility (the
                *          default). Set this attribute to N if you want to access the redo logs as a binary file.
                *          When you set <code>UseLogminerReader</code> to N, also set <code>UseBfile</code> to Y. For
                *          more information on this setting and using Oracle ASM, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.CDC"> Using Oracle LogMiner or DMS Binary Reader for CDC</a> in
                *          the <i>DMS User Guide</i>.</p>
                */
            UseLogminerReader?: boolean;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager
                *           secret that allows access to the Oracle endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the Oracle endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
            /**
                * <p>Required only if your Oracle endpoint uses Advanced Storage Manager (ASM). The full ARN
                *          of the IAM role that specifies DMS as the trusted entity and grants the required
                *          permissions to access the <code>SecretsManagerOracleAsmSecret</code>. This
                *             <code>SecretsManagerOracleAsmSecret</code> has the secret value that allows access to
                *          the Oracle ASM of the endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerOracleAsmSecretId</code>. Or you can
                *             specify clear-text values for <code>AsmUserName</code>, <code>AsmPassword</code>, and
                *                <code>AsmServerName</code>. You can't specify both. For more information on
                *             creating this <code>SecretsManagerOracleAsmSecret</code> and the
                *                <code>SecretsManagerOracleAsmAccessRoleArn</code> and
                *                <code>SecretsManagerOracleAsmSecretId</code> required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerOracleAsmAccessRoleArn?: string;
            /**
                * <p>Required only if your Oracle endpoint uses Advanced Storage Manager (ASM). The full ARN, partial ARN, or friendly name of the <code>SecretsManagerOracleAsmSecret</code>
                *          that contains the Oracle ASM connection details for the Oracle endpoint.</p>
                */
            SecretsManagerOracleAsmSecretId?: string;
            /**
                * <p>Use the <code>TrimSpaceInChar</code> source endpoint setting to trim data
                *          on CHAR and NCHAR data types during migration. The default value is <code>true</code>.</p>
                */
            TrimSpaceInChar?: boolean;
    }
    export namespace OracleSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OracleSettings) => any;
    }
    export enum PluginNameValue {
            NO_PREFERENCE = "no-preference",
            PGLOGICAL = "pglogical",
            TEST_DECODING = "test-decoding"
    }
    /**
        * <p>Provides information that defines a PostgreSQL endpoint.</p>
        */
    export interface PostgreSQLSettings {
            /**
                * <p>For use with change data capture (CDC) only, this attribute
                *          has DMS bypass foreign keys and user triggers to
                *          reduce the time it takes to bulk load data.</p>
                *          <p>Example: <code>afterConnectScript=SET
                *          session_replication_role='replica'</code>
                *          </p>
                */
            AfterConnectScript?: string;
            /**
                * <p>To capture DDL events, DMS creates various artifacts in
                *          the PostgreSQL database when the task starts. You can later
                *          remove these artifacts.</p>
                *          <p>If this value is set to <code>N</code>, you don't have to create tables or
                *          triggers on the source database.</p>
                */
            CaptureDdls?: boolean;
            /**
                * <p>Specifies the maximum size (in KB) of any .csv file used to
                *          transfer data to PostgreSQL.</p>
                *          <p>Example: <code>maxFileSize=512</code>
                *          </p>
                */
            MaxFileSize?: number;
            /**
                * <p>Database name for the endpoint.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The schema in which the operational DDL database artifacts
                *          are created.</p>
                *          <p>Example: <code>ddlArtifactsSchema=xyzddlschema;</code>
                *          </p>
                */
            DdlArtifactsSchema?: string;
            /**
                * <p>Sets the client statement timeout for the PostgreSQL
                *          instance, in seconds. The default value is 60 seconds.</p>
                *          <p>Example: <code>executeTimeout=100;</code>
                *          </p>
                */
            ExecuteTimeout?: number;
            /**
                * <p>When set to <code>true</code>, this value causes a task to fail if the
                *          actual size of a LOB column is greater than the specified
                *          <code>LobMaxSize</code>.</p>
                *          <p>If task is set to Limited LOB mode and this option is set to
                *          true, the task fails instead of truncating the LOB data.</p>
                */
            FailTasksOnLobTruncation?: boolean;
            /**
                * <p>The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this,
                *          it prevents idle logical replication slots from holding onto old WAL logs, which can result in
                *          storage full situations on the source. This heartbeat keeps <code>restart_lsn</code> moving
                *          and prevents storage full scenarios.</p>
                */
            HeartbeatEnable?: boolean;
            /**
                * <p>Sets the schema in which the heartbeat artifacts are created.</p>
                */
            HeartbeatSchema?: string;
            /**
                * <p>Sets the WAL heartbeat frequency (in minutes).</p>
                */
            HeartbeatFrequency?: number;
            /**
                * <p>Endpoint connection password.</p>
                */
            Password?: string;
            /**
                * <p>Endpoint TCP port. The default is 5432.</p>
                */
            Port?: number;
            /**
                * <p>Fully qualified domain name of the endpoint.</p>
                */
            ServerName?: string;
            /**
                * <p>Endpoint connection user name.</p>
                */
            Username?: string;
            /**
                * <p>Sets the name of a previously created logical replication slot
                *          for a change data capture (CDC) load of the PostgreSQL source instance. </p>
                *          <p>When used with the <code>CdcStartPosition</code>
                *          request parameter for the DMS API , this attribute also makes it possible to use native CDC
                *          start points. DMS verifies that the specified logical
                *          replication slot exists before starting the CDC load task. It
                *          also verifies that the task was created with a valid setting of
                *          <code>CdcStartPosition</code>. If the specified slot
                *          doesn't exist or the task doesn't have a valid
                *          <code>CdcStartPosition</code> setting, DMS raises an
                *          error.</p>
                *          <p>For more information about setting the <code>CdcStartPosition</code> request parameter,
                *          see <a href="dms/latest/userguide/CHAP_Task.CDC.html#CHAP_Task.CDC.StartPoint.Native">Determining a CDC native start point</a> in the <i>Database Migration Service User
                *             Guide</i>. For more information about using <code>CdcStartPosition</code>, see
                *             <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_CreateReplicationTask.html">CreateReplicationTask</a>, <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTask.html">StartReplicationTask</a>, and <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_ModifyReplicationTask.html">ModifyReplicationTask</a>.</p>
                */
            SlotName?: string;
            /**
                * <p>Specifies the plugin to use to create a replication slot.</p>
                */
            PluginName?: PluginNameValue | string;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager
                *           secret that allows access to the PostgreSQL endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the PostgreSQL endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
            /**
                * <p>Use the <code>TrimSpaceInChar</code> source endpoint setting to trim data
                *          on CHAR and NCHAR data types during migration. The default value is <code>true</code>.</p>
                */
            TrimSpaceInChar?: boolean;
    }
    export namespace PostgreSQLSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PostgreSQLSettings) => any;
    }
    export enum RedisAuthTypeValue {
            AUTH_ROLE = "auth-role",
            AUTH_TOKEN = "auth-token",
            NONE = "none"
    }
    export enum SslSecurityProtocolValue {
            PLAINTEXT = "plaintext",
            SSL_ENCRYPTION = "ssl-encryption"
    }
    /**
        * <p>Provides information that defines a Redis target endpoint.</p>
        */
    export interface RedisSettings {
            /**
                * <p>Fully qualified domain name of the endpoint.</p>
                */
            ServerName: string | undefined;
            /**
                * <p>Transmission Control Protocol (TCP) port for the endpoint.</p>
                */
            Port: number | undefined;
            /**
                * <p>The connection to a Redis target endpoint using Transport Layer Security (TLS). Valid
                *          values include <code>plaintext</code> and <code>ssl-encryption</code>. The default is
                *             <code>ssl-encryption</code>. The <code>ssl-encryption</code> option makes an encrypted
                *          connection. Optionally, you can identify an Amazon Resource Name (ARN) for an SSL certificate authority (CA)
                *           using the <code>SslCaCertificateArn </code>setting. If an ARN isn't given for a CA, DMS
                *          uses the Amazon root CA.</p>
                *          <p>The <code>plaintext</code> option doesn't provide Transport Layer Security (TLS)
                *          encryption for traffic between endpoint and database.</p>
                */
            SslSecurityProtocol?: SslSecurityProtocolValue | string;
            /**
                * <p>The type of authentication to perform when connecting to a Redis target. Options include
                *             <code>none</code>, <code>auth-token</code>, and <code>auth-role</code>. The
                *             <code>auth-token</code> option requires an <code>AuthPassword</code> value to be provided. The
                *          <code>auth-role</code> option requires <code>AuthUserName</code> and <code>AuthPassword</code> values
                *          to be provided.</p>
                */
            AuthType?: RedisAuthTypeValue | string;
            /**
                * <p>The user name provided with the <code>auth-role</code> option of the
                *          <code>AuthType</code> setting for a Redis target endpoint.</p>
                */
            AuthUserName?: string;
            /**
                * <p>The password provided with the <code>auth-role</code> and
                *          <code>auth-token</code> options of the <code>AuthType</code> setting for a Redis
                *          target endpoint.</p>
                */
            AuthPassword?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to
                *          connect to your Redis target endpoint.</p>
                */
            SslCaCertificateArn?: string;
    }
    export namespace RedisSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedisSettings) => any;
    }
    export enum EncryptionModeValue {
            SSE_KMS = "sse-kms",
            SSE_S3 = "sse-s3"
    }
    /**
        * <p>Provides information that defines an Amazon Redshift endpoint.</p>
        */
    export interface RedshiftSettings {
            /**
                * <p>A value that indicates to allow any date format, including invalid formats such as
                *          00/00/00 00:00:00, to be loaded without generating an error. You can choose
                *             <code>true</code> or <code>false</code> (the default).</p>
                *          <p>This parameter applies only to TIMESTAMP and DATE columns. Always use ACCEPTANYDATE with
                *          the DATEFORMAT parameter. If the date format for the data doesn't match the DATEFORMAT
                *          specification, Amazon Redshift inserts a NULL value into that field. </p>
                */
            AcceptAnyDate?: boolean;
            /**
                * <p>Code to run after connecting. This parameter should contain the code itself, not the
                *          name of a file containing the code.</p>
                */
            AfterConnectScript?: string;
            /**
                * <p>An S3 folder where the comma-separated-value (.csv) files are stored before being
                *          uploaded to the target Redshift cluster. </p>
                *          <p>For full load mode, DMS converts source records into .csv files and loads them to
                *          the <i>BucketFolder/TableID</i> path. DMS uses the Redshift
                *             <code>COPY</code> command to upload the .csv files to the target table. The files are
                *          deleted once the <code>COPY</code> operation has finished. For more information, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_COPY.html">COPY</a> in the
                *             <i>Amazon Redshift Database Developer Guide</i>.</p>
                *          <p>For change-data-capture (CDC) mode, DMS creates a <i>NetChanges</i> table,
                *          and loads the .csv files to this <i>BucketFolder/NetChangesTableID</i> path.</p>
                */
            BucketFolder?: string;
            /**
                * <p>The name of the intermediate S3 bucket used to store .csv files before uploading data to Redshift.</p>
                */
            BucketName?: string;
            /**
                * <p>If Amazon Redshift is configured to support case sensitive schema names, set
                *             <code>CaseSensitiveNames</code> to <code>true</code>. The default is
                *          <code>false</code>.</p>
                */
            CaseSensitiveNames?: boolean;
            /**
                * <p>If you set <code>CompUpdate</code> to <code>true</code> Amazon Redshift applies
                *          automatic compression if the table is empty. This applies even if the table columns already
                *          have encodings other than <code>RAW</code>. If you set <code>CompUpdate</code> to
                *             <code>false</code>, automatic compression is disabled and existing column encodings
                *          aren't changed. The default is <code>true</code>.</p>
                */
            CompUpdate?: boolean;
            /**
                * <p>A value that sets the amount of time to wait (in milliseconds) before timing out,
                *          beginning from when you initially establish a connection.</p>
                */
            ConnectionTimeout?: number;
            /**
                * <p>The name of the Amazon Redshift data warehouse (service) that you are working
                *          with.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The date format that you are using. Valid values are <code>auto</code> (case-sensitive),
                *          your date format string enclosed in quotes, or NULL. If this parameter is left unset
                *          (NULL), it defaults to a format of 'YYYY-MM-DD'. Using <code>auto</code> recognizes most
                *          strings, even some that aren't supported when you use a date format string. </p>
                *          <p>If your date and time values use formats different from each other, set this to
                *          <code>auto</code>. </p>
                */
            DateFormat?: string;
            /**
                * <p>A value that specifies whether DMS should migrate empty CHAR and VARCHAR fields as
                *          NULL. A value of <code>true</code> sets empty CHAR and VARCHAR fields to null. The default
                *          is <code>false</code>.</p>
                */
            EmptyAsNull?: boolean;
            /**
                * <p>The type of server-side encryption that you want to use for your data. This encryption
                *          type is part of the endpoint settings or the extra connections attributes for Amazon S3.
                *          You can choose either <code>SSE_S3</code> (the default) or <code>SSE_KMS</code>. </p>
                *          <note>
                *             <p>For the <code>ModifyEndpoint</code> operation, you can change the existing value of the
                *                <code>EncryptionMode</code> parameter from <code>SSE_KMS</code> to
                *                <code>SSE_S3</code>. But you can’t change the existing value from <code>SSE_S3</code>
                *             to <code>SSE_KMS</code>.</p>
                *          </note>
                *          <p>To use <code>SSE_S3</code>, create an Identity and Access Management (IAM) role with
                *          a policy that allows <code>"arn:aws:s3:::*"</code> to use the following actions:
                *             <code>"s3:PutObject", "s3:ListBucket"</code>
                *          </p>
                */
            EncryptionMode?: EncryptionModeValue | string;
            /**
                * <p>This setting is only valid for a full-load migration task. Set <code>ExplicitIds</code>
                *          to <code>true</code> to have tables with <code>IDENTITY</code> columns override their
                *          auto-generated values with explicit values loaded from the source data files used to
                *          populate the tables. The default is <code>false</code>.</p>
                */
            ExplicitIds?: boolean;
            /**
                * <p>The number of threads used to upload a single file. This parameter accepts a value from
                *          1 through 64. It defaults to 10.</p>
                *          <p>The number of parallel streams used to upload a single .csv file to an S3 bucket using
                *          S3 Multipart Upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart upload
                *             overview</a>. </p>
                *          <p>
                *             <code>FileTransferUploadStreams</code> accepts a value from 1 through 64. It
                *          defaults to 10.</p>
                */
            FileTransferUploadStreams?: number;
            /**
                * <p>The amount of time to wait (in milliseconds) before timing out of operations performed
                *             by DMS on a Redshift cluster, such as Redshift COPY, INSERT, DELETE, and UPDATE.</p>
                */
            LoadTimeout?: number;
            /**
                * <p>The maximum size (in KB) of any .csv file used to load data on an S3 bucket and transfer
                *             data to Amazon Redshift. It defaults to 1048576KB (1 GB).</p>
                */
            MaxFileSize?: number;
            /**
                * <p>The password for the user named in the <code>username</code> property.</p>
                */
            Password?: string;
            /**
                * <p>The port number for Amazon Redshift. The default value is 5439.</p>
                */
            Port?: number;
            /**
                * <p>A value that specifies to remove surrounding quotation marks from strings in the
                *          incoming data. All characters within the quotation marks, including delimiters, are
                *          retained. Choose <code>true</code> to remove quotation marks. The default is
                *             <code>false</code>.</p>
                */
            RemoveQuotes?: boolean;
            /**
                * <p>A list of characters that you want to replace. Use with
                *          <code>ReplaceChars</code>.</p>
                */
            ReplaceInvalidChars?: string;
            /**
                * <p>A value that specifies to replaces the invalid characters specified in
                *          <code>ReplaceInvalidChars</code>, substituting the specified characters instead. The
                *          default is <code>"?"</code>.</p>
                */
            ReplaceChars?: string;
            /**
                * <p>The name of the Amazon Redshift cluster you are using.</p>
                */
            ServerName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that has access to the Amazon Redshift
                *          service. The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>The KMS key ID. If you are using <code>SSE_KMS</code> for the <code>EncryptionMode</code>,
                *          provide this key ID. The key that you use needs an attached policy that enables IAM user
                *          permissions and allows use of the key.</p>
                */
            ServerSideEncryptionKmsKeyId?: string;
            /**
                * <p>The time format that you want to use. Valid values are <code>auto</code>
                *          (case-sensitive), <code>'timeformat_string'</code>, <code>'epochsecs'</code>, or
                *          <code>'epochmillisecs'</code>. It defaults to 10. Using <code>auto</code> recognizes
                *          most strings, even some that aren't supported when you use a time format string. </p>
                *          <p>If your date and time values use formats different from each other, set this parameter
                *          to <code>auto</code>. </p>
                */
            TimeFormat?: string;
            /**
                * <p>A value that specifies to remove the trailing white space characters from a VARCHAR
                *          string. This parameter applies only to columns with a VARCHAR data type. Choose
                *             <code>true</code> to remove unneeded white space. The default is
                *          <code>false</code>.</p>
                */
            TrimBlanks?: boolean;
            /**
                * <p>A value that specifies to truncate data in columns to the appropriate number of
                *          characters, so that the data fits in the column. This parameter applies only to columns
                *          with a VARCHAR or CHAR data type, and rows with a size of 4 MB or less. Choose
                *             <code>true</code> to truncate data. The default is <code>false</code>.</p>
                */
            TruncateColumns?: boolean;
            /**
                * <p>An Amazon Redshift user name for a registered user.</p>
                */
            Username?: string;
            /**
                * <p>The size (in KB) of the in-memory file write buffer used when generating .csv files
                *          on the local disk at the DMS replication instance. The default value is 1000
                *          (buffer size is 1000KB).</p>
                */
            WriteBufferSize?: number;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager secret that allows access to the Amazon Redshift endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the Amazon Redshift endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
    }
    export namespace RedshiftSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedshiftSettings) => any;
    }
    export enum CannedAclForObjectsValue {
            AUTHENTICATED_READ = "authenticated-read",
            AWS_EXEC_READ = "aws-exec-read",
            BUCKET_OWNER_FULL_CONTROL = "bucket-owner-full-control",
            BUCKET_OWNER_READ = "bucket-owner-read",
            NONE = "none",
            PRIVATE = "private",
            PUBLIC_READ = "public-read",
            PUBLIC_READ_WRITE = "public-read-write"
    }
    export enum CompressionTypeValue {
            GZIP = "gzip",
            NONE = "none"
    }
    export enum DataFormatValue {
            CSV = "csv",
            PARQUET = "parquet"
    }
    export enum DatePartitionDelimiterValue {
            DASH = "DASH",
            NONE = "NONE",
            SLASH = "SLASH",
            UNDERSCORE = "UNDERSCORE"
    }
    export enum DatePartitionSequenceValue {
            DDMMYYYY = "DDMMYYYY",
            MMYYYYDD = "MMYYYYDD",
            YYYYMM = "YYYYMM",
            YYYYMMDD = "YYYYMMDD",
            YYYYMMDDHH = "YYYYMMDDHH"
    }
    export enum EncodingTypeValue {
            PLAIN = "plain",
            PLAIN_DICTIONARY = "plain-dictionary",
            RLE_DICTIONARY = "rle-dictionary"
    }
    export enum ParquetVersionValue {
            PARQUET_1_0 = "parquet-1-0",
            PARQUET_2_0 = "parquet-2-0"
    }
    /**
        * <p>Settings for exporting data to Amazon S3. </p>
        */
    export interface S3Settings {
            /**
                * <p> The Amazon Resource Name (ARN) used by the service to access the IAM role.
                *          The role must allow the <code>iam:PassRole</code> action. It is a required
                *          parameter that enables DMS to write and read objects from an S3 bucket.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p> Specifies how tables are defined in the S3 source files only. </p>
                */
            ExternalTableDefinition?: string;
            /**
                * <p> The delimiter used to separate rows in the .csv file for both source and target. The default is a carriage
                *          return (<code>\n</code>). </p>
                */
            CsvRowDelimiter?: string;
            /**
                * <p> The delimiter used to separate columns in the .csv file for both source and target. The default is a comma.
                *       </p>
                */
            CsvDelimiter?: string;
            /**
                * <p> An optional parameter to set a folder name in the S3 bucket. If provided, tables are
                *          created in the path
                *                <code>
                *                <i>bucketFolder</i>/<i>schema_name</i>/<i>table_name</i>/</code>.
                *          If this parameter isn't specified, then the path used is
                *                <code>
                *                <i>schema_name</i>/<i>table_name</i>/</code>. </p>
                */
            BucketFolder?: string;
            /**
                * <p> The name of the S3 bucket. </p>
                */
            BucketName?: string;
            /**
                * <p>An optional parameter to use GZIP to compress the target files. Set to GZIP to compress
                *          the target files. Either set this parameter to NONE (the default) or don't use it to leave the files uncompressed.
                *          This parameter applies to both .csv and .parquet file formats. </p>
                */
            CompressionType?: CompressionTypeValue | string;
            /**
                * <p>The type of server-side encryption that you want to use for your data. This encryption
                *          type is part of the endpoint settings or the extra connections attributes for Amazon S3.
                *          You can choose either <code>SSE_S3</code> (the default) or <code>SSE_KMS</code>. </p>
                *          <note>
                *             <p>For the <code>ModifyEndpoint</code> operation, you can change the existing value of
                *             the <code>EncryptionMode</code> parameter from <code>SSE_KMS</code> to
                *                <code>SSE_S3</code>. But you can’t change the existing value from <code>SSE_S3</code>
                *             to <code>SSE_KMS</code>.</p>
                *          </note>
                *          <p>To use <code>SSE_S3</code>, you need an Identity and Access Management (IAM) role
                *          with permission to allow <code>"arn:aws:s3:::dms-*"</code> to use the following
                *          actions:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>s3:CreateBucket</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:ListBucket</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:DeleteBucket</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:GetBucketLocation</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:GetObject</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:PutObject</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:DeleteObject</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:GetObjectVersion</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:GetBucketPolicy</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:PutBucketPolicy</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>s3:DeleteBucketPolicy</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            EncryptionMode?: EncryptionModeValue | string;
            /**
                * <p>If you are using <code>SSE_KMS</code> for the <code>EncryptionMode</code>, provide the
                *          KMS key ID. The key that you use needs an attached policy that enables Identity and Access Management
                *          (IAM) user permissions and allows use of the key.</p>
                *          <p>Here is a CLI example: <code>aws dms create-endpoint --endpoint-identifier
                *                <i>value</i> --endpoint-type target --engine-name s3 --s3-settings
                *                ServiceAccessRoleArn=<i>value</i>,BucketFolder=<i>value</i>,BucketName=<i>value</i>,EncryptionMode=SSE_KMS,ServerSideEncryptionKmsKeyId=<i>value</i>
                *             </code>
                *          </p>
                */
            ServerSideEncryptionKmsKeyId?: string;
            /**
                * <p>The format of the data that you want to use for output. You can choose one of the
                *          following: </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>csv</code> : This is a row-based file format with comma-separated values
                *                (.csv). </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>parquet</code> : Apache Parquet (.parquet) is a columnar storage file format
                *                that features efficient compression and provides faster query response. </p>
                *             </li>
                *          </ul>
                */
            DataFormat?: DataFormatValue | string;
            /**
                * <p>The type of encoding you are using: </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>RLE_DICTIONARY</code> uses a combination of bit-packing and run-length
                *                encoding to store repeated values more efficiently. This is the default.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PLAIN</code> doesn't use encoding at all. Values are stored as they
                *                are.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PLAIN_DICTIONARY</code> builds a dictionary of the values encountered in a
                *                given column. The dictionary is stored in a dictionary page for each column
                *                chunk.</p>
                *             </li>
                *          </ul>
                */
            EncodingType?: EncodingTypeValue | string;
            /**
                * <p>The maximum size of an encoded dictionary page of a column. If the dictionary page
                *          exceeds this, this column is stored using an encoding type of <code>PLAIN</code>. This
                *          parameter defaults to 1024 * 1024 bytes (1 MiB), the maximum size of a dictionary page
                *          before it reverts to <code>PLAIN</code> encoding. This size is used for
                *            .parquet file format only. </p>
                */
            DictPageSizeLimit?: number;
            /**
                * <p>The number of rows in a row group. A smaller row group size provides faster reads. But
                *          as the number of row groups grows, the slower writes become. This parameter defaults to
                *          10,000 rows. This number is used for .parquet file format only. </p>
                *          <p>If you choose a value larger than the maximum, <code>RowGroupLength</code> is set to the
                *          max row group length in bytes (64 * 1024 * 1024). </p>
                */
            RowGroupLength?: number;
            /**
                * <p>The size of one data page in bytes. This parameter defaults to 1024 * 1024 bytes (1 MiB).
                *          This number is used for .parquet file format only. </p>
                */
            DataPageSize?: number;
            /**
                * <p>The version of the Apache Parquet format that you want to use: <code>parquet_1_0</code>
                *          (the default) or <code>parquet_2_0</code>.</p>
                */
            ParquetVersion?: ParquetVersionValue | string;
            /**
                * <p>A value that enables statistics for Parquet pages and row groups. Choose
                *             <code>true</code> to enable statistics, <code>false</code> to disable. Statistics
                *          include <code>NULL</code>, <code>DISTINCT</code>, <code>MAX</code>, and <code>MIN</code>
                *          values. This parameter defaults to <code>true</code>. This value is used for
                *             .parquet file format only.</p>
                */
            EnableStatistics?: boolean;
            /**
                * <p>A value that enables a full load to write INSERT operations to the comma-separated value
                *          (.csv) output files only to indicate how the rows were added to the source database.</p>
                *          <note>
                *             <p>DMS supports the <code>IncludeOpForFullLoad</code> parameter in versions 3.1.4 and
                *             later.</p>
                *          </note>
                *          <p>For full load, records can only be inserted. By default (the <code>false</code>
                *          setting), no information is recorded in these output files for a full load to indicate that
                *          the rows were inserted at the source database. If <code>IncludeOpForFullLoad</code> is set
                *          to <code>true</code> or <code>y</code>, the INSERT is recorded as an I annotation in the
                *          first field of the .csv file. This allows the format of your target records from a full
                *          load to be consistent with the target records from a CDC load.</p>
                *          <note>
                *             <p>This setting works together with the <code>CdcInsertsOnly</code> and the
                *                <code>CdcInsertsAndUpdates</code> parameters for output to .csv files only. For more
                *             information about how these settings work together, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.Configuring.InsertOps">Indicating Source DB Operations in Migrated S3 Data</a> in the <i>Database Migration Service
                *                    User Guide.</i>.</p>
                *          </note>
                */
            IncludeOpForFullLoad?: boolean;
            /**
                * <p>A value that enables a change data capture (CDC) load to write only INSERT operations to
                *          .csv or columnar storage (.parquet) output files. By default (the
                *             <code>false</code> setting), the first field in a .csv or .parquet record contains the
                *          letter I (INSERT), U (UPDATE), or D (DELETE). These values indicate whether the row was
                *          inserted, updated, or deleted at the source database for a CDC load to the target.</p>
                *          <p>If <code>CdcInsertsOnly</code> is set to <code>true</code> or <code>y</code>, only
                *          INSERTs from the source database are migrated to the .csv or .parquet file. For .csv format
                *          only, how these INSERTs are recorded depends on the value of
                *             <code>IncludeOpForFullLoad</code>. If <code>IncludeOpForFullLoad</code> is set to
                *             <code>true</code>, the first field of every CDC record is set to I to indicate the
                *          INSERT operation at the source. If <code>IncludeOpForFullLoad</code> is set to
                *             <code>false</code>, every CDC record is written without a first field to indicate the
                *          INSERT operation at the source. For more information about how these settings work
                *          together, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.Configuring.InsertOps">Indicating Source DB Operations in Migrated S3 Data</a> in the <i>Database Migration Service User Guide.</i>.</p>
                *
                *          <note>
                *
                *                <p>DMS supports the interaction described preceding between the
                *                <code>CdcInsertsOnly</code> and <code>IncludeOpForFullLoad</code> parameters in
                *             versions 3.1.4 and later. </p>
                *
                *                <p>
                *                <code>CdcInsertsOnly</code> and <code>CdcInsertsAndUpdates</code> can't
                *             both be set to <code>true</code> for the same endpoint. Set either
                *                <code>CdcInsertsOnly</code> or <code>CdcInsertsAndUpdates</code> to <code>true</code>
                *             for the same endpoint, but not both.</p>
                *
                *          </note>
                */
            CdcInsertsOnly?: boolean;
            /**
                * <p>A value that when nonblank causes DMS to add a column with timestamp information to
                *          the endpoint data for an Amazon S3 target.</p>
                *          <note>
                *             <p>DMS supports the <code>TimestampColumnName</code> parameter in versions 3.1.4 and later.</p>
                *          </note>
                *          <p>DMS includes an additional <code>STRING</code> column in the
                *          .csv or .parquet object files of your migrated data when you set
                *          <code>TimestampColumnName</code> to a nonblank value.</p>
                *          <p>For a full load, each row of this timestamp column contains a
                *          timestamp for when the data was transferred from the source to
                *          the target by DMS. </p>
                *          <p>For a change data capture (CDC) load, each row of the timestamp column contains the
                *          timestamp for the commit of that row in the source
                *          database.</p>
                *          <p>The string format for this timestamp column value is
                *          <code>yyyy-MM-dd HH:mm:ss.SSSSSS</code>. By default, the
                *          precision of this value is in microseconds. For a CDC load, the
                *          rounding of the precision depends on the commit timestamp
                *          supported by DMS for the source database.</p>
                *          <p>When the <code>AddColumnName</code> parameter is set to <code>true</code>, DMS also
                *          includes a name for the timestamp column that you set with
                *          <code>TimestampColumnName</code>.</p>
                */
            TimestampColumnName?: string;
            /**
                * <p>A value that specifies the precision of any <code>TIMESTAMP</code> column values that
                *          are written to an Amazon S3 object file in .parquet format.</p>
                *          <note>
                *             <p>DMS supports the <code>ParquetTimestampInMillisecond</code> parameter in versions
                *             3.1.4 and later.</p>
                *          </note>
                *          <p>When <code>ParquetTimestampInMillisecond</code> is set to <code>true</code> or
                *             <code>y</code>, DMS writes all <code>TIMESTAMP</code> columns in a .parquet
                *          formatted file with millisecond precision. Otherwise, DMS writes them with microsecond
                *          precision.</p>
                *          <p>Currently, Amazon Athena and Glue can handle only
                *          millisecond precision for <code>TIMESTAMP</code> values. Set
                *          this parameter to <code>true</code> for S3 endpoint object
                *          files that are .parquet formatted only if you plan to query or process the data with Athena or Glue.</p>
                *          <note>
                *               <p>DMS writes any <code>TIMESTAMP</code> column
                *                   values written to an S3 file in .csv format with
                *                   microsecond precision.</p>
                *
                *                <p>Setting <code>ParquetTimestampInMillisecond</code> has no effect on the string
                *             format of the timestamp column value that is inserted by setting the
                *                <code>TimestampColumnName</code> parameter.</p>
                *          </note>
                */
            ParquetTimestampInMillisecond?: boolean;
            /**
                * <p>A value that enables a change data capture (CDC) load to write INSERT and UPDATE
                *          operations to .csv or .parquet (columnar storage) output files. The default setting is
                *             <code>false</code>, but when <code>CdcInsertsAndUpdates</code> is set to
                *             <code>true</code> or <code>y</code>, only INSERTs and UPDATEs from the source database
                *          are migrated to the .csv or .parquet file. </p>
                *          <p>For .csv file format only, how these INSERTs and UPDATEs are recorded depends on the
                *          value of the <code>IncludeOpForFullLoad</code> parameter. If
                *             <code>IncludeOpForFullLoad</code> is set to <code>true</code>, the first field of every
                *          CDC record is set to either <code>I</code> or <code>U</code> to indicate INSERT and UPDATE
                *          operations at the source. But if <code>IncludeOpForFullLoad</code> is set to
                *             <code>false</code>, CDC records are written without an indication of INSERT or UPDATE
                *          operations at the source. For more information about how these settings work together, see
                *             <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.Configuring.InsertOps">Indicating Source DB Operations in Migrated S3 Data</a> in the <i>Database Migration Service User Guide.</i>.</p>
                *          <note>
                *
                *             <p>DMS supports the use of the <code>CdcInsertsAndUpdates</code> parameter in
                *             versions 3.3.1 and later.</p>
                *
                *             <p>
                *                <code>CdcInsertsOnly</code> and <code>CdcInsertsAndUpdates</code> can't
                *             both be set to <code>true</code> for the same endpoint. Set either
                *             <code>CdcInsertsOnly</code> or <code>CdcInsertsAndUpdates</code> to <code>true</code>
                *             for the same endpoint, but not both.</p>
                *
                *          </note>
                */
            CdcInsertsAndUpdates?: boolean;
            /**
                * <p>When set to <code>true</code>, this parameter partitions S3 bucket folders based on
                *          transaction commit dates. The default value is <code>false</code>. For more information
                *          about date-based folder partitioning, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.DatePartitioning">Using date-based folder partitioning</a>.</p>
                */
            DatePartitionEnabled?: boolean;
            /**
                * <p>Identifies the sequence of the date format to use during folder partitioning. The default value is
                *          <code>YYYYMMDD</code>. Use this parameter when <code>DatePartitionedEnabled</code> is set to <code>true</code>.</p>
                */
            DatePartitionSequence?: DatePartitionSequenceValue | string;
            /**
                * <p>Specifies a date separating delimiter to use during folder partitioning. The default value is
                *          <code>SLASH</code>. Use this parameter when <code>DatePartitionedEnabled</code> is set to <code>true</code>.</p>
                */
            DatePartitionDelimiter?: DatePartitionDelimiterValue | string;
            /**
                * <p>This setting applies if the S3 output files during a change data capture (CDC) load are
                *          written in .csv format. If set to <code>true</code> for columns not included in the
                *          supplemental log, DMS uses the value specified by <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_S3Settings.html#DMS-Type-S3Settings-CsvNoSupValue">
                *                <code>CsvNoSupValue</code>
                *             </a>. If not set or set to
                *             <code>false</code>, DMS uses the null value for these columns.</p>
                *          <note>
                *             <p>This setting is supported in DMS versions 3.4.1 and later.</p>
                *          </note>
                */
            UseCsvNoSupValue?: boolean;
            /**
                * <p>This setting only applies if your Amazon S3 output files during a change data capture
                *          (CDC) load are written in .csv format. If <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_S3Settings.html#DMS-Type-S3Settings-UseCsvNoSupValue">
                *                <code>UseCsvNoSupValue</code>
                *             </a> is set to true, specify a
                *          string value that you want DMS to use for all columns not included in the supplemental
                *          log. If you do not specify a string value, DMS uses the null value for these columns
                *          regardless of the <code>UseCsvNoSupValue</code> setting.</p>
                *          <note>
                *             <p>This setting is supported in DMS versions 3.4.1 and later.</p>
                *          </note>
                */
            CsvNoSupValue?: string;
            /**
                * <p>If set to <code>true</code>, DMS saves the transaction order for a change data
                *          capture (CDC) load on the Amazon S3 target specified by <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_S3Settings.html#DMS-Type-S3Settings-CdcPath">
                *                <code>CdcPath</code>
                *             </a>. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.EndpointSettings.CdcPath">Capturing data changes (CDC) including transaction order on the S3
                *             target</a>.</p>
                *          <note>
                *             <p>This setting is supported in DMS versions 3.4.2 and later.</p>
                *          </note>
                */
            PreserveTransactions?: boolean;
            /**
                * <p>Specifies the folder path of CDC files. For an S3 source, this setting is required if a
                *          task captures change data; otherwise, it's optional. If <code>CdcPath</code> is set, DMS
                *           reads CDC files from this path and replicates the data changes to the target endpoint.
                *          For an S3 target if you set <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_S3Settings.html#DMS-Type-S3Settings-PreserveTransactions">
                *                <code>PreserveTransactions</code>
                *             </a> to <code>true</code>, DMS
                *           verifies that you have set this parameter to a folder path on your S3 target where DMS
                *           can save the transaction order for the CDC load. DMS creates this CDC folder path
                *          in either your S3 target working directory or the S3 target location specified by <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_S3Settings.html#DMS-Type-S3Settings-BucketFolder">
                *                <code>BucketFolder</code>
                *             </a> and <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_S3Settings.html#DMS-Type-S3Settings-BucketName">
                *                <code>BucketName</code>
                *             </a>.</p>
                *          <p>For example, if you specify <code>CdcPath</code> as <code>MyChangedData</code>, and you
                *          specify <code>BucketName</code> as <code>MyTargetBucket</code> but do not specify
                *             <code>BucketFolder</code>, DMS creates the CDC folder path following:
                *             <code>MyTargetBucket/MyChangedData</code>.</p>
                *          <p>If you specify the same <code>CdcPath</code>, and you specify <code>BucketName</code> as
                *             <code>MyTargetBucket</code> and <code>BucketFolder</code> as <code>MyTargetData</code>,
                *          DMS creates the CDC folder path following:
                *             <code>MyTargetBucket/MyTargetData/MyChangedData</code>.</p>
                *          <p>For more information on CDC including transaction order on an S3 target, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.EndpointSettings.CdcPath">Capturing data changes (CDC) including transaction order on the S3
                *             target</a>.</p>
                *          <note>
                *             <p>This setting is supported in DMS versions 3.4.2 and later.</p>
                *          </note>
                */
            CdcPath?: string;
            /**
                * <p>When set to true, this parameter uses the task start time as the timestamp column value instead of
                *          the time data is written to target. For full load, when <code>useTaskStartTimeForFullLoadTimestamp</code>
                *          is set to <code>true</code>, each row of the timestamp column contains the task start time. For CDC loads,
                *          each row of the timestamp column contains the transaction commit time.</p>
                *
                *          <p>When <code>useTaskStartTimeForFullLoadTimestamp</code> is set to <code>false</code>, the full load timestamp
                *          in the timestamp column increments with the time data arrives at the target. </p>
                */
            UseTaskStartTimeForFullLoadTimestamp?: boolean;
            /**
                * <p>A value that enables DMS to specify a predefined (canned) access control list for
                *          objects created in an Amazon S3 bucket as .csv or .parquet files. For more information
                *          about Amazon S3 canned ACLs, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl">Canned
                *             ACL</a> in the <i>Amazon S3 Developer Guide.</i>
                *          </p>
                *          <p>The default value is NONE. Valid values include NONE, PRIVATE,
                *          PUBLIC_READ, PUBLIC_READ_WRITE, AUTHENTICATED_READ,
                *          AWS_EXEC_READ, BUCKET_OWNER_READ, and
                *          BUCKET_OWNER_FULL_CONTROL.</p>
                */
            CannedAclForObjects?: CannedAclForObjectsValue | string;
            /**
                * <p>An optional parameter that, when set to <code>true</code> or <code>y</code>, you can use
                *          to add column name information to the .csv output file.</p>
                *          <p>The default value is <code>false</code>. Valid values are <code>true</code>, <code>false</code>,
                *          <code>y</code>, and <code>n</code>.</p>
                */
            AddColumnName?: boolean;
            /**
                * <p>Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3.</p>
                *          <p>When <code>CdcMaxBatchInterval</code> and <code>CdcMinFileSize</code> are both specified, the
                *          file write is triggered by whichever parameter condition is met first within an DMS
                *          CloudFormation template.</p>
                *          <p>The default value is 60 seconds.</p>
                */
            CdcMaxBatchInterval?: number;
            /**
                * <p>Minimum file size, defined in megabytes, to reach for a file output to Amazon S3.</p>
                *          <p>When <code>CdcMinFileSize</code> and <code>CdcMaxBatchInterval</code> are both specified, the file
                *          write is triggered by whichever parameter condition is met first within an DMS
                *          CloudFormation template.</p>
                *          <p>The default value is 32 MB.</p>
                */
            CdcMinFileSize?: number;
            /**
                * <p>An optional parameter that specifies how DMS treats null
                *          values. While handling the null value, you can use this
                *          parameter to pass a user-defined string as null when writing to
                *          the target. For example, when target columns are not nullable,
                *          you can use this option to differentiate between the empty
                *          string value and the null value. So, if you set this parameter
                *          value to the empty string ("" or ''), DMS treats the empty
                *          string as the null value instead of <code>NULL</code>.</p>
                *          <p>The default value is <code>NULL</code>. Valid values include any valid string.</p>
                */
            CsvNullValue?: string;
            /**
                * <p>When this value is set to 1, DMS ignores the first row header in a .csv file. A value
                *          of 1 turns on the feature; a value of 0 turns off the feature.</p>
                *          <p>The default is 0.</p>
                */
            IgnoreHeaderRows?: number;
            /**
                * <p>A value that specifies the maximum size (in KB) of any .csv
                *          file to be created while migrating to an S3 target during full
                *          load.</p>
                *          <p>The default value is 1,048,576 KB (1 GB). Valid values include 1 to 1,048,576.</p>
                */
            MaxFileSize?: number;
            /**
                * <p>For an S3 source, when this value is set to <code>true</code> or <code>y</code>,
                *          each leading double quotation mark has to be followed by an
                *          ending double quotation mark. This formatting complies with RFC
                *          4180. When this value is set to <code>false</code> or
                *          <code>n</code>, string literals are copied to the target as
                *          is. In this case, a delimiter (row or column) signals the end of
                *          the field. Thus, you can't use a delimiter as part of the
                *          string, because it signals the end of the value.</p>
                *          <p>For an S3 target, an optional parameter used to set behavior to comply with RFC
                *          4180 for data migrated to Amazon S3 using .csv file format only. When this
                *          value is set to <code>true</code> or <code>y</code> using Amazon
                *          S3 as a target, if the data has quotation marks or newline
                *          characters in it, DMS encloses the entire column with an
                *          additional pair of double quotation marks ("). Every quotation
                *          mark within the data is repeated twice.</p>
                *          <p>The default value is <code>true</code>. Valid values include <code>true</code>, <code>false</code>,
                *          <code>y</code>, and <code>n</code>.</p>
                */
            Rfc4180?: boolean;
            /**
                * <p>When creating an S3 target endpoint, set <code>DatePartitionTimezone</code> to convert
                *          the current UTC time into a specified time zone. The conversion occurs when a date
                *          partition folder is created and a CDC filename is generated. The time zone format is Area/Location.
                *          Use this parameter when <code>DatePartitionedEnabled</code> is set to <code>true</code>, as shown in the
                *          following example.</p>
                *          <p>
                *             <code>s3-settings='{"DatePartitionEnabled": true, "DatePartitionSequence": "YYYYMMDDHH",
                *          "DatePartitionDelimiter": "SLASH",
                *          "DatePartitionTimezone":"<i>Asia/Seoul</i>", "BucketName":
                *          "dms-nattarat-test"}'</code>
                *          </p>
                */
            DatePartitionTimezone?: string;
            /**
                * <p>Use the S3 target endpoint setting <code>AddTrailingPaddingCharacter</code> to add
                *          padding on string data. The default value is <code>false</code>.</p>
                */
            AddTrailingPaddingCharacter?: boolean;
            /**
                * <p>To specify a bucket owner and prevent sniping, you can use the
                *          <code>ExpectedBucketOwner</code> endpoint setting. </p>
                *          <p>Example: <code>--s3-settings='{"ExpectedBucketOwner": "<i>AWS_Account_ID</i>"}'</code>
                *          </p>
                *          <p>When you make a request to test a connection or perform a migration, S3 checks the account
                *          ID of the bucket owner against the specified parameter.</p>
                */
            ExpectedBucketOwner?: string;
    }
    export namespace S3Settings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Settings) => any;
    }
    export enum DmsSslModeValue {
            NONE = "none",
            REQUIRE = "require",
            VERIFY_CA = "verify-ca",
            VERIFY_FULL = "verify-full"
    }
    /**
        * <p>Provides information that defines a SAP ASE endpoint.</p>
        */
    export interface SybaseSettings {
            /**
                * <p>Database name for the endpoint.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Endpoint connection password.</p>
                */
            Password?: string;
            /**
                * <p>Endpoint TCP port. The default is 5000.</p>
                */
            Port?: number;
            /**
                * <p>Fully qualified domain name of the endpoint.</p>
                */
            ServerName?: string;
            /**
                * <p>Endpoint connection user name.</p>
                */
            Username?: string;
            /**
                * <p>The full Amazon Resource Name (ARN) of the IAM role that specifies DMS as the
                *          trusted entity and grants the required permissions to access the value in
                *          <code>SecretsManagerSecret</code>. The role must allow the <code>iam:PassRole</code> action.
                *          <code>SecretsManagerSecret</code> has the value of the Amazon Web Services Secrets Manager
                *           secret that allows access to the SAP ASE endpoint.</p>
                *          <note>
                *             <p>You can specify one of two sets of values for these permissions. You can specify the
                *             values for this setting and <code>SecretsManagerSecretId</code>. Or you can specify
                *             clear-text values for <code>UserName</code>, <code>Password</code>,
                *                <code>ServerName</code>, and <code>Port</code>. You can't specify both. For more
                *             information on creating this <code>SecretsManagerSecret</code> and the
                *                <code>SecretsManagerAccessRoleArn</code> and <code>SecretsManagerSecretId</code>
                *             required to access it, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#security-iam-secretsmanager">Using secrets to access Database Migration Service
                *                resources</a> in the <i>Database Migration Service User
                *                Guide</i>.</p>
                *          </note>
                */
            SecretsManagerAccessRoleArn?: string;
            /**
                * <p>The full ARN, partial ARN, or friendly name of the <code>SecretsManagerSecret</code> that contains the SAP SAE endpoint connection details.</p>
                */
            SecretsManagerSecretId?: string;
    }
    export namespace SybaseSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SybaseSettings) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateEndpointMessage {
            /**
                * <p>The database endpoint identifier. Identifiers must begin with a letter and must contain
                *          only ASCII letters, digits, and hyphens. They can't end with a hyphen, or contain two
                *          consecutive hyphens.</p>
                */
            EndpointIdentifier: string | undefined;
            /**
                * <p>The type of endpoint.  Valid values are <code>source</code> and <code>target</code>.</p>
                */
            EndpointType: ReplicationEndpointTypeValue | string | undefined;
            /**
                * <p>The type of engine for the endpoint. Valid values, depending on the
                *          <code>EndpointType</code> value, include <code>"mysql"</code>, <code>"oracle"</code>,
                *           <code>"postgres"</code>, <code>"mariadb"</code>, <code>"aurora"</code>,
                *           <code>"aurora-postgresql"</code>, <code>"opensearch"</code>, <code>"redshift"</code>, <code>"s3"</code>,
                *          <code>"db2"</code>, <code>db2-zos</code>, <code>"azuredb"</code>, <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>,
                *          <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>, <code>"docdb"</code>,
                *          <code>"sqlserver"</code>, <code>"neptune"</code>, and <code>babelfish</code>.</p>
                */
            EngineName: string | undefined;
            /**
                * <p>The user name to be used to log in to the endpoint database.</p>
                */
            Username?: string;
            /**
                * <p>The password to be used to log in to the endpoint database.</p>
                */
            Password?: string;
            /**
                * <p>The name of the server where the endpoint database resides.</p>
                */
            ServerName?: string;
            /**
                * <p>The port used by the endpoint database.</p>
                */
            Port?: number;
            /**
                * <p>The name of the endpoint database. For a MySQL source or target endpoint, do not specify DatabaseName.
                *       To migrate to a specific database, use this setting and <code>targetDbType</code>.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Additional attributes associated with the connection. Each attribute is specified as a
                *          name-value pair associated by an equal sign (=). Multiple attributes are separated by a
                *          semicolon (;) with no additional white space. For information on the attributes available
                *          for connecting your source or target endpoint, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Endpoints.html">Working with
                *             DMS Endpoints</a> in the <i>Database Migration Service User
                *             Guide.</i>
                *          </p>
                */
            ExtraConnectionAttributes?: string;
            /**
                * <p>An KMS key identifier that is used to encrypt the connection parameters for the endpoint.</p>
                *          <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then
                *            DMS uses your default encryption key.</p>
                *          <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a
                *          different default encryption key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>One or more tags to be assigned to the endpoint.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The Amazon Resource Name (ARN) for the certificate.</p>
                */
            CertificateArn?: string;
            /**
                * <p>The Secure Sockets Layer (SSL) mode to use for the SSL connection. The default is <code>none</code>
                *          </p>
                */
            SslMode?: DmsSslModeValue | string;
            /**
                * <p> The Amazon Resource Name (ARN) for the service access role that you want to use to
                *           create the endpoint. The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>The external table definition. </p>
                */
            ExternalTableDefinition?: string;
            /**
                * <p>Settings in JSON format for the target Amazon DynamoDB endpoint. For information about other
                *             available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.DynamoDB.html#CHAP_Target.DynamoDB.ObjectMapping">Using Object Mapping to Migrate
                *                 Data to DynamoDB</a> in the <i>Database Migration Service User
                *             Guide.</i>
                *          </p>
                */
            DynamoDbSettings?: DynamoDbSettings;
            /**
                * <p>Settings in JSON format for the target Amazon S3 endpoint. For more information about
                *          the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.Configuring">Extra
                *             Connection Attributes When Using Amazon S3 as a Target for DMS</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            S3Settings?: S3Settings;
            /**
                * <p>The settings in JSON format for the DMS transfer type of source endpoint. </p>
                *          <p>Possible settings include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ServiceAccessRoleArn</code> - The Amazon Resource Name (ARN) used by the service access IAM role.
                *                  The role must allow the <code>iam:PassRole</code> action.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>BucketName</code> - The name of the S3 bucket to use.</p>
                *             </li>
                *          </ul>
                *          <p>Shorthand syntax for these settings is as follows:
                *             <code>ServiceAccessRoleArn=string,BucketName=string</code>
                *          </p>
                *          <p>JSON syntax for these settings is as follows: <code>{ "ServiceAccessRoleArn":
                *             "string", "BucketName": "string", } </code>
                *          </p>
                */
            DmsTransferSettings?: DmsTransferSettings;
            /**
                * <p>Settings in JSON format for the source MongoDB endpoint. For more information about the
                *          available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html#CHAP_Source.MongoDB.Configuration">Endpoint configuration settings
                *             when using MongoDB as a source for Database Migration Service</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            MongoDbSettings?: MongoDbSettings;
            /**
                * <p>Settings in JSON format for the target endpoint for Amazon Kinesis Data Streams. For
                *          more information about the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Kinesis.html#CHAP_Target.Kinesis.ObjectMapping">Using object mapping to
                *             migrate data to a Kinesis data stream</a> in the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            KinesisSettings?: KinesisSettings;
            /**
                * <p>Settings in JSON format for the target Apache Kafka endpoint. For more information about
                *          the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Kafka.html#CHAP_Target.Kafka.ObjectMapping">Using object mapping
                *             to migrate data to a Kafka topic</a> in the <i>Database Migration Service User
                *             Guide.</i>
                *          </p>
                */
            KafkaSettings?: KafkaSettings;
            /**
                * <p>Settings in JSON format for the target OpenSearch endpoint. For more information
                *          about the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Elasticsearch.html#CHAP_Target.Elasticsearch.Configuration">Extra Connection Attributes When Using OpenSearch as a Target for DMS</a> in
                *           the <i>Database Migration Service User Guide</i>.</p>
                */
            ElasticsearchSettings?: ElasticsearchSettings;
            /**
                * <p>Settings in JSON format for the target Amazon Neptune endpoint.
                *          For more information
                *          about the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.EndpointSettings">Specifying graph-mapping rules using Gremlin and R2RML for Amazon Neptune as a target</a>
                *             in the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            NeptuneSettings?: NeptuneSettings;
            /**
                * <p>Provides information that defines an Amazon Redshift endpoint.</p>
                */
            RedshiftSettings?: RedshiftSettings;
            /**
                * <p>Settings in JSON format for the source and target PostgreSQL endpoint. For information
                *          about other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib">Extra connection
                *             attributes when using PostgreSQL as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.PostgreSQL.html#CHAP_Target.PostgreSQL.ConnectionAttrib">
                *                Extra connection attributes when using PostgreSQL as a target for DMS</a> in the
                *           <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            PostgreSQLSettings?: PostgreSQLSettings;
            /**
                * <p>Settings in JSON format for the source and target MySQL endpoint. For information about
                *          other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MySQL.html#CHAP_Source.MySQL.ConnectionAttrib">Extra connection attributes
                *             when using MySQL as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.MySQL.html#CHAP_Target.MySQL.ConnectionAttrib">Extra connection attributes when using a MySQL-compatible database as a target for DMS</a> in
                *           the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            MySQLSettings?: MySQLSettings;
            /**
                * <p>Settings in JSON format for the source and target Oracle endpoint. For information about
                *          other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.ConnectionAttrib">Extra connection attributes
                *             when using Oracle as a source for DMS</a> and
                *          <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Oracle.html#CHAP_Target.Oracle.ConnectionAttrib">
                *             Extra connection attributes when using Oracle as a target for DMS</a>
                *           in the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            OracleSettings?: OracleSettings;
            /**
                * <p>Settings in JSON format for the source and target SAP ASE endpoint. For information
                *          about other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.SAP.html#CHAP_Source.SAP.ConnectionAttrib">Extra connection attributes
                *             when using SAP ASE as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.SAP.html#CHAP_Target.SAP.ConnectionAttrib">Extra connection attributes
                *                 when using SAP ASE as a target for DMS</a> in the <i>Database Migration Service
                *                     User Guide.</i>
                *          </p>
                */
            SybaseSettings?: SybaseSettings;
            /**
                * <p>Settings in JSON format for the source and target Microsoft SQL Server endpoint. For
                *          information about other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.SQLServer.html#CHAP_Source.SQLServer.ConnectionAttrib">Extra connection
                *             attributes when using SQL Server as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.SQLServer.html#CHAP_Target.SQLServer.ConnectionAttrib">
                *             Extra connection attributes when using SQL Server as a target for DMS</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            MicrosoftSQLServerSettings?: MicrosoftSQLServerSettings;
            /**
                * <p>Settings in JSON format for the source IBM Db2 LUW endpoint. For information about other
                *          available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.DB2.html#CHAP_Source.DB2.ConnectionAttrib">Extra connection attributes
                *             when using Db2 LUW as a source for DMS</a> in the <i>Database Migration Service
                *                 User Guide.</i>
                *          </p>
                */
            IBMDb2Settings?: IBMDb2Settings;
            /**
                * <p>A friendly name for the resource identifier at the end of the <code>EndpointArn</code>
                *          response parameter that is returned in the created <code>Endpoint</code> object. The value
                *          for this parameter can have up to 31 characters. It can contain only ASCII letters, digits,
                *          and hyphen ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens,
                *          and can only begin with a letter, such as <code>Example-App-ARN1</code>. For example, this
                *          value might result in the <code>EndpointArn</code> value
                *             <code>arn:aws:dms:eu-west-1:012345678901:rep:Example-App-ARN1</code>. If you don't
                *          specify a <code>ResourceIdentifier</code> value, DMS generates a default identifier
                *          value for the end of <code>EndpointArn</code>.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>Provides information that defines a DocumentDB endpoint.</p>
                */
            DocDbSettings?: DocDbSettings;
            /**
                * <p>Settings in JSON format for the target Redis endpoint.</p>
                */
            RedisSettings?: RedisSettings;
            /**
                * <p>Settings in JSON format for the source GCP MySQL endpoint.</p>
                */
            GcpMySQLSettings?: GcpMySQLSettings;
    }
    export namespace CreateEndpointMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointMessage) => any;
    }
    /**
        * <p>Describes an endpoint of a database instance in response to operations such as the
        *          following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>CreateEndpoint</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeEndpoint</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ModifyEndpoint</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface Endpoint {
            /**
                * <p>The database endpoint identifier. Identifiers must begin with a letter and must contain
                *          only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two
                *          consecutive hyphens.</p>
                */
            EndpointIdentifier?: string;
            /**
                * <p>The type of endpoint.  Valid values are <code>source</code> and <code>target</code>.</p>
                */
            EndpointType?: ReplicationEndpointTypeValue | string;
            /**
                * <p>The database engine name. Valid values, depending on the EndpointType, include
                *             <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>,
                *             <code>"mariadb"</code>, <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"opensearch"</code>,
                *             <code>"redshift"</code>, <code>"s3"</code>, <code>"db2"</code>, <code>"azuredb"</code>,
                *             <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>,
                *             <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>,
                *             <code>"documentdb"</code>, <code>"sqlserver"</code>, and <code>"neptune"</code>.</p>
                */
            EngineName?: string;
            /**
                * <p>The expanded name for the engine name. For example, if the <code>EngineName</code>
                *          parameter is "aurora," this value would be "Amazon Aurora MySQL."</p>
                */
            EngineDisplayName?: string;
            /**
                * <p>The user name used to connect to the endpoint.</p>
                */
            Username?: string;
            /**
                * <p>The name of the server at the endpoint.</p>
                */
            ServerName?: string;
            /**
                * <p>The port value used to access the endpoint.</p>
                */
            Port?: number;
            /**
                * <p>The name of the database at the endpoint.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Additional connection attributes used to connect to the endpoint.</p>
                */
            ExtraConnectionAttributes?: string;
            /**
                * <p>The status of the endpoint.</p>
                */
            Status?: string;
            /**
                * <p>An KMS key identifier that is used to encrypt the connection parameters for the endpoint.</p>
                *          <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then
                *            DMS uses your default encryption key.</p>
                *          <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a
                *          different default encryption key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) used for SSL connection to the endpoint.</p>
                */
            CertificateArn?: string;
            /**
                * <p>The SSL mode used to connect to the endpoint. The default value is <code>none</code>.</p>
                */
            SslMode?: DmsSslModeValue | string;
            /**
                * <p>The Amazon Resource Name (ARN) used by the service to access the IAM role.
                *          The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>The external table definition.</p>
                */
            ExternalTableDefinition?: string;
            /**
                * <p> Value returned by a call to CreateEndpoint that can be used for cross-account
                *          validation. Use it on a subsequent call to CreateEndpoint to create the endpoint with a
                *          cross-account. </p>
                */
            ExternalId?: string;
            /**
                * <p>The settings for the DynamoDB target endpoint. For more information, see the
                *             <code>DynamoDBSettings</code> structure.</p>
                */
            DynamoDbSettings?: DynamoDbSettings;
            /**
                * <p>The settings for the S3 target endpoint. For more information, see the
                *             <code>S3Settings</code> structure.</p>
                */
            S3Settings?: S3Settings;
            /**
                * <p>The settings for the DMS Transfer type source. For more information, see the DmsTransferSettings structure.  </p>
                */
            DmsTransferSettings?: DmsTransferSettings;
            /**
                * <p>The settings for the MongoDB source endpoint. For more information, see the
                *             <code>MongoDbSettings</code> structure.</p>
                */
            MongoDbSettings?: MongoDbSettings;
            /**
                * <p>The settings for the Amazon Kinesis target endpoint. For more information, see the
                *             <code>KinesisSettings</code> structure.</p>
                */
            KinesisSettings?: KinesisSettings;
            /**
                * <p>The settings for the Apache Kafka target endpoint. For more information, see the
                *          <code>KafkaSettings</code> structure.</p>
                */
            KafkaSettings?: KafkaSettings;
            /**
                * <p>The settings for the OpenSearch source endpoint. For more information, see the
                *             <code>ElasticsearchSettings</code> structure.</p>
                */
            ElasticsearchSettings?: ElasticsearchSettings;
            /**
                * <p>The settings for the Amazon Neptune target endpoint. For more information, see the
                *          <code>NeptuneSettings</code> structure.</p>
                */
            NeptuneSettings?: NeptuneSettings;
            /**
                * <p>Settings for the Amazon Redshift endpoint.</p>
                */
            RedshiftSettings?: RedshiftSettings;
            /**
                * <p>The settings for the PostgreSQL source and target endpoint. For more information, see
                *          the <code>PostgreSQLSettings</code> structure.</p>
                */
            PostgreSQLSettings?: PostgreSQLSettings;
            /**
                * <p>The settings for the MySQL source and target endpoint. For more information, see the
                *             <code>MySQLSettings</code> structure.</p>
                */
            MySQLSettings?: MySQLSettings;
            /**
                * <p>The settings for the Oracle source and target endpoint. For more information, see the
                *             <code>OracleSettings</code> structure.</p>
                */
            OracleSettings?: OracleSettings;
            /**
                * <p>The settings for the SAP ASE source and target endpoint. For more information, see the
                *             <code>SybaseSettings</code> structure.</p>
                */
            SybaseSettings?: SybaseSettings;
            /**
                * <p>The settings for the Microsoft SQL Server source and target endpoint. For more
                *          information, see the <code>MicrosoftSQLServerSettings</code> structure.</p>
                */
            MicrosoftSQLServerSettings?: MicrosoftSQLServerSettings;
            /**
                * <p>The settings for the IBM Db2 LUW source endpoint. For more information, see the
                *             <code>IBMDb2Settings</code> structure.
                *       </p>
                */
            IBMDb2Settings?: IBMDb2Settings;
            /**
                * <p>Provides information that defines a DocumentDB endpoint.</p>
                */
            DocDbSettings?: DocDbSettings;
            /**
                * <p>The settings for the Redis target endpoint. For more information, see the
                *          <code>RedisSettings</code> structure.</p>
                */
            RedisSettings?: RedisSettings;
            /**
                * <p>Settings in JSON format for the source GCP MySQL endpoint.</p>
                */
            GcpMySQLSettings?: GcpMySQLSettings;
    }
    export namespace Endpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Endpoint) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateEndpointResponse {
            /**
                * <p>The endpoint that was created.</p>
                */
            Endpoint?: Endpoint;
    }
    export namespace CreateEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEndpointResponse) => any;
    }
    /**
        * <p>DMS cannot access the KMS key.</p>
        */
    export class KMSKeyNotAccessibleFault extends __BaseException {
            readonly name: "KMSKeyNotAccessibleFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSKeyNotAccessibleFault, __BaseException>);
    }
    /**
        * <p>The resource you are attempting to create already exists.</p>
        */
    export class ResourceAlreadyExistsFault extends __BaseException {
            readonly name: "ResourceAlreadyExistsFault";
            readonly $fault: "client";
            resourceArn?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The quota for this resource quota has been exceeded.</p>
        */
    export class ResourceQuotaExceededFault extends __BaseException {
            readonly name: "ResourceQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Insufficient privileges are preventing access to an Amazon S3 object.</p>
        */
    export class S3AccessDeniedFault extends __BaseException {
            readonly name: "S3AccessDeniedFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<S3AccessDeniedFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateEventSubscriptionMessage {
            /**
                * <p>The name of the DMS event notification subscription. This name must be less than 255 characters.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p> The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification.
                *          The ARN is created by Amazon SNS when you create a topic and subscribe to it. </p>
                */
            SnsTopicArn: string | undefined;
            /**
                * <p> The type of DMS resource that generates the events. For example, if you want to be
                *          notified of events generated by a replication instance, you set this parameter to
                *             <code>replication-instance</code>. If this value isn't specified, all events are
                *          returned. </p>
                *          <p>Valid values: <code>replication-instance</code> | <code>replication-task</code>
                *          </p>
                */
            SourceType?: string;
            /**
                * <p>A list of event categories for a source type that you want to subscribe to. For more
                *            information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html">Working with Events and
                *                Notifications</a> in the <i>Database Migration Service User
                *                    Guide.</i>
                *          </p>
                */
            EventCategories?: string[];
            /**
                * <p>A list of identifiers for which DMS provides notification events.</p>
                *          <p>If you don't specify a value, notifications are provided for all sources.</p>
                *         <p>If you specify multiple values, they must be of the same type. For example, if you
                *             specify a database instance ID, then all of the other values must be database instance
                *             IDs.</p>
                */
            SourceIds?: string[];
            /**
                * <p> A Boolean value; set to <code>true</code> to activate the subscription, or set to
                *             <code>false</code> to create the subscription but not activate it. </p>
                */
            Enabled?: boolean;
            /**
                * <p>One or more tags to be assigned to the event subscription.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventSubscriptionMessage) => any;
    }
    /**
        * <p>Describes an event notification subscription created by the <code>CreateEventSubscription</code>
        *          operation.</p>
        */
    export interface EventSubscription {
            /**
                * <p>The Amazon Web Services customer account associated with the DMS event notification
                *          subscription.</p>
                */
            CustomerAwsId?: string;
            /**
                * <p>The DMS event notification subscription Id.</p>
                */
            CustSubscriptionId?: string;
            /**
                * <p>The topic ARN of the DMS event notification subscription.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The status of the DMS event notification subscription.</p>
                *          <p>Constraints:</p>
                *          <p>Can be one of the following: creating | modifying | deleting | active | no-permission |
                *          topic-not-exist</p>
                *          <p>The status "no-permission" indicates that DMS no longer has permission to post to
                *          the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the
                *          subscription was created.</p>
                */
            Status?: string;
            /**
                * <p>The time the DMS event notification subscription was created.</p>
                */
            SubscriptionCreationTime?: string;
            /**
                * <p> The type of DMS resource that generates events. </p>
                *          <p>Valid values: replication-instance | replication-server | security-group |
                *          replication-task</p>
                */
            SourceType?: string;
            /**
                * <p>A list of source Ids for the event subscription.</p>
                */
            SourceIdsList?: string[];
            /**
                * <p>A lists of event categories.</p>
                */
            EventCategoriesList?: string[];
            /**
                * <p>Boolean value that indicates if the event subscription is enabled.</p>
                */
            Enabled?: boolean;
    }
    export namespace EventSubscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSubscription) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateEventSubscriptionResponse {
            /**
                * <p>The event subscription that was created.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace CreateEventSubscriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventSubscriptionResponse) => any;
    }
    /**
        * <p>The ciphertext references a key that doesn't exist or that the DMS account doesn't have access to.</p>
        */
    export class KMSAccessDeniedFault extends __BaseException {
            readonly name: "KMSAccessDeniedFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSAccessDeniedFault, __BaseException>);
    }
    /**
        * <p>The specified KMS key isn't enabled.</p>
        */
    export class KMSDisabledFault extends __BaseException {
            readonly name: "KMSDisabledFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSDisabledFault, __BaseException>);
    }
    /**
        * <p>The state of the specified KMS resource isn't valid for this request.</p>
        */
    export class KMSInvalidStateFault extends __BaseException {
            readonly name: "KMSInvalidStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSInvalidStateFault, __BaseException>);
    }
    /**
        * <p>The specified KMS entity or resource can't be found.</p>
        */
    export class KMSNotFoundFault extends __BaseException {
            readonly name: "KMSNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSNotFoundFault, __BaseException>);
    }
    /**
        * <p>This request triggered KMS request throttling.</p>
        */
    export class KMSThrottlingFault extends __BaseException {
            readonly name: "KMSThrottlingFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSThrottlingFault, __BaseException>);
    }
    /**
        * <p>The SNS topic is invalid.</p>
        */
    export class SNSInvalidTopicFault extends __BaseException {
            readonly name: "SNSInvalidTopicFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSInvalidTopicFault, __BaseException>);
    }
    /**
        * <p>You are not authorized for the SNS subscription.</p>
        */
    export class SNSNoAuthorizationFault extends __BaseException {
            readonly name: "SNSNoAuthorizationFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSNoAuthorizationFault, __BaseException>);
    }
    export interface CreateFleetAdvisorCollectorRequest {
            /**
                * <p>The name of your Fleet Advisor collector (for example, <code>sample-collector</code>).</p>
                */
            CollectorName: string | undefined;
            /**
                * <p>A summary description of your Fleet Advisor collector.</p>
                */
            Description?: string;
            /**
                * <p>The IAM role that grants permissions to access the specified Amazon S3 bucket.</p>
                */
            ServiceAccessRoleArn: string | undefined;
            /**
                * <p>The Amazon S3 bucket that the Fleet Advisor collector uses to store inventory metadata.</p>
                */
            S3BucketName: string | undefined;
    }
    export namespace CreateFleetAdvisorCollectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFleetAdvisorCollectorRequest) => any;
    }
    export interface CreateFleetAdvisorCollectorResponse {
            /**
                * <p>The unique ID of the new Fleet Advisor collector, for example:
                *                 <code>22fda70c-40d5-4acf-b233-a495bd8eb7f5</code>
                *          </p>
                */
            CollectorReferencedId?: string;
            /**
                * <p>The name of the new Fleet Advisor collector.</p>
                */
            CollectorName?: string;
            /**
                * <p>A summary description of the Fleet Advisor collector.</p>
                */
            Description?: string;
            /**
                * <p>The IAM role that grants permissions to access the specified Amazon S3 bucket.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>The Amazon S3 bucket that the collector uses to store inventory metadata.</p>
                */
            S3BucketName?: string;
    }
    export namespace CreateFleetAdvisorCollectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFleetAdvisorCollectorResponse) => any;
    }
    /**
        * <p>A specified Amazon S3 bucket, bucket folder, or other object can't be
        *             found.</p>
        */
    export class S3ResourceNotFoundFault extends __BaseException {
            readonly name: "S3ResourceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<S3ResourceNotFoundFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateReplicationInstanceMessage {
            /**
                * <p>The replication instance identifier. This parameter is stored as a lowercase
                *          string.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain 1-63 alphanumeric characters or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *          <p>Example: <code>myrepinstance</code>
                *          </p>
                */
            ReplicationInstanceIdentifier: string | undefined;
            /**
                * <p>The amount of storage (in gigabytes) to be initially allocated for the replication
                *          instance.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The compute and memory capacity of the replication instance as defined for the specified
                *          replication instance class. For example to specify the instance class dms.c4.large, set this parameter to <code>"dms.c4.large"</code>.</p>
                *          <p>For more information on the settings and capacities for the available replication instance classes, see
                *          <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth">
                *             Selecting the right DMS replication instance for your migration</a>.
                *       </p>
                */
            ReplicationInstanceClass: string | undefined;
            /**
                * <p> Specifies the VPC security group to be used with the replication instance. The VPC
                *          security group must work with the VPC containing the replication instance. </p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The Availability Zone where the replication instance will be created. The default
                *          value is a random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region, for
                *          example: <code>us-east-1d</code>
                *          </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>A subnet group to associate with the replication instance.</p>
                */
            ReplicationSubnetGroupIdentifier?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur, in Universal
                *          Coordinated Time (UTC).</p>
                *          <p> Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *          </p>
                *          <p>Default: A 30-minute window selected at random from an 8-hour block of time per Amazon Web Services Region,
                *           occurring on a random day of the week.</p>
                *          <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun</p>
                *          <p>Constraints: Minimum 30-minute window.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the
                *             <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to
                *             <code>true</code>. </p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The engine version number of the replication instance.</p>
                *          <p>If an engine version number is not specified when a replication
                *          instance is created, the default is the latest engine version available.</p>
                */
            EngineVersion?: string;
            /**
                * <p>A value that indicates whether minor engine upgrades are applied automatically to the
                *          replication instance during the maintenance window. This parameter defaults to
                *             <code>true</code>.</p>
                *          <p>Default: <code>true</code>
                *          </p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>One or more tags to be assigned to the replication instance.</p>
                */
            Tags?: Tag[];
            /**
                * <p>An KMS key identifier that is used to encrypt the data on the replication
                *            instance.</p>
                *          <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then
                *            DMS uses your default encryption key.</p>
                *          <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a
                *          different default encryption key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p> Specifies the accessibility options for the replication instance. A value of
                *             <code>true</code> represents an instance with a public IP address. A value of
                *             <code>false</code> represents an instance with a private IP address. The default value
                *          is <code>true</code>. </p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>A list of custom DNS name servers supported for the replication instance to access your
                *          on-premise source or target database. This list overrides the default name servers
                *          supported by the replication instance. You can specify a comma-separated list of internet
                *          addresses for up to four on-premise DNS name servers. For example:
                *             <code>"1.1.1.1,2.2.2.2,3.3.3.3,4.4.4.4"</code>
                *          </p>
                */
            DnsNameServers?: string;
            /**
                * <p>A friendly name for the resource identifier at the end of the <code>EndpointArn</code>
                *          response parameter that is returned in the created <code>Endpoint</code> object. The value
                *          for this parameter can have up to 31 characters. It can contain only ASCII letters, digits,
                *          and hyphen ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens,
                *          and can only begin with a letter, such as <code>Example-App-ARN1</code>. For example, this
                *          value might result in the <code>EndpointArn</code> value
                *          <code>arn:aws:dms:eu-west-1:012345678901:rep:Example-App-ARN1</code>. If you don't
                *          specify a <code>ResourceIdentifier</code> value, DMS generates a default identifier
                *          value for the end of <code>EndpointArn</code>.</p>
                */
            ResourceIdentifier?: string;
    }
    export namespace CreateReplicationInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationInstanceMessage) => any;
    }
    /**
        * <p>Provides information about the values of pending modifications to a replication
        *          instance. This data type is an object of the
        *          <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_ReplicationInstance.html">
        *                <code>ReplicationInstance</code>
        *             </a> user-defined
        *          data type. </p>
        */
    export interface ReplicationPendingModifiedValues {
            /**
                * <p>The compute and memory capacity of the replication instance as defined for the specified
                *          replication instance class.</p>
                *          <p>For more information on the settings and capacities for the available replication instance classes, see
                *          <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth">
                *             Selecting the right DMS replication instance for your migration</a>.
                *       </p>
                */
            ReplicationInstanceClass?: string;
            /**
                * <p>The amount of storage (in gigabytes) that is allocated for the replication
                *          instance.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the
                *             <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to
                *             <code>true</code>. </p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The engine version number of the replication instance.</p>
                */
            EngineVersion?: string;
    }
    export namespace ReplicationPendingModifiedValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationPendingModifiedValues) => any;
    }
    /**
        * <p>The name of an Availability Zone for use during database migration.
        *             <code>AvailabilityZone</code> is an optional parameter to the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_CreateReplicationInstance.html">
        *                <code>CreateReplicationInstance</code>
        *             </a> operation, and it’s value relates to
        *          the Amazon Web Services Region of an endpoint. For example, the availability zone of an endpoint in the
        *          us-east-1 region might be us-east-1a, us-east-1b, us-east-1c, or us-east-1d.</p>
        */
    export interface AvailabilityZone {
            /**
                * <p>The name of the Availability Zone.</p>
                */
            Name?: string;
    }
    export namespace AvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailabilityZone) => any;
    }
    /**
        * <p>In response to a request by the <code>DescribeReplicationSubnetGroups</code> operation,
        *          this object identifies a subnet by its given Availability Zone, subnet identifier, and
        *          status.</p>
        */
    export interface Subnet {
            /**
                * <p>The subnet identifier.</p>
                */
            SubnetIdentifier?: string;
            /**
                * <p>The Availability Zone of the subnet.</p>
                */
            SubnetAvailabilityZone?: AvailabilityZone;
            /**
                * <p>The status of the subnet.</p>
                */
            SubnetStatus?: string;
    }
    export namespace Subnet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subnet) => any;
    }
    /**
        * <p>Describes a subnet group in response to a request by the
        *             <code>DescribeReplicationSubnetGroups</code> operation.</p>
        */
    export interface ReplicationSubnetGroup {
            /**
                * <p>The identifier of the replication instance subnet group.</p>
                */
            ReplicationSubnetGroupIdentifier?: string;
            /**
                * <p>A description for the replication subnet group.</p>
                */
            ReplicationSubnetGroupDescription?: string;
            /**
                * <p>The ID of the VPC.</p>
                */
            VpcId?: string;
            /**
                * <p>The status of the subnet group.</p>
                */
            SubnetGroupStatus?: string;
            /**
                * <p>The subnets that are in the subnet group.</p>
                */
            Subnets?: Subnet[];
    }
    export namespace ReplicationSubnetGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationSubnetGroup) => any;
    }
    /**
        * <p>Describes the status of a security group associated with the virtual private cloud (VPC)
        *          hosting your replication and DB instances.</p>
        */
    export interface VpcSecurityGroupMembership {
            /**
                * <p>The VPC security group ID.</p>
                */
            VpcSecurityGroupId?: string;
            /**
                * <p>The status of the VPC security group.</p>
                */
            Status?: string;
    }
    export namespace VpcSecurityGroupMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcSecurityGroupMembership) => any;
    }
    /**
        * <p>Provides information that defines a replication instance.</p>
        */
    export interface ReplicationInstance {
            /**
                * <p>The replication instance identifier is a required parameter. This parameter is stored as
                *          a lowercase string.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain 1-63 alphanumeric characters or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *          <p>Example: <code>myrepinstance</code>
                *          </p>
                */
            ReplicationInstanceIdentifier?: string;
            /**
                * <p>The compute and memory capacity of the replication instance as defined for the specified
                *          replication instance class. It is a required parameter, although a default value is
                *          pre-selected in the DMS console.</p>
                *          <p>For more information on the settings and capacities for the available replication instance classes, see
                *          <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth">
                *             Selecting the right DMS replication instance for your migration</a>.
                *       </p>
                */
            ReplicationInstanceClass?: string;
            /**
                * <p>The status of the replication instance. The possible return values include:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"available"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"creating"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"deleted"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"deleting"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"failed"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"modifying"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"upgrading"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"rebooting"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"resetting-master-credentials"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"storage-full"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"incompatible-credentials"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"incompatible-network"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"maintenance"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ReplicationInstanceStatus?: string;
            /**
                * <p>The amount of storage (in gigabytes) that is allocated for the replication
                *          instance.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The time the replication instance was created.</p>
                */
            InstanceCreateTime?: Date;
            /**
                * <p>The VPC security group for the instance.</p>
                */
            VpcSecurityGroups?: VpcSecurityGroupMembership[];
            /**
                * <p>The Availability Zone for the instance.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The subnet group for the replication instance.</p>
                */
            ReplicationSubnetGroup?: ReplicationSubnetGroup;
            /**
                * <p>The maintenance window times for the replication instance. Any pending upgrades to the
                *          replication instance are performed during this time.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The pending modification values.</p>
                */
            PendingModifiedValues?: ReplicationPendingModifiedValues;
            /**
                * <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the
                *             <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to
                *             <code>true</code>. </p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The engine version number of the replication instance.</p>
                *          <p>If an engine version number is not specified when a replication
                *          instance is created, the default is the latest engine version available.</p>
                *          <p>When modifying a major engine version of an instance, also set
                *          <code>AllowMajorVersionUpgrade</code> to <code>true</code>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Boolean value indicating if minor version upgrades will be automatically applied to the
                *          instance.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>An KMS key identifier that is used to encrypt the data on the replication
                *            instance.</p>
                *          <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then
                *            DMS uses your default encryption key.</p>
                *          <p>KMS creates the default encryption key for your Amazon Web Services account. Your Amazon Web Services account has a
                *          different default encryption key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn?: string;
            /**
                * @deprecated
                *
                * <p>The public IP address of the replication instance.</p>
                */
            ReplicationInstancePublicIpAddress?: string;
            /**
                * @deprecated
                *
                * <p>The private IP address of the replication instance.</p>
                */
            ReplicationInstancePrivateIpAddress?: string;
            /**
                * <p>One or more public IP addresses for the replication instance.</p>
                */
            ReplicationInstancePublicIpAddresses?: string[];
            /**
                * <p>One or more private IP addresses for the replication instance.</p>
                */
            ReplicationInstancePrivateIpAddresses?: string[];
            /**
                * <p> Specifies the accessibility options for the replication instance. A value of
                *             <code>true</code> represents an instance with a public IP address. A value of
                *             <code>false</code> represents an instance with a private IP address. The default value
                *          is <code>true</code>. </p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>The Availability Zone of the standby replication instance in a Multi-AZ
                *          deployment.</p>
                */
            SecondaryAvailabilityZone?: string;
            /**
                * <p> The expiration date of the free replication instance that is part of the Free DMS
                *          program. </p>
                */
            FreeUntil?: Date;
            /**
                * <p>The DNS name servers supported for the replication instance to access your on-premise source or target database.</p>
                */
            DnsNameServers?: string;
    }
    export namespace ReplicationInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationInstance) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateReplicationInstanceResponse {
            /**
                * <p>The replication instance that was created.</p>
                */
            ReplicationInstance?: ReplicationInstance;
    }
    export namespace CreateReplicationInstanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationInstanceResponse) => any;
    }
    /**
        * <p>There are not enough resources allocated to the database migration.</p>
        */
    export class InsufficientResourceCapacityFault extends __BaseException {
            readonly name: "InsufficientResourceCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientResourceCapacityFault, __BaseException>);
    }
    /**
        * <p>The subnet provided is invalid.</p>
        */
    export class InvalidSubnet extends __BaseException {
            readonly name: "InvalidSubnet";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSubnet, __BaseException>);
    }
    /**
        * <p>The replication subnet group does not cover enough Availability Zones (AZs). Edit the replication subnet group and add more AZs.</p>
        */
    export class ReplicationSubnetGroupDoesNotCoverEnoughAZs extends __BaseException {
            readonly name: "ReplicationSubnetGroupDoesNotCoverEnoughAZs";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReplicationSubnetGroupDoesNotCoverEnoughAZs, __BaseException>);
    }
    /**
        * <p>The storage quota has been exceeded.</p>
        */
    export class StorageQuotaExceededFault extends __BaseException {
            readonly name: "StorageQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StorageQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateReplicationSubnetGroupMessage {
            /**
                * <p>The name for the replication subnet group. This value is stored as a lowercase
                *          string.</p>
                *          <p>Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces,
                *          underscores, or hyphens. Must not be "default".</p>
                *          <p>Example: <code>mySubnetgroup</code>
                *          </p>
                */
            ReplicationSubnetGroupIdentifier: string | undefined;
            /**
                * <p>The description for the subnet group.</p>
                */
            ReplicationSubnetGroupDescription: string | undefined;
            /**
                * <p>One or more subnet IDs to be assigned to the subnet group.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>One or more tags to be assigned to the subnet group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateReplicationSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationSubnetGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateReplicationSubnetGroupResponse {
            /**
                * <p>The replication subnet group that was created.</p>
                */
            ReplicationSubnetGroup?: ReplicationSubnetGroup;
    }
    export namespace CreateReplicationSubnetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationSubnetGroupResponse) => any;
    }
    export enum MigrationTypeValue {
            CDC = "cdc",
            FULL_LOAD = "full-load",
            FULL_LOAD_AND_CDC = "full-load-and-cdc"
    }
    /**
        * <p></p>
        */
    export interface CreateReplicationTaskMessage {
            /**
                * <p>An identifier for the replication task.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain 1-255 alphanumeric characters or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            ReplicationTaskIdentifier: string | undefined;
            /**
                * <p>An Amazon Resource Name (ARN) that uniquely identifies the source endpoint.</p>
                */
            SourceEndpointArn: string | undefined;
            /**
                * <p>An Amazon Resource Name (ARN) that uniquely identifies the target endpoint.</p>
                */
            TargetEndpointArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a replication instance.</p>
                */
            ReplicationInstanceArn: string | undefined;
            /**
                * <p>The migration type. Valid values: <code>full-load</code> | <code>cdc</code> | <code>full-load-and-cdc</code>
                *          </p>
                */
            MigrationType: MigrationTypeValue | string | undefined;
            /**
                * <p>The table mappings for the task, in JSON format. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TableMapping.html">Using Table
                *             Mapping to Specify Task Settings</a> in the <i>Database Migration Service User
                *             Guide.</i>
                *          </p>
                */
            TableMappings: string | undefined;
            /**
                * <p>Overall settings for the task, in JSON format. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.CustomizingTasks.TaskSettings.html">Specifying Task
                *             Settings for Database Migration Service Tasks</a> in the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            ReplicationTaskSettings?: string;
            /**
                * <p>Indicates the start time for a change data capture (CDC) operation. Use either
                *          CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start.
                *          Specifying both values results in an error.</p>
                *          <p>Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”</p>
                */
            CdcStartTime?: Date;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to start. Use either
                *          CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start.
                *          Specifying both values results in an error.</p>
                *          <p> The value can be in date, checkpoint, or LSN/SCN format.</p>
                *          <p>Date Example: --cdc-start-position “2018-03-08T12:12:12”</p>
                *          <p>Checkpoint Example: --cdc-start-position
                *          "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93"</p>
                *          <p>LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”</p>
                *          <note>
                *             <p>When you use this task setting with a source PostgreSQL database, a logical
                *             replication slot should already be created and associated with the source endpoint. You
                *             can verify this by setting the <code>slotName</code> extra connection attribute to the
                *             name of this logical replication slot. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib">Extra Connection Attributes When Using PostgreSQL as a Source
                *                for DMS</a>.</p>
                *          </note>
                */
            CdcStartPosition?: string;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to stop. The value can be
                *          either server time or commit time.</p>
                *          <p>Server time example: --cdc-stop-position “server_time:2018-02-09T12:12:12”</p>
                *          <p>Commit time example: --cdc-stop-position “commit_time: 2018-02-09T12:12:12 “</p>
                */
            CdcStopPosition?: string;
            /**
                * <p>One or more tags to be assigned to the replication task.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Supplemental information that the task requires to migrate the data for certain source and target endpoints.
                *          For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.TaskData.html">Specifying Supplemental Data for Task Settings</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            TaskData?: string;
            /**
                * <p>A friendly name for the resource identifier at the end of the <code>EndpointArn</code>
                *          response parameter that is returned in the created <code>Endpoint</code> object. The value
                *          for this parameter can have up to 31 characters. It can contain only ASCII letters, digits,
                *          and hyphen ('-'). Also, it can't end with a hyphen or contain two consecutive hyphens,
                *          and can only begin with a letter, such as <code>Example-App-ARN1</code>. For example, this
                *          value might result in the <code>EndpointArn</code> value
                *          <code>arn:aws:dms:eu-west-1:012345678901:rep:Example-App-ARN1</code>. If you don't
                *          specify a <code>ResourceIdentifier</code> value, DMS generates a default identifier
                *          value for the end of <code>EndpointArn</code>.</p>
                */
            ResourceIdentifier?: string;
    }
    export namespace CreateReplicationTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationTaskMessage) => any;
    }
    /**
        * <p>In response to a request by the <code>DescribeReplicationTasks</code> operation, this object provides
        *          a collection of statistics about a replication task.</p>
        */
    export interface ReplicationTaskStats {
            /**
                * <p>The percent complete for the full load migration task.</p>
                */
            FullLoadProgressPercent?: number;
            /**
                * <p>The elapsed time of the task, in milliseconds.</p>
                */
            ElapsedTimeMillis?: number;
            /**
                * <p>The number of tables loaded for this task.</p>
                */
            TablesLoaded?: number;
            /**
                * <p>The number of tables currently loading for this task.</p>
                */
            TablesLoading?: number;
            /**
                * <p>The number of tables queued for this task.</p>
                */
            TablesQueued?: number;
            /**
                * <p>The number of errors that have occurred during this task.</p>
                */
            TablesErrored?: number;
            /**
                * <p>The date the replication task was started either with a fresh start or a target reload.</p>
                */
            FreshStartDate?: Date;
            /**
                * <p>The date the replication task was started either with a fresh start or a resume. For more information, see
                *          <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTask.html#DMS-StartReplicationTask-request-StartReplicationTaskType">StartReplicationTaskType</a>.</p>
                */
            StartDate?: Date;
            /**
                * <p>The date the replication task was stopped.</p>
                */
            StopDate?: Date;
            /**
                * <p>The date the replication task full load was started.</p>
                */
            FullLoadStartDate?: Date;
            /**
                * <p>The date the replication task full load was completed.</p>
                */
            FullLoadFinishDate?: Date;
    }
    export namespace ReplicationTaskStats {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationTaskStats) => any;
    }
    /**
        * <p>Provides information that describes a replication task created by the
        *             <code>CreateReplicationTask</code> operation.</p>
        */
    export interface ReplicationTask {
            /**
                * <p>The user-assigned replication task identifier or name.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain 1-255 alphanumeric characters or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            ReplicationTaskIdentifier?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the endpoint.</p>
                */
            SourceEndpointArn?: string;
            /**
                * <p>The ARN that uniquely identifies the endpoint.</p>
                */
            TargetEndpointArn?: string;
            /**
                * <p>The ARN of the replication instance.</p>
                */
            ReplicationInstanceArn?: string;
            /**
                * <p>The type of migration.</p>
                */
            MigrationType?: MigrationTypeValue | string;
            /**
                * <p>Table mappings specified in the task.</p>
                */
            TableMappings?: string;
            /**
                * <p>The settings for the replication task.</p>
                */
            ReplicationTaskSettings?: string;
            /**
                * <p>The status of the replication task. This response parameter can return one of
                *          the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"moving"</code> – The task is being moved in response to running the
                *                   <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_MoveReplicationTask.html">
                *                      <code>MoveReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"creating"</code> – The task is being created in response to running
                *                the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_CreateReplicationTask.html">
                *                      <code>CreateReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"deleting"</code> – The task is being deleted in response to running
                *                the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_DeleteReplicationTask.html">
                *                      <code>DeleteReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"failed"</code> – The task failed to successfully complete the database
                *                migration in response to running the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTask.html">
                *                      <code>StartReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"failed-move"</code> – The task failed to move in response to running
                *                the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_MoveReplicationTask.html">
                *                      <code>MoveReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"modifying"</code> – The task definition is being modified in response
                *                to running the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_ModifyReplicationTask.html">
                *                      <code>ModifyReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"ready"</code> – The task is in a <code>ready</code> state where it can
                *                respond to other task operations, such as <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTask.html">
                *                      <code>StartReplicationTask</code>
                *                   </a> or <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_DeleteReplicationTask.html">
                *                      <code>DeleteReplicationTask</code>
                *                   </a>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"running"</code> – The task is performing a database migration in
                *                response to running the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTask.html">
                *                      <code>StartReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"starting"</code> – The task is preparing to perform a database
                *                migration in response to running the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTask.html">
                *                      <code>StartReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"stopped"</code> – The task has stopped in response to running the
                *                   <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StopReplicationTask.html">
                *                      <code>StopReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"stopping"</code> – The task is preparing to stop in response to
                *                running the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StopReplicationTask.html">
                *                      <code>StopReplicationTask</code>
                *                   </a> operation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"testing"</code> – The database migration specified for this task is
                *                being tested in response to running either the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTaskAssessmentRun.html">
                *                      <code>StartReplicationTaskAssessmentRun</code>
                *                   </a> or the
                *                   <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTaskAssessment.html">
                *                      <code>StartReplicationTaskAssessment</code>
                *                   </a>
                *                operation.</p>
                *                <note>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTaskAssessmentRun.html">
                *                         <code>StartReplicationTaskAssessmentRun</code>
                *                      </a> is
                *                   an improved premigration task assessment operation. The <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTaskAssessment.html">
                *                         <code>StartReplicationTaskAssessment</code>
                *                      </a>
                *                   operation assesses data type compatibility only between the source and target
                *                   database of a given migration task. In contrast, <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_StartReplicationTaskAssessmentRun.html">
                *                         <code>StartReplicationTaskAssessmentRun</code>
                *                      </a>
                *                   enables you to specify a variety of premigration task assessments in addition to
                *                   data type compatibility. These assessments include ones for the validity of primary key definitions and
                *                   likely issues with database migration performance, among others.</p>
                *                </note>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>The last error (failure) message generated for the replication task.</p>
                */
            LastFailureMessage?: string;
            /**
                * <p>The reason the replication task was stopped. This response parameter can return one of
                *          the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason NORMAL"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason RECOVERABLE_ERROR"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason FATAL_ERROR"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason FULL_LOAD_ONLY_FINISHED"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason STOPPED_AFTER_FULL_LOAD"</code> – Full load completed, with cached changes not applied</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason STOPPED_AFTER_CACHED_EVENTS"</code>  – Full load completed, with cached changes applied</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason EXPRESS_LICENSE_LIMITS_REACHED"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason STOPPED_AFTER_DDL_APPLY"</code> – User-defined stop task after DDL applied</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason STOPPED_DUE_TO_LOW_MEMORY"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason STOPPED_DUE_TO_LOW_DISK"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason STOPPED_AT_SERVER_TIME"</code> – User-defined server time for stopping task</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason STOPPED_AT_COMMIT_TIME"</code> –  User-defined commit time for stopping task</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason RECONFIGURATION_RESTART"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"Stop Reason RECYCLE_TASK"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            StopReason?: string;
            /**
                * <p>The date the replication task was created.</p>
                */
            ReplicationTaskCreationDate?: Date;
            /**
                * <p>The date the replication task is scheduled to start.</p>
                */
            ReplicationTaskStartDate?: Date;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to start. Use either
                *          <code>CdcStartPosition</code> or <code>CdcStartTime</code> to specify when you want the CDC operation to start.
                *          Specifying both values results in an error.</p>
                *          <p>The value can be in date, checkpoint, or LSN/SCN format.</p>
                *          <p>Date Example: --cdc-start-position “2018-03-08T12:12:12”</p>
                *          <p>Checkpoint Example: --cdc-start-position
                *          "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93"</p>
                *          <p>LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”</p>
                */
            CdcStartPosition?: string;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to stop. The value can be
                *          either server time or commit time.</p>
                *          <p>Server time example: --cdc-stop-position “server_time:2018-02-09T12:12:12”</p>
                *          <p>Commit time example: --cdc-stop-position “commit_time: 2018-02-09T12:12:12 “</p>
                */
            CdcStopPosition?: string;
            /**
                * <p>Indicates the last checkpoint that occurred during a change data capture (CDC)
                *          operation. You can provide this value to the <code>CdcStartPosition</code> parameter to
                *          start a CDC operation that begins at that checkpoint.</p>
                */
            RecoveryCheckpoint?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task.</p>
                */
            ReplicationTaskArn?: string;
            /**
                * <p>The statistics for the task, including elapsed time, tables loaded, and table
                *          errors.</p>
                */
            ReplicationTaskStats?: ReplicationTaskStats;
            /**
                * <p>Supplemental information that the task requires to migrate the data for certain source and target endpoints.
                *             For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.TaskData.html">Specifying Supplemental Data for Task Settings</a> in the
                *          <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            TaskData?: string;
            /**
                * <p>The ARN of the replication instance to which this task is moved in response to running
                *          the <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_MoveReplicationTask.html">
                *                <code>MoveReplicationTask</code>
                *             </a> operation. Otherwise, this response
                *          parameter isn't a member of the <code>ReplicationTask</code> object.</p>
                */
            TargetReplicationInstanceArn?: string;
    }
    export namespace ReplicationTask {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationTask) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateReplicationTaskResponse {
            /**
                * <p>The replication task that was created.</p>
                */
            ReplicationTask?: ReplicationTask;
    }
    export namespace CreateReplicationTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateReplicationTaskResponse) => any;
    }
    export interface DeleteCertificateMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the certificate.</p>
                */
            CertificateArn: string | undefined;
    }
    export namespace DeleteCertificateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCertificateMessage) => any;
    }
    /**
        * <p>The SSL certificate that can be used to encrypt connections between the endpoints and
        *          the replication instance.</p>
        */
    export interface Certificate {
            /**
                * <p>A customer-assigned name for the certificate. Identifiers must begin with a letter and
                *          must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or
                *          contain two consecutive hyphens.</p>
                */
            CertificateIdentifier?: string;
            /**
                * <p>The date that the certificate was created.</p>
                */
            CertificateCreationDate?: Date;
            /**
                * <p>The contents of a <code>.pem</code> file, which contains an X.509 certificate.</p>
                */
            CertificatePem?: string;
            /**
                * <p>The location of an imported Oracle Wallet certificate for use with SSL. Example: <code>filebase64("${path.root}/rds-ca-2019-root.sso")</code>
                *          </p>
                */
            CertificateWallet?: Uint8Array;
            /**
                * <p>The Amazon Resource Name (ARN) for the certificate.</p>
                */
            CertificateArn?: string;
            /**
                * <p>The owner of the certificate.</p>
                */
            CertificateOwner?: string;
            /**
                * <p>The beginning date that the certificate is valid.</p>
                */
            ValidFromDate?: Date;
            /**
                * <p>The final date that the certificate is valid.</p>
                */
            ValidToDate?: Date;
            /**
                * <p>The signing algorithm for the certificate.</p>
                */
            SigningAlgorithm?: string;
            /**
                * <p>The key length of the cryptographic algorithm being used.</p>
                */
            KeyLength?: number;
    }
    export namespace Certificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Certificate) => any;
    }
    export interface DeleteCertificateResponse {
            /**
                * <p>The Secure Sockets Layer (SSL) certificate.</p>
                */
            Certificate?: Certificate;
    }
    export namespace DeleteCertificateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCertificateResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteConnectionMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn: string | undefined;
    }
    export namespace DeleteConnectionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionMessage) => any;
    }
    /**
        * <p>Status of the connection between an endpoint and a replication instance, including
        *          Amazon Resource Names (ARNs) and the last error message issued.</p>
        */
    export interface Connection {
            /**
                * <p>The ARN of the replication instance.</p>
                */
            ReplicationInstanceArn?: string;
            /**
                * <p>The ARN string that uniquely identifies the endpoint.</p>
                */
            EndpointArn?: string;
            /**
                * <p>The connection status. This parameter can return one of the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"successful"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"testing"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"failed"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"deleting"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>The error message when the connection last failed.</p>
                */
            LastFailureMessage?: string;
            /**
                * <p>The identifier of the endpoint. Identifiers must begin with a letter and must contain only
                *          ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two
                *          consecutive hyphens.</p>
                */
            EndpointIdentifier?: string;
            /**
                * <p>The replication instance identifier. This parameter is stored as a lowercase
                *          string.</p>
                */
            ReplicationInstanceIdentifier?: string;
    }
    export namespace Connection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Connection) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteConnectionResponse {
            /**
                * <p>The connection that is being deleted.</p>
                */
            Connection?: Connection;
    }
    export namespace DeleteConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteEndpointMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace DeleteEndpointMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEndpointMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteEndpointResponse {
            /**
                * <p>The endpoint that was deleted.</p>
                */
            Endpoint?: Endpoint;
    }
    export namespace DeleteEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEndpointResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteEventSubscriptionMessage {
            /**
                * <p>The name of the DMS event notification subscription to be deleted.</p>
                */
            SubscriptionName: string | undefined;
    }
    export namespace DeleteEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventSubscriptionMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteEventSubscriptionResponse {
            /**
                * <p>The event subscription that was deleted.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace DeleteEventSubscriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventSubscriptionResponse) => any;
    }
    /**
        * <p>The specified collector doesn't exist.</p>
        */
    export class CollectorNotFoundFault extends __BaseException {
            readonly name: "CollectorNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CollectorNotFoundFault, __BaseException>);
    }
    export interface DeleteCollectorRequest {
            /**
                * <p>The reference ID of the Fleet Advisor collector to delete.</p>
                */
            CollectorReferencedId: string | undefined;
    }
    export namespace DeleteCollectorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCollectorRequest) => any;
    }
    export interface DeleteFleetAdvisorDatabasesRequest {
            /**
                * <p>The IDs of the Fleet Advisor collector databases to delete.</p>
                */
            DatabaseIds: string[] | undefined;
    }
    export namespace DeleteFleetAdvisorDatabasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFleetAdvisorDatabasesRequest) => any;
    }
    export interface DeleteFleetAdvisorDatabasesResponse {
            /**
                * <p>The IDs of the databases that the operation deleted.</p>
                */
            DatabaseIds?: string[];
    }
    export namespace DeleteFleetAdvisorDatabasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFleetAdvisorDatabasesResponse) => any;
    }
    /**
        * <p>The action or operation requested isn't valid.</p>
        */
    export class InvalidOperationFault extends __BaseException {
            readonly name: "InvalidOperationFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOperationFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationInstanceMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance to be deleted.</p>
                */
            ReplicationInstanceArn: string | undefined;
    }
    export namespace DeleteReplicationInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationInstanceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationInstanceResponse {
            /**
                * <p>The replication instance that was deleted.</p>
                */
            ReplicationInstance?: ReplicationInstance;
    }
    export namespace DeleteReplicationInstanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationInstanceResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationSubnetGroupMessage {
            /**
                * <p>The subnet group name of the replication instance.</p>
                */
            ReplicationSubnetGroupIdentifier: string | undefined;
    }
    export namespace DeleteReplicationSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationSubnetGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationSubnetGroupResponse {
    }
    export namespace DeleteReplicationSubnetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationSubnetGroupResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationTaskMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task to be deleted.</p>
                */
            ReplicationTaskArn: string | undefined;
    }
    export namespace DeleteReplicationTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationTaskMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationTaskResponse {
            /**
                * <p>The deleted replication task.</p>
                */
            ReplicationTask?: ReplicationTask;
    }
    export namespace DeleteReplicationTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationTaskResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationTaskAssessmentRunMessage {
            /**
                * <p>Amazon Resource Name (ARN) of the premigration assessment run to be deleted.</p>
                */
            ReplicationTaskAssessmentRunArn: string | undefined;
    }
    export namespace DeleteReplicationTaskAssessmentRunMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationTaskAssessmentRunMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteReplicationTaskAssessmentRunResponse {
            /**
                * <p>The <code>ReplicationTaskAssessmentRun</code> object for the deleted assessment
                *          run.</p>
                */
            ReplicationTaskAssessmentRun?: ReplicationTaskAssessmentRun;
    }
    export namespace DeleteReplicationTaskAssessmentRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteReplicationTaskAssessmentRunResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeAccountAttributesMessage {
    }
    export namespace DescribeAccountAttributesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountAttributesMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeAccountAttributesResponse {
            /**
                * <p>Account quota information.</p>
                */
            AccountQuotas?: AccountQuota[];
            /**
                * <p>A unique DMS identifier for an account in a particular Amazon Web Services Region. The value of this
                *          identifier has the following format: <code>c99999999999</code>. DMS uses this identifier to
                *          name artifacts. For example, DMS uses this identifier to name the default Amazon S3 bucket
                *          for storing task assessment reports in a given Amazon Web Services Region. The format of this S3 bucket
                *          name is the following:
                *                <code>dms-<i>AccountNumber</i>-<i>UniqueAccountIdentifier</i>.</code>
                *          Here is an example name for this default S3 bucket:
                *             <code>dms-111122223333-c44445555666</code>.</p>
                *          <note>
                *             <p>DMS supports the <code>UniqueAccountIdentifier</code> parameter in
                *             versions 3.1.4 and later.</p>
                *          </note>
                */
            UniqueAccountIdentifier?: string;
    }
    export namespace DescribeAccountAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountAttributesResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeApplicableIndividualAssessmentsMessage {
            /**
                * <p>Amazon Resource Name (ARN) of a migration task on which you want to base
                *          the default list of individual assessments.</p>
                */
            ReplicationTaskArn?: string;
            /**
                * <p>ARN of a replication instance on which you want to base the default list of individual
                *          assessments.</p>
                */
            ReplicationInstanceArn?: string;
            /**
                * <p>Name of a database engine that the specified replication instance supports as a source.</p>
                */
            SourceEngineName?: string;
            /**
                * <p>Name of a database engine that the specified replication instance supports as a target.</p>
                */
            TargetEngineName?: string;
            /**
                * <p>Name of the migration type that each provided individual assessment must support.</p>
                */
            MigrationType?: MigrationTypeValue | string;
            /**
                * <p>Maximum number of records to include in the response. If more records exist than the
                *          specified <code>MaxRecords</code> value, a pagination token called a marker is included in
                *          the response so that the remaining results can be retrieved.</p>
                */
            MaxRecords?: number;
            /**
                * <p>Optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeApplicableIndividualAssessmentsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicableIndividualAssessmentsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeApplicableIndividualAssessmentsResponse {
            /**
                * <p>List of names for the individual assessments supported by the premigration assessment
                *          run that you start based on the specified request parameters. For more information on the
                *          available individual assessments, including compatibility with different migration task
                *          configurations, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html">Working with premigration assessment runs</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            IndividualAssessmentNames?: string[];
            /**
                * <p>Pagination token returned for you to pass to a subsequent request. If you pass this
                *          token as the <code>Marker</code> value in a subsequent request, the response includes only
                *          records beyond the marker, up to the value specified in the request by
                *             <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeApplicableIndividualAssessmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicableIndividualAssessmentsResponse) => any;
    }
    /**
        * <p>Identifies the name and value of a filter object. This filter is used to limit the
        *          number and type of DMS objects that are returned for a particular
        *             <code>Describe*</code> call or similar operation. Filters are used as an optional
        *          parameter for certain API operations. </p>
        */
    export interface Filter {
            /**
                * <p>The name of the filter as specified for a <code>Describe*</code> or similar
                *          operation.</p>
                */
            Name: string | undefined;
            /**
                * <p>The filter value, which can specify one or more values used to narrow the returned results.</p>
                */
            Values: string[] | undefined;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    export interface DescribeCertificatesMessage {
            /**
                * <p>Filters applied to the certificates described in the form of key-value pairs.
                *           Valid values are <code>certificate-arn</code> and <code>certificate-id</code>.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 10</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeCertificatesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCertificatesMessage) => any;
    }
    export interface DescribeCertificatesResponse {
            /**
                * <p>The pagination token.</p>
                */
            Marker?: string;
            /**
                * <p>The Secure Sockets Layer (SSL) certificates associated with the replication
                *          instance.</p>
                */
            Certificates?: Certificate[];
    }
    export namespace DescribeCertificatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCertificatesResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeConnectionsMessage {
            /**
                * <p>The filters applied to the connection.</p>
                *          <p>Valid filter names: endpoint-arn | replication-instance-arn</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeConnectionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeConnectionsResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>A description of the connections.</p>
                */
            Connections?: Connection[];
    }
    export namespace DescribeConnectionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEndpointsMessage {
            /**
                * <p>Filters applied to the endpoints.</p>
                *          <p>Valid filter names: endpoint-arn | endpoint-type | endpoint-id | engine-name</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeEndpointsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEndpointsResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>Endpoint description.</p>
                */
            Endpoints?: Endpoint[];
    }
    export namespace DescribeEndpointsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointsResponse) => any;
    }
    export interface DescribeEndpointSettingsMessage {
            /**
                * <p>The databse engine used for your source or target endpoint.</p>
                */
            EngineName: string | undefined;
            /**
                * <p>The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response
                *          so that the remaining results can be retrieved.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified,
                *          the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeEndpointSettingsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointSettingsMessage) => any;
    }
    export enum EndpointSettingTypeValue {
            BOOLEAN = "boolean",
            ENUM = "enum",
            INTEGER = "integer",
            STRING = "string"
    }
    /**
        * <p>Endpoint settings.</p>
        */
    export interface EndpointSetting {
            /**
                * <p>The name that you want to give the endpoint settings.</p>
                */
            Name?: string;
            /**
                * <p>The type of endpoint.  Valid values are <code>source</code> and <code>target</code>.</p>
                */
            Type?: EndpointSettingTypeValue | string;
            /**
                * <p>Enumerated values to use for this endpoint.</p>
                */
            EnumValues?: string[];
            /**
                * <p>A value that marks this endpoint setting as sensitive.</p>
                */
            Sensitive?: boolean;
            /**
                * <p>The unit of measure for this endpoint setting.</p>
                */
            Units?: string;
            /**
                * <p>The relevance or validity of an endpoint setting for an engine name and its endpoint type.</p>
                */
            Applicability?: string;
            /**
                * <p>The minimum value of an endpoint setting that is of type <code>int</code>.</p>
                */
            IntValueMin?: number;
            /**
                * <p>The maximum value of an endpoint setting that is of type <code>int</code>.</p>
                */
            IntValueMax?: number;
            /**
                * <p>The default value of the endpoint setting if no value is specified using <code>CreateEndpoint</code> or <code>ModifyEndpoint</code>.</p>
                */
            DefaultValue?: string;
    }
    export namespace EndpointSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointSetting) => any;
    }
    export interface DescribeEndpointSettingsResponse {
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is specified,
                *          the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Descriptions of the endpoint settings available for your source or target database engine.</p>
                */
            EndpointSettings?: EndpointSetting[];
    }
    export namespace DescribeEndpointSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointSettingsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEndpointTypesMessage {
            /**
                * <p>Filters applied to the endpoint types.</p>
                *          <p>Valid filter names: engine-name | endpoint-type</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeEndpointTypesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointTypesMessage) => any;
    }
    /**
        * <p>Provides information about types of supported endpoints in response to a request by the
        *             <code>DescribeEndpointTypes</code> operation. This information includes the type of
        *          endpoint, the database engine name, and whether change data capture (CDC) is
        *          supported.</p>
        */
    export interface SupportedEndpointType {
            /**
                * <p>The database engine name. Valid values, depending on the EndpointType,  include
                *          <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>,
                *          <code>"mariadb"</code>, <code>"aurora"</code>, <code>"aurora-postgresql"</code>,
                *          <code>"redshift"</code>, <code>"s3"</code>, <code>"db2"</code>, <code>"azuredb"</code>,
                *          <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>,
                *          <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>,
                *          <code>"documentdb"</code>, <code>"sqlserver"</code>, and <code>"neptune"</code>.</p>
                */
            EngineName?: string;
            /**
                * <p>Indicates if change data capture (CDC) is supported.</p>
                */
            SupportsCDC?: boolean;
            /**
                * <p>The type of endpoint.  Valid values are <code>source</code> and <code>target</code>.</p>
                */
            EndpointType?: ReplicationEndpointTypeValue | string;
            /**
                * <p>The earliest DMS engine version that supports this endpoint engine. Note that endpoint engines released with DMS versions earlier than 3.1.1 do not return a value for this parameter.</p>
                */
            ReplicationInstanceEngineMinimumVersion?: string;
            /**
                * <p>The expanded name for the engine name. For example, if the <code>EngineName</code>
                *          parameter is "aurora," this value would be "Amazon Aurora MySQL."</p>
                */
            EngineDisplayName?: string;
    }
    export namespace SupportedEndpointType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SupportedEndpointType) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEndpointTypesResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>The types of endpoints that are supported.</p>
                */
            SupportedEndpointTypes?: SupportedEndpointType[];
    }
    export namespace DescribeEndpointTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndpointTypesResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEventCategoriesMessage {
            /**
                * <p> The type of DMS resource that generates events. </p>
                *          <p>Valid values: replication-instance | replication-task</p>
                */
            SourceType?: string;
            /**
                * <p>Filters applied to the event categories.</p>
                */
            Filters?: Filter[];
    }
    export namespace DescribeEventCategoriesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventCategoriesMessage) => any;
    }
    /**
        * <p>Lists categories of events subscribed to, and generated by, the applicable DMS
        *          resource type. This data type appears in response to the
        *          <a href="https://docs.aws.amazon.com/dms/latest/APIReference/API_EventCategoryGroup.html">
        *                <code>DescribeEventCategories</code>
        *             </a>
        *          action.</p>
        */
    export interface EventCategoryGroup {
            /**
                * <p> The type of DMS resource that generates events. </p>
                *          <p>Valid values: replication-instance | replication-server | security-group |
                *          replication-task</p>
                */
            SourceType?: string;
            /**
                * <p> A list of event categories from a source type that you've chosen.</p>
                */
            EventCategories?: string[];
    }
    export namespace EventCategoryGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventCategoryGroup) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEventCategoriesResponse {
            /**
                * <p>A list of event categories.</p>
                */
            EventCategoryGroupList?: EventCategoryGroup[];
    }
    export namespace DescribeEventCategoriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventCategoriesResponse) => any;
    }
    export type SourceType = "replication-instance";
    /**
        * <p></p>
        */
    export interface DescribeEventsMessage {
            /**
                * <p> The identifier of an event source.</p>
                */
            SourceIdentifier?: string;
            /**
                * <p>The type of DMS resource that generates events.</p>
                *          <p>Valid values: replication-instance | replication-task</p>
                */
            SourceType?: SourceType | string;
            /**
                * <p>The start time for the events to be listed.</p>
                */
            StartTime?: Date;
            /**
                * <p>The end time for the events to be listed.</p>
                */
            EndTime?: Date;
            /**
                * <p>The duration of the events to be listed.</p>
                */
            Duration?: number;
            /**
                * <p>A list of event categories for the source type that you've chosen.</p>
                */
            EventCategories?: string[];
            /**
                * <p>Filters applied to events. The only valid filter is <code>replication-instance-id</code>.</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeEventsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsMessage) => any;
    }
    /**
        * <p>Describes an identifiable significant activity that affects a replication instance or
        *          task. This object can provide the message, the available event categories, the date and
        *          source of the event, and the DMS resource type.</p>
        */
    export interface Event {
            /**
                * <p> The identifier of an event source.</p>
                */
            SourceIdentifier?: string;
            /**
                * <p> The type of DMS resource that generates events. </p>
                *          <p>Valid values: replication-instance | endpoint | replication-task</p>
                */
            SourceType?: SourceType | string;
            /**
                * <p>The event message.</p>
                */
            Message?: string;
            /**
                * <p>The event categories available for the specified source type.</p>
                */
            EventCategories?: string[];
            /**
                * <p>The date of the event.</p>
                */
            Date?: Date;
    }
    export namespace Event {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Event) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEventsResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>The events described.</p>
                */
            Events?: Event[];
    }
    export namespace DescribeEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEventSubscriptionsMessage {
            /**
                * <p>The name of the DMS event subscription to be described.</p>
                */
            SubscriptionName?: string;
            /**
                * <p>Filters applied to event subscriptions.</p>
                *          <p>Valid filter names: event-subscription-arn |  event-subscription-id </p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeEventSubscriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventSubscriptionsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEventSubscriptionsResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>A list of event subscriptions.</p>
                */
            EventSubscriptionsList?: EventSubscription[];
    }
    export namespace DescribeEventSubscriptionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventSubscriptionsResponse) => any;
    }
    export interface DescribeFleetAdvisorCollectorsRequest {
            /**
                * <p> If you specify any of the following filters, the output includes information for only
                *             those collectors that meet the filter criteria:</p>
                *
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>collector-referenced-id</code> – The ID of the collector agent, for example
                *                         <code>d4610ac5-e323-4ad9-bc50-eaf7249dfe9d</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>collector-name</code> – The name of the collector agent.</p>
                *             </li>
                *          </ul>
                *
                *         <p>An example is: <code>describe-fleet-advisor-collectors --filter
                *                 Name="collector-referenced-id",Values="d4610ac5-e323-4ad9-bc50-eaf7249dfe9d"</code>
                *          </p>
                */
            Filters?: Filter[];
            /**
                * <p>Sets the maximum number of records returned in the response.</p>
                */
            MaxRecords?: number;
            /**
                * <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorCollectorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorCollectorsRequest) => any;
    }
    export enum CollectorStatus {
            ACTIVE = "ACTIVE",
            UNREGISTERED = "UNREGISTERED"
    }
    /**
        * <p>Describes the last Fleet Advisor collector health check.</p>
        */
    export interface CollectorHealthCheck {
            /**
                * <p>The status of the Fleet Advisor collector.</p>
                */
            CollectorStatus?: CollectorStatus | string;
            /**
                * <p>Whether the local collector can access its Amazon S3 bucket.</p>
                */
            LocalCollectorS3Access?: boolean;
            /**
                * <p>Whether the web collector can access its Amazon S3 bucket.</p>
                */
            WebCollectorS3Access?: boolean;
            /**
                * <p>Whether the role that you provided when creating the Fleet Advisor collector has sufficient permissions
                *             to access the Fleet Advisor web collector.</p>
                */
            WebCollectorGrantedRoleBasedAccess?: boolean;
    }
    export namespace CollectorHealthCheck {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CollectorHealthCheck) => any;
    }
    /**
        * <p>Describes a Fleet Advisor collector inventory.</p>
        */
    export interface InventoryData {
            /**
                * <p>The number of databases in the Fleet Advisor collector inventory.</p>
                */
            NumberOfDatabases?: number;
            /**
                * <p>The number of schemas in the Fleet Advisor collector inventory.</p>
                */
            NumberOfSchemas?: number;
    }
    export namespace InventoryData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryData) => any;
    }
    export enum VersionStatus {
            OUTDATED = "OUTDATED",
            UNSUPPORTED = "UNSUPPORTED",
            UP_TO_DATE = "UP_TO_DATE"
    }
    /**
        * <p>Describes a Fleet Advisor collector.</p>
        */
    export interface CollectorResponse {
            /**
                * <p>The reference ID of the Fleet Advisor collector.</p>
                */
            CollectorReferencedId?: string;
            /**
                * <p>The name of the Fleet Advisor collector .</p>
                */
            CollectorName?: string;
            /**
                * <p>The version of your Fleet Advisor collector, in semantic versioning format, for example
                *                 <code>1.0.2</code>
                *          </p>
                */
            CollectorVersion?: string;
            /**
                * <p>Whether the collector version is up to date.</p>
                */
            VersionStatus?: VersionStatus | string;
            /**
                * <p>A summary description of the Fleet Advisor collector.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon S3 bucket that the Fleet Advisor collector uses to store inventory metadata.</p>
                */
            S3BucketName?: string;
            /**
                * <p>The IAM role that grants permissions to access the specified Amazon S3 bucket.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>Describes the last Fleet Advisor collector health check.</p>
                */
            CollectorHealthCheck?: CollectorHealthCheck;
            /**
                * <p>The timestamp of the last time the collector received data, in the following format:
                *                 <code>2022-01-24T19:04:02.596113Z</code>
                *          </p>
                */
            LastDataReceived?: string;
            /**
                * <p>The timestamp when DMS registered the collector, in the following format:
                *                 <code>2022-01-24T19:04:02.596113Z</code>
                *          </p>
                */
            RegisteredDate?: string;
            /**
                * <p>The timestamp when you created the collector, in the following format:
                *                 <code>2022-01-24T19:04:02.596113Z</code>
                *          </p>
                */
            CreatedDate?: string;
            /**
                * <p>The timestamp when DMS last modified the collector, in the following format:
                *                 <code>2022-01-24T19:04:02.596113Z</code>
                *          </p>
                */
            ModifiedDate?: string;
            /**
                * <p>Describes a Fleet Advisor collector inventory.</p>
                */
            InventoryData?: InventoryData;
    }
    export namespace CollectorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CollectorResponse) => any;
    }
    export interface DescribeFleetAdvisorCollectorsResponse {
            /**
                * <p>Provides descriptions of the Fleet Advisor collectors, including the collectors' name
                *             and ID, and the latest inventory data. </p>
                */
            Collectors?: CollectorResponse[];
            /**
                * <p>If <code>NextToken</code> is returned, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorCollectorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorCollectorsResponse) => any;
    }
    export interface DescribeFleetAdvisorDatabasesRequest {
            /**
                * <p> If you specify any of the following filters, the output includes information for only
                *             those databases that meet the filter criteria: </p>
                *
                *             <ul>
                *             <li>
                *                <p>
                *                   <code>database-id</code> – The ID of the database.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>database-name</code> – The name of the database.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>database-engine</code> – The name of the database engine.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>server-ip-address</code> – The IP address of the database server.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>database-ip-address</code> – The IP address of the database.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>collector-name</code> – The name of the associated Fleet Advisor collector.</p>
                *             </li>
                *          </ul>
                *
                *             <p>An example is: <code>describe-fleet-advisor-databases --filter
                *                 Name="database-id",Values="45"</code>
                *          </p>
                */
            Filters?: Filter[];
            /**
                * <p>Sets the maximum number of records returned in the response.</p>
                */
            MaxRecords?: number;
            /**
                * <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorDatabasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorDatabasesRequest) => any;
    }
    /**
        * <p>Briefly describes a Fleet Advisor collector.</p>
        */
    export interface CollectorShortInfoResponse {
            /**
                * <p>The reference ID of the Fleet Advisor collector.</p>
                */
            CollectorReferencedId?: string;
            /**
                * <p>The name of the Fleet Advisor collector.</p>
                */
            CollectorName?: string;
    }
    export namespace CollectorShortInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CollectorShortInfoResponse) => any;
    }
    /**
        * <p>Describes a server in a Fleet Advisor collector inventory.</p>
        */
    export interface ServerShortInfoResponse {
            /**
                * <p>The ID of a server in a Fleet Advisor collector inventory.</p>
                */
            ServerId?: string;
            /**
                * <p>The IP address of a server in a Fleet Advisor collector inventory.</p>
                */
            IpAddress?: string;
            /**
                * <p>The name address of a server in a Fleet Advisor collector inventory.</p>
                */
            ServerName?: string;
    }
    export namespace ServerShortInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerShortInfoResponse) => any;
    }
    /**
        * <p>Describes an inventory database instance for a Fleet Advisor collector.</p>
        */
    export interface DatabaseInstanceSoftwareDetailsResponse {
            /**
                * <p>The database engine of a database in a Fleet Advisor collector inventory, for example <code>Microsoft
                *                 SQL Server</code>.</p>
                */
            Engine?: string;
            /**
                * <p>The database engine version of a database in a Fleet Advisor collector inventory, for example
                *                 <code>2019</code>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The database engine edition of a database in a Fleet Advisor collector inventory, for example
                *                 <code>Express</code>.</p>
                */
            EngineEdition?: string;
            /**
                * <p>The service pack level of the database.</p>
                */
            ServicePack?: string;
            /**
                * <p>The support level of the database, for example <code>Mainstream support</code>.</p>
                */
            SupportLevel?: string;
            /**
                * <p>The operating system architecture of the database.</p>
                */
            OsArchitecture?: number;
            /**
                * <p>Information about the database engine software, for example <code>Mainstream support
                *                 ends on November 14th, 2024</code>.</p>
                */
            Tooltip?: string;
    }
    export namespace DatabaseInstanceSoftwareDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseInstanceSoftwareDetailsResponse) => any;
    }
    /**
        * <p>Describes a database in a Fleet Advisor collector inventory.</p>
        */
    export interface DatabaseResponse {
            /**
                * <p>The ID of a database in a Fleet Advisor collector inventory.</p>
                */
            DatabaseId?: string;
            /**
                * <p>The name of a database in a Fleet Advisor collector inventory. </p>
                */
            DatabaseName?: string;
            /**
                * <p>The IP address of a database in a Fleet Advisor collector inventory. </p>
                */
            IpAddress?: string;
            /**
                * <p>The number of schemas in a Fleet Advisor collector inventory database. </p>
                */
            NumberOfSchemas?: number;
            /**
                * <p>The server name of a database in a Fleet Advisor collector inventory. </p>
                */
            Server?: ServerShortInfoResponse;
            /**
                * <p>The software details of a database in a Fleet Advisor collector inventory, such as database engine and version.</p>
                */
            SoftwareDetails?: DatabaseInstanceSoftwareDetailsResponse;
            /**
                * <p>A list of collectors associated with the database.</p>
                */
            Collectors?: CollectorShortInfoResponse[];
    }
    export namespace DatabaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseResponse) => any;
    }
    export interface DescribeFleetAdvisorDatabasesResponse {
            /**
                * <p>Provides descriptions of the Fleet Advisor collector databases, including the database's collector, ID, and name.</p>
                */
            Databases?: DatabaseResponse[];
            /**
                * <p>If <code>NextToken</code> is returned, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorDatabasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorDatabasesResponse) => any;
    }
    export interface DescribeFleetAdvisorLsaAnalysisRequest {
            /**
                * <p>Sets the maximum number of records returned in the response.</p>
                */
            MaxRecords?: number;
            /**
                * <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorLsaAnalysisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorLsaAnalysisRequest) => any;
    }
    /**
        * <p>Describes a large-scale assessment (LSA) analysis run by a Fleet Advisor collector.</p>
        */
    export interface FleetAdvisorLsaAnalysisResponse {
            /**
                * <p>The ID of an LSA analysis run by a Fleet Advisor collector.</p>
                */
            LsaAnalysisId?: string;
            /**
                * <p>The status of an LSA analysis run by a Fleet Advisor collector.</p>
                */
            Status?: string;
    }
    export namespace FleetAdvisorLsaAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FleetAdvisorLsaAnalysisResponse) => any;
    }
    export interface DescribeFleetAdvisorLsaAnalysisResponse {
            /**
                * <p>A list of <code>FleetAdvisorLsaAnalysisResponse</code> objects.</p>
                */
            Analysis?: FleetAdvisorLsaAnalysisResponse[];
            /**
                * <p>If <code>NextToken</code> is returned, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorLsaAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorLsaAnalysisResponse) => any;
    }
    export interface DescribeFleetAdvisorSchemaObjectSummaryRequest {
            /**
                * <p> If you specify any of the following filters, the output includes information for only
                *             those schema objects that meet the filter criteria:</p>
                *
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>schema-id</code> – The ID of the schema, for example
                *                         <code>d4610ac5-e323-4ad9-bc50-eaf7249dfe9d</code>.</p>
                *             </li>
                *          </ul>
                *
                *         <p>Example: <code>describe-fleet-advisor-schema-object-summary --filter Name="schema-id",Values="50"</code>
                *          </p>
                */
            Filters?: Filter[];
            /**
                * <p>Sets the maximum number of records returned in the response.</p>
                */
            MaxRecords?: number;
            /**
                * <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorSchemaObjectSummaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorSchemaObjectSummaryRequest) => any;
    }
    /**
        * <p>Describes a schema object in a Fleet Advisor collector inventory.</p>
        */
    export interface FleetAdvisorSchemaObjectResponse {
            /**
                * <p>The ID of a schema object in a Fleet Advisor collector inventory.</p>
                */
            SchemaId?: string;
            /**
                * <p>The type of the schema object, as reported by the database engine. Examples include the following:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>function</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>trigger</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SYSTEM_TABLE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>QUEUE</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ObjectType?: string;
            /**
                * <p>The number of objects in a schema object in a Fleet Advisor collector inventory.</p>
                */
            NumberOfObjects?: number;
            /**
                * <p>The number of lines of code in a schema object in a Fleet Advisor collector inventory.</p>
                */
            CodeLineCount?: number;
            /**
                * <p>The size level of the code in a schema object in a Fleet Advisor collector inventory.</p>
                */
            CodeSize?: number;
    }
    export namespace FleetAdvisorSchemaObjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FleetAdvisorSchemaObjectResponse) => any;
    }
    export interface DescribeFleetAdvisorSchemaObjectSummaryResponse {
            /**
                * <p>A collection of <code>FleetAdvisorSchemaObjectResponse</code> objects.</p>
                */
            FleetAdvisorSchemaObjects?: FleetAdvisorSchemaObjectResponse[];
            /**
                * <p>If <code>NextToken</code> is returned, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorSchemaObjectSummaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorSchemaObjectSummaryResponse) => any;
    }
    export interface DescribeFleetAdvisorSchemasRequest {
            /**
                * <p> If you specify any of the following filters, the output includes information for only
                *             those schemas that meet the filter criteria:</p>
                *
                *         <ul>
                *             <li>
                *                <p>
                *                   <code>complexity</code> – The schema's complexity, for example
                *                     <code>Simple</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>database-id</code> – The ID of the schema's database.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>database-ip-address</code> – The IP address of the schema's database.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>database-name</code> – The name of the schema's database.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>database-engine</code> – The name of the schema database's engine.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>original-schema-name</code> – The name of the schema's database's main schema.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>schema-id</code> – The ID of the schema, for example <code>15</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>schema-name</code> – The name of the schema.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>server-ip-address</code> – The IP address of the schema database's server.</p>
                *             </li>
                *          </ul>
                *
                *         <p>An example is: <code>describe-fleet-advisor-schemas --filter
                *                 Name="schema-id",Values="50"</code>
                *          </p>
                */
            Filters?: Filter[];
            /**
                * <p>Sets the maximum number of records returned in the response.</p>
                */
            MaxRecords?: number;
            /**
                * <p>If <code>NextToken</code> is returned by a previous response, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorSchemasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorSchemasRequest) => any;
    }
    /**
        * <p>Describes a database in a Fleet Advisor collector inventory.</p>
        */
    export interface DatabaseShortInfoResponse {
            /**
                * <p>The ID of a database in a Fleet Advisor collector inventory.</p>
                */
            DatabaseId?: string;
            /**
                * <p>The name of a database in a Fleet Advisor collector inventory.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
                */
            DatabaseIpAddress?: string;
            /**
                * <p>The database engine of a database in a Fleet Advisor collector inventory, for example
                *                 <code>PostgreSQL</code>.</p>
                */
            DatabaseEngine?: string;
    }
    export namespace DatabaseShortInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseShortInfoResponse) => any;
    }
    /**
        * <p>Describes a schema in a Fleet Advisor collector inventory.</p>
        */
    export interface SchemaShortInfoResponse {
            /**
                * <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
                */
            SchemaId?: string;
            /**
                * <p>The name of a schema in a Fleet Advisor collector inventory.</p>
                */
            SchemaName?: string;
            /**
                * <p>The ID of a database in a Fleet Advisor collector inventory.</p>
                */
            DatabaseId?: string;
            /**
                * <p>The name of a database in a Fleet Advisor collector inventory.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The IP address of a database in a Fleet Advisor collector inventory.</p>
                */
            DatabaseIpAddress?: string;
    }
    export namespace SchemaShortInfoResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaShortInfoResponse) => any;
    }
    /**
        * <p>Describes a schema in a Fleet Advisor collector inventory.</p>
        */
    export interface SchemaResponse {
            /**
                * <p>The number of lines of code in a schema in a Fleet Advisor collector inventory.</p>
                */
            CodeLineCount?: number;
            /**
                * <p>The size level of the code in a schema in a Fleet Advisor collector inventory.</p>
                */
            CodeSize?: number;
            /**
                * <p>The complexity level of the code in a schema in a Fleet Advisor collector inventory.</p>
                */
            Complexity?: string;
            /**
                * <p>The database server for a schema in a Fleet Advisor collector inventory.</p>
                */
            Server?: ServerShortInfoResponse;
            /**
                * <p>The database for a schema in a Fleet Advisor collector inventory.</p>
                */
            DatabaseInstance?: DatabaseShortInfoResponse;
            /**
                * <p>The ID of a schema in a Fleet Advisor collector inventory.</p>
                */
            SchemaId?: string;
            /**
                * <p>The name of a schema in a Fleet Advisor collector inventory.</p>
                */
            SchemaName?: string;
            /**
                * <p>Describes a schema in a Fleet Advisor collector inventory.</p>
                */
            OriginalSchema?: SchemaShortInfoResponse;
            /**
                * <p>The similarity value for a schema in a Fleet Advisor collector inventory. A higher similarity value
                *             indicates that a schema is likely to be a duplicate.</p>
                */
            Similarity?: number;
    }
    export namespace SchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SchemaResponse) => any;
    }
    export interface DescribeFleetAdvisorSchemasResponse {
            /**
                * <p>A collection of <code>SchemaResponse</code> objects.</p>
                */
            FleetAdvisorSchemas?: SchemaResponse[];
            /**
                * <p>If <code>NextToken</code> is returned, there are more results available. The value of
                *             <code>NextToken</code> is a unique pagination token for each page. Make the call again using the returned
                *             token to retrieve the next page. Keep all other arguments unchanged. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeFleetAdvisorSchemasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetAdvisorSchemasResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeOrderableReplicationInstancesMessage {
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeOrderableReplicationInstancesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrderableReplicationInstancesMessage) => any;
    }
    export enum ReleaseStatusValues {
            BETA = "beta"
    }
    /**
        * <p>In response to the <code>DescribeOrderableReplicationInstances</code> operation, this
        *          object describes an available replication instance. This description includes the
        *          replication instance's type, engine version, and allocated storage.</p>
        */
    export interface OrderableReplicationInstance {
            /**
                * <p>The version of the replication engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The compute and memory capacity of the replication instance as defined for the specified
                *          replication instance class. For example to specify the instance class dms.c4.large, set this parameter to <code>"dms.c4.large"</code>.</p>
                *          <p>For more information on the settings and capacities for the available replication instance classes, see
                *          <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth">
                *             Selecting the right DMS replication instance for your migration</a>.
                *       </p>
                */
            ReplicationInstanceClass?: string;
            /**
                * <p>The type of storage used by the replication instance.</p>
                */
            StorageType?: string;
            /**
                * <p>The minimum amount of storage (in gigabytes) that can be allocated for the replication
                *          instance.</p>
                */
            MinAllocatedStorage?: number;
            /**
                * <p>The minimum amount of storage (in gigabytes) that can be allocated for the replication
                *          instance.</p>
                */
            MaxAllocatedStorage?: number;
            /**
                * <p>The default amount of storage (in gigabytes) that is allocated for the replication
                *          instance.</p>
                */
            DefaultAllocatedStorage?: number;
            /**
                * <p>The amount of storage (in gigabytes) that is allocated for the replication
                *          instance.</p>
                */
            IncludedAllocatedStorage?: number;
            /**
                * <p>List of Availability Zones for this replication instance.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The value returned when the specified <code>EngineVersion</code> of the replication
                *          instance is in Beta or test mode. This indicates some features might not work as expected.</p>
                *          <note>
                *             <p>DMS supports the <code>ReleaseStatus</code> parameter in versions 3.1.4 and later.</p>
                *          </note>
                */
            ReleaseStatus?: ReleaseStatusValues | string;
    }
    export namespace OrderableReplicationInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrderableReplicationInstance) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeOrderableReplicationInstancesResponse {
            /**
                * <p>The order-able replication instances available.</p>
                */
            OrderableReplicationInstances?: OrderableReplicationInstance[];
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeOrderableReplicationInstancesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrderableReplicationInstancesResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribePendingMaintenanceActionsMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn?: string;
            /**
                * <p></p>
                */
            Filters?: Filter[];
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribePendingMaintenanceActionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePendingMaintenanceActionsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribePendingMaintenanceActionsResponse {
            /**
                * <p>The pending maintenance action.</p>
                */
            PendingMaintenanceActions?: ResourcePendingMaintenanceActions[];
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribePendingMaintenanceActionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePendingMaintenanceActionsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeRefreshSchemasStatusMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace DescribeRefreshSchemasStatusMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRefreshSchemasStatusMessage) => any;
    }
    export enum RefreshSchemasStatusTypeValue {
            FAILED = "failed",
            REFRESHING = "refreshing",
            SUCCESSFUL = "successful"
    }
    /**
        * <p>Provides information that describes status of a schema at an endpoint specified by the
        *          <code>DescribeRefreshSchemaStatus</code> operation.</p>
        */
    export interface RefreshSchemasStatus {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn?: string;
            /**
                * <p>The status of the schema.</p>
                */
            Status?: RefreshSchemasStatusTypeValue | string;
            /**
                * <p>The date the schema was last refreshed.</p>
                */
            LastRefreshDate?: Date;
            /**
                * <p>The last failure message for the schema.</p>
                */
            LastFailureMessage?: string;
    }
    export namespace RefreshSchemasStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RefreshSchemasStatus) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeRefreshSchemasStatusResponse {
            /**
                * <p>The status of the schema.</p>
                */
            RefreshSchemasStatus?: RefreshSchemasStatus;
    }
    export namespace DescribeRefreshSchemasStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRefreshSchemasStatusResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationInstancesMessage {
            /**
                * <p>Filters applied to replication instances.</p>
                *          <p>Valid filter names: replication-instance-arn | replication-instance-id |
                *          replication-instance-class | engine-version</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeReplicationInstancesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationInstancesMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationInstancesResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>The replication instances described.</p>
                */
            ReplicationInstances?: ReplicationInstance[];
    }
    export namespace DescribeReplicationInstancesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationInstancesResponse) => any;
    }
    export interface DescribeReplicationInstanceTaskLogsMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn: string | undefined;
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeReplicationInstanceTaskLogsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationInstanceTaskLogsMessage) => any;
    }
    /**
        * <p>Contains metadata for a replication instance task log.</p>
        */
    export interface ReplicationInstanceTaskLog {
            /**
                * <p>The name of the replication task.</p>
                */
            ReplicationTaskName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task.</p>
                */
            ReplicationTaskArn?: string;
            /**
                * <p>The size, in bytes, of the replication task log.</p>
                */
            ReplicationInstanceTaskLogSize?: number;
    }
    export namespace ReplicationInstanceTaskLog {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationInstanceTaskLog) => any;
    }
    export interface DescribeReplicationInstanceTaskLogsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn?: string;
            /**
                * <p>An array of replication task log metadata. Each member of the array contains the
                *          replication task name, ARN, and task log size (in bytes). </p>
                */
            ReplicationInstanceTaskLogs?: ReplicationInstanceTaskLog[];
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeReplicationInstanceTaskLogsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationInstanceTaskLogsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationSubnetGroupsMessage {
            /**
                * <p>Filters applied to replication subnet groups.</p>
                *          <p>Valid filter names: replication-subnet-group-id</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeReplicationSubnetGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationSubnetGroupsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationSubnetGroupsResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>A description of the replication subnet groups.</p>
                */
            ReplicationSubnetGroups?: ReplicationSubnetGroup[];
    }
    export namespace DescribeReplicationSubnetGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationSubnetGroupsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTaskAssessmentResultsMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the task. When this input
                *          parameter is specified, the API returns only one result and ignore the values of the
                *             <code>MaxRecords</code> and <code>Marker</code> parameters. </p>
                */
            ReplicationTaskArn?: string;
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeReplicationTaskAssessmentResultsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTaskAssessmentResultsMessage) => any;
    }
    /**
        * <p> The task assessment report in JSON format. </p>
        */
    export interface ReplicationTaskAssessmentResult {
            /**
                * <p> The replication task identifier of the task on which the task assessment was run.
                *       </p>
                */
            ReplicationTaskIdentifier?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task. </p>
                */
            ReplicationTaskArn?: string;
            /**
                * <p>The date the task assessment was completed. </p>
                */
            ReplicationTaskLastAssessmentDate?: Date;
            /**
                * <p> The status of the task assessment. </p>
                */
            AssessmentStatus?: string;
            /**
                * <p> The file containing the results of the task assessment. </p>
                */
            AssessmentResultsFile?: string;
            /**
                * <p> The task assessment results in JSON format. </p>
                *          <p>The response object only contains this field if you provide <a>DescribeReplicationTaskAssessmentResultsMessage$ReplicationTaskArn</a>
                *            in the request.</p>
                */
            AssessmentResults?: string;
            /**
                * <p> The URL of the S3 object containing the task assessment results. </p>
                *          <p>The response object only contains this field if you provide <a>DescribeReplicationTaskAssessmentResultsMessage$ReplicationTaskArn</a>
                *            in the request.</p>
                */
            S3ObjectUrl?: string;
    }
    export namespace ReplicationTaskAssessmentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationTaskAssessmentResult) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTaskAssessmentResultsResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>- The Amazon S3 bucket where the task assessment report is located. </p>
                */
            BucketName?: string;
            /**
                * <p> The task assessment report. </p>
                */
            ReplicationTaskAssessmentResults?: ReplicationTaskAssessmentResult[];
    }
    export namespace DescribeReplicationTaskAssessmentResultsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTaskAssessmentResultsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTaskAssessmentRunsMessage {
            /**
                * <p>Filters applied to the premigration assessment runs described in the form of key-value pairs.</p>
                *          <p>Valid filter names: <code>replication-task-assessment-run-arn</code>, <code>replication-task-arn</code>,
                *          <code>replication-instance-arn</code>, <code>status</code>
                *          </p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the
                *          specified <code>MaxRecords</code> value, a pagination token called a marker is included in
                *          the response so that the remaining results can be retrieved.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeReplicationTaskAssessmentRunsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTaskAssessmentRunsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTaskAssessmentRunsResponse {
            /**
                * <p>A pagination token returned for you to pass to a subsequent request. If you pass this
                *          token as the <code>Marker</code> value in a subsequent request, the response includes only
                *          records beyond the marker, up to the value specified in the request by
                *             <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>One or more premigration assessment runs as specified by <code>Filters</code>.</p>
                */
            ReplicationTaskAssessmentRuns?: ReplicationTaskAssessmentRun[];
    }
    export namespace DescribeReplicationTaskAssessmentRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTaskAssessmentRunsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTaskIndividualAssessmentsMessage {
            /**
                * <p>Filters applied to the individual assessments described in the form of key-value
                *          pairs.</p>
                *          <p>Valid filter names: <code>replication-task-assessment-run-arn</code>,
                *             <code>replication-task-arn</code>, <code>status</code>
                *          </p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the
                *          specified <code>MaxRecords</code> value, a pagination token called a marker is included in
                *          the response so that the remaining results can be retrieved.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeReplicationTaskIndividualAssessmentsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTaskIndividualAssessmentsMessage) => any;
    }
    /**
        * <p>Provides information that describes an individual assessment from a premigration
        *          assessment run.</p>
        */
    export interface ReplicationTaskIndividualAssessment {
            /**
                * <p>Amazon Resource Name (ARN) of this individual assessment.</p>
                */
            ReplicationTaskIndividualAssessmentArn?: string;
            /**
                * <p>ARN of the premigration assessment run that is created to run this individual
                *          assessment.</p>
                */
            ReplicationTaskAssessmentRunArn?: string;
            /**
                * <p>Name of this individual assessment.</p>
                */
            IndividualAssessmentName?: string;
            /**
                * <p>Individual assessment status.</p>
                *          <p>This status can have one of the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"cancelled"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"error"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"failed"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"passed"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"pending"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"running"</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>Date when this individual assessment was started as part of running the
                *             <code>StartReplicationTaskAssessmentRun</code> operation.</p>
                */
            ReplicationTaskIndividualAssessmentStartDate?: Date;
    }
    export namespace ReplicationTaskIndividualAssessment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationTaskIndividualAssessment) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTaskIndividualAssessmentsResponse {
            /**
                * <p>A pagination token returned for you to pass to a subsequent request. If you pass this
                *          token as the <code>Marker</code> value in a subsequent request, the response includes only
                *          records beyond the marker, up to the value specified in the request by
                *             <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>One or more individual assessments as specified by <code>Filters</code>.</p>
                */
            ReplicationTaskIndividualAssessments?: ReplicationTaskIndividualAssessment[];
    }
    export namespace DescribeReplicationTaskIndividualAssessmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTaskIndividualAssessmentsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTasksMessage {
            /**
                * <p>Filters applied to replication tasks.</p>
                *          <p>Valid filter names: replication-task-arn | replication-task-id | migration-type |
                *          endpoint-arn | replication-instance-arn</p>
                */
            Filters?: Filter[];
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>An option to set to avoid returning information about settings. Use this to reduce
                *          overhead when setting information is too large. To use this option, choose
                *             <code>true</code>; otherwise, choose <code>false</code> (the default).</p>
                */
            WithoutSettings?: boolean;
    }
    export namespace DescribeReplicationTasksMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTasksMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReplicationTasksResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>A description of the replication tasks.</p>
                */
            ReplicationTasks?: ReplicationTask[];
    }
    export namespace DescribeReplicationTasksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReplicationTasksResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeSchemasMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeSchemasMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSchemasMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeSchemasResponse {
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>The described schema.</p>
                */
            Schemas?: string[];
    }
    export namespace DescribeSchemasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSchemasResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeTableStatisticsMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task.</p>
                */
            ReplicationTaskArn: string | undefined;
            /**
                * <p> The maximum number of records to include in the response. If more records exist than
                *          the specified <code>MaxRecords</code> value, a pagination token called a marker is included
                *          in the response so that the remaining results can be retrieved. </p>
                *          <p>Default: 100</p>
                *          <p>Constraints: Minimum 20, maximum 500.</p>
                */
            MaxRecords?: number;
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
            /**
                * <p>Filters applied to table statistics.</p>
                *          <p>Valid filter names: schema-name | table-name | table-state</p>
                *          <p>A combination of filters creates an AND condition where each record matches all
                *          specified filters.</p>
                */
            Filters?: Filter[];
    }
    export namespace DescribeTableStatisticsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTableStatisticsMessage) => any;
    }
    /**
        * <p>Provides a collection of table statistics in response to a request by the
        *          <code>DescribeTableStatistics</code> operation.</p>
        */
    export interface TableStatistics {
            /**
                * <p>The schema name.</p>
                */
            SchemaName?: string;
            /**
                * <p>The name of the table.</p>
                */
            TableName?: string;
            /**
                * <p>The number of insert actions performed on a table.</p>
                */
            Inserts?: number;
            /**
                * <p>The number of delete actions performed on a table.</p>
                */
            Deletes?: number;
            /**
                * <p>The number of update actions performed on a table.</p>
                */
            Updates?: number;
            /**
                * <p>The data definition language (DDL) used to build and modify the structure of your tables.</p>
                */
            Ddls?: number;
            /**
                * <p>The number of rows added during the full load operation.</p>
                */
            FullLoadRows?: number;
            /**
                * <p>The number of rows that failed conditional checks during the full load operation (valid
                *          only for migrations where DynamoDB is the target).</p>
                */
            FullLoadCondtnlChkFailedRows?: number;
            /**
                * <p>The number of rows that failed to load during the full load operation (valid only for
                *          migrations where DynamoDB is the target).</p>
                */
            FullLoadErrorRows?: number;
            /**
                * <p>The time when the full load operation started.</p>
                */
            FullLoadStartTime?: Date;
            /**
                * <p>The time when the full load operation completed.</p>
                */
            FullLoadEndTime?: Date;
            /**
                * <p>A value that indicates if the table was reloaded (<code>true</code>)
                *          or loaded as part of a new full load operation (<code>false</code>).</p>
                */
            FullLoadReloaded?: boolean;
            /**
                * <p>The last time a table was updated.</p>
                */
            LastUpdateTime?: Date;
            /**
                * <p>The state of the tables described.</p>
                *          <p>Valid states: Table does not exist | Before load | Full load | Table completed | Table
                *          cancelled | Table error | Table is being reloaded</p>
                */
            TableState?: string;
            /**
                * <p>The number of records that have yet to be validated.</p>
                */
            ValidationPendingRecords?: number;
            /**
                * <p>The number of records that failed validation.</p>
                */
            ValidationFailedRecords?: number;
            /**
                * <p>The number of records that couldn't be validated.</p>
                */
            ValidationSuspendedRecords?: number;
            /**
                * <p>The validation state of the table.</p>
                *          <p>This parameter can have the following values:</p>
                *          <ul>
                *             <li>
                *                <p>Not enabled – Validation isn't enabled for the table in the migration
                *                task.</p>
                *             </li>
                *             <li>
                *                <p>Pending records – Some records in the table are waiting for validation.</p>
                *             </li>
                *             <li>
                *                <p>Mismatched records – Some records in the table don't match between the source
                *                and target.</p>
                *             </li>
                *             <li>
                *                <p>Suspended records – Some records in the table couldn't be validated.</p>
                *             </li>
                *             <li>
                *                <p>No primary key  –The table couldn't be validated because it has no primary
                *                key.</p>
                *             </li>
                *             <li>
                *                <p>Table error – The table wasn't validated because it's in an error state
                *                and some data wasn't migrated.</p>
                *             </li>
                *             <li>
                *                <p>Validated – All rows in the table are validated. If the table is updated, the
                *                status can change from Validated.</p>
                *             </li>
                *             <li>
                *                <p>Error – The table couldn't be validated because of an unexpected
                *                error.</p>
                *             </li>
                *             <li>
                *                <p>Pending validation – The table is waiting validation.</p>
                *             </li>
                *             <li>
                *                <p>Preparing table – Preparing the table enabled in the migration task for validation.</p>
                *             </li>
                *             <li>
                *                <p>Pending revalidation – All rows in the table are pending validation after the table was updated.</p>
                *             </li>
                *          </ul>
                */
            ValidationState?: string;
            /**
                * <p>Additional details about the state of validation.</p>
                */
            ValidationStateDetails?: string;
    }
    export namespace TableStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableStatistics) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeTableStatisticsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task.</p>
                */
            ReplicationTaskArn?: string;
            /**
                * <p>The table statistics.</p>
                */
            TableStatistics?: TableStatistics[];
            /**
                * <p> An optional pagination token provided by a previous request. If this parameter is
                *          specified, the response includes only records beyond the marker, up to the value specified
                *          by <code>MaxRecords</code>. </p>
                */
            Marker?: string;
    }
    export namespace DescribeTableStatisticsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTableStatisticsResponse) => any;
    }
    export interface ImportCertificateMessage {
            /**
                * <p>A customer-assigned name for the certificate. Identifiers must begin with a letter and
                *          must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or
                *          contain two consecutive hyphens.</p>
                */
            CertificateIdentifier: string | undefined;
            /**
                * <p>The contents of a <code>.pem</code> file, which contains an X.509 certificate.</p>
                */
            CertificatePem?: string;
            /**
                * <p>The location of an imported Oracle Wallet certificate for use with SSL. Provide the name of a <code>.sso</code> file
                *           using the <code>fileb://</code> prefix. You can't provide the certificate inline.</p>
                *           <p>Example: <code>filebase64("${path.root}/rds-ca-2019-root.sso")</code>
                *          </p>
                */
            CertificateWallet?: Uint8Array;
            /**
                * <p>The tags associated with the certificate.</p>
                */
            Tags?: Tag[];
    }
    export namespace ImportCertificateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportCertificateMessage) => any;
    }
    export interface ImportCertificateResponse {
            /**
                * <p>The certificate to be uploaded.</p>
                */
            Certificate?: Certificate;
    }
    export namespace ImportCertificateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportCertificateResponse) => any;
    }
    /**
        * <p>The certificate was not valid.</p>
        */
    export class InvalidCertificateFault extends __BaseException {
            readonly name: "InvalidCertificateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCertificateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface ListTagsForResourceMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the DMS resource to
                *          list tags for. This returns a list of keys (names of tags) created for the resource and
                *          their associated tag values.</p>
                */
            ResourceArn?: string;
            /**
                * <p>List of ARNs that identify multiple DMS resources that you want to list tags for. This
                *          returns a list of keys (tag names) and their associated tag values. It also returns each
                *          tag's associated <code>ResourceArn</code> value, which is the ARN of the resource for which
                *          each listed tag is created. </p>
                */
            ResourceArnList?: string[];
    }
    export namespace ListTagsForResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ListTagsForResourceResponse {
            /**
                * <p>A list of tags for the resource.</p>
                */
            TagList?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyEndpointMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>The database endpoint identifier. Identifiers must begin with a letter and must contain
                *          only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two
                *          consecutive hyphens.</p>
                */
            EndpointIdentifier?: string;
            /**
                * <p>The type of endpoint.  Valid values are <code>source</code> and <code>target</code>.</p>
                */
            EndpointType?: ReplicationEndpointTypeValue | string;
            /**
                * <p>The type of engine for the endpoint. Valid values, depending on the EndpointType,
                *          include
                *          <code>"mysql"</code>, <code>"oracle"</code>, <code>"postgres"</code>,
                *          <code>"mariadb"</code>, <code>"aurora"</code>, <code>"aurora-postgresql"</code>, <code>"opensearch"</code>,
                *          <code>"redshift"</code>, <code>"s3"</code>, <code>"db2"</code>, <code>"azuredb"</code>,
                *          <code>"sybase"</code>, <code>"dynamodb"</code>, <code>"mongodb"</code>,
                *          <code>"kinesis"</code>, <code>"kafka"</code>, <code>"elasticsearch"</code>,
                *          <code>"documentdb"</code>, <code>"sqlserver"</code>, and <code>"neptune"</code>.</p>
                */
            EngineName?: string;
            /**
                * <p>The user name to be used to login to the endpoint database.</p>
                */
            Username?: string;
            /**
                * <p>The password to be used to login to the endpoint database.</p>
                */
            Password?: string;
            /**
                * <p>The name of the server where the endpoint database resides.</p>
                */
            ServerName?: string;
            /**
                * <p>The port used by the endpoint database.</p>
                */
            Port?: number;
            /**
                * <p>The name of the endpoint database. For a MySQL source or target endpoint, do not specify DatabaseName.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Additional attributes associated with the connection. To reset this parameter, pass the
                *          empty string ("") as an argument.</p>
                */
            ExtraConnectionAttributes?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the certificate used for SSL connection.</p>
                */
            CertificateArn?: string;
            /**
                * <p>The SSL mode used to connect to the endpoint.  The default value is <code>none</code>.</p>
                */
            SslMode?: DmsSslModeValue | string;
            /**
                * <p> The Amazon Resource Name (ARN) for the IAM role you want to use to modify
                *          the endpoint. The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn?: string;
            /**
                * <p>The external table definition.</p>
                */
            ExternalTableDefinition?: string;
            /**
                * <p>Settings in JSON format for the target Amazon DynamoDB endpoint. For information about other
                *             available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.DynamoDB.html#CHAP_Target.DynamoDB.ObjectMapping">Using Object Mapping to Migrate
                *             Data to DynamoDB</a> in the <i>Database Migration Service User
                *             Guide.</i>
                *          </p>
                */
            DynamoDbSettings?: DynamoDbSettings;
            /**
                * <p>Settings in JSON format for the target Amazon S3 endpoint. For more information about
                *             the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.S3.html#CHAP_Target.S3.Configuring">Extra
                *             Connection Attributes When Using Amazon S3 as a Target for DMS</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            S3Settings?: S3Settings;
            /**
                * <p>The settings in JSON format for the DMS transfer type of source endpoint. </p>
                *          <p>Attributes include the following:</p>
                *          <ul>
                *             <li>
                *                <p>serviceAccessRoleArn - The Amazon Resource Name (ARN) used by the service access IAM role. The role must allow the <code>iam:PassRole</code> action.</p>
                *             </li>
                *             <li>
                *                <p>BucketName - The name of the S3 bucket to use.</p>
                *             </li>
                *          </ul>
                *          <p>Shorthand syntax for these settings is as follows: <code>ServiceAccessRoleArn=string
                *             ,BucketName=string</code>
                *          </p>
                *          <p>JSON syntax for these settings is as follows: <code>{ "ServiceAccessRoleArn": "string",
                *             "BucketName": "string"} </code>
                *          </p>
                */
            DmsTransferSettings?: DmsTransferSettings;
            /**
                * <p>Settings in JSON format for the source MongoDB endpoint. For more information about the
                *          available settings, see the configuration properties section in <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MongoDB.html#CHAP_Source.MongoDB.Configuration">Endpoint configuration settings
                *             when using MongoDB as a source for Database Migration Service</a> in the
                *          <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            MongoDbSettings?: MongoDbSettings;
            /**
                * <p>Settings in JSON format for the target endpoint for Amazon Kinesis Data Streams. For
                *          more information about the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Kinesis.html#CHAP_Target.Kinesis.ObjectMapping">Using object mapping to
                *             migrate data to a Kinesis data stream</a> in the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            KinesisSettings?: KinesisSettings;
            /**
                * <p>Settings in JSON format for the target Apache Kafka endpoint. For more information about
                *          the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Kafka.html#CHAP_Target.Kafka.ObjectMapping">Using object mapping
                *             to migrate data to a Kafka topic</a> in the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            KafkaSettings?: KafkaSettings;
            /**
                * <p>Settings in JSON format for the target OpenSearch endpoint. For more information
                *          about the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Elasticsearch.html#CHAP_Target.Elasticsearch.Configuration">Extra Connection Attributes When Using OpenSearch as a Target for DMS</a> in
                *          the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            ElasticsearchSettings?: ElasticsearchSettings;
            /**
                * <p>Settings in JSON format for the target Amazon Neptune endpoint. For more information
                *          about the available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Neptune.html#CHAP_Target.Neptune.EndpointSettings">Specifying graph-mapping rules using Gremlin and R2RML for Amazon Neptune as a target</a>
                *          in the <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            NeptuneSettings?: NeptuneSettings;
            /**
                * <p>Provides information that defines an Amazon Redshift endpoint.</p>
                */
            RedshiftSettings?: RedshiftSettings;
            /**
                * <p>Settings in JSON format for the source and target PostgreSQL endpoint. For information
                *          about other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib">Extra connection
                *             attributes when using PostgreSQL as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.PostgreSQL.html#CHAP_Target.PostgreSQL.ConnectionAttrib">
                *             Extra connection attributes when using PostgreSQL as a target for DMS</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            PostgreSQLSettings?: PostgreSQLSettings;
            /**
                * <p>Settings in JSON format for the source and target MySQL endpoint. For information about
                *          other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.MySQL.html#CHAP_Source.MySQL.ConnectionAttrib">Extra connection
                *             attributes when using MySQL as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.MySQL.html#CHAP_Target.MySQL.ConnectionAttrib">Extra
                *             connection attributes when using a MySQL-compatible database as a target for DMS</a> in the <i>Database Migration Service User
                *          Guide.</i>
                *          </p>
                */
            MySQLSettings?: MySQLSettings;
            /**
                * <p>Settings in JSON format for the source and target Oracle endpoint. For information about
                *          other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.Oracle.html#CHAP_Source.Oracle.ConnectionAttrib">Extra connection
                *             attributes when using Oracle as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.Oracle.html#CHAP_Target.Oracle.ConnectionAttrib">
                *             Extra connection attributes when using Oracle as a target for DMS</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            OracleSettings?: OracleSettings;
            /**
                * <p>Settings in JSON format for the source and target SAP ASE endpoint. For information
                *          about other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.SAP.html#CHAP_Source.SAP.ConnectionAttrib">Extra connection attributes
                *             when using SAP ASE as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.SAP.html#CHAP_Target.SAP.ConnectionAttrib">Extra connection attributes
                *             when using SAP ASE as a target for DMS</a> in the <i>Database Migration Service
                *                 User Guide.</i>
                *          </p>
                */
            SybaseSettings?: SybaseSettings;
            /**
                * <p>Settings in JSON format for the source and target Microsoft SQL Server endpoint. For
                *          information about other available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.SQLServer.html#CHAP_Source.SQLServer.ConnectionAttrib">Extra connection
                *             attributes when using SQL Server as a source for DMS</a> and <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Target.SQLServer.html#CHAP_Target.SQLServer.ConnectionAttrib">
                *             Extra connection attributes when using SQL Server as a target for DMS</a> in the
                *             <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            MicrosoftSQLServerSettings?: MicrosoftSQLServerSettings;
            /**
                * <p>Settings in JSON format for the source IBM Db2 LUW endpoint. For information about other
                *          available settings, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.DB2.html#CHAP_Source.DB2.ConnectionAttrib">Extra connection attributes
                *             when using Db2 LUW as a source for DMS</a> in the <i>Database Migration Service
                *                 User Guide.</i>
                *          </p>
                */
            IBMDb2Settings?: IBMDb2Settings;
            /**
                * <p>Settings in JSON format for the source DocumentDB endpoint. For more information about the
                *          available settings, see the configuration properties section in <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.DocumentDB.html"> Using DocumentDB as a Target for Database Migration Service
                *              </a> in the <i>Database Migration Service User
                *                Guide.</i>
                *          </p>
                */
            DocDbSettings?: DocDbSettings;
            /**
                * <p>Settings in JSON format for the Redis target endpoint.</p>
                */
            RedisSettings?: RedisSettings;
            /**
                * <p>If this attribute is Y, the current call to <code>ModifyEndpoint</code> replaces all
                *          existing endpoint settings with the exact settings that you specify in this call. If this
                *          attribute is N, the current call to <code>ModifyEndpoint</code> does two things: </p>
                *          <ul>
                *             <li>
                *                <p>It replaces any endpoint settings that already exist with new values, for settings with the
                *                same names.</p>
                *             </li>
                *             <li>
                *                <p>It creates new endpoint settings that you specify in the call, for settings with different
                *                names. </p>
                *             </li>
                *          </ul>
                *          <p>For example, if you call <code>create-endpoint ... --endpoint-settings '{"a":1}'
                *             ...</code>, the endpoint has the following endpoint settings: <code>'{"a":1}'</code>. If
                *          you then call <code>modify-endpoint ... --endpoint-settings '{"b":2}' ...</code> for the
                *          same endpoint, the endpoint has the following settings: <code>'{"a":1,"b":2}'</code>. </p>
                *          <p>However, suppose that you follow this with a call to <code>modify-endpoint ...
                *             --endpoint-settings '{"b":2}' --exact-settings ...</code> for that same endpoint again.
                *          Then the endpoint has the following settings: <code>'{"b":2}'</code>. All existing settings
                *          are replaced with the exact settings that you specify. </p>
                */
            ExactSettings?: boolean;
            /**
                * <p>Settings in JSON format for the source GCP MySQL endpoint.</p>
                */
            GcpMySQLSettings?: GcpMySQLSettings;
    }
    export namespace ModifyEndpointMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEndpointMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyEndpointResponse {
            /**
                * <p>The modified endpoint.</p>
                */
            Endpoint?: Endpoint;
    }
    export namespace ModifyEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEndpointResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyEventSubscriptionMessage {
            /**
                * <p>The name of the DMS event notification subscription to be modified.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p> The Amazon Resource Name (ARN) of the Amazon SNS topic created for event notification.
                *          The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p> The type of DMS resource that generates the events you want to subscribe to. </p>
                *          <p>Valid values: replication-instance | replication-task</p>
                */
            SourceType?: string;
            /**
                * <p> A list of event categories for a source type that you want to subscribe to. Use the
                *             <code>DescribeEventCategories</code> action to see a list of event categories. </p>
                */
            EventCategories?: string[];
            /**
                * <p> A Boolean value; set to <b>true</b> to activate the
                *          subscription. </p>
                */
            Enabled?: boolean;
    }
    export namespace ModifyEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEventSubscriptionMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyEventSubscriptionResponse {
            /**
                * <p>The modified event subscription.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace ModifyEventSubscriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEventSubscriptionResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyReplicationInstanceMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn: string | undefined;
            /**
                * <p>The amount of storage (in gigabytes) to be allocated for the replication
                *          instance.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Indicates whether the changes should be applied immediately or during the next
                *          maintenance window.</p>
                */
            ApplyImmediately?: boolean;
            /**
                * <p>The compute and memory capacity of the replication instance as defined for the specified
                *          replication instance class. For example to specify the instance class dms.c4.large, set this parameter to <code>"dms.c4.large"</code>.</p>
                *          <p>For more information on the settings and capacities for the available replication instance classes, see
                *          <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth">
                *             Selecting the right DMS replication instance for your migration</a>.
                *       </p>
                */
            ReplicationInstanceClass?: string;
            /**
                * <p> Specifies the VPC security group to be used with the replication instance. The VPC
                *          security group must work with the VPC containing the replication instance. </p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The weekly time range (in UTC) during which system maintenance can occur, which might
                *          result in an outage. Changing this parameter does not result in an outage, except in the
                *          following situation, and the change is asynchronously applied as soon as possible. If
                *          moving this window to the current time, there must be at least 30 minutes between the
                *          current time and end of the window to ensure pending changes are applied.</p>
                *          <p>Default: Uses existing setting</p>
                *          <p>Format: ddd:hh24:mi-ddd:hh24:mi</p>
                *          <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p>
                *          <p>Constraints: Must be at least 30 minutes</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p> Specifies whether the replication instance is a Multi-AZ deployment. You can't set the
                *             <code>AvailabilityZone</code> parameter if the Multi-AZ parameter is set to
                *             <code>true</code>. </p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The engine version number of the replication instance.</p>
                *          <p>When modifying a major engine version of an instance, also set
                *          <code>AllowMajorVersionUpgrade</code> to <code>true</code>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Indicates that major version upgrades are allowed. Changing this parameter does not
                *          result in an outage, and the change is asynchronously applied as soon as possible.</p>
                *          <p>This parameter must be set to <code>true</code> when specifying a value for the
                *             <code>EngineVersion</code> parameter that is a different major version than the
                *          replication instance's current version.</p>
                */
            AllowMajorVersionUpgrade?: boolean;
            /**
                * <p>A value that indicates that minor version upgrades are applied automatically to the
                *          replication instance during the maintenance window. Changing this parameter doesn't result
                *          in an outage, except in the case described following. The change is asynchronously applied
                *          as soon as possible. </p>
                *          <p>An outage does result if these factors apply: </p>
                *          <ul>
                *             <li>
                *                <p>This parameter is set to <code>true</code> during the maintenance window.</p>
                *             </li>
                *             <li>
                *                <p>A newer minor version is available. </p>
                *             </li>
                *             <li>
                *                <p>DMS has enabled automatic patching for the given engine version. </p>
                *             </li>
                *          </ul>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The replication instance identifier. This parameter is stored as a lowercase
                *          string.</p>
                */
            ReplicationInstanceIdentifier?: string;
    }
    export namespace ModifyReplicationInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyReplicationInstanceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyReplicationInstanceResponse {
            /**
                * <p>The modified replication instance.</p>
                */
            ReplicationInstance?: ReplicationInstance;
    }
    export namespace ModifyReplicationInstanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyReplicationInstanceResponse) => any;
    }
    /**
        * <p>An upgrade dependency is preventing the database migration.</p>
        */
    export class UpgradeDependencyFailureFault extends __BaseException {
            readonly name: "UpgradeDependencyFailureFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UpgradeDependencyFailureFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface ModifyReplicationSubnetGroupMessage {
            /**
                * <p>The name of the replication instance subnet group.</p>
                */
            ReplicationSubnetGroupIdentifier: string | undefined;
            /**
                * <p>A description for the replication instance subnet group.</p>
                */
            ReplicationSubnetGroupDescription?: string;
            /**
                * <p>A list of subnet IDs.</p>
                */
            SubnetIds: string[] | undefined;
    }
    export namespace ModifyReplicationSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyReplicationSubnetGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyReplicationSubnetGroupResponse {
            /**
                * <p>The modified replication subnet group.</p>
                */
            ReplicationSubnetGroup?: ReplicationSubnetGroup;
    }
    export namespace ModifyReplicationSubnetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyReplicationSubnetGroupResponse) => any;
    }
    /**
        * <p>The specified subnet is already in use.</p>
        */
    export class SubnetAlreadyInUse extends __BaseException {
            readonly name: "SubnetAlreadyInUse";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubnetAlreadyInUse, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface ModifyReplicationTaskMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task.</p>
                */
            ReplicationTaskArn: string | undefined;
            /**
                * <p>The replication task identifier.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain 1-255 alphanumeric characters or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                <p>Cannot end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            ReplicationTaskIdentifier?: string;
            /**
                * <p>The migration type. Valid values: <code>full-load</code> | <code>cdc</code> | <code>full-load-and-cdc</code>
                *          </p>
                */
            MigrationType?: MigrationTypeValue | string;
            /**
                * <p>When using the CLI or boto3, provide the path of the JSON file that contains the
                *          table mappings. Precede the path with <code>file://</code>.  For example,
                *          <code>--table-mappings file://mappingfile.json</code>. When working with the DMS  API,
                *          provide the JSON as the parameter value.
                *     </p>
                */
            TableMappings?: string;
            /**
                * <p>JSON file that contains settings for the task, such as task metadata settings.</p>
                */
            ReplicationTaskSettings?: string;
            /**
                * <p>Indicates the start time for a change data capture (CDC) operation. Use either
                *          CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start.
                *          Specifying both values results in an error.</p>
                *          <p>Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”</p>
                */
            CdcStartTime?: Date;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to start. Use either
                *          CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start.
                *          Specifying both values results in an error.</p>
                *          <p> The value can be in date, checkpoint, or LSN/SCN format.</p>
                *          <p>Date Example: --cdc-start-position “2018-03-08T12:12:12”</p>
                *          <p>Checkpoint Example: --cdc-start-position
                *          "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93"</p>
                *          <p>LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”</p>
                *          <note>
                *             <p>When you use this task setting with a source PostgreSQL database, a logical
                *             replication slot should already be created and associated with the source endpoint. You
                *             can verify this by setting the <code>slotName</code> extra connection attribute to the
                *             name of this logical replication slot. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib">Extra Connection Attributes When Using PostgreSQL as a Source
                *                for DMS</a>.</p>
                *          </note>
                */
            CdcStartPosition?: string;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to stop. The value can be
                *          either server time or commit time.</p>
                *          <p>Server time example: --cdc-stop-position “server_time:2018-02-09T12:12:12”</p>
                *          <p>Commit time example: --cdc-stop-position “commit_time: 2018-02-09T12:12:12 “</p>
                */
            CdcStopPosition?: string;
            /**
                * <p>Supplemental information that the task requires to migrate the data for certain source and target endpoints.
                *             For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.TaskData.html">Specifying Supplemental Data for Task Settings</a> in the
                *          <i>Database Migration Service User Guide.</i>
                *          </p>
                */
            TaskData?: string;
    }
    export namespace ModifyReplicationTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyReplicationTaskMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyReplicationTaskResponse {
            /**
                * <p>The replication task that was modified.</p>
                */
            ReplicationTask?: ReplicationTask;
    }
    export namespace ModifyReplicationTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyReplicationTaskResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface MoveReplicationTaskMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the task that you want to move.</p>
                */
            ReplicationTaskArn: string | undefined;
            /**
                * <p>The ARN of the replication instance where you want to move the task to.</p>
                */
            TargetReplicationInstanceArn: string | undefined;
    }
    export namespace MoveReplicationTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MoveReplicationTaskMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface MoveReplicationTaskResponse {
            /**
                * <p>The replication task that was moved.</p>
                */
            ReplicationTask?: ReplicationTask;
    }
    export namespace MoveReplicationTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MoveReplicationTaskResponse) => any;
    }
    export interface RebootReplicationInstanceMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn: string | undefined;
            /**
                * <p>If this parameter is <code>true</code>, the reboot is conducted through a Multi-AZ
                *          failover. If the instance isn't configured for Multi-AZ, then you can't specify
                *          <code>true</code>.  ( <code>--force-planned-failover</code> and <code>--force-failover</code> can't both be set to <code>true</code>.)</p>
                */
            ForceFailover?: boolean;
            /**
                * <p>If this parameter is <code>true</code>, the reboot is conducted through a planned Multi-AZ failover
                *          where resources are released and cleaned up prior to conducting the failover.
                *          If the instance isn''t configured for Multi-AZ, then you can't specify <code>true</code>.
                *          ( <code>--force-planned-failover</code> and <code>--force-failover</code> can't both be set to <code>true</code>.)</p>
                */
            ForcePlannedFailover?: boolean;
    }
    export namespace RebootReplicationInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootReplicationInstanceMessage) => any;
    }
    export interface RebootReplicationInstanceResponse {
            /**
                * <p>The replication instance that is being rebooted. </p>
                */
            ReplicationInstance?: ReplicationInstance;
    }
    export namespace RebootReplicationInstanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootReplicationInstanceResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface RefreshSchemasMessage {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn: string | undefined;
    }
    export namespace RefreshSchemasMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RefreshSchemasMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface RefreshSchemasResponse {
            /**
                * <p>The status of the refreshed schema.</p>
                */
            RefreshSchemasStatus?: RefreshSchemasStatus;
    }
    export namespace RefreshSchemasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RefreshSchemasResponse) => any;
    }
    export enum ReloadOptionValue {
            DATA_RELOAD = "data-reload",
            VALIDATE_ONLY = "validate-only"
    }
    /**
        * <p>Provides the name of the schema and table to be reloaded.</p>
        */
    export interface TableToReload {
            /**
                * <p>The schema name of the table to be reloaded.</p>
                */
            SchemaName: string | undefined;
            /**
                * <p>The table name of the table to be reloaded.</p>
                */
            TableName: string | undefined;
    }
    export namespace TableToReload {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TableToReload) => any;
    }
    export interface ReloadTablesMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task. </p>
                */
            ReplicationTaskArn: string | undefined;
            /**
                * <p>The name and schema of the table to be reloaded. </p>
                */
            TablesToReload: TableToReload[] | undefined;
            /**
                * <p>Options for reload. Specify <code>data-reload</code> to reload the data and re-validate
                *          it if validation is enabled. Specify <code>validate-only</code> to re-validate the table.
                *          This option applies only when validation is enabled for the task. </p>
                *          <p>Valid values: data-reload, validate-only</p>
                *          <p>Default value is data-reload.</p>
                */
            ReloadOption?: ReloadOptionValue | string;
    }
    export namespace ReloadTablesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReloadTablesMessage) => any;
    }
    export interface ReloadTablesResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task. </p>
                */
            ReplicationTaskArn?: string;
    }
    export namespace ReloadTablesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReloadTablesResponse) => any;
    }
    /**
        * <p>Removes one or more tags from an DMS resource.</p>
        */
    export interface RemoveTagsFromResourceMessage {
            /**
                * <p>An DMS resource from which you want to remove tag(s). The value for this parameter is an Amazon Resource Name (ARN).</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag key (name) of the tag to be removed.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace RemoveTagsFromResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsFromResourceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface RemoveTagsFromResourceResponse {
    }
    export namespace RemoveTagsFromResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsFromResourceResponse) => any;
    }
    export interface RunFleetAdvisorLsaAnalysisResponse {
            /**
                * <p>The ID of the LSA analysis run.</p>
                */
            LsaAnalysisId?: string;
            /**
                * <p>The status of the LSA analysis, for example <code>COMPLETED</code>.</p>
                */
            Status?: string;
    }
    export namespace RunFleetAdvisorLsaAnalysisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RunFleetAdvisorLsaAnalysisResponse) => any;
    }
    export enum StartReplicationTaskTypeValue {
            RELOAD_TARGET = "reload-target",
            RESUME_PROCESSING = "resume-processing",
            START_REPLICATION = "start-replication"
    }
    /**
        * <p></p>
        */
    export interface StartReplicationTaskMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication task to be started.</p>
                */
            ReplicationTaskArn: string | undefined;
            /**
                * <p>The type of replication task to start.</p>
                *          <p>When the migration type is <code>full-load</code> or <code>full-load-and-cdc</code>, the only valid value
                *            for the first run of the task is <code>start-replication</code>. You use <code>reload-target</code> to restart
                *        the task and <code>resume-processing</code> to resume the task.</p>
                *          <p>When the migration type is <code>cdc</code>, you use <code>start-replication</code> to start or restart
                *        the task, and <code>resume-processing</code> to resume the task. <code>reload-target</code> is not a valid value for
                *        a task with migration type of <code>cdc</code>.</p>
                */
            StartReplicationTaskType: StartReplicationTaskTypeValue | string | undefined;
            /**
                * <p>Indicates the start time for a change data capture (CDC) operation. Use either
                *          CdcStartTime or CdcStartPosition to specify when you want a CDC operation to start.
                *          Specifying both values results in an error.</p>
                *          <p>Timestamp Example: --cdc-start-time “2018-03-08T12:12:12”</p>
                */
            CdcStartTime?: Date;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to start. Use either
                *          CdcStartPosition or CdcStartTime to specify when you want a CDC operation to start.
                *          Specifying both values results in an error.</p>
                *          <p> The value can be in date, checkpoint, or LSN/SCN format.</p>
                *          <p>Date Example: --cdc-start-position “2018-03-08T12:12:12”</p>
                *          <p>Checkpoint Example: --cdc-start-position
                *          "checkpoint:V1#27#mysql-bin-changelog.157832:1975:-1:2002:677883278264080:mysql-bin-changelog.157832:1876#0#0#*#0#93"</p>
                *          <p>LSN Example: --cdc-start-position “mysql-bin-changelog.000024:373”</p>
                *          <note>
                *             <p>When you use this task setting with a source PostgreSQL database, a logical
                *             replication slot should already be created and associated with the source endpoint. You
                *             can verify this by setting the <code>slotName</code> extra connection attribute to the
                *             name of this logical replication slot. For more information, see <a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib">Extra Connection Attributes When Using PostgreSQL as a Source
                *                for DMS</a>.</p>
                *          </note>
                */
            CdcStartPosition?: string;
            /**
                * <p>Indicates when you want a change data capture (CDC) operation to stop. The value can be
                *          either server time or commit time.</p>
                *          <p>Server time example: --cdc-stop-position “server_time:2018-02-09T12:12:12”</p>
                *          <p>Commit time example: --cdc-stop-position “commit_time: 2018-02-09T12:12:12 “</p>
                */
            CdcStopPosition?: string;
    }
    export namespace StartReplicationTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplicationTaskMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface StartReplicationTaskResponse {
            /**
                * <p>The replication task started.</p>
                */
            ReplicationTask?: ReplicationTask;
    }
    export namespace StartReplicationTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplicationTaskResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface StartReplicationTaskAssessmentMessage {
            /**
                * <p> The Amazon Resource Name (ARN) of the replication task. </p>
                */
            ReplicationTaskArn: string | undefined;
    }
    export namespace StartReplicationTaskAssessmentMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplicationTaskAssessmentMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface StartReplicationTaskAssessmentResponse {
            /**
                * <p> The assessed replication task. </p>
                */
            ReplicationTask?: ReplicationTask;
    }
    export namespace StartReplicationTaskAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplicationTaskAssessmentResponse) => any;
    }
    /**
        * <p>An Key Management Service (KMS) error is preventing access to KMS.</p>
        */
    export class KMSFault extends __BaseException {
            readonly name: "KMSFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface StartReplicationTaskAssessmentRunMessage {
            /**
                * <p>Amazon Resource Name (ARN) of the migration task associated with the premigration
                *          assessment run that you want to start.</p>
                */
            ReplicationTaskArn: string | undefined;
            /**
                * <p>ARN of the service role needed to start the assessment run. The role must allow the <code>iam:PassRole</code> action.</p>
                */
            ServiceAccessRoleArn: string | undefined;
            /**
                * <p>Amazon S3 bucket where you want DMS to store the results of this assessment
                *          run.</p>
                */
            ResultLocationBucket: string | undefined;
            /**
                * <p>Folder within an Amazon S3 bucket where you want DMS to store the results of this assessment
                *          run.</p>
                */
            ResultLocationFolder?: string;
            /**
                * <p>Encryption mode that you can specify to encrypt the results of this assessment run. If
                *          you don't specify this request parameter, DMS stores the assessment run results
                *          without encryption. You can specify one of the options following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>"SSE_S3"</code> – The server-side encryption provided as a default by
                *                Amazon S3.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>"SSE_KMS"</code> – Key Management Service (KMS) encryption.
                *                This encryption can use either a custom KMS encryption key that you specify or the
                *                default KMS encryption key that DMS provides.</p>
                *             </li>
                *          </ul>
                */
            ResultEncryptionMode?: string;
            /**
                * <p>ARN of a custom KMS encryption key that you specify when you set
                *             <code>ResultEncryptionMode</code> to <code>"SSE_KMS</code>".</p>
                */
            ResultKmsKeyArn?: string;
            /**
                * <p>Unique name to identify the assessment run.</p>
                */
            AssessmentRunName: string | undefined;
            /**
                * <p>Space-separated list of names for specific individual assessments that you want to
                *          include. These names come from the default list of individual assessments that DMS
                *          supports for the associated migration task. This task is specified by
                *             <code>ReplicationTaskArn</code>.</p>
                *          <note>
                *             <p>You can't set a value for <code>IncludeOnly</code> if you also set a value for
                *             <code>Exclude</code> in the API operation. </p>
                *             <p>To identify the names of the default individual assessments that DMS
                *             supports for the associated migration task, run the
                *             <code>DescribeApplicableIndividualAssessments</code> operation using its own
                *             <code>ReplicationTaskArn</code> request parameter.</p>
                *          </note>
                */
            IncludeOnly?: string[];
            /**
                * <p>Space-separated list of names for specific individual assessments that you want to
                *          exclude. These names come from the default list of individual assessments that DMS
                *          supports for the associated migration task. This task is specified by
                *             <code>ReplicationTaskArn</code>.</p>
                *          <note>
                *             <p>You can't set a value for <code>Exclude</code> if you also set a value for
                *             <code>IncludeOnly</code> in the API operation.</p>
                *             <p>To identify the names of the default individual assessments that DMS
                *             supports for the associated migration task, run the
                *             <code>DescribeApplicableIndividualAssessments</code> operation using its own
                *             <code>ReplicationTaskArn</code> request parameter.</p>
                *          </note>
                */
            Exclude?: string[];
    }
    export namespace StartReplicationTaskAssessmentRunMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplicationTaskAssessmentRunMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface StartReplicationTaskAssessmentRunResponse {
            /**
                * <p>The premigration assessment run that was started.</p>
                */
            ReplicationTaskAssessmentRun?: ReplicationTaskAssessmentRun;
    }
    export namespace StartReplicationTaskAssessmentRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartReplicationTaskAssessmentRunResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface StopReplicationTaskMessage {
            /**
                * <p>The Amazon Resource Name(ARN) of the replication task to be stopped.</p>
                */
            ReplicationTaskArn: string | undefined;
    }
    export namespace StopReplicationTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopReplicationTaskMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface StopReplicationTaskResponse {
            /**
                * <p>The replication task stopped.</p>
                */
            ReplicationTask?: ReplicationTask;
    }
    export namespace StopReplicationTaskResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopReplicationTaskResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface TestConnectionMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the replication instance.</p>
                */
            ReplicationInstanceArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.</p>
                */
            EndpointArn: string | undefined;
    }
    export namespace TestConnectionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestConnectionMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface TestConnectionResponse {
            /**
                * <p>The connection tested.</p>
                */
            Connection?: Connection;
    }
    export namespace TestConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestConnectionResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface UpdateSubscriptionsToEventBridgeMessage {
            /**
                * <p>When set to true, this operation migrates DMS subscriptions for Amazon SNS
                *          notifications no matter what your replication instance version is. If not set or set to
                *          false, this operation runs only when all your replication instances are from DMS
                *          version 3.4.6 or higher.
                *       </p>
                */
            ForceMove?: boolean;
    }
    export namespace UpdateSubscriptionsToEventBridgeMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubscriptionsToEventBridgeMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface UpdateSubscriptionsToEventBridgeResponse {
            /**
                * <p>A string that indicates how many event subscriptions were migrated and how many remain to be migrated.</p>
                */
            Result?: string;
    }
    export namespace UpdateSubscriptionsToEventBridgeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubscriptionsToEventBridgeResponse) => any;
    }
}

declare module '@aws-sdk/client-database-migration-service/node_modules/@aws-sdk/client-database-migration-service/dist-types/models/DatabaseMigrationServiceServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from DatabaseMigrationService service.
        */
    export class DatabaseMigrationServiceServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

