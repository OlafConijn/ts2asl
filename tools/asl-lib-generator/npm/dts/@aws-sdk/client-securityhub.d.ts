// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-securityhub' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AcceptAdministratorInvitationCommandInput, AcceptAdministratorInvitationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/AcceptAdministratorInvitationCommand";
    import { AcceptInvitationCommandInput, AcceptInvitationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/AcceptInvitationCommand";
    import { BatchDisableStandardsCommandInput, BatchDisableStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchDisableStandardsCommand";
    import { BatchEnableStandardsCommandInput, BatchEnableStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchEnableStandardsCommand";
    import { BatchImportFindingsCommandInput, BatchImportFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchImportFindingsCommand";
    import { BatchUpdateFindingsCommandInput, BatchUpdateFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchUpdateFindingsCommand";
    import { CreateActionTargetCommandInput, CreateActionTargetCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateActionTargetCommand";
    import { CreateFindingAggregatorCommandInput, CreateFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateFindingAggregatorCommand";
    import { CreateInsightCommandInput, CreateInsightCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateInsightCommand";
    import { CreateMembersCommandInput, CreateMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateMembersCommand";
    import { DeclineInvitationsCommandInput, DeclineInvitationsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeclineInvitationsCommand";
    import { DeleteActionTargetCommandInput, DeleteActionTargetCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteActionTargetCommand";
    import { DeleteFindingAggregatorCommandInput, DeleteFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteFindingAggregatorCommand";
    import { DeleteInsightCommandInput, DeleteInsightCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteInsightCommand";
    import { DeleteInvitationsCommandInput, DeleteInvitationsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteInvitationsCommand";
    import { DeleteMembersCommandInput, DeleteMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteMembersCommand";
    import { DescribeActionTargetsCommandInput, DescribeActionTargetsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeActionTargetsCommand";
    import { DescribeHubCommandInput, DescribeHubCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeHubCommand";
    import { DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeOrganizationConfigurationCommand";
    import { DescribeProductsCommandInput, DescribeProductsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeProductsCommand";
    import { DescribeStandardsCommandInput, DescribeStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeStandardsCommand";
    import { DescribeStandardsControlsCommandInput, DescribeStandardsControlsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeStandardsControlsCommand";
    import { DisableImportFindingsForProductCommandInput, DisableImportFindingsForProductCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableImportFindingsForProductCommand";
    import { DisableOrganizationAdminAccountCommandInput, DisableOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableOrganizationAdminAccountCommand";
    import { DisableSecurityHubCommandInput, DisableSecurityHubCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableSecurityHubCommand";
    import { DisassociateFromAdministratorAccountCommandInput, DisassociateFromAdministratorAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateFromAdministratorAccountCommand";
    import { DisassociateFromMasterAccountCommandInput, DisassociateFromMasterAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateFromMasterAccountCommand";
    import { DisassociateMembersCommandInput, DisassociateMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateMembersCommand";
    import { EnableImportFindingsForProductCommandInput, EnableImportFindingsForProductCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableImportFindingsForProductCommand";
    import { EnableOrganizationAdminAccountCommandInput, EnableOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableOrganizationAdminAccountCommand";
    import { EnableSecurityHubCommandInput, EnableSecurityHubCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableSecurityHubCommand";
    import { GetAdministratorAccountCommandInput, GetAdministratorAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetAdministratorAccountCommand";
    import { GetEnabledStandardsCommandInput, GetEnabledStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetEnabledStandardsCommand";
    import { GetFindingAggregatorCommandInput, GetFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetFindingAggregatorCommand";
    import { GetFindingsCommandInput, GetFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetFindingsCommand";
    import { GetInsightResultsCommandInput, GetInsightResultsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInsightResultsCommand";
    import { GetInsightsCommandInput, GetInsightsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInsightsCommand";
    import { GetInvitationsCountCommandInput, GetInvitationsCountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInvitationsCountCommand";
    import { GetMasterAccountCommandInput, GetMasterAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetMasterAccountCommand";
    import { GetMembersCommandInput, GetMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetMembersCommand";
    import { InviteMembersCommandInput, InviteMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/InviteMembersCommand";
    import { ListEnabledProductsForImportCommandInput, ListEnabledProductsForImportCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListEnabledProductsForImportCommand";
    import { ListFindingAggregatorsCommandInput, ListFindingAggregatorsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListFindingAggregatorsCommand";
    import { ListInvitationsCommandInput, ListInvitationsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListInvitationsCommand";
    import { ListMembersCommandInput, ListMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListMembersCommand";
    import { ListOrganizationAdminAccountsCommandInput, ListOrganizationAdminAccountsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListOrganizationAdminAccountsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListTagsForResourceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UntagResourceCommand";
    import { UpdateActionTargetCommandInput, UpdateActionTargetCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateActionTargetCommand";
    import { UpdateFindingAggregatorCommandInput, UpdateFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateFindingAggregatorCommand";
    import { UpdateFindingsCommandInput, UpdateFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateFindingsCommand";
    import { UpdateInsightCommandInput, UpdateInsightCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateInsightCommand";
    import { UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateOrganizationConfigurationCommand";
    import { UpdateSecurityHubConfigurationCommandInput, UpdateSecurityHubConfigurationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateSecurityHubConfigurationCommand";
    import { UpdateStandardsControlCommandInput, UpdateStandardsControlCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateStandardsControlCommand";
    import { SecurityHubClient } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    /**
        * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status
        *          of your environment based on controls from supported security standards. Security Hub collects
        *          security data from Amazon Web Services accounts, services, and integrated third-party products and helps
        *          you analyze security trends in your environment to identify the highest priority security
        *          issues. For more information about Security Hub, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html">
        *                <i>Security HubUser
        *             Guide</i>
        *             </a>.</p>
        *          <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services
        *          Region that is currently active or in the specific Amazon Web Services Region that you specify in your
        *          request. Any configuration or settings change that results from the operation is applied
        *          only to that Region. To make the same change in other Regions, execute the same command for
        *          each Region to apply the change to.</p>
        *          <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of
        *          the member account with the administrator account is created only in the <code>us-west-2</code>
        *          Region. Security Hub must be enabled for the member account in the same Region that the invitation
        *          was sent from.</p>
        *          <p>The following throttling limits apply to using Security Hub API operations.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1
        *                request per second, <code>BurstLimit</code> of 1 request per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second.
        *                   <code>BurstLimit</code> of 6 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second.
        *             <code>BurstLimit</code> of 30 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second.
        *             <code>BurstLimit</code> of 30 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateStandardsControl</code> - <code>RateLimit</code> of
        *                1 request per second, <code>BurstLimit</code> of 5 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>All other operations - <code>RateLimit</code> of 10 requests per second.
        *                   <code>BurstLimit</code> of 30 requests per second.</p>
        *             </li>
        *          </ul>
        */
    export class SecurityHub extends SecurityHubClient {
            /**
                * <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
                *          account that the invitation was sent from.</p>
                *          <p>This operation is only used by member accounts that are not added through
                *          Organizations.</p>
                *          <p>When the member account accepts the invitation, permission is granted to the administrator
                *          account to view findings generated in the member account.</p>
                */
            acceptAdministratorInvitation(args: AcceptAdministratorInvitationCommandInput, options?: __HttpHandlerOptions): Promise<AcceptAdministratorInvitationCommandOutput>;
            acceptAdministratorInvitation(args: AcceptAdministratorInvitationCommandInput, cb: (err: any, data?: AcceptAdministratorInvitationCommandOutput) => void): void;
            acceptAdministratorInvitation(args: AcceptAdministratorInvitationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptAdministratorInvitationCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>This method is deprecated. Instead, use <code>AcceptAdministratorInvitation</code>.</p>
                *          <p>The Security Hub console continues to use <code>AcceptInvitation</code>. It will eventually change to use <code>AcceptAdministratorInvitation</code>. Any IAM policies that specifically control access to this function must continue to use <code>AcceptInvitation</code>. You should also add <code>AcceptAdministratorInvitation</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>AcceptAdministratorInvitation</code>.</p>
                *          <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
                *          account that the invitation was sent from.</p>
                *          <p>This operation is only used by member accounts that are not added through
                *          Organizations.</p>
                *          <p>When the member account accepts the invitation, permission is granted to the administrator
                *          account to view findings generated in the member account.</p>
                */
            acceptInvitation(args: AcceptInvitationCommandInput, options?: __HttpHandlerOptions): Promise<AcceptInvitationCommandOutput>;
            acceptInvitation(args: AcceptInvitationCommandInput, cb: (err: any, data?: AcceptInvitationCommandOutput) => void): void;
            acceptInvitation(args: AcceptInvitationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptInvitationCommandOutput) => void): void;
            /**
                * <p>Disables the standards specified by the provided
                *          <code>StandardsSubscriptionArns</code>.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a> section of the <i>Security Hub User
                *          Guide</i>.</p>
                */
            batchDisableStandards(args: BatchDisableStandardsCommandInput, options?: __HttpHandlerOptions): Promise<BatchDisableStandardsCommandOutput>;
            batchDisableStandards(args: BatchDisableStandardsCommandInput, cb: (err: any, data?: BatchDisableStandardsCommandOutput) => void): void;
            batchDisableStandards(args: BatchDisableStandardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDisableStandardsCommandOutput) => void): void;
            /**
                * <p>Enables the standards specified by the provided <code>StandardsArn</code>. To obtain the
                *          ARN for a standard, use the <code>DescribeStandards</code>
                *          operation.</p>
                *          <p>For more information, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a>
                *          section of the <i>Security Hub User Guide</i>.</p>
                */
            batchEnableStandards(args: BatchEnableStandardsCommandInput, options?: __HttpHandlerOptions): Promise<BatchEnableStandardsCommandOutput>;
            batchEnableStandards(args: BatchEnableStandardsCommandInput, cb: (err: any, data?: BatchEnableStandardsCommandOutput) => void): void;
            batchEnableStandards(args: BatchEnableStandardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchEnableStandardsCommandOutput) => void): void;
            /**
                * <p>Imports security findings generated by a finding provider into Security Hub.
                *          This action is requested by the finding provider to import its findings into
                *          Security Hub.</p>
                *          <p>
                *             <code>BatchImportFindings</code> must be called by one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>The Amazon Web Services account that is associated with a finding if you are using
                *                the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-custom-providers.html#securityhub-custom-providers-bfi-reqs">default product ARN</a>
                *                or are a partner sending findings from within a customer's Amazon Web Services account.
                *                In these cases, the identifier of the account that you are calling <code>BatchImportFindings</code>
                *                from needs to be the same as the <code>AwsAccountId</code> attribute for the finding.</p>
                *             </li>
                *             <li>
                *                <p>An Amazon Web Services account that Security Hub has allow-listed for an official partner
                *                integration. In this case, you can call <code>BatchImportFindings</code> from the allow-listed
                *                account and send findings from different customer accounts in the same batch.</p>
                *             </li>
                *          </ul>
                *          <p>The maximum allowed size for a finding is 240 Kb. An error is returned for any finding
                *          larger than 240 Kb.</p>
                *          <p>After a finding is created, <code>BatchImportFindings</code> cannot be used to update
                *          the following finding fields and objects, which Security Hub customers use to manage their
                *          investigation workflow.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Note</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UserDefinedFields</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VerificationState</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Workflow</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>Finding providers also should not use <code>BatchImportFindings</code> to update the following attributes.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Confidence</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Criticality</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RelatedFindings</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Severity</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Types</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>Instead, finding providers use <code>FindingProviderFields</code> to provide values for these attributes.</p>
                */
            batchImportFindings(args: BatchImportFindingsCommandInput, options?: __HttpHandlerOptions): Promise<BatchImportFindingsCommandOutput>;
            batchImportFindings(args: BatchImportFindingsCommandInput, cb: (err: any, data?: BatchImportFindingsCommandOutput) => void): void;
            batchImportFindings(args: BatchImportFindingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchImportFindingsCommandOutput) => void): void;
            /**
                * <p>Used by Security Hub customers to update information about their investigation into a finding.
                *          Requested by administrator accounts or member accounts. Administrator accounts can update findings for
                *          their account and their member accounts. Member accounts can update findings for their
                *          account.</p>
                *          <p>Updates from <code>BatchUpdateFindings</code> do not affect the value of
                *             <code>UpdatedAt</code> for a finding.</p>
                *          <p>Administrator and member accounts can use <code>BatchUpdateFindings</code> to update the
                *          following finding fields and objects.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Confidence</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Criticality</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Note</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RelatedFindings</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Severity</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Types</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UserDefinedFields</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>VerificationState</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Workflow</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>You can configure IAM policies to restrict access to fields and field values. For
                *          example, you might not want member accounts to be able to suppress findings or change the
                *          finding severity. See <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/finding-update-batchupdatefindings.html#batchupdatefindings-configure-access">Configuring access to BatchUpdateFindings</a> in the
                *          <i>Security Hub User Guide</i>.</p>
                */
            batchUpdateFindings(args: BatchUpdateFindingsCommandInput, options?: __HttpHandlerOptions): Promise<BatchUpdateFindingsCommandOutput>;
            batchUpdateFindings(args: BatchUpdateFindingsCommandInput, cb: (err: any, data?: BatchUpdateFindingsCommandOutput) => void): void;
            batchUpdateFindings(args: BatchUpdateFindingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchUpdateFindingsCommandOutput) => void): void;
            /**
                * <p>Creates a custom action target in Security Hub.</p>
                *          <p>You can use custom actions on findings and insights in Security Hub to trigger target actions
                *          in Amazon CloudWatch Events.</p>
                */
            createActionTarget(args: CreateActionTargetCommandInput, options?: __HttpHandlerOptions): Promise<CreateActionTargetCommandOutput>;
            createActionTarget(args: CreateActionTargetCommandInput, cb: (err: any, data?: CreateActionTargetCommandOutput) => void): void;
            createActionTarget(args: CreateActionTargetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateActionTargetCommandOutput) => void): void;
            /**
                * <p>Used to enable finding aggregation. Must be called from the aggregation Region.</p>
                *          <p>For more details about cross-Region replication, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/finding-aggregation.html">Configuring finding aggregation</a> in the <i>Security Hub User Guide</i>.
                *       </p>
                */
            createFindingAggregator(args: CreateFindingAggregatorCommandInput, options?: __HttpHandlerOptions): Promise<CreateFindingAggregatorCommandOutput>;
            createFindingAggregator(args: CreateFindingAggregatorCommandInput, cb: (err: any, data?: CreateFindingAggregatorCommandOutput) => void): void;
            createFindingAggregator(args: CreateFindingAggregatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFindingAggregatorCommandOutput) => void): void;
            /**
                * <p>Creates a custom insight in Security Hub. An insight is a consolidation of findings that relate
                *          to a security issue that requires attention or remediation.</p>
                *          <p>To group the related findings in the insight, use the
                *          <code>GroupByAttribute</code>.</p>
                */
            createInsight(args: CreateInsightCommandInput, options?: __HttpHandlerOptions): Promise<CreateInsightCommandOutput>;
            createInsight(args: CreateInsightCommandInput, cb: (err: any, data?: CreateInsightCommandOutput) => void): void;
            createInsight(args: CreateInsightCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateInsightCommandOutput) => void): void;
            /**
                * <p>Creates a member association in Security Hub between the specified accounts and the account
                *          used to make the request, which is the administrator account. If you are integrated with
                *          Organizations, then the administrator account is designated by the organization management account.</p>
                *          <p>
                *             <code>CreateMembers</code> is always used to add accounts that are not organization
                *          members.</p>
                *          <p>For accounts that are managed using Organizations, <code>CreateMembers</code> is only used
                *          in the following cases:</p>
                *          <ul>
                *             <li>
                *                <p>Security Hub is not configured to automatically add new organization accounts.</p>
                *             </li>
                *             <li>
                *                <p>The account was disassociated or deleted in Security Hub.</p>
                *             </li>
                *          </ul>
                *          <p>This action can only be used by an account that has Security Hub enabled. To enable Security Hub, you
                *          can use the <code>EnableSecurityHub</code> operation.</p>
                *          <p>For accounts that are not organization members, you create the account association and
                *          then send an invitation to the member account. To send the invitation, you use the
                *                <code>InviteMembers</code> operation. If the account owner accepts
                *          the invitation, the account becomes a member account in Security Hub.</p>
                *          <p>Accounts that are managed using Organizations do not receive an invitation. They
                *          automatically become a member account in Security Hub.</p>
                *          <ul>
                *             <li>
                *                <p>If the organization account does not have Security Hub enabled, then Security Hub and the default standards are automatically enabled. Note that Security Hub cannot be enabled automatically for the organization management account. The organization management account must enable Security Hub before the administrator account enables it as a member account.</p>
                *             </li>
                *             <li>
                *                <p>For organization accounts that already have Security Hub enabled, Security Hub does not make any other changes to those accounts. It does not change their enabled standards or controls.</p>
                *             </li>
                *          </ul>
                *          <p>A permissions policy is added that permits the administrator account to view the findings
                *          generated in the member account.</p>
                *          <p>To remove the association between the administrator and member accounts, use the <code>DisassociateFromMasterAccount</code> or <code>DisassociateMembers</code> operation.</p>
                */
            createMembers(args: CreateMembersCommandInput, options?: __HttpHandlerOptions): Promise<CreateMembersCommandOutput>;
            createMembers(args: CreateMembersCommandInput, cb: (err: any, data?: CreateMembersCommandOutput) => void): void;
            createMembers(args: CreateMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMembersCommandOutput) => void): void;
            /**
                * <p>Declines invitations to become a member account.</p>
                *          <p>This operation is only used by accounts that are not part of an organization.
                *          Organization accounts do not receive invitations.</p>
                */
            declineInvitations(args: DeclineInvitationsCommandInput, options?: __HttpHandlerOptions): Promise<DeclineInvitationsCommandOutput>;
            declineInvitations(args: DeclineInvitationsCommandInput, cb: (err: any, data?: DeclineInvitationsCommandOutput) => void): void;
            declineInvitations(args: DeclineInvitationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeclineInvitationsCommandOutput) => void): void;
            /**
                * <p>Deletes a custom action target from Security Hub.</p>
                *          <p>Deleting a custom action target does not affect any findings or insights that were
                *          already sent to Amazon CloudWatch Events using the custom action.</p>
                */
            deleteActionTarget(args: DeleteActionTargetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteActionTargetCommandOutput>;
            deleteActionTarget(args: DeleteActionTargetCommandInput, cb: (err: any, data?: DeleteActionTargetCommandOutput) => void): void;
            deleteActionTarget(args: DeleteActionTargetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteActionTargetCommandOutput) => void): void;
            /**
                * <p>Deletes a finding aggregator. When you delete the finding aggregator, you stop finding aggregation.</p>
                *          <p>When you stop finding aggregation, findings that were already aggregated to the aggregation Region are still visible from the aggregation Region. New findings and finding updates are not aggregated.
                *       </p>
                */
            deleteFindingAggregator(args: DeleteFindingAggregatorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFindingAggregatorCommandOutput>;
            deleteFindingAggregator(args: DeleteFindingAggregatorCommandInput, cb: (err: any, data?: DeleteFindingAggregatorCommandOutput) => void): void;
            deleteFindingAggregator(args: DeleteFindingAggregatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFindingAggregatorCommandOutput) => void): void;
            /**
                * <p>Deletes the insight specified by the <code>InsightArn</code>.</p>
                */
            deleteInsight(args: DeleteInsightCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInsightCommandOutput>;
            deleteInsight(args: DeleteInsightCommandInput, cb: (err: any, data?: DeleteInsightCommandOutput) => void): void;
            deleteInsight(args: DeleteInsightCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInsightCommandOutput) => void): void;
            /**
                * <p>Deletes invitations received by the Amazon Web Services account to become a member account.</p>
                *          <p>This operation is only used by accounts that are not part of an organization.
                *          Organization accounts do not receive invitations.</p>
                */
            deleteInvitations(args: DeleteInvitationsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInvitationsCommandOutput>;
            deleteInvitations(args: DeleteInvitationsCommandInput, cb: (err: any, data?: DeleteInvitationsCommandOutput) => void): void;
            deleteInvitations(args: DeleteInvitationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInvitationsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified member accounts from Security Hub.</p>
                *          <p>Can be used to delete member accounts that belong to an organization as well as member
                *          accounts that were invited manually.</p>
                */
            deleteMembers(args: DeleteMembersCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMembersCommandOutput>;
            deleteMembers(args: DeleteMembersCommandInput, cb: (err: any, data?: DeleteMembersCommandOutput) => void): void;
            deleteMembers(args: DeleteMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMembersCommandOutput) => void): void;
            /**
                * <p>Returns a list of the custom action targets in Security Hub in your account.</p>
                */
            describeActionTargets(args: DescribeActionTargetsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeActionTargetsCommandOutput>;
            describeActionTargets(args: DescribeActionTargetsCommandInput, cb: (err: any, data?: DescribeActionTargetsCommandOutput) => void): void;
            describeActionTargets(args: DescribeActionTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeActionTargetsCommandOutput) => void): void;
            /**
                * <p>Returns details about the Hub resource in your account, including the
                *          <code>HubArn</code> and the time when you enabled Security Hub.</p>
                */
            describeHub(args: DescribeHubCommandInput, options?: __HttpHandlerOptions): Promise<DescribeHubCommandOutput>;
            describeHub(args: DescribeHubCommandInput, cb: (err: any, data?: DescribeHubCommandOutput) => void): void;
            describeHub(args: DescribeHubCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeHubCommandOutput) => void): void;
            /**
                * <p>Returns information about the Organizations configuration for Security Hub. Can only be
                *          called from a Security Hub administrator account.</p>
                */
            describeOrganizationConfiguration(args: DescribeOrganizationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrganizationConfigurationCommandOutput>;
            describeOrganizationConfiguration(args: DescribeOrganizationConfigurationCommandInput, cb: (err: any, data?: DescribeOrganizationConfigurationCommandOutput) => void): void;
            describeOrganizationConfiguration(args: DescribeOrganizationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrganizationConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns information about product integrations in Security Hub.</p>
                *          <p>You can optionally provide an integration ARN. If you provide an integration ARN, then
                *          the results only include that integration.</p>
                *          <p>If you do not provide an integration ARN, then the results include all of the available
                *          product integrations. </p>
                */
            describeProducts(args: DescribeProductsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProductsCommandOutput>;
            describeProducts(args: DescribeProductsCommandInput, cb: (err: any, data?: DescribeProductsCommandOutput) => void): void;
            describeProducts(args: DescribeProductsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProductsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the available standards in Security Hub.</p>
                *          <p>For each standard, the results include the standard ARN, the name, and a description. </p>
                */
            describeStandards(args: DescribeStandardsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStandardsCommandOutput>;
            describeStandards(args: DescribeStandardsCommandInput, cb: (err: any, data?: DescribeStandardsCommandOutput) => void): void;
            describeStandards(args: DescribeStandardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStandardsCommandOutput) => void): void;
            /**
                * <p>Returns a list of security standards controls.</p>
                *          <p>For each control, the results include information about whether it is currently enabled,
                *          the severity, and a link to remediation information.</p>
                */
            describeStandardsControls(args: DescribeStandardsControlsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeStandardsControlsCommandOutput>;
            describeStandardsControls(args: DescribeStandardsControlsCommandInput, cb: (err: any, data?: DescribeStandardsControlsCommandOutput) => void): void;
            describeStandardsControls(args: DescribeStandardsControlsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeStandardsControlsCommandOutput) => void): void;
            /**
                * <p>Disables the integration of the specified product with Security Hub. After the integration is
                *          disabled, findings from that product are no longer sent to Security Hub.</p>
                */
            disableImportFindingsForProduct(args: DisableImportFindingsForProductCommandInput, options?: __HttpHandlerOptions): Promise<DisableImportFindingsForProductCommandOutput>;
            disableImportFindingsForProduct(args: DisableImportFindingsForProductCommandInput, cb: (err: any, data?: DisableImportFindingsForProductCommandOutput) => void): void;
            disableImportFindingsForProduct(args: DisableImportFindingsForProductCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableImportFindingsForProductCommandOutput) => void): void;
            /**
                * <p>Disables a Security Hub administrator account. Can only be called by the organization
                *          management account.</p>
                */
            disableOrganizationAdminAccount(args: DisableOrganizationAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<DisableOrganizationAdminAccountCommandOutput>;
            disableOrganizationAdminAccount(args: DisableOrganizationAdminAccountCommandInput, cb: (err: any, data?: DisableOrganizationAdminAccountCommandOutput) => void): void;
            disableOrganizationAdminAccount(args: DisableOrganizationAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableOrganizationAdminAccountCommandOutput) => void): void;
            /**
                * <p>Disables Security Hub in your account only in the current Region. To disable Security Hub in all
                *          Regions, you must submit one request per Region where you have enabled Security Hub.</p>
                *          <p>When you disable Security Hub for an administrator account, it doesn't disable Security Hub for any associated
                *          member accounts.</p>
                *          <p>When you disable Security Hub, your existing findings and insights and any Security Hub configuration
                *          settings are deleted after 90 days and cannot be recovered. Any standards that were enabled
                *          are disabled, and your administrator and member account associations are removed.</p>
                *          <p>If you want to save your existing findings, you must export them before you disable
                *          Security Hub.</p>
                */
            disableSecurityHub(args: DisableSecurityHubCommandInput, options?: __HttpHandlerOptions): Promise<DisableSecurityHubCommandOutput>;
            disableSecurityHub(args: DisableSecurityHubCommandInput, cb: (err: any, data?: DisableSecurityHubCommandOutput) => void): void;
            disableSecurityHub(args: DisableSecurityHubCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableSecurityHubCommandOutput) => void): void;
            /**
                * <p>Disassociates the current Security Hub member account from the associated administrator
                *          account.</p>
                *          <p>This operation is only used by accounts that are not part of an organization. For
                *          organization accounts, only the administrator account can
                *          disassociate a member account.</p>
                */
            disassociateFromAdministratorAccount(args: DisassociateFromAdministratorAccountCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateFromAdministratorAccountCommandOutput>;
            disassociateFromAdministratorAccount(args: DisassociateFromAdministratorAccountCommandInput, cb: (err: any, data?: DisassociateFromAdministratorAccountCommandOutput) => void): void;
            disassociateFromAdministratorAccount(args: DisassociateFromAdministratorAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateFromAdministratorAccountCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>This method is deprecated. Instead, use <code>DisassociateFromAdministratorAccount</code>.</p>
                *          <p>The Security Hub console continues to use <code>DisassociateFromMasterAccount</code>. It will eventually change to use <code>DisassociateFromAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>DisassociateFromMasterAccount</code>. You should also add <code>DisassociateFromAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>DisassociateFromAdministratorAccount</code>.</p>
                *          <p>Disassociates the current Security Hub member account from the associated administrator
                *          account.</p>
                *          <p>This operation is only used by accounts that are not part of an organization. For
                *          organization accounts, only the administrator account can
                *          disassociate a member account.</p>
                */
            disassociateFromMasterAccount(args: DisassociateFromMasterAccountCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateFromMasterAccountCommandOutput>;
            disassociateFromMasterAccount(args: DisassociateFromMasterAccountCommandInput, cb: (err: any, data?: DisassociateFromMasterAccountCommandOutput) => void): void;
            disassociateFromMasterAccount(args: DisassociateFromMasterAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateFromMasterAccountCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified member accounts from the associated administrator account.</p>
                *          <p>Can be used to disassociate both accounts that are managed using Organizations and accounts that
                *          were invited manually.</p>
                */
            disassociateMembers(args: DisassociateMembersCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateMembersCommandOutput>;
            disassociateMembers(args: DisassociateMembersCommandInput, cb: (err: any, data?: DisassociateMembersCommandOutput) => void): void;
            disassociateMembers(args: DisassociateMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateMembersCommandOutput) => void): void;
            /**
                * <p>Enables the integration of a partner product with Security Hub. Integrated products send
                *          findings to Security Hub.</p>
                *          <p>When you enable a product integration, a permissions policy that grants permission for
                *          the product to send findings to Security Hub is applied.</p>
                */
            enableImportFindingsForProduct(args: EnableImportFindingsForProductCommandInput, options?: __HttpHandlerOptions): Promise<EnableImportFindingsForProductCommandOutput>;
            enableImportFindingsForProduct(args: EnableImportFindingsForProductCommandInput, cb: (err: any, data?: EnableImportFindingsForProductCommandOutput) => void): void;
            enableImportFindingsForProduct(args: EnableImportFindingsForProductCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableImportFindingsForProductCommandOutput) => void): void;
            /**
                * <p>Designates the Security Hub administrator account for an organization. Can only be called by
                *          the organization management account.</p>
                */
            enableOrganizationAdminAccount(args: EnableOrganizationAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<EnableOrganizationAdminAccountCommandOutput>;
            enableOrganizationAdminAccount(args: EnableOrganizationAdminAccountCommandInput, cb: (err: any, data?: EnableOrganizationAdminAccountCommandOutput) => void): void;
            enableOrganizationAdminAccount(args: EnableOrganizationAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableOrganizationAdminAccountCommandOutput) => void): void;
            /**
                * <p>Enables Security Hub for your account in the current Region or the Region you specify in the
                *          request.</p>
                *          <p>When you enable Security Hub, you grant to Security Hub the permissions necessary to gather findings
                *          from other services that are integrated with Security Hub.</p>
                *          <p>When you use the <code>EnableSecurityHub</code> operation to enable Security Hub, you also
                *          automatically enable the following standards.</p>
                *          <ul>
                *             <li>
                *                <p>CIS Amazon Web Services Foundations</p>
                *             </li>
                *             <li>
                *                <p>Amazon Web Services Foundational Security Best Practices</p>
                *             </li>
                *          </ul>
                *          <p>You do not enable the Payment Card Industry Data Security Standard (PCI DSS) standard. </p>
                *          <p>To not enable the automatically enabled standards, set
                *             <code>EnableDefaultStandards</code> to <code>false</code>.</p>
                *          <p>After you enable Security Hub, to enable a standard, use the <code>BatchEnableStandards</code> operation. To disable a standard, use the
                *                <code>BatchDisableStandards</code> operation.</p>
                *          <p>To learn more, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-settingup.html">setup information</a> in the <i>Security Hub User Guide</i>.</p>
                */
            enableSecurityHub(args: EnableSecurityHubCommandInput, options?: __HttpHandlerOptions): Promise<EnableSecurityHubCommandOutput>;
            enableSecurityHub(args: EnableSecurityHubCommandInput, cb: (err: any, data?: EnableSecurityHubCommandOutput) => void): void;
            enableSecurityHub(args: EnableSecurityHubCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableSecurityHubCommandOutput) => void): void;
            /**
                * <p>Provides the details for the Security Hub administrator account for the current member account.</p>
                *          <p>Can be used by both member accounts that are managed using Organizations and accounts that were
                *          invited manually.</p>
                */
            getAdministratorAccount(args: GetAdministratorAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetAdministratorAccountCommandOutput>;
            getAdministratorAccount(args: GetAdministratorAccountCommandInput, cb: (err: any, data?: GetAdministratorAccountCommandOutput) => void): void;
            getAdministratorAccount(args: GetAdministratorAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAdministratorAccountCommandOutput) => void): void;
            /**
                * <p>Returns a list of the standards that are currently enabled.</p>
                */
            getEnabledStandards(args: GetEnabledStandardsCommandInput, options?: __HttpHandlerOptions): Promise<GetEnabledStandardsCommandOutput>;
            getEnabledStandards(args: GetEnabledStandardsCommandInput, cb: (err: any, data?: GetEnabledStandardsCommandOutput) => void): void;
            getEnabledStandards(args: GetEnabledStandardsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEnabledStandardsCommandOutput) => void): void;
            /**
                * <p>Returns the current finding aggregation configuration.</p>
                */
            getFindingAggregator(args: GetFindingAggregatorCommandInput, options?: __HttpHandlerOptions): Promise<GetFindingAggregatorCommandOutput>;
            getFindingAggregator(args: GetFindingAggregatorCommandInput, cb: (err: any, data?: GetFindingAggregatorCommandOutput) => void): void;
            getFindingAggregator(args: GetFindingAggregatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFindingAggregatorCommandOutput) => void): void;
            /**
                * <p>Returns a list of findings that match the specified criteria.</p>
                *          <p>If finding aggregation is enabled, then when you call <code>GetFindings</code> from the aggregation Region, the results include all of the matching findings from both the aggregation Region and the linked Regions.</p>
                */
            getFindings(args: GetFindingsCommandInput, options?: __HttpHandlerOptions): Promise<GetFindingsCommandOutput>;
            getFindings(args: GetFindingsCommandInput, cb: (err: any, data?: GetFindingsCommandOutput) => void): void;
            getFindings(args: GetFindingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFindingsCommandOutput) => void): void;
            /**
                * <p>Lists the results of the Security Hub insight specified by the insight ARN.</p>
                */
            getInsightResults(args: GetInsightResultsCommandInput, options?: __HttpHandlerOptions): Promise<GetInsightResultsCommandOutput>;
            getInsightResults(args: GetInsightResultsCommandInput, cb: (err: any, data?: GetInsightResultsCommandOutput) => void): void;
            getInsightResults(args: GetInsightResultsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInsightResultsCommandOutput) => void): void;
            /**
                * <p>Lists and describes insights for the specified insight ARNs.</p>
                */
            getInsights(args: GetInsightsCommandInput, options?: __HttpHandlerOptions): Promise<GetInsightsCommandOutput>;
            getInsights(args: GetInsightsCommandInput, cb: (err: any, data?: GetInsightsCommandOutput) => void): void;
            getInsights(args: GetInsightsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInsightsCommandOutput) => void): void;
            /**
                * <p>Returns the count of all Security Hub membership invitations that were sent to the
                *          current member account, not including the currently accepted invitation. </p>
                */
            getInvitationsCount(args: GetInvitationsCountCommandInput, options?: __HttpHandlerOptions): Promise<GetInvitationsCountCommandOutput>;
            getInvitationsCount(args: GetInvitationsCountCommandInput, cb: (err: any, data?: GetInvitationsCountCommandOutput) => void): void;
            getInvitationsCount(args: GetInvitationsCountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInvitationsCountCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>This method is deprecated. Instead, use <code>GetAdministratorAccount</code>.</p>
                *          <p>The Security Hub console continues to use <code>GetMasterAccount</code>. It will eventually change to use <code>GetAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>GetMasterAccount</code>. You should also add <code>GetAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>GetAdministratorAccount</code>.</p>
                *          <p>Provides the details for the Security Hub administrator account for the current member account.</p>
                *          <p>Can be used by both member accounts that are managed using Organizations and accounts that were
                *          invited manually.</p>
                */
            getMasterAccount(args: GetMasterAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetMasterAccountCommandOutput>;
            getMasterAccount(args: GetMasterAccountCommandInput, cb: (err: any, data?: GetMasterAccountCommandOutput) => void): void;
            getMasterAccount(args: GetMasterAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMasterAccountCommandOutput) => void): void;
            /**
                * <p>Returns the details for the Security Hub member accounts for the specified account IDs.</p>
                *          <p>An administrator account can be either the delegated Security Hub administrator account for an
                *          organization or an administrator account that enabled Security Hub manually.</p>
                *          <p>The results include both member accounts that are managed using Organizations and accounts that
                *          were invited manually.</p>
                */
            getMembers(args: GetMembersCommandInput, options?: __HttpHandlerOptions): Promise<GetMembersCommandOutput>;
            getMembers(args: GetMembersCommandInput, cb: (err: any, data?: GetMembersCommandOutput) => void): void;
            getMembers(args: GetMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMembersCommandOutput) => void): void;
            /**
                * <p>Invites other Amazon Web Services accounts to become member accounts for the Security Hub administrator account that
                *          the invitation is sent from.</p>
                *          <p>This operation is only used to invite accounts that do not belong to an organization.
                *          Organization accounts do not receive invitations.</p>
                *          <p>Before you can use this action to invite a member, you must first use the <code>CreateMembers</code> action to create the member account in Security Hub.</p>
                *          <p>When the account owner enables Security Hub and accepts the invitation to become a member
                *          account, the administrator account can view the findings generated from the member account.</p>
                */
            inviteMembers(args: InviteMembersCommandInput, options?: __HttpHandlerOptions): Promise<InviteMembersCommandOutput>;
            inviteMembers(args: InviteMembersCommandInput, cb: (err: any, data?: InviteMembersCommandOutput) => void): void;
            inviteMembers(args: InviteMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InviteMembersCommandOutput) => void): void;
            /**
                * <p>Lists all findings-generating solutions (products) that you are subscribed to receive
                *          findings from in Security Hub.</p>
                */
            listEnabledProductsForImport(args: ListEnabledProductsForImportCommandInput, options?: __HttpHandlerOptions): Promise<ListEnabledProductsForImportCommandOutput>;
            listEnabledProductsForImport(args: ListEnabledProductsForImportCommandInput, cb: (err: any, data?: ListEnabledProductsForImportCommandOutput) => void): void;
            listEnabledProductsForImport(args: ListEnabledProductsForImportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEnabledProductsForImportCommandOutput) => void): void;
            /**
                * <p>If finding aggregation is enabled, then <code>ListFindingAggregators</code> returns the ARN of the finding aggregator. You can run this operation from any Region.</p>
                */
            listFindingAggregators(args: ListFindingAggregatorsCommandInput, options?: __HttpHandlerOptions): Promise<ListFindingAggregatorsCommandOutput>;
            listFindingAggregators(args: ListFindingAggregatorsCommandInput, cb: (err: any, data?: ListFindingAggregatorsCommandOutput) => void): void;
            listFindingAggregators(args: ListFindingAggregatorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFindingAggregatorsCommandOutput) => void): void;
            /**
                * <p>Lists all Security Hub membership invitations that were sent to the current Amazon Web Services account.</p>
                *          <p>This operation is only used by accounts that are managed by invitation.
                *          Accounts that are managed using the integration with Organizations do not receive invitations.</p>
                */
            listInvitations(args: ListInvitationsCommandInput, options?: __HttpHandlerOptions): Promise<ListInvitationsCommandOutput>;
            listInvitations(args: ListInvitationsCommandInput, cb: (err: any, data?: ListInvitationsCommandOutput) => void): void;
            listInvitations(args: ListInvitationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInvitationsCommandOutput) => void): void;
            /**
                * <p>Lists details about all member accounts for the current Security Hub administrator
                *          account.</p>
                *          <p>The results include both member accounts that belong to an organization and member
                *          accounts that were invited manually.</p>
                */
            listMembers(args: ListMembersCommandInput, options?: __HttpHandlerOptions): Promise<ListMembersCommandOutput>;
            listMembers(args: ListMembersCommandInput, cb: (err: any, data?: ListMembersCommandOutput) => void): void;
            listMembers(args: ListMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMembersCommandOutput) => void): void;
            /**
                * <p>Lists the Security Hub administrator accounts. Can only be called by the organization
                *          management account.</p>
                */
            listOrganizationAdminAccounts(args: ListOrganizationAdminAccountsCommandInput, options?: __HttpHandlerOptions): Promise<ListOrganizationAdminAccountsCommandOutput>;
            listOrganizationAdminAccounts(args: ListOrganizationAdminAccountsCommandInput, cb: (err: any, data?: ListOrganizationAdminAccountsCommandOutput) => void): void;
            listOrganizationAdminAccounts(args: ListOrganizationAdminAccountsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOrganizationAdminAccountsCommandOutput) => void): void;
            /**
                * <p>Returns a list of tags associated with a resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the name and description of a custom action target in Security Hub.</p>
                */
            updateActionTarget(args: UpdateActionTargetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateActionTargetCommandOutput>;
            updateActionTarget(args: UpdateActionTargetCommandInput, cb: (err: any, data?: UpdateActionTargetCommandOutput) => void): void;
            updateActionTarget(args: UpdateActionTargetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateActionTargetCommandOutput) => void): void;
            /**
                * <p>Updates the finding aggregation configuration. Used to update the Region linking mode and the list of included or excluded Regions. You cannot use <code>UpdateFindingAggregator</code> to change the aggregation Region.</p>
                *          <p>You must run <code>UpdateFindingAggregator</code> from the current aggregation Region.
                *       </p>
                */
            updateFindingAggregator(args: UpdateFindingAggregatorCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFindingAggregatorCommandOutput>;
            updateFindingAggregator(args: UpdateFindingAggregatorCommandInput, cb: (err: any, data?: UpdateFindingAggregatorCommandOutput) => void): void;
            updateFindingAggregator(args: UpdateFindingAggregatorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFindingAggregatorCommandOutput) => void): void;
            /**
                * <p>
                *             <code>UpdateFindings</code> is deprecated. Instead of <code>UpdateFindings</code>, use
                *             <code>BatchUpdateFindings</code>.</p>
                *          <p>Updates the <code>Note</code> and <code>RecordState</code> of the Security Hub-aggregated
                *          findings that the filter attributes specify. Any member account that can view the finding
                *          also sees the update to the finding.</p>
                */
            updateFindings(args: UpdateFindingsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFindingsCommandOutput>;
            updateFindings(args: UpdateFindingsCommandInput, cb: (err: any, data?: UpdateFindingsCommandOutput) => void): void;
            updateFindings(args: UpdateFindingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFindingsCommandOutput) => void): void;
            /**
                * <p>Updates the Security Hub insight identified by the specified insight ARN.</p>
                */
            updateInsight(args: UpdateInsightCommandInput, options?: __HttpHandlerOptions): Promise<UpdateInsightCommandOutput>;
            updateInsight(args: UpdateInsightCommandInput, cb: (err: any, data?: UpdateInsightCommandOutput) => void): void;
            updateInsight(args: UpdateInsightCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateInsightCommandOutput) => void): void;
            /**
                * <p>Used to update the configuration related to Organizations. Can only be called from a
                *          Security Hub administrator account.</p>
                */
            updateOrganizationConfiguration(args: UpdateOrganizationConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateOrganizationConfigurationCommandOutput>;
            updateOrganizationConfiguration(args: UpdateOrganizationConfigurationCommandInput, cb: (err: any, data?: UpdateOrganizationConfigurationCommandOutput) => void): void;
            updateOrganizationConfiguration(args: UpdateOrganizationConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateOrganizationConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates configuration options for Security Hub.</p>
                */
            updateSecurityHubConfiguration(args: UpdateSecurityHubConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSecurityHubConfigurationCommandOutput>;
            updateSecurityHubConfiguration(args: UpdateSecurityHubConfigurationCommandInput, cb: (err: any, data?: UpdateSecurityHubConfigurationCommandOutput) => void): void;
            updateSecurityHubConfiguration(args: UpdateSecurityHubConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSecurityHubConfigurationCommandOutput) => void): void;
            /**
                * <p>Used to control whether an individual security standard control is enabled or
                *          disabled.</p>
                */
            updateStandardsControl(args: UpdateStandardsControlCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStandardsControlCommandOutput>;
            updateStandardsControl(args: UpdateStandardsControlCommandInput, cb: (err: any, data?: UpdateStandardsControlCommandOutput) => void): void;
            updateStandardsControl(args: UpdateStandardsControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStandardsControlCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/AcceptAdministratorInvitationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AcceptAdministratorInvitationRequest, AcceptAdministratorInvitationResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_0";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface AcceptAdministratorInvitationCommandInput extends AcceptAdministratorInvitationRequest {
    }
    export interface AcceptAdministratorInvitationCommandOutput extends AcceptAdministratorInvitationResponse, __MetadataBearer {
    }
    /**
        * <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
        *          account that the invitation was sent from.</p>
        *          <p>This operation is only used by member accounts that are not added through
        *          Organizations.</p>
        *          <p>When the member account accepts the invitation, permission is granted to the administrator
        *          account to view findings generated in the member account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, AcceptAdministratorInvitationCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, AcceptAdministratorInvitationCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new AcceptAdministratorInvitationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AcceptAdministratorInvitationCommandInput} for command's `input` shape.
        * @see {@link AcceptAdministratorInvitationCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class AcceptAdministratorInvitationCommand extends $Command<AcceptAdministratorInvitationCommandInput, AcceptAdministratorInvitationCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: AcceptAdministratorInvitationCommandInput;
            constructor(input: AcceptAdministratorInvitationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AcceptAdministratorInvitationCommandInput, AcceptAdministratorInvitationCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/AcceptInvitationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AcceptInvitationRequest, AcceptInvitationResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_0";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface AcceptInvitationCommandInput extends AcceptInvitationRequest {
    }
    export interface AcceptInvitationCommandOutput extends AcceptInvitationResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>This method is deprecated. Instead, use <code>AcceptAdministratorInvitation</code>.</p>
        *          <p>The Security Hub console continues to use <code>AcceptInvitation</code>. It will eventually change to use <code>AcceptAdministratorInvitation</code>. Any IAM policies that specifically control access to this function must continue to use <code>AcceptInvitation</code>. You should also add <code>AcceptAdministratorInvitation</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>AcceptAdministratorInvitation</code>.</p>
        *          <p>Accepts the invitation to be a member account and be monitored by the Security Hub administrator
        *          account that the invitation was sent from.</p>
        *          <p>This operation is only used by member accounts that are not added through
        *          Organizations.</p>
        *          <p>When the member account accepts the invitation, permission is granted to the administrator
        *          account to view findings generated in the member account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, AcceptInvitationCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, AcceptInvitationCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new AcceptInvitationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AcceptInvitationCommandInput} for command's `input` shape.
        * @see {@link AcceptInvitationCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class AcceptInvitationCommand extends $Command<AcceptInvitationCommandInput, AcceptInvitationCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: AcceptInvitationCommandInput;
            constructor(input: AcceptInvitationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AcceptInvitationCommandInput, AcceptInvitationCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchDisableStandardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchDisableStandardsRequest, BatchDisableStandardsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface BatchDisableStandardsCommandInput extends BatchDisableStandardsRequest {
    }
    export interface BatchDisableStandardsCommandOutput extends BatchDisableStandardsResponse, __MetadataBearer {
    }
    /**
        * <p>Disables the standards specified by the provided
        *          <code>StandardsSubscriptionArns</code>.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a> section of the <i>Security Hub User
        *          Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, BatchDisableStandardsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, BatchDisableStandardsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new BatchDisableStandardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDisableStandardsCommandInput} for command's `input` shape.
        * @see {@link BatchDisableStandardsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class BatchDisableStandardsCommand extends $Command<BatchDisableStandardsCommandInput, BatchDisableStandardsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: BatchDisableStandardsCommandInput;
            constructor(input: BatchDisableStandardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDisableStandardsCommandInput, BatchDisableStandardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchEnableStandardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchEnableStandardsRequest, BatchEnableStandardsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface BatchEnableStandardsCommandInput extends BatchEnableStandardsRequest {
    }
    export interface BatchEnableStandardsCommandOutput extends BatchEnableStandardsResponse, __MetadataBearer {
    }
    /**
        * <p>Enables the standards specified by the provided <code>StandardsArn</code>. To obtain the
        *          ARN for a standard, use the <code>DescribeStandards</code>
        *          operation.</p>
        *          <p>For more information, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html">Security Standards</a>
        *          section of the <i>Security Hub User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, BatchEnableStandardsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, BatchEnableStandardsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new BatchEnableStandardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchEnableStandardsCommandInput} for command's `input` shape.
        * @see {@link BatchEnableStandardsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class BatchEnableStandardsCommand extends $Command<BatchEnableStandardsCommandInput, BatchEnableStandardsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: BatchEnableStandardsCommandInput;
            constructor(input: BatchEnableStandardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchEnableStandardsCommandInput, BatchEnableStandardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchImportFindingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchImportFindingsRequest, BatchImportFindingsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface BatchImportFindingsCommandInput extends BatchImportFindingsRequest {
    }
    export interface BatchImportFindingsCommandOutput extends BatchImportFindingsResponse, __MetadataBearer {
    }
    /**
        * <p>Imports security findings generated by a finding provider into Security Hub.
        *          This action is requested by the finding provider to import its findings into
        *          Security Hub.</p>
        *          <p>
        *             <code>BatchImportFindings</code> must be called by one of the following:</p>
        *          <ul>
        *             <li>
        *                <p>The Amazon Web Services account that is associated with a finding if you are using
        *                the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-custom-providers.html#securityhub-custom-providers-bfi-reqs">default product ARN</a>
        *                or are a partner sending findings from within a customer's Amazon Web Services account.
        *                In these cases, the identifier of the account that you are calling <code>BatchImportFindings</code>
        *                from needs to be the same as the <code>AwsAccountId</code> attribute for the finding.</p>
        *             </li>
        *             <li>
        *                <p>An Amazon Web Services account that Security Hub has allow-listed for an official partner
        *                integration. In this case, you can call <code>BatchImportFindings</code> from the allow-listed
        *                account and send findings from different customer accounts in the same batch.</p>
        *             </li>
        *          </ul>
        *          <p>The maximum allowed size for a finding is 240 Kb. An error is returned for any finding
        *          larger than 240 Kb.</p>
        *          <p>After a finding is created, <code>BatchImportFindings</code> cannot be used to update
        *          the following finding fields and objects, which Security Hub customers use to manage their
        *          investigation workflow.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>Note</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UserDefinedFields</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>VerificationState</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Workflow</code>
        *                </p>
        *             </li>
        *          </ul>
        *          <p>Finding providers also should not use <code>BatchImportFindings</code> to update the following attributes.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>Confidence</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Criticality</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>RelatedFindings</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Severity</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Types</code>
        *                </p>
        *             </li>
        *          </ul>
        *          <p>Instead, finding providers use <code>FindingProviderFields</code> to provide values for these attributes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, BatchImportFindingsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, BatchImportFindingsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new BatchImportFindingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchImportFindingsCommandInput} for command's `input` shape.
        * @see {@link BatchImportFindingsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class BatchImportFindingsCommand extends $Command<BatchImportFindingsCommandInput, BatchImportFindingsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: BatchImportFindingsCommandInput;
            constructor(input: BatchImportFindingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchImportFindingsCommandInput, BatchImportFindingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchUpdateFindingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchUpdateFindingsRequest, BatchUpdateFindingsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface BatchUpdateFindingsCommandInput extends BatchUpdateFindingsRequest {
    }
    export interface BatchUpdateFindingsCommandOutput extends BatchUpdateFindingsResponse, __MetadataBearer {
    }
    /**
        * <p>Used by Security Hub customers to update information about their investigation into a finding.
        *          Requested by administrator accounts or member accounts. Administrator accounts can update findings for
        *          their account and their member accounts. Member accounts can update findings for their
        *          account.</p>
        *          <p>Updates from <code>BatchUpdateFindings</code> do not affect the value of
        *             <code>UpdatedAt</code> for a finding.</p>
        *          <p>Administrator and member accounts can use <code>BatchUpdateFindings</code> to update the
        *          following finding fields and objects.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>Confidence</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Criticality</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Note</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>RelatedFindings</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Severity</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Types</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UserDefinedFields</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>VerificationState</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Workflow</code>
        *                </p>
        *             </li>
        *          </ul>
        *          <p>You can configure IAM policies to restrict access to fields and field values. For
        *          example, you might not want member accounts to be able to suppress findings or change the
        *          finding severity. See <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/finding-update-batchupdatefindings.html#batchupdatefindings-configure-access">Configuring access to BatchUpdateFindings</a> in the
        *          <i>Security Hub User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, BatchUpdateFindingsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, BatchUpdateFindingsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new BatchUpdateFindingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchUpdateFindingsCommandInput} for command's `input` shape.
        * @see {@link BatchUpdateFindingsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class BatchUpdateFindingsCommand extends $Command<BatchUpdateFindingsCommandInput, BatchUpdateFindingsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: BatchUpdateFindingsCommandInput;
            constructor(input: BatchUpdateFindingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchUpdateFindingsCommandInput, BatchUpdateFindingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateActionTargetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateActionTargetRequest, CreateActionTargetResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface CreateActionTargetCommandInput extends CreateActionTargetRequest {
    }
    export interface CreateActionTargetCommandOutput extends CreateActionTargetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a custom action target in Security Hub.</p>
        *          <p>You can use custom actions on findings and insights in Security Hub to trigger target actions
        *          in Amazon CloudWatch Events.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, CreateActionTargetCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, CreateActionTargetCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new CreateActionTargetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateActionTargetCommandInput} for command's `input` shape.
        * @see {@link CreateActionTargetCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class CreateActionTargetCommand extends $Command<CreateActionTargetCommandInput, CreateActionTargetCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: CreateActionTargetCommandInput;
            constructor(input: CreateActionTargetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateActionTargetCommandInput, CreateActionTargetCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateFindingAggregatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFindingAggregatorRequest, CreateFindingAggregatorResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface CreateFindingAggregatorCommandInput extends CreateFindingAggregatorRequest {
    }
    export interface CreateFindingAggregatorCommandOutput extends CreateFindingAggregatorResponse, __MetadataBearer {
    }
    /**
        * <p>Used to enable finding aggregation. Must be called from the aggregation Region.</p>
        *          <p>For more details about cross-Region replication, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/finding-aggregation.html">Configuring finding aggregation</a> in the <i>Security Hub User Guide</i>.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, CreateFindingAggregatorCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, CreateFindingAggregatorCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new CreateFindingAggregatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFindingAggregatorCommandInput} for command's `input` shape.
        * @see {@link CreateFindingAggregatorCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class CreateFindingAggregatorCommand extends $Command<CreateFindingAggregatorCommandInput, CreateFindingAggregatorCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: CreateFindingAggregatorCommandInput;
            constructor(input: CreateFindingAggregatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFindingAggregatorCommandInput, CreateFindingAggregatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateInsightCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateInsightRequest, CreateInsightResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface CreateInsightCommandInput extends CreateInsightRequest {
    }
    export interface CreateInsightCommandOutput extends CreateInsightResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a custom insight in Security Hub. An insight is a consolidation of findings that relate
        *          to a security issue that requires attention or remediation.</p>
        *          <p>To group the related findings in the insight, use the
        *          <code>GroupByAttribute</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, CreateInsightCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, CreateInsightCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new CreateInsightCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateInsightCommandInput} for command's `input` shape.
        * @see {@link CreateInsightCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class CreateInsightCommand extends $Command<CreateInsightCommandInput, CreateInsightCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: CreateInsightCommandInput;
            constructor(input: CreateInsightCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateInsightCommandInput, CreateInsightCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateMembersRequest, CreateMembersResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface CreateMembersCommandInput extends CreateMembersRequest {
    }
    export interface CreateMembersCommandOutput extends CreateMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a member association in Security Hub between the specified accounts and the account
        *          used to make the request, which is the administrator account. If you are integrated with
        *          Organizations, then the administrator account is designated by the organization management account.</p>
        *          <p>
        *             <code>CreateMembers</code> is always used to add accounts that are not organization
        *          members.</p>
        *          <p>For accounts that are managed using Organizations, <code>CreateMembers</code> is only used
        *          in the following cases:</p>
        *          <ul>
        *             <li>
        *                <p>Security Hub is not configured to automatically add new organization accounts.</p>
        *             </li>
        *             <li>
        *                <p>The account was disassociated or deleted in Security Hub.</p>
        *             </li>
        *          </ul>
        *          <p>This action can only be used by an account that has Security Hub enabled. To enable Security Hub, you
        *          can use the <code>EnableSecurityHub</code> operation.</p>
        *          <p>For accounts that are not organization members, you create the account association and
        *          then send an invitation to the member account. To send the invitation, you use the
        *                <code>InviteMembers</code> operation. If the account owner accepts
        *          the invitation, the account becomes a member account in Security Hub.</p>
        *          <p>Accounts that are managed using Organizations do not receive an invitation. They
        *          automatically become a member account in Security Hub.</p>
        *          <ul>
        *             <li>
        *                <p>If the organization account does not have Security Hub enabled, then Security Hub and the default standards are automatically enabled. Note that Security Hub cannot be enabled automatically for the organization management account. The organization management account must enable Security Hub before the administrator account enables it as a member account.</p>
        *             </li>
        *             <li>
        *                <p>For organization accounts that already have Security Hub enabled, Security Hub does not make any other changes to those accounts. It does not change their enabled standards or controls.</p>
        *             </li>
        *          </ul>
        *          <p>A permissions policy is added that permits the administrator account to view the findings
        *          generated in the member account.</p>
        *          <p>To remove the association between the administrator and member accounts, use the <code>DisassociateFromMasterAccount</code> or <code>DisassociateMembers</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, CreateMembersCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, CreateMembersCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new CreateMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMembersCommandInput} for command's `input` shape.
        * @see {@link CreateMembersCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class CreateMembersCommand extends $Command<CreateMembersCommandInput, CreateMembersCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: CreateMembersCommandInput;
            constructor(input: CreateMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMembersCommandInput, CreateMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeclineInvitationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeclineInvitationsRequest, DeclineInvitationsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DeclineInvitationsCommandInput extends DeclineInvitationsRequest {
    }
    export interface DeclineInvitationsCommandOutput extends DeclineInvitationsResponse, __MetadataBearer {
    }
    /**
        * <p>Declines invitations to become a member account.</p>
        *          <p>This operation is only used by accounts that are not part of an organization.
        *          Organization accounts do not receive invitations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DeclineInvitationsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DeclineInvitationsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DeclineInvitationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeclineInvitationsCommandInput} for command's `input` shape.
        * @see {@link DeclineInvitationsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DeclineInvitationsCommand extends $Command<DeclineInvitationsCommandInput, DeclineInvitationsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DeclineInvitationsCommandInput;
            constructor(input: DeclineInvitationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeclineInvitationsCommandInput, DeclineInvitationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteActionTargetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteActionTargetRequest, DeleteActionTargetResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DeleteActionTargetCommandInput extends DeleteActionTargetRequest {
    }
    export interface DeleteActionTargetCommandOutput extends DeleteActionTargetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a custom action target from Security Hub.</p>
        *          <p>Deleting a custom action target does not affect any findings or insights that were
        *          already sent to Amazon CloudWatch Events using the custom action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DeleteActionTargetCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DeleteActionTargetCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DeleteActionTargetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteActionTargetCommandInput} for command's `input` shape.
        * @see {@link DeleteActionTargetCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DeleteActionTargetCommand extends $Command<DeleteActionTargetCommandInput, DeleteActionTargetCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DeleteActionTargetCommandInput;
            constructor(input: DeleteActionTargetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteActionTargetCommandInput, DeleteActionTargetCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteFindingAggregatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFindingAggregatorRequest, DeleteFindingAggregatorResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DeleteFindingAggregatorCommandInput extends DeleteFindingAggregatorRequest {
    }
    export interface DeleteFindingAggregatorCommandOutput extends DeleteFindingAggregatorResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a finding aggregator. When you delete the finding aggregator, you stop finding aggregation.</p>
        *          <p>When you stop finding aggregation, findings that were already aggregated to the aggregation Region are still visible from the aggregation Region. New findings and finding updates are not aggregated.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DeleteFindingAggregatorCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DeleteFindingAggregatorCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DeleteFindingAggregatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFindingAggregatorCommandInput} for command's `input` shape.
        * @see {@link DeleteFindingAggregatorCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DeleteFindingAggregatorCommand extends $Command<DeleteFindingAggregatorCommandInput, DeleteFindingAggregatorCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DeleteFindingAggregatorCommandInput;
            constructor(input: DeleteFindingAggregatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFindingAggregatorCommandInput, DeleteFindingAggregatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteInsightCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteInsightRequest, DeleteInsightResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DeleteInsightCommandInput extends DeleteInsightRequest {
    }
    export interface DeleteInsightCommandOutput extends DeleteInsightResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the insight specified by the <code>InsightArn</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DeleteInsightCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DeleteInsightCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DeleteInsightCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInsightCommandInput} for command's `input` shape.
        * @see {@link DeleteInsightCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DeleteInsightCommand extends $Command<DeleteInsightCommandInput, DeleteInsightCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DeleteInsightCommandInput;
            constructor(input: DeleteInsightCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInsightCommandInput, DeleteInsightCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteInvitationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteInvitationsRequest, DeleteInvitationsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DeleteInvitationsCommandInput extends DeleteInvitationsRequest {
    }
    export interface DeleteInvitationsCommandOutput extends DeleteInvitationsResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes invitations received by the Amazon Web Services account to become a member account.</p>
        *          <p>This operation is only used by accounts that are not part of an organization.
        *          Organization accounts do not receive invitations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DeleteInvitationsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DeleteInvitationsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DeleteInvitationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInvitationsCommandInput} for command's `input` shape.
        * @see {@link DeleteInvitationsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DeleteInvitationsCommand extends $Command<DeleteInvitationsCommandInput, DeleteInvitationsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DeleteInvitationsCommandInput;
            constructor(input: DeleteInvitationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInvitationsCommandInput, DeleteInvitationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteMembersRequest, DeleteMembersResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DeleteMembersCommandInput extends DeleteMembersRequest {
    }
    export interface DeleteMembersCommandOutput extends DeleteMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified member accounts from Security Hub.</p>
        *          <p>Can be used to delete member accounts that belong to an organization as well as member
        *          accounts that were invited manually.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DeleteMembersCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DeleteMembersCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DeleteMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMembersCommandInput} for command's `input` shape.
        * @see {@link DeleteMembersCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DeleteMembersCommand extends $Command<DeleteMembersCommandInput, DeleteMembersCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DeleteMembersCommandInput;
            constructor(input: DeleteMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMembersCommandInput, DeleteMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeActionTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeActionTargetsRequest, DescribeActionTargetsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DescribeActionTargetsCommandInput extends DescribeActionTargetsRequest {
    }
    export interface DescribeActionTargetsCommandOutput extends DescribeActionTargetsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the custom action targets in Security Hub in your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DescribeActionTargetsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DescribeActionTargetsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DescribeActionTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeActionTargetsCommandInput} for command's `input` shape.
        * @see {@link DescribeActionTargetsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DescribeActionTargetsCommand extends $Command<DescribeActionTargetsCommandInput, DescribeActionTargetsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DescribeActionTargetsCommandInput;
            constructor(input: DescribeActionTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeActionTargetsCommandInput, DescribeActionTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeHubCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeHubRequest, DescribeHubResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DescribeHubCommandInput extends DescribeHubRequest {
    }
    export interface DescribeHubCommandOutput extends DescribeHubResponse, __MetadataBearer {
    }
    /**
        * <p>Returns details about the Hub resource in your account, including the
        *          <code>HubArn</code> and the time when you enabled Security Hub.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DescribeHubCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DescribeHubCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DescribeHubCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeHubCommandInput} for command's `input` shape.
        * @see {@link DescribeHubCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DescribeHubCommand extends $Command<DescribeHubCommandInput, DescribeHubCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DescribeHubCommandInput;
            constructor(input: DescribeHubCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeHubCommandInput, DescribeHubCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeOrganizationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeOrganizationConfigurationRequest, DescribeOrganizationConfigurationResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DescribeOrganizationConfigurationCommandInput extends DescribeOrganizationConfigurationRequest {
    }
    export interface DescribeOrganizationConfigurationCommandOutput extends DescribeOrganizationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the Organizations configuration for Security Hub. Can only be
        *          called from a Security Hub administrator account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DescribeOrganizationConfigurationCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DescribeOrganizationConfigurationCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DescribeOrganizationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrganizationConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeOrganizationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DescribeOrganizationConfigurationCommand extends $Command<DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DescribeOrganizationConfigurationCommandInput;
            constructor(input: DescribeOrganizationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeProductsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeProductsRequest, DescribeProductsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DescribeProductsCommandInput extends DescribeProductsRequest {
    }
    export interface DescribeProductsCommandOutput extends DescribeProductsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about product integrations in Security Hub.</p>
        *          <p>You can optionally provide an integration ARN. If you provide an integration ARN, then
        *          the results only include that integration.</p>
        *          <p>If you do not provide an integration ARN, then the results include all of the available
        *          product integrations. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DescribeProductsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DescribeProductsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DescribeProductsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProductsCommandInput} for command's `input` shape.
        * @see {@link DescribeProductsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DescribeProductsCommand extends $Command<DescribeProductsCommandInput, DescribeProductsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DescribeProductsCommandInput;
            constructor(input: DescribeProductsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProductsCommandInput, DescribeProductsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeStandardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeStandardsRequest, DescribeStandardsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DescribeStandardsCommandInput extends DescribeStandardsRequest {
    }
    export interface DescribeStandardsCommandOutput extends DescribeStandardsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the available standards in Security Hub.</p>
        *          <p>For each standard, the results include the standard ARN, the name, and a description. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DescribeStandardsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DescribeStandardsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DescribeStandardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeStandardsCommandInput} for command's `input` shape.
        * @see {@link DescribeStandardsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DescribeStandardsCommand extends $Command<DescribeStandardsCommandInput, DescribeStandardsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DescribeStandardsCommandInput;
            constructor(input: DescribeStandardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeStandardsCommandInput, DescribeStandardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeStandardsControlsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeStandardsControlsRequest, DescribeStandardsControlsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DescribeStandardsControlsCommandInput extends DescribeStandardsControlsRequest {
    }
    export interface DescribeStandardsControlsCommandOutput extends DescribeStandardsControlsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of security standards controls.</p>
        *          <p>For each control, the results include information about whether it is currently enabled,
        *          the severity, and a link to remediation information.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DescribeStandardsControlsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DescribeStandardsControlsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DescribeStandardsControlsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeStandardsControlsCommandInput} for command's `input` shape.
        * @see {@link DescribeStandardsControlsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DescribeStandardsControlsCommand extends $Command<DescribeStandardsControlsCommandInput, DescribeStandardsControlsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DescribeStandardsControlsCommandInput;
            constructor(input: DescribeStandardsControlsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeStandardsControlsCommandInput, DescribeStandardsControlsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableImportFindingsForProductCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisableImportFindingsForProductRequest, DisableImportFindingsForProductResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DisableImportFindingsForProductCommandInput extends DisableImportFindingsForProductRequest {
    }
    export interface DisableImportFindingsForProductCommandOutput extends DisableImportFindingsForProductResponse, __MetadataBearer {
    }
    /**
        * <p>Disables the integration of the specified product with Security Hub. After the integration is
        *          disabled, findings from that product are no longer sent to Security Hub.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DisableImportFindingsForProductCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DisableImportFindingsForProductCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DisableImportFindingsForProductCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableImportFindingsForProductCommandInput} for command's `input` shape.
        * @see {@link DisableImportFindingsForProductCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DisableImportFindingsForProductCommand extends $Command<DisableImportFindingsForProductCommandInput, DisableImportFindingsForProductCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DisableImportFindingsForProductCommandInput;
            constructor(input: DisableImportFindingsForProductCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableImportFindingsForProductCommandInput, DisableImportFindingsForProductCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableOrganizationAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisableOrganizationAdminAccountRequest, DisableOrganizationAdminAccountResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DisableOrganizationAdminAccountCommandInput extends DisableOrganizationAdminAccountRequest {
    }
    export interface DisableOrganizationAdminAccountCommandOutput extends DisableOrganizationAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Disables a Security Hub administrator account. Can only be called by the organization
        *          management account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DisableOrganizationAdminAccountCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DisableOrganizationAdminAccountCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DisableOrganizationAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableOrganizationAdminAccountCommandInput} for command's `input` shape.
        * @see {@link DisableOrganizationAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DisableOrganizationAdminAccountCommand extends $Command<DisableOrganizationAdminAccountCommandInput, DisableOrganizationAdminAccountCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DisableOrganizationAdminAccountCommandInput;
            constructor(input: DisableOrganizationAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableOrganizationAdminAccountCommandInput, DisableOrganizationAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableSecurityHubCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisableSecurityHubRequest, DisableSecurityHubResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DisableSecurityHubCommandInput extends DisableSecurityHubRequest {
    }
    export interface DisableSecurityHubCommandOutput extends DisableSecurityHubResponse, __MetadataBearer {
    }
    /**
        * <p>Disables Security Hub in your account only in the current Region. To disable Security Hub in all
        *          Regions, you must submit one request per Region where you have enabled Security Hub.</p>
        *          <p>When you disable Security Hub for an administrator account, it doesn't disable Security Hub for any associated
        *          member accounts.</p>
        *          <p>When you disable Security Hub, your existing findings and insights and any Security Hub configuration
        *          settings are deleted after 90 days and cannot be recovered. Any standards that were enabled
        *          are disabled, and your administrator and member account associations are removed.</p>
        *          <p>If you want to save your existing findings, you must export them before you disable
        *          Security Hub.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DisableSecurityHubCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DisableSecurityHubCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DisableSecurityHubCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableSecurityHubCommandInput} for command's `input` shape.
        * @see {@link DisableSecurityHubCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DisableSecurityHubCommand extends $Command<DisableSecurityHubCommandInput, DisableSecurityHubCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DisableSecurityHubCommandInput;
            constructor(input: DisableSecurityHubCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableSecurityHubCommandInput, DisableSecurityHubCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateFromAdministratorAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateFromAdministratorAccountRequest, DisassociateFromAdministratorAccountResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DisassociateFromAdministratorAccountCommandInput extends DisassociateFromAdministratorAccountRequest {
    }
    export interface DisassociateFromAdministratorAccountCommandOutput extends DisassociateFromAdministratorAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates the current Security Hub member account from the associated administrator
        *          account.</p>
        *          <p>This operation is only used by accounts that are not part of an organization. For
        *          organization accounts, only the administrator account can
        *          disassociate a member account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DisassociateFromAdministratorAccountCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DisassociateFromAdministratorAccountCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DisassociateFromAdministratorAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateFromAdministratorAccountCommandInput} for command's `input` shape.
        * @see {@link DisassociateFromAdministratorAccountCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DisassociateFromAdministratorAccountCommand extends $Command<DisassociateFromAdministratorAccountCommandInput, DisassociateFromAdministratorAccountCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DisassociateFromAdministratorAccountCommandInput;
            constructor(input: DisassociateFromAdministratorAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateFromAdministratorAccountCommandInput, DisassociateFromAdministratorAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateFromMasterAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateFromMasterAccountRequest, DisassociateFromMasterAccountResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DisassociateFromMasterAccountCommandInput extends DisassociateFromMasterAccountRequest {
    }
    export interface DisassociateFromMasterAccountCommandOutput extends DisassociateFromMasterAccountResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>This method is deprecated. Instead, use <code>DisassociateFromAdministratorAccount</code>.</p>
        *          <p>The Security Hub console continues to use <code>DisassociateFromMasterAccount</code>. It will eventually change to use <code>DisassociateFromAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>DisassociateFromMasterAccount</code>. You should also add <code>DisassociateFromAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>DisassociateFromAdministratorAccount</code>.</p>
        *          <p>Disassociates the current Security Hub member account from the associated administrator
        *          account.</p>
        *          <p>This operation is only used by accounts that are not part of an organization. For
        *          organization accounts, only the administrator account can
        *          disassociate a member account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DisassociateFromMasterAccountCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DisassociateFromMasterAccountCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DisassociateFromMasterAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateFromMasterAccountCommandInput} for command's `input` shape.
        * @see {@link DisassociateFromMasterAccountCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DisassociateFromMasterAccountCommand extends $Command<DisassociateFromMasterAccountCommandInput, DisassociateFromMasterAccountCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DisassociateFromMasterAccountCommandInput;
            constructor(input: DisassociateFromMasterAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateFromMasterAccountCommandInput, DisassociateFromMasterAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateMembersRequest, DisassociateMembersResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface DisassociateMembersCommandInput extends DisassociateMembersRequest {
    }
    export interface DisassociateMembersCommandOutput extends DisassociateMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified member accounts from the associated administrator account.</p>
        *          <p>Can be used to disassociate both accounts that are managed using Organizations and accounts that
        *          were invited manually.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, DisassociateMembersCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, DisassociateMembersCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new DisassociateMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateMembersCommandInput} for command's `input` shape.
        * @see {@link DisassociateMembersCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class DisassociateMembersCommand extends $Command<DisassociateMembersCommandInput, DisassociateMembersCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: DisassociateMembersCommandInput;
            constructor(input: DisassociateMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateMembersCommandInput, DisassociateMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableImportFindingsForProductCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EnableImportFindingsForProductRequest, EnableImportFindingsForProductResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface EnableImportFindingsForProductCommandInput extends EnableImportFindingsForProductRequest {
    }
    export interface EnableImportFindingsForProductCommandOutput extends EnableImportFindingsForProductResponse, __MetadataBearer {
    }
    /**
        * <p>Enables the integration of a partner product with Security Hub. Integrated products send
        *          findings to Security Hub.</p>
        *          <p>When you enable a product integration, a permissions policy that grants permission for
        *          the product to send findings to Security Hub is applied.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, EnableImportFindingsForProductCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, EnableImportFindingsForProductCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new EnableImportFindingsForProductCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableImportFindingsForProductCommandInput} for command's `input` shape.
        * @see {@link EnableImportFindingsForProductCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class EnableImportFindingsForProductCommand extends $Command<EnableImportFindingsForProductCommandInput, EnableImportFindingsForProductCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: EnableImportFindingsForProductCommandInput;
            constructor(input: EnableImportFindingsForProductCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableImportFindingsForProductCommandInput, EnableImportFindingsForProductCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableOrganizationAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EnableOrganizationAdminAccountRequest, EnableOrganizationAdminAccountResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface EnableOrganizationAdminAccountCommandInput extends EnableOrganizationAdminAccountRequest {
    }
    export interface EnableOrganizationAdminAccountCommandOutput extends EnableOrganizationAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Designates the Security Hub administrator account for an organization. Can only be called by
        *          the organization management account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, EnableOrganizationAdminAccountCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, EnableOrganizationAdminAccountCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new EnableOrganizationAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableOrganizationAdminAccountCommandInput} for command's `input` shape.
        * @see {@link EnableOrganizationAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class EnableOrganizationAdminAccountCommand extends $Command<EnableOrganizationAdminAccountCommandInput, EnableOrganizationAdminAccountCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: EnableOrganizationAdminAccountCommandInput;
            constructor(input: EnableOrganizationAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableOrganizationAdminAccountCommandInput, EnableOrganizationAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableSecurityHubCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { EnableSecurityHubRequest, EnableSecurityHubResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface EnableSecurityHubCommandInput extends EnableSecurityHubRequest {
    }
    export interface EnableSecurityHubCommandOutput extends EnableSecurityHubResponse, __MetadataBearer {
    }
    /**
        * <p>Enables Security Hub for your account in the current Region or the Region you specify in the
        *          request.</p>
        *          <p>When you enable Security Hub, you grant to Security Hub the permissions necessary to gather findings
        *          from other services that are integrated with Security Hub.</p>
        *          <p>When you use the <code>EnableSecurityHub</code> operation to enable Security Hub, you also
        *          automatically enable the following standards.</p>
        *          <ul>
        *             <li>
        *                <p>CIS Amazon Web Services Foundations</p>
        *             </li>
        *             <li>
        *                <p>Amazon Web Services Foundational Security Best Practices</p>
        *             </li>
        *          </ul>
        *          <p>You do not enable the Payment Card Industry Data Security Standard (PCI DSS) standard. </p>
        *          <p>To not enable the automatically enabled standards, set
        *             <code>EnableDefaultStandards</code> to <code>false</code>.</p>
        *          <p>After you enable Security Hub, to enable a standard, use the <code>BatchEnableStandards</code> operation. To disable a standard, use the
        *                <code>BatchDisableStandards</code> operation.</p>
        *          <p>To learn more, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-settingup.html">setup information</a> in the <i>Security Hub User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, EnableSecurityHubCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, EnableSecurityHubCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new EnableSecurityHubCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableSecurityHubCommandInput} for command's `input` shape.
        * @see {@link EnableSecurityHubCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class EnableSecurityHubCommand extends $Command<EnableSecurityHubCommandInput, EnableSecurityHubCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: EnableSecurityHubCommandInput;
            constructor(input: EnableSecurityHubCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableSecurityHubCommandInput, EnableSecurityHubCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetAdministratorAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAdministratorAccountRequest, GetAdministratorAccountResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetAdministratorAccountCommandInput extends GetAdministratorAccountRequest {
    }
    export interface GetAdministratorAccountCommandOutput extends GetAdministratorAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Provides the details for the Security Hub administrator account for the current member account.</p>
        *          <p>Can be used by both member accounts that are managed using Organizations and accounts that were
        *          invited manually.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetAdministratorAccountCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetAdministratorAccountCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetAdministratorAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAdministratorAccountCommandInput} for command's `input` shape.
        * @see {@link GetAdministratorAccountCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetAdministratorAccountCommand extends $Command<GetAdministratorAccountCommandInput, GetAdministratorAccountCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetAdministratorAccountCommandInput;
            constructor(input: GetAdministratorAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAdministratorAccountCommandInput, GetAdministratorAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetEnabledStandardsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetEnabledStandardsRequest, GetEnabledStandardsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetEnabledStandardsCommandInput extends GetEnabledStandardsRequest {
    }
    export interface GetEnabledStandardsCommandOutput extends GetEnabledStandardsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the standards that are currently enabled.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetEnabledStandardsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetEnabledStandardsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetEnabledStandardsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEnabledStandardsCommandInput} for command's `input` shape.
        * @see {@link GetEnabledStandardsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetEnabledStandardsCommand extends $Command<GetEnabledStandardsCommandInput, GetEnabledStandardsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetEnabledStandardsCommandInput;
            constructor(input: GetEnabledStandardsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEnabledStandardsCommandInput, GetEnabledStandardsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetFindingAggregatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetFindingAggregatorRequest, GetFindingAggregatorResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetFindingAggregatorCommandInput extends GetFindingAggregatorRequest {
    }
    export interface GetFindingAggregatorCommandOutput extends GetFindingAggregatorResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the current finding aggregation configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetFindingAggregatorCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetFindingAggregatorCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetFindingAggregatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFindingAggregatorCommandInput} for command's `input` shape.
        * @see {@link GetFindingAggregatorCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetFindingAggregatorCommand extends $Command<GetFindingAggregatorCommandInput, GetFindingAggregatorCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetFindingAggregatorCommandInput;
            constructor(input: GetFindingAggregatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFindingAggregatorCommandInput, GetFindingAggregatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetFindingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetFindingsRequest, GetFindingsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetFindingsCommandInput extends GetFindingsRequest {
    }
    export interface GetFindingsCommandOutput extends GetFindingsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of findings that match the specified criteria.</p>
        *          <p>If finding aggregation is enabled, then when you call <code>GetFindings</code> from the aggregation Region, the results include all of the matching findings from both the aggregation Region and the linked Regions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetFindingsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetFindingsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetFindingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFindingsCommandInput} for command's `input` shape.
        * @see {@link GetFindingsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetFindingsCommand extends $Command<GetFindingsCommandInput, GetFindingsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetFindingsCommandInput;
            constructor(input: GetFindingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFindingsCommandInput, GetFindingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInsightResultsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetInsightResultsRequest, GetInsightResultsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetInsightResultsCommandInput extends GetInsightResultsRequest {
    }
    export interface GetInsightResultsCommandOutput extends GetInsightResultsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the results of the Security Hub insight specified by the insight ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetInsightResultsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetInsightResultsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetInsightResultsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInsightResultsCommandInput} for command's `input` shape.
        * @see {@link GetInsightResultsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetInsightResultsCommand extends $Command<GetInsightResultsCommandInput, GetInsightResultsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetInsightResultsCommandInput;
            constructor(input: GetInsightResultsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInsightResultsCommandInput, GetInsightResultsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInsightsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetInsightsRequest, GetInsightsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetInsightsCommandInput extends GetInsightsRequest {
    }
    export interface GetInsightsCommandOutput extends GetInsightsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists and describes insights for the specified insight ARNs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetInsightsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetInsightsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetInsightsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInsightsCommandInput} for command's `input` shape.
        * @see {@link GetInsightsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetInsightsCommand extends $Command<GetInsightsCommandInput, GetInsightsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetInsightsCommandInput;
            constructor(input: GetInsightsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInsightsCommandInput, GetInsightsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInvitationsCountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetInvitationsCountRequest, GetInvitationsCountResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetInvitationsCountCommandInput extends GetInvitationsCountRequest {
    }
    export interface GetInvitationsCountCommandOutput extends GetInvitationsCountResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the count of all Security Hub membership invitations that were sent to the
        *          current member account, not including the currently accepted invitation. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetInvitationsCountCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetInvitationsCountCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetInvitationsCountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInvitationsCountCommandInput} for command's `input` shape.
        * @see {@link GetInvitationsCountCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetInvitationsCountCommand extends $Command<GetInvitationsCountCommandInput, GetInvitationsCountCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetInvitationsCountCommandInput;
            constructor(input: GetInvitationsCountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInvitationsCountCommandInput, GetInvitationsCountCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetMasterAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMasterAccountRequest, GetMasterAccountResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetMasterAccountCommandInput extends GetMasterAccountRequest {
    }
    export interface GetMasterAccountCommandOutput extends GetMasterAccountResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>This method is deprecated. Instead, use <code>GetAdministratorAccount</code>.</p>
        *          <p>The Security Hub console continues to use <code>GetMasterAccount</code>. It will eventually change to use <code>GetAdministratorAccount</code>. Any IAM policies that specifically control access to this function must continue to use <code>GetMasterAccount</code>. You should also add <code>GetAdministratorAccount</code> to your policies to ensure that the correct permissions are in place after the console begins to use <code>GetAdministratorAccount</code>.</p>
        *          <p>Provides the details for the Security Hub administrator account for the current member account.</p>
        *          <p>Can be used by both member accounts that are managed using Organizations and accounts that were
        *          invited manually.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetMasterAccountCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetMasterAccountCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetMasterAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMasterAccountCommandInput} for command's `input` shape.
        * @see {@link GetMasterAccountCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetMasterAccountCommand extends $Command<GetMasterAccountCommandInput, GetMasterAccountCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetMasterAccountCommandInput;
            constructor(input: GetMasterAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMasterAccountCommandInput, GetMasterAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMembersRequest, GetMembersResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface GetMembersCommandInput extends GetMembersRequest {
    }
    export interface GetMembersCommandOutput extends GetMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the details for the Security Hub member accounts for the specified account IDs.</p>
        *          <p>An administrator account can be either the delegated Security Hub administrator account for an
        *          organization or an administrator account that enabled Security Hub manually.</p>
        *          <p>The results include both member accounts that are managed using Organizations and accounts that
        *          were invited manually.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, GetMembersCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, GetMembersCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new GetMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMembersCommandInput} for command's `input` shape.
        * @see {@link GetMembersCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class GetMembersCommand extends $Command<GetMembersCommandInput, GetMembersCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: GetMembersCommandInput;
            constructor(input: GetMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMembersCommandInput, GetMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/InviteMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { InviteMembersRequest, InviteMembersResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface InviteMembersCommandInput extends InviteMembersRequest {
    }
    export interface InviteMembersCommandOutput extends InviteMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Invites other Amazon Web Services accounts to become member accounts for the Security Hub administrator account that
        *          the invitation is sent from.</p>
        *          <p>This operation is only used to invite accounts that do not belong to an organization.
        *          Organization accounts do not receive invitations.</p>
        *          <p>Before you can use this action to invite a member, you must first use the <code>CreateMembers</code> action to create the member account in Security Hub.</p>
        *          <p>When the account owner enables Security Hub and accepts the invitation to become a member
        *          account, the administrator account can view the findings generated from the member account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, InviteMembersCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, InviteMembersCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new InviteMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InviteMembersCommandInput} for command's `input` shape.
        * @see {@link InviteMembersCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class InviteMembersCommand extends $Command<InviteMembersCommandInput, InviteMembersCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: InviteMembersCommandInput;
            constructor(input: InviteMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InviteMembersCommandInput, InviteMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListEnabledProductsForImportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEnabledProductsForImportRequest, ListEnabledProductsForImportResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface ListEnabledProductsForImportCommandInput extends ListEnabledProductsForImportRequest {
    }
    export interface ListEnabledProductsForImportCommandOutput extends ListEnabledProductsForImportResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all findings-generating solutions (products) that you are subscribed to receive
        *          findings from in Security Hub.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, ListEnabledProductsForImportCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, ListEnabledProductsForImportCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new ListEnabledProductsForImportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEnabledProductsForImportCommandInput} for command's `input` shape.
        * @see {@link ListEnabledProductsForImportCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class ListEnabledProductsForImportCommand extends $Command<ListEnabledProductsForImportCommandInput, ListEnabledProductsForImportCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: ListEnabledProductsForImportCommandInput;
            constructor(input: ListEnabledProductsForImportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEnabledProductsForImportCommandInput, ListEnabledProductsForImportCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListFindingAggregatorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFindingAggregatorsRequest, ListFindingAggregatorsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface ListFindingAggregatorsCommandInput extends ListFindingAggregatorsRequest {
    }
    export interface ListFindingAggregatorsCommandOutput extends ListFindingAggregatorsResponse, __MetadataBearer {
    }
    /**
        * <p>If finding aggregation is enabled, then <code>ListFindingAggregators</code> returns the ARN of the finding aggregator. You can run this operation from any Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, ListFindingAggregatorsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, ListFindingAggregatorsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new ListFindingAggregatorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFindingAggregatorsCommandInput} for command's `input` shape.
        * @see {@link ListFindingAggregatorsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class ListFindingAggregatorsCommand extends $Command<ListFindingAggregatorsCommandInput, ListFindingAggregatorsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: ListFindingAggregatorsCommandInput;
            constructor(input: ListFindingAggregatorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFindingAggregatorsCommandInput, ListFindingAggregatorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListInvitationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListInvitationsRequest, ListInvitationsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface ListInvitationsCommandInput extends ListInvitationsRequest {
    }
    export interface ListInvitationsCommandOutput extends ListInvitationsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all Security Hub membership invitations that were sent to the current Amazon Web Services account.</p>
        *          <p>This operation is only used by accounts that are managed by invitation.
        *          Accounts that are managed using the integration with Organizations do not receive invitations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, ListInvitationsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, ListInvitationsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new ListInvitationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInvitationsCommandInput} for command's `input` shape.
        * @see {@link ListInvitationsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class ListInvitationsCommand extends $Command<ListInvitationsCommandInput, ListInvitationsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: ListInvitationsCommandInput;
            constructor(input: ListInvitationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInvitationsCommandInput, ListInvitationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListMembersRequest, ListMembersResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface ListMembersCommandInput extends ListMembersRequest {
    }
    export interface ListMembersCommandOutput extends ListMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists details about all member accounts for the current Security Hub administrator
        *          account.</p>
        *          <p>The results include both member accounts that belong to an organization and member
        *          accounts that were invited manually.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, ListMembersCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, ListMembersCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new ListMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMembersCommandInput} for command's `input` shape.
        * @see {@link ListMembersCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class ListMembersCommand extends $Command<ListMembersCommandInput, ListMembersCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: ListMembersCommandInput;
            constructor(input: ListMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMembersCommandInput, ListMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListOrganizationAdminAccountsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOrganizationAdminAccountsRequest, ListOrganizationAdminAccountsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface ListOrganizationAdminAccountsCommandInput extends ListOrganizationAdminAccountsRequest {
    }
    export interface ListOrganizationAdminAccountsCommandOutput extends ListOrganizationAdminAccountsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the Security Hub administrator accounts. Can only be called by the organization
        *          management account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, ListOrganizationAdminAccountsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, ListOrganizationAdminAccountsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new ListOrganizationAdminAccountsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOrganizationAdminAccountsCommandInput} for command's `input` shape.
        * @see {@link ListOrganizationAdminAccountsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class ListOrganizationAdminAccountsCommand extends $Command<ListOrganizationAdminAccountsCommandInput, ListOrganizationAdminAccountsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: ListOrganizationAdminAccountsCommandInput;
            constructor(input: ListOrganizationAdminAccountsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOrganizationAdminAccountsCommandInput, ListOrganizationAdminAccountsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of tags associated with a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, ListTagsForResourceCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, ListTagsForResourceCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, TagResourceCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, TagResourceCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UntagResourceCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UntagResourceCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateActionTargetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateActionTargetRequest, UpdateActionTargetResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UpdateActionTargetCommandInput extends UpdateActionTargetRequest {
    }
    export interface UpdateActionTargetCommandOutput extends UpdateActionTargetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the name and description of a custom action target in Security Hub.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UpdateActionTargetCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UpdateActionTargetCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UpdateActionTargetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateActionTargetCommandInput} for command's `input` shape.
        * @see {@link UpdateActionTargetCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UpdateActionTargetCommand extends $Command<UpdateActionTargetCommandInput, UpdateActionTargetCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UpdateActionTargetCommandInput;
            constructor(input: UpdateActionTargetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateActionTargetCommandInput, UpdateActionTargetCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateFindingAggregatorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFindingAggregatorRequest, UpdateFindingAggregatorResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UpdateFindingAggregatorCommandInput extends UpdateFindingAggregatorRequest {
    }
    export interface UpdateFindingAggregatorCommandOutput extends UpdateFindingAggregatorResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the finding aggregation configuration. Used to update the Region linking mode and the list of included or excluded Regions. You cannot use <code>UpdateFindingAggregator</code> to change the aggregation Region.</p>
        *          <p>You must run <code>UpdateFindingAggregator</code> from the current aggregation Region.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UpdateFindingAggregatorCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UpdateFindingAggregatorCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UpdateFindingAggregatorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFindingAggregatorCommandInput} for command's `input` shape.
        * @see {@link UpdateFindingAggregatorCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UpdateFindingAggregatorCommand extends $Command<UpdateFindingAggregatorCommandInput, UpdateFindingAggregatorCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UpdateFindingAggregatorCommandInput;
            constructor(input: UpdateFindingAggregatorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFindingAggregatorCommandInput, UpdateFindingAggregatorCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateFindingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFindingsRequest, UpdateFindingsResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UpdateFindingsCommandInput extends UpdateFindingsRequest {
    }
    export interface UpdateFindingsCommandOutput extends UpdateFindingsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             <code>UpdateFindings</code> is deprecated. Instead of <code>UpdateFindings</code>, use
        *             <code>BatchUpdateFindings</code>.</p>
        *          <p>Updates the <code>Note</code> and <code>RecordState</code> of the Security Hub-aggregated
        *          findings that the filter attributes specify. Any member account that can view the finding
        *          also sees the update to the finding.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UpdateFindingsCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UpdateFindingsCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UpdateFindingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFindingsCommandInput} for command's `input` shape.
        * @see {@link UpdateFindingsCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UpdateFindingsCommand extends $Command<UpdateFindingsCommandInput, UpdateFindingsCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UpdateFindingsCommandInput;
            constructor(input: UpdateFindingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFindingsCommandInput, UpdateFindingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateInsightCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateInsightRequest, UpdateInsightResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UpdateInsightCommandInput extends UpdateInsightRequest {
    }
    export interface UpdateInsightCommandOutput extends UpdateInsightResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the Security Hub insight identified by the specified insight ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UpdateInsightCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UpdateInsightCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UpdateInsightCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateInsightCommandInput} for command's `input` shape.
        * @see {@link UpdateInsightCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UpdateInsightCommand extends $Command<UpdateInsightCommandInput, UpdateInsightCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UpdateInsightCommandInput;
            constructor(input: UpdateInsightCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateInsightCommandInput, UpdateInsightCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateOrganizationConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateOrganizationConfigurationRequest, UpdateOrganizationConfigurationResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UpdateOrganizationConfigurationCommandInput extends UpdateOrganizationConfigurationRequest {
    }
    export interface UpdateOrganizationConfigurationCommandOutput extends UpdateOrganizationConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Used to update the configuration related to Organizations. Can only be called from a
        *          Security Hub administrator account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UpdateOrganizationConfigurationCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UpdateOrganizationConfigurationCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UpdateOrganizationConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateOrganizationConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateOrganizationConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UpdateOrganizationConfigurationCommand extends $Command<UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UpdateOrganizationConfigurationCommandInput;
            constructor(input: UpdateOrganizationConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateSecurityHubConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSecurityHubConfigurationRequest, UpdateSecurityHubConfigurationResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UpdateSecurityHubConfigurationCommandInput extends UpdateSecurityHubConfigurationRequest {
    }
    export interface UpdateSecurityHubConfigurationCommandOutput extends UpdateSecurityHubConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates configuration options for Security Hub.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UpdateSecurityHubConfigurationCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UpdateSecurityHubConfigurationCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UpdateSecurityHubConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSecurityHubConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateSecurityHubConfigurationCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UpdateSecurityHubConfigurationCommand extends $Command<UpdateSecurityHubConfigurationCommandInput, UpdateSecurityHubConfigurationCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UpdateSecurityHubConfigurationCommandInput;
            constructor(input: UpdateSecurityHubConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSecurityHubConfigurationCommandInput, UpdateSecurityHubConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateStandardsControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateStandardsControlRequest, UpdateStandardsControlResponse } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2";
    import { SecurityHubClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient";
    export interface UpdateStandardsControlCommandInput extends UpdateStandardsControlRequest {
    }
    export interface UpdateStandardsControlCommandOutput extends UpdateStandardsControlResponse, __MetadataBearer {
    }
    /**
        * <p>Used to control whether an individual security standard control is enabled or
        *          disabled.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecurityHubClient, UpdateStandardsControlCommand } from "@aws-sdk/client-securityhub"; // ES Modules import
        * // const { SecurityHubClient, UpdateStandardsControlCommand } = require("@aws-sdk/client-securityhub"); // CommonJS import
        * const client = new SecurityHubClient(config);
        * const command = new UpdateStandardsControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStandardsControlCommandInput} for command's `input` shape.
        * @see {@link UpdateStandardsControlCommandOutput} for command's `response` shape.
        * @see {@link SecurityHubClientResolvedConfig | config} for SecurityHubClient's `config` shape.
        *
        */
    export class UpdateStandardsControlCommand extends $Command<UpdateStandardsControlCommandInput, UpdateStandardsControlCommandOutput, SecurityHubClientResolvedConfig> {
            readonly input: UpdateStandardsControlCommandInput;
            constructor(input: UpdateStandardsControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecurityHubClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStandardsControlCommandInput, UpdateStandardsControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/SecurityHubClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AcceptAdministratorInvitationCommandInput, AcceptAdministratorInvitationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/AcceptAdministratorInvitationCommand";
    import { AcceptInvitationCommandInput, AcceptInvitationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/AcceptInvitationCommand";
    import { BatchDisableStandardsCommandInput, BatchDisableStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchDisableStandardsCommand";
    import { BatchEnableStandardsCommandInput, BatchEnableStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchEnableStandardsCommand";
    import { BatchImportFindingsCommandInput, BatchImportFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchImportFindingsCommand";
    import { BatchUpdateFindingsCommandInput, BatchUpdateFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/BatchUpdateFindingsCommand";
    import { CreateActionTargetCommandInput, CreateActionTargetCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateActionTargetCommand";
    import { CreateFindingAggregatorCommandInput, CreateFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateFindingAggregatorCommand";
    import { CreateInsightCommandInput, CreateInsightCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateInsightCommand";
    import { CreateMembersCommandInput, CreateMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/CreateMembersCommand";
    import { DeclineInvitationsCommandInput, DeclineInvitationsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeclineInvitationsCommand";
    import { DeleteActionTargetCommandInput, DeleteActionTargetCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteActionTargetCommand";
    import { DeleteFindingAggregatorCommandInput, DeleteFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteFindingAggregatorCommand";
    import { DeleteInsightCommandInput, DeleteInsightCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteInsightCommand";
    import { DeleteInvitationsCommandInput, DeleteInvitationsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteInvitationsCommand";
    import { DeleteMembersCommandInput, DeleteMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DeleteMembersCommand";
    import { DescribeActionTargetsCommandInput, DescribeActionTargetsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeActionTargetsCommand";
    import { DescribeHubCommandInput, DescribeHubCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeHubCommand";
    import { DescribeOrganizationConfigurationCommandInput, DescribeOrganizationConfigurationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeOrganizationConfigurationCommand";
    import { DescribeProductsCommandInput, DescribeProductsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeProductsCommand";
    import { DescribeStandardsCommandInput, DescribeStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeStandardsCommand";
    import { DescribeStandardsControlsCommandInput, DescribeStandardsControlsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DescribeStandardsControlsCommand";
    import { DisableImportFindingsForProductCommandInput, DisableImportFindingsForProductCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableImportFindingsForProductCommand";
    import { DisableOrganizationAdminAccountCommandInput, DisableOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableOrganizationAdminAccountCommand";
    import { DisableSecurityHubCommandInput, DisableSecurityHubCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisableSecurityHubCommand";
    import { DisassociateFromAdministratorAccountCommandInput, DisassociateFromAdministratorAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateFromAdministratorAccountCommand";
    import { DisassociateFromMasterAccountCommandInput, DisassociateFromMasterAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateFromMasterAccountCommand";
    import { DisassociateMembersCommandInput, DisassociateMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/DisassociateMembersCommand";
    import { EnableImportFindingsForProductCommandInput, EnableImportFindingsForProductCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableImportFindingsForProductCommand";
    import { EnableOrganizationAdminAccountCommandInput, EnableOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableOrganizationAdminAccountCommand";
    import { EnableSecurityHubCommandInput, EnableSecurityHubCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/EnableSecurityHubCommand";
    import { GetAdministratorAccountCommandInput, GetAdministratorAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetAdministratorAccountCommand";
    import { GetEnabledStandardsCommandInput, GetEnabledStandardsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetEnabledStandardsCommand";
    import { GetFindingAggregatorCommandInput, GetFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetFindingAggregatorCommand";
    import { GetFindingsCommandInput, GetFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetFindingsCommand";
    import { GetInsightResultsCommandInput, GetInsightResultsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInsightResultsCommand";
    import { GetInsightsCommandInput, GetInsightsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInsightsCommand";
    import { GetInvitationsCountCommandInput, GetInvitationsCountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetInvitationsCountCommand";
    import { GetMasterAccountCommandInput, GetMasterAccountCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetMasterAccountCommand";
    import { GetMembersCommandInput, GetMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/GetMembersCommand";
    import { InviteMembersCommandInput, InviteMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/InviteMembersCommand";
    import { ListEnabledProductsForImportCommandInput, ListEnabledProductsForImportCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListEnabledProductsForImportCommand";
    import { ListFindingAggregatorsCommandInput, ListFindingAggregatorsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListFindingAggregatorsCommand";
    import { ListInvitationsCommandInput, ListInvitationsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListInvitationsCommand";
    import { ListMembersCommandInput, ListMembersCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListMembersCommand";
    import { ListOrganizationAdminAccountsCommandInput, ListOrganizationAdminAccountsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListOrganizationAdminAccountsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/ListTagsForResourceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UntagResourceCommand";
    import { UpdateActionTargetCommandInput, UpdateActionTargetCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateActionTargetCommand";
    import { UpdateFindingAggregatorCommandInput, UpdateFindingAggregatorCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateFindingAggregatorCommand";
    import { UpdateFindingsCommandInput, UpdateFindingsCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateFindingsCommand";
    import { UpdateInsightCommandInput, UpdateInsightCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateInsightCommand";
    import { UpdateOrganizationConfigurationCommandInput, UpdateOrganizationConfigurationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateOrganizationConfigurationCommand";
    import { UpdateSecurityHubConfigurationCommandInput, UpdateSecurityHubConfigurationCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateSecurityHubConfigurationCommand";
    import { UpdateStandardsControlCommandInput, UpdateStandardsControlCommandOutput } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/commands/UpdateStandardsControlCommand";
    export type ServiceInputTypes = AcceptAdministratorInvitationCommandInput | AcceptInvitationCommandInput | BatchDisableStandardsCommandInput | BatchEnableStandardsCommandInput | BatchImportFindingsCommandInput | BatchUpdateFindingsCommandInput | CreateActionTargetCommandInput | CreateFindingAggregatorCommandInput | CreateInsightCommandInput | CreateMembersCommandInput | DeclineInvitationsCommandInput | DeleteActionTargetCommandInput | DeleteFindingAggregatorCommandInput | DeleteInsightCommandInput | DeleteInvitationsCommandInput | DeleteMembersCommandInput | DescribeActionTargetsCommandInput | DescribeHubCommandInput | DescribeOrganizationConfigurationCommandInput | DescribeProductsCommandInput | DescribeStandardsCommandInput | DescribeStandardsControlsCommandInput | DisableImportFindingsForProductCommandInput | DisableOrganizationAdminAccountCommandInput | DisableSecurityHubCommandInput | DisassociateFromAdministratorAccountCommandInput | DisassociateFromMasterAccountCommandInput | DisassociateMembersCommandInput | EnableImportFindingsForProductCommandInput | EnableOrganizationAdminAccountCommandInput | EnableSecurityHubCommandInput | GetAdministratorAccountCommandInput | GetEnabledStandardsCommandInput | GetFindingAggregatorCommandInput | GetFindingsCommandInput | GetInsightResultsCommandInput | GetInsightsCommandInput | GetInvitationsCountCommandInput | GetMasterAccountCommandInput | GetMembersCommandInput | InviteMembersCommandInput | ListEnabledProductsForImportCommandInput | ListFindingAggregatorsCommandInput | ListInvitationsCommandInput | ListMembersCommandInput | ListOrganizationAdminAccountsCommandInput | ListTagsForResourceCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateActionTargetCommandInput | UpdateFindingAggregatorCommandInput | UpdateFindingsCommandInput | UpdateInsightCommandInput | UpdateOrganizationConfigurationCommandInput | UpdateSecurityHubConfigurationCommandInput | UpdateStandardsControlCommandInput;
    export type ServiceOutputTypes = AcceptAdministratorInvitationCommandOutput | AcceptInvitationCommandOutput | BatchDisableStandardsCommandOutput | BatchEnableStandardsCommandOutput | BatchImportFindingsCommandOutput | BatchUpdateFindingsCommandOutput | CreateActionTargetCommandOutput | CreateFindingAggregatorCommandOutput | CreateInsightCommandOutput | CreateMembersCommandOutput | DeclineInvitationsCommandOutput | DeleteActionTargetCommandOutput | DeleteFindingAggregatorCommandOutput | DeleteInsightCommandOutput | DeleteInvitationsCommandOutput | DeleteMembersCommandOutput | DescribeActionTargetsCommandOutput | DescribeHubCommandOutput | DescribeOrganizationConfigurationCommandOutput | DescribeProductsCommandOutput | DescribeStandardsCommandOutput | DescribeStandardsControlsCommandOutput | DisableImportFindingsForProductCommandOutput | DisableOrganizationAdminAccountCommandOutput | DisableSecurityHubCommandOutput | DisassociateFromAdministratorAccountCommandOutput | DisassociateFromMasterAccountCommandOutput | DisassociateMembersCommandOutput | EnableImportFindingsForProductCommandOutput | EnableOrganizationAdminAccountCommandOutput | EnableSecurityHubCommandOutput | GetAdministratorAccountCommandOutput | GetEnabledStandardsCommandOutput | GetFindingAggregatorCommandOutput | GetFindingsCommandOutput | GetInsightResultsCommandOutput | GetInsightsCommandOutput | GetInvitationsCountCommandOutput | GetMasterAccountCommandOutput | GetMembersCommandOutput | InviteMembersCommandOutput | ListEnabledProductsForImportCommandOutput | ListFindingAggregatorsCommandOutput | ListInvitationsCommandOutput | ListMembersCommandOutput | ListOrganizationAdminAccountsCommandOutput | ListTagsForResourceCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateActionTargetCommandOutput | UpdateFindingAggregatorCommandOutput | UpdateFindingsCommandOutput | UpdateInsightCommandOutput | UpdateOrganizationConfigurationCommandOutput | UpdateSecurityHubConfigurationCommandOutput | UpdateStandardsControlCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SecurityHubClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SecurityHubClient class constructor that set the region, credentials and other options.
        */
    export interface SecurityHubClientConfig extends SecurityHubClientConfigType {
    }
    type SecurityHubClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SecurityHubClient class. This is resolved and normalized from the {@link SecurityHubClientConfig | constructor configuration interface}.
        */
    export interface SecurityHubClientResolvedConfig extends SecurityHubClientResolvedConfigType {
    }
    /**
        * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status
        *          of your environment based on controls from supported security standards. Security Hub collects
        *          security data from Amazon Web Services accounts, services, and integrated third-party products and helps
        *          you analyze security trends in your environment to identify the highest priority security
        *          issues. For more information about Security Hub, see the <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html">
        *                <i>Security HubUser
        *             Guide</i>
        *             </a>.</p>
        *          <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services
        *          Region that is currently active or in the specific Amazon Web Services Region that you specify in your
        *          request. Any configuration or settings change that results from the operation is applied
        *          only to that Region. To make the same change in other Regions, execute the same command for
        *          each Region to apply the change to.</p>
        *          <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of
        *          the member account with the administrator account is created only in the <code>us-west-2</code>
        *          Region. Security Hub must be enabled for the member account in the same Region that the invitation
        *          was sent from.</p>
        *          <p>The following throttling limits apply to using Security Hub API operations.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1
        *                request per second, <code>BurstLimit</code> of 1 request per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second.
        *                   <code>BurstLimit</code> of 6 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second.
        *             <code>BurstLimit</code> of 30 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second.
        *             <code>BurstLimit</code> of 30 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateStandardsControl</code> - <code>RateLimit</code> of
        *                1 request per second, <code>BurstLimit</code> of 5 requests per second.</p>
        *             </li>
        *             <li>
        *                <p>All other operations - <code>RateLimit</code> of 10 requests per second.
        *                   <code>BurstLimit</code> of 30 requests per second.</p>
        *             </li>
        *          </ul>
        */
    export class SecurityHubClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SecurityHubClientResolvedConfig> {
            /**
                * The resolved configuration of SecurityHubClient class. This is resolved and normalized from the {@link SecurityHubClientConfig | constructor configuration interface}.
                */
            readonly config: SecurityHubClientResolvedConfig;
            constructor(configuration: SecurityHubClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SecurityHubServiceException as __BaseException } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/SecurityHubServiceException";
    export interface AcceptAdministratorInvitationRequest {
            /**
                * <p>The account ID of the Security Hub administrator account that sent the invitation.</p>
                */
            AdministratorId: string | undefined;
            /**
                * <p>The identifier of the invitation sent from the Security Hub administrator account.</p>
                */
            InvitationId: string | undefined;
    }
    export namespace AcceptAdministratorInvitationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptAdministratorInvitationRequest) => any;
    }
    export interface AcceptAdministratorInvitationResponse {
    }
    export namespace AcceptAdministratorInvitationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptAdministratorInvitationResponse) => any;
    }
    /**
        * <p>Internal server error.</p>
        */
    export class InternalException extends __BaseException {
            readonly name: "InternalException";
            readonly $fault: "server";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalException, __BaseException>);
    }
    /**
        * <p>There is an issue with the account used to make the request. Either Security Hub is not enabled
        *          for the account, or the account does not have permission to perform this action.</p>
        */
    export class InvalidAccessException extends __BaseException {
            readonly name: "InvalidAccessException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAccessException, __BaseException>);
    }
    /**
        * <p>The request was rejected because you supplied an invalid or out-of-range value for an
        *          input parameter.</p>
        */
    export class InvalidInputException extends __BaseException {
            readonly name: "InvalidInputException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputException, __BaseException>);
    }
    /**
        * <p>The request was rejected because it attempted to create resources beyond the current Amazon Web Services
        *          account or throttling limits. The error code describes the limit exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The request was rejected because we can't find the specified resource.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface AcceptInvitationRequest {
            /**
                * <p>The account ID of the Security Hub administrator account that sent the invitation.</p>
                */
            MasterId: string | undefined;
            /**
                * <p>The identifier of the invitation sent from the Security Hub administrator account.</p>
                */
            InvitationId: string | undefined;
    }
    export namespace AcceptInvitationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptInvitationRequest) => any;
    }
    export interface AcceptInvitationResponse {
    }
    export namespace AcceptInvitationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptInvitationResponse) => any;
    }
    /**
        * <p>You don't have permission to perform the action specified in the request.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>The details of an Amazon Web Services account.</p>
        */
    export interface AccountDetails {
            /**
                * <p>The ID of an Amazon Web Services account.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The email of an Amazon Web Services account.</p>
                */
            Email?: string;
    }
    export namespace AccountDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountDetails) => any;
    }
    /**
        * <p>Provided if <code>CallerType</code> is <code>domain</code>. It provides information
        *          about the DNS domain that issued the API call.</p>
        */
    export interface AwsApiCallActionDomainDetails {
            /**
                * <p>The name of the DNS domain that issued the API call.</p>
                */
            Domain?: string;
    }
    export namespace AwsApiCallActionDomainDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiCallActionDomainDetails) => any;
    }
    /**
        * <p>Information about a city.</p>
        */
    export interface City {
            /**
                * <p>The name of the city.</p>
                */
            CityName?: string;
    }
    export namespace City {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: City) => any;
    }
    /**
        * <p>Information about a country.</p>
        */
    export interface Country {
            /**
                * <p>The 2-letter ISO 3166 country code for the country.</p>
                */
            CountryCode?: string;
            /**
                * <p>The name of the country.</p>
                */
            CountryName?: string;
    }
    export namespace Country {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Country) => any;
    }
    /**
        * <p>Provides the latitude and longitude coordinates of a location.</p>
        */
    export interface GeoLocation {
            /**
                * <p>The longitude of the location.</p>
                */
            Lon?: number;
            /**
                * <p>The latitude of the location.</p>
                */
            Lat?: number;
    }
    export namespace GeoLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GeoLocation) => any;
    }
    /**
        * <p>Provides information about an internet provider.</p>
        */
    export interface IpOrganizationDetails {
            /**
                * <p>The Autonomous System Number (ASN) of the internet provider</p>
                */
            Asn?: number;
            /**
                * <p>The name of the organization that registered the ASN.</p>
                */
            AsnOrg?: string;
            /**
                * <p>The ISP information for the internet provider.</p>
                */
            Isp?: string;
            /**
                * <p>The name of the internet provider.</p>
                */
            Org?: string;
    }
    export namespace IpOrganizationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IpOrganizationDetails) => any;
    }
    /**
        * <p>For <code>AwsApiAction</code>, <code>NetworkConnectionAction</code>, and
        *             <code>PortProbeAction</code>, <code>RemoteIpDetails</code> provides information about
        *          the remote IP address that was involved in the action.</p>
        */
    export interface ActionRemoteIpDetails {
            /**
                * <p>The IP address.</p>
                */
            IpAddressV4?: string;
            /**
                * <p>The internet service provider (ISP) organization associated with the remote IP
                *          address.</p>
                */
            Organization?: IpOrganizationDetails;
            /**
                * <p>The country where the remote IP address is located.</p>
                */
            Country?: Country;
            /**
                * <p>The city where the remote IP address is located.</p>
                */
            City?: City;
            /**
                * <p>The coordinates of the location of the remote IP address.</p>
                */
            GeoLocation?: GeoLocation;
    }
    export namespace ActionRemoteIpDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionRemoteIpDetails) => any;
    }
    /**
        * <p>Provided if <code>ActionType</code> is <code>AWS_API_CALL</code>. It provides details
        *          about the API call that was detected.</p>
        */
    export interface AwsApiCallAction {
            /**
                * <p>The name of the API method that was issued.</p>
                */
            Api?: string;
            /**
                * <p>The name of the Amazon Web Services service that the API method belongs to.</p>
                */
            ServiceName?: string;
            /**
                * <p>Indicates whether the API call originated from a remote IP address
                *             (<code>remoteip</code>) or from a DNS domain (<code>domain</code>).</p>
                */
            CallerType?: string;
            /**
                * <p>Provided if <code>CallerType</code> is <code>remoteIp</code>. Provides information about
                *          the remote IP address that the API call originated from.</p>
                */
            RemoteIpDetails?: ActionRemoteIpDetails;
            /**
                * <p>Provided if <code>CallerType</code> is <code>domain</code>. Provides information about
                *          the DNS domain that the API call originated from.</p>
                */
            DomainDetails?: AwsApiCallActionDomainDetails;
            /**
                * <p>Identifies the resources that were affected by the API call.</p>
                */
            AffectedResources?: Record<string, string>;
            /**
                * <p>An ISO8601-formatted timestamp that indicates when the API call was first
                *          observed.</p>
                */
            FirstSeen?: string;
            /**
                * <p>An ISO8601-formatted timestamp that indicates when the API call was most recently
                *          observed.</p>
                */
            LastSeen?: string;
    }
    export namespace AwsApiCallAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiCallAction) => any;
    }
    /**
        * <p>Provided if <code>ActionType</code> is <code>DNS_REQUEST</code>. It provides details
        *          about the DNS request that was detected.</p>
        */
    export interface DnsRequestAction {
            /**
                * <p>The DNS domain that is associated with the DNS request.</p>
                */
            Domain?: string;
            /**
                * <p>The protocol that was used for the DNS request.</p>
                */
            Protocol?: string;
            /**
                * <p>Indicates whether the DNS request was blocked.</p>
                */
            Blocked?: boolean;
    }
    export namespace DnsRequestAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DnsRequestAction) => any;
    }
    /**
        * <p>For <code>NetworkConnectionAction</code> and <code>PortProbeDetails</code>,
        *             <code>LocalPortDetails</code> provides information about the local port that was
        *          involved in the action.</p>
        */
    export interface ActionLocalPortDetails {
            /**
                * <p>The number of the port.</p>
                */
            Port?: number;
            /**
                * <p>The port name of the local connection.</p>
                */
            PortName?: string;
    }
    export namespace ActionLocalPortDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionLocalPortDetails) => any;
    }
    /**
        * <p>Provides information about the remote port that was involved in an attempted network
        *          connection.</p>
        */
    export interface ActionRemotePortDetails {
            /**
                * <p>The number of the port.</p>
                */
            Port?: number;
            /**
                * <p>The port name of the remote connection.</p>
                */
            PortName?: string;
    }
    export namespace ActionRemotePortDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionRemotePortDetails) => any;
    }
    /**
        * <p>Provided if <code>ActionType</code> is <code>NETWORK_CONNECTION</code>. It provides
        *          details about the attempted network connection that was detected.</p>
        */
    export interface NetworkConnectionAction {
            /**
                * <p>The direction of the network connection request (<code>IN</code> or
                *          <code>OUT</code>).</p>
                */
            ConnectionDirection?: string;
            /**
                * <p>Information about the remote IP address that issued the network connection
                *          request.</p>
                */
            RemoteIpDetails?: ActionRemoteIpDetails;
            /**
                * <p>Information about the port on the remote IP address.</p>
                */
            RemotePortDetails?: ActionRemotePortDetails;
            /**
                * <p>Information about the port on the EC2 instance.</p>
                */
            LocalPortDetails?: ActionLocalPortDetails;
            /**
                * <p>The protocol used to make the network connection request.</p>
                */
            Protocol?: string;
            /**
                * <p>Indicates whether the network connection attempt was blocked.</p>
                */
            Blocked?: boolean;
    }
    export namespace NetworkConnectionAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkConnectionAction) => any;
    }
    /**
        * <p>Provides information about the IP address where the scanned port is located.</p>
        */
    export interface ActionLocalIpDetails {
            /**
                * <p>The IP address.</p>
                */
            IpAddressV4?: string;
    }
    export namespace ActionLocalIpDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionLocalIpDetails) => any;
    }
    /**
        * <p>A port scan that was part of the port probe. For each scan, PortProbeDetails provides
        *          information about the local IP address and port that were scanned, and the remote IP
        *          address that the scan originated from.</p>
        */
    export interface PortProbeDetail {
            /**
                * <p>Provides information about the port that was scanned.</p>
                */
            LocalPortDetails?: ActionLocalPortDetails;
            /**
                * <p>Provides information about the IP address where the scanned port is located.</p>
                */
            LocalIpDetails?: ActionLocalIpDetails;
            /**
                * <p>Provides information about the remote IP address that performed the scan.</p>
                */
            RemoteIpDetails?: ActionRemoteIpDetails;
    }
    export namespace PortProbeDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortProbeDetail) => any;
    }
    /**
        * <p>Provided if <code>ActionType</code> is <code>PORT_PROBE</code>. It provides details
        *          about the attempted port probe that was detected.</p>
        */
    export interface PortProbeAction {
            /**
                * <p>Information about the ports affected by the port probe.</p>
                */
            PortProbeDetails?: PortProbeDetail[];
            /**
                * <p>Indicates whether the port probe was blocked.</p>
                */
            Blocked?: boolean;
    }
    export namespace PortProbeAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortProbeAction) => any;
    }
    /**
        * <p>Provides details about one of the following actions that affects or that was taken on a resource:</p>
        *          <ul>
        *             <li>
        *                <p>A remote IP address issued an Amazon Web Services API call</p>
        *             </li>
        *             <li>
        *                <p>A DNS request was received</p>
        *             </li>
        *             <li>
        *                <p>A remote IP address attempted to connect to an EC2 instance</p>
        *             </li>
        *             <li>
        *                <p>A remote IP address attempted a port probe on an EC2 instance</p>
        *             </li>
        *          </ul>
        */
    export interface Action {
            /**
                * <p>The type of action that was detected. The possible action types are:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>NETWORK_CONNECTION</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWS_API_CALL</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DNS_REQUEST</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PORT_PROBE</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ActionType?: string;
            /**
                * <p>Included if <code>ActionType</code> is <code>NETWORK_CONNECTION</code>. Provides details
                *          about the network connection that was detected.</p>
                */
            NetworkConnectionAction?: NetworkConnectionAction;
            /**
                * <p>Included if <code>ActionType</code> is <code>AWS_API_CALL</code>. Provides details about
                *          the API call that was detected. </p>
                */
            AwsApiCallAction?: AwsApiCallAction;
            /**
                * <p>Included if <code>ActionType</code> is <code>DNS_REQUEST</code>. Provides details about
                *          the DNS request that was detected. </p>
                */
            DnsRequestAction?: DnsRequestAction;
            /**
                * <p>Included if <code>ActionType</code> is <code>PORT_PROBE</code>. Provides details about
                *          the port probe that was detected. </p>
                */
            PortProbeAction?: PortProbeAction;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    /**
        * <p>An <code>ActionTarget</code> object.</p>
        */
    export interface ActionTarget {
            /**
                * <p>The ARN for the target action.</p>
                */
            ActionTargetArn: string | undefined;
            /**
                * <p>The name of the action target.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the target action.</p>
                */
            Description: string | undefined;
    }
    export namespace ActionTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionTarget) => any;
    }
    /**
        * <p>An adjustment to the CVSS metric.</p>
        */
    export interface Adjustment {
            /**
                * <p>The metric to adjust.</p>
                */
            Metric?: string;
            /**
                * <p>The reason for the adjustment.</p>
                */
            Reason?: string;
    }
    export namespace Adjustment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Adjustment) => any;
    }
    export enum AdminStatus {
            DISABLE_IN_PROGRESS = "DISABLE_IN_PROGRESS",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Represents a Security Hub administrator account designated by an organization management
        *          account.</p>
        */
    export interface AdminAccount {
            /**
                * <p>The Amazon Web Services account identifier of the Security Hub administrator account.</p>
                */
            AccountId?: string;
            /**
                * <p>The current status of the Security Hub administrator account. Indicates whether the account is
                *          currently enabled as a Security Hub administrator.</p>
                */
            Status?: AdminStatus | string;
    }
    export namespace AdminAccount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdminAccount) => any;
    }
    export enum AutoEnableStandards {
            DEFAULT = "DEFAULT",
            NONE = "NONE"
    }
    /**
        * <p>Information about an Availability Zone.</p>
        */
    export interface AvailabilityZone {
            /**
                * <p>The name of the Availability Zone.</p>
                */
            ZoneName?: string;
            /**
                * <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
                */
            SubnetId?: string;
    }
    export namespace AvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailabilityZone) => any;
    }
    /**
        * <p>Contains information about settings for logging access for the stage.</p>
        */
    export interface AwsApiGatewayAccessLogSettings {
            /**
                * <p>A single-line format of the access logs of data, as specified by selected
                *             <code>$context</code> variables. The format must include at least
                *             <code>$context.requestId</code>.</p>
                */
            Format?: string;
            /**
                * <p>The ARN of the CloudWatch Logs log group that receives the access logs.</p>
                */
            DestinationArn?: string;
    }
    export namespace AwsApiGatewayAccessLogSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayAccessLogSettings) => any;
    }
    /**
        * <p>Contains information about settings for canary deployment in the stage.</p>
        */
    export interface AwsApiGatewayCanarySettings {
            /**
                * <p>The percentage of traffic that is diverted to a canary deployment.</p>
                */
            PercentTraffic?: number;
            /**
                * <p>The deployment identifier for the canary deployment.</p>
                */
            DeploymentId?: string;
            /**
                * <p>Stage variables that are overridden in the canary release deployment. The variables
                *          include new stage variables that are introduced in the canary.</p>
                *          <p>Each variable is represented as a string-to-string map between the stage variable name
                *          and the variable value.</p>
                */
            StageVariableOverrides?: Record<string, string>;
            /**
                * <p>Indicates whether the canary deployment uses the stage cache.</p>
                */
            UseStageCache?: boolean;
    }
    export namespace AwsApiGatewayCanarySettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayCanarySettings) => any;
    }
    /**
        * <p>Contains information about the endpoints for the API.</p>
        */
    export interface AwsApiGatewayEndpointConfiguration {
            /**
                * <p>A list of endpoint types for the REST API.</p>
                *          <p>For an edge-optimized API, the endpoint type is <code>EDGE</code>. For a Regional API,
                *          the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is
                *             <code>PRIVATE</code>.</p>
                */
            Types?: string[];
    }
    export namespace AwsApiGatewayEndpointConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayEndpointConfiguration) => any;
    }
    /**
        * <p>Defines settings for a method for the stage.</p>
        */
    export interface AwsApiGatewayMethodSettings {
            /**
                * <p>Indicates whether CloudWatch metrics are enabled for the method. </p>
                */
            MetricsEnabled?: boolean;
            /**
                * <p>The logging level for this method. The logging level affects the log entries that are
                *          pushed to CloudWatch Logs.</p>
                *          <p>If the logging level is <code>ERROR</code>, then the logs only include error-level
                *          entries.</p>
                *          <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code>
                *          events and extra informational events.</p>
                *          <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code>
                *          </p>
                */
            LoggingLevel?: string;
            /**
                * <p>Indicates whether data trace logging is enabled for the method. Data trace logging
                *          affects the log entries that are pushed to CloudWatch Logs.</p>
                */
            DataTraceEnabled?: boolean;
            /**
                * <p>The throttling burst limit for the method.</p>
                */
            ThrottlingBurstLimit?: number;
            /**
                * <p>The throttling rate limit for the method.</p>
                */
            ThrottlingRateLimit?: number;
            /**
                * <p>Indicates whether responses are cached and returned for requests. For responses to be
                *          cached, a cache cluster must be enabled on the stage.</p>
                */
            CachingEnabled?: boolean;
            /**
                * <p>Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL,
                *          the longer the response is cached.</p>
                */
            CacheTtlInSeconds?: number;
            /**
                * <p>Indicates whether the cached responses are encrypted. </p>
                */
            CacheDataEncrypted?: boolean;
            /**
                * <p>Indicates whether authorization is required for a cache invalidation request.</p>
                */
            RequireAuthorizationForCacheControl?: boolean;
            /**
                * <p>Indicates how to handle unauthorized requests for cache invalidation.</p>
                *          <p>Valid values: <code>FAIL_WITH_403</code> | <code>SUCCEED_WITH_RESPONSE_HEADER</code> |
                *             <code>SUCCEED_WITHOUT_RESPONSE_HEADER</code>
                *          </p>
                */
            UnauthorizedCacheControlHeaderStrategy?: string;
            /**
                * <p>The HTTP method. You can use an asterisk (*) as a wildcard to apply method settings to
                *          multiple methods.</p>
                */
            HttpMethod?: string;
            /**
                * <p>The resource path for this method. Forward slashes (/) are encoded as ~1 . The initial
                *          slash must include a forward slash.</p>
                *          <p>For example, the path value <code>/resource/subresource</code> must be encoded as
                *             <code>/~1resource~1subresource</code>.</p>
                *          <p>To specify the root path, use only a slash (/). You can use an asterisk (*) as a
                *          wildcard to apply method settings to multiple methods.</p>
                */
            ResourcePath?: string;
    }
    export namespace AwsApiGatewayMethodSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayMethodSettings) => any;
    }
    /**
        * <p>Contains information about a REST API in version 1 of Amazon API Gateway.</p>
        */
    export interface AwsApiGatewayRestApiDetails {
            /**
                * <p>The identifier of the REST API.</p>
                */
            Id?: string;
            /**
                * <p>The name of the REST API.</p>
                */
            Name?: string;
            /**
                * <p>A description of the REST API.</p>
                */
            Description?: string;
            /**
                * <p>Indicates when the API was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedDate?: string;
            /**
                * <p>The version identifier for the REST API.</p>
                */
            Version?: string;
            /**
                * <p>The list of binary media types supported by the REST API.</p>
                */
            BinaryMediaTypes?: string[];
            /**
                * <p>The minimum size in bytes of a payload before compression is enabled.</p>
                *          <p>If <code>null</code>, then compression is disabled.</p>
                *          <p>If 0, then all payloads are compressed.</p>
                */
            MinimumCompressionSize?: number;
            /**
                * <p>The source of the API key for metering requests according to a usage plan.</p>
                *          <p>
                *             <code>HEADER</code> indicates whether to read the API key from the X-API-Key header of a
                *          request.</p>
                *          <p>
                *             <code>AUTHORIZER</code> indicates whether to read the API key from the
                *             <code>UsageIdentifierKey</code> from a custom authorizer.</p>
                */
            ApiKeySource?: string;
            /**
                * <p>The endpoint configuration of the REST API.</p>
                */
            EndpointConfiguration?: AwsApiGatewayEndpointConfiguration;
    }
    export namespace AwsApiGatewayRestApiDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayRestApiDetails) => any;
    }
    /**
        * <p>Provides information about a version 1 Amazon API Gateway stage.</p>
        */
    export interface AwsApiGatewayStageDetails {
            /**
                * <p>The identifier of the deployment that the stage points to.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The identifier of the client certificate for the stage.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>The name of the stage.</p>
                */
            StageName?: string;
            /**
                * <p>A description of the stage.</p>
                */
            Description?: string;
            /**
                * <p>Indicates whether a cache cluster is enabled for the stage.</p>
                */
            CacheClusterEnabled?: boolean;
            /**
                * <p>If a cache cluster is enabled, the size of the cache cluster.</p>
                */
            CacheClusterSize?: string;
            /**
                * <p>If a cache cluster is enabled, the status of the cache cluster.</p>
                */
            CacheClusterStatus?: string;
            /**
                * <p>Defines the method settings for the stage.</p>
                */
            MethodSettings?: AwsApiGatewayMethodSettings[];
            /**
                * <p>A map that defines the stage variables for the stage.</p>
                *          <p>Variable names can have alphanumeric and underscore characters.</p>
                *          <p>Variable values can contain the following characters:</p>
                *          <ul>
                *             <li>
                *                <p>Uppercase and lowercase letters</p>
                *             </li>
                *             <li>
                *                <p>Numbers</p>
                *             </li>
                *             <li>
                *                <p>Special characters -._~:/?#&=,</p>
                *             </li>
                *          </ul>
                */
            Variables?: Record<string, string>;
            /**
                * <p>The version of the API documentation that is associated with the stage.</p>
                */
            DocumentationVersion?: string;
            /**
                * <p>Settings for logging access for the stage.</p>
                */
            AccessLogSettings?: AwsApiGatewayAccessLogSettings;
            /**
                * <p>Information about settings for canary deployment in the stage.</p>
                */
            CanarySettings?: AwsApiGatewayCanarySettings;
            /**
                * <p>Indicates whether active tracing with X-Ray is enabled for the stage.</p>
                */
            TracingEnabled?: boolean;
            /**
                * <p>Indicates when the stage was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedDate?: string;
            /**
                * <p>Indicates when the stage was most recently updated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastUpdatedDate?: string;
            /**
                * <p>The ARN of the web ACL associated with the stage.</p>
                */
            WebAclArn?: string;
    }
    export namespace AwsApiGatewayStageDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayStageDetails) => any;
    }
    /**
        * <p>Contains the cross-origin resource sharing (CORS) configuration for the API. CORS is
        *          only supported for HTTP APIs.</p>
        */
    export interface AwsCorsConfiguration {
            /**
                * <p>The allowed origins for CORS requests.</p>
                */
            AllowOrigins?: string[];
            /**
                * <p>Indicates whether the CORS request includes credentials.</p>
                */
            AllowCredentials?: boolean;
            /**
                * <p>The exposed headers for CORS requests.</p>
                */
            ExposeHeaders?: string[];
            /**
                * <p>The number of seconds for which the browser caches preflight request results.</p>
                */
            MaxAge?: number;
            /**
                * <p>The allowed methods for CORS requests.</p>
                */
            AllowMethods?: string[];
            /**
                * <p>The allowed headers for CORS requests.</p>
                */
            AllowHeaders?: string[];
    }
    export namespace AwsCorsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCorsConfiguration) => any;
    }
    /**
        * <p>Contains information about a version 2 API in Amazon API Gateway.</p>
        */
    export interface AwsApiGatewayV2ApiDetails {
            /**
                * <p>The URI of the API. </p>
                *          <p>Uses the format
                *                <code>
                *                <i><api-id></i>.execute-api.<i><region></i>.amazonaws.com</code>
                *          </p>
                *          <p>The stage name is typically appended to the URI to form a complete path to a deployed
                *          API stage.</p>
                */
            ApiEndpoint?: string;
            /**
                * <p>The identifier of the API.</p>
                */
            ApiId?: string;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. </p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>Indicates when the API was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedDate?: string;
            /**
                * <p>A description of the API.</p>
                */
            Description?: string;
            /**
                * <p>The version identifier for the API.</p>
                */
            Version?: string;
            /**
                * <p>The name of the API.</p>
                */
            Name?: string;
            /**
                * <p>The API protocol for the API.</p>
                *          <p>Valid values: <code>WEBSOCKET</code> | <code>HTTP</code>
                *          </p>
                */
            ProtocolType?: string;
            /**
                * <p>The route selection expression for the API.</p>
                *          <p>For HTTP APIs, must be <code>${request.method} ${request.path}</code>. This is the
                *          default value for HTTP APIs.</p>
                *          <p>For WebSocket APIs, there is no default value.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>A cross-origin resource sharing (CORS) configuration. Supported only for HTTP
                *          APIs.</p>
                */
            CorsConfiguration?: AwsCorsConfiguration;
    }
    export namespace AwsApiGatewayV2ApiDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayV2ApiDetails) => any;
    }
    /**
        * <p>Contains route settings for a stage.</p>
        */
    export interface AwsApiGatewayV2RouteSettings {
            /**
                * <p>Indicates whether detailed metrics are enabled.</p>
                */
            DetailedMetricsEnabled?: boolean;
            /**
                * <p>The logging level. The logging level affects the log entries that are pushed to
                *          CloudWatch Logs. Supported only for WebSocket APIs.</p>
                *          <p>If the logging level is <code>ERROR</code>, then the logs only include error-level
                *          entries.</p>
                *          <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code>
                *          events and extra informational events.</p>
                *          <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code>
                *          </p>
                */
            LoggingLevel?: string;
            /**
                * <p>Indicates whether data trace logging is enabled. Data trace logging affects the log
                *          entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
                */
            DataTraceEnabled?: boolean;
            /**
                * <p>The throttling burst limit.</p>
                */
            ThrottlingBurstLimit?: number;
            /**
                * <p>The throttling rate limit.</p>
                */
            ThrottlingRateLimit?: number;
    }
    export namespace AwsApiGatewayV2RouteSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayV2RouteSettings) => any;
    }
    /**
        * <p>Contains information about a version 2 stage for Amazon API Gateway.</p>
        */
    export interface AwsApiGatewayV2StageDetails {
            /**
                * <p>The identifier of a client certificate for a stage. Supported only for WebSocket API calls.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>Indicates when the stage was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedDate?: string;
            /**
                * <p>The description of the stage.</p>
                */
            Description?: string;
            /**
                * <p>Default route settings for the stage.</p>
                */
            DefaultRouteSettings?: AwsApiGatewayV2RouteSettings;
            /**
                * <p>The identifier of the deployment that the stage is associated with. </p>
                */
            DeploymentId?: string;
            /**
                * <p>Indicates when the stage was most recently updated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastUpdatedDate?: string;
            /**
                * <p>The route settings for the stage.</p>
                */
            RouteSettings?: AwsApiGatewayV2RouteSettings;
            /**
                * <p>The name of the stage.</p>
                */
            StageName?: string;
            /**
                * <p>A map that defines the stage variables for the stage.</p>
                *          <p>Variable names can have alphanumeric and underscore characters.</p>
                *          <p>Variable values can contain the following characters:</p>
                *          <ul>
                *             <li>
                *                <p>Uppercase and lowercase letters</p>
                *             </li>
                *             <li>
                *                <p>Numbers</p>
                *             </li>
                *             <li>
                *                <p>Special characters -._~:/?#&=,</p>
                *             </li>
                *          </ul>
                */
            StageVariables?: Record<string, string>;
            /**
                * <p>Information about settings for logging access for the stage.</p>
                */
            AccessLogSettings?: AwsApiGatewayAccessLogSettings;
            /**
                * <p>Indicates whether updates to an API automatically trigger a new deployment.</p>
                */
            AutoDeploy?: boolean;
            /**
                * <p>The status of the last deployment of a stage. Supported only if the stage has automatic
                *          deployment enabled.</p>
                */
            LastDeploymentStatusMessage?: string;
            /**
                * <p>Indicates whether the stage is managed by API Gateway.</p>
                */
            ApiGatewayManaged?: boolean;
    }
    export namespace AwsApiGatewayV2StageDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsApiGatewayV2StageDetails) => any;
    }
    /**
        * <p>An Availability Zone for the automatic scaling group.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails {
            /**
                * <p>The name of the Availability Zone.</p>
                */
            Value?: string;
    }
    export namespace AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails) => any;
    }
    /**
        * <p>Details about the launch template to use.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification {
            /**
                * <p>The identifier of the launch template. You must specify either <code>LaunchTemplateId</code> or <code>LaunchTemplateName</code>.</p>
                */
            LaunchTemplateId?: string;
            /**
                * <p>The name of the launch template. You must specify either <code>LaunchTemplateId</code> or <code>LaunchTemplateName</code>.</p>
                */
            LaunchTemplateName?: string;
            /**
                * <p>Identifies the version of the launch template. You can specify a version identifier, or use the values <code>$Latest</code> or <code>$Default</code>.</p>
                */
            Version?: string;
    }
    export namespace AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification) => any;
    }
    /**
        * <p>Information about the instances distribution.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails {
            /**
                * <p>How to allocate instance types to fulfill On-Demand capacity.</p>
                */
            OnDemandAllocationStrategy?: string;
            /**
                * <p>The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances.</p>
                */
            OnDemandBaseCapacity?: number;
            /**
                * <p>The percentage of On-Demand Instances and Spot Instances for additional capacity beyond <code>OnDemandBaseCapacity</code>.</p>
                */
            OnDemandPercentageAboveBaseCapacity?: number;
            /**
                * <p>How to allocate instances across Spot Instance pools.</p>
                */
            SpotAllocationStrategy?: string;
            /**
                * <p>The number of Spot Instance pools across which to allocate your Spot Instances.</p>
                */
            SpotInstancePools?: number;
            /**
                * <p>The maximum price per unit hour that you are willing to pay for a Spot Instance.</p>
                */
            SpotMaxPrice?: string;
    }
    export namespace AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails) => any;
    }
    /**
        * <p>Details about the launch template to use for a mixed instances policy.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification {
            /**
                * <p>The identifier of the launch template. You must specify either <code>LaunchTemplateId</code> or <code>LaunchTemplateName</code>.</p>
                */
            LaunchTemplateId?: string;
            /**
                * <p>The name of the launch template. You must specify either <code>LaunchTemplateId</code> or <code>LaunchTemplateName</code>.</p>
                */
            LaunchTemplateName?: string;
            /**
                * <p>Identifies the version of the launch template. You can specify a version identifier, or use the values <code>$Latest</code> or <code>$Default</code>.</p>
                */
            Version?: string;
    }
    export namespace AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification) => any;
    }
    /**
        * <p>Property values to use to override the values in the launch template.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails {
            /**
                * <p>The instance type. For example, <code>m3.xlarge</code>.</p>
                */
            InstanceType?: string;
            /**
                * <p>The number of capacity units provided by the specified instance type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic.</p>
                */
            WeightedCapacity?: string;
    }
    export namespace AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails) => any;
    }
    /**
        * <p>Describes a launch template and overrides for a mixed instances policy.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails {
            /**
                * <p>The launch template to use for a mixed instances policy.</p>
                */
            LaunchTemplateSpecification?: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification;
            /**
                * <p>Property values to use to override the values in the launch template.</p>
                */
            Overrides?: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateOverridesListDetails[];
    }
    export namespace AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails) => any;
    }
    /**
        * <p>The mixed instances policy for the automatic scaling group.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails {
            /**
                * <p>The instances distribution. The instances distribution specifies the distribution of On-Demand Instances and Spot Instances, the maximum price to pay for Spot Instances, and how the Auto Scaling group allocates instance types to fulfill On-Demand and Spot capacity.</p>
                */
            InstancesDistribution?: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyInstancesDistributionDetails;
            /**
                * <p>The launch template to use and the instance types (overrides) to use to provision EC2 instances to fulfill On-Demand and Spot capacities.</p>
                */
            LaunchTemplate?: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyLaunchTemplateDetails;
    }
    export namespace AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails) => any;
    }
    /**
        * <p>Provides details about an auto scaling group.</p>
        */
    export interface AwsAutoScalingAutoScalingGroupDetails {
            /**
                * <p>The name of the launch configuration.</p>
                */
            LaunchConfigurationName?: string;
            /**
                * <p>The list of load balancers associated with the group.</p>
                */
            LoadBalancerNames?: string[];
            /**
                * <p>The service to use for the health checks.</p>
                */
            HealthCheckType?: string;
            /**
                * <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before it checks the
                *          health status of an EC2 instance that has come into service.</p>
                */
            HealthCheckGracePeriod?: number;
            /**
                * <p>Indicates when the auto scaling group was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedTime?: string;
            /**
                * <p>The mixed instances policy for the automatic scaling group.</p>
                */
            MixedInstancesPolicy?: AwsAutoScalingAutoScalingGroupMixedInstancesPolicyDetails;
            /**
                * <p>The list of Availability Zones for the automatic scaling group.</p>
                */
            AvailabilityZones?: AwsAutoScalingAutoScalingGroupAvailabilityZonesListDetails[];
            /**
                * <p>The launch template to use.</p>
                */
            LaunchTemplate?: AwsAutoScalingAutoScalingGroupLaunchTemplateLaunchTemplateSpecification;
            /**
                * <p>Indicates whether capacity rebalancing is enabled.
                *       </p>
                */
            CapacityRebalance?: boolean;
    }
    export namespace AwsAutoScalingAutoScalingGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingAutoScalingGroupDetails) => any;
    }
    /**
        * <p>Parameters that are used to automatically set up EBS volumes when an instance is launched.</p>
        */
    export interface AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails {
            /**
                * <p>Whether to delete the volume when the instance is terminated.</p>
                */
            DeleteOnTermination?: boolean;
            /**
                * <p>Whether to encrypt the volume.</p>
                */
            Encrypted?: boolean;
            /**
                * <p>The number of input/output (I/O) operations per second (IOPS) to provision for the volume.</p>
                *          <p>Only supported for <code>gp3</code> or <code>io1</code> volumes. Required for <code>io1</code> volumes. Not used with <code>standard</code>, <code>gp2</code>, <code>st1</code>, or <code>sc1</code> volumes.</p>
                */
            Iops?: number;
            /**
                * <p>The snapshot ID of the volume to use.</p>
                *          <p>You must specify either <code>VolumeSize</code> or <code>SnapshotId</code>.</p>
                */
            SnapshotId?: string;
            /**
                * <p>The volume size, in GiBs. The following are the supported volumes sizes for each volume type:</p>
                *          <ul>
                *             <li>
                *                <p>gp2 and gp3: 1-16,384</p>
                *             </li>
                *             <li>
                *                <p>io1: 4-16,384</p>
                *             </li>
                *             <li>
                *                <p>st1 and sc1: 125-16,384</p>
                *             </li>
                *             <li>
                *                <p>standard: 1-1,024</p>
                *             </li>
                *          </ul>
                *          <p>You must specify either <code>SnapshotId</code> or <code>VolumeSize</code>. If you specify both <code>SnapshotId</code> and <code>VolumeSize</code>, the volume size must be equal or greater than the size of the snapshot.</p>
                */
            VolumeSize?: number;
            /**
                * <p>The volume type.</p>
                */
            VolumeType?: string;
    }
    export namespace AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails) => any;
    }
    /**
        * <p>A block device for the instance.</p>
        */
    export interface AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails {
            /**
                * <p>The device name that is exposed to the EC2 instance. For example, <code>/dev/sdh</code> or <code>xvdh</code>.</p>
                */
            DeviceName?: string;
            /**
                * <p>Parameters that are used to automatically set up Amazon EBS volumes when an instance is launched.</p>
                */
            Ebs?: AwsAutoScalingLaunchConfigurationBlockDeviceMappingsEbsDetails;
            /**
                * <p>Whether to suppress the device that is included in the block device mapping of the Amazon Machine Image (AMI).</p>
                *          <p>If <code>NoDevice</code> is <code>true</code>, then you cannot specify <code>Ebs</code>.></p>
                */
            NoDevice?: boolean;
            /**
                * <p>The name of the virtual device (for example, <code>ephemeral0</code>).</p>
                *          <p>You can provide either <code>VirtualName</code> or <code>Ebs</code>, but not both.</p>
                */
            VirtualName?: string;
    }
    export namespace AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails) => any;
    }
    /**
        * <p>Information about the type of monitoring for instances in the group.</p>
        */
    export interface AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails {
            /**
                * <p>If set to <code>true</code>, then instances in the group launch with detailed
                *          monitoring.</p>
                *          <p>If set to <code>false</code>, then instances in the group launch with basic
                *          monitoring.</p>
                */
            Enabled?: boolean;
    }
    export namespace AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails) => any;
    }
    /**
        * <p>The metadata options for the instances.</p>
        */
    export interface AwsAutoScalingLaunchConfigurationMetadataOptions {
            /**
                * <p>Enables or disables the HTTP metadata endpoint on your instances. By default, the metadata endpoint is enabled.</p>
                */
            HttpEndpoint?: string;
            /**
                * <p>The HTTP <code>PUT</code> response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p>
                */
            HttpPutResponseHopLimit?: number;
            /**
                * <p>Indicates whether token usage is <code>required</code> or <code>optional</code> for metadata requests. By default, token usage is <code>optional</code>.</p>
                */
            HttpTokens?: string;
    }
    export namespace AwsAutoScalingLaunchConfigurationMetadataOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingLaunchConfigurationMetadataOptions) => any;
    }
    /**
        * <p>Details about a launch configuration.</p>
        */
    export interface AwsAutoScalingLaunchConfigurationDetails {
            /**
                * <p>For Auto Scaling groups that run in a VPC, specifies whether to assign a public IP address to the group's instances.</p>
                */
            AssociatePublicIpAddress?: boolean;
            /**
                * <p>Specifies the block devices for the instance.</p>
                */
            BlockDeviceMappings?: AwsAutoScalingLaunchConfigurationBlockDeviceMappingsDetails[];
            /**
                * <p>The identifier of a ClassicLink-enabled VPC that EC2-Classic instances are linked to.</p>
                */
            ClassicLinkVpcId?: string;
            /**
                * <p>The identifiers of one or more security groups for the VPC that is specified in <code>ClassicLinkVPCId</code>.</p>
                */
            ClassicLinkVpcSecurityGroups?: string[];
            /**
                * <p>The creation date and time for the launch configuration.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedTime?: string;
            /**
                * <p>Whether the launch configuration is optimized for Amazon EBS I/O.</p>
                */
            EbsOptimized?: boolean;
            /**
                * <p>The name or the ARN of the instance profile associated with the IAM role for the
                *          instance. The instance profile contains the IAM role.</p>
                */
            IamInstanceProfile?: string;
            /**
                * <p>The identifier of the Amazon Machine Image (AMI) that is used to launch EC2
                *          instances.</p>
                */
            ImageId?: string;
            /**
                * <p>Indicates the type of monitoring for instances in the group.</p>
                */
            InstanceMonitoring?: AwsAutoScalingLaunchConfigurationInstanceMonitoringDetails;
            /**
                * <p>The instance type for the instances.</p>
                */
            InstanceType?: string;
            /**
                * <p>The identifier of the kernel associated with the AMI.</p>
                */
            KernelId?: string;
            /**
                * <p>The name of the key pair.</p>
                */
            KeyName?: string;
            /**
                * <p>The name of the launch configuration.</p>
                */
            LaunchConfigurationName?: string;
            /**
                * <p>The tenancy of the instance. An instance with <code>dedicated</code> tenancy runs on
                *          isolated, single-tenant hardware and can only be launched into a VPC.</p>
                */
            PlacementTenancy?: string;
            /**
                * <p>The identifier of the RAM disk associated with the AMI.</p>
                */
            RamdiskId?: string;
            /**
                * <p>The security groups to assign to the instances in the Auto Scaling group.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The maximum hourly price to be paid for any Spot Instance that is launched to fulfill the
                *          request.</p>
                */
            SpotPrice?: string;
            /**
                * <p>The user data to make available to the launched EC2 instances. Must be base64-encoded
                *          text.</p>
                */
            UserData?: string;
            /**
                * <p>The metadata options for the instances.</p>
                */
            MetadataOptions?: AwsAutoScalingLaunchConfigurationMetadataOptions;
    }
    export namespace AwsAutoScalingLaunchConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsAutoScalingLaunchConfigurationDetails) => any;
    }
    /**
        * <p>Provides details about the CNAME record that is added to the DNS database for domain
        *          validation.</p>
        */
    export interface AwsCertificateManagerCertificateResourceRecord {
            /**
                * <p>The name of the resource.</p>
                */
            Name?: string;
            /**
                * <p>The type of resource.</p>
                */
            Type?: string;
            /**
                * <p>The value of the resource.</p>
                */
            Value?: string;
    }
    export namespace AwsCertificateManagerCertificateResourceRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCertificateManagerCertificateResourceRecord) => any;
    }
    /**
        * <p>Contains information about one of the following:</p>
        *          <ul>
        *             <li>
        *                <p>The initial validation of each domain name that occurs as a result of the
        *                   <code>RequestCertificate</code> request</p>
        *             </li>
        *             <li>
        *                <p>The validation of each domain name in the certificate, as it pertains to Certificate Manager managed renewal</p>
        *             </li>
        *          </ul>
        */
    export interface AwsCertificateManagerCertificateDomainValidationOption {
            /**
                * <p>A fully qualified domain name (FQDN) in the certificate.</p>
                */
            DomainName?: string;
            /**
                * <p>The CNAME record that is added to the DNS database for domain validation.</p>
                */
            ResourceRecord?: AwsCertificateManagerCertificateResourceRecord;
            /**
                * <p>The domain name that Certificate Manager uses to send domain validation
                *          emails.</p>
                */
            ValidationDomain?: string;
            /**
                * <p>A list of email addresses that Certificate Manager uses to send domain validation
                *          emails.</p>
                */
            ValidationEmails?: string[];
            /**
                * <p>The method used to validate the domain name.</p>
                */
            ValidationMethod?: string;
            /**
                * <p>The validation status of the domain name.</p>
                */
            ValidationStatus?: string;
    }
    export namespace AwsCertificateManagerCertificateDomainValidationOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCertificateManagerCertificateDomainValidationOption) => any;
    }
    /**
        * <p>Contains information about an extended key usage X.509 v3 extension object.</p>
        */
    export interface AwsCertificateManagerCertificateExtendedKeyUsage {
            /**
                * <p>The name of an extension value. Indicates the purpose for which the certificate public
                *          key can be used.</p>
                */
            Name?: string;
            /**
                * <p>An object identifier (OID) for the extension value.</p>
                *          <p>The format is numbers separated by periods.</p>
                */
            OId?: string;
    }
    export namespace AwsCertificateManagerCertificateExtendedKeyUsage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCertificateManagerCertificateExtendedKeyUsage) => any;
    }
    /**
        * <p>Contains information about a key usage X.509 v3 extension object.</p>
        */
    export interface AwsCertificateManagerCertificateKeyUsage {
            /**
                * <p>The key usage extension name.</p>
                */
            Name?: string;
    }
    export namespace AwsCertificateManagerCertificateKeyUsage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCertificateManagerCertificateKeyUsage) => any;
    }
    /**
        * <p>Contains other options for the certificate.</p>
        */
    export interface AwsCertificateManagerCertificateOptions {
            /**
                * <p>Whether to add the certificate to a transparency log.</p>
                *          <p>Valid values: <code>DISABLED</code> | <code>ENABLED</code>
                *          </p>
                */
            CertificateTransparencyLoggingPreference?: string;
    }
    export namespace AwsCertificateManagerCertificateOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCertificateManagerCertificateOptions) => any;
    }
    /**
        * <p>Contains information about the Certificate Manager managed renewal for an
        *             <code>AMAZON_ISSUED</code> certificate.</p>
        */
    export interface AwsCertificateManagerCertificateRenewalSummary {
            /**
                * <p>Information about the validation of each domain name in the certificate, as it pertains
                *          to Certificate Manager managed renewal. Provided only when the certificate type is
                *             <code>AMAZON_ISSUED</code>.</p>
                */
            DomainValidationOptions?: AwsCertificateManagerCertificateDomainValidationOption[];
            /**
                * <p>The status of the Certificate Manager managed renewal of the certificate.</p>
                *          <p>Valid values: <code>PENDING_AUTO_RENEWAL</code> | <code>PENDING_VALIDATION</code> |
                *             <code>SUCCESS</code> | <code>FAILED</code>
                *          </p>
                */
            RenewalStatus?: string;
            /**
                * <p>The reason that a renewal request was unsuccessful.</p>
                *          <p>Valid values: <code>NO_AVAILABLE_CONTACTS</code> |
                *             <code>ADDITIONAL_VERIFICATION_REQUIRED</code> | <code>DOMAIN_NOT_ALLOWED</code> |
                *             <code>INVALID_PUBLIC_DOMAIN</code> | <code>DOMAIN_VALIDATION_DENIED</code> |
                *             <code>CAA_ERROR</code> | <code>PCA_LIMIT_EXCEEDED</code> | <code>PCA_INVALID_ARN</code>
                *          | <code>PCA_INVALID_STATE</code> | <code>PCA_REQUEST_FAILED</code> |
                *             <code>PCA_NAME_CONSTRAINTS_VALIDATION</code> | <code>PCA_RESOURCE_NOT_FOUND</code> |
                *             <code>PCA_INVALID_ARGS</code> | <code>PCA_INVALID_DURATION</code> |
                *             <code>PCA_ACCESS_DENIED</code> | <code>SLR_NOT_FOUND</code> | <code>OTHER</code>
                *          </p>
                */
            RenewalStatusReason?: string;
            /**
                * <p>Indicates when the renewal summary was last updated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            UpdatedAt?: string;
    }
    export namespace AwsCertificateManagerCertificateRenewalSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCertificateManagerCertificateRenewalSummary) => any;
    }
    /**
        * <p>Provides details about an Certificate Manager certificate.</p>
        */
    export interface AwsCertificateManagerCertificateDetails {
            /**
                * <p>The ARN of the private certificate authority (CA) that will be used to issue the
                *          certificate.</p>
                */
            CertificateAuthorityArn?: string;
            /**
                * <p>Indicates when the certificate was requested.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedAt?: string;
            /**
                * <p>The fully qualified domain name (FQDN), such as www.example.com, that is secured by the
                *          certificate.</p>
                */
            DomainName?: string;
            /**
                * <p>Contains information about the initial validation of each domain name that occurs as a
                *          result of the <code>RequestCertificate</code> request.</p>
                *          <p>Only provided if the certificate type is <code>AMAZON_ISSUED</code>.</p>
                */
            DomainValidationOptions?: AwsCertificateManagerCertificateDomainValidationOption[];
            /**
                * <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies
                *          a purpose for which the certificate public key can be used and consists of a name and an
                *          object identifier (OID).</p>
                */
            ExtendedKeyUsages?: AwsCertificateManagerCertificateExtendedKeyUsage[];
            /**
                * <p>For a failed certificate request, the reason for the failure.</p>
                *          <p>Valid values: <code>NO_AVAILABLE_CONTACTS</code> |
                *             <code>ADDITIONAL_VERIFICATION_REQUIRED</code> | <code>DOMAIN_NOT_ALLOWED</code> |
                *             <code>INVALID_PUBLIC_DOMAIN</code> | <code>DOMAIN_VALIDATION_DENIED</code> |
                *             <code>CAA_ERROR</code> | <code>PCA_LIMIT_EXCEEDED</code> | <code>PCA_INVALID_ARN</code>
                *          | <code>PCA_INVALID_STATE</code> | <code>PCA_REQUEST_FAILED</code> |
                *             <code>PCA_NAME_CONSTRAINTS_VALIDATION</code> | <code>PCA_RESOURCE_NOT_FOUND</code> |
                *             <code>PCA_INVALID_ARGS</code> | <code>PCA_INVALID_DURATION</code> |
                *             <code>PCA_ACCESS_DENIED</code> | <code>SLR_NOT_FOUND</code> | <code>OTHER</code>
                *          </p>
                */
            FailureReason?: string;
            /**
                * <p>Indicates when the certificate was imported. Provided if the certificate type is
                *             <code>IMPORTED</code>.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            ImportedAt?: string;
            /**
                * <p>The list of ARNs for the Amazon Web Services resources that use the certificate.</p>
                */
            InUseBy?: string[];
            /**
                * <p>Indicates when the certificate was issued. Provided if the certificate type is
                *             <code>AMAZON_ISSUED</code>.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            IssuedAt?: string;
            /**
                * <p>The name of the certificate authority that issued and signed the certificate.</p>
                */
            Issuer?: string;
            /**
                * <p>The algorithm that was used to generate the public-private key pair.</p>
                *          <p>Valid values: <code>RSA_2048</code> | <code>RSA_1024</code> |<code> RSA_4096</code> |
                *             <code>EC_prime256v1</code> | <code>EC_secp384r1</code> |
                *          <code>EC_secp521r1</code>
                *          </p>
                */
            KeyAlgorithm?: string;
            /**
                * <p>A list of key usage X.509 v3 extension objects.</p>
                */
            KeyUsages?: AwsCertificateManagerCertificateKeyUsage[];
            /**
                * <p>The time after which the certificate becomes invalid.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            NotAfter?: string;
            /**
                * <p>The time before which the certificate is not valid.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            NotBefore?: string;
            /**
                * <p>Provides a value that specifies whether to add the certificate to a transparency
                *          log.</p>
                */
            Options?: AwsCertificateManagerCertificateOptions;
            /**
                * <p>Whether the certificate is eligible for renewal.</p>
                *          <p>Valid values: <code>ELIGIBLE</code> | <code>INELIGIBLE</code>
                *          </p>
                */
            RenewalEligibility?: string;
            /**
                * <p>Information about the status of the Certificate Manager managed renewal for the
                *          certificate. Provided only when the certificate type is <code>AMAZON_ISSUED</code>.</p>
                */
            RenewalSummary?: AwsCertificateManagerCertificateRenewalSummary;
            /**
                * <p>The serial number of the certificate.</p>
                */
            Serial?: string;
            /**
                * <p>The algorithm that was used to sign the certificate.</p>
                */
            SignatureAlgorithm?: string;
            /**
                * <p>The status of the certificate.</p>
                *          <p>Valid values: <code>PENDING_VALIDATION</code> | <code>ISSUED</code> |
                *             <code>INACTIVE</code> | <code>EXPIRED</code> | <code>VALIDATION_TIMED_OUT</code> |
                *             <code>REVOKED</code> | <code>FAILED</code>
                *          </p>
                */
            Status?: string;
            /**
                * <p>The name of the entity that is associated with the public key contained in the
                *          certificate.</p>
                */
            Subject?: string;
            /**
                * <p>One or more domain names (subject alternative names) included in the certificate. This
                *          list contains the domain names that are bound to the public key that is contained in the
                *          certificate.</p>
                *          <p>The subject alternative names include the canonical domain name (CN) of the certificate
                *          and additional domain names that can be used to connect to the website.</p>
                */
            SubjectAlternativeNames?: string[];
            /**
                * <p>The source of the certificate. For certificates that Certificate Manager provides,
                *             <code>Type</code> is <code>AMAZON_ISSUED</code>. For certificates that are imported with
                *             <code>ImportCertificate</code>, <code>Type</code> is <code>IMPORTED</code>.</p>
                *          <p>Valid values: <code>IMPORTED</code> | <code>AMAZON_ISSUED</code> |
                *          <code>PRIVATE</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace AwsCertificateManagerCertificateDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCertificateManagerCertificateDetails) => any;
    }
    /**
        * <p>Provides information about the stack's conformity to its expected template configuration.
        *       </p>
        */
    export interface AwsCloudFormationStackDriftInformationDetails {
            /**
                * <p>Status of the stack's actual configuration compared to its expected template configuration.
                *       </p>
                */
            StackDriftStatus?: string;
    }
    export namespace AwsCloudFormationStackDriftInformationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFormationStackDriftInformationDetails) => any;
    }
    /**
        * <p>Provides information about the CloudFormation stack output.
        *       </p>
        */
    export interface AwsCloudFormationStackOutputsDetails {
            /**
                * <p>A user-defined description associated with the output.
                *       </p>
                */
            Description?: string;
            /**
                * <p>The key associated with the output.
                *       </p>
                */
            OutputKey?: string;
            /**
                * <p>The value associated with the output.
                *       </p>
                */
            OutputValue?: string;
    }
    export namespace AwsCloudFormationStackOutputsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFormationStackOutputsDetails) => any;
    }
    /**
        * <p>Nests a stack as a resource in a top-level template. Nested stacks are stacks created as resources for
        * another stack.</p>
        */
    export interface AwsCloudFormationStackDetails {
            /**
                * <p>The capabilities allowed in the stack.
                *       </p>
                */
            Capabilities?: string[];
            /**
                * <p>The time at which the stack was created. </p>
                */
            CreationTime?: string;
            /**
                * <p>A user-defined description associated with the stack.
                *       </p>
                */
            Description?: string;
            /**
                * <p>Boolean to enable or disable rollback on stack creation failures.
                *       </p>
                */
            DisableRollback?: boolean;
            /**
                * <p>Information about whether a stack's actual configuration differs, or has drifted, from its expected
                * configuration, as defined in the stack template and any values specified as template parameters.
                *       </p>
                */
            DriftInformation?: AwsCloudFormationStackDriftInformationDetails;
            /**
                * <p>Whether termination protection is enabled for the stack.
                *       </p>
                */
            EnableTerminationProtection?: boolean;
            /**
                * <p>The time the nested stack was last updated. This field will only be returned if the stack has been
                * updated at least once.</p>
                */
            LastUpdatedTime?: string;
            /**
                * <p>The Amazon Resource Names (ARNs) of the Amazon SNS topic to which stack-related events are published.
                *       </p>
                */
            NotificationArns?: string[];
            /**
                * <p>A list of output structures.
                *       </p>
                */
            Outputs?: AwsCloudFormationStackOutputsDetails[];
            /**
                * <p>The ARN of an IAM role that's associated with the stack.
                *       </p>
                */
            RoleArn?: string;
            /**
                * <p>Unique identifier of the stack.
                *       </p>
                */
            StackId?: string;
            /**
                * <p>The name associated with the stack.
                *       </p>
                */
            StackName?: string;
            /**
                * <p>Current status of the stack.
                *       </p>
                */
            StackStatus?: string;
            /**
                * <p>Success or failure message associated with the stack status.
                *       </p>
                */
            StackStatusReason?: string;
            /**
                * <p>The length of time, in minutes, that CloudFormation waits for the nested stack to reach
                * the <code>CREATE_COMPLETE</code> state.
                *       </p>
                */
            TimeoutInMinutes?: number;
    }
    export namespace AwsCloudFormationStackDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFormationStackDetails) => any;
    }
    /**
        * <p>Information about a cache behavior for the distribution.</p>
        */
    export interface AwsCloudFrontDistributionCacheBehavior {
            /**
                * <p>The protocol that viewers can use to access the files in an origin. You can specify the
                *          following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>allow-all</code> - Viewers can use HTTP or HTTPS.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>redirect-to-https</code> - CloudFront responds to HTTP requests with an HTTP
                *                status code of 301 (Moved Permanently) and the HTTPS URL. The viewer then uses the
                *                new URL to resubmit.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>https-only</code> - CloudFront responds to HTTP request with an HTTP status
                *                code of 403 (Forbidden).</p>
                *             </li>
                *          </ul>
                */
            ViewerProtocolPolicy?: string;
    }
    export namespace AwsCloudFrontDistributionCacheBehavior {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionCacheBehavior) => any;
    }
    /**
        * <p>Provides information about caching for the CloudFront distribution.</p>
        */
    export interface AwsCloudFrontDistributionCacheBehaviors {
            /**
                * <p>The cache behaviors for the distribution.</p>
                */
            Items?: AwsCloudFrontDistributionCacheBehavior[];
    }
    export namespace AwsCloudFrontDistributionCacheBehaviors {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionCacheBehaviors) => any;
    }
    /**
        * <p>Contains information about the default cache configuration for the CloudFront distribution.</p>
        */
    export interface AwsCloudFrontDistributionDefaultCacheBehavior {
            /**
                * <p>The protocol that viewers can use to access the files in an origin. You can specify the
                *          following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>allow-all</code> - Viewers can use HTTP or HTTPS.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>redirect-to-https</code> - CloudFront responds to HTTP requests with an HTTP
                *                status code of 301 (Moved Permanently) and the HTTPS URL. The viewer then uses the
                *                new URL to resubmit.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>https-only</code> - CloudFront responds to HTTP request with an HTTP status
                *                code of 403 (Forbidden).</p>
                *             </li>
                *          </ul>
                */
            ViewerProtocolPolicy?: string;
    }
    export namespace AwsCloudFrontDistributionDefaultCacheBehavior {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionDefaultCacheBehavior) => any;
    }
    /**
        * <p>A complex type that controls whether access logs are written for the CloudFront distribution.</p>
        */
    export interface AwsCloudFrontDistributionLogging {
            /**
                * <p>The S3 bucket to store the access logs in.</p>
                */
            Bucket?: string;
            /**
                * <p>With this field, you can enable or disable the selected distribution.</p>
                */
            Enabled?: boolean;
            /**
                * <p>Specifies whether you want CloudFront to include cookies in access logs.</p>
                */
            IncludeCookies?: boolean;
            /**
                * <p>An optional string that you want CloudFront to use as a prefix to the access log
                *          filenames for this distribution.</p>
                */
            Prefix?: string;
    }
    export namespace AwsCloudFrontDistributionLogging {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionLogging) => any;
    }
    /**
        * <p>The status codes that cause an origin group to fail over.</p>
        */
    export interface AwsCloudFrontDistributionOriginGroupFailoverStatusCodes {
            /**
                * <p>The list of status code values that can cause a failover to the next origin.</p>
                */
            Items?: number[];
            /**
                * <p>The number of status codes that can cause a failover.</p>
                */
            Quantity?: number;
    }
    export namespace AwsCloudFrontDistributionOriginGroupFailoverStatusCodes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginGroupFailoverStatusCodes) => any;
    }
    /**
        * <p>Provides information about when an origin group fails over.</p>
        */
    export interface AwsCloudFrontDistributionOriginGroupFailover {
            /**
                * <p>Information about the status codes that cause an origin group to fail over.</p>
                */
            StatusCodes?: AwsCloudFrontDistributionOriginGroupFailoverStatusCodes;
    }
    export namespace AwsCloudFrontDistributionOriginGroupFailover {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginGroupFailover) => any;
    }
    /**
        * <p>Information about an origin group for the CloudFront distribution.</p>
        */
    export interface AwsCloudFrontDistributionOriginGroup {
            /**
                * <p>Provides the criteria for an origin group to fail over.</p>
                */
            FailoverCriteria?: AwsCloudFrontDistributionOriginGroupFailover;
    }
    export namespace AwsCloudFrontDistributionOriginGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginGroup) => any;
    }
    /**
        * <p>Provides information about origin groups that are associated with the CloudFront distribution.</p>
        */
    export interface AwsCloudFrontDistributionOriginGroups {
            /**
                * <p>The list of origin groups.</p>
                */
            Items?: AwsCloudFrontDistributionOriginGroup[];
    }
    export namespace AwsCloudFrontDistributionOriginGroups {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginGroups) => any;
    }
    /**
        * <p>A complex type that contains information about the SSL/TLS protocols that CloudFront can use
        * when establishing an HTTPS connection with your origin.
        *       </p>
        */
    export interface AwsCloudFrontDistributionOriginSslProtocols {
            /**
                * <p>A list that contains allowed SSL/TLS protocols for this distribution.
                *       </p>
                */
            Items?: string[];
            /**
                * <p>The number of SSL/TLS protocols that you want to allow CloudFront to use when establishing
                * an HTTPS connection with this origin.
                *       </p>
                */
            Quantity?: number;
    }
    export namespace AwsCloudFrontDistributionOriginSslProtocols {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginSslProtocols) => any;
    }
    /**
        * <p>A custom origin. A custom origin is any origin that is not an Amazon S3 bucket, with one exception. An Amazon S3 bucket that is <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html">configured with
        *             static website hosting</a> is a custom origin. </p>
        */
    export interface AwsCloudFrontDistributionOriginCustomOriginConfig {
            /**
                * <p>The HTTP port that CloudFront uses to connect to the origin.
                *       </p>
                */
            HttpPort?: number;
            /**
                * <p>The HTTPS port that CloudFront uses to connect to the origin.
                *       </p>
                */
            HttpsPort?: number;
            /**
                * <p>Specifies how long, in seconds, CloudFront persists its connection to the origin.
                *       </p>
                */
            OriginKeepaliveTimeout?: number;
            /**
                * <p>Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin.
                *       </p>
                */
            OriginProtocolPolicy?: string;
            /**
                * <p>Specifies how long, in seconds, CloudFront waits for a response from the origin.
                *       </p>
                */
            OriginReadTimeout?: number;
            /**
                * <p>Specifies the minimum SSL/TLS protocol that CloudFront uses when connecting to your origin over HTTPS.
                *       </p>
                */
            OriginSslProtocols?: AwsCloudFrontDistributionOriginSslProtocols;
    }
    export namespace AwsCloudFrontDistributionOriginCustomOriginConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginCustomOriginConfig) => any;
    }
    /**
        * <p>Information about an origin that is an Amazon S3 bucket that is not configured with static website
        *          hosting.</p>
        */
    export interface AwsCloudFrontDistributionOriginS3OriginConfig {
            /**
                * <p>The CloudFront origin access identity to associate with the origin.</p>
                */
            OriginAccessIdentity?: string;
    }
    export namespace AwsCloudFrontDistributionOriginS3OriginConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginS3OriginConfig) => any;
    }
    /**
        * <p>A complex type that describes the
        *             Amazon S3 bucket, HTTP server (for example, a web server), AWS Elemental MediaStore, or other server from which CloudFront gets your files.</p>
        */
    export interface AwsCloudFrontDistributionOriginItem {
            /**
                * <p>Amazon S3 origins: The DNS name of the S3 bucket from which you want
                *             CloudFront to get objects for this origin.</p>
                */
            DomainName?: string;
            /**
                * <p>A unique identifier for the origin or origin group.</p>
                */
            Id?: string;
            /**
                * <p>An optional element that causes CloudFront to request your content from a
                *          directory in your Amazon S3 bucket or your custom origin.</p>
                */
            OriginPath?: string;
            /**
                * <p>An origin that is an S3 bucket that is not configured with static website
                *          hosting.</p>
                */
            S3OriginConfig?: AwsCloudFrontDistributionOriginS3OriginConfig;
            /**
                * <p>An origin that is not an Amazon S3 bucket, with one exception.
                * If the Amazon S3 bucket is configured with static website hosting, use this attribute.
                * If the Amazon S3 bucket is not configured with static website hosting, use the <code>S3OriginConfig</code> type instead.
                *       </p>
                */
            CustomOriginConfig?: AwsCloudFrontDistributionOriginCustomOriginConfig;
    }
    export namespace AwsCloudFrontDistributionOriginItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOriginItem) => any;
    }
    /**
        * <p>A complex type that contains information about origins and origin groups for this CloudFront distribution.</p>
        */
    export interface AwsCloudFrontDistributionOrigins {
            /**
                * <p>A complex type that contains origins or origin groups for this distribution.</p>
                */
            Items?: AwsCloudFrontDistributionOriginItem[];
    }
    export namespace AwsCloudFrontDistributionOrigins {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionOrigins) => any;
    }
    /**
        * <p>Provides information about the TLS/SSL configuration that the CloudFront distribution uses to communicate with viewers.</p>
        */
    export interface AwsCloudFrontDistributionViewerCertificate {
            /**
                * <p>The ARN of the ACM certificate. Used if the certificate is stored in ACM. If you provide an ACM certificate ARN, you must also provide <code>MinimumCertificateVersion</code> and <code>SslSupportMethod</code>.</p>
                */
            AcmCertificateArn?: string;
            /**
                * <p>The identifier of the certificate. Note that in CloudFront, this attribute is deprecated.</p>
                */
            Certificate?: string;
            /**
                * <p>The source of the certificate identified by <code>Certificate</code>. Note that in CloudFront, this attribute is deprecated.</p>
                */
            CertificateSource?: string;
            /**
                * <p>Whether the distribution uses the CloudFront domain name. If set to <code>false</code>, then you provide either <code>AcmCertificateArn</code> or <code>IamCertificateId</code>.</p>
                */
            CloudFrontDefaultCertificate?: boolean;
            /**
                * <p>The identifier of the IAM certificate. Used if the certificate is stored in IAM. If you provide <code>IamCertificateId</code>, then you also must provide <code>MinimumProtocolVersion</code> and <code>SslSupportMethod</code>.</p>
                */
            IamCertificateId?: string;
            /**
                * <p>The security policy that CloudFront uses for HTTPS connections with viewers. If <code>SslSupportMethod</code> is <code>sni-only</code>, then <code>MinimumProtocolVersion</code> must be <code>TLSv1</code> or higher.</p>
                */
            MinimumProtocolVersion?: string;
            /**
                * <p>The viewers that the distribution accepts HTTPS connections from.</p>
                */
            SslSupportMethod?: string;
    }
    export namespace AwsCloudFrontDistributionViewerCertificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionViewerCertificate) => any;
    }
    /**
        * <p>A CloudFront distribution configuration.</p>
        */
    export interface AwsCloudFrontDistributionDetails {
            /**
                * <p>Provides information about the cache configuration for the distribution.</p>
                */
            CacheBehaviors?: AwsCloudFrontDistributionCacheBehaviors;
            /**
                * <p>The default cache behavior for the configuration.</p>
                */
            DefaultCacheBehavior?: AwsCloudFrontDistributionDefaultCacheBehavior;
            /**
                * <p>The object that CloudFront sends in response to requests from the origin (for example,
                *          index.html) when a viewer requests the root URL for the distribution
                *          (http://www.example.com) instead of an object in your distribution
                *          (http://www.example.com/product-description.html). </p>
                */
            DefaultRootObject?: string;
            /**
                * <p>The domain name corresponding to the distribution.</p>
                */
            DomainName?: string;
            /**
                * <p>The entity tag is a hash of the object.</p>
                */
            ETag?: string;
            /**
                * <p>Indicates when that the distribution was last modified.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastModifiedTime?: string;
            /**
                * <p>A complex type that controls whether access logs are written for the distribution.</p>
                */
            Logging?: AwsCloudFrontDistributionLogging;
            /**
                * <p>A complex type that contains information about origins for this distribution.</p>
                */
            Origins?: AwsCloudFrontDistributionOrigins;
            /**
                * <p>Provides information about the origin groups in the distribution.</p>
                */
            OriginGroups?: AwsCloudFrontDistributionOriginGroups;
            /**
                * <p>Provides information about the TLS/SSL configuration that the distribution uses to communicate with viewers.</p>
                */
            ViewerCertificate?: AwsCloudFrontDistributionViewerCertificate;
            /**
                * <p>Indicates the current status of the distribution.</p>
                */
            Status?: string;
            /**
                * <p>A unique identifier that specifies the WAF web ACL, if any, to associate with this distribution.</p>
                */
            WebAclId?: string;
    }
    export namespace AwsCloudFrontDistributionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudFrontDistributionDetails) => any;
    }
    /**
        * <p>Provides details about a CloudTrail trail.</p>
        */
    export interface AwsCloudTrailTrailDetails {
            /**
                * <p>The ARN of the log group that CloudTrail logs are delivered to.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>The ARN of the role that the CloudWatch Events endpoint assumes when it writes to the log
                *          group.</p>
                */
            CloudWatchLogsRoleArn?: string;
            /**
                * <p>Indicates whether the trail has custom event selectors.</p>
                */
            HasCustomEventSelectors?: boolean;
            /**
                * <p>The Region where the trail was created.</p>
                */
            HomeRegion?: string;
            /**
                * <p>Indicates whether the trail publishes events from global services such as IAM to the log
                *          files.</p>
                */
            IncludeGlobalServiceEvents?: boolean;
            /**
                * <p>Indicates whether the trail applies only to the current Region or to all Regions.</p>
                */
            IsMultiRegionTrail?: boolean;
            /**
                * <p>Whether the trail is created for all accounts in an organization in Organizations,
                *          or only for the current Amazon Web Services account.</p>
                */
            IsOrganizationTrail?: boolean;
            /**
                * <p>The KMS key ID to use to encrypt the logs.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Indicates whether CloudTrail log file validation is enabled.</p>
                */
            LogFileValidationEnabled?: boolean;
            /**
                * <p>The name of the trail.</p>
                */
            Name?: string;
            /**
                * <p>The name of the S3 bucket where the log files are published.</p>
                */
            S3BucketName?: string;
            /**
                * <p>The S3 key prefix. The key prefix is added after the name of the S3 bucket where the log
                *          files are published.</p>
                */
            S3KeyPrefix?: string;
            /**
                * <p>The ARN of the SNS topic that is used for notifications of log file delivery.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The name of the SNS topic that is used for notifications of log file delivery.</p>
                */
            SnsTopicName?: string;
            /**
                * <p>The ARN of the trail.</p>
                */
            TrailArn?: string;
    }
    export namespace AwsCloudTrailTrailDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudTrailTrailDetails) => any;
    }
    /**
        * <p>Details about the dimensions for the metric associated with the alarm.
        *       </p>
        */
    export interface AwsCloudWatchAlarmDimensionsDetails {
            /**
                * <p>The name of a dimension.
                *       </p>
                */
            Name?: string;
            /**
                * <p>The value of a dimension.
                *       </p>
                */
            Value?: string;
    }
    export namespace AwsCloudWatchAlarmDimensionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudWatchAlarmDimensionsDetails) => any;
    }
    /**
        * <p>Specifies an alarm and associates it with the specified metric or metric math expression.
        *       </p>
        */
    export interface AwsCloudWatchAlarmDetails {
            /**
                * <p>Indicates whether actions should be executed during any changes to the alarm state.
                *       </p>
                */
            ActionsEnabled?: boolean;
            /**
                * <p>The list of actions, specified as Amazon Resource Names (ARNs) to execute when this alarm transitions into an <code>ALARM</code> state from any other
                *          state. </p>
                */
            AlarmActions?: string[];
            /**
                * <p>The ARN of the alarm.
                *       </p>
                */
            AlarmArn?: string;
            /**
                * <p>The time stamp of the last update to the alarm configuration.
                *       </p>
                */
            AlarmConfigurationUpdatedTimestamp?: string;
            /**
                * <p>The description of the alarm.
                *       </p>
                */
            AlarmDescription?: string;
            /**
                * <p>The name of the alarm. If you don't specify a name, CloudFront generates a unique physical ID
                * and uses that ID for the alarm name.
                *       </p>
                */
            AlarmName?: string;
            /**
                * <p>The arithmetic operation to use when comparing the specified statistic and threshold. The specified
                * statistic value is used as the first operand.
                *       </p>
                */
            ComparisonOperator?: string;
            /**
                * <p>The number of datapoints that must be breaching to trigger the alarm.
                *       </p>
                */
            DatapointsToAlarm?: number;
            /**
                * <p>The dimensions for the metric associated with the alarm.
                *       </p>
                */
            Dimensions?: AwsCloudWatchAlarmDimensionsDetails[];
            /**
                * <p>Used only for alarms based on percentiles. If <code>ignore</code>, the alarm state does not change during
                * periods with too few data points to be statistically significant. If <code>evaluate</code> or this parameter is not used,
                * the alarm is always evaluated and possibly changes state no matter how many data points are available.
                *       </p>
                */
            EvaluateLowSampleCountPercentile?: string;
            /**
                * <p>The number of periods over which data is compared to the specified threshold.
                *       </p>
                */
            EvaluationPeriods?: number;
            /**
                * <p>The percentile statistic for the metric associated with the alarm.
                *       </p>
                */
            ExtendedStatistic?: string;
            /**
                * <p>The actions to execute when this alarm transitions to the <code>INSUFFICIENT_DATA</code> state from
                * any other state. Each action is specified as an ARN.
                *       </p>
                */
            InsufficientDataActions?: string[];
            /**
                * <p>The name of the metric associated with the alarm. This is required for an alarm based on a metric.
                * For an alarm based on a math expression, you use <code>Metrics</code> instead and you can't specify <code>MetricName</code>.
                *       </p>
                */
            MetricName?: string;
            /**
                * <p>The namespace of the metric associated with the alarm. This is required for an alarm based on a
                * metric. For an alarm based on a math expression, you can't specify <code>Namespace</code> and you use
                * <code>Metrics</code> instead.
                *       </p>
                */
            Namespace?: string;
            /**
                * <p>The actions to execute when this alarm transitions to the <code>OK</code> state from any other state.
                * Each action is specified as an ARN.
                *       </p>
                */
            OkActions?: string[];
            /**
                * <p>The period, in seconds, over which the statistic is applied. This is required for an alarm based on a
                * metric.
                *       </p>
                */
            Period?: number;
            /**
                * <p>The statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use <code>ExtendedStatistic</code>.</p>
                *          <p>For an alarm based on a metric, you must specify either <code>Statistic</code> or <code>ExtendedStatistic</code> but not both.</p>
                *          <p>For an alarm based on a math expression, you can't specify <code>Statistic</code>. Instead, you use <code>Metrics</code>.</p>
                */
            Statistic?: string;
            /**
                * <p>The value to compare with the specified statistic.
                *       </p>
                */
            Threshold?: number;
            /**
                * <p>n an alarm based on an anomaly detection model, this is the ID of the <code>ANOMALY_DETECTION_BAND</code> function used as the threshold for the alarm.
                *       </p>
                */
            ThresholdMetricId?: string;
            /**
                * <p>Sets how this alarm is to handle missing data points.
                *       </p>
                */
            TreatMissingData?: string;
            /**
                * <p>The unit of the metric associated with the alarm.
                *       </p>
                */
            Unit?: string;
    }
    export namespace AwsCloudWatchAlarmDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCloudWatchAlarmDetails) => any;
    }
    /**
        * <p>Information about the build artifacts for the CodeBuild project.</p>
        */
    export interface AwsCodeBuildProjectArtifactsDetails {
            /**
                * <p>An identifier for the artifact definition.</p>
                */
            ArtifactIdentifier?: string;
            /**
                * <p>Indicates whether to disable encryption on the artifact. Only valid when <code>Type</code> is <code>S3</code>.</p>
                */
            EncryptionDisabled?: boolean;
            /**
                * <p>Only used when <code>Type</code> is <code>S3</code>. The name of the S3 bucket where the artifact is located.</p>
                */
            Location?: string;
            /**
                * <p>Only used when Type is S3. The name of the artifact. Used with <code>NamepaceType</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
                */
            Name?: string;
            /**
                * <p>Only used when <code>Type</code> is <code>S3</code>. The value to use for the namespace. Used with <code>Name</code> and <code>Path</code> to determine the pattern for storing the artifact.</p>
                */
            NamespaceType?: string;
            /**
                * <p>Whether the name specified in the buildspec file overrides the artifact name.</p>
                */
            OverrideArtifactName?: boolean;
            /**
                * <p>Only used when <code>Type</code> is <code>S3</code>. The type of output artifact to create.</p>
                */
            Packaging?: string;
            /**
                * <p>Only used when <code>Type</code> is <code>S3</code>. The path to the artifact. Used with <code>Name</code> and <code>NamespaceType</code> to determine the pattern for storing the artifact.</p>
                */
            Path?: string;
            /**
                * <p>The type of build artifact.</p>
                */
            Type?: string;
    }
    export namespace AwsCodeBuildProjectArtifactsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectArtifactsDetails) => any;
    }
    /**
        * <p>Information about an environment variable that is available to builds for the build project.</p>
        */
    export interface AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails {
            /**
                * <p>The name of the environment variable.</p>
                */
            Name?: string;
            /**
                * <p>The type of environment variable.</p>
                */
            Type?: string;
            /**
                * <p>The value of the environment variable.</p>
                */
            Value?: string;
    }
    export namespace AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails) => any;
    }
    /**
        * <p>The credentials for access to a private registry.</p>
        */
    export interface AwsCodeBuildProjectEnvironmentRegistryCredential {
            /**
                * <p>The ARN or name of credentials created using Secrets Manager.</p>
                *          <note>
                *             <p>The credential can use the name of the credentials only if they exist in your current
                *             Amazon Web Services Region. </p>
                *          </note>
                */
            Credential?: string;
            /**
                * <p>The service that created the credentials to access a private Docker registry.</p>
                *          <p>The valid value,<code> SECRETS_MANAGER</code>, is for Secrets Manager.</p>
                */
            CredentialProvider?: string;
    }
    export namespace AwsCodeBuildProjectEnvironmentRegistryCredential {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectEnvironmentRegistryCredential) => any;
    }
    /**
        * <p>Information about the build environment for this build project.</p>
        */
    export interface AwsCodeBuildProjectEnvironment {
            /**
                * <p>The certificate to use with this build project.</p>
                */
            Certificate?: string;
            /**
                * <p>A set of environment variables to make available to builds for the build project.</p>
                */
            EnvironmentVariables?: AwsCodeBuildProjectEnvironmentEnvironmentVariablesDetails[];
            /**
                * <p>Whether to allow the Docker daemon to run inside a Docker container. Set to <code>true</code> if the build project is used to build Docker images.</p>
                */
            PrivilegedMode?: boolean;
            /**
                * <p>The type of credentials CodeBuild uses to pull images in your build.</p>
                *          <p>Valid values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CODEBUILD</code> specifies that CodeBuild uses its own credentials. This
                *                requires that you modify your ECR repository policy to trust the CodeBuild
                *                service principal.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SERVICE_ROLE</code> specifies that CodeBuild uses your build project's
                *                service role.</p>
                *             </li>
                *          </ul>
                *          <p>When you use a cross-account or private registry image, you must use
                *             <code>SERVICE_ROLE</code> credentials. When you use an CodeBuild curated image, you
                *          must use <code>CODEBUILD</code> credentials.</p>
                */
            ImagePullCredentialsType?: string;
            /**
                * <p>The credentials for access to a private registry.</p>
                */
            RegistryCredential?: AwsCodeBuildProjectEnvironmentRegistryCredential;
            /**
                * <p>The type of build environment to use for related builds.</p>
                *          <p>The environment type <code>ARM_CONTAINER</code> is available only in Regions US East (N.
                *          Virginia), US East (Ohio), US West (Oregon), Europe (Ireland), Asia Pacific (Mumbai), Asia
                *          Pacific (Tokyo), Asia Pacific (Sydney), and Europe (Frankfurt).</p>
                *          <p>The environment type <code>LINUX_CONTAINER</code> with compute type
                *          build.general1.2xlarge is available only in Regions US East (N. Virginia), US East (N.
                *          Virginia), US West (Oregon), Canada (Central), Europe (Ireland), Europe (London), Europe
                *          (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia
                *          Pacific (Sydney), China (Beijing), and China (Ningxia).</p>
                *          <p>The environment type <code>LINUX_GPU_CONTAINER</code> is available only in Regions US
                *          East (N. Virginia), US East (N. Virginia), US West (Oregon), Canada (Central), Europe
                *          (Ireland), Europe (London), Europe (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul),
                *          Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China
                *          (Ningxia).</p>
                *          <p>Valid values: <code>WINDOWS_CONTAINER</code> | <code>LINUX_CONTAINER</code> |
                *             <code>LINUX_GPU_CONTAINER</code> | <code>ARM_CONTAINER</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace AwsCodeBuildProjectEnvironment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectEnvironment) => any;
    }
    /**
        * <p>Information about CloudWatch Logs for the build project.</p>
        */
    export interface AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails {
            /**
                * <p>The group name of the logs in CloudWatch Logs.</p>
                */
            GroupName?: string;
            /**
                * <p>The current status of the logs in CloudWatch Logs for a build project.</p>
                */
            Status?: string;
            /**
                * <p>The prefix of the stream name of the CloudWatch Logs.</p>
                */
            StreamName?: string;
    }
    export namespace AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails) => any;
    }
    /**
        * <p>Information about logs built to an S3 bucket for a build project.</p>
        */
    export interface AwsCodeBuildProjectLogsConfigS3LogsDetails {
            /**
                * <p>Whether to disable encryption of the S3 build log output.</p>
                */
            EncryptionDisabled?: boolean;
            /**
                * <p>The ARN of the S3 bucket and the path prefix for S3 logs.</p>
                */
            Location?: string;
            /**
                * <p>The current status of the S3 build logs.</p>
                */
            Status?: string;
    }
    export namespace AwsCodeBuildProjectLogsConfigS3LogsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectLogsConfigS3LogsDetails) => any;
    }
    /**
        * <p>Information about logs for the build project.</p>
        */
    export interface AwsCodeBuildProjectLogsConfigDetails {
            /**
                * <p>Information about CloudWatch Logs for the build project.</p>
                */
            CloudWatchLogs?: AwsCodeBuildProjectLogsConfigCloudWatchLogsDetails;
            /**
                * <p>Information about logs built to an S3 bucket for a build project.</p>
                */
            S3Logs?: AwsCodeBuildProjectLogsConfigS3LogsDetails;
    }
    export namespace AwsCodeBuildProjectLogsConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectLogsConfigDetails) => any;
    }
    /**
        * <p>Information about the build input source code for this build project.</p>
        */
    export interface AwsCodeBuildProjectSource {
            /**
                * <p>The type of repository that contains the source code to be built. Valid values
                *          are:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>BITBUCKET</code> - The source code is in a Bitbucket repository.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CODECOMMIT</code> - The source code is in an CodeCommit
                *                repository.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CODEPIPELINE</code> - The source code settings are specified in the source
                *                action of a pipeline in CodePipeline.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>GITHUB</code> - The source code is in a GitHub repository.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>GITHUB_ENTERPRISE</code> - The source code is in a GitHub Enterprise
                *                repository.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_SOURCE</code> - The project does not have input source code.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>S3</code> - The source code is in an S3 input bucket. </p>
                *             </li>
                *          </ul>
                */
            Type?: string;
            /**
                * <p>Information about the location of the source code to be built.</p>
                *          <p>Valid values include:</p>
                *          <ul>
                *             <li>
                *                <p>For source code settings that are specified in the source action of a pipeline in
                *                CodePipeline, location should not be specified. If it is specified, CodePipeline ignores it. This is because CodePipeline uses the settings in a
                *                pipeline's source action instead of this value.</p>
                *             </li>
                *             <li>
                *                <p>For source code in an CodeCommit repository, the HTTPS clone URL to the
                *                repository that contains the source code and the build spec file (for example,
                *                   <code>https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name</code>
                *                ).</p>
                *             </li>
                *             <li>
                *                <p>For source code in an S3 input bucket, one of the following.</p>
                *                <ul>
                *                   <li>
                *                      <p>The path to the ZIP file that contains the source code (for example,
                *                         <code>bucket-name/path/to/object-name.zip</code>).</p>
                *                   </li>
                *                   <li>
                *                      <p> The path to the folder that contains the source code (for example,
                *                         <code>bucket-name/path/to/source-code/folder/</code>).</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that
                *                contains the source and the build spec file.</p>
                *             </li>
                *             <li>
                *                <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository
                *                that contains the source and the build spec file. </p>
                *             </li>
                *          </ul>
                */
            Location?: string;
            /**
                * <p>Information about the Git clone depth for the build project.</p>
                */
            GitCloneDepth?: number;
            /**
                * <p>Whether to ignore SSL warnings while connecting to the project source code.</p>
                */
            InsecureSsl?: boolean;
    }
    export namespace AwsCodeBuildProjectSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectSource) => any;
    }
    /**
        * <p>Information about the VPC configuration that CodeBuild accesses.</p>
        */
    export interface AwsCodeBuildProjectVpcConfig {
            /**
                * <p>The ID of the VPC.</p>
                */
            VpcId?: string;
            /**
                * <p>A list of one or more subnet IDs in your VPC.</p>
                */
            Subnets?: string[];
            /**
                * <p>A list of one or more security group IDs in your VPC.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace AwsCodeBuildProjectVpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectVpcConfig) => any;
    }
    /**
        * <p>Information about an CodeBuild project.</p>
        */
    export interface AwsCodeBuildProjectDetails {
            /**
                * <p>The KMS key used to encrypt the
                *          build output artifacts.</p>
                *          <p>You can specify either the ARN of the KMS key or, if available, the
                *          KMS key alias (using the format alias/alias-name). </p>
                */
            EncryptionKey?: string;
            /**
                * <p>Information about the build artifacts for the CodeBuild project.</p>
                */
            Artifacts?: AwsCodeBuildProjectArtifactsDetails[];
            /**
                * <p>Information about the build environment for this build project.</p>
                */
            Environment?: AwsCodeBuildProjectEnvironment;
            /**
                * <p>The name of the build project.</p>
                */
            Name?: string;
            /**
                * <p>Information about the build input source code for this build project.</p>
                */
            Source?: AwsCodeBuildProjectSource;
            /**
                * <p>The ARN of the IAM role that enables CodeBuild to interact with dependent Amazon Web Services
                *          services on behalf of the Amazon Web Services account.</p>
                */
            ServiceRole?: string;
            /**
                * <p>Information about logs for the build project.</p>
                */
            LogsConfig?: AwsCodeBuildProjectLogsConfigDetails;
            /**
                * <p>Information about the VPC configuration that CodeBuild accesses.</p>
                */
            VpcConfig?: AwsCodeBuildProjectVpcConfig;
            /**
                * <p>Information about the secondary artifacts for the CodeBuild project.</p>
                */
            SecondaryArtifacts?: AwsCodeBuildProjectArtifactsDetails[];
    }
    export namespace AwsCodeBuildProjectDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsCodeBuildProjectDetails) => any;
    }
    /**
        * <p>Contains a definition of an attribute for the table.</p>
        */
    export interface AwsDynamoDbTableAttributeDefinition {
            /**
                * <p>The name of the attribute.</p>
                */
            AttributeName?: string;
            /**
                * <p>The type of the attribute.</p>
                */
            AttributeType?: string;
    }
    export namespace AwsDynamoDbTableAttributeDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableAttributeDefinition) => any;
    }
    /**
        * <p>Provides information about the billing for read/write capacity on the table.</p>
        */
    export interface AwsDynamoDbTableBillingModeSummary {
            /**
                * <p>The method used to charge for read and write throughput and to manage capacity.</p>
                */
            BillingMode?: string;
            /**
                * <p>If the billing mode is <code>PAY_PER_REQUEST</code>, indicates when the billing mode was
                *          set to that value.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastUpdateToPayPerRequestDateTime?: string;
    }
    export namespace AwsDynamoDbTableBillingModeSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableBillingModeSummary) => any;
    }
    /**
        * <p>A component of the key schema for the DynamoDB table, a global secondary index, or a
        *          local secondary index.</p>
        */
    export interface AwsDynamoDbTableKeySchema {
            /**
                * <p>The name of the key schema attribute.</p>
                */
            AttributeName?: string;
            /**
                * <p>The type of key used for the key schema attribute.</p>
                */
            KeyType?: string;
    }
    export namespace AwsDynamoDbTableKeySchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableKeySchema) => any;
    }
    /**
        * <p>For global and local secondary indexes, identifies the attributes that are copied from
        *          the table into the index.</p>
        */
    export interface AwsDynamoDbTableProjection {
            /**
                * <p>The nonkey attributes that are projected into the index. For each attribute, provide the
                *          attribute name.</p>
                */
            NonKeyAttributes?: string[];
            /**
                * <p>The types of attributes that are projected into the index.</p>
                */
            ProjectionType?: string;
    }
    export namespace AwsDynamoDbTableProjection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableProjection) => any;
    }
    /**
        * <p>Information about the provisioned throughput for the table or for a global secondary
        *          index.</p>
        */
    export interface AwsDynamoDbTableProvisionedThroughput {
            /**
                * <p>Indicates when the provisioned throughput was last decreased.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastDecreaseDateTime?: string;
            /**
                * <p>Indicates when the provisioned throughput was last increased.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastIncreaseDateTime?: string;
            /**
                * <p>The number of times during the current UTC calendar day that the provisioned throughput
                *          was decreased.</p>
                */
            NumberOfDecreasesToday?: number;
            /**
                * <p>The maximum number of strongly consistent reads consumed per second before DynamoDB
                *          returns a <code>ThrottlingException</code>.</p>
                */
            ReadCapacityUnits?: number;
            /**
                * <p>The maximum number of writes consumed per second before DynamoDB returns a
                *             <code>ThrottlingException</code>.</p>
                */
            WriteCapacityUnits?: number;
    }
    export namespace AwsDynamoDbTableProvisionedThroughput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableProvisionedThroughput) => any;
    }
    /**
        * <p>Information abut a global secondary index for the table.</p>
        */
    export interface AwsDynamoDbTableGlobalSecondaryIndex {
            /**
                * <p>Whether the index is currently backfilling.</p>
                */
            Backfilling?: boolean;
            /**
                * <p>The ARN of the index.</p>
                */
            IndexArn?: string;
            /**
                * <p>The name of the index.</p>
                */
            IndexName?: string;
            /**
                * <p>The total size in bytes of the index.</p>
                */
            IndexSizeBytes?: number;
            /**
                * <p>The current status of the index.</p>
                */
            IndexStatus?: string;
            /**
                * <p>The number of items in the index.</p>
                */
            ItemCount?: number;
            /**
                * <p>The key schema for the index.</p>
                */
            KeySchema?: AwsDynamoDbTableKeySchema[];
            /**
                * <p>Attributes that are copied from the table into an index.</p>
                */
            Projection?: AwsDynamoDbTableProjection;
            /**
                * <p>Information about the provisioned throughput settings for the indexes.</p>
                */
            ProvisionedThroughput?: AwsDynamoDbTableProvisionedThroughput;
    }
    export namespace AwsDynamoDbTableGlobalSecondaryIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableGlobalSecondaryIndex) => any;
    }
    /**
        * <p>Information about a local secondary index for a DynamoDB table.</p>
        */
    export interface AwsDynamoDbTableLocalSecondaryIndex {
            /**
                * <p>The ARN of the index.</p>
                */
            IndexArn?: string;
            /**
                * <p>The name of the index.</p>
                */
            IndexName?: string;
            /**
                * <p>The complete key schema for the index.</p>
                */
            KeySchema?: AwsDynamoDbTableKeySchema[];
            /**
                * <p>Attributes that are copied from the table into the index. These are in addition to the
                *          primary key attributes and index key attributes, which are automatically projected.</p>
                */
            Projection?: AwsDynamoDbTableProjection;
    }
    export namespace AwsDynamoDbTableLocalSecondaryIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableLocalSecondaryIndex) => any;
    }
    /**
        * <p>Replica-specific configuration for the provisioned throughput.</p>
        */
    export interface AwsDynamoDbTableProvisionedThroughputOverride {
            /**
                * <p>The read capacity units for the replica.</p>
                */
            ReadCapacityUnits?: number;
    }
    export namespace AwsDynamoDbTableProvisionedThroughputOverride {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableProvisionedThroughputOverride) => any;
    }
    /**
        * <p>Information about a global secondary index for a DynamoDB table replica.</p>
        */
    export interface AwsDynamoDbTableReplicaGlobalSecondaryIndex {
            /**
                * <p>The name of the index.</p>
                */
            IndexName?: string;
            /**
                * <p>Replica-specific configuration for the provisioned throughput for the index.</p>
                */
            ProvisionedThroughputOverride?: AwsDynamoDbTableProvisionedThroughputOverride;
    }
    export namespace AwsDynamoDbTableReplicaGlobalSecondaryIndex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableReplicaGlobalSecondaryIndex) => any;
    }
    /**
        * <p>Information about a replica of a DynamoDB table.</p>
        */
    export interface AwsDynamoDbTableReplica {
            /**
                * <p>List of global secondary indexes for the replica.</p>
                */
            GlobalSecondaryIndexes?: AwsDynamoDbTableReplicaGlobalSecondaryIndex[];
            /**
                * <p>The identifier of the KMS key that will be used for KMS
                *          encryption for the replica.</p>
                */
            KmsMasterKeyId?: string;
            /**
                * <p>Replica-specific configuration for the provisioned throughput.</p>
                */
            ProvisionedThroughputOverride?: AwsDynamoDbTableProvisionedThroughputOverride;
            /**
                * <p>The name of the Region where the replica is located.</p>
                */
            RegionName?: string;
            /**
                * <p>The current status of the replica.</p>
                */
            ReplicaStatus?: string;
            /**
                * <p>Detailed information about the replica status.</p>
                */
            ReplicaStatusDescription?: string;
    }
    export namespace AwsDynamoDbTableReplica {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableReplica) => any;
    }
    /**
        * <p>Information about the restore for the table.</p>
        */
    export interface AwsDynamoDbTableRestoreSummary {
            /**
                * <p>The ARN of the source backup from which the table was restored.</p>
                */
            SourceBackupArn?: string;
            /**
                * <p>The ARN of the source table for the backup.</p>
                */
            SourceTableArn?: string;
            /**
                * <p>Indicates the point in time that the table was restored to.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            RestoreDateTime?: string;
            /**
                * <p>Whether a restore is currently in progress.</p>
                */
            RestoreInProgress?: boolean;
    }
    export namespace AwsDynamoDbTableRestoreSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableRestoreSummary) => any;
    }
    /**
        * <p>Information about the server-side encryption for the table.</p>
        */
    export interface AwsDynamoDbTableSseDescription {
            /**
                * <p>If the key is inaccessible, the date and time when DynamoDB detected that the key was
                *          inaccessible.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            InaccessibleEncryptionDateTime?: string;
            /**
                * <p>The status of the server-side encryption.</p>
                */
            Status?: string;
            /**
                * <p>The type of server-side encryption.</p>
                */
            SseType?: string;
            /**
                * <p>The ARN of the KMS key that is used for the KMS
                *          encryption.</p>
                */
            KmsMasterKeyArn?: string;
    }
    export namespace AwsDynamoDbTableSseDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableSseDescription) => any;
    }
    /**
        * <p>The current DynamoDB Streams configuration for the table.</p>
        */
    export interface AwsDynamoDbTableStreamSpecification {
            /**
                * <p>Indicates whether DynamoDB Streams is enabled on the table.</p>
                */
            StreamEnabled?: boolean;
            /**
                * <p>Determines the information that is written to the table.</p>
                */
            StreamViewType?: string;
    }
    export namespace AwsDynamoDbTableStreamSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableStreamSpecification) => any;
    }
    /**
        * <p>Provides details about a DynamoDB table.</p>
        */
    export interface AwsDynamoDbTableDetails {
            /**
                * <p>A list of attribute definitions for the table.</p>
                */
            AttributeDefinitions?: AwsDynamoDbTableAttributeDefinition[];
            /**
                * <p>Information about the billing for read/write capacity on the table.</p>
                */
            BillingModeSummary?: AwsDynamoDbTableBillingModeSummary;
            /**
                * <p>Indicates when the table was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreationDateTime?: string;
            /**
                * <p>List of global secondary indexes for the table.</p>
                */
            GlobalSecondaryIndexes?: AwsDynamoDbTableGlobalSecondaryIndex[];
            /**
                * <p>The version of global tables being used.</p>
                */
            GlobalTableVersion?: string;
            /**
                * <p>The number of items in the table.</p>
                */
            ItemCount?: number;
            /**
                * <p>The primary key structure for the table.</p>
                */
            KeySchema?: AwsDynamoDbTableKeySchema[];
            /**
                * <p>The ARN of the latest stream for the table.</p>
                */
            LatestStreamArn?: string;
            /**
                * <p>The label of the latest stream. The label is not a unique identifier.</p>
                */
            LatestStreamLabel?: string;
            /**
                * <p>The list of local secondary indexes for the table.</p>
                */
            LocalSecondaryIndexes?: AwsDynamoDbTableLocalSecondaryIndex[];
            /**
                * <p>Information about the provisioned throughput for the table.</p>
                */
            ProvisionedThroughput?: AwsDynamoDbTableProvisionedThroughput;
            /**
                * <p>The list of replicas of this table.</p>
                */
            Replicas?: AwsDynamoDbTableReplica[];
            /**
                * <p>Information about the restore for the table.</p>
                */
            RestoreSummary?: AwsDynamoDbTableRestoreSummary;
            /**
                * <p>Information about the server-side encryption for the table.</p>
                */
            SseDescription?: AwsDynamoDbTableSseDescription;
            /**
                * <p>The current DynamoDB Streams configuration for the table.</p>
                */
            StreamSpecification?: AwsDynamoDbTableStreamSpecification;
            /**
                * <p>The identifier of the table.</p>
                */
            TableId?: string;
            /**
                * <p>The name of the table.</p>
                */
            TableName?: string;
            /**
                * <p>The total size of the table in bytes.</p>
                */
            TableSizeBytes?: number;
            /**
                * <p>The current status of the table.</p>
                */
            TableStatus?: string;
    }
    export namespace AwsDynamoDbTableDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsDynamoDbTableDetails) => any;
    }
    /**
        * <p>Information about an Elastic IP address.</p>
        */
    export interface AwsEc2EipDetails {
            /**
                * <p>The identifier of the EC2 instance.</p>
                */
            InstanceId?: string;
            /**
                * <p>A public IP address that is associated with the EC2 instance.</p>
                */
            PublicIp?: string;
            /**
                * <p>The identifier that Amazon Web Services assigns to represent the allocation of the Elastic IP address
                *          for use with Amazon VPC.</p>
                */
            AllocationId?: string;
            /**
                * <p>The identifier that represents the association of the Elastic IP address with an EC2
                *          instance.</p>
                */
            AssociationId?: string;
            /**
                * <p>The domain in which to allocate the address.</p>
                *          <p>If the address is for use with EC2 instances in a VPC, then <code>Domain</code> is
                *             <code>vpc</code>. Otherwise, <code>Domain</code> is <code>standard</code>. </p>
                */
            Domain?: string;
            /**
                * <p>The identifier of an IP address pool. This parameter allows Amazon EC2 to select an IP
                *          address from the address pool.</p>
                */
            PublicIpv4Pool?: string;
            /**
                * <p>The name of the location from which the Elastic IP address is advertised.</p>
                */
            NetworkBorderGroup?: string;
            /**
                * <p>The identifier of the network interface.</p>
                */
            NetworkInterfaceId?: string;
            /**
                * <p>The Amazon Web Services account ID of the owner of the network interface.</p>
                */
            NetworkInterfaceOwnerId?: string;
            /**
                * <p>The private IP address that is associated with the Elastic IP address.</p>
                */
            PrivateIpAddress?: string;
    }
    export namespace AwsEc2EipDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2EipDetails) => any;
    }
    /**
        * <p>Metadata options that allow you to configure and secure the Amazon EC2 instance.</p>
        */
    export interface AwsEc2InstanceMetadataOptions {
            /**
                * <p>Enables or disables the HTTP metadata endpoint on the instance.
                *       </p>
                */
            HttpEndpoint?: string;
            /**
                * <p>Enables or disables the IPv6 endpoint for the instance metadata service.
                *       </p>
                */
            HttpProtocolIpv6?: string;
            /**
                * <p>The desired HTTP PUT response hop limit for instance metadata requests.
                *          The larger the number, the further instance metadata requests can travel.
                *       </p>
                */
            HttpPutResponseHopLimit?: number;
            /**
                * <p>The state of token usage for your instance metadata requests.
                *       </p>
                */
            HttpTokens?: string;
            /**
                * <p>Specifies whether to allow access to instance tags from the instance metadata.
                *       </p>
                */
            InstanceMetadataTags?: string;
    }
    export namespace AwsEc2InstanceMetadataOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2InstanceMetadataOptions) => any;
    }
    /**
        * <p>Identifies a network interface for the Amazon EC2 instance.</p>
        */
    export interface AwsEc2InstanceNetworkInterfacesDetails {
            /**
                * <p>The identifier of the network interface. The details are in a corresponding <code>AwsEc2NetworkInterfacesDetails</code> object.</p>
                */
            NetworkInterfaceId?: string;
    }
    export namespace AwsEc2InstanceNetworkInterfacesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2InstanceNetworkInterfacesDetails) => any;
    }
    /**
        * <p>The details of an Amazon EC2 instance.</p>
        */
    export interface AwsEc2InstanceDetails {
            /**
                * <p>The instance type of the instance. </p>
                */
            Type?: string;
            /**
                * <p>The Amazon Machine Image (AMI) ID of the instance.</p>
                */
            ImageId?: string;
            /**
                * <p>The IPv4 addresses associated with the instance.</p>
                */
            IpV4Addresses?: string[];
            /**
                * <p>The IPv6 addresses associated with the instance.</p>
                */
            IpV6Addresses?: string[];
            /**
                * <p>The key name associated with the instance.</p>
                */
            KeyName?: string;
            /**
                * <p>The IAM profile ARN of the instance.</p>
                */
            IamInstanceProfileArn?: string;
            /**
                * <p>The identifier of the VPC that the instance was launched in.</p>
                */
            VpcId?: string;
            /**
                * <p>The identifier of the subnet that the instance was launched in.</p>
                */
            SubnetId?: string;
            /**
                * <p>Indicates when the instance was launched.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LaunchedAt?: string;
            /**
                * <p>The identifiers of the network interfaces for the EC2 instance. The details for each network interface are in a corresponding <code>AwsEc2NetworkInterfacesDetails</code> object.</p>
                */
            NetworkInterfaces?: AwsEc2InstanceNetworkInterfacesDetails[];
            /**
                * <p>The virtualization type of the Amazon Machine Image (AMI) required to launch the instance.
                *       </p>
                */
            VirtualizationType?: string;
            /**
                * <p>Details about the metadata options for the Amazon EC2 instance.
                *       </p>
                */
            MetadataOptions?: AwsEc2InstanceMetadataOptions;
    }
    export namespace AwsEc2InstanceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2InstanceDetails) => any;
    }
    /**
        * <p>An association between the network ACL and a subnet.</p>
        */
    export interface AwsEc2NetworkAclAssociation {
            /**
                * <p>The identifier of the association between the network ACL and the subnet.</p>
                */
            NetworkAclAssociationId?: string;
            /**
                * <p>The identifier of the network ACL.</p>
                */
            NetworkAclId?: string;
            /**
                * <p>The identifier of the subnet that is associated with the network ACL.</p>
                */
            SubnetId?: string;
    }
    export namespace AwsEc2NetworkAclAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkAclAssociation) => any;
    }
    /**
        * <p>An Internet Control Message Protocol (ICMP) type and code.</p>
        */
    export interface IcmpTypeCode {
            /**
                * <p>The ICMP code for which to deny or allow access. To deny or allow all codes, use the
                *          value <code>-1</code>.</p>
                */
            Code?: number;
            /**
                * <p>The ICMP type for which to deny or allow access. To deny or allow all types, use the
                *          value <code>-1</code>.</p>
                */
            Type?: number;
    }
    export namespace IcmpTypeCode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IcmpTypeCode) => any;
    }
    /**
        * <p>A range of ports.</p>
        */
    export interface PortRangeFromTo {
            /**
                * <p>The first port in the port range.</p>
                */
            From?: number;
            /**
                * <p>The last port in the port range.</p>
                */
            To?: number;
    }
    export namespace PortRangeFromTo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortRangeFromTo) => any;
    }
    /**
        * <p>A rule for the network ACL. Each rule allows or denies access based on the IP address, traffic direction, port, and protocol.</p>
        */
    export interface AwsEc2NetworkAclEntry {
            /**
                * <p>The IPV4 network range for which to deny or allow access.</p>
                */
            CidrBlock?: string;
            /**
                * <p>Whether the rule is an egress rule. An egress rule is a rule that applies to traffic that leaves the subnet.</p>
                */
            Egress?: boolean;
            /**
                * <p>The Internet Control Message Protocol (ICMP) type and code for which to deny or allow access.</p>
                */
            IcmpTypeCode?: IcmpTypeCode;
            /**
                * <p>The IPV6 network range for which to deny or allow access.</p>
                */
            Ipv6CidrBlock?: string;
            /**
                * <p>For TCP or UDP protocols, the range of ports that the rule applies to.</p>
                */
            PortRange?: PortRangeFromTo;
            /**
                * <p>The protocol that the rule applies to. To deny or allow access to all protocols, use the
                *          value <code>-1</code>.</p>
                */
            Protocol?: string;
            /**
                * <p>Whether the rule is used to allow access or deny access.</p>
                */
            RuleAction?: string;
            /**
                * <p>The rule number. The rules are processed in order by their number.</p>
                */
            RuleNumber?: number;
    }
    export namespace AwsEc2NetworkAclEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkAclEntry) => any;
    }
    /**
        * <p>Contains details about an Amazon EC2 network access control list (ACL).</p>
        */
    export interface AwsEc2NetworkAclDetails {
            /**
                * <p>Whether this is the default network ACL for the VPC.</p>
                */
            IsDefault?: boolean;
            /**
                * <p>The identifier of the network ACL.</p>
                */
            NetworkAclId?: string;
            /**
                * <p>The identifier of the Amazon Web Services account that owns the network ACL.</p>
                */
            OwnerId?: string;
            /**
                * <p>The identifier of the VPC for the network ACL.</p>
                */
            VpcId?: string;
            /**
                * <p>Associations between the network ACL and subnets.</p>
                */
            Associations?: AwsEc2NetworkAclAssociation[];
            /**
                * <p>The set of rules in the network ACL.</p>
                */
            Entries?: AwsEc2NetworkAclEntry[];
    }
    export namespace AwsEc2NetworkAclDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkAclDetails) => any;
    }
    /**
        * <p>Information about the network interface attachment.</p>
        */
    export interface AwsEc2NetworkInterfaceAttachment {
            /**
                * <p>Indicates when the attachment initiated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            AttachTime?: string;
            /**
                * <p>The identifier of the network interface attachment</p>
                */
            AttachmentId?: string;
            /**
                * <p>Indicates whether the network interface is deleted when the instance is
                *          terminated.</p>
                */
            DeleteOnTermination?: boolean;
            /**
                * <p>The device index of the network interface attachment on the instance.</p>
                */
            DeviceIndex?: number;
            /**
                * <p>The ID of the instance.</p>
                */
            InstanceId?: string;
            /**
                * <p>The Amazon Web Services account ID of the owner of the instance.</p>
                */
            InstanceOwnerId?: string;
            /**
                * <p>The attachment state.</p>
                *          <p>Valid values: <code>attaching</code> | <code>attached</code> | <code>detaching</code> |
                *             <code>detached</code>
                *          </p>
                */
            Status?: string;
    }
    export namespace AwsEc2NetworkInterfaceAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkInterfaceAttachment) => any;
    }
    /**
        * <p>Provides information about an IPV6 address that is associated with the network
        *          interface.</p>
        */
    export interface AwsEc2NetworkInterfaceIpV6AddressDetail {
            /**
                * <p>The IPV6 address.</p>
                */
            IpV6Address?: string;
    }
    export namespace AwsEc2NetworkInterfaceIpV6AddressDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkInterfaceIpV6AddressDetail) => any;
    }
    /**
        * <p>Provides information about a private IPv4 address that is with the network
        *          interface.</p>
        */
    export interface AwsEc2NetworkInterfacePrivateIpAddressDetail {
            /**
                * <p>The IP address.</p>
                */
            PrivateIpAddress?: string;
            /**
                * <p>The private DNS name for the IP address.</p>
                */
            PrivateDnsName?: string;
    }
    export namespace AwsEc2NetworkInterfacePrivateIpAddressDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkInterfacePrivateIpAddressDetail) => any;
    }
    /**
        * <p>A security group associated with the network interface.</p>
        */
    export interface AwsEc2NetworkInterfaceSecurityGroup {
            /**
                * <p>The name of the security group.</p>
                */
            GroupName?: string;
            /**
                * <p>The ID of the security group.</p>
                */
            GroupId?: string;
    }
    export namespace AwsEc2NetworkInterfaceSecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkInterfaceSecurityGroup) => any;
    }
    /**
        * <p>Details about the network interface</p>
        */
    export interface AwsEc2NetworkInterfaceDetails {
            /**
                * <p>The network interface attachment.</p>
                */
            Attachment?: AwsEc2NetworkInterfaceAttachment;
            /**
                * <p>The ID of the network interface.</p>
                */
            NetworkInterfaceId?: string;
            /**
                * <p>Security groups for the network interface.</p>
                */
            SecurityGroups?: AwsEc2NetworkInterfaceSecurityGroup[];
            /**
                * <p>Indicates whether traffic to or from the instance is validated.</p>
                */
            SourceDestCheck?: boolean;
            /**
                * <p>The IPv6 addresses associated with the network interface.</p>
                */
            IpV6Addresses?: AwsEc2NetworkInterfaceIpV6AddressDetail[];
            /**
                * <p>The private IPv4 addresses associated with the network interface.</p>
                */
            PrivateIpAddresses?: AwsEc2NetworkInterfacePrivateIpAddressDetail[];
            /**
                * <p>The public DNS name of the network interface.</p>
                */
            PublicDnsName?: string;
            /**
                * <p>The address of the Elastic IP address bound to the network interface.</p>
                */
            PublicIp?: string;
    }
    export namespace AwsEc2NetworkInterfaceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2NetworkInterfaceDetails) => any;
    }
    /**
        * <p>A range of IPv4 addresses.</p>
        */
    export interface AwsEc2SecurityGroupIpRange {
            /**
                * <p>The IPv4 CIDR range. You can specify either a CIDR range or a source security group, but
                *          not both. To specify a single IPv4 address, use the /32 prefix length.</p>
                */
            CidrIp?: string;
    }
    export namespace AwsEc2SecurityGroupIpRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2SecurityGroupIpRange) => any;
    }
    /**
        * <p>A range of IPv6 addresses.</p>
        */
    export interface AwsEc2SecurityGroupIpv6Range {
            /**
                * <p>The IPv6 CIDR range. You can specify either a CIDR range or a source security group, but
                *          not both. To specify a single IPv6 address, use the /128 prefix length.</p>
                */
            CidrIpv6?: string;
    }
    export namespace AwsEc2SecurityGroupIpv6Range {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2SecurityGroupIpv6Range) => any;
    }
    /**
        * <p>A prefix list ID.</p>
        */
    export interface AwsEc2SecurityGroupPrefixListId {
            /**
                * <p>The ID of the prefix.</p>
                */
            PrefixListId?: string;
    }
    export namespace AwsEc2SecurityGroupPrefixListId {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2SecurityGroupPrefixListId) => any;
    }
    /**
        * <p>A relationship between a security group and a user.</p>
        */
    export interface AwsEc2SecurityGroupUserIdGroupPair {
            /**
                * <p>The ID of the security group.</p>
                */
            GroupId?: string;
            /**
                * <p>The name of the security group.</p>
                */
            GroupName?: string;
            /**
                * <p>The status of a VPC peering connection, if applicable.</p>
                */
            PeeringStatus?: string;
            /**
                * <p>The ID of an Amazon Web Services account.</p>
                *          <p>For a referenced security group in another VPC, the account ID of the referenced
                *          security group is returned in the response. If the referenced security group is deleted,
                *          this value is not returned.</p>
                *          <p>[EC2-Classic] Required when adding or removing rules that reference a security group in
                *          another VPC. </p>
                */
            UserId?: string;
            /**
                * <p>The ID of the VPC for the referenced security group, if applicable.</p>
                */
            VpcId?: string;
            /**
                * <p>The ID of the VPC peering connection, if applicable.</p>
                */
            VpcPeeringConnectionId?: string;
    }
    export namespace AwsEc2SecurityGroupUserIdGroupPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2SecurityGroupUserIdGroupPair) => any;
    }
    /**
        * <p>An IP permission for an EC2 security group.</p>
        */
    export interface AwsEc2SecurityGroupIpPermission {
            /**
                * <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
                *             <code>icmpv6</code>) or number.</p>
                *          <p>[VPC only] Use <code>-1</code> to specify all protocols.</p>
                *          <p>When authorizing security group rules, specifying <code>-1</code>
                *          or a protocol number other than <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or
                *             <code>icmpv6</code> allows traffic on all ports, regardless of any port range you
                *          specify.</p>
                *          <p>For <code>tcp</code>, <code>udp</code>, and <code>icmp</code>, you must specify a port
                *          range.</p>
                *          <p>For <code>icmpv6</code>, the port range is optional. If you omit the port range, traffic
                *          for all types and codes is allowed. </p>
                */
            IpProtocol?: string;
            /**
                * <p>The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type
                *          number.</p>
                *          <p>A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you
                *          must specify all codes. </p>
                */
            FromPort?: number;
            /**
                * <p>The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.</p>
                *          <p>A value of <code>-1</code> indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all
                *          codes.</p>
                */
            ToPort?: number;
            /**
                * <p>The security group and Amazon Web Services account ID pairs.</p>
                */
            UserIdGroupPairs?: AwsEc2SecurityGroupUserIdGroupPair[];
            /**
                * <p>The IPv4 ranges.</p>
                */
            IpRanges?: AwsEc2SecurityGroupIpRange[];
            /**
                * <p>The IPv6 ranges.</p>
                */
            Ipv6Ranges?: AwsEc2SecurityGroupIpv6Range[];
            /**
                * <p>[VPC only] The prefix list IDs for an Amazon Web Services service. With outbound rules, this is the Amazon Web Services
                *          service to access through a VPC endpoint from instances associated with the security
                *          group.</p>
                */
            PrefixListIds?: AwsEc2SecurityGroupPrefixListId[];
    }
    export namespace AwsEc2SecurityGroupIpPermission {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2SecurityGroupIpPermission) => any;
    }
    /**
        * <p>Details about an Amazon EC2 security group.</p>
        */
    export interface AwsEc2SecurityGroupDetails {
            /**
                * <p>The name of the security group.</p>
                */
            GroupName?: string;
            /**
                * <p>The ID of the security group.</p>
                */
            GroupId?: string;
            /**
                * <p>The Amazon Web Services account ID of the owner of the security group.</p>
                */
            OwnerId?: string;
            /**
                * <p>[VPC only] The ID of the VPC for the security group.</p>
                */
            VpcId?: string;
            /**
                * <p>The inbound rules associated with the security group.</p>
                */
            IpPermissions?: AwsEc2SecurityGroupIpPermission[];
            /**
                * <p>[VPC only] The outbound rules associated with the security group.</p>
                */
            IpPermissionsEgress?: AwsEc2SecurityGroupIpPermission[];
    }
    export namespace AwsEc2SecurityGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2SecurityGroupDetails) => any;
    }
    /**
        * <p>An IPV6 CIDR block association.</p>
        */
    export interface Ipv6CidrBlockAssociation {
            /**
                * <p>The association ID for the IPv6 CIDR block.</p>
                */
            AssociationId?: string;
            /**
                * <p>The IPv6 CIDR block.</p>
                */
            Ipv6CidrBlock?: string;
            /**
                * <p>Information about the state of the CIDR block.</p>
                */
            CidrBlockState?: string;
    }
    export namespace Ipv6CidrBlockAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Ipv6CidrBlockAssociation) => any;
    }
    /**
        * <p>Contains information about a subnet in Amazon EC2.</p>
        */
    export interface AwsEc2SubnetDetails {
            /**
                * <p>Whether to assign an IPV6 address to a network interface that is created in this subnet.</p>
                */
            AssignIpv6AddressOnCreation?: boolean;
            /**
                * <p>The Availability Zone for the subnet.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The identifier of the Availability Zone for the subnet.</p>
                */
            AvailabilityZoneId?: string;
            /**
                * <p>The number of available IPV4 addresses in the subnet. Does not include addresses for stopped instances.</p>
                */
            AvailableIpAddressCount?: number;
            /**
                * <p>The IPV4 CIDR block that is assigned to the subnet.</p>
                */
            CidrBlock?: string;
            /**
                * <p>Whether this subnet is the default subnet for the Availability Zone.</p>
                */
            DefaultForAz?: boolean;
            /**
                * <p>Whether instances in this subnet receive a public IP address.</p>
                */
            MapPublicIpOnLaunch?: boolean;
            /**
                * <p>The identifier of the Amazon Web Services account that owns the subnet.</p>
                */
            OwnerId?: string;
            /**
                * <p>The current state of the subnet.</p>
                */
            State?: string;
            /**
                * <p>The ARN of the subnet.</p>
                */
            SubnetArn?: string;
            /**
                * <p>The identifier of the subnet.</p>
                */
            SubnetId?: string;
            /**
                * <p>The identifier of the VPC that contains the subnet.</p>
                */
            VpcId?: string;
            /**
                * <p>The IPV6 CIDR blocks that are associated with the subnet.</p>
                */
            Ipv6CidrBlockAssociationSet?: Ipv6CidrBlockAssociation[];
    }
    export namespace AwsEc2SubnetDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2SubnetDetails) => any;
    }
    /**
        * <p>Information about an Amazon Web Services Amazon EC2 Transit Gateway that interconnects
        * virtual private clouds (VPCs) and on-premises networks.
        *       </p>
        */
    export interface AwsEc2TransitGatewayDetails {
            /**
                * <p>The ID of the transit gateway.
                *       </p>
                */
            Id?: string;
            /**
                * <p>The description of the transit gateway.
                *       </p>
                */
            Description?: string;
            /**
                * <p>Turn on or turn off automatic propagation of routes to the default propagation route table.
                *       </p>
                */
            DefaultRouteTablePropagation?: string;
            /**
                * <p>Turn on or turn off automatic acceptance of attachment requests.
                *       </p>
                */
            AutoAcceptSharedAttachments?: string;
            /**
                * <p>Turn on or turn off automatic association with the default association route table.
                *       </p>
                */
            DefaultRouteTableAssociation?: string;
            /**
                * <p>The transit gateway Classless Inter-Domain Routing (CIDR) blocks.
                *       </p>
                */
            TransitGatewayCidrBlocks?: string[];
            /**
                * <p>The ID of the default association route table.
                *       </p>
                */
            AssociationDefaultRouteTableId?: string;
            /**
                * <p>The ID of the default propagation route table.
                *       </p>
                */
            PropagationDefaultRouteTableId?: string;
            /**
                * <p>Turn on or turn off Equal Cost Multipath Protocol (ECMP) support.
                *       </p>
                */
            VpnEcmpSupport?: string;
            /**
                * <p>Turn on or turn off DNS support.
                *       </p>
                */
            DnsSupport?: string;
            /**
                * <p>Indicates whether multicast is supported on the transit gateway.
                *       </p>
                */
            MulticastSupport?: string;
            /**
                * <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session.
                *       </p>
                */
            AmazonSideAsn?: number;
    }
    export namespace AwsEc2TransitGatewayDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2TransitGatewayDetails) => any;
    }
    /**
        * <p>An attachment to an Amazon EC2 volume.</p>
        */
    export interface AwsEc2VolumeAttachment {
            /**
                * <p>The datetime when the attachment initiated.</p>
                */
            AttachTime?: string;
            /**
                * <p>Whether the EBS volume is deleted when the EC2 instance is terminated.</p>
                */
            DeleteOnTermination?: boolean;
            /**
                * <p>The identifier of the EC2 instance.</p>
                */
            InstanceId?: string;
            /**
                * <p>The attachment state of the volume.</p>
                */
            Status?: string;
    }
    export namespace AwsEc2VolumeAttachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VolumeAttachment) => any;
    }
    /**
        * <p>Details about an EC2 volume.</p>
        */
    export interface AwsEc2VolumeDetails {
            /**
                * <p>Indicates when the volume was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateTime?: string;
            /**
                * <p>The device name for the volume that is attached to the instance.
                *       </p>
                */
            DeviceName?: string;
            /**
                * <p>Specifies whether the volume is encrypted.</p>
                */
            Encrypted?: boolean;
            /**
                * <p>The size of the volume, in GiBs.</p>
                */
            Size?: number;
            /**
                * <p>The snapshot from which the volume was created.</p>
                */
            SnapshotId?: string;
            /**
                * <p>The volume state.</p>
                */
            Status?: string;
            /**
                * <p>The ARN of the KMS key that was
                *          used to protect the volume encryption key for the volume.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The volume attachments.</p>
                */
            Attachments?: AwsEc2VolumeAttachment[];
            /**
                * <p>The ID of the volume.
                *       </p>
                */
            VolumeId?: string;
            /**
                * <p>The volume type.
                *       </p>
                */
            VolumeType?: string;
            /**
                * <p>Indicates whether the volume was scanned or skipped.
                *       </p>
                */
            VolumeScanStatus?: string;
    }
    export namespace AwsEc2VolumeDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VolumeDetails) => any;
    }
    /**
        * <p>An IPv4 CIDR block association.</p>
        */
    export interface CidrBlockAssociation {
            /**
                * <p>The association ID for the IPv4 CIDR block.</p>
                */
            AssociationId?: string;
            /**
                * <p>The IPv4 CIDR block.</p>
                */
            CidrBlock?: string;
            /**
                * <p>Information about the state of the IPv4 CIDR block.</p>
                */
            CidrBlockState?: string;
    }
    export namespace CidrBlockAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CidrBlockAssociation) => any;
    }
    /**
        * <p>Details about an EC2 VPC.</p>
        */
    export interface AwsEc2VpcDetails {
            /**
                * <p>Information about the IPv4 CIDR blocks associated with the VPC.</p>
                */
            CidrBlockAssociationSet?: CidrBlockAssociation[];
            /**
                * <p>Information about the IPv6 CIDR blocks associated with the VPC.</p>
                */
            Ipv6CidrBlockAssociationSet?: Ipv6CidrBlockAssociation[];
            /**
                * <p>The identifier of the set of Dynamic Host Configuration Protocol (DHCP) options that are
                *          associated with the VPC. If the default options are associated with the VPC, then this is
                *          default.</p>
                */
            DhcpOptionsId?: string;
            /**
                * <p>The current state of the VPC.</p>
                */
            State?: string;
    }
    export namespace AwsEc2VpcDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpcDetails) => any;
    }
    /**
        * <p>The service type information for a VPC endpoint service.</p>
        */
    export interface AwsEc2VpcEndpointServiceServiceTypeDetails {
            /**
                * <p>The type of service.</p>
                */
            ServiceType?: string;
    }
    export namespace AwsEc2VpcEndpointServiceServiceTypeDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpcEndpointServiceServiceTypeDetails) => any;
    }
    /**
        * <p>Contains details about the service configuration for a VPC endpoint service.</p>
        */
    export interface AwsEc2VpcEndpointServiceDetails {
            /**
                * <p>Whether requests from other Amazon Web Services accounts to create an endpoint to the service must first be accepted.</p>
                */
            AcceptanceRequired?: boolean;
            /**
                * <p>The Availability Zones where the service is available.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The DNS names for the service.</p>
                */
            BaseEndpointDnsNames?: string[];
            /**
                * <p>Whether the service manages its VPC endpoints.</p>
                */
            ManagesVpcEndpoints?: boolean;
            /**
                * <p>The ARNs of the Gateway Load Balancers for the service.</p>
                */
            GatewayLoadBalancerArns?: string[];
            /**
                * <p>The ARNs of the Network Load Balancers for the service.</p>
                */
            NetworkLoadBalancerArns?: string[];
            /**
                * <p>The private DNS name for the service.</p>
                */
            PrivateDnsName?: string;
            /**
                * <p>The identifier of the service.</p>
                */
            ServiceId?: string;
            /**
                * <p>The name of the service.</p>
                */
            ServiceName?: string;
            /**
                * <p>The current state of the service.</p>
                */
            ServiceState?: string;
            /**
                * <p>The types for the service.</p>
                */
            ServiceType?: AwsEc2VpcEndpointServiceServiceTypeDetails[];
    }
    export namespace AwsEc2VpcEndpointServiceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpcEndpointServiceDetails) => any;
    }
    /**
        * <p>Provides details about the IPv4 CIDR blocks for the VPC.
        *       </p>
        */
    export interface VpcInfoCidrBlockSetDetails {
            /**
                * <p>The IPv4 CIDR block for the VPC.
                *       </p>
                */
            CidrBlock?: string;
    }
    export namespace VpcInfoCidrBlockSetDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcInfoCidrBlockSetDetails) => any;
    }
    /**
        * <p>Provides details about the IPv6 CIDR blocks for the VPC.
        *       </p>
        */
    export interface VpcInfoIpv6CidrBlockSetDetails {
            /**
                * <p>The IPv6 CIDR block for the VPC.
                *       </p>
                */
            Ipv6CidrBlock?: string;
    }
    export namespace VpcInfoIpv6CidrBlockSetDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcInfoIpv6CidrBlockSetDetails) => any;
    }
    /**
        * <p>Provides information about the VPC peering connection options for the accepter or requester VPC.
        *       </p>
        */
    export interface VpcInfoPeeringOptionsDetails {
            /**
                * <p>Indicates whether a local VPC can resolve public DNS hostnames to private IP addresses when queried from instances in a peer VPC.
                *       </p>
                */
            AllowDnsResolutionFromRemoteVpc?: boolean;
            /**
                * <p>Indicates whether a local ClassicLink connection can communicate with the peer VPC over the VPC peering connection.
                *       </p>
                */
            AllowEgressFromLocalClassicLinkToRemoteVpc?: boolean;
            /**
                * <p>Indicates whether a local VPC can communicate with a ClassicLink connection in the peer VPC over the VPC peering connection.
                *       </p>
                */
            AllowEgressFromLocalVpcToRemoteClassicLink?: boolean;
    }
    export namespace VpcInfoPeeringOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcInfoPeeringOptionsDetails) => any;
    }
    /**
        * <p>Describes a VPC in a VPC peering connection.
        *       </p>
        */
    export interface AwsEc2VpcPeeringConnectionVpcInfoDetails {
            /**
                * <p>The IPv4 CIDR block for the VPC.
                *       </p>
                */
            CidrBlock?: string;
            /**
                * <p>Information about the IPv4 CIDR blocks for the VPC.
                *       </p>
                */
            CidrBlockSet?: VpcInfoCidrBlockSetDetails[];
            /**
                * <p>The IPv6 CIDR block for the VPC.
                *       </p>
                */
            Ipv6CidrBlockSet?: VpcInfoIpv6CidrBlockSetDetails[];
            /**
                * <p>The ID of the Amazon Web Services account that owns the VPC.
                *       </p>
                */
            OwnerId?: string;
            /**
                * <p>Information about the VPC peering connection options for the accepter or requester VPC.
                *       </p>
                */
            PeeringOptions?: VpcInfoPeeringOptionsDetails;
            /**
                * <p>The Amazon Web Services Region in which the VPC is located.
                *       </p>
                */
            Region?: string;
            /**
                * <p>The ID of the VPC.
                *       </p>
                */
            VpcId?: string;
    }
    export namespace AwsEc2VpcPeeringConnectionVpcInfoDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpcPeeringConnectionVpcInfoDetails) => any;
    }
    /**
        * <p>Details about the status of the VPC peering connection.
        *       </p>
        */
    export interface AwsEc2VpcPeeringConnectionStatusDetails {
            /**
                * <p>The status of the VPC peering connection.
                *       </p>
                */
            Code?: string;
            /**
                * <p>A message that provides more information about the status, if applicable.
                *       </p>
                */
            Message?: string;
    }
    export namespace AwsEc2VpcPeeringConnectionStatusDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpcPeeringConnectionStatusDetails) => any;
    }
    /**
        * <p>Provides information about a VPC peering connection between two VPCs: a requester VPC that you own and an
        * accepter VPC with which to create the connection.
        *       </p>
        */
    export interface AwsEc2VpcPeeringConnectionDetails {
            /**
                * <p>Information about the accepter VPC.
                *       </p>
                */
            AccepterVpcInfo?: AwsEc2VpcPeeringConnectionVpcInfoDetails;
            /**
                * <p>The time at which an unaccepted VPC peering connection will expire.
                *       </p>
                */
            ExpirationTime?: string;
            /**
                * <p>Information about the requester VPC.
                *       </p>
                */
            RequesterVpcInfo?: AwsEc2VpcPeeringConnectionVpcInfoDetails;
            /**
                * <p>The status of the VPC peering connection.
                *       </p>
                */
            Status?: AwsEc2VpcPeeringConnectionStatusDetails;
            /**
                * <p>The ID of the VPC peering connection.
                *       </p>
                */
            VpcPeeringConnectionId?: string;
    }
    export namespace AwsEc2VpcPeeringConnectionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpcPeeringConnectionDetails) => any;
    }
    /**
        * <p>The VPN tunnel options.</p>
        */
    export interface AwsEc2VpnConnectionOptionsTunnelOptionsDetails {
            /**
                * <p>The number of seconds after which a Dead Peer Detection (DPD) timeout occurs.</p>
                */
            DpdTimeoutSeconds?: number;
            /**
                * <p>The Internet Key Exchange (IKE) versions that are permitted for the VPN tunnel.</p>
                */
            IkeVersions?: string[];
            /**
                * <p>The external IP address of the VPN tunnel.</p>
                */
            OutsideIpAddress?: string;
            /**
                * <p>The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 1 IKE
                *          negotiations.</p>
                */
            Phase1DhGroupNumbers?: number[];
            /**
                * <p>The permitted encryption algorithms for the VPN tunnel for phase 1 IKE
                *          negotiations.</p>
                */
            Phase1EncryptionAlgorithms?: string[];
            /**
                * <p>The permitted integrity algorithms for the VPN tunnel for phase 1 IKE
                *          negotiations.</p>
                */
            Phase1IntegrityAlgorithms?: string[];
            /**
                * <p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p>
                */
            Phase1LifetimeSeconds?: number;
            /**
                * <p>The permitted Diffie-Hellman group numbers for the VPN tunnel for phase 2 IKE
                *          negotiations.</p>
                */
            Phase2DhGroupNumbers?: number[];
            /**
                * <p>The permitted encryption algorithms for the VPN tunnel for phase 2 IKE
                *          negotiations.</p>
                */
            Phase2EncryptionAlgorithms?: string[];
            /**
                * <p>The permitted integrity algorithms for the VPN tunnel for phase 2 IKE
                *          negotiations.</p>
                */
            Phase2IntegrityAlgorithms?: string[];
            /**
                * <p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p>
                */
            Phase2LifetimeSeconds?: number;
            /**
                * <p>The preshared key to establish initial authentication between the virtual private gateway
                *          and the customer gateway.</p>
                */
            PreSharedKey?: string;
            /**
                * <p>The percentage of the rekey window, which is determined by
                *          <code>RekeyMarginTimeSeconds</code> during which the rekey time is randomly selected.</p>
                */
            RekeyFuzzPercentage?: number;
            /**
                * <p>The margin time, in seconds, before the phase 2 lifetime expires, during which the Amazon Web Services
                *          side of the VPN connection performs an IKE rekey.</p>
                */
            RekeyMarginTimeSeconds?: number;
            /**
                * <p>The number of packets in an IKE replay window.</p>
                */
            ReplayWindowSize?: number;
            /**
                * <p>The range of inside IPv4 addresses for the tunnel.</p>
                */
            TunnelInsideCidr?: string;
    }
    export namespace AwsEc2VpnConnectionOptionsTunnelOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpnConnectionOptionsTunnelOptionsDetails) => any;
    }
    /**
        * <p>VPN connection options.</p>
        */
    export interface AwsEc2VpnConnectionOptionsDetails {
            /**
                * <p>Whether the VPN connection uses static routes only.</p>
                */
            StaticRoutesOnly?: boolean;
            /**
                * <p>The VPN tunnel options.</p>
                */
            TunnelOptions?: AwsEc2VpnConnectionOptionsTunnelOptionsDetails[];
    }
    export namespace AwsEc2VpnConnectionOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpnConnectionOptionsDetails) => any;
    }
    /**
        * <p>A static routes associated with
        *          the VPN connection.</p>
        */
    export interface AwsEc2VpnConnectionRoutesDetails {
            /**
                * <p>The CIDR block associated with the local subnet of the customer data center.</p>
                */
            DestinationCidrBlock?: string;
            /**
                * <p>The current state of the static route.</p>
                */
            State?: string;
    }
    export namespace AwsEc2VpnConnectionRoutesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpnConnectionRoutesDetails) => any;
    }
    /**
        * <p>Information about the VPN tunnel.</p>
        */
    export interface AwsEc2VpnConnectionVgwTelemetryDetails {
            /**
                * <p>The number of accepted routes.</p>
                */
            AcceptedRouteCount?: number;
            /**
                * <p>The ARN of the VPN tunnel endpoint certificate.</p>
                */
            CertificateArn?: string;
            /**
                * <p>The date and time of the last change in status.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastStatusChange?: string;
            /**
                * <p>The Internet-routable IP address of the virtual private gateway's outside
                *          interface.</p>
                */
            OutsideIpAddress?: string;
            /**
                * <p>The status of the VPN tunnel.</p>
                */
            Status?: string;
            /**
                * <p>If an error occurs, a description of the error.</p>
                */
            StatusMessage?: string;
    }
    export namespace AwsEc2VpnConnectionVgwTelemetryDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpnConnectionVgwTelemetryDetails) => any;
    }
    /**
        * <p>Details about an Amazon EC2 VPN
        *          connection.</p>
        */
    export interface AwsEc2VpnConnectionDetails {
            /**
                * <p>The identifier of the VPN connection.</p>
                */
            VpnConnectionId?: string;
            /**
                * <p>The current state of the VPN connection.</p>
                */
            State?: string;
            /**
                * <p>The identifier of the customer gateway that is at your end of the VPN connection.</p>
                */
            CustomerGatewayId?: string;
            /**
                * <p>The configuration information for the VPN connection's customer gateway, in the native XML
                *          format.</p>
                */
            CustomerGatewayConfiguration?: string;
            /**
                * <p>The type of VPN connection.</p>
                */
            Type?: string;
            /**
                * <p>The identifier of the virtual private gateway that is at the Amazon Web Services side of the VPN
                *          connection.</p>
                */
            VpnGatewayId?: string;
            /**
                * <p>The category of the VPN connection. <code>VPN</code> indicates an Amazon Web Services VPN connection. <code>VPN-Classic</code>
                *          indicates an Amazon Web Services Classic VPN connection.</p>
                */
            Category?: string;
            /**
                * <p>Information about the VPN tunnel.</p>
                */
            VgwTelemetry?: AwsEc2VpnConnectionVgwTelemetryDetails[];
            /**
                * <p>The VPN connection options.</p>
                */
            Options?: AwsEc2VpnConnectionOptionsDetails;
            /**
                * <p>The static routes that are associated with the VPN connection.</p>
                */
            Routes?: AwsEc2VpnConnectionRoutesDetails[];
            /**
                * <p>The identifier of the transit gateway that is associated with the VPN connection.</p>
                */
            TransitGatewayId?: string;
    }
    export namespace AwsEc2VpnConnectionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEc2VpnConnectionDetails) => any;
    }
    /**
        * <p>Information about an Amazon ECR image.</p>
        */
    export interface AwsEcrContainerImageDetails {
            /**
                * <p>The Amazon Web Services account identifier that is associated with the registry that the image belongs
                *          to.</p>
                */
            RegistryId?: string;
            /**
                * <p>The name of the repository that the image belongs to.</p>
                */
            RepositoryName?: string;
            /**
                * <p>The architecture of the image.</p>
                */
            Architecture?: string;
            /**
                * <p>The sha256 digest of the image manifest.</p>
                */
            ImageDigest?: string;
            /**
                * <p>The list of tags that are associated with the image.</p>
                */
            ImageTags?: string[];
            /**
                * <p>The date and time when the image was pushed to the repository.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            ImagePublishedAt?: string;
    }
    export namespace AwsEcrContainerImageDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcrContainerImageDetails) => any;
    }
    /**
        * <p>The image scanning configuration for a repository.</p>
        */
    export interface AwsEcrRepositoryImageScanningConfigurationDetails {
            /**
                * <p>Whether to scan images after they are pushed to a repository.</p>
                */
            ScanOnPush?: boolean;
    }
    export namespace AwsEcrRepositoryImageScanningConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcrRepositoryImageScanningConfigurationDetails) => any;
    }
    /**
        * <p>Information about the lifecycle policy for the repository.</p>
        */
    export interface AwsEcrRepositoryLifecyclePolicyDetails {
            /**
                * <p>The text of the lifecycle policy.</p>
                */
            LifecyclePolicyText?: string;
            /**
                * <p>The Amazon Web Services account identifier that is associated with the registry that contains the repository.</p>
                */
            RegistryId?: string;
    }
    export namespace AwsEcrRepositoryLifecyclePolicyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcrRepositoryLifecyclePolicyDetails) => any;
    }
    /**
        * <p>Provides information about an Amazon Elastic Container Registry repository.</p>
        */
    export interface AwsEcrRepositoryDetails {
            /**
                * <p>The ARN of the repository.</p>
                */
            Arn?: string;
            /**
                * <p>The image scanning configuration for a repository.</p>
                */
            ImageScanningConfiguration?: AwsEcrRepositoryImageScanningConfigurationDetails;
            /**
                * <p>The tag mutability setting for the repository.</p>
                */
            ImageTagMutability?: string;
            /**
                * <p>Information about the lifecycle policy for the repository.</p>
                */
            LifecyclePolicy?: AwsEcrRepositoryLifecyclePolicyDetails;
            /**
                * <p>The name of the repository.</p>
                */
            RepositoryName?: string;
            /**
                * <p>The text of the repository policy.</p>
                */
            RepositoryPolicyText?: string;
    }
    export namespace AwsEcrRepositoryDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcrRepositoryDetails) => any;
    }
    /**
        * <p>Indicates whether to enable CloudWatch Container Insights for the ECS cluster.</p>
        */
    export interface AwsEcsClusterClusterSettingsDetails {
            /**
                * <p>The name of the setting.</p>
                */
            Name?: string;
            /**
                * <p>The value of the setting.</p>
                */
            Value?: string;
    }
    export namespace AwsEcsClusterClusterSettingsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsClusterClusterSettingsDetails) => any;
    }
    /**
        * <p>The log configuration for the results of the run command actions.</p>
        */
    export interface AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails {
            /**
                * <p>Whether to enable encryption on the CloudWatch logs.</p>
                */
            CloudWatchEncryptionEnabled?: boolean;
            /**
                * <p>The name of the CloudWatch log group to send the logs to.</p>
                */
            CloudWatchLogGroupName?: string;
            /**
                * <p>The name of the S3 bucket to send logs to.</p>
                */
            S3BucketName?: string;
            /**
                * <p>Whether to encrypt the logs that are sent to the S3 bucket.</p>
                */
            S3EncryptionEnabled?: boolean;
            /**
                * <p>Identifies the folder in the S3 bucket to send the logs to.</p>
                */
            S3KeyPrefix?: string;
    }
    export namespace AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails) => any;
    }
    /**
        * <p>Contains the run command configuration for the cluster.</p>
        */
    export interface AwsEcsClusterConfigurationExecuteCommandConfigurationDetails {
            /**
                * <p>The identifier of the KMS key that is used to encrypt the data between the local client and the container.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The log configuration for the results of the run command actions. Required if <code>Logging</code> is <code>NONE</code>.</p>
                */
            LogConfiguration?: AwsEcsClusterConfigurationExecuteCommandConfigurationLogConfigurationDetails;
            /**
                * <p>The log setting to use for redirecting logs for run command results.</p>
                */
            Logging?: string;
    }
    export namespace AwsEcsClusterConfigurationExecuteCommandConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsClusterConfigurationExecuteCommandConfigurationDetails) => any;
    }
    /**
        * <p>The run command configuration for the cluster.</p>
        */
    export interface AwsEcsClusterConfigurationDetails {
            /**
                * <p>Contains the run command configuration for the cluster.</p>
                */
            ExecuteCommandConfiguration?: AwsEcsClusterConfigurationExecuteCommandConfigurationDetails;
    }
    export namespace AwsEcsClusterConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsClusterConfigurationDetails) => any;
    }
    /**
        * <p>The default capacity provider strategy for the cluster. The default capacity provider strategy is used when services or tasks are run without a specified launch type or capacity provider strategy.</p>
        */
    export interface AwsEcsClusterDefaultCapacityProviderStrategyDetails {
            /**
                * <p>The minimum number of tasks to run on the specified capacity provider.</p>
                */
            Base?: number;
            /**
                * <p>The name of the capacity provider.</p>
                */
            CapacityProvider?: string;
            /**
                * <p>The relative percentage of the total number of tasks launched that should use the capacity provider.</p>
                */
            Weight?: number;
    }
    export namespace AwsEcsClusterDefaultCapacityProviderStrategyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsClusterDefaultCapacityProviderStrategyDetails) => any;
    }
    /**
        * <p>Provides details about an Amazon ECS cluster.</p>
        */
    export interface AwsEcsClusterDetails {
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the cluster.
                *       </p>
                */
            ClusterArn?: string;
            /**
                * <p>The number of services that are running on the cluster in an <code>ACTIVE</code> state. You can view these services with the Amazon ECS <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ListServices.html">
                *                <code>ListServices</code>
                *             </a> API operation.
                *       </p>
                */
            ActiveServicesCount?: number;
            /**
                * <p>The short name of one or more capacity providers to associate with the cluster.</p>
                */
            CapacityProviders?: string[];
            /**
                * <p>The setting to use to create the cluster. Specifically used to configure whether to enable CloudWatch Container Insights for the cluster.</p>
                */
            ClusterSettings?: AwsEcsClusterClusterSettingsDetails[];
            /**
                * <p>The run command configuration for the cluster.</p>
                */
            Configuration?: AwsEcsClusterConfigurationDetails;
            /**
                * <p>The default capacity provider strategy for the cluster. The default capacity provider strategy is used when services or tasks are run without a specified launch type or capacity provider strategy.</p>
                */
            DefaultCapacityProviderStrategy?: AwsEcsClusterDefaultCapacityProviderStrategyDetails[];
            /**
                * <p>A name that you use to identify your cluster.
                *       </p>
                */
            ClusterName?: string;
            /**
                * <p>The number of container instances registered into the cluster. This includes container instances in both <code>ACTIVE</code> and <code>DRAINING</code> status.
                *       </p>
                */
            RegisteredContainerInstancesCount?: number;
            /**
                * <p>The number of tasks in the cluster that are in the <code>RUNNING</code> state.
                *       </p>
                */
            RunningTasksCount?: number;
            /**
                * <p>The status of the cluster.
                *       </p>
                */
            Status?: string;
    }
    export namespace AwsEcsClusterDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsClusterDetails) => any;
    }
    /**
        * <p>Details for a volume mount point that's used in a container definition.
        *       </p>
        */
    export interface AwsMountPoint {
            /**
                * <p>The name of the volume to mount. Must be a volume name referenced in the <code>name</code> parameter
                * of task definition <code>volume</code>.
                *       </p>
                */
            SourceVolume?: string;
            /**
                * <p>The path on the container to mount the host volume at.
                *       </p>
                */
            ContainerPath?: string;
    }
    export namespace AwsMountPoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsMountPoint) => any;
    }
    /**
        * <p>Provides information about an Amazon ECS container.
        *       </p>
        */
    export interface AwsEcsContainerDetails {
            /**
                * <p>The name of the container.
                *       </p>
                */
            Name?: string;
            /**
                * <p>The image used for the container.
                *       </p>
                */
            Image?: string;
            /**
                * <p>The mount points for data volumes in your container.
                *       </p>
                */
            MountPoints?: AwsMountPoint[];
            /**
                * <p>When this parameter is true, the container is given elevated privileges on the host container instance
                * (similar to the root user).
                *       </p>
                */
            Privileged?: boolean;
    }
    export namespace AwsEcsContainerDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsContainerDetails) => any;
    }
    /**
        * <p>Strategy item for the capacity provider strategy that the service uses.</p>
        */
    export interface AwsEcsServiceCapacityProviderStrategyDetails {
            /**
                * <p>The minimum number of tasks to run on the capacity provider. Only one strategy item can specify a value for <code>Base</code>.</p>
                *          <p>The value must be between 0 and 100000.</p>
                */
            Base?: number;
            /**
                * <p>The short name of the capacity provider.</p>
                */
            CapacityProvider?: string;
            /**
                * <p>The relative percentage of the total number of tasks that should use the capacity provider.</p>
                *          <p>If no weight is specified, the default value is 0. At least one capacity provider must have a weight greater than 0.</p>
                *          <p>The value can be between 0 and 1000.</p>
                */
            Weight?: number;
    }
    export namespace AwsEcsServiceCapacityProviderStrategyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceCapacityProviderStrategyDetails) => any;
    }
    /**
        * <p>Determines whether a service deployment fails if a service cannot reach a steady state.</p>
        */
    export interface AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails {
            /**
                * <p>Whether to enable the deployment circuit breaker logic for the service.</p>
                */
            Enable?: boolean;
            /**
                * <p>Whether to roll back the service if a service deployment fails. If rollback is enabled, when a service deployment fails, the service is rolled back to the last deployment that completed successfully.</p>
                */
            Rollback?: boolean;
    }
    export namespace AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails) => any;
    }
    /**
        * <p>Optional deployment parameters for the service.</p>
        */
    export interface AwsEcsServiceDeploymentConfigurationDetails {
            /**
                * <p>Determines whether a service deployment fails if a service cannot reach a steady state.</p>
                */
            DeploymentCircuitBreaker?: AwsEcsServiceDeploymentConfigurationDeploymentCircuitBreakerDetails;
            /**
                * <p>For a service that uses the rolling update (<code>ECS</code>) deployment type, the maximum number of tasks in a service that are allowed in the <code>RUNNING</code> or <code>PENDING</code> state during a deployment, and for tasks that use the EC2 launch type, when any container instances are in the <code>DRAINING</code> state. Provided as a percentage of the desired number of tasks. The default value is 200%.</p>
                *          <p>For a service that uses the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code> deployment types, and tasks that use the EC2 launch type, the maximum number of tasks in the service that remain in the <code>RUNNING</code> state while the container instances are in the <code>DRAINING</code> state.</p>
                *          <p>For the Fargate launch type, the maximum percent value is not used.</p>
                */
            MaximumPercent?: number;
            /**
                * <p>For a service that uses the rolling update (<code>ECS</code>) deployment type, the minimum number of tasks in a service that must remain in the <code>RUNNING</code> state during a deployment, and while any container instances are in the <code>DRAINING</code> state if the service contains tasks using the EC2 launch type. Expressed as a percentage of the desired number of tasks. The default value is 100%.</p>
                *          <p>For a service that uses the blue/green (<code>CODE_DEPLOY</code>) or <code>EXTERNAL</code> deployment types and tasks that use the EC2 launch type, the minimum number of the tasks in the service that remain in the <code>RUNNING</code> state while the container instances are in the <code>DRAINING</code> state.</p>
                *          <p>For the Fargate launch type, the minimum healthy percent value is not used.</p>
                */
            MinimumHealthyPercent?: number;
    }
    export namespace AwsEcsServiceDeploymentConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceDeploymentConfigurationDetails) => any;
    }
    /**
        * <p>Information about the deployment controller type that the service uses.</p>
        */
    export interface AwsEcsServiceDeploymentControllerDetails {
            /**
                * <p>The rolling update (<code>ECS</code>) deployment type replaces the current running version of the container with the latest version.</p>
                *          <p>The blue/green (<code>CODE_DEPLOY</code>) deployment type uses the blue/green deployment model that is powered by CodeDeploy. This deployment model a new deployment of a service can be verified before production traffic is sent to it.</p>
                *          <p>The external (<code>EXTERNAL</code>) deployment type allows the use of any third-party deployment controller for full control over the deployment process for an Amazon ECS service.</p>
                *          <p>Valid values: <code>ECS</code> | <code>CODE_DEPLOY</code> | <code>EXTERNAL</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace AwsEcsServiceDeploymentControllerDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceDeploymentControllerDetails) => any;
    }
    /**
        * <p>Information about a load balancer that the service uses.</p>
        */
    export interface AwsEcsServiceLoadBalancersDetails {
            /**
                * <p>The name of the container to associate with the load balancer.</p>
                */
            ContainerName?: string;
            /**
                * <p>The port on the container to associate with the load balancer. This port must correspond to a <code>containerPort</code> in the task definition the tasks in the service are using. For tasks that use the EC2 launch type, the container instance they are launched on must allow ingress traffic on the <code>hostPort</code> of the port mapping.</p>
                */
            ContainerPort?: number;
            /**
                * <p>The name of the load balancer to associate with the Amazon ECS service or task set.</p>
                *          <p>Only specified when using a Classic Load Balancer. For an Application Load Balancer or a Network Load Balancer, the load balancer name is omitted.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>The ARN of the Elastic Load Balancing target group or groups associated with a service or task set.</p>
                *          <p>Only specified when using an Application Load Balancer or a Network Load Balancer. For a Classic Load Balancer, the target group ARN is omitted.</p>
                */
            TargetGroupArn?: string;
    }
    export namespace AwsEcsServiceLoadBalancersDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceLoadBalancersDetails) => any;
    }
    /**
        * <p>For tasks that use the <code>awsvpc</code> networking mode, the VPC subnet and security group configuration.</p>
        */
    export interface AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails {
            /**
                * <p>Whether the task's elastic network interface receives a public IP address. The default value is <code>DISABLED</code>.</p>
                *          <p>Valid values: <code>ENABLED</code> | <code>DISABLED</code>
                *          </p>
                */
            AssignPublicIp?: string;
            /**
                * <p>The IDs of the security groups associated with the task or service.</p>
                *          <p>You can provide up to five security groups.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The IDs of the subnets associated with the task or service.</p>
                *          <p>You can provide up to 16 subnets.</p>
                */
            Subnets?: string[];
    }
    export namespace AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails) => any;
    }
    /**
        * <p>For tasks that use the <code>awsvpc</code> networking mode, the VPC subnet and security group configuration.</p>
        */
    export interface AwsEcsServiceNetworkConfigurationDetails {
            /**
                * <p>The VPC subnet and security group configuration.</p>
                */
            AwsVpcConfiguration?: AwsEcsServiceNetworkConfigurationAwsVpcConfigurationDetails;
    }
    export namespace AwsEcsServiceNetworkConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceNetworkConfigurationDetails) => any;
    }
    /**
        * <p>A placement constraint for the tasks in the service.</p>
        */
    export interface AwsEcsServicePlacementConstraintsDetails {
            /**
                * <p>A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is <code>distinctInstance</code>.</p>
                */
            Expression?: string;
            /**
                * <p>The type of constraint. Use <code>distinctInstance</code> to run each task in a particular group on a different container instance. Use <code>memberOf</code> to restrict the selection to a group of valid candidates.</p>
                *          <p>Valid values: <code>distinctInstance</code> | <code>memberOf</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace AwsEcsServicePlacementConstraintsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServicePlacementConstraintsDetails) => any;
    }
    /**
        * <p>A placement strategy that determines how to place the tasks for the service.</p>
        */
    export interface AwsEcsServicePlacementStrategiesDetails {
            /**
                * <p>The field to apply the placement strategy against.</p>
                *          <p>For the <code>spread</code> placement strategy, valid values are <code>instanceId</code> (or <code>host</code>, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as <code>attribute:ecs.availability-zone</code>.</p>
                *          <p>For the <code>binpack</code> placement strategy, valid values are <code>cpu</code> and <code>memory</code>.</p>
                *          <p>For the <code>random</code> placement strategy, this attribute is not used.</p>
                */
            Field?: string;
            /**
                * <p>The type of placement strategy.</p>
                *          <p>The <code>random</code> placement strategy randomly places tasks on available candidates.</p>
                *          <p>The <code>spread</code> placement strategy spreads placement across available candidates evenly based on the value of <code>Field</code>.</p>
                *          <p>The <code>binpack</code> strategy places tasks on available candidates that have the least available amount of the resource that is specified in <code>Field</code>.</p>
                *          <p>Valid values: <code>random</code> | <code>spread</code> | <code>binpack</code>
                *          </p>
                */
            Type?: string;
    }
    export namespace AwsEcsServicePlacementStrategiesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServicePlacementStrategiesDetails) => any;
    }
    /**
        * <p>Information about a service discovery registry to assign to the service.</p>
        */
    export interface AwsEcsServiceServiceRegistriesDetails {
            /**
                * <p>The container name value to use for the service discovery service.</p>
                *          <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
                *          <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
                */
            ContainerName?: string;
            /**
                * <p>The port value to use for the service discovery service.</p>
                *          <p>If the task definition uses the <code>bridge</code> or <code>host</code> network mode, you must specify <code>ContainerName</code> and <code>ContainerPort</code>.</p>
                *          <p>If the task definition uses the <code>awsvpc</code> network mode and a type SRV DNS record, you must specify either <code>ContainerName</code> and <code>ContainerPort</code>, or <code>Port</code> , but not both.</p>
                */
            ContainerPort?: number;
            /**
                * <p>The port value to use for a service discovery service that specifies an SRV record. This field can be used if both the <code>awsvpc</code>awsvpc network mode and SRV records are used.</p>
                */
            Port?: number;
            /**
                * <p>The ARN of the service registry.</p>
                */
            RegistryArn?: string;
    }
    export namespace AwsEcsServiceServiceRegistriesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceServiceRegistriesDetails) => any;
    }
    /**
        * <p>Provides details about a service within an ECS cluster.</p>
        */
    export interface AwsEcsServiceDetails {
            /**
                * <p>The capacity provider strategy that the service uses.</p>
                */
            CapacityProviderStrategy?: AwsEcsServiceCapacityProviderStrategyDetails[];
            /**
                * <p>The ARN of the cluster that hosts the service.</p>
                */
            Cluster?: string;
            /**
                * <p>Deployment parameters for the service. Includes the number of tasks that run and the order in which to start and stop tasks.</p>
                */
            DeploymentConfiguration?: AwsEcsServiceDeploymentConfigurationDetails;
            /**
                * <p>Contains the deployment controller type that the service uses.</p>
                */
            DeploymentController?: AwsEcsServiceDeploymentControllerDetails;
            /**
                * <p>The number of instantiations of the task definition to run on the service.</p>
                */
            DesiredCount?: number;
            /**
                * <p>Whether to enable Amazon ECS managed tags for the tasks in the service.</p>
                */
            EnableEcsManagedTags?: boolean;
            /**
                * <p>Whether the execute command functionality is enabled for the service.</p>
                */
            EnableExecuteCommand?: boolean;
            /**
                * <p>After a task starts, the amount of time in seconds that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks.</p>
                */
            HealthCheckGracePeriodSeconds?: number;
            /**
                * <p>The launch type that the service uses.</p>
                *          <p>Valid values: <code>EC2</code> | <code>FARGATE</code> | <code>EXTERNAL</code>
                *          </p>
                */
            LaunchType?: string;
            /**
                * <p>Information about the load balancers that the service uses.</p>
                */
            LoadBalancers?: AwsEcsServiceLoadBalancersDetails[];
            /**
                * <p>The name of the service.</p>
                */
            Name?: string;
            /**
                * <p>For tasks that use the <code>awsvpc</code> networking mode, the VPC subnet and security group configuration.</p>
                */
            NetworkConfiguration?: AwsEcsServiceNetworkConfigurationDetails;
            /**
                * <p>The placement constraints for the tasks in the service.</p>
                */
            PlacementConstraints?: AwsEcsServicePlacementConstraintsDetails[];
            /**
                * <p>Information about how tasks for the service are placed.</p>
                */
            PlacementStrategies?: AwsEcsServicePlacementStrategiesDetails[];
            /**
                * <p>The platform version on which to run the service. Only specified for tasks that are hosted on Fargate. If a platform version is not specified, the <code>LATEST</code> platform version is used by default.</p>
                */
            PlatformVersion?: string;
            /**
                * <p>Indicates whether to propagate the tags from the task definition to the task or from the service to the task. If no value is provided, then tags are not propagated.</p>
                *          <p>Valid values: <code>TASK_DEFINITION</code> | <code>SERVICE</code>
                *          </p>
                */
            PropagateTags?: string;
            /**
                * <p>The ARN of the IAM role that is associated with the service. The role allows the Amazon ECS container agent to register container instances with an Elastic Load Balancing load balancer.</p>
                */
            Role?: string;
            /**
                * <p>The scheduling strategy to use for the service.</p>
                *          <p>The <code>REPLICA</code> scheduling strategy places and maintains the desired number of tasks across the cluster. By default, the service scheduler spreads tasks across Availability Zones. Task placement strategies and constraints are used to customize task placement decisions.</p>
                *          <p>The <code>DAEMON</code> scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that are specified in the cluster. The service scheduler also evaluates the task placement constraints for running tasks and stops tasks that do not meet the placement constraints.</p>
                *          <p>Valid values: <code>REPLICA</code> | <code>DAEMON</code>
                *          </p>
                */
            SchedulingStrategy?: string;
            /**
                * <p>The ARN of the service.</p>
                */
            ServiceArn?: string;
            /**
                * <p>The name of the service.</p>
                *          <p>The name can contain up to 255 characters. It can use letters, numbers, underscores, and hyphens.</p>
                */
            ServiceName?: string;
            /**
                * <p>Information about the service discovery registries to assign to the service.</p>
                */
            ServiceRegistries?: AwsEcsServiceServiceRegistriesDetails[];
            /**
                * <p>The task definition to use for tasks in the service.</p>
                */
            TaskDefinition?: string;
    }
    export namespace AwsEcsServiceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsServiceDetails) => any;
    }
    /**
        * <p>A dependency that is defined for container startup and shutdown.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails {
            /**
                * <p>The dependency condition of the dependent container. Indicates the required status of the dependent container before the current container can start.</p>
                */
            Condition?: string;
            /**
                * <p>The name of the dependent container.</p>
                */
            ContainerName?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails) => any;
    }
    /**
        * <p>An environment variable to pass to the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails {
            /**
                * <p>The name of the environment variable.</p>
                */
            Name?: string;
            /**
                * <p>The value of the environment variable.</p>
                */
            Value?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails) => any;
    }
    /**
        * <p>A file that contain environment variables to pass to a container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails {
            /**
                * <p>The type of environment file.</p>
                */
            Type?: string;
            /**
                * <p>The ARN of the S3 object that contains the environment variable file.</p>
                */
            Value?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails) => any;
    }
    /**
        * <p>A hostname and IP address mapping to append to the <b>/etc/hosts</b> file on the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails {
            /**
                * <p>The hostname to use in the <b>/etc/hosts</b> entry.</p>
                */
            Hostname?: string;
            /**
                * <p>The IP address to use in the <b>/etc/hosts</b> entry.</p>
                */
            IpAddress?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails) => any;
    }
    /**
        * <p>The FireLens configuration for the container. The configuration specifies and configures a log router for container logs.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails {
            /**
                * <p>The options to use to configure the log router.</p>
                *          <p>The valid option keys are as follows:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>enable-ecs-log-metadata</code>. The value can be <code>true</code> or
                *                <code>false</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>config-file-type</code>. The value can be <code>s3</code> or
                *                <code>file</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>config-file-value</code>. The value is either an S3 ARN or a file path.</p>
                *             </li>
                *          </ul>
                */
            Options?: Record<string, string>;
            /**
                * <p>The log router to use. </p>
                */
            Type?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails) => any;
    }
    /**
        * <p>The container health check command and associated configuration parameters for the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails {
            /**
                * <p>The command that the container runs to determine whether it is healthy.</p>
                */
            Command?: string[];
            /**
                * <p>The time period in seconds between each health check execution. The default value is 30 seconds.</p>
                */
            Interval?: number;
            /**
                * <p>The number of times to retry a failed health check before the container is considered unhealthy. The default value is 3.</p>
                */
            Retries?: number;
            /**
                * <p>The optional grace period in seconds that allows containers time to bootstrap before failed health checks count towards the maximum number of retries.</p>
                */
            StartPeriod?: number;
            /**
                * <p>The time period in seconds to wait for a health check to succeed before it is considered a failure. The default value is 5.</p>
                */
            Timeout?: number;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails) => any;
    }
    /**
        * <p>The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails {
            /**
                * <p>The Linux capabilities for the container that are added to the default configuration provided by Docker.</p>
                */
            Add?: string[];
            /**
                * <p>The Linux capabilities for the container that are dropped from the default configuration provided by Docker.</p>
                */
            Drop?: string[];
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails) => any;
    }
    /**
        * <p>A host device to expose to the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails {
            /**
                * <p>The path inside the container at which to expose the host device.</p>
                */
            ContainerPath?: string;
            /**
                * <p>The path for the device on the host container instance.</p>
                */
            HostPath?: string;
            /**
                * <p>The explicit permissions to provide to the container for the device. By default, the container has permissions for read, write, and <code>mknod</code> for the device.</p>
                */
            Permissions?: string[];
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails) => any;
    }
    /**
        * <p>The container path, mount options, and size (in MiB) of a tmpfs mount.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails {
            /**
                * <p>The absolute file path where the tmpfs volume is to be mounted.</p>
                */
            ContainerPath?: string;
            /**
                * <p>The list of tmpfs volume mount options.</p>
                */
            MountOptions?: string[];
            /**
                * <p>The maximum size (in MiB) of the tmpfs volume.</p>
                */
            Size?: number;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails) => any;
    }
    /**
        * <p>>Linux-specific modifications that are applied to the container, such as Linux kernel capabilities.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails {
            /**
                * <p>The Linux capabilities for the container that are added to or dropped from the default configuration provided by Docker.</p>
                */
            Capabilities?: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersCapabilitiesDetails;
            /**
                * <p>The host devices to expose to the container.</p>
                */
            Devices?: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDevicesDetails[];
            /**
                * <p>Whether to run an <code>init</code> process inside the container that forwards signals and reaps processes. </p>
                */
            InitProcessEnabled?: boolean;
            /**
                * <p>The total amount of swap memory (in MiB) that a container can use.</p>
                */
            MaxSwap?: number;
            /**
                * <p>The value for the size (in MiB) of the <b>/dev/shm</b> volume.</p>
                */
            SharedMemorySize?: number;
            /**
                * <p>Configures the container's memory swappiness behavior. Determines how aggressively pages are swapped. The higher the value, the more aggressive the swappiness. The default is 60.</p>
                */
            Swappiness?: number;
            /**
                * <p>The container path, mount options, and size (in MiB) of the tmpfs mount.</p>
                */
            Tmpfs?: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersTmpfsDetails[];
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails) => any;
    }
    /**
        * <p>A secret to pass to the log configuration.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails {
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The secret to expose to the container.</p>
                *          <p>The value is either the full ARN of the Secrets Manager secret or the full ARN of the
                *          parameter in the Systems Manager Parameter Store.</p>
                */
            ValueFrom?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails) => any;
    }
    /**
        * <p>The log configuration specification for the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails {
            /**
                * <p>The log driver to use for the container.</p>
                */
            LogDriver?: string;
            /**
                * <p>The configuration options to send to the log driver. Requires version 1.19 of the Docker Remote API or greater on your container instance.</p>
                */
            Options?: Record<string, string>;
            /**
                * <p>The secrets to pass to the log configuration.</p>
                */
            SecretOptions?: AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationSecretOptionsDetails[];
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails) => any;
    }
    /**
        * <p>A mount point for the data volumes in the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails {
            /**
                * <p>The path on the container to mount the host volume at.</p>
                */
            ContainerPath?: string;
            /**
                * <p>Whether the container has read-only access to the volume.</p>
                */
            ReadOnly?: boolean;
            /**
                * <p>The name of the volume to mount. Must match the name of a volume listed in <code>VolumeDetails</code> for the task definition.</p>
                */
            SourceVolume?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails) => any;
    }
    /**
        * <p>A port mapping for the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails {
            /**
                * <p>The port number on the container that is bound to the user-specified or automatically assigned host port.</p>
                */
            ContainerPort?: number;
            /**
                * <p>The port number on the container instance to reserve for the container.</p>
                */
            HostPort?: number;
            /**
                * <p>The protocol used for the port mapping. The default is <code>tcp</code>.</p>
                */
            Protocol?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails) => any;
    }
    /**
        * <p>The private repository authentication credentials to use.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails {
            /**
                * <p>The ARN of the secret that contains the private repository credentials.</p>
                */
            CredentialsParameter?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails) => any;
    }
    /**
        * <p>A resource to assign to a container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails {
            /**
                * <p>The type of resource to assign to a container.</p>
                */
            Type?: string;
            /**
                * <p>The value for the specified resource type.</p>
                *          <p>For <code>GPU</code>, the value is the number of physical GPUs the Amazon ECS container agent
                *          reserves for the container.</p>
                *          <p>For <code>InferenceAccelerator</code>, the value should match the <code>DeviceName</code>
                *          attribute of an entry in <code>InferenceAccelerators</code>.</p>
                */
            Value?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails) => any;
    }
    /**
        * <p>A secret to pass to the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails {
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The secret to expose to the container. The value is either the full ARN of the Secrets Manager
                *          secret or the full ARN of the parameter in the Systems Manager Parameter Store.</p>
                */
            ValueFrom?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails) => any;
    }
    /**
        * <p>A namespaced kernel parameter to set in the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails {
            /**
                * <p>The namespaced kernel parameter for which to set a value.</p>
                */
            Namespace?: string;
            /**
                * <p>The value of the parameter.</p>
                */
            Value?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails) => any;
    }
    /**
        * <p>A ulimit to set in the container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails {
            /**
                * <p>The hard limit for the ulimit type.</p>
                */
            HardLimit?: number;
            /**
                * <p>The type of the ulimit.</p>
                */
            Name?: string;
            /**
                * <p>The soft limit for the ulimit type.</p>
                */
            SoftLimit?: number;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails) => any;
    }
    /**
        * <p>A data volume to mount from another container.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails {
            /**
                * <p>Whether the container has read-only access to the volume.</p>
                */
            ReadOnly?: boolean;
            /**
                * <p>The name of another container within the same task definition from which to mount volumes.</p>
                */
            SourceContainer?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails) => any;
    }
    /**
        * <p>A container definition that describes a container in the task.</p>
        */
    export interface AwsEcsTaskDefinitionContainerDefinitionsDetails {
            /**
                * <p>The command that is passed to the container.</p>
                */
            Command?: string[];
            /**
                * <p>The number of CPU units reserved for the container.</p>
                */
            Cpu?: number;
            /**
                * <p>The dependencies that are defined for container startup and shutdown.</p>
                */
            DependsOn?: AwsEcsTaskDefinitionContainerDefinitionsDependsOnDetails[];
            /**
                * <p>Whether to disable networking within the container.</p>
                */
            DisableNetworking?: boolean;
            /**
                * <p>A list of DNS search domains that are presented to the container.</p>
                */
            DnsSearchDomains?: string[];
            /**
                * <p>A list of DNS servers that are presented to the container.</p>
                */
            DnsServers?: string[];
            /**
                * <p>A key-value map of labels to add to the container.</p>
                */
            DockerLabels?: Record<string, string>;
            /**
                * <p>A list of strings to provide custom labels for SELinux and AppArmor multi-level security systems.</p>
                */
            DockerSecurityOptions?: string[];
            /**
                * <p>The entry point that is passed to the container.</p>
                */
            EntryPoint?: string[];
            /**
                * <p>The environment variables to pass to a container.</p>
                */
            Environment?: AwsEcsTaskDefinitionContainerDefinitionsEnvironmentDetails[];
            /**
                * <p>A list of files containing the environment variables to pass to a container.</p>
                */
            EnvironmentFiles?: AwsEcsTaskDefinitionContainerDefinitionsEnvironmentFilesDetails[];
            /**
                * <p>Whether the container is essential. All tasks must have at least one essential container.</p>
                */
            Essential?: boolean;
            /**
                * <p>A list of hostnames and IP address mappings to append to the <b>/etc/hosts</b> file on the container.</p>
                */
            ExtraHosts?: AwsEcsTaskDefinitionContainerDefinitionsExtraHostsDetails[];
            /**
                * <p>The FireLens configuration for the container. Specifies and configures a log router for container logs.</p>
                */
            FirelensConfiguration?: AwsEcsTaskDefinitionContainerDefinitionsFirelensConfigurationDetails;
            /**
                * <p>The container health check command and associated configuration parameters for the container.</p>
                */
            HealthCheck?: AwsEcsTaskDefinitionContainerDefinitionsHealthCheckDetails;
            /**
                * <p>The hostname to use for the container.</p>
                */
            Hostname?: string;
            /**
                * <p>The image used to start the container.</p>
                */
            Image?: string;
            /**
                * <p>If set to true, then containerized applications can be deployed that require <code>stdin</code> or a <code>tty</code> to be allocated.</p>
                */
            Interactive?: boolean;
            /**
                * <p>A list of links for the container in the form <code>
                *                <i>container_name</i>:<i>alias</i>
                *             </code>. Allows containers to communicate with each other without the need for port mappings.</p>
                */
            Links?: string[];
            /**
                * <p>Linux-specific modifications that are applied to the container, such as Linux kernel capabilities.</p>
                */
            LinuxParameters?: AwsEcsTaskDefinitionContainerDefinitionsLinuxParametersDetails;
            /**
                * <p>The log configuration specification for the container.</p>
                */
            LogConfiguration?: AwsEcsTaskDefinitionContainerDefinitionsLogConfigurationDetails;
            /**
                * <p>The amount (in MiB) of memory to present to the container. If the container attempts to exceed the memory specified here, the container is shut down. The total amount of memory reserved for all containers within a task must be lower than the task memory value, if one is specified.</p>
                */
            Memory?: number;
            /**
                * <p>The soft limit (in MiB) of memory to reserve for the container.</p>
                */
            MemoryReservation?: number;
            /**
                * <p>The mount points for the data volumes in the container.</p>
                */
            MountPoints?: AwsEcsTaskDefinitionContainerDefinitionsMountPointsDetails[];
            /**
                * <p>The name of the container.</p>
                */
            Name?: string;
            /**
                * <p>The list of port mappings for the container.</p>
                */
            PortMappings?: AwsEcsTaskDefinitionContainerDefinitionsPortMappingsDetails[];
            /**
                * <p>Whether the container is given elevated privileges on the host container instance. The elevated privileges are similar to the root user.</p>
                */
            Privileged?: boolean;
            /**
                * <p>Whether to allocate a TTY to the container.</p>
                */
            PseudoTerminal?: boolean;
            /**
                * <p>Whether the container is given read-only access to its root file system.</p>
                */
            ReadonlyRootFilesystem?: boolean;
            /**
                * <p>The private repository authentication credentials to use.</p>
                */
            RepositoryCredentials?: AwsEcsTaskDefinitionContainerDefinitionsRepositoryCredentialsDetails;
            /**
                * <p>The type and amount of a resource to assign to a container. The only supported resource is a GPU.</p>
                */
            ResourceRequirements?: AwsEcsTaskDefinitionContainerDefinitionsResourceRequirementsDetails[];
            /**
                * <p>The secrets to pass to the container.</p>
                */
            Secrets?: AwsEcsTaskDefinitionContainerDefinitionsSecretsDetails[];
            /**
                * <p>The number of seconds to wait before giving up on resolving dependencies for a container. </p>
                */
            StartTimeout?: number;
            /**
                * <p>The number of seconds to wait before the container is stopped if it doesn't shut down normally on its own.</p>
                */
            StopTimeout?: number;
            /**
                * <p>A list of namespaced kernel parameters to set in the container.</p>
                */
            SystemControls?: AwsEcsTaskDefinitionContainerDefinitionsSystemControlsDetails[];
            /**
                * <p>A list of ulimits to set in the container. </p>
                */
            Ulimits?: AwsEcsTaskDefinitionContainerDefinitionsUlimitsDetails[];
            /**
                * <p>The user to use inside the container.</p>
                *          <p>The value can use one of the following formats.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>
                *                      <i>user</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>
                *                      <i>user</i>
                *                   </code>:<code>
                *                      <i>group</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>
                *                      <i>uid</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>
                *                      <i>uid</i>
                *                   </code>:<code>
                *                      <i>gid</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>
                *                      <i>user</i>
                *                   </code>:<code>
                *                      <i>gid</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>
                *                      <i>uid</i>
                *                   </code>:<code>
                *                      <i>group</i>
                *                   </code>
                *                </p>
                *             </li>
                *          </ul>
                */
            User?: string;
            /**
                * <p>Data volumes to mount from another container.</p>
                */
            VolumesFrom?: AwsEcsTaskDefinitionContainerDefinitionsVolumesFromDetails[];
            /**
                * <p>The working directory in which to run commands inside the container.</p>
                */
            WorkingDirectory?: string;
    }
    export namespace AwsEcsTaskDefinitionContainerDefinitionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionContainerDefinitionsDetails) => any;
    }
    /**
        * <p>An Elastic Inference accelerator to use
        *          for the containers in the task.</p>
        */
    export interface AwsEcsTaskDefinitionInferenceAcceleratorsDetails {
            /**
                * <p>The Elastic Inference accelerator device name.</p>
                */
            DeviceName?: string;
            /**
                * <p>The Elastic Inference accelerator type to use.</p>
                */
            DeviceType?: string;
    }
    export namespace AwsEcsTaskDefinitionInferenceAcceleratorsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionInferenceAcceleratorsDetails) => any;
    }
    /**
        * <p>A placement constraint object to use for tasks.</p>
        */
    export interface AwsEcsTaskDefinitionPlacementConstraintsDetails {
            /**
                * <p>A cluster query language expression to apply to the constraint.</p>
                */
            Expression?: string;
            /**
                * <p>The type of constraint.</p>
                */
            Type?: string;
    }
    export namespace AwsEcsTaskDefinitionPlacementConstraintsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionPlacementConstraintsDetails) => any;
    }
    /**
        * <p>A network configuration parameter to provide to the Container Network Interface (CNI) plugin.</p>
        */
    export interface AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails {
            /**
                * <p>The name of the property.</p>
                */
            Name?: string;
            /**
                * <p>The value of the property.</p>
                */
            Value?: string;
    }
    export namespace AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails) => any;
    }
    /**
        * <p>The configuration details for the App Mesh
        *          proxy.</p>
        */
    export interface AwsEcsTaskDefinitionProxyConfigurationDetails {
            /**
                * <p>The name of the container that will serve as the App Mesh proxy.</p>
                */
            ContainerName?: string;
            /**
                * <p>The set of network configuration parameters to provide to the Container Network Interface (CNI) plugin, specified as key-value pairs.</p>
                */
            ProxyConfigurationProperties?: AwsEcsTaskDefinitionProxyConfigurationProxyConfigurationPropertiesDetails[];
            /**
                * <p>The proxy type.</p>
                */
            Type?: string;
    }
    export namespace AwsEcsTaskDefinitionProxyConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionProxyConfigurationDetails) => any;
    }
    /**
        * <p>Information about a Docker volume.</p>
        */
    export interface AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails {
            /**
                * <p>Whether to create the Docker volume automatically if it does not already exist.</p>
                */
            Autoprovision?: boolean;
            /**
                * <p>The Docker volume driver to use.</p>
                */
            Driver?: string;
            /**
                * <p>A map of Docker driver-specific options that are passed through.</p>
                */
            DriverOpts?: Record<string, string>;
            /**
                * <p>Custom metadata to add to the Docker volume.</p>
                */
            Labels?: Record<string, string>;
            /**
                * <p>The scope for the Docker volume that determines its lifecycle. Docker volumes that are scoped to a task are provisioned automatically when the task starts and destroyed when the task stops. Docker volumes that are shared persist after the task stops.</p>
                */
            Scope?: string;
    }
    export namespace AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails) => any;
    }
    /**
        * <p></p>
        */
    export interface AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails {
            /**
                * <p>The Amazon EFS access point identifier to use.</p>
                */
            AccessPointId?: string;
            /**
                * <p>Whether to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system.</p>
                */
            Iam?: string;
    }
    export namespace AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails) => any;
    }
    /**
        * <p>Information about the Amazon Elastic File System file system that is used for task storage.</p>
        */
    export interface AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails {
            /**
                * <p>The authorization configuration details for the Amazon EFS file system.</p>
                */
            AuthorizationConfig?: AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationAuthorizationConfigDetails;
            /**
                * <p>The Amazon EFS file system identifier to use.</p>
                */
            FilesystemId?: string;
            /**
                * <p>The directory within the Amazon EFS file system to mount as the root directory inside the host.</p>
                */
            RootDirectory?: string;
            /**
                * <p>Whether to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. </p>
                */
            TransitEncryption?: string;
            /**
                * <p>The port to use when sending encrypted data between the Amazon ECS host and the Amazon EFS server.</p>
                */
            TransitEncryptionPort?: number;
    }
    export namespace AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails) => any;
    }
    /**
        * <p>Information about a bind mount host volume.</p>
        */
    export interface AwsEcsTaskDefinitionVolumesHostDetails {
            /**
                * <p>The path on the host container instance that is presented to the container.</p>
                */
            SourcePath?: string;
    }
    export namespace AwsEcsTaskDefinitionVolumesHostDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionVolumesHostDetails) => any;
    }
    /**
        * <p>A data volume to mount from another container.</p>
        */
    export interface AwsEcsTaskDefinitionVolumesDetails {
            /**
                * <p>Information about a Docker volume.</p>
                */
            DockerVolumeConfiguration?: AwsEcsTaskDefinitionVolumesDockerVolumeConfigurationDetails;
            /**
                * <p>Information about the Amazon Elastic File System file system that is used for task storage.</p>
                */
            EfsVolumeConfiguration?: AwsEcsTaskDefinitionVolumesEfsVolumeConfigurationDetails;
            /**
                * <p>Information about a bind mount host volume.</p>
                */
            Host?: AwsEcsTaskDefinitionVolumesHostDetails;
            /**
                * <p>The name of the data volume.</p>
                */
            Name?: string;
    }
    export namespace AwsEcsTaskDefinitionVolumesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionVolumesDetails) => any;
    }
    /**
        * <p>Details about a task definition. A task definition describes the container and volume definitions
        *          of an Amazon Elastic Container Service task.</p>
        */
    export interface AwsEcsTaskDefinitionDetails {
            /**
                * <p>The container definitions that describe the containers that make up the task.</p>
                */
            ContainerDefinitions?: AwsEcsTaskDefinitionContainerDefinitionsDetails[];
            /**
                * <p>The number of CPU units used by the task.</p>
                */
            Cpu?: string;
            /**
                * <p>The ARN of the task execution role that grants the container agent permission to make API calls on behalf of the container user.</p>
                */
            ExecutionRoleArn?: string;
            /**
                * <p>The name of a family that this task definition is registered to.</p>
                */
            Family?: string;
            /**
                * <p>The Elastic Inference accelerators to use for the containers in the task.</p>
                */
            InferenceAccelerators?: AwsEcsTaskDefinitionInferenceAcceleratorsDetails[];
            /**
                * <p>The IPC resource namespace to use for the containers in the task.</p>
                */
            IpcMode?: string;
            /**
                * <p>The amount (in MiB) of memory used by the task.</p>
                */
            Memory?: string;
            /**
                * <p>The Docker networking mode to use for the containers in the task.</p>
                */
            NetworkMode?: string;
            /**
                * <p>The process namespace to use for the containers in the task.</p>
                */
            PidMode?: string;
            /**
                * <p>The placement constraint objects to use for tasks.</p>
                */
            PlacementConstraints?: AwsEcsTaskDefinitionPlacementConstraintsDetails[];
            /**
                * <p>The configuration details for the App Mesh proxy.</p>
                */
            ProxyConfiguration?: AwsEcsTaskDefinitionProxyConfigurationDetails;
            /**
                * <p>The task launch types that the task definition was validated against.</p>
                */
            RequiresCompatibilities?: string[];
            /**
                * <p>The short name or ARN of the IAM role that grants containers in the task permission to call Amazon Web Services API operations on your behalf.</p>
                */
            TaskRoleArn?: string;
            /**
                * <p>The data volume definitions for the task.</p>
                */
            Volumes?: AwsEcsTaskDefinitionVolumesDetails[];
    }
    export namespace AwsEcsTaskDefinitionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDefinitionDetails) => any;
    }
    /**
        * <p>Provides details on a container instance bind mount host volume.
        *       </p>
        */
    export interface AwsEcsTaskVolumeHostDetails {
            /**
                * <p>When the <code>host</code> parameter is used, specify a <code>sourcePath</code> to declare the path
                * on the host container instance that's presented to the container.
                *       </p>
                */
            SourcePath?: string;
    }
    export namespace AwsEcsTaskVolumeHostDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskVolumeHostDetails) => any;
    }
    /**
        * <p>Provides information about a data volume that's used in a task definition.
        *       </p>
        */
    export interface AwsEcsTaskVolumeDetails {
            /**
                * <p>The name of the volume. Up to 255 letters (uppercase and lowercase), numbers, underscores, and
                * hyphens are allowed. This name is referenced in the <code>sourceVolume</code> parameter of container definition <code>mountPoints</code>.
                *       </p>
                */
            Name?: string;
            /**
                * <p>This parameter is specified when you use bind mount host volumes. The contents of the <code>host</code> parameter
                * determine whether your bind mount host volume persists on the host container instance and where it's stored.
                *       </p>
                */
            Host?: AwsEcsTaskVolumeHostDetails;
    }
    export namespace AwsEcsTaskVolumeDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskVolumeDetails) => any;
    }
    /**
        * <p>Provides details about a task in a cluster.
        *       </p>
        */
    export interface AwsEcsTaskDetails {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster that hosts the task.
                *       </p>
                */
            ClusterArn?: string;
            /**
                * <p>The ARN of the task definition that creates the task.
                *       </p>
                */
            TaskDefinitionArn?: string;
            /**
                * <p>The version counter for the task.
                *       </p>
                */
            Version?: string;
            /**
                * <p>The Unix timestamp for the time when the task was created. More specifically, it's for the time when
                * the task entered the <code>PENDING</code> state.
                *       </p>
                */
            CreatedAt?: string;
            /**
                * <p>The Unix timestamp for the time when the task started. More specifically, it's for the time when the
                *          task transitioned from the <code>PENDING</code> state to the <code>RUNNING</code> state.
                *    </p>
                */
            StartedAt?: string;
            /**
                * <p>The tag specified when a task is started. If an Amazon ECS service started the task, the
                *          <code>startedBy</code> parameter contains the deployment ID of that service.
                *       </p>
                */
            StartedBy?: string;
            /**
                * <p>The name of the task group that's associated with the task.
                *       </p>
                */
            Group?: string;
            /**
                * <p>Details about the data volume that is used in a task definition.
                *       </p>
                */
            Volumes?: AwsEcsTaskVolumeDetails[];
            /**
                * <p>The containers that are associated with the task.
                *       </p>
                */
            Containers?: AwsEcsContainerDetails[];
    }
    export namespace AwsEcsTaskDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEcsTaskDetails) => any;
    }
    /**
        * <p>Provides details for all file system operations using this Amazon EFS access point.
        *       </p>
        */
    export interface AwsEfsAccessPointPosixUserDetails {
            /**
                * <p>The POSIX group ID used for all file system operations using this access point.
                *       </p>
                */
            Gid?: string;
            /**
                * <p>Secondary POSIX group IDs used for all file system operations using this access point.
                *       </p>
                */
            SecondaryGids?: string[];
            /**
                * <p>The POSIX user ID used for all file system operations using this access point.
                *       </p>
                */
            Uid?: string;
    }
    export namespace AwsEfsAccessPointPosixUserDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEfsAccessPointPosixUserDetails) => any;
    }
    /**
        * <p>Provides information about the settings that Amazon EFS uses to create the root directory
        * when a client connects to an access point.
        *       </p>
        */
    export interface AwsEfsAccessPointRootDirectoryCreationInfoDetails {
            /**
                * <p>Specifies the POSIX group ID to apply to the root directory.
                *       </p>
                */
            OwnerGid?: string;
            /**
                * <p>Specifies the POSIX user ID to apply to the root directory.
                *       </p>
                */
            OwnerUid?: string;
            /**
                * <p>Specifies the POSIX permissions to apply to the root directory, in the format of an octal number
                * representing the file's mode bits.
                *       </p>
                */
            Permissions?: string;
    }
    export namespace AwsEfsAccessPointRootDirectoryCreationInfoDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEfsAccessPointRootDirectoryCreationInfoDetails) => any;
    }
    /**
        * <p>Provides information about the directory on the Amazon EFS file system that the access point exposes
        * as the root directory to NFS clients using the access point.
        *       </p>
        */
    export interface AwsEfsAccessPointRootDirectoryDetails {
            /**
                * <p>Specifies the POSIX IDs and permissions to apply to the access point's root directory.
                *       </p>
                */
            CreationInfo?: AwsEfsAccessPointRootDirectoryCreationInfoDetails;
            /**
                * <p>Specifies the path on the Amazon EFS file system to expose as the root directory to NFS clients
                * using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified
                * path does not exist, you are required to provide <code>CreationInfo</code>.
                *       </p>
                */
            Path?: string;
    }
    export namespace AwsEfsAccessPointRootDirectoryDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEfsAccessPointRootDirectoryDetails) => any;
    }
    /**
        * <p>Provides information about an Amazon EFS access point.
        *       </p>
        */
    export interface AwsEfsAccessPointDetails {
            /**
                * <p>The ID of the Amazon EFS access point.
                *       </p>
                */
            AccessPointId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon EFS access point. </p>
                */
            Arn?: string;
            /**
                * <p>The opaque string specified in the request to ensure idempotent creation.
                *       </p>
                */
            ClientToken?: string;
            /**
                * <p>The ID of the Amazon EFS file system that the access point applies to.
                *       </p>
                */
            FileSystemId?: string;
            /**
                * <p>The full POSIX identity, including the user ID, group ID, and secondary group IDs on the access point,
                * that is used for all file operations by NFS clients using the access point.
                *       </p>
                */
            PosixUser?: AwsEfsAccessPointPosixUserDetails;
            /**
                * <p>The directory on the Amazon EFS file system that the access point exposes as the root
                * directory to NFS clients using the access point.
                *       </p>
                */
            RootDirectory?: AwsEfsAccessPointRootDirectoryDetails;
    }
    export namespace AwsEfsAccessPointDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEfsAccessPointDetails) => any;
    }
    /**
        * <p>Details for a cluster logging configuration.</p>
        */
    export interface AwsEksClusterLoggingClusterLoggingDetails {
            /**
                * <p>Whether the logging types that are listed in <code>Types</code> are enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>A list of logging types.</p>
                */
            Types?: string[];
    }
    export namespace AwsEksClusterLoggingClusterLoggingDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEksClusterLoggingClusterLoggingDetails) => any;
    }
    /**
        * <p>The logging configuration for an Amazon EKS cluster.</p>
        */
    export interface AwsEksClusterLoggingDetails {
            /**
                * <p>Cluster logging configurations.</p>
                */
            ClusterLogging?: AwsEksClusterLoggingClusterLoggingDetails[];
    }
    export namespace AwsEksClusterLoggingDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEksClusterLoggingDetails) => any;
    }
    /**
        * <p>Information about the VPC configuration used by the cluster control plane.</p>
        */
    export interface AwsEksClusterResourcesVpcConfigDetails {
            /**
                * <p>The security groups that are associated with the cross-account elastic network interfaces that are used to allow communication between your nodes and the Amazon EKS control plane.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>The subnets that are associated with the cluster.</p>
                */
            SubnetIds?: string[];
    }
    export namespace AwsEksClusterResourcesVpcConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEksClusterResourcesVpcConfigDetails) => any;
    }
    /**
        * <p>Provides details about an Amazon EKS cluster.</p>
        */
    export interface AwsEksClusterDetails {
            /**
                * <p>The ARN of the cluster.</p>
                */
            Arn?: string;
            /**
                * <p>The certificate authority data for the cluster.</p>
                */
            CertificateAuthorityData?: string;
            /**
                * <p>The status of the cluster.</p>
                */
            ClusterStatus?: string;
            /**
                * <p>The endpoint for the Amazon EKS API server.</p>
                */
            Endpoint?: string;
            /**
                * <p>The name of the cluster.</p>
                */
            Name?: string;
            /**
                * <p>The VPC configuration used by the cluster control plane.</p>
                */
            ResourcesVpcConfig?: AwsEksClusterResourcesVpcConfigDetails;
            /**
                * <p>The ARN of the IAM role that provides permissions for the Amazon EKS control plane to make calls to Amazon Web Services API operations on your behalf.</p>
                */
            RoleArn?: string;
            /**
                * <p>The Amazon EKS server version for the cluster.</p>
                */
            Version?: string;
            /**
                * <p>The logging configuration for the cluster.</p>
                */
            Logging?: AwsEksClusterLoggingDetails;
    }
    export namespace AwsEksClusterDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsEksClusterDetails) => any;
    }
    /**
        * <p>Contains information about a link to another environment that is in the same group.</p>
        */
    export interface AwsElasticBeanstalkEnvironmentEnvironmentLink {
            /**
                * <p>The name of the linked environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The name of the environment link.</p>
                */
            LinkName?: string;
    }
    export namespace AwsElasticBeanstalkEnvironmentEnvironmentLink {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticBeanstalkEnvironmentEnvironmentLink) => any;
    }
    /**
        * <p>A configuration option setting for the environment.</p>
        */
    export interface AwsElasticBeanstalkEnvironmentOptionSetting {
            /**
                * <p>The type of resource that the configuration option is associated with.</p>
                */
            Namespace?: string;
            /**
                * <p>The name of the option.</p>
                */
            OptionName?: string;
            /**
                * <p>The name of the resource.</p>
                */
            ResourceName?: string;
            /**
                * <p>The value of the configuration setting.</p>
                */
            Value?: string;
    }
    export namespace AwsElasticBeanstalkEnvironmentOptionSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticBeanstalkEnvironmentOptionSetting) => any;
    }
    /**
        * <p>Contains information about the tier of the environment.</p>
        */
    export interface AwsElasticBeanstalkEnvironmentTier {
            /**
                * <p>The name of the environment tier.</p>
                */
            Name?: string;
            /**
                * <p>The type of environment tier.</p>
                */
            Type?: string;
            /**
                * <p>The version of the environment tier.</p>
                */
            Version?: string;
    }
    export namespace AwsElasticBeanstalkEnvironmentTier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticBeanstalkEnvironmentTier) => any;
    }
    /**
        * <p>Contains details about an Elastic Beanstalk environment.</p>
        */
    export interface AwsElasticBeanstalkEnvironmentDetails {
            /**
                * <p>The name of the application that is associated with the environment.</p>
                */
            ApplicationName?: string;
            /**
                * <p>The URL to the CNAME for this environment.</p>
                */
            Cname?: string;
            /**
                * <p>The creation date for this environment.</p>
                */
            DateCreated?: string;
            /**
                * <p>The date when this environment was last modified.</p>
                */
            DateUpdated?: string;
            /**
                * <p>A description of the environment.</p>
                */
            Description?: string;
            /**
                * <p>For load-balanced, autoscaling environments, the URL to the load balancer. For single-instance environments, the IP address of the instance.</p>
                */
            EndpointUrl?: string;
            /**
                * <p>The ARN of the environment.</p>
                */
            EnvironmentArn?: string;
            /**
                * <p>The identifier of the environment.</p>
                */
            EnvironmentId?: string;
            /**
                * <p>Links to other environments in the same group.</p>
                */
            EnvironmentLinks?: AwsElasticBeanstalkEnvironmentEnvironmentLink[];
            /**
                * <p>The name of the environment.</p>
                */
            EnvironmentName?: string;
            /**
                * <p>The configuration setting for the environment.</p>
                */
            OptionSettings?: AwsElasticBeanstalkEnvironmentOptionSetting[];
            /**
                * <p>The ARN of the platform version for the environment.</p>
                */
            PlatformArn?: string;
            /**
                * <p>The name of the solution stack that is deployed with the environment.</p>
                */
            SolutionStackName?: string;
            /**
                * <p>The current operational status of the environment.</p>
                */
            Status?: string;
            /**
                * <p>The tier of the environment.</p>
                */
            Tier?: AwsElasticBeanstalkEnvironmentTier;
            /**
                * <p>The application version of the environment.</p>
                */
            VersionLabel?: string;
    }
    export namespace AwsElasticBeanstalkEnvironmentDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticBeanstalkEnvironmentDetails) => any;
    }
    /**
        * <p>Additional options for the domain endpoint, such as whether to require HTTPS for all
        *          traffic.</p>
        */
    export interface AwsElasticsearchDomainDomainEndpointOptions {
            /**
                * <p>Whether to require that all traffic to the domain arrive over HTTPS.</p>
                */
            EnforceHTTPS?: boolean;
            /**
                * <p>The TLS security policy to apply to the HTTPS endpoint of the OpenSearch
                *          domain.</p>
                *          <p>Valid values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Policy-Min-TLS-1-0-2019-07</code>, which supports TLSv1.0 and higher</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Policy-Min-TLS-1-2-2019-07</code>, which only supports TLSv1.2</p>
                *             </li>
                *          </ul>
                */
            TLSSecurityPolicy?: string;
    }
    export namespace AwsElasticsearchDomainDomainEndpointOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainDomainEndpointOptions) => any;
    }
    /**
        * <p>Configuration options for zone awareness.</p>
        */
    export interface AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails {
            /**
                * <p>he number of Availability Zones that the domain uses. Valid values are 2 and 3. The default is 2.</p>
                */
            AvailabilityZoneCount?: number;
    }
    export namespace AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails) => any;
    }
    /**
        * <p>details about the configuration of an OpenSearch cluster.</p>
        */
    export interface AwsElasticsearchDomainElasticsearchClusterConfigDetails {
            /**
                * <p>The number of instances to use for the master node. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
                */
            DedicatedMasterCount?: number;
            /**
                * <p>Whether to use a dedicated master node for the Elasticsearch domain. A dedicated master node performs cluster management tasks, but doesn't hold data or respond to data upload requests.</p>
                */
            DedicatedMasterEnabled?: boolean;
            /**
                * <p>The hardware configuration of the computer that hosts the dedicated master node. For example, <code>m3.medium.elasticsearch</code>. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
                */
            DedicatedMasterType?: string;
            /**
                * <p>The number of data nodes to use in the Elasticsearch domain.</p>
                */
            InstanceCount?: number;
            /**
                * <p>The instance type for your data nodes. For example, <code>m3.medium.elasticsearch</code>.</p>
                */
            InstanceType?: string;
            /**
                * <p>Configuration options for zone awareness. Provided if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
                */
            ZoneAwarenessConfig?: AwsElasticsearchDomainElasticsearchClusterConfigZoneAwarenessConfigDetails;
            /**
                * <p>Whether to enable zone awareness for the Elasticsearch domain. When zone awareness is enabled, OpenSearch allocates the cluster's nodes and replica index shards across Availability Zones in the same Region. This prevents data loss and minimizes downtime if a node or data center fails.</p>
                */
            ZoneAwarenessEnabled?: boolean;
    }
    export namespace AwsElasticsearchDomainElasticsearchClusterConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainElasticsearchClusterConfigDetails) => any;
    }
    /**
        * <p>Details about the configuration for encryption at rest.</p>
        */
    export interface AwsElasticsearchDomainEncryptionAtRestOptions {
            /**
                * <p>Whether encryption at rest is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The KMS key ID. Takes the form <code>1a2a3a4-1a2a-3a4a-5a6a-1a2a3a4a5a6a</code>.</p>
                */
            KmsKeyId?: string;
    }
    export namespace AwsElasticsearchDomainEncryptionAtRestOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainEncryptionAtRestOptions) => any;
    }
    /**
        * <p>The log configuration.</p>
        */
    export interface AwsElasticsearchDomainLogPublishingOptionsLogConfig {
            /**
                * <p>The ARN of the CloudWatch Logs group to publish the logs to.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>Whether the log publishing is enabled.</p>
                */
            Enabled?: boolean;
    }
    export namespace AwsElasticsearchDomainLogPublishingOptionsLogConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainLogPublishingOptionsLogConfig) => any;
    }
    /**
        * <p>configures the CloudWatch Logs to publish for the
        *          Elasticsearch domain.</p>
        */
    export interface AwsElasticsearchDomainLogPublishingOptions {
            /**
                * <p>Configures the OpenSearch index logs
                *          publishing.</p>
                */
            IndexSlowLogs?: AwsElasticsearchDomainLogPublishingOptionsLogConfig;
            /**
                * <p>Configures the OpenSearch search slow log
                *          publishing.</p>
                */
            SearchSlowLogs?: AwsElasticsearchDomainLogPublishingOptionsLogConfig;
            /**
                * <p>The log configuration.</p>
                */
            AuditLogs?: AwsElasticsearchDomainLogPublishingOptionsLogConfig;
    }
    export namespace AwsElasticsearchDomainLogPublishingOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainLogPublishingOptions) => any;
    }
    /**
        * <p>Details about the configuration for node-to-node encryption.</p>
        */
    export interface AwsElasticsearchDomainNodeToNodeEncryptionOptions {
            /**
                * <p>Whether node-to-node encryption is enabled.</p>
                */
            Enabled?: boolean;
    }
    export namespace AwsElasticsearchDomainNodeToNodeEncryptionOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainNodeToNodeEncryptionOptions) => any;
    }
    /**
        * <p>Information about the state of the domain relative to the latest service software.</p>
        */
    export interface AwsElasticsearchDomainServiceSoftwareOptions {
            /**
                * <p>The epoch time when the deployment window closes for required updates. After this time,
                *          Amazon OpenSearch Service schedules the software upgrade automatically.</p>
                */
            AutomatedUpdateDate?: string;
            /**
                * <p>Whether a request to update the domain can be canceled.</p>
                */
            Cancellable?: boolean;
            /**
                * <p>The version of the service software that is currently installed on the domain.</p>
                */
            CurrentVersion?: string;
            /**
                * <p>A more detailed description of the service software status.</p>
                */
            Description?: string;
            /**
                * <p>The most recent version of the service software.</p>
                */
            NewVersion?: string;
            /**
                * <p>Whether a service software update is available for the domain.</p>
                */
            UpdateAvailable?: boolean;
            /**
                * <p>The status of the service software update.</p>
                */
            UpdateStatus?: string;
    }
    export namespace AwsElasticsearchDomainServiceSoftwareOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainServiceSoftwareOptions) => any;
    }
    /**
        * <p>Information that OpenSearch derives based on <code>VPCOptions</code> for the
        *          domain.</p>
        */
    export interface AwsElasticsearchDomainVPCOptions {
            /**
                * <p>The list of Availability Zones associated with the VPC subnets.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The list of security group IDs associated with the VPC endpoints for the domain.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A list of subnet IDs associated with the VPC endpoints for the domain.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>ID for the VPC.</p>
                */
            VPCId?: string;
    }
    export namespace AwsElasticsearchDomainVPCOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainVPCOptions) => any;
    }
    /**
        * <p>Information about an Elasticsearch domain.</p>
        */
    export interface AwsElasticsearchDomainDetails {
            /**
                * <p>IAM policy document specifying the access policies for the new Elasticsearch domain.</p>
                */
            AccessPolicies?: string;
            /**
                * <p>Additional options for the domain endpoint.</p>
                */
            DomainEndpointOptions?: AwsElasticsearchDomainDomainEndpointOptions;
            /**
                * <p>Unique identifier for an Elasticsearch domain.</p>
                */
            DomainId?: string;
            /**
                * <p>Name of an Elasticsearch domain.</p>
                *          <p>Domain names are unique across all domains owned by the same account within an Amazon Web Services
                *          Region.</p>
                *          <p>Domain names must start with a lowercase letter and must be between 3 and 28
                *          characters.</p>
                *          <p>Valid characters are a-z (lowercase only), 0-9, and – (hyphen). </p>
                */
            DomainName?: string;
            /**
                * <p>Domain-specific endpoint used to submit index, search, and data upload requests to an
                *          Elasticsearch domain.</p>
                *          <p>The endpoint is a service URL. </p>
                */
            Endpoint?: string;
            /**
                * <p>The key-value pair that exists if the Elasticsearch domain uses VPC endpoints.</p>
                */
            Endpoints?: Record<string, string>;
            /**
                * <p>OpenSearch version.</p>
                */
            ElasticsearchVersion?: string;
            /**
                * <p>Information about an OpenSearch cluster configuration.</p>
                */
            ElasticsearchClusterConfig?: AwsElasticsearchDomainElasticsearchClusterConfigDetails;
            /**
                * <p>Details about the configuration for encryption at rest.</p>
                */
            EncryptionAtRestOptions?: AwsElasticsearchDomainEncryptionAtRestOptions;
            /**
                * <p>Configures the CloudWatch Logs to publish for the Elasticsearch domain.</p>
                */
            LogPublishingOptions?: AwsElasticsearchDomainLogPublishingOptions;
            /**
                * <p>Details about the configuration for node-to-node encryption.</p>
                */
            NodeToNodeEncryptionOptions?: AwsElasticsearchDomainNodeToNodeEncryptionOptions;
            /**
                * <p>Information about the status of a domain relative to the latest service software.</p>
                */
            ServiceSoftwareOptions?: AwsElasticsearchDomainServiceSoftwareOptions;
            /**
                * <p>Information that OpenSearch derives based on <code>VPCOptions</code> for the
                *          domain.</p>
                */
            VPCOptions?: AwsElasticsearchDomainVPCOptions;
    }
    export namespace AwsElasticsearchDomainDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElasticsearchDomainDetails) => any;
    }
    /**
        * <p>Contains information about a stickiness policy that was created using
        *             <code>CreateAppCookieStickinessPolicy</code>.</p>
        */
    export interface AwsElbAppCookieStickinessPolicy {
            /**
                * <p>The name of the application cookie used for stickiness.</p>
                */
            CookieName?: string;
            /**
                * <p>The mnemonic name for the policy being created. The name must be unique within the set
                *          of policies for the load balancer.</p>
                */
            PolicyName?: string;
    }
    export namespace AwsElbAppCookieStickinessPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbAppCookieStickinessPolicy) => any;
    }
    /**
        * <p>Contains information about a stickiness policy that was created using
        *             <code>CreateLBCookieStickinessPolicy</code>.</p>
        */
    export interface AwsElbLbCookieStickinessPolicy {
            /**
                * <p>The amount of time, in seconds, after which the cookie is considered stale. If an
                *          expiration period is not specified, the stickiness session lasts for the duration of the
                *          browser session.</p>
                */
            CookieExpirationPeriod?: number;
            /**
                * <p>The name of the policy. The name must be unique within the set of policies for the load
                *          balancer.</p>
                */
            PolicyName?: string;
    }
    export namespace AwsElbLbCookieStickinessPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLbCookieStickinessPolicy) => any;
    }
    /**
        * <p>Contains information about the access log configuration for the load balancer.</p>
        */
    export interface AwsElbLoadBalancerAccessLog {
            /**
                * <p>The interval in minutes for publishing the access logs.</p>
                *          <p>You can publish access logs either every 5 minutes or every 60 minutes.</p>
                */
            EmitInterval?: number;
            /**
                * <p>Indicates whether access logs are enabled for the load balancer.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The name of the S3 bucket where the access logs are stored.</p>
                */
            S3BucketName?: string;
            /**
                * <p>The logical hierarchy that was created for the S3 bucket.</p>
                *          <p>If a prefix is not provided, the log is placed at the root level of the bucket.</p>
                */
            S3BucketPrefix?: string;
    }
    export namespace AwsElbLoadBalancerAccessLog {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerAccessLog) => any;
    }
    /**
        * <p>Provides information about additional attributes for the load balancer.</p>
        */
    export interface AwsElbLoadBalancerAdditionalAttribute {
            /**
                * <p>The name of the attribute.</p>
                */
            Key?: string;
            /**
                * <p>The value of the attribute.</p>
                */
            Value?: string;
    }
    export namespace AwsElbLoadBalancerAdditionalAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerAdditionalAttribute) => any;
    }
    /**
        * <p>Contains information about the connection draining configuration for the load
        *          balancer.</p>
        */
    export interface AwsElbLoadBalancerConnectionDraining {
            /**
                * <p>Indicates whether connection draining is enabled for the load balancer.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The maximum time, in seconds, to keep the existing connections open before deregistering
                *          the instances.</p>
                */
            Timeout?: number;
    }
    export namespace AwsElbLoadBalancerConnectionDraining {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerConnectionDraining) => any;
    }
    /**
        * <p>Contains connection settings for the load balancer.</p>
        */
    export interface AwsElbLoadBalancerConnectionSettings {
            /**
                * <p>The time, in seconds, that the connection can be idle (no data is sent over the
                *          connection) before it is closed by the load balancer.</p>
                */
            IdleTimeout?: number;
    }
    export namespace AwsElbLoadBalancerConnectionSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerConnectionSettings) => any;
    }
    /**
        * <p>Contains cross-zone load balancing settings for the load balancer.</p>
        */
    export interface AwsElbLoadBalancerCrossZoneLoadBalancing {
            /**
                * <p>Indicates whether cross-zone load balancing is enabled for the load balancer.</p>
                */
            Enabled?: boolean;
    }
    export namespace AwsElbLoadBalancerCrossZoneLoadBalancing {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerCrossZoneLoadBalancing) => any;
    }
    /**
        * <p>Contains attributes for the load balancer.</p>
        */
    export interface AwsElbLoadBalancerAttributes {
            /**
                * <p>Information about the access log configuration for the load balancer.</p>
                *          <p>If the access log is enabled, the load balancer captures detailed information about all
                *          requests. It delivers the information to a specified S3 bucket.</p>
                */
            AccessLog?: AwsElbLoadBalancerAccessLog;
            /**
                * <p>Information about the connection draining configuration for the load balancer.</p>
                *          <p>If connection draining is enabled, the load balancer allows existing requests to
                *          complete before it shifts traffic away from a deregistered or unhealthy instance.</p>
                */
            ConnectionDraining?: AwsElbLoadBalancerConnectionDraining;
            /**
                * <p>Connection settings for the load balancer.</p>
                *          <p>If an idle timeout is configured, the load balancer allows connections to remain idle
                *          for the specified duration. When a connection is idle, no data is sent over the
                *          connection.</p>
                */
            ConnectionSettings?: AwsElbLoadBalancerConnectionSettings;
            /**
                * <p>Cross-zone load balancing settings for the load balancer.</p>
                *          <p>If cross-zone load balancing is enabled, the load balancer routes the request traffic
                *          evenly across all instances regardless of the Availability Zones.</p>
                */
            CrossZoneLoadBalancing?: AwsElbLoadBalancerCrossZoneLoadBalancing;
            /**
                * <p>Any additional attributes for a load balancer.</p>
                */
            AdditionalAttributes?: AwsElbLoadBalancerAdditionalAttribute[];
    }
    export namespace AwsElbLoadBalancerAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerAttributes) => any;
    }
    /**
        * <p>Provides information about the configuration of an EC2 instance for the load
        *          balancer.</p>
        */
    export interface AwsElbLoadBalancerBackendServerDescription {
            /**
                * <p>The port on which the EC2 instance is listening.</p>
                */
            InstancePort?: number;
            /**
                * <p>The names of the policies that are enabled for the EC2 instance.</p>
                */
            PolicyNames?: string[];
    }
    export namespace AwsElbLoadBalancerBackendServerDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerBackendServerDescription) => any;
    }
    /**
        * <p>Contains information about the health checks that are conducted on the load
        *          balancer.</p>
        */
    export interface AwsElbLoadBalancerHealthCheck {
            /**
                * <p>The number of consecutive health check successes required before the instance is moved
                *          to the Healthy state.</p>
                */
            HealthyThreshold?: number;
            /**
                * <p>The approximate interval, in seconds, between health checks of an individual
                *          instance.</p>
                */
            Interval?: number;
            /**
                * <p>The instance that is being checked. The target specifies the protocol and port. The
                *          available protocols are TCP, SSL, HTTP, and HTTPS. The range of valid ports is 1 through
                *          65535.</p>
                *          <p>For the HTTP and HTTPS protocols, the target also specifies the ping path.</p>
                *          <p>For the TCP protocol, the target is specified as <code>TCP:
                *                <i><port></i>
                *             </code>.</p>
                *          <p>For the SSL protocol, the target is specified as
                *                <code>SSL.<i><port></i>
                *             </code>.</p>
                *          <p>For the HTTP and HTTPS protocols, the target is specified as
                *                <code>
                *                <i><protocol></i>:<i><port></i>/<i><path
                *                to ping></i>
                *             </code>.</p>
                */
            Target?: string;
            /**
                * <p>The amount of time, in seconds, during which no response means a failed health
                *          check.</p>
                */
            Timeout?: number;
            /**
                * <p>The number of consecutive health check failures that must occur before the instance is
                *          moved to the Unhealthy state.</p>
                */
            UnhealthyThreshold?: number;
    }
    export namespace AwsElbLoadBalancerHealthCheck {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerHealthCheck) => any;
    }
    /**
        * <p>Provides information about an EC2 instance for a load balancer.</p>
        */
    export interface AwsElbLoadBalancerInstance {
            /**
                * <p>The instance identifier.</p>
                */
            InstanceId?: string;
    }
    export namespace AwsElbLoadBalancerInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerInstance) => any;
    }
    /**
        * <p>Information about a load balancer listener.</p>
        */
    export interface AwsElbLoadBalancerListener {
            /**
                * <p>The port on which the instance is listening.</p>
                */
            InstancePort?: number;
            /**
                * <p>The protocol to use to route traffic to instances.</p>
                *          <p>Valid values: <code>HTTP</code> | <code>HTTPS</code> | <code>TCP</code> |
                *             <code>SSL</code>
                *          </p>
                */
            InstanceProtocol?: string;
            /**
                * <p>The port on which the load balancer is listening.</p>
                *          <p>On EC2-VPC, you can specify any port from the range 1-65535.</p>
                *          <p>On EC2-Classic, you can specify any port from the following list: 25, 80, 443, 465, 587,
                *          1024-65535.</p>
                */
            LoadBalancerPort?: number;
            /**
                * <p>The load balancer transport protocol to use for routing.</p>
                *          <p>Valid values: <code>HTTP</code> | <code>HTTPS</code> | <code>TCP</code> |
                *             <code>SSL</code>
                *          </p>
                */
            Protocol?: string;
            /**
                * <p>The ARN of the server certificate.</p>
                */
            SslCertificateId?: string;
    }
    export namespace AwsElbLoadBalancerListener {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerListener) => any;
    }
    /**
        * <p>Lists the policies that are enabled for a load balancer listener.</p>
        */
    export interface AwsElbLoadBalancerListenerDescription {
            /**
                * <p>Information about the listener.</p>
                */
            Listener?: AwsElbLoadBalancerListener;
            /**
                * <p>The policies enabled for the listener.</p>
                */
            PolicyNames?: string[];
    }
    export namespace AwsElbLoadBalancerListenerDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerListenerDescription) => any;
    }
    /**
        * <p>Contains information about the policies for a load balancer.</p>
        */
    export interface AwsElbLoadBalancerPolicies {
            /**
                * <p>The stickiness policies that are created using
                *             <code>CreateAppCookieStickinessPolicy</code>.</p>
                */
            AppCookieStickinessPolicies?: AwsElbAppCookieStickinessPolicy[];
            /**
                * <p>The stickiness policies that are created using
                *             <code>CreateLBCookieStickinessPolicy</code>.</p>
                */
            LbCookieStickinessPolicies?: AwsElbLbCookieStickinessPolicy[];
            /**
                * <p>The policies other than the stickiness policies.</p>
                */
            OtherPolicies?: string[];
    }
    export namespace AwsElbLoadBalancerPolicies {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerPolicies) => any;
    }
    /**
        * <p>Contains information about the security group for the load balancer.</p>
        */
    export interface AwsElbLoadBalancerSourceSecurityGroup {
            /**
                * <p>The name of the security group.</p>
                */
            GroupName?: string;
            /**
                * <p>The owner of the security group.</p>
                */
            OwnerAlias?: string;
    }
    export namespace AwsElbLoadBalancerSourceSecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerSourceSecurityGroup) => any;
    }
    /**
        * <p>Contains details about a Classic Load Balancer.</p>
        */
    export interface AwsElbLoadBalancerDetails {
            /**
                * <p>The list of Availability Zones for the load balancer.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>Information about the configuration of the EC2 instances.</p>
                */
            BackendServerDescriptions?: AwsElbLoadBalancerBackendServerDescription[];
            /**
                * <p>The name of the Amazon Route 53 hosted zone for the load balancer.</p>
                */
            CanonicalHostedZoneName?: string;
            /**
                * <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
                */
            CanonicalHostedZoneNameID?: string;
            /**
                * <p>Indicates when the load balancer was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedTime?: string;
            /**
                * <p>The DNS name of the load balancer.</p>
                */
            DnsName?: string;
            /**
                * <p>Information about the health checks that are conducted on the load balancer.</p>
                */
            HealthCheck?: AwsElbLoadBalancerHealthCheck;
            /**
                * <p>List of EC2 instances for the load balancer.</p>
                */
            Instances?: AwsElbLoadBalancerInstance[];
            /**
                * <p>The policies that are enabled for the load balancer listeners.</p>
                */
            ListenerDescriptions?: AwsElbLoadBalancerListenerDescription[];
            /**
                * <p>The attributes for a load balancer.</p>
                */
            LoadBalancerAttributes?: AwsElbLoadBalancerAttributes;
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>The policies for a load balancer.</p>
                */
            Policies?: AwsElbLoadBalancerPolicies;
            /**
                * <p>The type of load balancer. Only provided if the load balancer is in a VPC.</p>
                *          <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public
                *          DNS name that resolves to a public IP address.</p>
                *          <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name
                *          that resolves to a private IP address.</p>
                */
            Scheme?: string;
            /**
                * <p>The security groups for the load balancer. Only provided if the load balancer is in a
                *          VPC.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>Information about the security group for the load balancer. This is the security group
                *          that is used for inbound rules.</p>
                */
            SourceSecurityGroup?: AwsElbLoadBalancerSourceSecurityGroup;
            /**
                * <p>The list of subnet identifiers for the load balancer.</p>
                */
            Subnets?: string[];
            /**
                * <p>The identifier of the VPC for the load balancer.</p>
                */
            VpcId?: string;
    }
    export namespace AwsElbLoadBalancerDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbLoadBalancerDetails) => any;
    }
    /**
        * <p>A load balancer attribute.</p>
        */
    export interface AwsElbv2LoadBalancerAttribute {
            /**
                * <p>The name of the load balancer attribute.</p>
                */
            Key?: string;
            /**
                * <p>The value of the load balancer attribute.</p>
                */
            Value?: string;
    }
    export namespace AwsElbv2LoadBalancerAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbv2LoadBalancerAttribute) => any;
    }
    /**
        * <p>Information about the state of the load balancer.</p>
        */
    export interface LoadBalancerState {
            /**
                * <p>The state code. The initial state of the load balancer is provisioning.</p>
                *          <p>After the load balancer is fully set up and ready to route traffic, its state is
                *          active.</p>
                *          <p>If the load balancer could not be set up, its state is failed. </p>
                */
            Code?: string;
            /**
                * <p>A description of the state.</p>
                */
            Reason?: string;
    }
    export namespace LoadBalancerState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerState) => any;
    }
    /**
        * <p>Information about a load balancer.</p>
        */
    export interface AwsElbv2LoadBalancerDetails {
            /**
                * <p>The Availability Zones for the load balancer.</p>
                */
            AvailabilityZones?: AvailabilityZone[];
            /**
                * <p>The ID of the Amazon Route 53 hosted zone associated with the load balancer.</p>
                */
            CanonicalHostedZoneId?: string;
            /**
                * <p>Indicates when the load balancer was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedTime?: string;
            /**
                * <p>The public DNS name of the load balancer.</p>
                */
            DNSName?: string;
            /**
                * <p>The type of IP addresses used by the subnets for your load balancer. The possible values
                *          are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6
                *          addresses).</p>
                */
            IpAddressType?: string;
            /**
                * <p>The nodes of an Internet-facing load balancer have public IP addresses.</p>
                */
            Scheme?: string;
            /**
                * <p>The IDs of the security groups for the load balancer.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The state of the load balancer.</p>
                */
            State?: LoadBalancerState;
            /**
                * <p>The type of load balancer.</p>
                */
            Type?: string;
            /**
                * <p>The ID of the VPC for the load balancer.</p>
                */
            VpcId?: string;
            /**
                * <p>Attributes of the load balancer.</p>
                */
            LoadBalancerAttributes?: AwsElbv2LoadBalancerAttribute[];
    }
    export namespace AwsElbv2LoadBalancerDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsElbv2LoadBalancerDetails) => any;
    }
    /**
        * <p>Attributes of the session that the key was used for.</p>
        */
    export interface AwsIamAccessKeySessionContextAttributes {
            /**
                * <p>Indicates whether the session used multi-factor authentication (MFA).</p>
                */
            MfaAuthenticated?: boolean;
            /**
                * <p>Indicates when the session was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreationDate?: string;
    }
    export namespace AwsIamAccessKeySessionContextAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamAccessKeySessionContextAttributes) => any;
    }
    /**
        * <p>Information about the entity that created the session.</p>
        */
    export interface AwsIamAccessKeySessionContextSessionIssuer {
            /**
                * <p>The type of principal (user, role, or group) that created the session.</p>
                */
            Type?: string;
            /**
                * <p>The principal ID of the principal (user, role, or group) that created the
                *          session.</p>
                */
            PrincipalId?: string;
            /**
                * <p>The ARN of the session.</p>
                */
            Arn?: string;
            /**
                * <p>The identifier of the Amazon Web Services account that created the session.</p>
                */
            AccountId?: string;
            /**
                * <p>The name of the principal that created the session.</p>
                */
            UserName?: string;
    }
    export namespace AwsIamAccessKeySessionContextSessionIssuer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamAccessKeySessionContextSessionIssuer) => any;
    }
    /**
        * <p>Provides information about the session that the key was used for.</p>
        */
    export interface AwsIamAccessKeySessionContext {
            /**
                * <p>Attributes of the session that the key was used for.</p>
                */
            Attributes?: AwsIamAccessKeySessionContextAttributes;
            /**
                * <p>Information about the entity that created the session.</p>
                */
            SessionIssuer?: AwsIamAccessKeySessionContextSessionIssuer;
    }
    export namespace AwsIamAccessKeySessionContext {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamAccessKeySessionContext) => any;
    }
    export enum AwsIamAccessKeyStatus {
            ACTIVE = "Active",
            INACTIVE = "Inactive"
    }
    /**
        * <p>IAM access key details related to a finding.</p>
        */
    export interface AwsIamAccessKeyDetails {
            /**
                * @deprecated
                *
                * <p>The user associated with the IAM access key related to a finding.</p>
                *          <p>The <code>UserName</code> parameter has been replaced with the
                *             <code>PrincipalName</code> parameter because access keys can also be assigned to
                *          principals that are not IAM users.</p>
                */
            UserName?: string;
            /**
                * <p>The status of the IAM access key related to a finding.</p>
                */
            Status?: AwsIamAccessKeyStatus | string;
            /**
                * <p>Indicates when the IAM access key was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedAt?: string;
            /**
                * <p>The ID of the principal associated with an access key.</p>
                */
            PrincipalId?: string;
            /**
                * <p>The type of principal associated with an access key.</p>
                */
            PrincipalType?: string;
            /**
                * <p>The name of the principal.</p>
                */
            PrincipalName?: string;
            /**
                * <p>The Amazon Web Services account ID of the account for the key.</p>
                */
            AccountId?: string;
            /**
                * <p>The identifier of the access key.</p>
                */
            AccessKeyId?: string;
            /**
                * <p>Information about the session that the key was used for.</p>
                */
            SessionContext?: AwsIamAccessKeySessionContext;
    }
    export namespace AwsIamAccessKeyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamAccessKeyDetails) => any;
    }
    /**
        * <p>A managed policy that is attached to an IAM principal.</p>
        */
    export interface AwsIamAttachedManagedPolicy {
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The ARN of the policy.</p>
                */
            PolicyArn?: string;
    }
    export namespace AwsIamAttachedManagedPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamAttachedManagedPolicy) => any;
    }
    /**
        * <p>A managed policy that is attached to the IAM group.</p>
        */
    export interface AwsIamGroupPolicy {
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName?: string;
    }
    export namespace AwsIamGroupPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamGroupPolicy) => any;
    }
    /**
        * <p>Contains details about an IAM group.</p>
        */
    export interface AwsIamGroupDetails {
            /**
                * <p>A list of the managed policies that are attached to the IAM group.</p>
                */
            AttachedManagedPolicies?: AwsIamAttachedManagedPolicy[];
            /**
                * <p>Indicates when the IAM group was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateDate?: string;
            /**
                * <p>The identifier of the IAM group.</p>
                */
            GroupId?: string;
            /**
                * <p>The name of the IAM group.</p>
                */
            GroupName?: string;
            /**
                * <p>The list of inline policies that are embedded in the group.</p>
                */
            GroupPolicyList?: AwsIamGroupPolicy[];
            /**
                * <p>The path to the group.</p>
                */
            Path?: string;
    }
    export namespace AwsIamGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamGroupDetails) => any;
    }
    /**
        * <p>Information about a role associated with an instance profile.</p>
        */
    export interface AwsIamInstanceProfileRole {
            /**
                * <p>The ARN of the role.</p>
                */
            Arn?: string;
            /**
                * <p>The policy that grants an entity permission to assume the role.</p>
                */
            AssumeRolePolicyDocument?: string;
            /**
                * <p>Indicates when the role was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateDate?: string;
            /**
                * <p>The path to the role.</p>
                */
            Path?: string;
            /**
                * <p>The identifier of the role.</p>
                */
            RoleId?: string;
            /**
                * <p>The name of the role.</p>
                */
            RoleName?: string;
    }
    export namespace AwsIamInstanceProfileRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamInstanceProfileRole) => any;
    }
    /**
        * <p>Information about an instance profile.</p>
        */
    export interface AwsIamInstanceProfile {
            /**
                * <p>The ARN of the instance profile.</p>
                */
            Arn?: string;
            /**
                * <p>Indicates when the instance profile was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateDate?: string;
            /**
                * <p>The identifier of the instance profile.</p>
                */
            InstanceProfileId?: string;
            /**
                * <p>The name of the instance profile.</p>
                */
            InstanceProfileName?: string;
            /**
                * <p>The path to the instance profile.</p>
                */
            Path?: string;
            /**
                * <p>The roles associated with the instance profile.</p>
                */
            Roles?: AwsIamInstanceProfileRole[];
    }
    export namespace AwsIamInstanceProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamInstanceProfile) => any;
    }
    /**
        * <p>Information about the policy used to set the permissions boundary for an IAM
        *          principal.</p>
        */
    export interface AwsIamPermissionsBoundary {
            /**
                * <p>The ARN of the policy used to set the permissions boundary.</p>
                */
            PermissionsBoundaryArn?: string;
            /**
                * <p>The usage type for the permissions boundary.</p>
                */
            PermissionsBoundaryType?: string;
    }
    export namespace AwsIamPermissionsBoundary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamPermissionsBoundary) => any;
    }
    /**
        * <p>A version of an IAM policy.</p>
        */
    export interface AwsIamPolicyVersion {
            /**
                * <p>The identifier of the policy version.</p>
                */
            VersionId?: string;
            /**
                * <p>Whether the version is the default version.</p>
                */
            IsDefaultVersion?: boolean;
            /**
                * <p>Indicates when the version was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateDate?: string;
    }
    export namespace AwsIamPolicyVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamPolicyVersion) => any;
    }
    /**
        * <p>Represents an IAM permissions policy.</p>
        */
    export interface AwsIamPolicyDetails {
            /**
                * <p>The number of users, groups, and roles that the policy is attached to.</p>
                */
            AttachmentCount?: number;
            /**
                * <p>When the policy was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateDate?: string;
            /**
                * <p>The identifier of the default version of the policy.</p>
                */
            DefaultVersionId?: string;
            /**
                * <p>A description of the policy.</p>
                */
            Description?: string;
            /**
                * <p>Whether the policy can be attached to a user, group, or role.</p>
                */
            IsAttachable?: boolean;
            /**
                * <p>The path to the policy.</p>
                */
            Path?: string;
            /**
                * <p>The number of users and roles that use the policy to set the permissions
                *          boundary.</p>
                */
            PermissionsBoundaryUsageCount?: number;
            /**
                * <p>The unique identifier of the policy.</p>
                */
            PolicyId?: string;
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>List of versions of the policy.</p>
                */
            PolicyVersionList?: AwsIamPolicyVersion[];
            /**
                * <p>When the policy was most recently updated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            UpdateDate?: string;
    }
    export namespace AwsIamPolicyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamPolicyDetails) => any;
    }
    /**
        * <p>An inline policy that is embedded in the role.</p>
        */
    export interface AwsIamRolePolicy {
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName?: string;
    }
    export namespace AwsIamRolePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamRolePolicy) => any;
    }
    /**
        * <p>Contains information about an IAM role, including all of the role's policies.</p>
        */
    export interface AwsIamRoleDetails {
            /**
                * <p>The trust policy that grants permission to assume the role.</p>
                */
            AssumeRolePolicyDocument?: string;
            /**
                * <p>The list of the managed policies that are attached to the role.</p>
                */
            AttachedManagedPolicies?: AwsIamAttachedManagedPolicy[];
            /**
                * <p>Indicates when the role was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateDate?: string;
            /**
                * <p>The list of instance profiles that contain this role.</p>
                */
            InstanceProfileList?: AwsIamInstanceProfile[];
            /**
                * <p>Information about the policy used to set the permissions boundary for an IAM
                *          principal.</p>
                */
            PermissionsBoundary?: AwsIamPermissionsBoundary;
            /**
                * <p>The stable and unique string identifying the role.</p>
                */
            RoleId?: string;
            /**
                * <p>The friendly name that identifies the role.</p>
                */
            RoleName?: string;
            /**
                * <p>The list of inline policies that are embedded in the role.</p>
                */
            RolePolicyList?: AwsIamRolePolicy[];
            /**
                * <p>The maximum session duration (in seconds) that you want to set for the specified role.</p>
                */
            MaxSessionDuration?: number;
            /**
                * <p>The path to the role.</p>
                */
            Path?: string;
    }
    export namespace AwsIamRoleDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamRoleDetails) => any;
    }
    /**
        * <p>Information about an inline policy that is embedded in the user.</p>
        */
    export interface AwsIamUserPolicy {
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName?: string;
    }
    export namespace AwsIamUserPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamUserPolicy) => any;
    }
    /**
        * <p>Information about an IAM user.</p>
        */
    export interface AwsIamUserDetails {
            /**
                * <p>A list of the managed policies that are attached to the user.</p>
                */
            AttachedManagedPolicies?: AwsIamAttachedManagedPolicy[];
            /**
                * <p>Indicates when the user was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreateDate?: string;
            /**
                * <p>A list of IAM groups that the user belongs to.</p>
                */
            GroupList?: string[];
            /**
                * <p>The path to the user.</p>
                */
            Path?: string;
            /**
                * <p>The permissions boundary for the user.</p>
                */
            PermissionsBoundary?: AwsIamPermissionsBoundary;
            /**
                * <p>The unique identifier for the user.</p>
                */
            UserId?: string;
            /**
                * <p>The name of the user.</p>
                */
            UserName?: string;
            /**
                * <p>The list of inline policies that are embedded in the user.</p>
                */
            UserPolicyList?: AwsIamUserPolicy[];
    }
    export namespace AwsIamUserDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamUserDetails) => any;
    }
    /**
        * <p>Provides information about stream encryption.
        *       </p>
        */
    export interface AwsKinesisStreamStreamEncryptionDetails {
            /**
                * <p>The encryption type to use.
                *       </p>
                */
            EncryptionType?: string;
            /**
                * <p>The globally unique identifier for the customer-managed KMS key to use for encryption. </p>
                */
            KeyId?: string;
    }
    export namespace AwsKinesisStreamStreamEncryptionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsKinesisStreamStreamEncryptionDetails) => any;
    }
    /**
        * <p>Provides information about an Amazon Kinesis data stream.
        *       </p>
        */
    export interface AwsKinesisStreamDetails {
            /**
                * <p>The name of the Kinesis stream. If you don't specify a name, CloudFront generates a unique
                * physical ID and uses that ID for the stream name.
                *       </p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Kinesis data stream.
                *       </p>
                */
            Arn?: string;
            /**
                * <p>When specified, enables or updates server-side encryption using an KMS key for a specified stream.
                * Removing this property from your stack template and updating your stack disables encryption.
                *       </p>
                */
            StreamEncryption?: AwsKinesisStreamStreamEncryptionDetails;
            /**
                * <p>The number of shards that the stream uses.
                *       </p>
                */
            ShardCount?: number;
            /**
                * <p>The number of hours for the data records that are stored in shards to remain accessible.
                *       </p>
                */
            RetentionPeriodHours?: number;
    }
    export namespace AwsKinesisStreamDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsKinesisStreamDetails) => any;
    }
    /**
        * <p>Contains metadata about an KMS key.</p>
        */
    export interface AwsKmsKeyDetails {
            /**
                * <p>The twelve-digit account ID of the Amazon Web Services account that owns the KMS key.</p>
                */
            AWSAccountId?: string;
            /**
                * <p>Indicates when the KMS key was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreationDate?: number;
            /**
                * <p>The globally unique identifier for the KMS key.</p>
                */
            KeyId?: string;
            /**
                * <p>The manager of the KMS key. KMS keys in your Amazon Web Services account are either customer managed or Amazon Web Services managed.</p>
                */
            KeyManager?: string;
            /**
                * <p>The state of the KMS key.</p>
                */
            KeyState?: string;
            /**
                * <p>The source of the KMS key material.</p>
                *          <p>When this value is <code>AWS_KMS</code>, KMS created the key material.</p>
                *          <p>When this value is <code>EXTERNAL</code>, the key material was imported from your
                *          existing key management infrastructure or the KMS key lacks key material.</p>
                *          <p>When this value is <code>AWS_CLOUDHSM</code>, the key material was created in the CloudHSM cluster associated with a custom key store.</p>
                */
            Origin?: string;
            /**
                * <p>A description of the KMS key.</p>
                */
            Description?: string;
            /**
                * <p>Whether the key has key rotation enabled.</p>
                */
            KeyRotationStatus?: boolean;
    }
    export namespace AwsKmsKeyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsKmsKeyDetails) => any;
    }
    /**
        * <p>The code for the Lambda function. You can specify either an object in Amazon S3, or upload a deployment package directly.</p>
        */
    export interface AwsLambdaFunctionCode {
            /**
                * <p>An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different Amazon Web Services account.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The Amazon S3 key of the deployment package.</p>
                */
            S3Key?: string;
            /**
                * <p>For versioned objects, the version of the deployment package object to use.</p>
                */
            S3ObjectVersion?: string;
            /**
                * <p>The base64-encoded contents of the deployment package. Amazon Web Services SDK and Amazon Web Services CLI clients handle the encoding for you.</p>
                */
            ZipFile?: string;
    }
    export namespace AwsLambdaFunctionCode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionCode) => any;
    }
    /**
        * <p>The dead-letter queue for failed asynchronous invocations.</p>
        */
    export interface AwsLambdaFunctionDeadLetterConfig {
            /**
                * <p>The ARN of an SQS queue or SNS topic.</p>
                */
            TargetArn?: string;
    }
    export namespace AwsLambdaFunctionDeadLetterConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionDeadLetterConfig) => any;
    }
    /**
        * <p>Error messages for environment variables that could not be applied.</p>
        */
    export interface AwsLambdaFunctionEnvironmentError {
            /**
                * <p>The error code.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The error message.</p>
                */
            Message?: string;
    }
    export namespace AwsLambdaFunctionEnvironmentError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionEnvironmentError) => any;
    }
    /**
        * <p>A function's environment variable settings.</p>
        */
    export interface AwsLambdaFunctionEnvironment {
            /**
                * <p>Environment variable key-value pairs.</p>
                */
            Variables?: Record<string, string>;
            /**
                * <p>An <code>AwsLambdaFunctionEnvironmentError</code> object.</p>
                */
            Error?: AwsLambdaFunctionEnvironmentError;
    }
    export namespace AwsLambdaFunctionEnvironment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionEnvironment) => any;
    }
    /**
        * <p>An Lambda layer.</p>
        */
    export interface AwsLambdaFunctionLayer {
            /**
                * <p>The ARN of the function layer.</p>
                */
            Arn?: string;
            /**
                * <p>The size of the layer archive in bytes.</p>
                */
            CodeSize?: number;
    }
    export namespace AwsLambdaFunctionLayer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionLayer) => any;
    }
    /**
        * <p>The function's X-Ray tracing configuration.</p>
        */
    export interface AwsLambdaFunctionTracingConfig {
            /**
                * <p>The tracing mode.</p>
                */
            Mode?: string;
    }
    export namespace AwsLambdaFunctionTracingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionTracingConfig) => any;
    }
    /**
        * <p>The VPC security groups and subnets that are attached to a Lambda function.</p>
        */
    export interface AwsLambdaFunctionVpcConfig {
            /**
                * <p>A list of VPC security groups IDs.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A list of VPC subnet IDs.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The ID of the VPC.</p>
                */
            VpcId?: string;
    }
    export namespace AwsLambdaFunctionVpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionVpcConfig) => any;
    }
    /**
        * <p>Details about a function's configuration.</p>
        */
    export interface AwsLambdaFunctionDetails {
            /**
                * <p>An <code>AwsLambdaFunctionCode</code> object.</p>
                */
            Code?: AwsLambdaFunctionCode;
            /**
                * <p>The SHA256 hash of the function's deployment package.</p>
                */
            CodeSha256?: string;
            /**
                * <p>The function's dead letter queue.</p>
                */
            DeadLetterConfig?: AwsLambdaFunctionDeadLetterConfig;
            /**
                * <p>The function's environment variables.</p>
                */
            Environment?: AwsLambdaFunctionEnvironment;
            /**
                * <p>The name of the function.</p>
                */
            FunctionName?: string;
            /**
                * <p>The function that Lambda calls to begin executing your function.</p>
                */
            Handler?: string;
            /**
                * <p>The KMS key that is used to encrypt the function's environment variables. This key is only returned if you've configured a customer managed customer managed key.</p>
                */
            KmsKeyArn?: string;
            /**
                * <p>Indicates when the function was last updated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastModified?: string;
            /**
                * <p>The function's layers.</p>
                */
            Layers?: AwsLambdaFunctionLayer[];
            /**
                * <p>For Lambda@Edge functions, the ARN of the master function.</p>
                */
            MasterArn?: string;
            /**
                * <p>The memory that is allocated to the function.</p>
                */
            MemorySize?: number;
            /**
                * <p>The latest updated revision of the function or alias.</p>
                */
            RevisionId?: string;
            /**
                * <p>The function's execution role.</p>
                */
            Role?: string;
            /**
                * <p>The runtime environment for the Lambda function.</p>
                */
            Runtime?: string;
            /**
                * <p>The amount of time that Lambda allows a function to run before stopping it.</p>
                */
            Timeout?: number;
            /**
                * <p>The function's X-Ray tracing configuration.</p>
                */
            TracingConfig?: AwsLambdaFunctionTracingConfig;
            /**
                * <p>The function's networking configuration.</p>
                */
            VpcConfig?: AwsLambdaFunctionVpcConfig;
            /**
                * <p>The version of the Lambda function.</p>
                */
            Version?: string;
    }
    export namespace AwsLambdaFunctionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaFunctionDetails) => any;
    }
    /**
        * <p>Details about a Lambda layer version.</p>
        */
    export interface AwsLambdaLayerVersionDetails {
            /**
                * <p>The version number.</p>
                */
            Version?: number;
            /**
                * <p>The layer's compatible runtimes. Maximum number of five items.</p>
                *          <p>Valid values: <code>nodejs10.x</code> | <code>nodejs12.x</code> | <code>java8</code> |
                *             <code>java11</code> | <code>python2.7</code> | <code>python3.6</code> |
                *             <code>python3.7</code> | <code>python3.8</code> | <code>dotnetcore1.0</code> |
                *             <code>dotnetcore2.1</code> | <code>go1.x</code> | <code>ruby2.5</code> |
                *             <code>provided</code>
                *          </p>
                */
            CompatibleRuntimes?: string[];
            /**
                * <p>Indicates when the version was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedDate?: string;
    }
    export namespace AwsLambdaLayerVersionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsLambdaLayerVersionDetails) => any;
    }
    /**
        * <p>A public subnet that Network Firewall uses for the firewall.</p>
        */
    export interface AwsNetworkFirewallFirewallSubnetMappingsDetails {
            /**
                * <p>The identifier of the subnet</p>
                */
            SubnetId?: string;
    }
    export namespace AwsNetworkFirewallFirewallSubnetMappingsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsNetworkFirewallFirewallSubnetMappingsDetails) => any;
    }
    /**
        * <p>Details about an Network Firewall firewall.</p>
        */
    export interface AwsNetworkFirewallFirewallDetails {
            /**
                * <p>Whether the firewall is protected from deletion. If set to <code>true</code>, then the firewall cannot be deleted.</p>
                */
            DeleteProtection?: boolean;
            /**
                * <p>A description of the firewall.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The identifier of the firewall.</p>
                */
            FirewallId?: string;
            /**
                * <p>A descriptive name of the firewall.</p>
                */
            FirewallName?: string;
            /**
                * <p>The ARN of the firewall policy.</p>
                */
            FirewallPolicyArn?: string;
            /**
                * <p>Whether the firewall is protected from a change to the firewall policy. If set to <code>true</code>, you cannot associate a different policy with the firewall.</p>
                */
            FirewallPolicyChangeProtection?: boolean;
            /**
                * <p>Whether the firewall is protected from a change to the subnet associations. If set to <code>true</code>, you cannot map different subnets to the firewall.</p>
                */
            SubnetChangeProtection?: boolean;
            /**
                * <p>The public subnets that Network Firewall uses for the firewall. Each subnet must belong to a different Availability Zone.</p>
                */
            SubnetMappings?: AwsNetworkFirewallFirewallSubnetMappingsDetails[];
            /**
                * <p>The identifier of the VPC where the firewall is used.</p>
                */
            VpcId?: string;
    }
    export namespace AwsNetworkFirewallFirewallDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsNetworkFirewallFirewallDetails) => any;
    }
    /**
        * <p>A stateful rule group that is used by the firewall policy.</p>
        */
    export interface FirewallPolicyStatefulRuleGroupReferencesDetails {
            /**
                * <p>The ARN of the stateful rule group.</p>
                */
            ResourceArn?: string;
    }
    export namespace FirewallPolicyStatefulRuleGroupReferencesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallPolicyStatefulRuleGroupReferencesDetails) => any;
    }
    /**
        * <p>Defines a CloudWatch dimension value to publish.</p>
        */
    export interface StatelessCustomPublishMetricActionDimension {
            /**
                * <p>The value to use for the custom metric dimension.</p>
                */
            Value?: string;
    }
    export namespace StatelessCustomPublishMetricActionDimension {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatelessCustomPublishMetricActionDimension) => any;
    }
    /**
        * <p>Information about metrics to publish to CloudWatch.</p>
        */
    export interface StatelessCustomPublishMetricAction {
            /**
                * <p>Defines CloudWatch dimension values to publish.</p>
                */
            Dimensions?: StatelessCustomPublishMetricActionDimension[];
    }
    export namespace StatelessCustomPublishMetricAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatelessCustomPublishMetricAction) => any;
    }
    /**
        * <p>The definition of a custom action that can be used for stateless packet handling.</p>
        */
    export interface StatelessCustomActionDefinition {
            /**
                * <p>Information about metrics to publish to CloudWatch.</p>
                */
            PublishMetricAction?: StatelessCustomPublishMetricAction;
    }
    export namespace StatelessCustomActionDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatelessCustomActionDefinition) => any;
    }
    /**
        * <p>A custom action that can be used for stateless packet handling.</p>
        */
    export interface FirewallPolicyStatelessCustomActionsDetails {
            /**
                * <p>The definition of the custom action.</p>
                */
            ActionDefinition?: StatelessCustomActionDefinition;
            /**
                * <p>The name of the custom action.</p>
                */
            ActionName?: string;
    }
    export namespace FirewallPolicyStatelessCustomActionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallPolicyStatelessCustomActionsDetails) => any;
    }
    /**
        * <p>A stateless rule group that is used by the firewall policy.</p>
        */
    export interface FirewallPolicyStatelessRuleGroupReferencesDetails {
            /**
                * <p>The order in which to run the stateless rule group.</p>
                */
            Priority?: number;
            /**
                * <p>The ARN of the stateless rule group.</p>
                */
            ResourceArn?: string;
    }
    export namespace FirewallPolicyStatelessRuleGroupReferencesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallPolicyStatelessRuleGroupReferencesDetails) => any;
    }
    /**
        * <p>Defines the behavior of the firewall.</p>
        */
    export interface FirewallPolicyDetails {
            /**
                * <p>The stateful rule groups that are used in the firewall policy.</p>
                */
            StatefulRuleGroupReferences?: FirewallPolicyStatefulRuleGroupReferencesDetails[];
            /**
                * <p>The custom action definitions that are available to use in the firewall policy's <code>StatelessDefaultActions</code> setting.</p>
                */
            StatelessCustomActions?: FirewallPolicyStatelessCustomActionsDetails[];
            /**
                * <p>The actions to take on a packet if it doesn't match any of the stateless rules in the policy.</p>
                *          <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>.
                *       </p>
                */
            StatelessDefaultActions?: string[];
            /**
                * <p>The actions to take on a fragmented UDP packet if it doesn't match any of the stateless rules in the policy.</p>
                *          <p>You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, <code>aws:forward_to_sfe</code>), and can optionally include a custom action from <code>StatelessCustomActions</code>.
                *       </p>
                */
            StatelessFragmentDefaultActions?: string[];
            /**
                * <p>The stateless rule groups that are used in the firewall policy.</p>
                */
            StatelessRuleGroupReferences?: FirewallPolicyStatelessRuleGroupReferencesDetails[];
    }
    export namespace FirewallPolicyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallPolicyDetails) => any;
    }
    /**
        * <p>Details about a firewall policy. A firewall policy defines the behavior of a network firewall.</p>
        */
    export interface AwsNetworkFirewallFirewallPolicyDetails {
            /**
                * <p>The firewall policy configuration.</p>
                */
            FirewallPolicy?: FirewallPolicyDetails;
            /**
                * <p>The ARN of the firewall policy.</p>
                */
            FirewallPolicyArn?: string;
            /**
                * <p>The identifier of the firewall policy.</p>
                */
            FirewallPolicyId?: string;
            /**
                * <p>The name of the firewall policy.</p>
                */
            FirewallPolicyName?: string;
            /**
                * <p>A description of the firewall policy.</p>
                */
            Description?: string;
    }
    export namespace AwsNetworkFirewallFirewallPolicyDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsNetworkFirewallFirewallPolicyDetails) => any;
    }
    /**
        * <p>Stateful inspection criteria for a domain list rule group.</p>
        */
    export interface RuleGroupSourceListDetails {
            /**
                * <p>Indicates whether to allow or deny access to the domains listed in <code>Targets</code>.</p>
                */
            GeneratedRulesType?: string;
            /**
                * <p>The protocols that you want to inspect. Specify <code>LS_SNI</code> for HTTPS. Specify <code>HTTP_HOST</code> for HTTP. You can specify either or both.</p>
                */
            TargetTypes?: string[];
            /**
                * <p>The domains that you want to inspect for in your traffic flows. You can provide full domain names, or use the '.' prefix as a wildcard. For example, <code>.example.com</code> matches all domains that end with <code>example.com</code>.</p>
                */
            Targets?: string[];
    }
    export namespace RuleGroupSourceListDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceListDetails) => any;
    }
    /**
        * <p>The inspection criteria for a stateful rule.</p>
        */
    export interface RuleGroupSourceStatefulRulesHeaderDetails {
            /**
                * <p>The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
                */
            Destination?: string;
            /**
                * <p>The destination port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
                */
            DestinationPort?: string;
            /**
                * <p>The direction of traffic flow to inspect. If set to <code>ANY</code>, the inspection matches bidirectional traffic, both from the source to the destination and from the destination to the source. If set to <code>FORWARD</code>, the inspection only matches traffic going from the source to the destination.</p>
                */
            Direction?: string;
            /**
                * <p>The protocol to inspect for. To inspector for all protocols, use <code>IP</code>.</p>
                */
            Protocol?: string;
            /**
                * <p>The source IP address or address range to inspect for, in CIDR notation. To match with any address, specify <code>ANY</code>.</p>
                */
            Source?: string;
            /**
                * <p>The source port to inspect for. You can specify an individual port, such as <code>1994</code>. You also can specify a port range, such as <code>1990:1994</code>. To match with any port, specify <code>ANY</code>.</p>
                */
            SourcePort?: string;
    }
    export namespace RuleGroupSourceStatefulRulesHeaderDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatefulRulesHeaderDetails) => any;
    }
    /**
        * <p>A rule option for a stateful rule.</p>
        */
    export interface RuleGroupSourceStatefulRulesOptionsDetails {
            /**
                * <p>A keyword to look for.</p>
                */
            Keyword?: string;
            /**
                * <p>A list of settings.</p>
                */
            Settings?: string[];
    }
    export namespace RuleGroupSourceStatefulRulesOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatefulRulesOptionsDetails) => any;
    }
    /**
        * <p>A Suricata rule specification.</p>
        */
    export interface RuleGroupSourceStatefulRulesDetails {
            /**
                * <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow matches the stateful rule criteria.</p>
                */
            Action?: string;
            /**
                * <p>The stateful inspection criteria for the rule.</p>
                */
            Header?: RuleGroupSourceStatefulRulesHeaderDetails;
            /**
                * <p>Additional options for the rule.</p>
                */
            RuleOptions?: RuleGroupSourceStatefulRulesOptionsDetails[];
    }
    export namespace RuleGroupSourceStatefulRulesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatefulRulesDetails) => any;
    }
    /**
        * <p>A custom action definition. A custom action is an optional, non-standard action to use for stateless packet handling.</p>
        */
    export interface RuleGroupSourceCustomActionsDetails {
            /**
                * <p>The definition of a custom action.</p>
                */
            ActionDefinition?: StatelessCustomActionDefinition;
            /**
                * <p>A descriptive name of the custom action.</p>
                */
            ActionName?: string;
    }
    export namespace RuleGroupSourceCustomActionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceCustomActionsDetails) => any;
    }
    /**
        * <p>A port range to specify the destination ports to inspect for.</p>
        */
    export interface RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts {
            /**
                * <p>The starting port value for the port range.</p>
                */
            FromPort?: number;
            /**
                * <p>The ending port value for the port range.</p>
                */
            ToPort?: number;
    }
    export namespace RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts) => any;
    }
    /**
        * <p>A destination IP address or range.</p>
        */
    export interface RuleGroupSourceStatelessRuleMatchAttributesDestinations {
            /**
                * <p>An IP address or a block of IP addresses.</p>
                */
            AddressDefinition?: string;
    }
    export namespace RuleGroupSourceStatelessRuleMatchAttributesDestinations {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRuleMatchAttributesDestinations) => any;
    }
    /**
        * <p>A port range to specify the source ports to inspect for.</p>
        */
    export interface RuleGroupSourceStatelessRuleMatchAttributesSourcePorts {
            /**
                * <p>The starting port value for the port range.</p>
                */
            FromPort?: number;
            /**
                * <p>The ending port value for the port range.</p>
                */
            ToPort?: number;
    }
    export namespace RuleGroupSourceStatelessRuleMatchAttributesSourcePorts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRuleMatchAttributesSourcePorts) => any;
    }
    /**
        * <p>A source IP addresses and address range to inspect for.</p>
        */
    export interface RuleGroupSourceStatelessRuleMatchAttributesSources {
            /**
                * <p>An IP address or a block of IP addresses.</p>
                */
            AddressDefinition?: string;
    }
    export namespace RuleGroupSourceStatelessRuleMatchAttributesSources {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRuleMatchAttributesSources) => any;
    }
    /**
        * <p>A set of TCP flags and masks to inspect for.</p>
        */
    export interface RuleGroupSourceStatelessRuleMatchAttributesTcpFlags {
            /**
                * <p>Defines the flags from the <code>Masks</code> setting that must be set in order for the packet to match. Flags that are listed must be set. Flags that are not listed must not be set.</p>
                */
            Flags?: string[];
            /**
                * <p>The set of flags to consider in the inspection. If not specified, then all flags are inspected.</p>
                */
            Masks?: string[];
    }
    export namespace RuleGroupSourceStatelessRuleMatchAttributesTcpFlags {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRuleMatchAttributesTcpFlags) => any;
    }
    /**
        * <p>Criteria for the stateless rule.</p>
        */
    export interface RuleGroupSourceStatelessRuleMatchAttributes {
            /**
                * <p>A list of port ranges to specify the destination ports to inspect for.</p>
                */
            DestinationPorts?: RuleGroupSourceStatelessRuleMatchAttributesDestinationPorts[];
            /**
                * <p>The destination IP addresses and address ranges to inspect for, in CIDR notation.</p>
                */
            Destinations?: RuleGroupSourceStatelessRuleMatchAttributesDestinations[];
            /**
                * <p>The protocols to inspect for.</p>
                */
            Protocols?: number[];
            /**
                * <p>A list of port ranges to specify the source ports to inspect for.</p>
                */
            SourcePorts?: RuleGroupSourceStatelessRuleMatchAttributesSourcePorts[];
            /**
                * <p>The source IP addresses and address ranges to inspect for, in CIDR notation.</p>
                */
            Sources?: RuleGroupSourceStatelessRuleMatchAttributesSources[];
            /**
                * <p>The TCP flags and masks to inspect for.</p>
                */
            TcpFlags?: RuleGroupSourceStatelessRuleMatchAttributesTcpFlags[];
    }
    export namespace RuleGroupSourceStatelessRuleMatchAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRuleMatchAttributes) => any;
    }
    /**
        * <p>The definition of the stateless rule.</p>
        */
    export interface RuleGroupSourceStatelessRuleDefinition {
            /**
                * <p>The actions to take on a packet that matches one of the stateless rule definition's match attributes. You must specify a standard action (<code>aws:pass</code>, <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>). You can then add custom actions.</p>
                */
            Actions?: string[];
            /**
                * <p>The criteria for Network Firewall to use to inspect an individual packet in a stateless rule inspection.</p>
                */
            MatchAttributes?: RuleGroupSourceStatelessRuleMatchAttributes;
    }
    export namespace RuleGroupSourceStatelessRuleDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRuleDefinition) => any;
    }
    /**
        * <p>A stateless rule in the rule group.</p>
        */
    export interface RuleGroupSourceStatelessRulesDetails {
            /**
                * <p>Indicates the order in which to run this rule relative to all of the rules in the stateless rule group.</p>
                */
            Priority?: number;
            /**
                * <p>Provides the definition of the stateless rule.</p>
                */
            RuleDefinition?: RuleGroupSourceStatelessRuleDefinition;
    }
    export namespace RuleGroupSourceStatelessRulesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRulesDetails) => any;
    }
    /**
        * <p>Stateless rules and custom actions for a stateless rule group.</p>
        */
    export interface RuleGroupSourceStatelessRulesAndCustomActionsDetails {
            /**
                * <p>Custom actions for the rule group.</p>
                */
            CustomActions?: RuleGroupSourceCustomActionsDetails[];
            /**
                * <p>Stateless rules for the rule group.</p>
                */
            StatelessRules?: RuleGroupSourceStatelessRulesDetails[];
    }
    export namespace RuleGroupSourceStatelessRulesAndCustomActionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSourceStatelessRulesAndCustomActionsDetails) => any;
    }
    /**
        * <p>The rules and actions for the rule group.</p>
        */
    export interface RuleGroupSource {
            /**
                * <p>Stateful inspection criteria for a domain list rule group. A domain list rule group determines access by specific protocols to specific domains.</p>
                */
            RulesSourceList?: RuleGroupSourceListDetails;
            /**
                * <p>Stateful inspection criteria, provided in Suricata compatible intrusion prevention system (IPS) rules.</p>
                */
            RulesString?: string;
            /**
                * <p>Suricata rule specifications.</p>
                */
            StatefulRules?: RuleGroupSourceStatefulRulesDetails[];
            /**
                * <p>The stateless rules and custom actions used by a stateless rule group.</p>
                */
            StatelessRulesAndCustomActions?: RuleGroupSourceStatelessRulesAndCustomActionsDetails;
    }
    export namespace RuleGroupSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSource) => any;
    }
    /**
        * <p>A list of IP addresses and address ranges, in CIDR notation.</p>
        */
    export interface RuleGroupVariablesIpSetsDetails {
            /**
                * <p>The list of IP addresses and ranges.</p>
                */
            Definition?: string[];
    }
    export namespace RuleGroupVariablesIpSetsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupVariablesIpSetsDetails) => any;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AccountDetails, Action, ActionTarget, Adjustment, AdminAccount, AutoEnableStandards, AwsApiGatewayRestApiDetails, AwsApiGatewayStageDetails, AwsApiGatewayV2ApiDetails, AwsApiGatewayV2StageDetails, AwsAutoScalingAutoScalingGroupDetails, AwsAutoScalingLaunchConfigurationDetails, AwsCertificateManagerCertificateDetails, AwsCloudFormationStackDetails, AwsCloudFrontDistributionDetails, AwsCloudTrailTrailDetails, AwsCloudWatchAlarmDetails, AwsCodeBuildProjectDetails, AwsDynamoDbTableDetails, AwsEc2EipDetails, AwsEc2InstanceDetails, AwsEc2NetworkAclDetails, AwsEc2NetworkInterfaceDetails, AwsEc2SecurityGroupDetails, AwsEc2SubnetDetails, AwsEc2TransitGatewayDetails, AwsEc2VolumeDetails, AwsEc2VpcDetails, AwsEc2VpcEndpointServiceDetails, AwsEc2VpcPeeringConnectionDetails, AwsEc2VpnConnectionDetails, AwsEcrContainerImageDetails, AwsEcrRepositoryDetails, AwsEcsClusterDetails, AwsEcsContainerDetails, AwsEcsServiceDetails, AwsEcsTaskDefinitionDetails, AwsEcsTaskDetails, AwsEfsAccessPointDetails, AwsEksClusterDetails, AwsElasticBeanstalkEnvironmentDetails, AwsElasticsearchDomainDetails, AwsElbLoadBalancerDetails, AwsElbv2LoadBalancerDetails, AwsIamAccessKeyDetails, AwsIamGroupDetails, AwsIamPolicyDetails, AwsIamRoleDetails, AwsIamUserDetails, AwsKinesisStreamDetails, AwsKmsKeyDetails, AwsLambdaFunctionDetails, AwsLambdaLayerVersionDetails, AwsNetworkFirewallFirewallDetails, AwsNetworkFirewallFirewallPolicyDetails, RuleGroupSource, RuleGroupVariablesIpSetsDetails } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_0";
    import { SecurityHubServiceException as __BaseException } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/SecurityHubServiceException";
    /**
        * <p>A list of port ranges.</p>
        */
    export interface RuleGroupVariablesPortSetsDetails {
            /**
                * <p>The list of port ranges.</p>
                */
            Definition?: string[];
    }
    export namespace RuleGroupVariablesPortSetsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupVariablesPortSetsDetails) => any;
    }
    /**
        * <p>Additional settings to use in the specified rules.</p>
        */
    export interface RuleGroupVariables {
            /**
                * <p>A list of IP addresses and address ranges, in CIDR notation.</p>
                */
            IpSets?: RuleGroupVariablesIpSetsDetails;
            /**
                * <p>A list of port ranges.</p>
                */
            PortSets?: RuleGroupVariablesPortSetsDetails;
    }
    export namespace RuleGroupVariables {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupVariables) => any;
    }
    /**
        * <p>Details about the rule group.</p>
        */
    export interface RuleGroupDetails {
            /**
                * <p>Additional settings to use in the specified rules.</p>
                */
            RuleVariables?: RuleGroupVariables;
            /**
                * <p>The rules and actions for the rule group.</p>
                *          <p>For stateful rule groups, can contain <code>RulesString</code>, <code>RulesSourceList</code>, or <code>StatefulRules</code>.</p>
                *          <p>For stateless rule groups, contains <code>StatelessRulesAndCustomActions</code>.</p>
                */
            RulesSource?: RuleGroupSource;
    }
    export namespace RuleGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupDetails) => any;
    }
    /**
        * <p>Details about an Network Firewall rule group. Rule groups are used to inspect and control network traffic. Stateless rule groups apply to individual packets. Stateful rule groups apply to packets in the context of their traffic flow.</p>
        *          <p>Rule groups are referenced in firewall policies.
        *       </p>
        */
    export interface AwsNetworkFirewallRuleGroupDetails {
            /**
                * <p>The maximum number of operating resources that this rule group can use.</p>
                */
            Capacity?: number;
            /**
                * <p>A description of the rule group.</p>
                */
            Description?: string;
            /**
                * <p>Details about the rule group.</p>
                */
            RuleGroup?: RuleGroupDetails;
            /**
                * <p>The ARN of the rule group.</p>
                */
            RuleGroupArn?: string;
            /**
                * <p>The identifier of the rule group.</p>
                */
            RuleGroupId?: string;
            /**
                * <p>The descriptive name of the rule group.</p>
                */
            RuleGroupName?: string;
            /**
                * <p>The type of rule group. A rule group can be stateful or stateless.</p>
                */
            Type?: string;
    }
    export namespace AwsNetworkFirewallRuleGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsNetworkFirewallRuleGroupDetails) => any;
    }
    /**
        * <p>Specifies information about the master user of the domain.
        *       </p>
        */
    export interface AwsOpenSearchServiceDomainMasterUserOptionsDetails {
            /**
                * <p>The Amazon Resource Name (ARN) for the master user.
                *       </p>
                */
            MasterUserArn?: string;
            /**
                * <p>The username for the master user.
                *       </p>
                */
            MasterUserName?: string;
            /**
                * <p>The password for the master user.
                *       </p>
                */
            MasterUserPassword?: string;
    }
    export namespace AwsOpenSearchServiceDomainMasterUserOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainMasterUserOptionsDetails) => any;
    }
    /**
        * <p>Provides information about domain access control options.
        *       </p>
        */
    export interface AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails {
            /**
                * <p>Enables fine-grained access control.
                *       </p>
                */
            Enabled?: boolean;
            /**
                * <p>Enables the internal user database.
                *       </p>
                */
            InternalUserDatabaseEnabled?: boolean;
            /**
                * <p>Specifies information about the master user of the domain.
                *       </p>
                */
            MasterUserOptions?: AwsOpenSearchServiceDomainMasterUserOptionsDetails;
    }
    export namespace AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails) => any;
    }
    /**
        * <p>Configuration options for zone awareness.</p>
        */
    export interface AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails {
            /**
                * <p>The number of Availability Zones that the domain uses. Valid values are 2 and 3. The default is 2.</p>
                */
            AvailabilityZoneCount?: number;
    }
    export namespace AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails) => any;
    }
    /**
        * <p>Details about the configuration of an OpenSearch cluster.</p>
        */
    export interface AwsOpenSearchServiceDomainClusterConfigDetails {
            /**
                * <p>The number of data nodes to use in the OpenSearch domain.</p>
                */
            InstanceCount?: number;
            /**
                * <p>Whether UltraWarm is enabled.</p>
                */
            WarmEnabled?: boolean;
            /**
                * <p>The number of UltraWarm instances.</p>
                */
            WarmCount?: number;
            /**
                * <p>Whether to use a dedicated master node for the OpenSearch domain. A dedicated master node performs cluster management tasks, but does not hold data or respond to data upload requests.</p>
                */
            DedicatedMasterEnabled?: boolean;
            /**
                * <p>Configuration options for zone awareness. Provided if <code>ZoneAwarenessEnabled</code> is <code>true</code>.</p>
                */
            ZoneAwarenessConfig?: AwsOpenSearchServiceDomainClusterConfigZoneAwarenessConfigDetails;
            /**
                * <p>The number of instances to use for the master node. If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.</p>
                */
            DedicatedMasterCount?: number;
            /**
                * <p>The instance type for your data nodes. </p>
                */
            InstanceType?: string;
            /**
                * <p>The type of UltraWarm instance.</p>
                */
            WarmType?: string;
            /**
                * <p>Whether to enable zone awareness for the OpenSearch domain. When zone awareness is enabled, OpenSearch Service allocates the cluster's nodes and replica index shards across Availability Zones (AZs) in the same Region. This prevents data loss and minimizes downtime if a node or data center fails.</p>
                */
            ZoneAwarenessEnabled?: boolean;
            /**
                * <p>The hardware configuration of the computer that hosts the dedicated master node.</p>
                *          <p>If this attribute is specified, then <code>DedicatedMasterEnabled</code> must be <code>true</code>.
                *       </p>
                */
            DedicatedMasterType?: string;
    }
    export namespace AwsOpenSearchServiceDomainClusterConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainClusterConfigDetails) => any;
    }
    /**
        * <p>Information about additional options for the domain endpoint.</p>
        */
    export interface AwsOpenSearchServiceDomainDomainEndpointOptionsDetails {
            /**
                * <p>The ARN for the security certificate. The certificate is managed in ACM.</p>
                */
            CustomEndpointCertificateArn?: string;
            /**
                * <p>Whether to enable a custom endpoint for the domain.</p>
                */
            CustomEndpointEnabled?: boolean;
            /**
                * <p>Whether to require that all traffic to the domain arrive over HTTPS.</p>
                */
            EnforceHTTPS?: boolean;
            /**
                * <p>The fully qualified URL for the custom endpoint.</p>
                */
            CustomEndpoint?: string;
            /**
                * <p>The TLS security policy to apply to the HTTPS endpoint of the OpenSearch domain.</p>
                */
            TLSSecurityPolicy?: string;
    }
    export namespace AwsOpenSearchServiceDomainDomainEndpointOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainDomainEndpointOptionsDetails) => any;
    }
    /**
        * <p>Details about the configuration for encryption at rest for the OpenSearch domain.</p>
        */
    export interface AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails {
            /**
                * <p>Whether encryption at rest is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The KMS key ID.</p>
                */
            KmsKeyId?: string;
    }
    export namespace AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails) => any;
    }
    /**
        * <p>Configuration details for a log publishing option.</p>
        */
    export interface AwsOpenSearchServiceDomainLogPublishingOption {
            /**
                * <p>The ARN of the CloudWatch Logs group to publish the logs to.</p>
                */
            CloudWatchLogsLogGroupArn?: string;
            /**
                * <p>Whether the log publishing is enabled.</p>
                */
            Enabled?: boolean;
    }
    export namespace AwsOpenSearchServiceDomainLogPublishingOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainLogPublishingOption) => any;
    }
    /**
        * <p>Configures the CloudWatch Logs to publish for the OpenSearch domain.</p>
        */
    export interface AwsOpenSearchServiceDomainLogPublishingOptionsDetails {
            /**
                * <p>Configures the OpenSearch index logs publishing.</p>
                */
            IndexSlowLogs?: AwsOpenSearchServiceDomainLogPublishingOption;
            /**
                * <p>Configures the OpenSearch search slow log publishing.</p>
                */
            SearchSlowLogs?: AwsOpenSearchServiceDomainLogPublishingOption;
            /**
                * <p>Configures the OpenSearch audit logs publishing.</p>
                */
            AuditLogs?: AwsOpenSearchServiceDomainLogPublishingOption;
    }
    export namespace AwsOpenSearchServiceDomainLogPublishingOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainLogPublishingOptionsDetails) => any;
    }
    /**
        * <p>Provides details about the configuration for node-to-node encryption.</p>
        */
    export interface AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails {
            /**
                * <p>Whether node-to-node encryption is enabled.</p>
                */
            Enabled?: boolean;
    }
    export namespace AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails) => any;
    }
    /**
        * <p>Provides information about the state of the domain relative to the latest service software.</p>
        */
    export interface AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails {
            /**
                * <p>The epoch time when the deployment window closes for required updates. After this time, OpenSearch Service schedules the software upgrade automatically.</p>
                */
            AutomatedUpdateDate?: string;
            /**
                * <p>Whether a request to update the domain can be canceled.</p>
                */
            Cancellable?: boolean;
            /**
                * <p>The version of the service software that is currently installed on the domain.</p>
                */
            CurrentVersion?: string;
            /**
                * <p>A more detailed description of the service software status.</p>
                */
            Description?: string;
            /**
                * <p>The most recent version of the service software.</p>
                */
            NewVersion?: string;
            /**
                * <p>Whether a service software update is available for the domain.</p>
                */
            UpdateAvailable?: boolean;
            /**
                * <p>The status of the service software update.</p>
                */
            UpdateStatus?: string;
            /**
                * <p>Whether the service software update is optional.</p>
                */
            OptionalDeployment?: boolean;
    }
    export namespace AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails) => any;
    }
    /**
        * <p>Contains information that OpenSearch Service derives based on the <code>VPCOptions</code> for the domain.</p>
        */
    export interface AwsOpenSearchServiceDomainVpcOptionsDetails {
            /**
                * <p>The list of security group IDs that are associated with the VPC endpoints for the domain.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A list of subnet IDs that are associated with the VPC endpoints for the domain.</p>
                */
            SubnetIds?: string[];
    }
    export namespace AwsOpenSearchServiceDomainVpcOptionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainVpcOptionsDetails) => any;
    }
    /**
        * <p>Information about an Amazon OpenSearch Service domain.</p>
        */
    export interface AwsOpenSearchServiceDomainDetails {
            /**
                * <p>The ARN of the OpenSearch Service domain.</p>
                */
            Arn?: string;
            /**
                * <p>IAM policy document that specifies the access policies for the OpenSearch Service domain.</p>
                */
            AccessPolicies?: string;
            /**
                * <p>The name of the endpoint.</p>
                */
            DomainName?: string;
            /**
                * <p>The identifier of the domain.</p>
                */
            Id?: string;
            /**
                * <p>The domain endpoint.</p>
                */
            DomainEndpoint?: string;
            /**
                * <p>The version of the domain engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Details about the configuration for encryption at rest.</p>
                */
            EncryptionAtRestOptions?: AwsOpenSearchServiceDomainEncryptionAtRestOptionsDetails;
            /**
                * <p>Details about the configuration for node-to-node encryption.</p>
                */
            NodeToNodeEncryptionOptions?: AwsOpenSearchServiceDomainNodeToNodeEncryptionOptionsDetails;
            /**
                * <p>Information about the status of a domain relative to the latest service software.</p>
                */
            ServiceSoftwareOptions?: AwsOpenSearchServiceDomainServiceSoftwareOptionsDetails;
            /**
                * <p>Details about the configuration of an OpenSearch cluster.</p>
                */
            ClusterConfig?: AwsOpenSearchServiceDomainClusterConfigDetails;
            /**
                * <p>Additional options for the domain endpoint.</p>
                */
            DomainEndpointOptions?: AwsOpenSearchServiceDomainDomainEndpointOptionsDetails;
            /**
                * <p>Information that OpenSearch Service derives based on <code>VPCOptions</code> for the domain.</p>
                */
            VpcOptions?: AwsOpenSearchServiceDomainVpcOptionsDetails;
            /**
                * <p>Configures the CloudWatch Logs to publish for the OpenSearch domain.</p>
                */
            LogPublishingOptions?: AwsOpenSearchServiceDomainLogPublishingOptionsDetails;
            /**
                * <p>The domain endpoints. Used if the OpenSearch domain resides in a VPC.</p>
                *          <p>This is a map of key-value pairs. The key is always <code>vpc</code>. The value is the endpoint.</p>
                */
            DomainEndpoints?: Record<string, string>;
            /**
                * <p>Specifies options for fine-grained access control.
                *       </p>
                */
            AdvancedSecurityOptions?: AwsOpenSearchServiceDomainAdvancedSecurityOptionsDetails;
    }
    export namespace AwsOpenSearchServiceDomainDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsOpenSearchServiceDomainDetails) => any;
    }
    /**
        * <p>An IAM role that is associated with the Amazon RDS DB cluster.</p>
        */
    export interface AwsRdsDbClusterAssociatedRole {
            /**
                * <p>The ARN of the IAM role.</p>
                */
            RoleArn?: string;
            /**
                * <p>The status of the association between the IAM role and the DB cluster.</p>
                */
            Status?: string;
    }
    export namespace AwsRdsDbClusterAssociatedRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbClusterAssociatedRole) => any;
    }
    /**
        * <p>Information about an instance in the DB cluster.</p>
        */
    export interface AwsRdsDbClusterMember {
            /**
                * <p>Whether the cluster member is the primary instance for the DB cluster.</p>
                */
            IsClusterWriter?: boolean;
            /**
                * <p>Specifies the order in which an Aurora replica is promoted to the primary instance when
                *          the existing primary instance fails.</p>
                */
            PromotionTier?: number;
            /**
                * <p>The instance identifier for this member of the DB cluster.</p>
                */
            DbInstanceIdentifier?: string;
            /**
                * <p>The status of the DB cluster parameter group for this member of the DB cluster.</p>
                */
            DbClusterParameterGroupStatus?: string;
    }
    export namespace AwsRdsDbClusterMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbClusterMember) => any;
    }
    /**
        * <p>Information about an option group membership for a DB cluster.</p>
        */
    export interface AwsRdsDbClusterOptionGroupMembership {
            /**
                * <p>The name of the DB cluster option group.</p>
                */
            DbClusterOptionGroupName?: string;
            /**
                * <p>The status of the DB cluster option group.</p>
                */
            Status?: string;
    }
    export namespace AwsRdsDbClusterOptionGroupMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbClusterOptionGroupMembership) => any;
    }
    /**
        * <p>Information about an Active Directory domain membership record associated with the DB
        *          instance.</p>
        */
    export interface AwsRdsDbDomainMembership {
            /**
                * <p>The identifier of the Active Directory domain.</p>
                */
            Domain?: string;
            /**
                * <p>The status of the Active Directory Domain membership for the DB instance.</p>
                */
            Status?: string;
            /**
                * <p>The fully qualified domain name of the Active Directory domain.</p>
                */
            Fqdn?: string;
            /**
                * <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
                */
            IamRoleName?: string;
    }
    export namespace AwsRdsDbDomainMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbDomainMembership) => any;
    }
    /**
        * <p>A VPC security groups that the DB instance belongs to.</p>
        */
    export interface AwsRdsDbInstanceVpcSecurityGroup {
            /**
                * <p>The name of the VPC security group.</p>
                */
            VpcSecurityGroupId?: string;
            /**
                * <p>The status of the VPC security group.</p>
                */
            Status?: string;
    }
    export namespace AwsRdsDbInstanceVpcSecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbInstanceVpcSecurityGroup) => any;
    }
    /**
        * <p>Information about an Amazon RDS DB cluster.</p>
        */
    export interface AwsRdsDbClusterDetails {
            /**
                * <p>For all database engines except Aurora, specifies the allocated storage size in
                *          gibibytes (GiB).</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>A list of Availability Zones (AZs) where instances in the DB cluster can be
                *          created.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The number of days for which automated backups are retained.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The name of the database.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The current status of this DB cluster.</p>
                */
            Status?: string;
            /**
                * <p>The connection endpoint for the primary instance of the DB cluster.</p>
                */
            Endpoint?: string;
            /**
                * <p>The reader endpoint for the DB cluster.</p>
                */
            ReaderEndpoint?: string;
            /**
                * <p>A list of custom endpoints for the DB cluster.</p>
                */
            CustomEndpoints?: string[];
            /**
                * <p>Whether the DB cluster has instances in multiple Availability Zones.</p>
                */
            MultiAz?: boolean;
            /**
                * <p>The name of the database engine to use for this DB cluster.</p>
                */
            Engine?: string;
            /**
                * <p>The version number of the database engine to use.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The port number on which the DB instances in the DB cluster accept connections.</p>
                */
            Port?: number;
            /**
                * <p>The name of the master user for the DB cluster.</p>
                */
            MasterUsername?: string;
            /**
                * <p>The range of time each day when automated backups are created, if automated backups are
                *          enabled.</p>
                *          <p>Uses the format <code>HH:MM-HH:MM</code>. For example, <code>04:52-05:22</code>.</p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur, in Universal
                *          Coordinated Time (UTC).</p>
                *          <p>Uses the format <code><day>:HH:MM-<day>:HH:MM</code>.</p>
                *          <p>For the day values, use
                *             <code>mon</code>|<code>tue</code>|<code>wed</code>|<code>thu</code>|<code>fri</code>|<code>sat</code>|<code>sun</code>.</p>
                *          <p>For example, <code>sun:09:32-sun:10:02</code>.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The identifiers of the read replicas that are associated with this DB cluster.</p>
                */
            ReadReplicaIdentifiers?: string[];
            /**
                * <p>A list of VPC security groups that the DB cluster belongs to.</p>
                */
            VpcSecurityGroups?: AwsRdsDbInstanceVpcSecurityGroup[];
            /**
                * <p>Specifies the identifier that Amazon Route 53 assigns when you create a hosted
                *          zone.</p>
                */
            HostedZoneId?: string;
            /**
                * <p>Whether the DB cluster is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The ARN of the KMS master key that is used to encrypt the database instances in the
                *          DB cluster.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The identifier of the DB cluster. The identifier must be unique within each Amazon Web Services Region
                *          and is immutable.</p>
                */
            DbClusterResourceId?: string;
            /**
                * <p>A list of the IAM roles that are associated with the DB cluster.</p>
                */
            AssociatedRoles?: AwsRdsDbClusterAssociatedRole[];
            /**
                * <p>Indicates when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            ClusterCreateTime?: string;
            /**
                * <p>A list of log types that this DB cluster is configured to export to CloudWatch
                *          Logs.</p>
                */
            EnabledCloudWatchLogsExports?: string[];
            /**
                * <p>The database engine mode of the DB cluster.</p>
                */
            EngineMode?: string;
            /**
                * <p>Whether the DB cluster has deletion protection enabled.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>Whether the HTTP endpoint for an Aurora Serverless DB cluster is enabled.</p>
                */
            HttpEndpointEnabled?: boolean;
            /**
                * <p>The status of the database activity stream.</p>
                */
            ActivityStreamStatus?: string;
            /**
                * <p>Whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>Whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services
                *          account.</p>
                */
            CrossAccountClone?: boolean;
            /**
                * <p>The Active Directory domain membership records that are associated with the DB
                *          cluster.</p>
                */
            DomainMemberships?: AwsRdsDbDomainMembership[];
            /**
                * <p>The name of the DB cluster parameter group for the DB cluster.</p>
                */
            DbClusterParameterGroup?: string;
            /**
                * <p>The subnet group that is associated with the DB cluster, including the name,
                *          description, and subnets in the subnet group.</p>
                */
            DbSubnetGroup?: string;
            /**
                * <p>The list of option group memberships for this DB cluster.</p>
                */
            DbClusterOptionGroupMemberships?: AwsRdsDbClusterOptionGroupMembership[];
            /**
                * <p>The DB cluster identifier that the user assigned to the cluster. This identifier is the
                *          unique key that identifies a DB cluster.</p>
                */
            DbClusterIdentifier?: string;
            /**
                * <p>The list of instances that make up the DB cluster.</p>
                */
            DbClusterMembers?: AwsRdsDbClusterMember[];
            /**
                * <p>Whether the mapping of IAM accounts to database accounts is enabled.</p>
                */
            IamDatabaseAuthenticationEnabled?: boolean;
    }
    export namespace AwsRdsDbClusterDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbClusterDetails) => any;
    }
    /**
        * <p>Information about an Amazon RDS DB cluster snapshot.</p>
        */
    export interface AwsRdsDbClusterSnapshotDetails {
            /**
                * <p>A list of Availability Zones where instances in the DB cluster can be created.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>Indicates when the snapshot was taken.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            SnapshotCreateTime?: string;
            /**
                * <p>The name of the database engine that you want to use for this DB instance.</p>
                */
            Engine?: string;
            /**
                * <p>Specifies the allocated storage size in gibibytes (GiB).</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The status of this DB cluster snapshot.</p>
                */
            Status?: string;
            /**
                * <p>The port number on which the DB instances in the DB cluster accept connections.</p>
                */
            Port?: number;
            /**
                * <p>The VPC ID that is associated with the DB cluster snapshot.</p>
                */
            VpcId?: string;
            /**
                * <p>Indicates when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            ClusterCreateTime?: string;
            /**
                * <p>The name of the master user for the DB cluster.</p>
                */
            MasterUsername?: string;
            /**
                * <p>The version of the database engine to use.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The license model information for this DB cluster snapshot.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The type of DB cluster snapshot.</p>
                */
            SnapshotType?: string;
            /**
                * <p>Specifies the percentage of the estimated data that has been transferred.</p>
                */
            PercentProgress?: number;
            /**
                * <p>Whether the DB cluster is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The ARN of the KMS master key that is used to encrypt the database instances in the
                *          DB cluster.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The DB cluster identifier.</p>
                */
            DbClusterIdentifier?: string;
            /**
                * <p>The identifier of the DB cluster snapshot.</p>
                */
            DbClusterSnapshotIdentifier?: string;
            /**
                * <p>Whether mapping of IAM accounts to database accounts is enabled.</p>
                */
            IamDatabaseAuthenticationEnabled?: boolean;
    }
    export namespace AwsRdsDbClusterSnapshotDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbClusterSnapshotDetails) => any;
    }
    /**
        * <p>An IAM role associated with the DB instance.</p>
        */
    export interface AwsRdsDbInstanceAssociatedRole {
            /**
                * <p>The ARN of the IAM role that is associated with the DB
                *          instance.</p>
                */
            RoleArn?: string;
            /**
                * <p>The name of the feature associated with the IAM role.</p>
                */
            FeatureName?: string;
            /**
                * <p>Describes the state of the association between the IAM role and the DB instance. The
                *             <code>Status</code> property returns one of the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ACTIVE</code> - The IAM role ARN is associated with the DB instance and can
                *                be used to access other Amazon Web Services services on your behalf.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PENDING</code> - The IAM role ARN is being associated with the DB
                *                instance.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INVALID</code> - The IAM role ARN is associated with the DB instance. But
                *                the DB instance is unable to assume the IAM role in order to access other Amazon Web Services
                *                services on your behalf. </p>
                *             </li>
                *          </ul>
                */
            Status?: string;
    }
    export namespace AwsRdsDbInstanceAssociatedRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbInstanceAssociatedRole) => any;
    }
    /**
        * <p>Provides information about a parameter group for a DB instance.</p>
        */
    export interface AwsRdsDbParameterGroup {
            /**
                * <p>The name of the parameter group.</p>
                */
            DbParameterGroupName?: string;
            /**
                * <p>The status of parameter updates.</p>
                */
            ParameterApplyStatus?: string;
    }
    export namespace AwsRdsDbParameterGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbParameterGroup) => any;
    }
    /**
        * <p>An Availability Zone for a subnet in a subnet group.</p>
        */
    export interface AwsRdsDbSubnetGroupSubnetAvailabilityZone {
            /**
                * <p>The name of the Availability Zone for a subnet in the subnet group.</p>
                */
            Name?: string;
    }
    export namespace AwsRdsDbSubnetGroupSubnetAvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbSubnetGroupSubnetAvailabilityZone) => any;
    }
    /**
        * <p>Information about a subnet in a subnet group.</p>
        */
    export interface AwsRdsDbSubnetGroupSubnet {
            /**
                * <p>The identifier of a subnet in the subnet group.</p>
                */
            SubnetIdentifier?: string;
            /**
                * <p>Information about the Availability Zone for a subnet in the subnet group.</p>
                */
            SubnetAvailabilityZone?: AwsRdsDbSubnetGroupSubnetAvailabilityZone;
            /**
                * <p>The status of a subnet in the subnet group.</p>
                */
            SubnetStatus?: string;
    }
    export namespace AwsRdsDbSubnetGroupSubnet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbSubnetGroupSubnet) => any;
    }
    /**
        * <p>Information about the subnet group for the database instance.</p>
        */
    export interface AwsRdsDbSubnetGroup {
            /**
                * <p>The name of the subnet group.</p>
                */
            DbSubnetGroupName?: string;
            /**
                * <p>The description of the subnet group.</p>
                */
            DbSubnetGroupDescription?: string;
            /**
                * <p>The VPC ID of the subnet group.</p>
                */
            VpcId?: string;
            /**
                * <p>The status of the subnet group.</p>
                */
            SubnetGroupStatus?: string;
            /**
                * <p>A list of subnets in the subnet group.</p>
                */
            Subnets?: AwsRdsDbSubnetGroupSubnet[];
            /**
                * <p>The ARN of the subnet group.</p>
                */
            DbSubnetGroupArn?: string;
    }
    export namespace AwsRdsDbSubnetGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbSubnetGroup) => any;
    }
    /**
        * <p>Specifies the connection endpoint.</p>
        */
    export interface AwsRdsDbInstanceEndpoint {
            /**
                * <p>Specifies the DNS address of the DB instance.</p>
                */
            Address?: string;
            /**
                * <p>Specifies the port that the database engine is listening on.</p>
                */
            Port?: number;
            /**
                * <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
                */
            HostedZoneId?: string;
    }
    export namespace AwsRdsDbInstanceEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbInstanceEndpoint) => any;
    }
    /**
        * <p>An option group membership.</p>
        */
    export interface AwsRdsDbOptionGroupMembership {
            /**
                * <p>The name of the option group.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The status of the option group membership.</p>
                */
            Status?: string;
    }
    export namespace AwsRdsDbOptionGroupMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbOptionGroupMembership) => any;
    }
    /**
        * <p>Identifies the log types to enable and disable.</p>
        */
    export interface AwsRdsPendingCloudWatchLogsExports {
            /**
                * <p>A list of log types that are being enabled.</p>
                */
            LogTypesToEnable?: string[];
            /**
                * <p>A list of log types that are being disabled.</p>
                */
            LogTypesToDisable?: string[];
    }
    export namespace AwsRdsPendingCloudWatchLogsExports {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsPendingCloudWatchLogsExports) => any;
    }
    /**
        * <p>A processor feature.</p>
        */
    export interface AwsRdsDbProcessorFeature {
            /**
                * <p>The name of the processor feature.</p>
                */
            Name?: string;
            /**
                * <p>The value of the processor feature.</p>
                */
            Value?: string;
    }
    export namespace AwsRdsDbProcessorFeature {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbProcessorFeature) => any;
    }
    /**
        * <p>Changes to a DB instance that are currently pending.</p>
        */
    export interface AwsRdsDbPendingModifiedValues {
            /**
                * <p>The new DB instance class for the DB instance.</p>
                */
            DbInstanceClass?: string;
            /**
                * <p>The new value of the allocated storage for the DB instance.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The new master user password for the DB instance.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>The new port for the DB instance.</p>
                */
            Port?: number;
            /**
                * <p>The new backup retention period for the DB instance.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>Indicates that a single Availability Zone DB instance is changing to a multiple Availability Zone deployment.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The new engine version for the DB instance.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The new license model value for the DB instance.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The new provisioned IOPS value for the DB instance.</p>
                */
            Iops?: number;
            /**
                * <p>The new DB instance identifier for the DB instance.</p>
                */
            DbInstanceIdentifier?: string;
            /**
                * <p>The new storage type for the DB instance.</p>
                */
            StorageType?: string;
            /**
                * <p>The new CA certificate identifier for the DB instance.</p>
                */
            CaCertificateIdentifier?: string;
            /**
                * <p>The name of the new subnet group for the DB instance.</p>
                */
            DbSubnetGroupName?: string;
            /**
                * <p>A list of log types that are being enabled or disabled.</p>
                */
            PendingCloudWatchLogsExports?: AwsRdsPendingCloudWatchLogsExports;
            /**
                * <p>Processor features that are being updated.</p>
                */
            ProcessorFeatures?: AwsRdsDbProcessorFeature[];
    }
    export namespace AwsRdsDbPendingModifiedValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbPendingModifiedValues) => any;
    }
    /**
        * <p>Information about the status of a read replica.</p>
        */
    export interface AwsRdsDbStatusInfo {
            /**
                * <p>The type of status. For a read replica, the status type is read replication.</p>
                */
            StatusType?: string;
            /**
                * <p>Whether the read replica instance is operating normally.</p>
                */
            Normal?: boolean;
            /**
                * <p>The status of the read replica instance.</p>
                */
            Status?: string;
            /**
                * <p>If the read replica is currently in an error state, provides the error details.</p>
                */
            Message?: string;
    }
    export namespace AwsRdsDbStatusInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbStatusInfo) => any;
    }
    /**
        * <p>Contains the details of an Amazon RDS DB instance.</p>
        */
    export interface AwsRdsDbInstanceDetails {
            /**
                * <p>The IAM roles associated with the DB
                *          instance.</p>
                */
            AssociatedRoles?: AwsRdsDbInstanceAssociatedRole[];
            /**
                * <p>The identifier of the CA certificate for this DB instance.</p>
                */
            CACertificateIdentifier?: string;
            /**
                * <p>If the DB instance is a member of a DB cluster, contains the name of the DB cluster that
                *          the DB instance is a member of.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Contains a user-supplied database identifier. This identifier is the unique key that
                *          identifies a DB instance.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>Contains the name of the compute and memory capacity class of the DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>Specifies the port that the DB instance listens on. If the DB instance is part of a DB
                *          cluster, this can be a different port than the DB cluster port.</p>
                */
            DbInstancePort?: number;
            /**
                * <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is
                *          found in CloudTrail log entries whenever the KMS key for the DB instance is
                *          accessed. </p>
                */
            DbiResourceId?: string;
            /**
                * <p>The meaning of this parameter differs according to the database engine you use.</p>
                *          <p>
                *             <b>MySQL, MariaDB, SQL Server, PostgreSQL</b>
                *          </p>
                *          <p>Contains the name of the initial database of this instance that was provided at create
                *          time, if one was specified when the DB instance was created. This same name is returned for
                *          the life of the DB instance.</p>
                *          <p>
                *             <b>Oracle</b>
                *          </p>
                *          <p>Contains the Oracle System ID (SID) of the created DB instance. Not shown when the
                *          returned parameters do not apply to an Oracle DB instance. </p>
                */
            DBName?: string;
            /**
                * <p>Indicates whether the DB instance has deletion protection enabled.</p>
                *          <p>When deletion protection is enabled, the database cannot be deleted.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>Specifies the connection endpoint.</p>
                */
            Endpoint?: AwsRdsDbInstanceEndpoint;
            /**
                * <p>Provides the name of the database engine to use for this DB instance.</p>
                */
            Engine?: string;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>True if mapping of IAM accounts to database
                *          accounts is enabled, and otherwise false.</p>
                *          <p>IAM database authentication can be enabled for the following database engines.</p>
                *          <ul>
                *             <li>
                *                <p>For MySQL 5.6, minor version 5.6.34 or higher</p>
                *             </li>
                *             <li>
                *                <p>For MySQL 5.7, minor version 5.7.16 or higher</p>
                *             </li>
                *             <li>
                *                <p>Aurora 5.6 or higher</p>
                *             </li>
                *          </ul>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>Indicates when the DB instance was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            InstanceCreateTime?: string;
            /**
                * <p>If <code>StorageEncrypted</code> is true, the KMS key identifier for the encrypted
                *          DB instance.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies the accessibility options for the DB instance.</p>
                *          <p>A value of true specifies an Internet-facing instance with a publicly resolvable DNS
                *          name, which resolves to a public IP address.</p>
                *          <p>A value of false specifies an internal instance with a DNS name that resolves to a
                *          private IP address. </p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>Specifies whether the DB instance is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The ARN from the key store with which the instance is associated for TDE
                *          encryption.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>A list of VPC security groups that the DB instance belongs to.</p>
                */
            VpcSecurityGroups?: AwsRdsDbInstanceVpcSecurityGroup[];
            /**
                * <p>Whether the DB instance is a multiple Availability Zone deployment.</p>
                */
            MultiAz?: boolean;
            /**
                * <p>The ARN of the CloudWatch Logs log stream that receives the enhanced monitoring metrics
                *          data for the DB instance.</p>
                */
            EnhancedMonitoringResourceArn?: string;
            /**
                * <p>The current status of the DB instance.</p>
                */
            DbInstanceStatus?: string;
            /**
                * <p>The master user name of the DB instance.</p>
                */
            MasterUsername?: string;
            /**
                * <p>The amount of storage (in gigabytes) to initially allocate for the DB instance.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The range of time each day when automated backups are created, if automated backups are
                *          enabled.</p>
                *          <p>Uses the format <code>HH:MM-HH:MM</code>. For example, <code>04:52-05:22</code>.</p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The number of days for which to retain automated backups.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>A list of the DB security groups to assign to the DB instance.</p>
                */
            DbSecurityGroups?: string[];
            /**
                * <p>A list of the DB parameter groups to assign to the DB instance.</p>
                */
            DbParameterGroups?: AwsRdsDbParameterGroup[];
            /**
                * <p>The Availability Zone where the DB instance will be created.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>Information about the subnet group that is associated with the DB instance.</p>
                */
            DbSubnetGroup?: AwsRdsDbSubnetGroup;
            /**
                * <p>The weekly time range during which system maintenance can occur, in Universal
                *          Coordinated Time (UTC).</p>
                *          <p>Uses the format <code><day>:HH:MM-<day>:HH:MM</code>.</p>
                *          <p>For the day values, use
                *             <code>mon</code>|<code>tue</code>|<code>wed</code>|<code>thu</code>|<code>fri</code>|<code>sat</code>|<code>sun</code>.</p>
                *          <p>For example, <code>sun:09:32-sun:10:02</code>.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>Changes to the DB instance that are currently pending.</p>
                */
            PendingModifiedValues?: AwsRdsDbPendingModifiedValues;
            /**
                * <p>Specifies the latest time to which a database can be restored with point-in-time
                *          restore.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LatestRestorableTime?: string;
            /**
                * <p>Indicates whether minor version patches are applied automatically.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>If this DB instance is a read replica, contains the identifier of the source DB
                *          instance.</p>
                */
            ReadReplicaSourceDBInstanceIdentifier?: string;
            /**
                * <p>List of identifiers of the read replicas associated with this DB instance.</p>
                */
            ReadReplicaDBInstanceIdentifiers?: string[];
            /**
                * <p>List of identifiers of Aurora DB clusters to which the RDS DB instance is replicated as
                *          a read replica.</p>
                */
            ReadReplicaDBClusterIdentifiers?: string[];
            /**
                * <p>License model information for this DB instance.</p>
                */
            LicenseModel?: string;
            /**
                * <p>Specifies the provisioned IOPS (I/O operations per second) for this DB instance.</p>
                */
            Iops?: number;
            /**
                * <p>The list of option group memberships for this DB instance.</p>
                */
            OptionGroupMemberships?: AwsRdsDbOptionGroupMembership[];
            /**
                * <p>The name of the character set that this DB instance is associated with.</p>
                */
            CharacterSetName?: string;
            /**
                * <p>For a DB instance with multi-Availability Zone support, the name of the secondary
                *          Availability Zone.</p>
                */
            SecondaryAvailabilityZone?: string;
            /**
                * <p>The status of a read replica. If the instance isn't a read replica, this is
                *          empty.</p>
                */
            StatusInfos?: AwsRdsDbStatusInfo[];
            /**
                * <p>The storage type for the DB instance.</p>
                */
            StorageType?: string;
            /**
                * <p>The Active Directory domain membership records associated with the DB instance.</p>
                */
            DomainMemberships?: AwsRdsDbDomainMembership[];
            /**
                * <p>Whether to copy resource tags to snapshots of the DB instance.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>The interval, in seconds, between points when enhanced monitoring metrics are collected
                *          for the DB instance.</p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The ARN for the IAM role that permits Amazon RDS to send enhanced monitoring metrics to
                *          CloudWatch Logs.</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>The order in which to promote an Aurora replica to the primary instance after a failure
                *          of the existing primary instance.</p>
                */
            PromotionTier?: number;
            /**
                * <p>The time zone of the DB instance.</p>
                */
            Timezone?: string;
            /**
                * <p>Indicates whether Performance Insights is enabled for the DB instance.</p>
                */
            PerformanceInsightsEnabled?: boolean;
            /**
                * <p>The identifier of the KMS key used to encrypt the Performance Insights data.</p>
                */
            PerformanceInsightsKmsKeyId?: string;
            /**
                * <p>The number of days to retain Performance Insights data.</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p>
                */
            EnabledCloudWatchLogsExports?: string[];
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of
                *          the DB instance.</p>
                */
            ProcessorFeatures?: AwsRdsDbProcessorFeature[];
            /**
                * <p>Specifies the connection endpoint.</p>
                */
            ListenerEndpoint?: AwsRdsDbInstanceEndpoint;
            /**
                * <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB
                *          instance.</p>
                */
            MaxAllocatedStorage?: number;
    }
    export namespace AwsRdsDbInstanceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbInstanceDetails) => any;
    }
    /**
        * <p>EC2 security group information for an RDS DB security group.</p>
        */
    export interface AwsRdsDbSecurityGroupEc2SecurityGroup {
            /**
                * <p>Specifies the ID for the EC2 security group.</p>
                */
            Ec2SecurityGroupId?: string;
            /**
                * <p>Specifies the name of the EC2 security group.</p>
                */
            Ec2SecurityGroupName?: string;
            /**
                * <p>Provides the Amazon Web Services ID of the owner of the EC2 security group.</p>
                */
            Ec2SecurityGroupOwnerId?: string;
            /**
                * <p>Provides the status of the EC2 security group.</p>
                */
            Status?: string;
    }
    export namespace AwsRdsDbSecurityGroupEc2SecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbSecurityGroupEc2SecurityGroup) => any;
    }
    /**
        * <p>IP range information for an RDS DB security group.</p>
        */
    export interface AwsRdsDbSecurityGroupIpRange {
            /**
                * <p>Specifies the IP range.</p>
                */
            CidrIp?: string;
            /**
                * <p>Specifies the status of the IP range.</p>
                */
            Status?: string;
    }
    export namespace AwsRdsDbSecurityGroupIpRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbSecurityGroupIpRange) => any;
    }
    /**
        * <p>Provides information about an Amazon RDS DB security group.</p>
        */
    export interface AwsRdsDbSecurityGroupDetails {
            /**
                * <p>The ARN for the DB security group.</p>
                */
            DbSecurityGroupArn?: string;
            /**
                * <p>Provides the description of the DB security group.</p>
                */
            DbSecurityGroupDescription?: string;
            /**
                * <p>Specifies the name of the DB security group.</p>
                */
            DbSecurityGroupName?: string;
            /**
                * <p>Contains a list of EC2 security groups.</p>
                */
            Ec2SecurityGroups?: AwsRdsDbSecurityGroupEc2SecurityGroup[];
            /**
                * <p>Contains a list of IP ranges.</p>
                */
            IpRanges?: AwsRdsDbSecurityGroupIpRange[];
            /**
                * <p>Provides the Amazon Web Services ID of the owner of a specific DB security group.</p>
                */
            OwnerId?: string;
            /**
                * <p>Provides VPC ID associated with the DB security group.
                *       </p>
                */
            VpcId?: string;
    }
    export namespace AwsRdsDbSecurityGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbSecurityGroupDetails) => any;
    }
    /**
        * <p>Provides details about an Amazon RDS DB cluster snapshot.</p>
        */
    export interface AwsRdsDbSnapshotDetails {
            /**
                * <p>The name or ARN of the DB snapshot that is used to restore the DB instance.</p>
                */
            DbSnapshotIdentifier?: string;
            /**
                * <p>A name for the DB instance.</p>
                */
            DbInstanceIdentifier?: string;
            /**
                * <p>When the snapshot was taken in Coordinated Universal Time (UTC).</p>
                */
            SnapshotCreateTime?: string;
            /**
                * <p>The name of the database engine to use for this DB instance.</p>
                */
            Engine?: string;
            /**
                * <p>The amount of storage (in gigabytes) to be initially allocated for the database instance.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The status of this DB snapshot.</p>
                */
            Status?: string;
            /**
                * <p>The port that the database engine was listening on at the time of the snapshot.</p>
                */
            Port?: number;
            /**
                * <p>Specifies the name of the Availability Zone in which the DB instance was located at the time of the DB snapshot.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The VPC ID associated with the DB snapshot.</p>
                */
            VpcId?: string;
            /**
                * <p>Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from which the snapshot was taken, was created.</p>
                */
            InstanceCreateTime?: string;
            /**
                * <p>The master user name for the DB snapshot.</p>
                */
            MasterUsername?: string;
            /**
                * <p>The version of the database engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>License model information for the restored DB instance.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The type of the DB snapshot.</p>
                */
            SnapshotType?: string;
            /**
                * <p>The provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.</p>
                */
            Iops?: number;
            /**
                * <p>The option group name for the DB snapshot.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The percentage of the estimated data that has been transferred.</p>
                */
            PercentProgress?: number;
            /**
                * <p>The Amazon Web Services Region that the DB snapshot was created in or copied from.</p>
                */
            SourceRegion?: string;
            /**
                * <p>The DB snapshot ARN that the DB snapshot was copied from.</p>
                */
            SourceDbSnapshotIdentifier?: string;
            /**
                * <p>The storage type associated with the DB snapshot.</p>
                */
            StorageType?: string;
            /**
                * <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>Whether the DB snapshot is encrypted.</p>
                */
            Encrypted?: boolean;
            /**
                * <p>If <code>Encrypted</code> is <code>true</code>, the KMS key identifier for the encrypted DB snapshot.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The time zone of the DB snapshot.</p>
                */
            Timezone?: string;
            /**
                * <p>Whether mapping of IAM accounts to database accounts is enabled.</p>
                */
            IamDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                */
            ProcessorFeatures?: AwsRdsDbProcessorFeature[];
            /**
                * <p>The identifier for the source DB instance.</p>
                */
            DbiResourceId?: string;
    }
    export namespace AwsRdsDbSnapshotDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsDbSnapshotDetails) => any;
    }
    /**
        * <p>Details about an Amazon RDS event notification subscription. The subscription allows Amazon RDS to post events to an SNS topic.</p>
        */
    export interface AwsRdsEventSubscriptionDetails {
            /**
                * <p>The identifier of the account that is associated with the event notification subscription.</p>
                */
            CustSubscriptionId?: string;
            /**
                * <p>The identifier of the event notification subscription.</p>
                */
            CustomerAwsId?: string;
            /**
                * <p>Whether the event notification subscription is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The list of event categories for the event notification subscription.</p>
                */
            EventCategoriesList?: string[];
            /**
                * <p>The ARN of the event notification subscription.</p>
                */
            EventSubscriptionArn?: string;
            /**
                * <p>The ARN of the SNS topic to post the event notifications to.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>A list of source identifiers for the event notification subscription.</p>
                */
            SourceIdsList?: string[];
            /**
                * <p>The source type for the event notification subscription.</p>
                */
            SourceType?: string;
            /**
                * <p>The status of the event notification subscription.</p>
                *          <p>Valid values: <code>creating</code> | <code>modifying</code> | <code>deleting</code> | <code>active</code> | <code>no-permission</code> | <code>topic-not-exist</code>
                *          </p>
                */
            Status?: string;
            /**
                * <p>The datetime when the event notification subscription was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            SubscriptionCreationTime?: string;
    }
    export namespace AwsRdsEventSubscriptionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRdsEventSubscriptionDetails) => any;
    }
    /**
        * <p>A node in an Amazon Redshift cluster.</p>
        */
    export interface AwsRedshiftClusterClusterNode {
            /**
                * <p>The role of the node. A node might be a leader node or a compute node.</p>
                */
            NodeRole?: string;
            /**
                * <p>The private IP address of the node.</p>
                */
            PrivateIpAddress?: string;
            /**
                * <p>The public IP address of the node.</p>
                */
            PublicIpAddress?: string;
    }
    export namespace AwsRedshiftClusterClusterNode {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterClusterNode) => any;
    }
    /**
        * <p>The status of a parameter in a cluster parameter group for an Amazon Redshift
        *          cluster.</p>
        */
    export interface AwsRedshiftClusterClusterParameterStatus {
            /**
                * <p>The name of the parameter.</p>
                */
            ParameterName?: string;
            /**
                * <p>The status of the parameter. Indicates whether the parameter is in sync with the
                *          database, waiting for a cluster reboot, or encountered an error when it was applied.</p>
                *          <p>Valid values: <code>in-sync</code> | <code>pending-reboot</code> | <code>applying</code>
                *          | <code>invalid-parameter</code> | <code>apply-deferred</code> | <code>apply-error</code> |
                *             <code>unknown-error</code>
                *          </p>
                */
            ParameterApplyStatus?: string;
            /**
                * <p>The error that prevented the parameter from being applied to the database.</p>
                */
            ParameterApplyErrorDescription?: string;
    }
    export namespace AwsRedshiftClusterClusterParameterStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterClusterParameterStatus) => any;
    }
    /**
        * <p>A cluster parameter group that is associated with an Amazon Redshift cluster.</p>
        */
    export interface AwsRedshiftClusterClusterParameterGroup {
            /**
                * <p>The list of parameter statuses.</p>
                */
            ClusterParameterStatusList?: AwsRedshiftClusterClusterParameterStatus[];
            /**
                * <p>The status of updates to the parameters.</p>
                */
            ParameterApplyStatus?: string;
            /**
                * <p>The name of the parameter group.</p>
                */
            ParameterGroupName?: string;
    }
    export namespace AwsRedshiftClusterClusterParameterGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterClusterParameterGroup) => any;
    }
    /**
        * <p>A security group that is associated with the cluster.</p>
        */
    export interface AwsRedshiftClusterClusterSecurityGroup {
            /**
                * <p>The name of the cluster security group.</p>
                */
            ClusterSecurityGroupName?: string;
            /**
                * <p>The status of the cluster security group.</p>
                */
            Status?: string;
    }
    export namespace AwsRedshiftClusterClusterSecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterClusterSecurityGroup) => any;
    }
    /**
        * <p>Information about a cross-Region snapshot copy.</p>
        */
    export interface AwsRedshiftClusterClusterSnapshotCopyStatus {
            /**
                * <p>The destination Region that snapshots are automatically copied to when cross-Region
                *          snapshot copy is enabled.</p>
                */
            DestinationRegion?: string;
            /**
                * <p>The number of days that manual snapshots are retained in the destination region after
                *          they are copied from a source region.</p>
                *          <p>If the value is <code>-1</code>,
                *          then the manual snapshot is retained indefinitely.</p>
                *          <p>Valid values: Either <code>-1</code>
                *          or an integer between 1 and 3,653</p>
                */
            ManualSnapshotRetentionPeriod?: number;
            /**
                * <p>The number of days to retain automated snapshots in the destination Region after they
                *          are copied from a source Region.</p>
                */
            RetentionPeriod?: number;
            /**
                * <p>The name of the snapshot copy grant.</p>
                */
            SnapshotCopyGrantName?: string;
    }
    export namespace AwsRedshiftClusterClusterSnapshotCopyStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterClusterSnapshotCopyStatus) => any;
    }
    /**
        * <p>A time windows during which maintenance was deferred for an Amazon Redshift
        *          cluster.</p>
        */
    export interface AwsRedshiftClusterDeferredMaintenanceWindow {
            /**
                * <p>The end of the time window for which maintenance was deferred.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            DeferMaintenanceEndTime?: string;
            /**
                * <p>The identifier of the maintenance window.</p>
                */
            DeferMaintenanceIdentifier?: string;
            /**
                * <p>The start of the time window for which maintenance was deferred.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            DeferMaintenanceStartTime?: string;
    }
    export namespace AwsRedshiftClusterDeferredMaintenanceWindow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterDeferredMaintenanceWindow) => any;
    }
    /**
        * <p>The status of the elastic IP (EIP) address for an Amazon Redshift cluster.</p>
        */
    export interface AwsRedshiftClusterElasticIpStatus {
            /**
                * <p>The elastic IP address for the cluster.</p>
                */
            ElasticIp?: string;
            /**
                * <p>The status of the elastic IP address.</p>
                */
            Status?: string;
    }
    export namespace AwsRedshiftClusterElasticIpStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterElasticIpStatus) => any;
    }
    /**
        * <p>The connection endpoint for an Amazon Redshift cluster.</p>
        */
    export interface AwsRedshiftClusterEndpoint {
            /**
                * <p>The DNS address of the cluster.</p>
                */
            Address?: string;
            /**
                * <p>The port that the database engine listens on.</p>
                */
            Port?: number;
    }
    export namespace AwsRedshiftClusterEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterEndpoint) => any;
    }
    /**
        * <p>Information about whether an Amazon Redshift cluster finished applying any hardware
        *          changes to security module (HSM) settings that were specified in a modify cluster
        *          command.</p>
        */
    export interface AwsRedshiftClusterHsmStatus {
            /**
                * <p>The name of the HSM client certificate that the Amazon Redshift cluster uses to retrieve
                *          the data encryption keys that are stored in an HSM.</p>
                */
            HsmClientCertificateIdentifier?: string;
            /**
                * <p>The name of the HSM configuration that contains the information that the Amazon Redshift
                *          cluster can use to retrieve and store keys in an HSM.</p>
                */
            HsmConfigurationIdentifier?: string;
            /**
                * <p>Indicates whether the Amazon Redshift cluster has finished applying any HSM settings
                *          changes specified in a modify cluster command.</p>
                *          <p>Type: String</p>
                *          <p>Valid values: <code>active</code> | <code>applying</code>
                *          </p>
                */
            Status?: string;
    }
    export namespace AwsRedshiftClusterHsmStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterHsmStatus) => any;
    }
    /**
        * <p>An IAM role that the cluster can use to access other Amazon Web Services services.</p>
        */
    export interface AwsRedshiftClusterIamRole {
            /**
                * <p>The status of the IAM role's association with the cluster.</p>
                *          <p>Valid values: <code>in-sync</code> | <code>adding</code> | <code>removing</code>
                *          </p>
                */
            ApplyStatus?: string;
            /**
                * <p>The ARN of the IAM role.</p>
                */
            IamRoleArn?: string;
    }
    export namespace AwsRedshiftClusterIamRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterIamRole) => any;
    }
    /**
        * <p>Provides information about the logging status of the cluster.</p>
        */
    export interface AwsRedshiftClusterLoggingStatus {
            /**
                * <p>The name of the S3 bucket where the log files are stored.</p>
                */
            BucketName?: string;
            /**
                * <p>The message indicating that the logs failed to be delivered.</p>
                */
            LastFailureMessage?: string;
            /**
                * <p>The last time when logs failed to be delivered.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastFailureTime?: string;
            /**
                * <p>The last time that logs were delivered successfully.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastSuccessfulDeliveryTime?: string;
            /**
                * <p>Indicates whether logging is enabled.</p>
                */
            LoggingEnabled?: boolean;
            /**
                * <p>Provides the prefix applied to the log file names.</p>
                */
            S3KeyPrefix?: string;
    }
    export namespace AwsRedshiftClusterLoggingStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterLoggingStatus) => any;
    }
    /**
        * <p>Changes to the Amazon Redshift cluster that are currently pending.</p>
        */
    export interface AwsRedshiftClusterPendingModifiedValues {
            /**
                * <p>The pending or in-progress change to the automated snapshot retention period.</p>
                */
            AutomatedSnapshotRetentionPeriod?: number;
            /**
                * <p>The pending or in-progress change to the identifier for the cluster.</p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The pending or in-progress change to the cluster type.</p>
                */
            ClusterType?: string;
            /**
                * <p>The pending or in-progress change to the service version.</p>
                */
            ClusterVersion?: string;
            /**
                * <p>The encryption type for a cluster.</p>
                */
            EncryptionType?: string;
            /**
                * <p>Indicates whether to create the cluster with enhanced VPC routing enabled.</p>
                */
            EnhancedVpcRouting?: boolean;
            /**
                * <p>The name of the maintenance track that the cluster changes to during the next
                *          maintenance window.</p>
                */
            MaintenanceTrackName?: string;
            /**
                * <p>The pending or in-progress change to the master user password for the cluster.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>The pending or in-progress change to the cluster's node type.</p>
                */
            NodeType?: string;
            /**
                * <p>The pending or in-progress change to the number of nodes in the cluster.</p>
                */
            NumberOfNodes?: number;
            /**
                * <p>The pending or in-progress change to whether the cluster can be connected to from the
                *          public network.</p>
                */
            PubliclyAccessible?: boolean;
    }
    export namespace AwsRedshiftClusterPendingModifiedValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterPendingModifiedValues) => any;
    }
    /**
        * <p>Information about the resize operation for the cluster.</p>
        */
    export interface AwsRedshiftClusterResizeInfo {
            /**
                * <p>Indicates whether the resize operation can be canceled.</p>
                */
            AllowCancelResize?: boolean;
            /**
                * <p>The type of resize operation.</p>
                *          <p>Valid values: <code>ClassicResize</code>
                *          </p>
                */
            ResizeType?: string;
    }
    export namespace AwsRedshiftClusterResizeInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterResizeInfo) => any;
    }
    /**
        * <p>Information about the status of a cluster restore action. It only applies if the cluster
        *          was created by restoring a snapshot.</p>
        */
    export interface AwsRedshiftClusterRestoreStatus {
            /**
                * <p>The number of megabytes per second being transferred from the backup storage. Returns
                *          the average rate for a completed backup.</p>
                *          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
                */
            CurrentRestoreRateInMegaBytesPerSecond?: number;
            /**
                * <p>The amount of time an in-progress restore has been running, or the amount of time it
                *          took a completed restore to finish.</p>
                *          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
                */
            ElapsedTimeInSeconds?: number;
            /**
                * <p>The estimate of the time remaining before the restore is complete. Returns 0 for a
                *          completed restore.</p>
                *          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
                */
            EstimatedTimeToCompletionInSeconds?: number;
            /**
                * <p>The number of megabytes that were transferred from snapshot storage.</p>
                *          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
                */
            ProgressInMegaBytes?: number;
            /**
                * <p>The size of the set of snapshot data that was used to restore the cluster.</p>
                *          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
                */
            SnapshotSizeInMegaBytes?: number;
            /**
                * <p>The status of the restore action.</p>
                *          <p>Valid values: <code>starting</code> | <code>restoring</code> | <code>completed</code> |
                *             <code>failed</code>
                *          </p>
                */
            Status?: string;
    }
    export namespace AwsRedshiftClusterRestoreStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterRestoreStatus) => any;
    }
    /**
        * <p>A VPC security group that the cluster belongs to, if the cluster is in a VPC.</p>
        */
    export interface AwsRedshiftClusterVpcSecurityGroup {
            /**
                * <p>The status of the VPC security group.</p>
                */
            Status?: string;
            /**
                * <p>The identifier of the VPC security group.</p>
                */
            VpcSecurityGroupId?: string;
    }
    export namespace AwsRedshiftClusterVpcSecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterVpcSecurityGroup) => any;
    }
    /**
        * <p>Details about an Amazon Redshift cluster.</p>
        */
    export interface AwsRedshiftClusterDetails {
            /**
                * <p>Indicates whether major version upgrades are applied automatically to the cluster during
                *          the maintenance window.</p>
                */
            AllowVersionUpgrade?: boolean;
            /**
                * <p>The number of days that automatic cluster snapshots are retained.</p>
                */
            AutomatedSnapshotRetentionPeriod?: number;
            /**
                * <p>The name of the Availability Zone in which the cluster is located.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The availability status of the cluster for queries. Possible values are the
                *          following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Available</code> - The cluster is available for queries.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Unavailable</code> - The cluster is not available for queries.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maintenance</code> - The cluster is intermittently available for queries due
                *                to maintenance activities.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Modifying</code> -The cluster is intermittently available for queries due to
                *                changes that modify the cluster.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Failed</code> - The cluster failed and is not available for queries.</p>
                *             </li>
                *          </ul>
                */
            ClusterAvailabilityStatus?: string;
            /**
                * <p>Indicates when the cluster was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            ClusterCreateTime?: string;
            /**
                * <p>The unique identifier of the cluster.</p>
                */
            ClusterIdentifier?: string;
            /**
                * <p>The nodes in the cluster.</p>
                */
            ClusterNodes?: AwsRedshiftClusterClusterNode[];
            /**
                * <p>The list of cluster parameter groups that are associated with this cluster.</p>
                */
            ClusterParameterGroups?: AwsRedshiftClusterClusterParameterGroup[];
            /**
                * <p>The public key for the cluster.</p>
                */
            ClusterPublicKey?: string;
            /**
                * <p>The specific revision number of the database in the cluster.</p>
                */
            ClusterRevisionNumber?: string;
            /**
                * <p>A list of cluster security groups that are associated with the cluster.</p>
                */
            ClusterSecurityGroups?: AwsRedshiftClusterClusterSecurityGroup[];
            /**
                * <p>Information about the destination Region and retention period for the cross-Region
                *          snapshot copy.</p>
                */
            ClusterSnapshotCopyStatus?: AwsRedshiftClusterClusterSnapshotCopyStatus;
            /**
                * <p>The current status of the cluster.</p>
                *          <p>Valid values: <code>available</code> | <code>available, prep-for-resize</code> |
                *             <code>available, resize-cleanup</code> |<code> cancelling-resize</code> |
                *             <code>creating</code> | <code>deleting</code> | <code>final-snapshot</code> |
                *             <code>hardware-failure</code> | <code>incompatible-hsm</code> |<code>
                *             incompatible-network</code> | <code>incompatible-parameters</code> |
                *             <code>incompatible-restore</code> | <code>modifying</code> | <code>paused</code> |
                *             <code>rebooting</code> | <code>renaming</code> | <code>resizing</code> |
                *             <code>rotating-keys</code> | <code>storage-full</code> |
                *          <code>updating-hsm</code>
                *          </p>
                */
            ClusterStatus?: string;
            /**
                * <p>The name of the subnet group that is associated with the cluster. This parameter is
                *          valid only when the cluster is in a VPC.</p>
                */
            ClusterSubnetGroupName?: string;
            /**
                * <p>The version ID of the Amazon Redshift engine that runs on the cluster.</p>
                */
            ClusterVersion?: string;
            /**
                * <p>The name of the initial database that was created when the cluster was created.</p>
                *          <p>The same name is returned for the life of the cluster.</p>
                *          <p>If an initial database is not specified, a database named <code>devdev</code> is created
                *          by default.</p>
                */
            DBName?: string;
            /**
                * <p>List of time windows during which maintenance was deferred.</p>
                */
            DeferredMaintenanceWindows?: AwsRedshiftClusterDeferredMaintenanceWindow[];
            /**
                * <p>Information about the status of the Elastic IP (EIP) address.</p>
                */
            ElasticIpStatus?: AwsRedshiftClusterElasticIpStatus;
            /**
                * <p>The number of nodes that you can use the elastic resize method to resize the cluster
                *          to.</p>
                */
            ElasticResizeNumberOfNodeOptions?: string;
            /**
                * <p>Indicates whether the data in the cluster is encrypted at rest.</p>
                */
            Encrypted?: boolean;
            /**
                * <p>The connection endpoint.</p>
                */
            Endpoint?: AwsRedshiftClusterEndpoint;
            /**
                * <p>Indicates whether to create the cluster with enhanced VPC routing enabled.</p>
                */
            EnhancedVpcRouting?: boolean;
            /**
                * <p>Indicates when the next snapshot is expected to be taken. The cluster must have a valid
                *          snapshot schedule and have backups enabled.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            ExpectedNextSnapshotScheduleTime?: string;
            /**
                * <p>The status of the next expected snapshot.</p>
                *          <p>Valid values: <code>OnTrack</code> | <code>Pending</code>
                *          </p>
                */
            ExpectedNextSnapshotScheduleTimeStatus?: string;
            /**
                * <p>Information about whether the Amazon Redshift cluster finished applying any changes to
                *          hardware security module (HSM) settings that were specified in a modify cluster
                *          command.</p>
                */
            HsmStatus?: AwsRedshiftClusterHsmStatus;
            /**
                * <p>A list of IAM roles that the cluster can use to access other Amazon Web Services services.</p>
                */
            IamRoles?: AwsRedshiftClusterIamRole[];
            /**
                * <p>The identifier of the KMS encryption key that is used to encrypt data in the
                *          cluster.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The name of the maintenance track for the cluster.</p>
                */
            MaintenanceTrackName?: string;
            /**
                * <p>The default number of days to retain a manual snapshot.</p>
                *          <p>If the value is <code>-1</code>, the snapshot is retained indefinitely.</p>
                *          <p>This setting doesn't change the retention period of existing snapshots.</p>
                *          <p>Valid values: Either <code>-1</code> or an integer between 1 and 3,653</p>
                */
            ManualSnapshotRetentionPeriod?: number;
            /**
                * <p>The master user name for the cluster. This name is used to connect to the database that
                *          is specified in as the value of <code>DBName</code>.</p>
                */
            MasterUsername?: string;
            /**
                * <p>Indicates the start of the next maintenance window.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            NextMaintenanceWindowStartTime?: string;
            /**
                * <p>The node type for the nodes in the cluster.</p>
                */
            NodeType?: string;
            /**
                * <p>The number of compute nodes in the cluster.</p>
                */
            NumberOfNodes?: number;
            /**
                * <p>A list of cluster operations that are waiting to start.</p>
                */
            PendingActions?: string[];
            /**
                * <p>A list of changes to the cluster that are currently pending.</p>
                */
            PendingModifiedValues?: AwsRedshiftClusterPendingModifiedValues;
            /**
                * <p>The weekly time range, in Universal Coordinated Time (UTC), during which system
                *          maintenance can occur.</p>
                *          <p>Format:
                *             <code>
                *                <i><day></i>:HH:MM-<i><day></i>:HH:MM</code>
                *          </p>
                *          <p>For the day values, use <code>mon</code> | <code>tue</code> | <code>wed</code> |
                *             <code>thu</code> | <code>fri</code> | <code>sat</code> | <code>sun</code>
                *          </p>
                *          <p>For example, <code>sun:09:32-sun:10:02</code>
                *          </p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>Whether the cluster can be accessed from a public network.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>Information about the resize operation for the cluster.</p>
                */
            ResizeInfo?: AwsRedshiftClusterResizeInfo;
            /**
                * <p>Information about the status of a cluster restore action. Only applies to a cluster that
                *          was created by restoring a snapshot.</p>
                */
            RestoreStatus?: AwsRedshiftClusterRestoreStatus;
            /**
                * <p>A unique identifier for the cluster snapshot schedule.</p>
                */
            SnapshotScheduleIdentifier?: string;
            /**
                * <p>The current state of the cluster snapshot schedule.</p>
                *          <p>Valid values: <code>MODIFYING</code> | <code>ACTIVE</code> | <code>FAILED</code>
                *          </p>
                */
            SnapshotScheduleState?: string;
            /**
                * <p>The identifier of the VPC that the cluster is in, if the cluster is in a VPC.</p>
                */
            VpcId?: string;
            /**
                * <p>The list of VPC security groups that the cluster belongs to, if the cluster is in a
                *          VPC.</p>
                */
            VpcSecurityGroups?: AwsRedshiftClusterVpcSecurityGroup[];
            /**
                * <p>Information about the logging status of the cluster.</p>
                */
            LoggingStatus?: AwsRedshiftClusterLoggingStatus;
    }
    export namespace AwsRedshiftClusterDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsRedshiftClusterDetails) => any;
    }
    /**
        * <p>provides information about the Amazon S3 Public Access Block configuration for accounts.</p>
        */
    export interface AwsS3AccountPublicAccessBlockDetails {
            /**
                * <p>Indicates whether to reject calls to update an S3 bucket if the calls include a public access control list (ACL).</p>
                */
            BlockPublicAcls?: boolean;
            /**
                * <p>Indicates whether to reject calls to update the access policy for an S3 bucket or access point if the policy allows public access.</p>
                */
            BlockPublicPolicy?: boolean;
            /**
                * <p>Indicates whether Amazon S3 ignores public ACLs that are associated with an S3 bucket.</p>
                */
            IgnorePublicAcls?: boolean;
            /**
                * <p>Indicates whether to restrict access to an access point or S3 bucket that has a public policy to only Amazon Web Services service principals and authorized users within the S3 bucket owner's account.</p>
                */
            RestrictPublicBuckets?: boolean;
    }
    export namespace AwsS3AccountPublicAccessBlockDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3AccountPublicAccessBlockDetails) => any;
    }
    /**
        * <p>Information about what Amazon S3
        *          does when a multipart upload is incomplete.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails {
            /**
                * <p>The number of days after which Amazon S3 cancels an incomplete multipart upload.</p>
                */
            DaysAfterInitiation?: number;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails) => any;
    }
    /**
        * <p>A tag that is assigned to matching objects.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails {
            /**
                * <p>The tag key.</p>
                */
            Key?: string;
            /**
                * <p>The tag value.</p>
                */
            Value?: string;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails) => any;
    }
    /**
        * <p>A value to use for the filter.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails {
            /**
                * <p>Prefix text for matching objects.</p>
                */
            Prefix?: string;
            /**
                * <p>A tag that is assigned to matching objects.</p>
                */
            Tag?: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsTagDetails;
            /**
                * <p>The type of filter value.</p>
                */
            Type?: string;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails) => any;
    }
    /**
        * <p>A tag filter.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails {
            /**
                * <p>The tag key.</p>
                */
            Key?: string;
            /**
                * <p>The tag value</p>
                */
            Value?: string;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails) => any;
    }
    /**
        * <p>The configuration for the filter.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails {
            /**
                * <p>The values to use for the filter.</p>
                */
            Operands?: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateOperandsDetails[];
            /**
                * <p>A prefix filter.</p>
                */
            Prefix?: string;
            /**
                * <p>A tag filter.</p>
                */
            Tag?: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateTagDetails;
            /**
                * <p>Whether to use <code>AND</code> or <code>OR</code> to join the operands.</p>
                */
            Type?: string;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails) => any;
    }
    /**
        * <p>Identifies the objects that a rule applies to.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails {
            /**
                * <p>The configuration for the filter.</p>
                */
            Predicate?: AwsS3BucketBucketLifecycleConfigurationRulesFilterPredicateDetails;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails) => any;
    }
    /**
        * <p>A transition rule that describes when noncurrent objects transition to a specified storage class.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails {
            /**
                * <p>The number of days that an object is noncurrent before Amazon S3 can perform the associated action.</p>
                */
            Days?: number;
            /**
                * <p>The class of storage to change the object to after the object is noncurrent for the specified number of days.</p>
                */
            StorageClass?: string;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails) => any;
    }
    /**
        * <p>A rule for when objects transition to specific storage classes.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails {
            /**
                * <p>A date on which to transition objects to the specified storage class. If you provide <code>Date</code>, you cannot provide <code>Days</code>.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            Date?: string;
            /**
                * <p>The number of days after which to transition the object to the specified storage class. If you provide <code>Days</code>, you cannot provide <code>Date</code>.</p>
                */
            Days?: number;
            /**
                * <p>The storage class to transition the object to.</p>
                */
            StorageClass?: string;
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails) => any;
    }
    /**
        * <p>Configuration for a lifecycle rule.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationRulesDetails {
            /**
                * <p>How Amazon S3 responds when a multipart upload is incomplete. Specifically, provides a number
                *          of days before Amazon S3 cancels the entire upload.</p>
                */
            AbortIncompleteMultipartUpload?: AwsS3BucketBucketLifecycleConfigurationRulesAbortIncompleteMultipartUploadDetails;
            /**
                * <p>The date when objects are moved or deleted.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *          Date/Time Format</a>. The value cannot contain spaces. For example,
                *          <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            ExpirationDate?: string;
            /**
                * <p>The length in days of the lifetime for objects that are subject to the rule.</p>
                */
            ExpirationInDays?: number;
            /**
                * <p>Whether Amazon S3 removes a delete marker that has no noncurrent versions. If set to
                *          <code>true</code>, the delete marker is expired. If set to <code>false</code>, the policy
                *          takes no action.</p>
                *          <p>If you provide <code>ExpiredObjectDeleteMarker</code>, you cannot provide
                *          <code>ExpirationInDays</code> or <code>ExpirationDate</code>.</p>
                */
            ExpiredObjectDeleteMarker?: boolean;
            /**
                * <p>Identifies the objects that a rule applies to.</p>
                */
            Filter?: AwsS3BucketBucketLifecycleConfigurationRulesFilterDetails;
            /**
                * <p>The unique identifier of the rule.</p>
                */
            ID?: string;
            /**
                * <p>The number of days that an object is noncurrent before Amazon S3 can perform the associated action.</p>
                */
            NoncurrentVersionExpirationInDays?: number;
            /**
                * <p>Transition rules that describe when noncurrent objects transition to a specified storage class.</p>
                */
            NoncurrentVersionTransitions?: AwsS3BucketBucketLifecycleConfigurationRulesNoncurrentVersionTransitionsDetails[];
            /**
                * <p>A prefix that identifies one or more objects that the rule applies to.</p>
                */
            Prefix?: string;
            /**
                * <p>The current status of the rule. Indicates whether the rule is currently being applied.</p>
                */
            Status?: string;
            /**
                * <p>Transition rules that indicate when objects transition to a specified storage class.</p>
                */
            Transitions?: AwsS3BucketBucketLifecycleConfigurationRulesTransitionsDetails[];
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationRulesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationRulesDetails) => any;
    }
    /**
        * <p>The lifecycle configuration for the objects in the S3 bucket.</p>
        */
    export interface AwsS3BucketBucketLifecycleConfigurationDetails {
            /**
                * <p>The lifecycle rules.</p>
                */
            Rules?: AwsS3BucketBucketLifecycleConfigurationRulesDetails[];
    }
    export namespace AwsS3BucketBucketLifecycleConfigurationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketLifecycleConfigurationDetails) => any;
    }
    /**
        * <p>Describes the versioning state of an S3 bucket.</p>
        */
    export interface AwsS3BucketBucketVersioningConfiguration {
            /**
                * <p>Specifies whether MFA delete is currently enabled in the S3 bucket versioning configuration. If the S3 bucket was never configured with MFA delete, then this attribute is not included.</p>
                */
            IsMfaDeleteEnabled?: boolean;
            /**
                * <p>The versioning status of the S3 bucket.</p>
                */
            Status?: string;
    }
    export namespace AwsS3BucketBucketVersioningConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketBucketVersioningConfiguration) => any;
    }
    /**
        * <p>Information about logging for
        *          the S3 bucket</p>
        */
    export interface AwsS3BucketLoggingConfiguration {
            /**
                * <p>The name of the S3 bucket where log files for the S3 bucket are stored.</p>
                */
            DestinationBucketName?: string;
            /**
                * <p>The prefix added to log files for the S3 bucket.</p>
                */
            LogFilePrefix?: string;
    }
    export namespace AwsS3BucketLoggingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketLoggingConfiguration) => any;
    }
    export enum AwsS3BucketNotificationConfigurationS3KeyFilterRuleName {
            PREFIX = "Prefix",
            SUFFIX = "Suffix"
    }
    /**
        * <p>Details for a filter rule.</p>
        */
    export interface AwsS3BucketNotificationConfigurationS3KeyFilterRule {
            /**
                * <p>Indicates whether the filter is based on the prefix or suffix of the Amazon S3 key.</p>
                */
            Name?: AwsS3BucketNotificationConfigurationS3KeyFilterRuleName | string;
            /**
                * <p>The filter value.</p>
                */
            Value?: string;
    }
    export namespace AwsS3BucketNotificationConfigurationS3KeyFilterRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketNotificationConfigurationS3KeyFilterRule) => any;
    }
    /**
        * <p>Details for an Amazon S3 filter.</p>
        */
    export interface AwsS3BucketNotificationConfigurationS3KeyFilter {
            /**
                * <p>The filter rules for the filter.</p>
                */
            FilterRules?: AwsS3BucketNotificationConfigurationS3KeyFilterRule[];
    }
    export namespace AwsS3BucketNotificationConfigurationS3KeyFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketNotificationConfigurationS3KeyFilter) => any;
    }
    /**
        * <p>Filtering information for the notifications. The
        *          filtering is based on Amazon S3 key names.</p>
        */
    export interface AwsS3BucketNotificationConfigurationFilter {
            /**
                * <p>Details for an Amazon S3 filter.</p>
                */
            S3KeyFilter?: AwsS3BucketNotificationConfigurationS3KeyFilter;
    }
    export namespace AwsS3BucketNotificationConfigurationFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketNotificationConfigurationFilter) => any;
    }
    /**
        * <p>Details for an S3 bucket notification configuration.</p>
        */
    export interface AwsS3BucketNotificationConfigurationDetail {
            /**
                * <p>The list of events that trigger a notification.</p>
                */
            Events?: string[];
            /**
                * <p>The filters that determine which S3 buckets generate notifications.</p>
                */
            Filter?: AwsS3BucketNotificationConfigurationFilter;
            /**
                * <p>The ARN of the Lambda function, Amazon SQS queue, or Amazon SNS topic that generates the
                *          notification.</p>
                */
            Destination?: string;
            /**
                * <p>Indicates the type of notification. Notifications can be generated using Lambda functions,
                *          Amazon SQS queues or Amazon SNS topics.</p>
                */
            Type?: string;
    }
    export namespace AwsS3BucketNotificationConfigurationDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketNotificationConfigurationDetail) => any;
    }
    /**
        * <p>The notification
        *          configuration for the S3 bucket.</p>
        */
    export interface AwsS3BucketNotificationConfiguration {
            /**
                * <p>Configurations for S3 bucket notifications.</p>
                */
            Configurations?: AwsS3BucketNotificationConfigurationDetail[];
    }
    export namespace AwsS3BucketNotificationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketNotificationConfiguration) => any;
    }
    /**
        * <p>The redirect behavior for requests
        *          to the website.</p>
        */
    export interface AwsS3BucketWebsiteConfigurationRedirectTo {
            /**
                * <p>The name of the host to redirect requests to.</p>
                */
            Hostname?: string;
            /**
                * <p>The protocol to use when redirecting requests. By default, uses the same protocol as the
                *          original request.</p>
                */
            Protocol?: string;
    }
    export namespace AwsS3BucketWebsiteConfigurationRedirectTo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketWebsiteConfigurationRedirectTo) => any;
    }
    /**
        * <p>The condition that must be met in order to apply the routing rule.</p>
        */
    export interface AwsS3BucketWebsiteConfigurationRoutingRuleCondition {
            /**
                * <p>Indicates to redirect the request if the HTTP error code matches this value.</p>
                */
            HttpErrorCodeReturnedEquals?: string;
            /**
                * <p>Indicates to redirect the request if the key prefix matches this value.</p>
                */
            KeyPrefixEquals?: string;
    }
    export namespace AwsS3BucketWebsiteConfigurationRoutingRuleCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketWebsiteConfigurationRoutingRuleCondition) => any;
    }
    /**
        * <p>The rules to redirect the request if the condition in <code>Condition</code> is
        *          met.</p>
        */
    export interface AwsS3BucketWebsiteConfigurationRoutingRuleRedirect {
            /**
                * <p>The host name to use in the redirect request.</p>
                */
            Hostname?: string;
            /**
                * <p>The HTTP redirect code to use in the response.</p>
                */
            HttpRedirectCode?: string;
            /**
                * <p>The protocol to use to redirect the request. By default, uses the protocol from the
                *          original request.</p>
                */
            Protocol?: string;
            /**
                * <p>The object key prefix to use in the redirect request.</p>
                *          <p>Cannot be provided if <code>ReplaceKeyWith</code> is present.</p>
                */
            ReplaceKeyPrefixWith?: string;
            /**
                * <p>The specific object key to use in the redirect request.</p>
                *          <p>Cannot be provided if <code>ReplaceKeyPrefixWith</code> is present.</p>
                */
            ReplaceKeyWith?: string;
    }
    export namespace AwsS3BucketWebsiteConfigurationRoutingRuleRedirect {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketWebsiteConfigurationRoutingRuleRedirect) => any;
    }
    /**
        * <p>A rule for redirecting requests
        *          to the website.</p>
        */
    export interface AwsS3BucketWebsiteConfigurationRoutingRule {
            /**
                * <p>Provides the condition that must be met in order to apply the routing rule.</p>
                */
            Condition?: AwsS3BucketWebsiteConfigurationRoutingRuleCondition;
            /**
                * <p>Provides the rules to redirect the request if the condition in <code>Condition</code> is
                *          met.</p>
                */
            Redirect?: AwsS3BucketWebsiteConfigurationRoutingRuleRedirect;
    }
    export namespace AwsS3BucketWebsiteConfigurationRoutingRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketWebsiteConfigurationRoutingRule) => any;
    }
    /**
        * <p>Website parameters for the S3
        *          bucket.</p>
        */
    export interface AwsS3BucketWebsiteConfiguration {
            /**
                * <p>The name of the error document for the website.</p>
                */
            ErrorDocument?: string;
            /**
                * <p>The name of the index document for the website.</p>
                */
            IndexDocumentSuffix?: string;
            /**
                * <p>The redirect behavior for requests to the website.</p>
                */
            RedirectAllRequestsTo?: AwsS3BucketWebsiteConfigurationRedirectTo;
            /**
                * <p>The rules for applying redirects for requests to the website.</p>
                */
            RoutingRules?: AwsS3BucketWebsiteConfigurationRoutingRule[];
    }
    export namespace AwsS3BucketWebsiteConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketWebsiteConfiguration) => any;
    }
    /**
        * <p>Specifies the default server-side encryption to apply to new objects in the
        *          bucket.</p>
        */
    export interface AwsS3BucketServerSideEncryptionByDefault {
            /**
                * <p>Server-side encryption algorithm to use for the default encryption.</p>
                */
            SSEAlgorithm?: string;
            /**
                * <p>KMS key ID to use for the default encryption.</p>
                */
            KMSMasterKeyID?: string;
    }
    export namespace AwsS3BucketServerSideEncryptionByDefault {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketServerSideEncryptionByDefault) => any;
    }
    /**
        * <p>An encryption rule to apply to the S3 bucket.</p>
        */
    export interface AwsS3BucketServerSideEncryptionRule {
            /**
                * <p>Specifies the default server-side encryption to apply to new objects in the bucket. If a
                *             <code>PUT</code> object request doesn't specify any server-side encryption, this default
                *          encryption is applied.</p>
                */
            ApplyServerSideEncryptionByDefault?: AwsS3BucketServerSideEncryptionByDefault;
    }
    export namespace AwsS3BucketServerSideEncryptionRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketServerSideEncryptionRule) => any;
    }
    /**
        * <p>The encryption configuration for the S3 bucket.</p>
        */
    export interface AwsS3BucketServerSideEncryptionConfiguration {
            /**
                * <p>The encryption rules that are applied to the S3 bucket.</p>
                */
            Rules?: AwsS3BucketServerSideEncryptionRule[];
    }
    export namespace AwsS3BucketServerSideEncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketServerSideEncryptionConfiguration) => any;
    }
    /**
        * <p>The details of an Amazon S3 bucket.</p>
        */
    export interface AwsS3BucketDetails {
            /**
                * <p>The canonical user ID of the owner of the S3 bucket.</p>
                */
            OwnerId?: string;
            /**
                * <p>The display name of the owner of the S3 bucket.</p>
                */
            OwnerName?: string;
            /**
                * <p>The Amazon Web Services account identifier of the account that owns the S3 bucket.</p>
                */
            OwnerAccountId?: string;
            /**
                * <p>Indicates when the S3 bucket was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedAt?: string;
            /**
                * <p>The encryption rules that are applied to the S3 bucket.</p>
                */
            ServerSideEncryptionConfiguration?: AwsS3BucketServerSideEncryptionConfiguration;
            /**
                * <p>The lifecycle configuration for objects in the S3 bucket.</p>
                */
            BucketLifecycleConfiguration?: AwsS3BucketBucketLifecycleConfigurationDetails;
            /**
                * <p>Provides information about the Amazon S3 Public Access Block configuration for the S3 bucket.</p>
                */
            PublicAccessBlockConfiguration?: AwsS3AccountPublicAccessBlockDetails;
            /**
                * <p>The access control list for the S3 bucket.</p>
                */
            AccessControlList?: string;
            /**
                * <p>The logging configuration for the S3 bucket.</p>
                */
            BucketLoggingConfiguration?: AwsS3BucketLoggingConfiguration;
            /**
                * <p>The website configuration parameters for the S3 bucket.</p>
                */
            BucketWebsiteConfiguration?: AwsS3BucketWebsiteConfiguration;
            /**
                * <p>The notification configuration for the S3 bucket.</p>
                */
            BucketNotificationConfiguration?: AwsS3BucketNotificationConfiguration;
            /**
                * <p>The versioning state of an S3 bucket.</p>
                */
            BucketVersioningConfiguration?: AwsS3BucketBucketVersioningConfiguration;
    }
    export namespace AwsS3BucketDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3BucketDetails) => any;
    }
    /**
        * <p>Details about an Amazon S3 object.</p>
        */
    export interface AwsS3ObjectDetails {
            /**
                * <p>Indicates when the object was last modified.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastModified?: string;
            /**
                * <p>The opaque identifier assigned by a web server to a specific version of a resource found
                *          at a URL.</p>
                */
            ETag?: string;
            /**
                * <p>The version of the object.</p>
                */
            VersionId?: string;
            /**
                * <p>A standard MIME type describing the format of the object data.</p>
                */
            ContentType?: string;
            /**
                * <p>If the object is stored using server-side encryption, the value of the server-side
                *          encryption algorithm used when storing this object in Amazon S3.</p>
                */
            ServerSideEncryption?: string;
            /**
                * <p>The identifier of the KMS symmetric customer managed key that was used for the object.</p>
                */
            SSEKMSKeyId?: string;
    }
    export namespace AwsS3ObjectDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsS3ObjectDetails) => any;
    }
    /**
        * <p>Defines the rotation schedule for the secret.</p>
        */
    export interface AwsSecretsManagerSecretRotationRules {
            /**
                * <p>The number of days after the previous rotation to rotate the secret.</p>
                */
            AutomaticallyAfterDays?: number;
    }
    export namespace AwsSecretsManagerSecretRotationRules {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSecretsManagerSecretRotationRules) => any;
    }
    /**
        * <p>Details about an Secrets Manager secret.</p>
        */
    export interface AwsSecretsManagerSecretDetails {
            /**
                * <p>Defines the rotation schedule for the secret.</p>
                */
            RotationRules?: AwsSecretsManagerSecretRotationRules;
            /**
                * <p>Whether the rotation occurred within the specified rotation frequency.</p>
                */
            RotationOccurredWithinFrequency?: boolean;
            /**
                * <p>The ARN, Key ID, or alias of the KMS key used to encrypt the
                *             <code>SecretString</code> or <code>SecretBinary</code> values for versions of this
                *          secret.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Whether rotation is enabled.</p>
                */
            RotationEnabled?: boolean;
            /**
                * <p>The ARN of the Lambda function that rotates the secret.</p>
                */
            RotationLambdaArn?: string;
            /**
                * <p>Whether the secret is deleted.</p>
                */
            Deleted?: boolean;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The user-provided description of the secret.</p>
                */
            Description?: string;
    }
    export namespace AwsSecretsManagerSecretDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSecretsManagerSecretDetails) => any;
    }
    export enum ComplianceStatus {
            FAILED = "FAILED",
            NOT_AVAILABLE = "NOT_AVAILABLE",
            PASSED = "PASSED",
            WARNING = "WARNING"
    }
    /**
        * <p>Provides additional context for the value of <code>Compliance.Status</code>.</p>
        */
    export interface StatusReason {
            /**
                * <p>A code that represents a reason for the control status. For the list of status reason
                *          codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the
                *             <i>Security Hub User Guide</i>. </p>
                */
            ReasonCode: string | undefined;
            /**
                * <p>The corresponding description for the status reason code.</p>
                */
            Description?: string;
    }
    export namespace StatusReason {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatusReason) => any;
    }
    /**
        * <p>Contains finding details that are specific to control-based findings. Only returned for
        *          findings generated from controls.</p>
        */
    export interface Compliance {
            /**
                * <p>The result of a standards check.</p>
                *          <p>The valid values for <code>Status</code> are as follows.</p>
                *          <ul>
                *             <li>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>PASSED</code> - Standards check passed for all evaluated
                *                      resources.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>WARNING</code> - Some information is missing or this check is not
                *                      supported for your configuration.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>FAILED</code> - Standards check failed for at least one evaluated
                *                      resource.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>NOT_AVAILABLE</code> - Check could not be performed due to a service
                *                      outage, API error, or because the result of the Config evaluation was
                *                         <code>NOT_APPLICABLE</code>. If the Config evaluation result was
                *                      <code>NOT_APPLICABLE</code>, then after 3 days, Security Hub automatically archives
                *                      the finding.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Status?: ComplianceStatus | string;
            /**
                * <p>For a control, the industry or regulatory framework requirements that are related to the
                *          control. The check for that control is aligned with these requirements.</p>
                */
            RelatedRequirements?: string[];
            /**
                * <p>For findings generated from controls, a list of reasons behind the value of
                *             <code>Status</code>. For the list of status reason codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the
                *             <i>Security Hub User Guide</i>. </p>
                */
            StatusReasons?: StatusReason[];
    }
    export namespace Compliance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Compliance) => any;
    }
    /**
        * <p>Details about a related finding.</p>
        */
    export interface RelatedFinding {
            /**
                * <p>The ARN of the product that generated a related finding.</p>
                */
            ProductArn: string | undefined;
            /**
                * <p>The product-generated identifier for a related finding.</p>
                */
            Id: string | undefined;
    }
    export namespace RelatedFinding {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelatedFinding) => any;
    }
    export enum SeverityLabel {
            CRITICAL = "CRITICAL",
            HIGH = "HIGH",
            INFORMATIONAL = "INFORMATIONAL",
            LOW = "LOW",
            MEDIUM = "MEDIUM"
    }
    /**
        * <p>The severity assigned to the finding by the finding provider.</p>
        */
    export interface FindingProviderSeverity {
            /**
                * <p>The severity label assigned to the finding by the finding provider.</p>
                */
            Label?: SeverityLabel | string;
            /**
                * <p>The finding provider's original value for the severity.</p>
                */
            Original?: string;
    }
    export namespace FindingProviderSeverity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindingProviderSeverity) => any;
    }
    /**
        * <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update values for confidence, criticality, related findings, severity, and types.</p>
        */
    export interface FindingProviderFields {
            /**
                * <p>A finding's confidence. Confidence is defined as the likelihood that a finding
                *          accurately identifies the behavior or issue that it was intended to identify.</p>
                *          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
                *          confidence and 100 means 100 percent confidence.</p>
                */
            Confidence?: number;
            /**
                * <p>The level of importance assigned to the resources associated with the finding.</p>
                *          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
                *          is reserved for the most critical resources.</p>
                */
            Criticality?: number;
            /**
                * <p>A list of findings that are related to the current finding.</p>
                */
            RelatedFindings?: RelatedFinding[];
            /**
                * <p>The severity of a finding.</p>
                */
            Severity?: FindingProviderSeverity;
            /**
                * <p>One or more finding types in the format of <code>namespace/category/classifier</code>
                *          that classify a finding.</p>
                *          <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual
                *          Behaviors | Sensitive Data Identifications</p>
                */
            Types?: string[];
    }
    export namespace FindingProviderFields {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindingProviderFields) => any;
    }
    export enum MalwareState {
            OBSERVED = "OBSERVED",
            REMOVAL_FAILED = "REMOVAL_FAILED",
            REMOVED = "REMOVED"
    }
    export enum MalwareType {
            ADWARE = "ADWARE",
            BLENDED_THREAT = "BLENDED_THREAT",
            BOTNET_AGENT = "BOTNET_AGENT",
            COIN_MINER = "COIN_MINER",
            EXPLOIT_KIT = "EXPLOIT_KIT",
            KEYLOGGER = "KEYLOGGER",
            MACRO = "MACRO",
            POTENTIALLY_UNWANTED = "POTENTIALLY_UNWANTED",
            RANSOMWARE = "RANSOMWARE",
            REMOTE_ACCESS = "REMOTE_ACCESS",
            ROOTKIT = "ROOTKIT",
            SPYWARE = "SPYWARE",
            TROJAN = "TROJAN",
            VIRUS = "VIRUS",
            WORM = "WORM"
    }
    /**
        * <p>A list of malware related to a finding.</p>
        */
    export interface Malware {
            /**
                * <p>The name of the malware that was observed.</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of the malware that was observed.</p>
                */
            Type?: MalwareType | string;
            /**
                * <p>The file system path of the malware that was observed.</p>
                */
            Path?: string;
            /**
                * <p>The state of the malware that was observed.</p>
                */
            State?: MalwareState | string;
    }
    export namespace Malware {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Malware) => any;
    }
    export enum NetworkDirection {
            IN = "IN",
            OUT = "OUT"
    }
    /**
        * <p>A range of ports.</p>
        */
    export interface PortRange {
            /**
                * <p>The first port in the port range.</p>
                */
            Begin?: number;
            /**
                * <p>The last port in the port range.</p>
                */
            End?: number;
    }
    export namespace PortRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortRange) => any;
    }
    /**
        * <p>The details of network-related information about a finding.</p>
        */
    export interface Network {
            /**
                * <p>The direction of network traffic associated with a finding.</p>
                */
            Direction?: NetworkDirection | string;
            /**
                * <p>The protocol of network-related information about a finding.</p>
                */
            Protocol?: string;
            /**
                * <p>The range of open ports that is present on the network.</p>
                */
            OpenPortRange?: PortRange;
            /**
                * <p>The source IPv4 address of network-related information about a finding.</p>
                */
            SourceIpV4?: string;
            /**
                * <p>The source IPv6 address of network-related information about a finding.</p>
                */
            SourceIpV6?: string;
            /**
                * <p>The source port of network-related information about a finding.</p>
                */
            SourcePort?: number;
            /**
                * <p>The source domain of network-related information about a finding.</p>
                */
            SourceDomain?: string;
            /**
                * <p>The source media access control (MAC) address of network-related information about a
                *          finding.</p>
                */
            SourceMac?: string;
            /**
                * <p>The destination IPv4 address of network-related information about a finding.</p>
                */
            DestinationIpV4?: string;
            /**
                * <p>The destination IPv6 address of network-related information about a finding.</p>
                */
            DestinationIpV6?: string;
            /**
                * <p>The destination port of network-related information about a finding.</p>
                */
            DestinationPort?: number;
            /**
                * <p>The destination domain of network-related information about a finding.</p>
                */
            DestinationDomain?: string;
    }
    export namespace Network {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Network) => any;
    }
    /**
        * <p>Information about the destination of the next component in the network path.</p>
        */
    export interface NetworkPathComponentDetails {
            /**
                * <p>The IP addresses of the destination.</p>
                */
            Address?: string[];
            /**
                * <p>A list of port ranges for the destination.</p>
                */
            PortRanges?: PortRange[];
    }
    export namespace NetworkPathComponentDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkPathComponentDetails) => any;
    }
    /**
        * <p>Details about a network path component that occurs before or after the current
        *          component.</p>
        */
    export interface NetworkHeader {
            /**
                * <p>The protocol used for the component.</p>
                */
            Protocol?: string;
            /**
                * <p>Information about the destination of the component.</p>
                */
            Destination?: NetworkPathComponentDetails;
            /**
                * <p>Information about the origin of the component.</p>
                */
            Source?: NetworkPathComponentDetails;
    }
    export namespace NetworkHeader {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkHeader) => any;
    }
    /**
        * <p>Information about a network path component.</p>
        */
    export interface NetworkPathComponent {
            /**
                * <p>The identifier of a component in the network path.</p>
                */
            ComponentId?: string;
            /**
                * <p>The type of component.</p>
                */
            ComponentType?: string;
            /**
                * <p>Information about the component that comes after the current component in the network
                *          path.</p>
                */
            Egress?: NetworkHeader;
            /**
                * <p>Information about the component that comes before the current node in the network
                *          path.</p>
                */
            Ingress?: NetworkHeader;
    }
    export namespace NetworkPathComponent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkPathComponent) => any;
    }
    /**
        * <p>A user-defined note added to a finding.</p>
        */
    export interface Note {
            /**
                * <p>The text of a note.</p>
                */
            Text: string | undefined;
            /**
                * <p>The principal that created a note.</p>
                */
            UpdatedBy: string | undefined;
            /**
                * <p>The timestamp of when the note was updated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            UpdatedAt: string | undefined;
    }
    export namespace Note {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Note) => any;
    }
    /**
        * <p>Provides an overview of the patch compliance status for an instance against a selected
        *          compliance standard.</p>
        */
    export interface PatchSummary {
            /**
                * <p>The identifier of the compliance standard that was used to determine the patch
                *          compliance status.</p>
                */
            Id: string | undefined;
            /**
                * <p>The number of patches from the compliance standard that were installed
                *          successfully.</p>
                */
            InstalledCount?: number;
            /**
                * <p>The number of patches that are part of the compliance standard but are not installed.
                *          The count includes patches that failed to install.</p>
                */
            MissingCount?: number;
            /**
                * <p>The number of patches from the compliance standard that failed to install.</p>
                */
            FailedCount?: number;
            /**
                * <p>The number of installed patches that are not part of the compliance standard.</p>
                */
            InstalledOtherCount?: number;
            /**
                * <p>The number of patches that are installed but are also on a list of patches that the
                *          customer rejected.</p>
                */
            InstalledRejectedCount?: number;
            /**
                * <p>The number of patches that were applied, but that require the instance to be rebooted in
                *          order to be marked as installed.</p>
                */
            InstalledPendingReboot?: number;
            /**
                * <p>Indicates when the operation started.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            OperationStartTime?: string;
            /**
                * <p>Indicates when the operation completed.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            OperationEndTime?: string;
            /**
                * <p>The reboot option specified for the instance.</p>
                */
            RebootOption?: string;
            /**
                * <p>The type of patch operation performed. For Patch Manager, the values are
                *             <code>SCAN</code> and <code>INSTALL</code>. </p>
                */
            Operation?: string;
    }
    export namespace PatchSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchSummary) => any;
    }
    /**
        * <p>The details of process-related information about a finding.</p>
        */
    export interface ProcessDetails {
            /**
                * <p>The name of the process.</p>
                */
            Name?: string;
            /**
                * <p>The path to the process executable.</p>
                */
            Path?: string;
            /**
                * <p>The process ID.</p>
                */
            Pid?: number;
            /**
                * <p>The parent process ID.</p>
                */
            ParentPid?: number;
            /**
                * <p>Indicates when the process was launched.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LaunchedAt?: string;
            /**
                * <p>Indicates when the process was terminated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            TerminatedAt?: string;
    }
    export namespace ProcessDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessDetails) => any;
    }
    export enum RecordState {
            ACTIVE = "ACTIVE",
            ARCHIVED = "ARCHIVED"
    }
    /**
        * <p>A recommendation on how to remediate the issue identified in a finding.</p>
        */
    export interface Recommendation {
            /**
                * <p>Describes the recommended steps to take to remediate an issue identified in a finding.</p>
                */
            Text?: string;
            /**
                * <p>A URL to a page or site that contains information about how to remediate a finding.</p>
                */
            Url?: string;
    }
    export namespace Recommendation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Recommendation) => any;
    }
    /**
        * <p>Details about the remediation steps for a finding.</p>
        */
    export interface Remediation {
            /**
                * <p>A recommendation on the steps to take to remediate the issue identified by a finding.</p>
                */
            Recommendation?: Recommendation;
    }
    export namespace Remediation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Remediation) => any;
    }
    /**
        * <p>An occurrence of sensitive data detected in a Microsoft Excel workbook, comma-separated value (CSV) file, or tab-separated value (TSV) file.</p>
        */
    export interface Cell {
            /**
                * <p>The column number of the column that contains the data. For a Microsoft Excel workbook, the column number corresponds to the alphabetical column identifiers. For example, a value of 1 for Column corresponds to the A column in the workbook.</p>
                */
            Column?: number;
            /**
                * <p>The row number of the row that contains the data.</p>
                */
            Row?: number;
            /**
                * <p>The name of the column that contains the data.</p>
                */
            ColumnName?: string;
            /**
                * <p>For a Microsoft Excel workbook, provides the location of the cell, as an absolute cell reference, that contains the data. For example, Sheet2!C5 for cell C5 on Sheet2.</p>
                */
            CellReference?: string;
    }
    export namespace Cell {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Cell) => any;
    }
    /**
        * <p>Identifies where the sensitive data begins and ends.</p>
        */
    export interface Range {
            /**
                * <p>The number of lines (for a line range) or characters (for an offset range) from the beginning of the file to the end of the sensitive data.</p>
                */
            Start?: number;
            /**
                * <p>The number of lines (for a line range) or characters (for an offset range) from the beginning of the file to the end of the sensitive data.</p>
                */
            End?: number;
            /**
                * <p>In the line where the sensitive data starts, the column within the line where the sensitive data starts.</p>
                */
            StartColumn?: number;
    }
    export namespace Range {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Range) => any;
    }
    /**
        * <p>An occurrence of sensitive data in an Adobe Portable Document Format (PDF) file.</p>
        */
    export interface Page {
            /**
                * <p>The page number of the page that contains the sensitive data.</p>
                */
            PageNumber?: number;
            /**
                * <p>An occurrence of sensitive data detected in a non-binary text file or a Microsoft Word file. Non-binary text files include files such as HTML, XML, JSON, and TXT files.</p>
                */
            LineRange?: Range;
            /**
                * <p>An occurrence of sensitive data detected in a binary text file.</p>
                */
            OffsetRange?: Range;
    }
    export namespace Page {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Page) => any;
    }
    /**
        * <p>An occurrence of sensitive data in an Apache Avro object container or an Apache Parquet file.</p>
        */
    export interface _Record {
            /**
                * <p>The path, as a JSONPath expression, to the field in the record that contains the data. If the field name is longer than 20 characters, it is truncated. If the path is longer than 250 characters, it is truncated.</p>
                */
            JsonPath?: string;
            /**
                * <p>The record index, starting from 0, for the record that contains the data.</p>
                */
            RecordIndex?: number;
    }
    export namespace _Record {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: _Record) => any;
    }
    /**
        * <p>The detected occurrences of sensitive data.</p>
        */
    export interface Occurrences {
            /**
                * <p>Occurrences of sensitive data detected in a non-binary text file or a Microsoft Word file. Non-binary text files include files such as HTML, XML, JSON, and TXT files.</p>
                */
            LineRanges?: Range[];
            /**
                * <p>Occurrences of sensitive data detected in a binary text file.</p>
                */
            OffsetRanges?: Range[];
            /**
                * <p>Occurrences of sensitive data in an Adobe Portable Document Format (PDF) file.</p>
                */
            Pages?: Page[];
            /**
                * <p>Occurrences of sensitive data in an Apache Avro object container or an Apache Parquet file.</p>
                */
            Records?: _Record[];
            /**
                * <p>Occurrences of sensitive data detected in Microsoft Excel workbooks, comma-separated value (CSV) files, or tab-separated value (TSV) files.</p>
                */
            Cells?: Cell[];
    }
    export namespace Occurrences {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Occurrences) => any;
    }
    /**
        * <p>The list of detected instances of sensitive data.</p>
        */
    export interface CustomDataIdentifiersDetections {
            /**
                * <p>The total number of occurrences of sensitive data that were detected.</p>
                */
            Count?: number;
            /**
                * <p>The ARN of the custom identifier that was used to detect the sensitive data.</p>
                */
            Arn?: string;
            /**
                * <p>he name of the custom identifier that detected the sensitive data.</p>
                */
            Name?: string;
            /**
                * <p>Details about the sensitive data that was detected.</p>
                */
            Occurrences?: Occurrences;
    }
    export namespace CustomDataIdentifiersDetections {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomDataIdentifiersDetections) => any;
    }
    /**
        * <p>Contains an instance of sensitive data that was detected by a customer-defined identifier.</p>
        */
    export interface CustomDataIdentifiersResult {
            /**
                * <p>The list of detected instances of sensitive data.</p>
                */
            Detections?: CustomDataIdentifiersDetections[];
            /**
                * <p>The total number of occurrences of sensitive data.</p>
                */
            TotalCount?: number;
    }
    export namespace CustomDataIdentifiersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomDataIdentifiersResult) => any;
    }
    /**
        * <p>The list of detected instances of sensitive data.</p>
        */
    export interface SensitiveDataDetections {
            /**
                * <p>The total number of occurrences of sensitive data that were detected.</p>
                */
            Count?: number;
            /**
                * <p>The type of sensitive data that was detected. For example, the type might indicate that the data is an email address.</p>
                */
            Type?: string;
            /**
                * <p>Details about the sensitive data that was detected.</p>
                */
            Occurrences?: Occurrences;
    }
    export namespace SensitiveDataDetections {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SensitiveDataDetections) => any;
    }
    /**
        * <p>Contains a detected instance of sensitive data that are based on built-in identifiers.</p>
        */
    export interface SensitiveDataResult {
            /**
                * <p>The category of sensitive data that was detected. For example, the category can indicate that the sensitive data involved credentials, financial information, or personal information.</p>
                */
            Category?: string;
            /**
                * <p>The list of detected instances of sensitive data.</p>
                */
            Detections?: SensitiveDataDetections[];
            /**
                * <p>The total number of occurrences of sensitive data.</p>
                */
            TotalCount?: number;
    }
    export namespace SensitiveDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SensitiveDataResult) => any;
    }
    /**
        * <p>Provides details about the current status of the sensitive data detection.</p>
        */
    export interface ClassificationStatus {
            /**
                * <p>The code that represents the status of the sensitive data detection.</p>
                */
            Code?: string;
            /**
                * <p>A longer description of the current status of the sensitive data detection.</p>
                */
            Reason?: string;
    }
    export namespace ClassificationStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClassificationStatus) => any;
    }
    /**
        * <p>Details about the sensitive data that was detected on the resource.</p>
        */
    export interface ClassificationResult {
            /**
                * <p>The type of content that the finding applies to.</p>
                */
            MimeType?: string;
            /**
                * <p>The total size in bytes of the affected data.</p>
                */
            SizeClassified?: number;
            /**
                * <p>Indicates whether there are additional occurrences of sensitive data that are not included in the finding. This occurs when the number of occurrences exceeds the maximum that can be included.</p>
                */
            AdditionalOccurrences?: boolean;
            /**
                * <p>The current status of the sensitive data detection.</p>
                */
            Status?: ClassificationStatus;
            /**
                * <p>Provides details about sensitive data that was identified based on built-in configuration.</p>
                */
            SensitiveData?: SensitiveDataResult[];
            /**
                * <p>Provides details about sensitive data that was identified based on customer-defined configuration.</p>
                */
            CustomDataIdentifiers?: CustomDataIdentifiersResult;
    }
    export namespace ClassificationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClassificationResult) => any;
    }
    /**
        * <p>Provides details about sensitive data that was detected on a resource.</p>
        */
    export interface DataClassificationDetails {
            /**
                * <p>The path to the folder or file that contains the sensitive data.</p>
                */
            DetailedResultsLocation?: string;
            /**
                * <p>The details about the sensitive data that was detected on the resource.</p>
                */
            Result?: ClassificationResult;
    }
    export namespace DataClassificationDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataClassificationDetails) => any;
    }
    /**
        * <p>A wrapper type for the attributes of an Amazon SNS subscription.</p>
        */
    export interface AwsSnsTopicSubscription {
            /**
                * <p>The subscription's endpoint (format depends on the protocol).</p>
                */
            Endpoint?: string;
            /**
                * <p>The subscription's protocol.</p>
                */
            Protocol?: string;
    }
    export namespace AwsSnsTopicSubscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSnsTopicSubscription) => any;
    }
    /**
        * <p>Provides information about an Amazon SNS topic to which notifications can be published.</p>
        */
    export interface AwsSnsTopicDetails {
            /**
                * <p>The ID of an Amazon Web Services managed key for Amazon SNS or a customer managed key.</p>
                */
            KmsMasterKeyId?: string;
            /**
                * <p>Subscription is an embedded property that describes the subscription endpoints of an Amazon SNS topic.</p>
                */
            Subscription?: AwsSnsTopicSubscription[];
            /**
                * <p>The name of the Amazon SNS topic.</p>
                */
            TopicName?: string;
            /**
                * <p>The subscription's owner.</p>
                */
            Owner?: string;
            /**
                * <p>Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.
                *       </p>
                */
            SqsSuccessFeedbackRoleArn?: string;
            /**
                * <p>Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon SQS endpoint.
                *       </p>
                */
            SqsFailureFeedbackRoleArn?: string;
            /**
                * <p>Indicates failed message delivery status for an Amazon SNS topic that is subscribed to a platform application endpoint.
                *       </p>
                */
            ApplicationSuccessFeedbackRoleArn?: string;
            /**
                * <p>Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.
                *       </p>
                */
            FirehoseSuccessFeedbackRoleArn?: string;
            /**
                * <p>Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an Amazon Kinesis Data Firehose endpoint.
                *       </p>
                */
            FirehoseFailureFeedbackRoleArn?: string;
            /**
                * <p>Indicates successful message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint.
                *       </p>
                */
            HttpSuccessFeedbackRoleArn?: string;
            /**
                * <p>Indicates failed message delivery status for an Amazon SNS topic that is subscribed to an HTTP endpoint. </p>
                */
            HttpFailureFeedbackRoleArn?: string;
    }
    export namespace AwsSnsTopicDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSnsTopicDetails) => any;
    }
    /**
        * <p>Data about a queue.</p>
        */
    export interface AwsSqsQueueDetails {
            /**
                * <p>The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling KMS again.</p>
                */
            KmsDataKeyReusePeriodSeconds?: number;
            /**
                * <p>The ID of an Amazon Web Services managed key for Amazon SQS or a custom
                *          KMS key.</p>
                */
            KmsMasterKeyId?: string;
            /**
                * <p>The name of the new queue.</p>
                */
            QueueName?: string;
            /**
                * <p>The ARN of the dead-letter queue to which Amazon SQS moves
                *          messages after the value of <code>maxReceiveCount</code> is exceeded. </p>
                */
            DeadLetterTargetArn?: string;
    }
    export namespace AwsSqsQueueDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSqsQueueDetails) => any;
    }
    /**
        * <p>Provides the details about the compliance status for a patch.</p>
        */
    export interface AwsSsmComplianceSummary {
            /**
                * <p>The current patch compliance status.</p>
                *          <p>The possible status values are:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>COMPLIANT</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NON_COMPLIANT</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UNSPECIFIED_DATA</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>For the patches that are compliant, the number that have a severity of
                *             <code>CRITICAL</code>.</p>
                */
            CompliantCriticalCount?: number;
            /**
                * <p>For the patches that are compliant, the number that have a severity of
                *          <code>HIGH</code>.</p>
                */
            CompliantHighCount?: number;
            /**
                * <p>For the patches that are compliant, the number that have a severity of
                *             <code>MEDIUM</code>.</p>
                */
            CompliantMediumCount?: number;
            /**
                * <p>The type of execution that was used determine compliance.</p>
                */
            ExecutionType?: string;
            /**
                * <p>For the patch items that are noncompliant, the number of items that have a severity of
                *             <code>CRITICAL</code>.</p>
                */
            NonCompliantCriticalCount?: number;
            /**
                * <p>For the patches that are compliant, the number that have a severity of
                *             <code>INFORMATIONAL</code>.</p>
                */
            CompliantInformationalCount?: number;
            /**
                * <p>For the patches that are noncompliant, the number that have a severity of
                *             <code>INFORMATIONAL</code>.</p>
                */
            NonCompliantInformationalCount?: number;
            /**
                * <p>For the patches that are compliant, the number that have a severity of
                *             <code>UNSPECIFIED</code>.</p>
                */
            CompliantUnspecifiedCount?: number;
            /**
                * <p>For the patches that are noncompliant, the number that have a severity of
                *             <code>LOW</code>.</p>
                */
            NonCompliantLowCount?: number;
            /**
                * <p>For the patches that are noncompliant, the number that have a severity of
                *             <code>HIGH</code>.</p>
                */
            NonCompliantHighCount?: number;
            /**
                * <p>For the patches that are compliant, the number that have a severity of
                *          <code>LOW</code>.</p>
                */
            CompliantLowCount?: number;
            /**
                * <p>The type of resource for which the compliance was determined. For
                *             <code>AwsSsmPatchCompliance</code>, <code>ComplianceType</code> is <code>Patch</code>. </p>
                */
            ComplianceType?: string;
            /**
                * <p>The identifier of the patch baseline. The patch baseline lists the patches that are
                *          approved for installation.</p>
                */
            PatchBaselineId?: string;
            /**
                * <p>The highest severity for the patches.</p>
                */
            OverallSeverity?: string;
            /**
                * <p>For the patches that are noncompliant, the number that have a severity of
                *             <code>MEDIUM</code>.</p>
                */
            NonCompliantMediumCount?: number;
            /**
                * <p>For the patches that are noncompliant, the number that have a severity of
                *             <code>UNSPECIFIED</code>.</p>
                */
            NonCompliantUnspecifiedCount?: number;
            /**
                * <p>The identifier of the patch group for which compliance was determined. A patch group
                *          uses tags to group EC2 instances that should have the same patch compliance.</p>
                */
            PatchGroup?: string;
    }
    export namespace AwsSsmComplianceSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSsmComplianceSummary) => any;
    }
    /**
        * <p>Provides details about the compliance for a patch.</p>
        */
    export interface AwsSsmPatch {
            /**
                * <p>The compliance status details for the patch.</p>
                */
            ComplianceSummary?: AwsSsmComplianceSummary;
    }
    export namespace AwsSsmPatch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSsmPatch) => any;
    }
    /**
        * <p>Provides information about the state of a patch on an instance based on the patch
        *          baseline that was used to patch the instance.</p>
        */
    export interface AwsSsmPatchComplianceDetails {
            /**
                * <p>Information about the status of a patch.</p>
                */
            Patch?: AwsSsmPatch;
    }
    export namespace AwsSsmPatchComplianceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSsmPatchComplianceDetails) => any;
    }
    /**
        * <p>A match predicate. A predicate might look for characteristics such as specific IP addresses, geographic locations, or sizes.</p>
        */
    export interface AwsWafRateBasedRuleMatchPredicate {
            /**
                * <p>The unique identifier for the predicate.</p>
                */
            DataId?: string;
            /**
                * <p>If set to <code>true</code>, then the rule actions are performed on requests that match the predicate settings.</p>
                *          <p>If set to <code>false</code>, then the rule actions are performed on all requests except those that match the predicate settings.
                *       </p>
                */
            Negated?: boolean;
            /**
                * <p>The type of predicate.</p>
                */
            Type?: string;
    }
    export namespace AwsWafRateBasedRuleMatchPredicate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRateBasedRuleMatchPredicate) => any;
    }
    /**
        * <p>Details about a rate-based rule for global resources. A rate-based rule provides settings to indicate when to allow, block, or count a request. Rate-based rules include the number of requests that arrive over a specified period of time.</p>
        */
    export interface AwsWafRateBasedRuleDetails {
            /**
                * <p>The name of the metrics for the rate-based rule.</p>
                */
            MetricName?: string;
            /**
                * <p>The name of the rate-based rule.</p>
                */
            Name?: string;
            /**
                * <p>The field that WAF uses to determine whether requests are likely arriving from single source and are subject to rate monitoring.</p>
                */
            RateKey?: string;
            /**
                * <p>The maximum number of requests that have an identical value for the field specified in <code>RateKey</code> that are allowed within a five-minute period. If the number of requests exceeds <code>RateLimit</code> and the other predicates specified in the rule are met, WAF triggers the action for the rule.</p>
                */
            RateLimit?: number;
            /**
                * <p>The unique identifier for the rate-based rule.</p>
                */
            RuleId?: string;
            /**
                * <p>The predicates to include in the rate-based rule.</p>
                */
            MatchPredicates?: AwsWafRateBasedRuleMatchPredicate[];
    }
    export namespace AwsWafRateBasedRuleDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRateBasedRuleDetails) => any;
    }
    /**
        * <p>Details for a match predicate. A predicate might look for characteristics such as specific IP addresses, geographic locations, or sizes.</p>
        */
    export interface AwsWafRegionalRateBasedRuleMatchPredicate {
            /**
                * <p>The unique identifier for the predicate.</p>
                */
            DataId?: string;
            /**
                * <p>If set to <code>true</code>, then the rule actions are performed on requests that match the predicate settings.</p>
                *          <p>If set to <code>false</code>, then the rule actions are performed on all requests except those that match the predicate settings.</p>
                */
            Negated?: boolean;
            /**
                * <p>The type of predicate.</p>
                */
            Type?: string;
    }
    export namespace AwsWafRegionalRateBasedRuleMatchPredicate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalRateBasedRuleMatchPredicate) => any;
    }
    /**
        * <p>contains details about a rate-based rule for Regional resources. A rate-based rule provides settings to indicate when to allow, block, or count a request. Rate-based rules include the number of requests that arrive over a specified period of time.</p>
        */
    export interface AwsWafRegionalRateBasedRuleDetails {
            /**
                * <p>The name of the metrics for the rate-based rule.</p>
                */
            MetricName?: string;
            /**
                * <p>The name of the rate-based rule.</p>
                */
            Name?: string;
            /**
                * <p>The field that WAF uses to determine whether requests are likely arriving from single source and are subject to rate monitoring.</p>
                */
            RateKey?: string;
            /**
                * <p>The maximum number of requests that have an identical value for the field specified in <code>RateKey</code> that are allowed within a five-minute period. If the number of requests exceeds <code>RateLimit</code> and the other predicates specified in the rule are met, WAF triggers the action for the rule.</p>
                */
            RateLimit?: number;
            /**
                * <p>The unique identifier for the rate-based rule.</p>
                */
            RuleId?: string;
            /**
                * <p>The predicates to include in the rate-based rule.</p>
                */
            MatchPredicates?: AwsWafRegionalRateBasedRuleMatchPredicate[];
    }
    export namespace AwsWafRegionalRateBasedRuleDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalRateBasedRuleDetails) => any;
    }
    /**
        * <p>Provides details about the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>,
        *          <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and, for each object, indicates whether you want to negate the settings.
        *       </p>
        */
    export interface AwsWafRegionalRulePredicateListDetails {
            /**
                * <p>A unique identifier for a predicate in a rule, such as <code>ByteMatchSetId</code> or <code>IPSetId</code>.
                *       </p>
                */
            DataId?: string;
            /**
                * <p>Specifies if you want WAF to allow, block, or count requests based on the settings in the
                *          <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>,
                *          <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, or <code>SizeConstraintSet</code>.
                *       </p>
                */
            Negated?: boolean;
            /**
                * <p>The type of predicate in a rule, such as <code>ByteMatch</code> or <code>IPSet</code>.
                *       </p>
                */
            Type?: string;
    }
    export namespace AwsWafRegionalRulePredicateListDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalRulePredicateListDetails) => any;
    }
    /**
        * <p>Provides information about an WAF Regional rule. This rule identifies the web requests that you want to allow, block, or count. </p>
        */
    export interface AwsWafRegionalRuleDetails {
            /**
                * <p>A name for the metrics for the rule.
                *       </p>
                */
            MetricName?: string;
            /**
                * <p>A descriptive name for the rule.
                *       </p>
                */
            Name?: string;
            /**
                * <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>,
                *             <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>, <code>RegexMatchSet</code>,
                *             <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to
                *          add to a rule and, for each object, indicates whether you want to negate the settings. </p>
                */
            PredicateList?: AwsWafRegionalRulePredicateListDetails[];
            /**
                * <p>The ID of the rule.
                *       </p>
                */
            RuleId?: string;
    }
    export namespace AwsWafRegionalRuleDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalRuleDetails) => any;
    }
    /**
        * <p>Describes the action that AWS WAF should take on a web request when it matches the criteria defined in the rule.
        *       </p>
        */
    export interface AwsWafRegionalRuleGroupRulesActionDetails {
            /**
                * <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>, <code>RegexMatchSet</code>,
                * <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and, for each object, indicates whether you want to negate the settings.</p>
                */
            Type?: string;
    }
    export namespace AwsWafRegionalRuleGroupRulesActionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalRuleGroupRulesActionDetails) => any;
    }
    /**
        * <p>Provides information about the rules attached to a rule group
        *       </p>
        */
    export interface AwsWafRegionalRuleGroupRulesDetails {
            /**
                * <p>The action that WAF should take on a web request when it matches the criteria defined in the rule. </p>
                */
            Action?: AwsWafRegionalRuleGroupRulesActionDetails;
            /**
                * <p>If you define more than one rule in a web ACL, WAF evaluates each request against the rules in
                *          order based on the value of <code>Priority</code>. </p>
                */
            Priority?: number;
            /**
                * <p>The ID for a rule.
                *       </p>
                */
            RuleId?: string;
            /**
                * <p>The type of rule in the rule group.
                *       </p>
                */
            Type?: string;
    }
    export namespace AwsWafRegionalRuleGroupRulesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalRuleGroupRulesDetails) => any;
    }
    /**
        * <p>Provides information about an WAF Regional rule group. The rule group is a collection of rules for inspecting and controlling web
        *          requests. </p>
        */
    export interface AwsWafRegionalRuleGroupDetails {
            /**
                * <p>A name for the metrics for this rule group.
                *       </p>
                */
            MetricName?: string;
            /**
                * <p>The descriptive name of the rule group.
                *       </p>
                */
            Name?: string;
            /**
                * <p>The ID of the rule group.
                *       </p>
                */
            RuleGroupId?: string;
            /**
                * <p>Provides information about the rule statements used to identify the web requests that you want to allow, block, or
                * count.
                *       </p>
                */
            Rules?: AwsWafRegionalRuleGroupRulesDetails[];
    }
    export namespace AwsWafRegionalRuleGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalRuleGroupDetails) => any;
    }
    /**
        * <p>The action that WAF takes when a web request matches all conditions in the
        *          rule, such as allow, block, or count the request. </p>
        */
    export interface AwsWafRegionalWebAclRulesListActionDetails {
            /**
                * <p>For actions that are associated with a rule, the action that WAF takes when a web request matches all conditions in a rule.
                *       </p>
                */
            Type?: string;
    }
    export namespace AwsWafRegionalWebAclRulesListActionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalWebAclRulesListActionDetails) => any;
    }
    /**
        * <p>Provides details about the action to use in the place of the action that results from the rule group
        * evaluation.
        *       </p>
        */
    export interface AwsWafRegionalWebAclRulesListOverrideActionDetails {
            /**
                * <p>Overrides the rule evaluation result in the rule group.
                *       </p>
                */
            Type?: string;
    }
    export namespace AwsWafRegionalWebAclRulesListOverrideActionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalWebAclRulesListOverrideActionDetails) => any;
    }
    /**
        * <p>A combination of <code>ByteMatchSet</code>, <code>IPSet</code>, and/or <code>SqlInjectionMatchSet</code>
        * objects that identify the web requests that you want to allow, block, or count.
        *       </p>
        */
    export interface AwsWafRegionalWebAclRulesListDetails {
            /**
                * <p>The action that AWS WAF takes when a web request matches all conditions in the rule, such as allow,
                *          block, or count the request.
                *       </p>
                */
            Action?: AwsWafRegionalWebAclRulesListActionDetails;
            /**
                * <p>Overrides the rule evaluation result in the rule group.
                *       </p>
                */
            OverrideAction?: AwsWafRegionalWebAclRulesListOverrideActionDetails;
            /**
                * <p>The order in which WAF evaluates the rules in a web ACL.
                *       </p>
                */
            Priority?: number;
            /**
                * <p>The ID of an WAF Regional rule to associate with a web ACL. </p>
                */
            RuleId?: string;
            /**
                * <p>For actions that are associated with a rule, the action that WAF takes when a web
                * request matches all conditions in a rule.
                *       </p>
                */
            Type?: string;
    }
    export namespace AwsWafRegionalWebAclRulesListDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalWebAclRulesListDetails) => any;
    }
    /**
        * <p>Provides information about the web access control list (web ACL). The web ACL contains the rules that identify the requests that you
        *          want to allow, block, or count. </p>
        */
    export interface AwsWafRegionalWebAclDetails {
            /**
                * <p>The action to perform if none of the rules contained in the web ACL match.
                *       </p>
                */
            DefaultAction?: string;
            /**
                * <p>A name for the metrics for this web ACL.
                *       </p>
                */
            MetricName?: string;
            /**
                * <p>A descriptive name for the web ACL.
                *       </p>
                */
            Name?: string;
            /**
                * <p>An array that contains the action for each rule in a web ACL, the priority of the rule, and the ID of
                * the rule.
                *       </p>
                */
            RulesList?: AwsWafRegionalWebAclRulesListDetails[];
            /**
                * <p>The ID of the web ACL.
                *       </p>
                */
            WebAclId?: string;
    }
    export namespace AwsWafRegionalWebAclDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRegionalWebAclDetails) => any;
    }
    /**
        * <p>Provides details about the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>,
        *          <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and,
        * for each object, indicates whether you want to negate the settings.
        *       </p>
        */
    export interface AwsWafRulePredicateListDetails {
            /**
                * <p>A unique identifier for a predicate in a rule, such as <code>ByteMatchSetId</code> or <code>IPSetId</code>.
                *       </p>
                */
            DataId?: string;
            /**
                * <p>Specifies if you want WAF to allow, block, or count requests based on the settings in the
                *          <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>,
                *          <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, or <code>SizeConstraintSet</code>.
                *       </p>
                */
            Negated?: boolean;
            /**
                * <p>The type of predicate in a rule, such as <code>ByteMatch</code> or <code>IPSet</code>.
                *       </p>
                */
            Type?: string;
    }
    export namespace AwsWafRulePredicateListDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRulePredicateListDetails) => any;
    }
    /**
        * <p>Provides information about a WAF rule. This rule specifies the web requests that you want to allow, block, or count.
        *       </p>
        */
    export interface AwsWafRuleDetails {
            /**
                * <p>The name of the metrics for this rule.
                *       </p>
                */
            MetricName?: string;
            /**
                * <p>A descriptive name for the rule.
                *       </p>
                */
            Name?: string;
            /**
                * <p>Specifies the <code>ByteMatchSet</code>, <code>IPSet</code>, <code>SqlInjectionMatchSet</code>, <code>XssMatchSet</code>,
                *          <code>RegexMatchSet</code>, <code>GeoMatchSet</code>, and <code>SizeConstraintSet</code> objects that you want to add to a rule and,
                *          for each object, indicates whether you want to negate the settings.
                *       </p>
                */
            PredicateList?: AwsWafRulePredicateListDetails[];
            /**
                * <p>The ID of the WAF rule.
                *       </p>
                */
            RuleId?: string;
    }
    export namespace AwsWafRuleDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRuleDetails) => any;
    }
    /**
        * <p>Provides information about what action WAF should take on a web request when it matches the criteria defined in the rule.
        *       </p>
        */
    export interface AwsWafRuleGroupRulesActionDetails {
            /**
                * <p>The action that WAF should take on a web request when it matches the rule's
                *          statement.</p>
                */
            Type?: string;
    }
    export namespace AwsWafRuleGroupRulesActionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRuleGroupRulesActionDetails) => any;
    }
    /**
        * <p>Provides information about the rules attached to the rule group. These rules identify the web requests that you want to
        *          allow, block, or count.
        *       </p>
        */
    export interface AwsWafRuleGroupRulesDetails {
            /**
                * <p>Provides information about what action WAF should take on a web request when it matches the criteria defined in the rule.
                *       </p>
                */
            Action?: AwsWafRuleGroupRulesActionDetails;
            /**
                * <p>If you define more than one rule in a web ACL, WAF evaluates each request against the rules in order
                *          based on the value of <code>Priority</code>.</p>
                */
            Priority?: number;
            /**
                * <p>The rule ID for a rule.
                *       </p>
                */
            RuleId?: string;
            /**
                * <p>The type of rule.
                *       </p>
                */
            Type?: string;
    }
    export namespace AwsWafRuleGroupRulesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRuleGroupRulesDetails) => any;
    }
    /**
        * <p>Provides information about an WAF rule group. A rule group is a collection of rules for inspecting and controlling web requests.
        *       </p>
        */
    export interface AwsWafRuleGroupDetails {
            /**
                * <p>The name of the metrics for this rule group.
                *       </p>
                */
            MetricName?: string;
            /**
                * <p>The name of the rule group.
                *       </p>
                */
            Name?: string;
            /**
                * <p>The ID of the rule group.
                *       </p>
                */
            RuleGroupId?: string;
            /**
                * <p>Provides information about the rules attached to the rule group. These rules identify the web requests that you want to
                * allow, block, or count.
                *       </p>
                */
            Rules?: AwsWafRuleGroupRulesDetails[];
    }
    export namespace AwsWafRuleGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafRuleGroupDetails) => any;
    }
    /**
        * <p>Details about the action that CloudFront or WAF takes when a web request matches the
        *          conditions in the rule. </p>
        */
    export interface WafAction {
            /**
                * <p>Specifies how you want WAF to respond to requests that match the settings in a
                *          rule.</p>
                *          <p>Valid settings include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALLOW</code> - WAF allows requests</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>BLOCK</code> - WAF blocks requests</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>COUNT</code> - WAF increments a counter of the requests that
                *                match all of the conditions in the rule. WAF then continues to inspect
                *                the web request based on the remaining rules in the web ACL. You can't specify
                *                   <code>COUNT</code> for the default action for a web ACL.</p>
                *             </li>
                *          </ul>
                */
            Type?: string;
    }
    export namespace WafAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WafAction) => any;
    }
    /**
        * <p>Details about a rule to exclude from a rule group.</p>
        */
    export interface WafExcludedRule {
            /**
                * <p>The unique identifier for the rule to exclude from the rule group.</p>
                */
            RuleId?: string;
    }
    export namespace WafExcludedRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WafExcludedRule) => any;
    }
    /**
        * <p>Details about an override action for a rule.</p>
        */
    export interface WafOverrideAction {
            /**
                * <p>
                *             <code>COUNT</code> overrides the action specified by the individual rule within a
                *             <code>RuleGroup</code> .</p>
                *          <p>If set to <code>NONE</code>, the rule's action takes place.</p>
                */
            Type?: string;
    }
    export namespace WafOverrideAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WafOverrideAction) => any;
    }
    /**
        * <p>Details for a rule in an WAF web ACL.</p>
        */
    export interface AwsWafWebAclRule {
            /**
                * <p>Specifies the action that CloudFront or WAF takes when a web request matches the
                *          conditions in the rule. </p>
                */
            Action?: WafAction;
            /**
                * <p>Rules to exclude from a rule group.</p>
                */
            ExcludedRules?: WafExcludedRule[];
            /**
                * <p>Use the <code>OverrideAction</code> to test your <code>RuleGroup</code>.</p>
                *          <p>Any rule in a <code>RuleGroup</code> can potentially block a request. If you set the <code>OverrideAction</code> to
                *             <code>None</code>, the <code>RuleGroup</code> blocks a request if any individual rule in the <code>RuleGroup</code>
                *          matches the request and is configured to block that request.</p>
                *          <p>However, if you first want to test the <code>RuleGroup</code>,
                *          set the <code>OverrideAction</code> to <code>Count</code>. The <code>RuleGroup</code>
                *          then overrides any block action specified by individual rules contained within the group.
                *          Instead of blocking matching requests, those requests are counted.</p>
                *          <p>
                *             <code>ActivatedRule</code>|<code>OverrideAction</code> applies only when updating or
                *          adding a <code>RuleGroup</code>
                *          to a web ACL. In this case you do not use <code>ActivatedRule</code>
                *             <code>Action</code>. For all other update requests,
                *             <code>ActivatedRule</code>
                *             <code>Action</code> is used instead of <code>ActivatedRule</code>
                *             <code>OverrideAction</code>.</p>
                */
            OverrideAction?: WafOverrideAction;
            /**
                * <p>Specifies the order in which the rules in a web
                *          ACL are evaluated. Rules with a lower value for <code>Priority</code> are
                *          evaluated before rules with a higher value. The value must be a unique integer. If you add
                *          multiple rules to a web ACL, the values do not need to be consecutive.</p>
                */
            Priority?: number;
            /**
                * <p>The identifier for a rule.</p>
                */
            RuleId?: string;
            /**
                * <p>The rule type.</p>
                *          <p>Valid values: <code>REGULAR</code> | <code>RATE_BASED</code> | <code>GROUP</code>
                *          </p>
                *          <p>The default is <code>REGULAR</code>.</p>
                */
            Type?: string;
    }
    export namespace AwsWafWebAclRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafWebAclRule) => any;
    }
    /**
        * <p>Provides information about an WAF web access control list (web ACL).</p>
        */
    export interface AwsWafWebAclDetails {
            /**
                * <p>A friendly name or description of the web ACL. You can't change the name of a web ACL  after you create it.</p>
                */
            Name?: string;
            /**
                * <p>The action to perform if none of the rules contained in the web ACL match.</p>
                */
            DefaultAction?: string;
            /**
                * <p>An array that contains the action for each rule in a web ACL, the priority of the rule, and the ID of the rule.</p>
                */
            Rules?: AwsWafWebAclRule[];
            /**
                * <p>A unique identifier for a web ACL.</p>
                */
            WebAclId?: string;
    }
    export namespace AwsWafWebAclDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsWafWebAclDetails) => any;
    }
    /**
        * <p>Information about the encryption configuration for X-Ray.</p>
        */
    export interface AwsXrayEncryptionConfigDetails {
            /**
                * <p>The identifier of the KMS key that is used for encryption. Provided if <code>Type</code> is <code>KMS</code>.</p>
                */
            KeyId?: string;
            /**
                * <p>The current status of the encryption configuration. When <code>Status</code> is <code>UPDATING</code>, X-Ray might use both the old and new encryption.</p>
                */
            Status?: string;
            /**
                * <p>The type of encryption. <code>KMS</code> indicates that the encryption uses KMS keys. <code>NONE</code> indicates to use the default encryption.</p>
                */
            Type?: string;
    }
    export namespace AwsXrayEncryptionConfigDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsXrayEncryptionConfigDetails) => any;
    }
    /**
        * <p>Describes the mounting of a volume in a container.
        *       </p>
        */
    export interface VolumeMount {
            /**
                * <p>The name of the volume.
                *       </p>
                */
            Name?: string;
            /**
                * <p>The path in the container at which the volume should be mounted.
                *       </p>
                */
            MountPath?: string;
    }
    export namespace VolumeMount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VolumeMount) => any;
    }
    /**
        * <p>Container details related to a finding.</p>
        */
    export interface ContainerDetails {
            /**
                * <p>The runtime of the container.
                *       </p>
                */
            ContainerRuntime?: string;
            /**
                * <p>The name of the container related to a finding.</p>
                */
            Name?: string;
            /**
                * <p>The identifier of the container image related to a finding.</p>
                */
            ImageId?: string;
            /**
                * <p>The name of the container image related to a finding.</p>
                */
            ImageName?: string;
            /**
                * <p>Indicates when the container started.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LaunchedAt?: string;
            /**
                * <p>Provides information about the mounting of a volume in a container.
                *       </p>
                */
            VolumeMounts?: VolumeMount[];
            /**
                * <p>When this parameter is <code>true</code>, the container is given elevated privileges on the host
                * container instance (similar to the root user).
                *       </p>
                */
            Privileged?: boolean;
    }
    export namespace ContainerDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerDetails) => any;
    }
    /**
        * <p>Additional details about a resource related to a finding.</p>
        *          <p>To provide the details, use the object that corresponds to the resource type. For
        *          example, if the resource type is <code>AwsEc2Instance</code>, then you use the
        *             <code>AwsEc2Instance</code> object to provide the details.</p>
        *          <p>If the type-specific object does not contain all of the fields you want to populate,
        *          then you use the <code>Other</code> object to populate those additional fields.</p>
        *          <p>You also use the <code>Other</code> object to populate the details when the selected
        *          type does not have a corresponding object.</p>
        */
    export interface ResourceDetails {
            /**
                * <p>Details for an autoscaling group.</p>
                */
            AwsAutoScalingAutoScalingGroup?: AwsAutoScalingAutoScalingGroupDetails;
            /**
                * <p>Details for an CodeBuild project.</p>
                */
            AwsCodeBuildProject?: AwsCodeBuildProjectDetails;
            /**
                * <p>Details about a CloudFront distribution.</p>
                */
            AwsCloudFrontDistribution?: AwsCloudFrontDistributionDetails;
            /**
                * <p>Details about an EC2 instance related to a finding.</p>
                */
            AwsEc2Instance?: AwsEc2InstanceDetails;
            /**
                * <p>Details for an EC2 network interface.</p>
                */
            AwsEc2NetworkInterface?: AwsEc2NetworkInterfaceDetails;
            /**
                * <p>Details for an EC2 security group.</p>
                */
            AwsEc2SecurityGroup?: AwsEc2SecurityGroupDetails;
            /**
                * <p>Details for an Amazon EC2 volume.</p>
                */
            AwsEc2Volume?: AwsEc2VolumeDetails;
            /**
                * <p>Details for an Amazon EC2 VPC.</p>
                */
            AwsEc2Vpc?: AwsEc2VpcDetails;
            /**
                * <p>Details about an Elastic IP address.</p>
                */
            AwsEc2Eip?: AwsEc2EipDetails;
            /**
                * <p>Details about a subnet in Amazon EC2.</p>
                */
            AwsEc2Subnet?: AwsEc2SubnetDetails;
            /**
                * <p>Details about an EC2 network access control list (ACL).</p>
                */
            AwsEc2NetworkAcl?: AwsEc2NetworkAclDetails;
            /**
                * <p>Details about a load balancer.</p>
                */
            AwsElbv2LoadBalancer?: AwsElbv2LoadBalancerDetails;
            /**
                * <p>Details about an Elastic Beanstalk environment.</p>
                */
            AwsElasticBeanstalkEnvironment?: AwsElasticBeanstalkEnvironmentDetails;
            /**
                * <p>Details for an Elasticsearch domain.</p>
                */
            AwsElasticsearchDomain?: AwsElasticsearchDomainDetails;
            /**
                * <p>Details about an S3 bucket related to a finding.</p>
                */
            AwsS3Bucket?: AwsS3BucketDetails;
            /**
                * <p>Details about the Amazon S3 Public Access Block configuration for an account.</p>
                */
            AwsS3AccountPublicAccessBlock?: AwsS3AccountPublicAccessBlockDetails;
            /**
                * <p>Details about an S3 object related to a finding.</p>
                */
            AwsS3Object?: AwsS3ObjectDetails;
            /**
                * <p>Details about a Secrets Manager secret.</p>
                */
            AwsSecretsManagerSecret?: AwsSecretsManagerSecretDetails;
            /**
                * <p>Details about an IAM access key related to a finding.</p>
                */
            AwsIamAccessKey?: AwsIamAccessKeyDetails;
            /**
                * <p>Details about an IAM user.</p>
                */
            AwsIamUser?: AwsIamUserDetails;
            /**
                * <p>Details about an IAM permissions policy.</p>
                */
            AwsIamPolicy?: AwsIamPolicyDetails;
            /**
                * <p>Provides information about a version 2 stage for Amazon API Gateway.</p>
                */
            AwsApiGatewayV2Stage?: AwsApiGatewayV2StageDetails;
            /**
                * <p>Provides information about a version 2 API in Amazon API Gateway.</p>
                */
            AwsApiGatewayV2Api?: AwsApiGatewayV2ApiDetails;
            /**
                * <p>Details about a DynamoDB table.</p>
                */
            AwsDynamoDbTable?: AwsDynamoDbTableDetails;
            /**
                * <p>Provides information about a version 1 Amazon API Gateway stage.</p>
                */
            AwsApiGatewayStage?: AwsApiGatewayStageDetails;
            /**
                * <p>Provides information about a REST API in version 1 of Amazon API Gateway.</p>
                */
            AwsApiGatewayRestApi?: AwsApiGatewayRestApiDetails;
            /**
                * <p>Provides details about a CloudTrail trail.</p>
                */
            AwsCloudTrailTrail?: AwsCloudTrailTrailDetails;
            /**
                * <p>Provides information about the state of a patch on an instance based on the patch baseline that was used to patch the instance.</p>
                */
            AwsSsmPatchCompliance?: AwsSsmPatchComplianceDetails;
            /**
                * <p>Provides details about an Certificate Manager certificate.</p>
                */
            AwsCertificateManagerCertificate?: AwsCertificateManagerCertificateDetails;
            /**
                * <p>Contains details about an Amazon Redshift cluster.</p>
                */
            AwsRedshiftCluster?: AwsRedshiftClusterDetails;
            /**
                * <p>Contains details about a Classic Load Balancer.</p>
                */
            AwsElbLoadBalancer?: AwsElbLoadBalancerDetails;
            /**
                * <p>Contains details about an IAM group.</p>
                */
            AwsIamGroup?: AwsIamGroupDetails;
            /**
                * <p>Details about an IAM role.</p>
                */
            AwsIamRole?: AwsIamRoleDetails;
            /**
                * <p>Details about an KMS key.</p>
                */
            AwsKmsKey?: AwsKmsKeyDetails;
            /**
                * <p>Details about a Lambda function.</p>
                */
            AwsLambdaFunction?: AwsLambdaFunctionDetails;
            /**
                * <p>Details for a Lambda layer version.</p>
                */
            AwsLambdaLayerVersion?: AwsLambdaLayerVersionDetails;
            /**
                * <p>Details about an Amazon RDS database instance.</p>
                */
            AwsRdsDbInstance?: AwsRdsDbInstanceDetails;
            /**
                * <p>Details about an SNS topic.</p>
                */
            AwsSnsTopic?: AwsSnsTopicDetails;
            /**
                * <p>Details about an SQS queue.</p>
                */
            AwsSqsQueue?: AwsSqsQueueDetails;
            /**
                * <p>Details for an WAF web ACL.</p>
                */
            AwsWafWebAcl?: AwsWafWebAclDetails;
            /**
                * <p>Details about an Amazon RDS database snapshot.</p>
                */
            AwsRdsDbSnapshot?: AwsRdsDbSnapshotDetails;
            /**
                * <p>Details about an Amazon RDS database cluster snapshot.</p>
                */
            AwsRdsDbClusterSnapshot?: AwsRdsDbClusterSnapshotDetails;
            /**
                * <p>Details about an Amazon RDS database cluster.</p>
                */
            AwsRdsDbCluster?: AwsRdsDbClusterDetails;
            /**
                * <p>Details about an Amazon ECS cluster.</p>
                */
            AwsEcsCluster?: AwsEcsClusterDetails;
            /**
                * <p>Provides information about a Docker container that's part of a task.
                *       </p>
                */
            AwsEcsContainer?: AwsEcsContainerDetails;
            /**
                * <p>Details about a task definition. A task definition describes the container and volume definitions of an Amazon Elastic Container Service task.</p>
                */
            AwsEcsTaskDefinition?: AwsEcsTaskDefinitionDetails;
            /**
                * <p>Details about a container resource related to a finding.</p>
                */
            Container?: ContainerDetails;
            /**
                * <p>Details about a resource that are not available in a type-specific details object. Use
                *          the <code>Other</code> object in the following cases.</p>
                *          <ul>
                *             <li>
                *                <p>The type-specific object does not contain all of the fields that you want to
                *                populate. In this case, first use the type-specific object to populate those fields.
                *                Use the <code>Other</code> object to populate the fields that are missing from the
                *                type-specific object.</p>
                *             </li>
                *             <li>
                *                <p>The resource type does not have a corresponding object. This includes resources
                *                for which the type is <code>Other</code>. </p>
                *             </li>
                *          </ul>
                */
            Other?: Record<string, string>;
            /**
                * <p>Details about an RDS event notification subscription.</p>
                */
            AwsRdsEventSubscription?: AwsRdsEventSubscriptionDetails;
            /**
                * <p>Details about a service within an ECS cluster.</p>
                */
            AwsEcsService?: AwsEcsServiceDetails;
            /**
                * <p>Provides details about a launch configuration.</p>
                */
            AwsAutoScalingLaunchConfiguration?: AwsAutoScalingLaunchConfigurationDetails;
            /**
                * <p>Details about an Amazon EC2 VPN connection.</p>
                */
            AwsEc2VpnConnection?: AwsEc2VpnConnectionDetails;
            /**
                * <p>Information about an Amazon ECR image.</p>
                */
            AwsEcrContainerImage?: AwsEcrContainerImageDetails;
            /**
                * <p>Details about an Amazon OpenSearch Service domain.</p>
                */
            AwsOpenSearchServiceDomain?: AwsOpenSearchServiceDomainDetails;
            /**
                * <p>Details about the service configuration for a VPC endpoint service.</p>
                */
            AwsEc2VpcEndpointService?: AwsEc2VpcEndpointServiceDetails;
            /**
                * <p>Information about the encryption configuration for X-Ray.</p>
                */
            AwsXrayEncryptionConfig?: AwsXrayEncryptionConfigDetails;
            /**
                * <p>Details about a rate-based rule for global resources.</p>
                */
            AwsWafRateBasedRule?: AwsWafRateBasedRuleDetails;
            /**
                * <p>Details about a rate-based rule for Regional resources.</p>
                */
            AwsWafRegionalRateBasedRule?: AwsWafRegionalRateBasedRuleDetails;
            /**
                * <p>Information about an Amazon Elastic Container Registry repository.</p>
                */
            AwsEcrRepository?: AwsEcrRepositoryDetails;
            /**
                * <p>Details about an Amazon EKS cluster.</p>
                */
            AwsEksCluster?: AwsEksClusterDetails;
            /**
                * <p>Details about an Network Firewall firewall policy.</p>
                */
            AwsNetworkFirewallFirewallPolicy?: AwsNetworkFirewallFirewallPolicyDetails;
            /**
                * <p>Details about an Network Firewall firewall.</p>
                */
            AwsNetworkFirewallFirewall?: AwsNetworkFirewallFirewallDetails;
            /**
                * <p>Details about an Network Firewall rule group.</p>
                */
            AwsNetworkFirewallRuleGroup?: AwsNetworkFirewallRuleGroupDetails;
            /**
                * <p>Details about an Amazon RDS DB security group.</p>
                */
            AwsRdsDbSecurityGroup?: AwsRdsDbSecurityGroupDetails;
            /**
                * <p>Details about an Amazon Kinesis data stream.</p>
                */
            AwsKinesisStream?: AwsKinesisStreamDetails;
            /**
                * <p>Details about an Amazon EC2 transit gateway that interconnects your virtual private clouds (VPC) and on-premises networks.</p>
                */
            AwsEc2TransitGateway?: AwsEc2TransitGatewayDetails;
            /**
                * <p>Details about an Amazon EFS access point. An access point is an application-specific view into an EFS file system that
                * applies an operating system user and group, and a file system path, to any file system request made through the access point.
                *       </p>
                */
            AwsEfsAccessPoint?: AwsEfsAccessPointDetails;
            /**
                * <p>Details about an CloudFormation stack. A stack is a collection of Amazon Web Services resources that you can manage as a single unit.</p>
                */
            AwsCloudFormationStack?: AwsCloudFormationStackDetails;
            /**
                * <p>Details about an Amazon CloudWatch alarm. An alarm allows you to monitor and receive alerts about your Amazon Web Services resources and applications across multiple Regions.</p>
                */
            AwsCloudWatchAlarm?: AwsCloudWatchAlarmDetails;
            /**
                * <p>Details about an Amazon EC2 VPC peering connection. A VPC peering connection is
                *          a networking connection between two VPCs that enables you to route traffic between them
                *          privately.
                *       </p>
                */
            AwsEc2VpcPeeringConnection?: AwsEc2VpcPeeringConnectionDetails;
            /**
                * <p>Details about an WAF rule group for Regional resources.
                *       </p>
                */
            AwsWafRegionalRuleGroup?: AwsWafRegionalRuleGroupDetails;
            /**
                * <p>Details about an WAF rule for Regional resources.
                *       </p>
                */
            AwsWafRegionalRule?: AwsWafRegionalRuleDetails;
            /**
                * <p>Details about an WAF web access control list (web ACL) for Regional resources. </p>
                */
            AwsWafRegionalWebAcl?: AwsWafRegionalWebAclDetails;
            /**
                * <p>Details about an WAF rule for global resources.
                *       </p>
                */
            AwsWafRule?: AwsWafRuleDetails;
            /**
                * <p>Details about an WAF rule group for global resources.
                *       </p>
                */
            AwsWafRuleGroup?: AwsWafRuleGroupDetails;
            /**
                * <p>Details about a task in a cluster. </p>
                */
            AwsEcsTask?: AwsEcsTaskDetails;
    }
    export namespace ResourceDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDetails) => any;
    }
    export enum Partition {
            AWS = "aws",
            AWS_CN = "aws-cn",
            AWS_US_GOV = "aws-us-gov"
    }
    /**
        * <p>A resource related to a finding.</p>
        */
    export interface Resource {
            /**
                * <p>The type of the resource that details are provided for. If possible, set
                *             <code>Type</code> to one of the supported resource types. For example, if the resource
                *          is an EC2 instance, then set <code>Type</code> to <code>AwsEc2Instance</code>.</p>
                *          <p>If the resource does not match any of the provided types, then set <code>Type</code> to
                *             <code>Other</code>. </p>
                */
            Type: string | undefined;
            /**
                * <p>The canonical identifier for the given resource type.</p>
                */
            Id: string | undefined;
            /**
                * <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
                */
            Partition?: Partition | string;
            /**
                * <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
                */
            Region?: string;
            /**
                * <p>Identifies the role of the resource in the finding. A resource is either the actor or target of the finding activity,</p>
                */
            ResourceRole?: string;
            /**
                * <p>A list of Amazon Web Services tags associated with a resource at the time the finding was
                *          processed.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Contains information about sensitive data that was detected on the resource.</p>
                */
            DataClassification?: DataClassificationDetails;
            /**
                * <p>Additional details about the resource related to a finding.</p>
                */
            Details?: ResourceDetails;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    /**
        * <p>The severity of the finding.</p>
        *          <p>The finding provider can provide the initial severity. The finding provider can only
        *          update the severity if it has not been updated using
        *          <code>BatchUpdateFindings</code>.</p>
        *          <p>The finding must have either <code>Label</code> or <code>Normalized</code> populated. If
        *          only one of these attributes is populated, then Security Hub automatically populates the other
        *          one. If neither attribute is populated, then the finding is invalid. <code>Label</code> is
        *          the preferred attribute.</p>
        */
    export interface Severity {
            /**
                * <p>Deprecated. This attribute is being deprecated. Instead of providing
                *             <code>Product</code>, provide <code>Original</code>.</p>
                *          <p>The native severity as defined by the Amazon Web Services service or integrated partner product that
                *          generated the finding.</p>
                */
            Product?: number;
            /**
                * <p>The severity value of the finding. The allowed values are the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>INFORMATIONAL</code> - No issue was found.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LOW</code> - The issue does not require action on its own.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MEDIUM</code> - The issue must be addressed but not urgently.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HIGH</code> - The issue must be addressed as a priority.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CRITICAL</code> - The issue must be remediated immediately to avoid it
                *                escalating.</p>
                *             </li>
                *          </ul>
                *          <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>, then
                *             <code>Label</code> is set automatically as follows. </p>
                *          <ul>
                *             <li>
                *                <p>0 - <code>INFORMATIONAL</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>1–39 - <code>LOW</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>40–69 - <code>MEDIUM</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>70–89 - <code>HIGH</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>90–100 - <code>CRITICAL</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Label?: SeverityLabel | string;
            /**
                * <p>Deprecated. The normalized severity of a finding. This attribute is being deprecated.
                *          Instead of providing <code>Normalized</code>, provide <code>Label</code>.</p>
                *          <p>If you provide <code>Label</code> and do not provide <code>Normalized</code>, then
                *             <code>Normalized</code> is set automatically as follows.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>INFORMATIONAL</code> - 0</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LOW</code> - 1</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MEDIUM</code> - 40</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HIGH</code> - 70</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CRITICAL</code> - 90</p>
                *             </li>
                *          </ul>
                */
            Normalized?: number;
            /**
                * <p>The native severity from the finding product that generated the finding.</p>
                */
            Original?: string;
    }
    export namespace Severity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Severity) => any;
    }
    export enum ThreatIntelIndicatorCategory {
            BACKDOOR = "BACKDOOR",
            CARD_STEALER = "CARD_STEALER",
            COMMAND_AND_CONTROL = "COMMAND_AND_CONTROL",
            DROP_SITE = "DROP_SITE",
            EXPLOIT_SITE = "EXPLOIT_SITE",
            KEYLOGGER = "KEYLOGGER"
    }
    export enum ThreatIntelIndicatorType {
            DOMAIN = "DOMAIN",
            EMAIL_ADDRESS = "EMAIL_ADDRESS",
            HASH_MD5 = "HASH_MD5",
            HASH_SHA1 = "HASH_SHA1",
            HASH_SHA256 = "HASH_SHA256",
            HASH_SHA512 = "HASH_SHA512",
            IPV4_ADDRESS = "IPV4_ADDRESS",
            IPV6_ADDRESS = "IPV6_ADDRESS",
            MUTEX = "MUTEX",
            PROCESS = "PROCESS",
            URL = "URL"
    }
    /**
        * <p>Details about the threat intelligence related to a finding.</p>
        */
    export interface ThreatIntelIndicator {
            /**
                * <p>The type of threat intelligence indicator.</p>
                */
            Type?: ThreatIntelIndicatorType | string;
            /**
                * <p>The value of a threat intelligence indicator.</p>
                */
            Value?: string;
            /**
                * <p>The category of a threat intelligence indicator.</p>
                */
            Category?: ThreatIntelIndicatorCategory | string;
            /**
                * <p>Indicates when the most recent instance of a threat intelligence indicator was
                *          observed.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastObservedAt?: string;
            /**
                * <p>The source of the threat intelligence indicator.</p>
                */
            Source?: string;
            /**
                * <p>The URL to the page or site where you can get more information about the threat
                *          intelligence indicator.</p>
                */
            SourceUrl?: string;
    }
    export namespace ThreatIntelIndicator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ThreatIntelIndicator) => any;
    }
    /**
        * <p>Provides information about the file paths that were affected by the threat.
        * 		</p>
        */
    export interface FilePaths {
            /**
                * <p>Path to the infected or suspicious file on the resource it was detected on.
                * 		</p>
                */
            FilePath?: string;
            /**
                * <p>The name of the infected or suspicious file corresponding to the hash.
                * 		</p>
                */
            FileName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource on which the threat was detected.
                * 		</p>
                */
            ResourceId?: string;
            /**
                * <p>The hash value for the infected or suspicious file.
                * 		</p>
                */
            Hash?: string;
    }
    export namespace FilePaths {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilePaths) => any;
    }
    /**
        * <p>Provides information about the threat detected in a security finding and the file paths that were affected by the threat.
        * 		</p>
        */
    export interface Threat {
            /**
                * <p>The name of the threat.
                * 		</p>
                */
            Name?: string;
            /**
                * <p>The severity of the threat.
                * 		</p>
                */
            Severity?: string;
            /**
                * <p>This total number of items in which the threat has been detected.
                * 		</p>
                */
            ItemCount?: number;
            /**
                * <p>Provides information about the file paths that were affected by the threat.
                * 		</p>
                */
            FilePaths?: FilePaths[];
    }
    export namespace Threat {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Threat) => any;
    }
    export enum VerificationState {
            BENIGN_POSITIVE = "BENIGN_POSITIVE",
            FALSE_POSITIVE = "FALSE_POSITIVE",
            TRUE_POSITIVE = "TRUE_POSITIVE",
            UNKNOWN = "UNKNOWN"
    }
    /**
        * <p>CVSS scores from the advisory related to the vulnerability.</p>
        */
    export interface Cvss {
            /**
                * <p>The version of CVSS for the CVSS score.</p>
                */
            Version?: string;
            /**
                * <p>The base CVSS score.</p>
                */
            BaseScore?: number;
            /**
                * <p>The base scoring vector for the CVSS score.</p>
                */
            BaseVector?: string;
            /**
                * <p>The origin of the original CVSS score and vector.</p>
                */
            Source?: string;
            /**
                * <p>Adjustments to the CVSS metrics.</p>
                */
            Adjustments?: Adjustment[];
    }
    export namespace Cvss {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Cvss) => any;
    }
    /**
        * <p>A vendor that generates a vulnerability report.</p>
        */
    export interface VulnerabilityVendor {
            /**
                * <p>The name of the vendor.</p>
                */
            Name: string | undefined;
            /**
                * <p>The URL of the vulnerability advisory.</p>
                */
            Url?: string;
            /**
                * <p>The severity that the vendor assigned to the vulnerability.</p>
                */
            VendorSeverity?: string;
            /**
                * <p>Indicates when the vulnerability advisory was created.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            VendorCreatedAt?: string;
            /**
                * <p>Indicates when the vulnerability advisory was last updated.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            VendorUpdatedAt?: string;
    }
    export namespace VulnerabilityVendor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VulnerabilityVendor) => any;
    }
    /**
        * <p>Information about a software package.</p>
        */
    export interface SoftwarePackage {
            /**
                * <p>The name of the software package.</p>
                */
            Name?: string;
            /**
                * <p>The version of the software package.</p>
                */
            Version?: string;
            /**
                * <p>The epoch of the software package.</p>
                */
            Epoch?: string;
            /**
                * <p>The release of the software package.</p>
                */
            Release?: string;
            /**
                * <p>The architecture used for the software package.</p>
                */
            Architecture?: string;
            /**
                * <p>The source of the package.</p>
                */
            PackageManager?: string;
            /**
                * <p>The file system path to the package manager inventory file.</p>
                */
            FilePath?: string;
    }
    export namespace SoftwarePackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SoftwarePackage) => any;
    }
    /**
        * <p>A vulnerability associated with a finding.</p>
        */
    export interface Vulnerability {
            /**
                * <p>The identifier of the vulnerability.</p>
                */
            Id: string | undefined;
            /**
                * <p>List of software packages that have the vulnerability.</p>
                */
            VulnerablePackages?: SoftwarePackage[];
            /**
                * <p>CVSS scores from the advisory related to the vulnerability.</p>
                */
            Cvss?: Cvss[];
            /**
                * <p>List of vulnerabilities that are related to this vulnerability.</p>
                */
            RelatedVulnerabilities?: string[];
            /**
                * <p>Information about the vendor that generates the vulnerability report.</p>
                */
            Vendor?: VulnerabilityVendor;
            /**
                * <p>A list of URLs that provide additional information about the vulnerability.</p>
                */
            ReferenceUrls?: string[];
    }
    export namespace Vulnerability {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Vulnerability) => any;
    }
    export enum WorkflowStatus {
            NEW = "NEW",
            NOTIFIED = "NOTIFIED",
            RESOLVED = "RESOLVED",
            SUPPRESSED = "SUPPRESSED"
    }
    /**
        * <p>Provides information about the status of the investigation into a finding.</p>
        */
    export interface Workflow {
            /**
                * <p>The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to <code>SUPPRESSED</code> or <code>RESOLVED</code> does not prevent a new finding for the same issue.</p>
                *          <p>The allowed values are the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>NEW</code> - The initial state of a finding, before it is reviewed.</p>
                *                <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or
                *                   <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>RecordState</code> changes from <code>ARCHIVED</code> to
                *                         <code>ACTIVE</code>.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>ComplianceStatus</code> changes from <code>PASSED</code> to either
                *                         <code>WARNING</code>, <code>FAILED</code>, or
                *                      <code>NOT_AVAILABLE</code>.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOTIFIED</code> - Indicates that you notified the resource owner about the
                *                security issue. Used when the initial reviewer is not the resource owner, and needs
                *                intervention from the resource owner.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RESOLVED</code> - The finding was reviewed and remediated and is now
                *                considered resolved. </p>
                *             </li>
                *          </ul>
                */
            Status?: WorkflowStatus | string;
    }
    export namespace Workflow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Workflow) => any;
    }
    export enum WorkflowState {
            ASSIGNED = "ASSIGNED",
            DEFERRED = "DEFERRED",
            IN_PROGRESS = "IN_PROGRESS",
            NEW = "NEW",
            RESOLVED = "RESOLVED"
    }
    /**
        * <p>Provides consistent format for the contents of the Security Hub-aggregated findings.
        *          <code>AwsSecurityFinding</code> format enables you to share findings between Amazon Web Services
        *          security services and third-party solutions, and security standards checks.</p>
        *          <note>
        *             <p>A finding is a potential security issue generated either by Amazon Web Services services or by the integrated third-party
        *             solutions and standards checks.</p>
        *          </note>
        */
    export interface AwsSecurityFinding {
            /**
                * <p>The schema version that a finding is formatted for.</p>
                */
            SchemaVersion: string | undefined;
            /**
                * <p>The security findings provider-specific identifier for a finding.</p>
                */
            Id: string | undefined;
            /**
                * <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings.
                *          This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for
                *          a custom integration.</p>
                */
            ProductArn: string | undefined;
            /**
                * <p>The name of the product that generated the finding.</p>
                *          <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
                *          <p>When you use the Security Hub console or API to filter findings by product name, you use this attribute.</p>
                */
            ProductName?: string;
            /**
                * <p>The name of the company for the product that generated the finding.</p>
                *          <p>Security Hub populates this attribute automatically for each finding. You cannot update this attribute with <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>. The exception to this is a custom integration.</p>
                *          <p>When you use the Security Hub console or API to filter findings by company name, you use this attribute.</p>
                */
            CompanyName?: string;
            /**
                * <p>The Region from which the finding was generated.</p>
                *          <p>Security Hub populates this attribute automatically for each finding. You cannot update it using <code>BatchImportFindings</code> or <code>BatchUpdateFindings</code>.</p>
                */
            Region?: string;
            /**
                * <p>The identifier for the solution-specific component (a discrete unit of logic) that
                *          generated a finding. In various security-findings providers' solutions, this generator can
                *          be called a rule, a check, a detector, a plugin, etc. </p>
                */
            GeneratorId: string | undefined;
            /**
                * <p>The Amazon Web Services account ID that a finding is generated in.</p>
                */
            AwsAccountId: string | undefined;
            /**
                * <p>One or more finding types in the format of <code>namespace/category/classifier</code>
                *          that classify a finding.</p>
                *          <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual
                *          Behaviors | Sensitive Data Identifications</p>
                */
            Types?: string[];
            /**
                * <p>Indicates when the security-findings provider first observed the potential security
                *          issue that a finding captured.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            FirstObservedAt?: string;
            /**
                * <p>Indicates when the security-findings provider most recently observed the potential
                *          security issue that a finding captured.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            LastObservedAt?: string;
            /**
                * <p>Indicates when the security-findings provider created the potential security issue that
                *          a finding captured.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            CreatedAt: string | undefined;
            /**
                * <p>Indicates when the security-findings provider last updated the finding record.</p>
                *          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
                *             Date/Time Format</a>. The value cannot contain spaces. For example,
                *             <code>2020-03-22T13:22:13.933Z</code>.</p>
                */
            UpdatedAt: string | undefined;
            /**
                * <p>A finding's severity.</p>
                */
            Severity?: Severity;
            /**
                * <p>A finding's confidence. Confidence is defined as the likelihood that a finding
                *          accurately identifies the behavior or issue that it was intended to identify.</p>
                *          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
                *          confidence and 100 means 100 percent confidence.</p>
                */
            Confidence?: number;
            /**
                * <p>The level of importance assigned to the resources associated with the finding.</p>
                *          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
                *          is reserved for the most critical resources.</p>
                */
            Criticality?: number;
            /**
                * <p>A finding's title.</p>
                *          <note>
                *             <p>In this release, <code>Title</code> is a required property.</p>
                *          </note>
                */
            Title: string | undefined;
            /**
                * <p>A finding's description.</p>
                *          <note>
                *             <p>In this release, <code>Description</code> is a required property.</p>
                *          </note>
                */
            Description: string | undefined;
            /**
                * <p>A data type that describes the remediation options for a finding.</p>
                */
            Remediation?: Remediation;
            /**
                * <p>A URL that links to a page about the current finding in the security-findings provider's
                *          solution.</p>
                */
            SourceUrl?: string;
            /**
                * <p>A data type where security-findings providers can include additional solution-specific
                *          details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
                *          <p>Can contain up to 50 key-value pairs. For each key-value pair, the key can contain up to 128 characters, and the value can contain up to 2048 characters.</p>
                */
            ProductFields?: Record<string, string>;
            /**
                * <p>A list of name/value string pairs associated with the finding. These are custom,
                *          user-defined fields added to a finding. </p>
                */
            UserDefinedFields?: Record<string, string>;
            /**
                * <p>A list of malware related to a finding.</p>
                */
            Malware?: Malware[];
            /**
                * <p>The details of network-related information about a finding.</p>
                */
            Network?: Network;
            /**
                * <p>Provides information about a network path that is relevant to a finding. Each entry
                *          under <code>NetworkPath</code> represents a component of that path.</p>
                */
            NetworkPath?: NetworkPathComponent[];
            /**
                * <p>The details of process-related information about a finding.</p>
                */
            Process?: ProcessDetails;
            /**
                * <p>Details about the threat detected in a security finding and the file paths that were affected by the threat.
                *       </p>
                */
            Threats?: Threat[];
            /**
                * <p>Threat intelligence details related to a finding.</p>
                */
            ThreatIntelIndicators?: ThreatIntelIndicator[];
            /**
                * <p>A set of resource data types that describe the resources that the finding refers
                *          to.</p>
                */
            Resources: Resource[] | undefined;
            /**
                * <p>This data type is exclusive to findings that are generated as the result of a check run
                *          against a specific rule in a supported security standard, such as CIS Amazon Web Services Foundations.
                *          Contains security standard-related finding details.</p>
                */
            Compliance?: Compliance;
            /**
                * <p>Indicates the veracity of a finding. </p>
                */
            VerificationState?: VerificationState | string;
            /**
                * @deprecated
                *
                * <p>The workflow state of a finding. </p>
                */
            WorkflowState?: WorkflowState | string;
            /**
                * <p>Provides information about the status of the investigation into a finding.</p>
                */
            Workflow?: Workflow;
            /**
                * <p>The record state of a finding.</p>
                */
            RecordState?: RecordState | string;
            /**
                * <p>A list of related findings.</p>
                */
            RelatedFindings?: RelatedFinding[];
            /**
                * <p>A user-defined note added to a finding.</p>
                */
            Note?: Note;
            /**
                * <p>Provides a list of vulnerabilities associated with the findings.</p>
                */
            Vulnerabilities?: Vulnerability[];
            /**
                * <p>Provides an overview of the patch compliance status for an instance against a selected
                *          compliance standard.</p>
                */
            PatchSummary?: PatchSummary;
            /**
                * <p>Provides details about an action that affects or that was taken on a resource.</p>
                */
            Action?: Action;
            /**
                * <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update their own values for confidence, criticality, related findings, severity, and types.</p>
                */
            FindingProviderFields?: FindingProviderFields;
            /**
                * <p>Indicates whether the finding is a sample finding.</p>
                */
            Sample?: boolean;
    }
    export namespace AwsSecurityFinding {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSecurityFinding) => any;
    }
    export enum StringFilterComparison {
            EQUALS = "EQUALS",
            NOT_EQUALS = "NOT_EQUALS",
            PREFIX = "PREFIX",
            PREFIX_NOT_EQUALS = "PREFIX_NOT_EQUALS"
    }
    /**
        * <p>A string filter for querying findings.</p>
        */
    export interface StringFilter {
            /**
                * <p>The string filter value. Filter values are case sensitive. For example, the product name
                *          for control-based findings is <code>Security Hub</code>. If you provide <code>security hub</code>
                *          as the filter text, then there is no match.</p>
                */
            Value?: string;
            /**
                * <p>The condition to apply to a string value when querying for findings. To search for
                *          values that contain the filter criteria value, use one of the following comparison
                *          operators:</p>
                *          <ul>
                *             <li>
                *                <p>To search for values that exactly match the filter value, use
                *                <code>EQUALS</code>.</p>
                *                <p>For example, the filter <code>ResourceType EQUALS AwsEc2SecurityGroup</code> only
                *                matches findings that have a resource type of
                *                <code>AwsEc2SecurityGroup</code>.</p>
                *             </li>
                *             <li>
                *                <p>To search for values that start with the filter value, use
                *                <code>PREFIX</code>.</p>
                *                <p>For example, the filter <code>ResourceType PREFIX AwsIam</code> matches findings
                *                that have a resource type that starts with <code>AwsIam</code>. Findings with a
                *                resource type of <code>AwsIamPolicy</code>, <code>AwsIamRole</code>, or
                *                   <code>AwsIamUser</code> would all match.</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <code>EQUALS</code> and <code>PREFIX</code> filters on the same field are joined by
                *             <code>OR</code>. A finding matches if it matches any one of those filters.</p>
                *          <p>To search for values that do not contain the filter criteria value, use one of the
                *          following comparison operators:</p>
                *          <ul>
                *             <li>
                *                <p>To search for values that do not exactly match the filter value, use
                *                   <code>NOT_EQUALS</code>.</p>
                *                <p>For example, the filter <code>ResourceType NOT_EQUALS AwsIamPolicy</code> matches
                *                findings that have a resource type other than <code>AwsIamPolicy</code>.</p>
                *             </li>
                *             <li>
                *                <p>To search for values that do not start with the filter value, use
                *                   <code>PREFIX_NOT_EQUALS</code>.</p>
                *                <p>For example, the filter <code>ResourceType PREFIX_NOT_EQUALS AwsIam</code> matches
                *                findings that have a resource type that does not start with <code>AwsIam</code>.
                *                Findings with a resource type of <code>AwsIamPolicy</code>, <code>AwsIamRole</code>,
                *                or <code>AwsIamUser</code> would all be excluded from the results.</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <code>NOT_EQUALS</code> and <code>PREFIX_NOT_EQUALS</code> filters on the same field are
                *          joined by <code>AND</code>. A finding matches only if it matches all of those
                *          filters.</p>
                *          <p>For filters on the same field, you cannot provide both an <code>EQUALS</code> filter and
                *          a <code>NOT_EQUALS</code> or <code>PREFIX_NOT_EQUALS</code> filter. Combining filters in
                *          this way always returns an error, even if the provided filter values would return valid
                *          results.</p>
                *          <p>You can combine <code>PREFIX</code> filters with <code>NOT_EQUALS</code> or
                *          <code>PREFIX_NOT_EQUALS</code> filters for the same field. Security Hub first processes the
                *             <code>PREFIX</code> filters, then the <code>NOT_EQUALS</code> or
                *             <code>PREFIX_NOT_EQUALS</code> filters.</p>
                *          <p> For example, for the following filter, Security Hub first identifies findings that have
                *          resource types that start with either <code>AwsIAM</code> or <code>AwsEc2</code>. It then
                *          excludes findings that have a resource type of <code>AwsIamPolicy</code> and findings that
                *          have a resource type of <code>AwsEc2NetworkInterface</code>.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ResourceType PREFIX AwsIam</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ResourceType PREFIX AwsEc2</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ResourceType NOT_EQUALS AwsIamPolicy</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ResourceType NOT_EQUALS AwsEc2NetworkInterface</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Comparison?: StringFilterComparison | string;
    }
    export namespace StringFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StringFilter) => any;
    }
    /**
        * <p>A number filter for querying findings.</p>
        */
    export interface NumberFilter {
            /**
                * <p>The greater-than-equal condition to be applied to a single field when querying for
                *          findings. </p>
                */
            Gte?: number;
            /**
                * <p>The less-than-equal condition to be applied to a single field when querying for
                *          findings. </p>
                */
            Lte?: number;
            /**
                * <p>The equal-to condition to be applied to a single field when querying for
                *          findings.</p>
                */
            Eq?: number;
    }
    export namespace NumberFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NumberFilter) => any;
    }
    export enum DateRangeUnit {
            DAYS = "DAYS"
    }
    /**
        * <p>A date range for the date filter.</p>
        */
    export interface DateRange {
            /**
                * <p>A date range value for the date filter.</p>
                */
            Value?: number;
            /**
                * <p>A date range unit for the date filter.</p>
                */
            Unit?: DateRangeUnit | string;
    }
    export namespace DateRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DateRange) => any;
    }
    /**
        * <p>A date filter for querying findings.</p>
        */
    export interface DateFilter {
            /**
                * <p>A start date for the date filter.</p>
                */
            Start?: string;
            /**
                * <p>An end date for the date filter.</p>
                */
            End?: string;
            /**
                * <p>A date range for the date filter.</p>
                */
            DateRange?: DateRange;
    }
    export namespace DateFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DateFilter) => any;
    }
    /**
        * <p>A keyword filter for querying findings.</p>
        */
    export interface KeywordFilter {
            /**
                * <p>A value for the keyword.</p>
                */
            Value?: string;
    }
    export namespace KeywordFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KeywordFilter) => any;
    }
    /**
        * <p>The IP filter for querying findings.</p>
        */
    export interface IpFilter {
            /**
                * <p>A finding's CIDR value.</p>
                */
            Cidr?: string;
    }
    export namespace IpFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IpFilter) => any;
    }
    export enum MapFilterComparison {
            EQUALS = "EQUALS",
            NOT_EQUALS = "NOT_EQUALS"
    }
    /**
        * <p>A map filter for querying findings. Each map filter provides the field to check, the
        *          value to look for, and the comparison operator.</p>
        */
    export interface MapFilter {
            /**
                * <p>The key of the map filter. For example, for <code>ResourceTags</code>, <code>Key</code>
                *          identifies the name of the tag. For <code>UserDefinedFields</code>, <code>Key</code> is the
                *          name of the field.</p>
                */
            Key?: string;
            /**
                * <p>The value for the key in the map filter. Filter values are case sensitive. For example,
                *          one of the values for a tag called <code>Department</code> might be <code>Security</code>.
                *          If you provide <code>security</code> as the filter value, then there is no match.</p>
                */
            Value?: string;
            /**
                * <p>The condition to apply to the key value when querying for findings with a map
                *          filter.</p>
                *          <p>To search for values that exactly match the filter value, use <code>EQUALS</code>. For
                *          example, for the <code>ResourceTags</code> field, the filter <code>Department EQUALS
                *             Security</code> matches findings that have the value <code>Security</code> for the tag
                *             <code>Department</code>.</p>
                *          <p>To search for values other than the filter value, use <code>NOT_EQUALS</code>. For
                *          example, for the <code>ResourceTags</code> field, the filter <code>Department NOT_EQUALS
                *             Finance</code> matches findings that do not have the value <code>Finance</code> for the
                *          tag <code>Department</code>.</p>
                *          <p>
                *             <code>EQUALS</code> filters on the same field are joined by <code>OR</code>. A finding
                *          matches if it matches any one of those filters.</p>
                *          <p>
                *             <code>NOT_EQUALS</code> filters on the same field are joined by <code>AND</code>. A
                *          finding matches only if it matches all of those filters.</p>
                *          <p>You cannot have both an <code>EQUALS</code> filter and a <code>NOT_EQUALS</code> filter
                *          on the same field.</p>
                */
            Comparison?: MapFilterComparison | string;
    }
    export namespace MapFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MapFilter) => any;
    }
    /**
        * <p>Boolean filter for querying findings.</p>
        */
    export interface BooleanFilter {
            /**
                * <p>The value of the boolean.</p>
                */
            Value?: boolean;
    }
    export namespace BooleanFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BooleanFilter) => any;
    }
    /**
        * <p>A collection of attributes that are applied to all active Security Hub-aggregated findings and
        *          that result in a subset of findings that are included in this insight.</p>
        *          <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to
        *          20 filter values.</p>
        */
    export interface AwsSecurityFindingFilters {
            /**
                * <p>The ARN generated by Security Hub that uniquely identifies a third-party company
                *          (security findings provider) after this provider's product (solution that generates
                *          findings) is registered with Security Hub.</p>
                */
            ProductArn?: StringFilter[];
            /**
                * <p>The Amazon Web Services account ID that a finding is generated in.</p>
                */
            AwsAccountId?: StringFilter[];
            /**
                * <p>The security findings provider-specific identifier for a finding.</p>
                */
            Id?: StringFilter[];
            /**
                * <p>The identifier for the solution-specific component (a discrete unit of logic) that
                *          generated a finding. In various security-findings providers' solutions, this generator can
                *          be called a rule, a check, a detector, a plugin, etc.</p>
                */
            GeneratorId?: StringFilter[];
            /**
                * <p>The Region from which the finding was generated.</p>
                */
            Region?: StringFilter[];
            /**
                * <p>A finding type in the format of <code>namespace/category/classifier</code> that
                *          classifies a finding.</p>
                */
            Type?: StringFilter[];
            /**
                * <p>An ISO8601-formatted timestamp that indicates when the security-findings provider first
                *          observed the potential security issue that a finding captured.</p>
                */
            FirstObservedAt?: DateFilter[];
            /**
                * <p>An ISO8601-formatted timestamp that indicates when the security-findings provider most
                *          recently observed the potential security issue that a finding captured.</p>
                */
            LastObservedAt?: DateFilter[];
            /**
                * <p>An ISO8601-formatted timestamp that indicates when the security-findings provider
                *          captured the potential security issue that a finding captured.</p>
                */
            CreatedAt?: DateFilter[];
            /**
                * <p>An ISO8601-formatted timestamp that indicates when the security-findings provider last
                *          updated the finding record. </p>
                */
            UpdatedAt?: DateFilter[];
            /**
                * @deprecated
                *
                * <p>The native severity as defined by the security-findings provider's solution that
                *          generated the finding.</p>
                */
            SeverityProduct?: NumberFilter[];
            /**
                * @deprecated
                *
                * <p>The normalized severity of a finding.</p>
                */
            SeverityNormalized?: NumberFilter[];
            /**
                * <p>The label of a finding's severity.</p>
                */
            SeverityLabel?: StringFilter[];
            /**
                * <p>A finding's confidence. Confidence is defined as the likelihood that a finding
                *          accurately identifies the behavior or issue that it was intended to identify.</p>
                *          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
                *          confidence and 100 means 100 percent confidence.</p>
                */
            Confidence?: NumberFilter[];
            /**
                * <p>The level of importance assigned to the resources associated with the finding.</p>
                *          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
                *          is reserved for the most critical resources.</p>
                */
            Criticality?: NumberFilter[];
            /**
                * <p>A finding's title.</p>
                */
            Title?: StringFilter[];
            /**
                * <p>A finding's description.</p>
                */
            Description?: StringFilter[];
            /**
                * <p>The recommendation of what to do about the issue described in a finding.</p>
                */
            RecommendationText?: StringFilter[];
            /**
                * <p>A URL that links to a page about the current finding in the security-findings provider's
                *          solution.</p>
                */
            SourceUrl?: StringFilter[];
            /**
                * <p>A data type where security-findings providers can include additional solution-specific
                *          details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
                */
            ProductFields?: MapFilter[];
            /**
                * <p>The name of the solution (product) that generates findings.</p>
                */
            ProductName?: StringFilter[];
            /**
                * <p>The name of the findings provider (company) that owns the solution (product) that
                *          generates findings.</p>
                */
            CompanyName?: StringFilter[];
            /**
                * <p>A list of name/value string pairs associated with the finding. These are custom,
                *          user-defined fields added to a finding. </p>
                */
            UserDefinedFields?: MapFilter[];
            /**
                * <p>The name of the malware that was observed.</p>
                */
            MalwareName?: StringFilter[];
            /**
                * <p>The type of the malware that was observed.</p>
                */
            MalwareType?: StringFilter[];
            /**
                * <p>The filesystem path of the malware that was observed.</p>
                */
            MalwarePath?: StringFilter[];
            /**
                * <p>The state of the malware that was observed.</p>
                */
            MalwareState?: StringFilter[];
            /**
                * <p>Indicates the direction of network traffic associated with a finding.</p>
                */
            NetworkDirection?: StringFilter[];
            /**
                * <p>The protocol of network-related information about a finding.</p>
                */
            NetworkProtocol?: StringFilter[];
            /**
                * <p>The source IPv4 address of network-related information about a finding.</p>
                */
            NetworkSourceIpV4?: IpFilter[];
            /**
                * <p>The source IPv6 address of network-related information about a finding.</p>
                */
            NetworkSourceIpV6?: IpFilter[];
            /**
                * <p>The source port of network-related information about a finding.</p>
                */
            NetworkSourcePort?: NumberFilter[];
            /**
                * <p>The source domain of network-related information about a finding.</p>
                */
            NetworkSourceDomain?: StringFilter[];
            /**
                * <p>The source media access control (MAC) address of network-related information about a
                *          finding.</p>
                */
            NetworkSourceMac?: StringFilter[];
            /**
                * <p>The destination IPv4 address of network-related information about a finding.</p>
                */
            NetworkDestinationIpV4?: IpFilter[];
            /**
                * <p>The destination IPv6 address of network-related information about a finding.</p>
                */
            NetworkDestinationIpV6?: IpFilter[];
            /**
                * <p>The destination port of network-related information about a finding.</p>
                */
            NetworkDestinationPort?: NumberFilter[];
            /**
                * <p>The destination domain of network-related information about a finding.</p>
                */
            NetworkDestinationDomain?: StringFilter[];
            /**
                * <p>The name of the process.</p>
                */
            ProcessName?: StringFilter[];
            /**
                * <p>The path to the process executable.</p>
                */
            ProcessPath?: StringFilter[];
            /**
                * <p>The process ID.</p>
                */
            ProcessPid?: NumberFilter[];
            /**
                * <p>The parent process ID.</p>
                */
            ProcessParentPid?: NumberFilter[];
            /**
                * <p>The date/time that the process was launched.</p>
                */
            ProcessLaunchedAt?: DateFilter[];
            /**
                * <p>The date/time that the process was terminated.</p>
                */
            ProcessTerminatedAt?: DateFilter[];
            /**
                * <p>The type of a threat intelligence indicator.</p>
                */
            ThreatIntelIndicatorType?: StringFilter[];
            /**
                * <p>The value of a threat intelligence indicator.</p>
                */
            ThreatIntelIndicatorValue?: StringFilter[];
            /**
                * <p>The category of a threat intelligence indicator.</p>
                */
            ThreatIntelIndicatorCategory?: StringFilter[];
            /**
                * <p>The date/time of the last observation of a threat intelligence indicator.</p>
                */
            ThreatIntelIndicatorLastObservedAt?: DateFilter[];
            /**
                * <p>The source of the threat intelligence.</p>
                */
            ThreatIntelIndicatorSource?: StringFilter[];
            /**
                * <p>The URL for more details from the source of the threat intelligence.</p>
                */
            ThreatIntelIndicatorSourceUrl?: StringFilter[];
            /**
                * <p>Specifies the type of the resource that details are provided for.</p>
                */
            ResourceType?: StringFilter[];
            /**
                * <p>The canonical identifier for the given resource type.</p>
                */
            ResourceId?: StringFilter[];
            /**
                * <p>The canonical Amazon Web Services partition name that the Region is assigned to.</p>
                */
            ResourcePartition?: StringFilter[];
            /**
                * <p>The canonical Amazon Web Services external Region name where this resource is located.</p>
                */
            ResourceRegion?: StringFilter[];
            /**
                * <p>A list of Amazon Web Services tags associated with a resource at the time the finding was
                *          processed.</p>
                */
            ResourceTags?: MapFilter[];
            /**
                * <p>The instance type of the instance.</p>
                */
            ResourceAwsEc2InstanceType?: StringFilter[];
            /**
                * <p>The Amazon Machine Image (AMI) ID of the instance.</p>
                */
            ResourceAwsEc2InstanceImageId?: StringFilter[];
            /**
                * <p>The IPv4 addresses associated with the instance.</p>
                */
            ResourceAwsEc2InstanceIpV4Addresses?: IpFilter[];
            /**
                * <p>The IPv6 addresses associated with the instance.</p>
                */
            ResourceAwsEc2InstanceIpV6Addresses?: IpFilter[];
            /**
                * <p>The key name associated with the instance.</p>
                */
            ResourceAwsEc2InstanceKeyName?: StringFilter[];
            /**
                * <p>The IAM profile ARN of the instance.</p>
                */
            ResourceAwsEc2InstanceIamInstanceProfileArn?: StringFilter[];
            /**
                * <p>The identifier of the VPC that the instance was launched in.</p>
                */
            ResourceAwsEc2InstanceVpcId?: StringFilter[];
            /**
                * <p>The identifier of the subnet that the instance was launched in.</p>
                */
            ResourceAwsEc2InstanceSubnetId?: StringFilter[];
            /**
                * <p>The date and time the instance was launched.</p>
                */
            ResourceAwsEc2InstanceLaunchedAt?: DateFilter[];
            /**
                * <p>The canonical user ID of the owner of the S3 bucket.</p>
                */
            ResourceAwsS3BucketOwnerId?: StringFilter[];
            /**
                * <p>The display name of the owner of the S3 bucket.</p>
                */
            ResourceAwsS3BucketOwnerName?: StringFilter[];
            /**
                * @deprecated
                *
                * <p>The user associated with the IAM access key related to a finding.</p>
                */
            ResourceAwsIamAccessKeyUserName?: StringFilter[];
            /**
                * <p>The name of the principal that is associated with an IAM access key.</p>
                */
            ResourceAwsIamAccessKeyPrincipalName?: StringFilter[];
            /**
                * <p>The status of the IAM access key related to a finding.</p>
                */
            ResourceAwsIamAccessKeyStatus?: StringFilter[];
            /**
                * <p>The creation date/time of the IAM access key related to a finding.</p>
                */
            ResourceAwsIamAccessKeyCreatedAt?: DateFilter[];
            /**
                * <p>The name of an IAM user.</p>
                */
            ResourceAwsIamUserUserName?: StringFilter[];
            /**
                * <p>The name of the container related to a finding.</p>
                */
            ResourceContainerName?: StringFilter[];
            /**
                * <p>The identifier of the image related to a finding.</p>
                */
            ResourceContainerImageId?: StringFilter[];
            /**
                * <p>The name of the image related to a finding.</p>
                */
            ResourceContainerImageName?: StringFilter[];
            /**
                * <p>The date/time that the container was started.</p>
                */
            ResourceContainerLaunchedAt?: DateFilter[];
            /**
                * <p>The details of a resource that doesn't have a specific subfield for the resource type
                *          defined.</p>
                */
            ResourceDetailsOther?: MapFilter[];
            /**
                * <p>Exclusive to findings that are generated as the result of a check run against a specific
                *          rule in a supported standard, such as CIS Amazon Web Services Foundations. Contains security
                *          standard-related finding details.</p>
                */
            ComplianceStatus?: StringFilter[];
            /**
                * <p>The veracity of a finding.</p>
                */
            VerificationState?: StringFilter[];
            /**
                * <p>The workflow state of a finding.</p>
                *          <p>Note that this field is deprecated. To search for a finding based on its workflow
                *          status, use <code>WorkflowStatus</code>.</p>
                */
            WorkflowState?: StringFilter[];
            /**
                * <p>The status of the investigation into a finding. Allowed values are the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>NEW</code> - The initial state of a finding, before it is reviewed.</p>
                *                <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or
                *                   <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>RecordState</code> changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Compliance.Status</code> changes from <code>PASSED</code> to either <code>WARNING</code>,
                *                         <code>FAILED</code>, or <code>NOT_AVAILABLE</code>.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOTIFIED</code> - Indicates that the resource owner has been notified about
                *                the security issue. Used when the initial reviewer is not the resource owner, and
                *                needs intervention from the resource owner.</p>
                *                <p>If one of the following occurs, the workflow status is changed automatically from
                *                <code>NOTIFIED</code> to <code>NEW</code>:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>RecordState</code> changes from <code>ARCHIVED</code> to
                *                      <code>ACTIVE</code>.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>,
                *                      <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is
                *                needed.</p>
                *                <p>The workflow status of a <code>SUPPRESSED</code> finding does not change if
                *                <code>RecordState</code> changes from <code>ARCHIVED</code> to
                *                <code>ACTIVE</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RESOLVED</code> - The finding was reviewed and remediated and is now
                *                considered resolved. </p>
                *                <p>The finding remains <code>RESOLVED</code> unless one of the following occurs:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>RecordState</code> changes from <code>ARCHIVED</code> to
                *                      <code>ACTIVE</code>.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Compliance.Status</code> changes from <code>PASSED</code> to <code>FAILED</code>,
                *                      <code>WARNING</code>, or <code>NOT_AVAILABLE</code>.</p>
                *                   </li>
                *                </ul>
                *                <p>In those cases, the workflow status is automatically reset to <code>NEW</code>.</p>
                *                <p>For findings from controls, if <code>Compliance.Status</code> is <code>PASSED</code>,
                *                then Security Hub automatically sets the workflow status to <code>RESOLVED</code>.</p>
                *             </li>
                *          </ul>
                */
            WorkflowStatus?: StringFilter[];
            /**
                * <p>The updated record state for the finding.</p>
                */
            RecordState?: StringFilter[];
            /**
                * <p>The ARN of the solution that generated a related finding.</p>
                */
            RelatedFindingsProductArn?: StringFilter[];
            /**
                * <p>The solution-generated identifier for a related finding.</p>
                */
            RelatedFindingsId?: StringFilter[];
            /**
                * <p>The text of a note.</p>
                */
            NoteText?: StringFilter[];
            /**
                * <p>The timestamp of when the note was updated.</p>
                */
            NoteUpdatedAt?: DateFilter[];
            /**
                * <p>The principal that created a note.</p>
                */
            NoteUpdatedBy?: StringFilter[];
            /**
                * @deprecated
                *
                * <p>A keyword for a finding.</p>
                */
            Keyword?: KeywordFilter[];
            /**
                * <p>The finding provider value for the finding confidence. Confidence is defined as the likelihood
                *          that a finding accurately identifies the behavior or issue that it was intended to
                *          identify.</p>
                *          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
                *          confidence and 100 means 100 percent confidence.</p>
                */
            FindingProviderFieldsConfidence?: NumberFilter[];
            /**
                * <p>The finding provider value for the level of importance assigned to the resources associated with
                *          the findings.</p>
                *          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
                *          is reserved for the most critical resources. </p>
                */
            FindingProviderFieldsCriticality?: NumberFilter[];
            /**
                * <p>The finding identifier of a related finding that is identified by the finding provider.</p>
                */
            FindingProviderFieldsRelatedFindingsId?: StringFilter[];
            /**
                * <p>The ARN of the solution that generated a related finding that is identified by the finding provider.</p>
                */
            FindingProviderFieldsRelatedFindingsProductArn?: StringFilter[];
            /**
                * <p>The finding provider value for the severity label.</p>
                */
            FindingProviderFieldsSeverityLabel?: StringFilter[];
            /**
                * <p>The finding provider's original value for the severity.</p>
                */
            FindingProviderFieldsSeverityOriginal?: StringFilter[];
            /**
                * <p>One or more finding types that the finding provider assigned to the finding. Uses the format of <code>namespace/category/classifier</code>
                *          that classify a finding.</p>
                *          <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual
                *          Behaviors | Sensitive Data Identifications</p>
                */
            FindingProviderFieldsTypes?: StringFilter[];
            /**
                * <p>Indicates whether or not sample findings are included in the filter results.</p>
                */
            Sample?: BooleanFilter[];
    }
    export namespace AwsSecurityFindingFilters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSecurityFindingFilters) => any;
    }
    /**
        * <p>Identifies a finding to update using <code>BatchUpdateFindings</code>.</p>
        */
    export interface AwsSecurityFindingIdentifier {
            /**
                * <p>The identifier of the finding that was specified by the finding provider.</p>
                */
            Id: string | undefined;
            /**
                * <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings.
                *          This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for
                *          a custom integration.</p>
                */
            ProductArn: string | undefined;
    }
    export namespace AwsSecurityFindingIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsSecurityFindingIdentifier) => any;
    }
    export interface BatchDisableStandardsRequest {
            /**
                * <p>The ARNs of the standards subscriptions to disable.</p>
                */
            StandardsSubscriptionArns: string[] | undefined;
    }
    export namespace BatchDisableStandardsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisableStandardsRequest) => any;
    }
    export enum StandardsStatus {
            DELETING = "DELETING",
            FAILED = "FAILED",
            INCOMPLETE = "INCOMPLETE",
            PENDING = "PENDING",
            READY = "READY"
    }
    export enum StatusReasonCode {
            INTERNAL_ERROR = "INTERNAL_ERROR",
            NO_AVAILABLE_CONFIGURATION_RECORDER = "NO_AVAILABLE_CONFIGURATION_RECORDER"
    }
    /**
        * <p>The reason for the current status of a standard subscription.</p>
        */
    export interface StandardsStatusReason {
            /**
                * <p>The reason code that represents the reason for the current status of a standard subscription.</p>
                */
            StatusReasonCode: StatusReasonCode | string | undefined;
    }
    export namespace StandardsStatusReason {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StandardsStatusReason) => any;
    }
    /**
        * <p>A resource that represents your subscription to a supported standard.</p>
        */
    export interface StandardsSubscription {
            /**
                * <p>The ARN of a resource that represents your subscription to a supported standard.</p>
                */
            StandardsSubscriptionArn: string | undefined;
            /**
                * <p>The ARN of a standard.</p>
                */
            StandardsArn: string | undefined;
            /**
                * <p>A key-value pair of input for the standard.</p>
                */
            StandardsInput: Record<string, string> | undefined;
            /**
                * <p>The status of the standard subscription.</p>
                *          <p>The status values are as follows:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PENDING</code> - Standard is in the process of being enabled.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>READY</code> - Standard is enabled.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INCOMPLETE</code> - Standard could not be enabled completely. Some controls may not be available.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETING</code> - Standard is in the process of being disabled.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>FAILED</code> - Standard could not be disabled.</p>
                *             </li>
                *          </ul>
                */
            StandardsStatus: StandardsStatus | string | undefined;
            /**
                * <p>The reason for the current status.</p>
                */
            StandardsStatusReason?: StandardsStatusReason;
    }
    export namespace StandardsSubscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StandardsSubscription) => any;
    }
    export interface BatchDisableStandardsResponse {
            /**
                * <p>The details of the standards subscriptions that were disabled.</p>
                */
            StandardsSubscriptions?: StandardsSubscription[];
    }
    export namespace BatchDisableStandardsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisableStandardsResponse) => any;
    }
    /**
        * <p>The standard that you want to enable.</p>
        */
    export interface StandardsSubscriptionRequest {
            /**
                * <p>The ARN of the standard that you want to enable. To view the list of available standards
                *          and their ARNs, use the <code>DescribeStandards</code> operation.</p>
                */
            StandardsArn: string | undefined;
            /**
                * <p>A key-value pair of input for the standard.</p>
                */
            StandardsInput?: Record<string, string>;
    }
    export namespace StandardsSubscriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StandardsSubscriptionRequest) => any;
    }
    export interface BatchEnableStandardsRequest {
            /**
                * <p>The list of standards checks to enable.</p>
                */
            StandardsSubscriptionRequests: StandardsSubscriptionRequest[] | undefined;
    }
    export namespace BatchEnableStandardsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchEnableStandardsRequest) => any;
    }
    export interface BatchEnableStandardsResponse {
            /**
                * <p>The details of the standards subscriptions that were enabled.</p>
                */
            StandardsSubscriptions?: StandardsSubscription[];
    }
    export namespace BatchEnableStandardsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchEnableStandardsResponse) => any;
    }
    export interface BatchImportFindingsRequest {
            /**
                * <p>A list of findings to import. To successfully import a finding, it must follow the
                *             <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html">Amazon Web Services Security Finding Format</a>. Maximum of 100 findings per request.</p>
                */
            Findings: AwsSecurityFinding[] | undefined;
    }
    export namespace BatchImportFindingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchImportFindingsRequest) => any;
    }
    /**
        * <p>The list of the findings that cannot be imported. For each finding, the list provides
        *          the error.</p>
        */
    export interface ImportFindingsError {
            /**
                * <p>The identifier of the finding that could not be updated.</p>
                */
            Id: string | undefined;
            /**
                * <p>The code of the error returned by the <code>BatchImportFindings</code> operation.</p>
                */
            ErrorCode: string | undefined;
            /**
                * <p>The message of the error returned by the <code>BatchImportFindings</code>
                *          operation.</p>
                */
            ErrorMessage: string | undefined;
    }
    export namespace ImportFindingsError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportFindingsError) => any;
    }
    export interface BatchImportFindingsResponse {
            /**
                * <p>The number of findings that failed to import.</p>
                */
            FailedCount: number | undefined;
            /**
                * <p>The number of findings that were successfully imported.</p>
                */
            SuccessCount: number | undefined;
            /**
                * <p>The list of findings that failed to import.</p>
                */
            FailedFindings?: ImportFindingsError[];
    }
    export namespace BatchImportFindingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchImportFindingsResponse) => any;
    }
    /**
        * <p>The updated note.</p>
        */
    export interface NoteUpdate {
            /**
                * <p>The updated note text.</p>
                */
            Text: string | undefined;
            /**
                * <p>The principal that updated the note.</p>
                */
            UpdatedBy: string | undefined;
    }
    export namespace NoteUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NoteUpdate) => any;
    }
    /**
        * <p>Updates to the severity information for a finding.</p>
        */
    export interface SeverityUpdate {
            /**
                * <p>The normalized severity for the finding. This attribute is to be deprecated in favor of
                *             <code>Label</code>.</p>
                *          <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>,
                *             <code>Label</code> is set automatically as follows.</p>
                *          <ul>
                *             <li>
                *                <p>0 - <code>INFORMATIONAL</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>1–39 - <code>LOW</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>40–69 - <code>MEDIUM</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>70–89 - <code>HIGH</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>90–100 - <code>CRITICAL</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Normalized?: number;
            /**
                * <p>The native severity as defined by the Amazon Web Services service or integrated partner product that
                *          generated the finding.</p>
                */
            Product?: number;
            /**
                * <p>The severity value of the finding. The allowed values are the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>INFORMATIONAL</code> - No issue was found.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LOW</code> - The issue does not require action on its own.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MEDIUM</code> - The issue must be addressed but not urgently.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>HIGH</code> - The issue must be addressed as a priority.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CRITICAL</code> - The issue must be remediated immediately to avoid it
                *                escalating.</p>
                *             </li>
                *          </ul>
                */
            Label?: SeverityLabel | string;
    }
    export namespace SeverityUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SeverityUpdate) => any;
    }
    /**
        * <p>Used to update information about the investigation into the finding.</p>
        */
    export interface WorkflowUpdate {
            /**
                * <p>The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to <code>SUPPRESSED</code> or <code>RESOLVED</code> does not prevent a new finding for the same issue.</p>
                *          <p>The allowed values are the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>NEW</code> - The initial state of a finding, before it is reviewed.</p>
                *                <p>Security Hub also resets <code>WorkFlowStatus</code> from <code>NOTIFIED</code> or
                *                   <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
                *                <ul>
                *                   <li>
                *                      <p>The record state changes from <code>ARCHIVED</code> to
                *                      <code>ACTIVE</code>.</p>
                *                   </li>
                *                   <li>
                *                      <p>The compliance status changes from <code>PASSED</code> to either
                *                         <code>WARNING</code>, <code>FAILED</code>, or
                *                      <code>NOT_AVAILABLE</code>.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NOTIFIED</code> - Indicates that you notified the resource owner about the
                *                security issue. Used when the initial reviewer is not the resource owner, and needs
                *                intervention from the resource owner.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RESOLVED</code> - The finding was reviewed and remediated and is now
                *                considered resolved.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SUPPRESSED</code> - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.</p>
                *             </li>
                *          </ul>
                */
            Status?: WorkflowStatus | string;
    }
    export namespace WorkflowUpdate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkflowUpdate) => any;
    }
    export interface BatchUpdateFindingsRequest {
            /**
                * <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update
                *          up to 100 findings at a time.</p>
                *          <p>For each finding, the list provides the finding identifier and the ARN of the finding
                *          provider.</p>
                */
            FindingIdentifiers: AwsSecurityFindingIdentifier[] | undefined;
            /**
                * <p>The updated note.</p>
                */
            Note?: NoteUpdate;
            /**
                * <p>Used to update the finding severity.</p>
                */
            Severity?: SeverityUpdate;
            /**
                * <p>Indicates the veracity of a finding.</p>
                *          <p>The available values for <code>VerificationState</code> are  as follows.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>UNKNOWN</code> – The default disposition of a security finding</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TRUE_POSITIVE</code> – The security finding is confirmed</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>FALSE_POSITIVE</code> – The security finding was determined to be a false
                *                alarm</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where
                *                the finding doesn't pose any threat, is expected, or both</p>
                *             </li>
                *          </ul>
                */
            VerificationState?: VerificationState | string;
            /**
                * <p>The updated value for the finding confidence. Confidence is defined as the likelihood
                *          that a finding accurately identifies the behavior or issue that it was intended to
                *          identify.</p>
                *          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
                *          confidence and 100 means 100 percent confidence.</p>
                */
            Confidence?: number;
            /**
                * <p>The updated value for the level of importance assigned to the resources associated with
                *          the findings.</p>
                *          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
                *          is reserved for the most critical resources. </p>
                */
            Criticality?: number;
            /**
                * <p>One or more finding types in the format of namespace/category/classifier that classify a
                *          finding.</p>
                *          <p>Valid namespace values are as follows.</p>
                *          <ul>
                *             <li>
                *                <p>Software and Configuration Checks</p>
                *             </li>
                *             <li>
                *                <p>TTPs</p>
                *             </li>
                *             <li>
                *                <p>Effects</p>
                *             </li>
                *             <li>
                *                <p>Unusual Behaviors</p>
                *             </li>
                *             <li>
                *                <p>Sensitive Data Identifications </p>
                *             </li>
                *          </ul>
                */
            Types?: string[];
            /**
                * <p>A list of name/value string pairs associated with the finding. These are custom,
                *          user-defined fields added to a finding.</p>
                */
            UserDefinedFields?: Record<string, string>;
            /**
                * <p>Used to update the workflow status of a finding.</p>
                *          <p>The workflow status indicates the progress of the investigation into the finding. </p>
                */
            Workflow?: WorkflowUpdate;
            /**
                * <p>A list of findings that are related to the updated findings.</p>
                */
            RelatedFindings?: RelatedFinding[];
    }
    export namespace BatchUpdateFindingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateFindingsRequest) => any;
    }
    /**
        * <p>A finding from a <code>BatchUpdateFindings</code> request that Security Hub was unable to
        *          update.</p>
        */
    export interface BatchUpdateFindingsUnprocessedFinding {
            /**
                * <p>The identifier of the finding that was not updated.</p>
                */
            FindingIdentifier: AwsSecurityFindingIdentifier | undefined;
            /**
                * <p>The code associated with the error.</p>
                */
            ErrorCode: string | undefined;
            /**
                * <p>The message associated with the error.</p>
                */
            ErrorMessage: string | undefined;
    }
    export namespace BatchUpdateFindingsUnprocessedFinding {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateFindingsUnprocessedFinding) => any;
    }
    export interface BatchUpdateFindingsResponse {
            /**
                * <p>The list of findings that were updated successfully.</p>
                */
            ProcessedFindings: AwsSecurityFindingIdentifier[] | undefined;
            /**
                * <p>The list of findings that were not updated.</p>
                */
            UnprocessedFindings: BatchUpdateFindingsUnprocessedFinding[] | undefined;
    }
    export namespace BatchUpdateFindingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchUpdateFindingsResponse) => any;
    }
    export enum ControlStatus {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    export interface CreateActionTargetRequest {
            /**
                * <p>The name of the custom action target. Can contain up to 20 characters.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description for the custom action target.</p>
                */
            Description: string | undefined;
            /**
                * <p>The ID for the custom action target. Can contain up to 20 alphanumeric characters.</p>
                */
            Id: string | undefined;
    }
    export namespace CreateActionTargetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActionTargetRequest) => any;
    }
    export interface CreateActionTargetResponse {
            /**
                * <p>The ARN for the custom action target.</p>
                */
            ActionTargetArn: string | undefined;
    }
    export namespace CreateActionTargetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActionTargetResponse) => any;
    }
    /**
        * <p>The resource specified in the request conflicts with an existing resource.</p>
        */
    export class ResourceConflictException extends __BaseException {
            readonly name: "ResourceConflictException";
            readonly $fault: "client";
            Message?: string;
            Code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceConflictException, __BaseException>);
    }
    export interface CreateFindingAggregatorRequest {
            /**
                * <p>Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.</p>
                *          <p>The selected option also determines how to use the Regions provided in the Regions list.</p>
                *          <p>The options are as follows:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALL_REGIONS</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ALL_REGIONS_EXCEPT_SPECIFIED</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the <code>Regions</code> parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SPECIFIED_REGIONS</code> - Indicates to aggregate findings only from the Regions listed in the <code>Regions</code> parameter. Security Hub does not automatically aggregate findings from new Regions.
                *          </p>
                *             </li>
                *          </ul>
                */
            RegionLinkingMode: string | undefined;
            /**
                * <p>If <code>RegionLinkingMode</code> is <code>ALL_REGIONS_EXCEPT_SPECIFIED</code>, then this is a comma-separated list of Regions that do not aggregate findings to the aggregation Region.</p>
                *          <p>If <code>RegionLinkingMode</code> is <code>SPECIFIED_REGIONS</code>, then this is a comma-separated list of Regions that do aggregate findings to the aggregation Region.
                *       </p>
                */
            Regions?: string[];
    }
    export namespace CreateFindingAggregatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFindingAggregatorRequest) => any;
    }
    export interface CreateFindingAggregatorResponse {
            /**
                * <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and stop finding aggregation.</p>
                */
            FindingAggregatorArn?: string;
            /**
                * <p>The aggregation Region.</p>
                */
            FindingAggregationRegion?: string;
            /**
                * <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
                */
            RegionLinkingMode?: string;
            /**
                * <p>The list of excluded Regions or included Regions.</p>
                */
            Regions?: string[];
    }
    export namespace CreateFindingAggregatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFindingAggregatorResponse) => any;
    }
    export interface CreateInsightRequest {
            /**
                * <p>The name of the custom insight to create.</p>
                */
            Name: string | undefined;
            /**
                * <p>One or more attributes used to filter the findings included in the insight. The insight
                *          only includes findings that match the criteria defined in the filters.</p>
                */
            Filters: AwsSecurityFindingFilters | undefined;
            /**
                * <p>The attribute used to group the findings for the insight. The grouping attribute
                *          identifies the type of item that the insight applies to. For example, if an insight is
                *          grouped by resource identifier, then the insight produces a list of resource
                *          identifiers.</p>
                */
            GroupByAttribute: string | undefined;
    }
    export namespace CreateInsightRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInsightRequest) => any;
    }
    export interface CreateInsightResponse {
            /**
                * <p>The ARN of the insight created.</p>
                */
            InsightArn: string | undefined;
    }
    export namespace CreateInsightResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInsightResponse) => any;
    }
    export interface CreateMembersRequest {
            /**
                * <p>The list of accounts to associate with the Security Hub administrator account. For each account, the
                *          list includes the account ID and optionally the email address.</p>
                */
            AccountDetails: AccountDetails[] | undefined;
    }
    export namespace CreateMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMembersRequest) => any;
    }
    /**
        * <p>Details about the account that was not processed.</p>
        */
    export interface Result {
            /**
                * <p>An Amazon Web Services account ID of the account that was not processed.</p>
                */
            AccountId?: string;
            /**
                * <p>The reason that the account was not processed.</p>
                */
            ProcessingResult?: string;
    }
    export namespace Result {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Result) => any;
    }
    export interface CreateMembersResponse {
            /**
                * <p>The list of Amazon Web Services accounts that were not processed. For each account, the list includes
                *          the account ID and the email address.</p>
                */
            UnprocessedAccounts?: Result[];
    }
    export namespace CreateMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMembersResponse) => any;
    }
    export interface DeclineInvitationsRequest {
            /**
                * <p>The list of account IDs for the accounts from which to decline the invitations to
                *          Security Hub.</p>
                */
            AccountIds: string[] | undefined;
    }
    export namespace DeclineInvitationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeclineInvitationsRequest) => any;
    }
    export interface DeclineInvitationsResponse {
            /**
                * <p>The list of Amazon Web Services accounts that were not processed. For each account, the list includes
                *          the account ID and the email address.</p>
                */
            UnprocessedAccounts?: Result[];
    }
    export namespace DeclineInvitationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeclineInvitationsResponse) => any;
    }
    export interface DeleteActionTargetRequest {
            /**
                * <p>The ARN of the custom action target to delete.</p>
                */
            ActionTargetArn: string | undefined;
    }
    export namespace DeleteActionTargetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActionTargetRequest) => any;
    }
    export interface DeleteActionTargetResponse {
            /**
                * <p>The ARN of the custom action target that was deleted.</p>
                */
            ActionTargetArn: string | undefined;
    }
    export namespace DeleteActionTargetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActionTargetResponse) => any;
    }
    export interface DeleteFindingAggregatorRequest {
            /**
                * <p>The ARN of the finding aggregator to delete. To obtain the ARN, use <code>ListFindingAggregators</code>.</p>
                */
            FindingAggregatorArn: string | undefined;
    }
    export namespace DeleteFindingAggregatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFindingAggregatorRequest) => any;
    }
    export interface DeleteFindingAggregatorResponse {
    }
    export namespace DeleteFindingAggregatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFindingAggregatorResponse) => any;
    }
    export interface DeleteInsightRequest {
            /**
                * <p>The ARN of the insight to delete.</p>
                */
            InsightArn: string | undefined;
    }
    export namespace DeleteInsightRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInsightRequest) => any;
    }
    export interface DeleteInsightResponse {
            /**
                * <p>The ARN of the insight that was deleted.</p>
                */
            InsightArn: string | undefined;
    }
    export namespace DeleteInsightResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInsightResponse) => any;
    }
    export interface DeleteInvitationsRequest {
            /**
                * <p>The list of the account IDs that sent the invitations to delete.</p>
                */
            AccountIds: string[] | undefined;
    }
    export namespace DeleteInvitationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInvitationsRequest) => any;
    }
    export interface DeleteInvitationsResponse {
            /**
                * <p>The list of Amazon Web Services accounts for which the invitations were not deleted. For each account,
                *          the list includes the account ID and the email address.</p>
                */
            UnprocessedAccounts?: Result[];
    }
    export namespace DeleteInvitationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInvitationsResponse) => any;
    }
    export interface DeleteMembersRequest {
            /**
                * <p>The list of account IDs for the member accounts to delete.</p>
                */
            AccountIds: string[] | undefined;
    }
    export namespace DeleteMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMembersRequest) => any;
    }
    export interface DeleteMembersResponse {
            /**
                * <p>The list of Amazon Web Services accounts that were not deleted. For each account, the list includes the
                *          account ID and the email address.</p>
                */
            UnprocessedAccounts?: Result[];
    }
    export namespace DeleteMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMembersResponse) => any;
    }
    export interface DescribeActionTargetsRequest {
            /**
                * <p>A list of custom action target ARNs for the custom action targets to retrieve.</p>
                */
            ActionTargetArns?: string[];
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>DescribeActionTargets</code> operation, set the value of this parameter to
                *             <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeActionTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActionTargetsRequest) => any;
    }
    export interface DescribeActionTargetsResponse {
            /**
                * <p>A list of <code>ActionTarget</code> objects. Each object includes the <code>ActionTargetArn</code>,
                *             <code>Description</code>, and <code>Name</code> of a custom action target available in
                *          Security Hub.</p>
                */
            ActionTargets: ActionTarget[] | undefined;
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeActionTargetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActionTargetsResponse) => any;
    }
    export interface DescribeHubRequest {
            /**
                * <p>The ARN of the Hub resource to retrieve.</p>
                */
            HubArn?: string;
    }
    export namespace DescribeHubRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHubRequest) => any;
    }
    export interface DescribeHubResponse {
            /**
                * <p>The ARN of the Hub resource that was retrieved.</p>
                */
            HubArn?: string;
            /**
                * <p>The date and time when Security Hub was enabled in the account.</p>
                */
            SubscribedAt?: string;
            /**
                * <p>Whether to automatically enable new controls when they are added to standards that are
                *          enabled.</p>
                *          <p>If set to <code>true</code>, then new controls for enabled standards are enabled
                *          automatically. If set to <code>false</code>, then new controls are not enabled.</p>
                */
            AutoEnableControls?: boolean;
    }
    export namespace DescribeHubResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeHubResponse) => any;
    }
    export interface DescribeOrganizationConfigurationRequest {
    }
    export namespace DescribeOrganizationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigurationRequest) => any;
    }
    export interface DescribeOrganizationConfigurationResponse {
            /**
                * <p>Whether to automatically enable Security Hub for new accounts in the organization.</p>
                *          <p>If set to <code>true</code>, then Security Hub is enabled for new accounts. If set to false,
                *          then new accounts are not added automatically.</p>
                */
            AutoEnable?: boolean;
            /**
                * <p>Whether the maximum number of allowed member accounts are already associated with the
                *          Security Hub administrator account.</p>
                */
            MemberAccountLimitReached?: boolean;
            /**
                * <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a>
                *          for new member accounts in the organization.</p>
                *          <p>The default value of this parameter is equal to <code>DEFAULT</code>.</p>
                *          <p>If equal to <code>DEFAULT</code>, then Security Hub default standards are automatically enabled for new member
                *          accounts. If equal to <code>NONE</code>, then default standards are not automatically enabled for new member
                *          accounts.</p>
                */
            AutoEnableStandards?: AutoEnableStandards | string;
    }
    export namespace DescribeOrganizationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrganizationConfigurationResponse) => any;
    }
    export interface DescribeProductsRequest {
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>DescribeProducts</code> operation, set the value of this parameter to
                *             <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The ARN of the integration to return.</p>
                */
            ProductArn?: string;
    }
    export namespace DescribeProductsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProductsRequest) => any;
    }
    export enum IntegrationType {
            RECEIVE_FINDINGS_FROM_SECURITY_HUB = "RECEIVE_FINDINGS_FROM_SECURITY_HUB",
            SEND_FINDINGS_TO_SECURITY_HUB = "SEND_FINDINGS_TO_SECURITY_HUB",
            UPDATE_FINDINGS_IN_SECURITY_HUB = "UPDATE_FINDINGS_IN_SECURITY_HUB"
    }
    /**
        * <p>Contains details about a product.</p>
        */
    export interface Product {
            /**
                * <p>The ARN assigned to the product.</p>
                */
            ProductArn: string | undefined;
            /**
                * <p>The name of the product.</p>
                */
            ProductName?: string;
            /**
                * <p>The name of the company that provides the product.</p>
                */
            CompanyName?: string;
            /**
                * <p>A description of the product.</p>
                */
            Description?: string;
            /**
                * <p>The categories assigned to the product.</p>
                */
            Categories?: string[];
            /**
                * <p>The types of integration that the product supports. Available values are the
                *          following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SEND_FINDINGS_TO_SECURITY_HUB</code> - The integration sends
                *                findings to Security Hub.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RECEIVE_FINDINGS_FROM_SECURITY_HUB</code> - The integration
                *                receives findings from Security Hub.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATE_FINDINGS_IN_SECURITY_HUB</code> - The integration does not send new findings to Security Hub, but does make updates to the findings that it receives from Security Hub.</p>
                *             </li>
                *          </ul>
                */
            IntegrationTypes?: (IntegrationType | string)[];
            /**
                * <p>For integrations with Amazon Web Services services, the Amazon Web Services Console URL from which to activate the service.</p>
                *          <p>For integrations with third-party products, the Amazon Web Services Marketplace URL from which to subscribe to or purchase the product.</p>
                */
            MarketplaceUrl?: string;
            /**
                * <p>The URL to the service or product documentation about the integration with Security Hub, including how to activate the integration.</p>
                */
            ActivationUrl?: string;
            /**
                * <p>The resource policy associated with the product.</p>
                */
            ProductSubscriptionResourcePolicy?: string;
    }
    export namespace Product {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Product) => any;
    }
    export interface DescribeProductsResponse {
            /**
                * <p>A list of products, including details for each product.</p>
                */
            Products: Product[] | undefined;
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeProductsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProductsResponse) => any;
    }
    export interface DescribeStandardsRequest {
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>DescribeStandards</code> operation, set the value of this parameter to
                *             <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of standards to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeStandardsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStandardsRequest) => any;
    }
    /**
        * <p>Provides information about a specific standard.</p>
        */
    export interface Standard {
            /**
                * <p>The ARN of a standard.</p>
                */
            StandardsArn?: string;
            /**
                * <p>The name of the standard.</p>
                */
            Name?: string;
            /**
                * <p>A description of the standard.</p>
                */
            Description?: string;
            /**
                * <p>Whether the standard is enabled by default. When Security Hub is enabled from the console, if a
                *          standard is enabled by default, the check box for that standard is selected by
                *          default.</p>
                *          <p>When Security Hub is enabled using the <code>EnableSecurityHub</code> API operation, the
                *          standard is enabled by default unless <code>EnableDefaultStandards</code> is set to
                *             <code>false</code>.</p>
                */
            EnabledByDefault?: boolean;
    }
    export namespace Standard {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Standard) => any;
    }
    export interface DescribeStandardsResponse {
            /**
                * <p>A list of available standards.</p>
                */
            Standards?: Standard[];
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeStandardsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStandardsResponse) => any;
    }
    export interface DescribeStandardsControlsRequest {
            /**
                * <p>The ARN of a resource that represents your subscription to a supported standard. To get
                *          the subscription ARNs of the standards you have enabled, use the <code>GetEnabledStandards</code> operation.</p>
                */
            StandardsSubscriptionArn: string | undefined;
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>DescribeStandardsControls</code> operation, set the value of this parameter to
                *             <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of security standard controls to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeStandardsControlsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStandardsControlsRequest) => any;
    }
    export enum SeverityRating {
            CRITICAL = "CRITICAL",
            HIGH = "HIGH",
            LOW = "LOW",
            MEDIUM = "MEDIUM"
    }
    /**
        * <p>Details for an individual security standard control.</p>
        */
    export interface StandardsControl {
            /**
                * <p>The ARN of the security standard control.</p>
                */
            StandardsControlArn?: string;
            /**
                * <p>The current status of the security standard control. Indicates whether the control is
                *          enabled or disabled. Security Hub does not check against disabled controls.</p>
                */
            ControlStatus?: ControlStatus | string;
            /**
                * <p>The reason provided for the most recent change in status for the control.</p>
                */
            DisabledReason?: string;
            /**
                * <p>The date and time that the status of the security standard control was most recently
                *          updated.</p>
                */
            ControlStatusUpdatedAt?: Date;
            /**
                * <p>The identifier of the security standard control.</p>
                */
            ControlId?: string;
            /**
                * <p>The title of the security standard control.</p>
                */
            Title?: string;
            /**
                * <p>The longer description of the security standard control. Provides information about what
                *          the control is checking for.</p>
                */
            Description?: string;
            /**
                * <p>A link to remediation information for the control in the Security Hub user
                *          documentation.</p>
                */
            RemediationUrl?: string;
            /**
                * <p>The severity of findings generated from this security standard control.</p>
                *          <p>The finding severity is based on an assessment of how easy it would be to compromise Amazon Web Services
                *          resources if the issue is detected.</p>
                */
            SeverityRating?: SeverityRating | string;
            /**
                * <p>The list of requirements that are related to this control.</p>
                */
            RelatedRequirements?: string[];
    }
    export namespace StandardsControl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StandardsControl) => any;
    }
    export interface DescribeStandardsControlsResponse {
            /**
                * <p>A list of security standards controls.</p>
                */
            Controls?: StandardsControl[];
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeStandardsControlsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeStandardsControlsResponse) => any;
    }
    export interface DisableImportFindingsForProductRequest {
            /**
                * <p>The ARN of the integrated product to disable the integration for.</p>
                */
            ProductSubscriptionArn: string | undefined;
    }
    export namespace DisableImportFindingsForProductRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableImportFindingsForProductRequest) => any;
    }
    export interface DisableImportFindingsForProductResponse {
    }
    export namespace DisableImportFindingsForProductResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableImportFindingsForProductResponse) => any;
    }
    export interface DisableOrganizationAdminAccountRequest {
            /**
                * <p>The Amazon Web Services account identifier of the Security Hub administrator account.</p>
                */
            AdminAccountId: string | undefined;
    }
    export namespace DisableOrganizationAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableOrganizationAdminAccountRequest) => any;
    }
    export interface DisableOrganizationAdminAccountResponse {
    }
    export namespace DisableOrganizationAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableOrganizationAdminAccountResponse) => any;
    }
    export interface DisableSecurityHubRequest {
    }
    export namespace DisableSecurityHubRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableSecurityHubRequest) => any;
    }
    export interface DisableSecurityHubResponse {
    }
    export namespace DisableSecurityHubResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableSecurityHubResponse) => any;
    }
    export interface DisassociateFromAdministratorAccountRequest {
    }
    export namespace DisassociateFromAdministratorAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateFromAdministratorAccountRequest) => any;
    }
    export interface DisassociateFromAdministratorAccountResponse {
    }
    export namespace DisassociateFromAdministratorAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateFromAdministratorAccountResponse) => any;
    }
    export interface DisassociateFromMasterAccountRequest {
    }
    export namespace DisassociateFromMasterAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateFromMasterAccountRequest) => any;
    }
    export interface DisassociateFromMasterAccountResponse {
    }
    export namespace DisassociateFromMasterAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateFromMasterAccountResponse) => any;
    }
    export interface DisassociateMembersRequest {
            /**
                * <p>The account IDs of the member accounts to disassociate from the administrator account.</p>
                */
            AccountIds: string[] | undefined;
    }
    export namespace DisassociateMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateMembersRequest) => any;
    }
    export interface DisassociateMembersResponse {
    }
    export namespace DisassociateMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateMembersResponse) => any;
    }
    export interface EnableImportFindingsForProductRequest {
            /**
                * <p>The ARN of the product to enable the integration for.</p>
                */
            ProductArn: string | undefined;
    }
    export namespace EnableImportFindingsForProductRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableImportFindingsForProductRequest) => any;
    }
    export interface EnableImportFindingsForProductResponse {
            /**
                * <p>The ARN of your subscription to the product to enable integrations for.</p>
                */
            ProductSubscriptionArn?: string;
    }
    export namespace EnableImportFindingsForProductResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableImportFindingsForProductResponse) => any;
    }
    export interface EnableOrganizationAdminAccountRequest {
            /**
                * <p>The Amazon Web Services account identifier of the account to designate as the Security Hub administrator
                *          account.</p>
                */
            AdminAccountId: string | undefined;
    }
    export namespace EnableOrganizationAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableOrganizationAdminAccountRequest) => any;
    }
    export interface EnableOrganizationAdminAccountResponse {
    }
    export namespace EnableOrganizationAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableOrganizationAdminAccountResponse) => any;
    }
    export interface EnableSecurityHubRequest {
            /**
                * <p>The tags to add to the hub resource when you enable Security Hub.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Whether to enable the security standards that Security Hub has designated as automatically
                *          enabled. If you do not provide a value for <code>EnableDefaultStandards</code>, it is set
                *          to <code>true</code>. To not enable the automatically enabled standards, set
                *             <code>EnableDefaultStandards</code> to <code>false</code>.</p>
                */
            EnableDefaultStandards?: boolean;
    }
    export namespace EnableSecurityHubRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableSecurityHubRequest) => any;
    }
    export interface EnableSecurityHubResponse {
    }
    export namespace EnableSecurityHubResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableSecurityHubResponse) => any;
    }
    /**
        * <p>A finding aggregator. A finding aggregator contains the configuration for finding aggregation.</p>
        */
    export interface FindingAggregator {
            /**
                * <p>The ARN of the finding aggregator. You use the finding aggregator ARN to retrieve details for, update, and delete the finding aggregator.</p>
                */
            FindingAggregatorArn?: string;
    }
    export namespace FindingAggregator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FindingAggregator) => any;
    }
    export interface GetAdministratorAccountRequest {
    }
    export namespace GetAdministratorAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAdministratorAccountRequest) => any;
    }
    /**
        * <p>Details about an invitation.</p>
        */
    export interface Invitation {
            /**
                * <p>The account ID of the Security Hub administrator account that the invitation was sent from.</p>
                */
            AccountId?: string;
            /**
                * <p>The ID of the invitation sent to the member account.</p>
                */
            InvitationId?: string;
            /**
                * <p>The timestamp of when the invitation was sent.</p>
                */
            InvitedAt?: Date;
            /**
                * <p>The current status of the association between the member and administrator accounts.</p>
                */
            MemberStatus?: string;
    }
    export namespace Invitation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Invitation) => any;
    }
    export interface GetAdministratorAccountResponse {
            /**
                * <p>Details about an invitation.</p>
                */
            Administrator?: Invitation;
    }
    export namespace GetAdministratorAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAdministratorAccountResponse) => any;
    }
    export interface GetEnabledStandardsRequest {
            /**
                * <p>The list of the standards subscription ARNs for the standards to retrieve.</p>
                */
            StandardsSubscriptionArns?: string[];
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>GetEnabledStandards</code> operation, set the value of this parameter to
                *             <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetEnabledStandardsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEnabledStandardsRequest) => any;
    }
    export interface GetEnabledStandardsResponse {
            /**
                * <p>The list of <code>StandardsSubscriptions</code> objects that include information about
                *          the enabled standards.</p>
                */
            StandardsSubscriptions?: StandardsSubscription[];
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetEnabledStandardsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEnabledStandardsResponse) => any;
    }
    export interface GetFindingAggregatorRequest {
            /**
                * <p>The ARN of the finding aggregator to return details for. To obtain the ARN, use <code>ListFindingAggregators</code>.</p>
                */
            FindingAggregatorArn: string | undefined;
    }
    export namespace GetFindingAggregatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingAggregatorRequest) => any;
    }
    export interface GetFindingAggregatorResponse {
            /**
                * <p>The ARN of the finding aggregator.</p>
                */
            FindingAggregatorArn?: string;
            /**
                * <p>The aggregation Region.</p>
                */
            FindingAggregationRegion?: string;
            /**
                * <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
                */
            RegionLinkingMode?: string;
            /**
                * <p>The list of excluded Regions or included Regions.</p>
                */
            Regions?: string[];
    }
    export namespace GetFindingAggregatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingAggregatorResponse) => any;
    }
    export enum SortOrder {
            ASCENDING = "asc",
            DESCENDING = "desc"
    }
    /**
        * <p>A collection of finding attributes used to sort findings.</p>
        */
    export interface SortCriterion {
            /**
                * <p>The finding attribute used to sort findings.</p>
                */
            Field?: string;
            /**
                * <p>The order used to sort findings.</p>
                */
            SortOrder?: SortOrder | string;
    }
    export namespace SortCriterion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SortCriterion) => any;
    }
    export interface GetFindingsRequest {
            /**
                * <p>The finding attributes used to define a condition to filter the returned
                *          findings.</p>
                *          <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to
                *          20 filter values.</p>
                *          <p>Note that in the available filter fields, <code>WorkflowState</code> is deprecated. To
                *          search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
                */
            Filters?: AwsSecurityFindingFilters;
            /**
                * <p>The finding attributes used to sort the list of returned findings.</p>
                */
            SortCriteria?: SortCriterion[];
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>GetFindings</code> operation, set the value of this parameter to
                *          <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of findings to return.</p>
                */
            MaxResults?: number;
    }
    export namespace GetFindingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingsRequest) => any;
    }
    export interface GetFindingsResponse {
            /**
                * <p>The findings that matched the filters specified in the request.</p>
                */
            Findings: AwsSecurityFinding[] | undefined;
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetFindingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFindingsResponse) => any;
    }
    export interface GetInsightResultsRequest {
            /**
                * <p>The ARN of the insight for which to return results.</p>
                */
            InsightArn: string | undefined;
    }
    export namespace GetInsightResultsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightResultsRequest) => any;
    }
    /**
        * <p>The insight result values returned by the <code>GetInsightResults</code>
        *          operation.</p>
        */
    export interface InsightResultValue {
            /**
                * <p>The value of the attribute that the findings are grouped by for the insight whose
                *          results are returned by the <code>GetInsightResults</code> operation.</p>
                */
            GroupByAttributeValue: string | undefined;
            /**
                * <p>The number of findings returned for each <code>GroupByAttributeValue</code>.</p>
                */
            Count: number | undefined;
    }
    export namespace InsightResultValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightResultValue) => any;
    }
    /**
        * <p>The insight results returned by the <code>GetInsightResults</code> operation.</p>
        */
    export interface InsightResults {
            /**
                * <p>The ARN of the insight whose results are returned by the <code>GetInsightResults</code>
                *          operation.</p>
                */
            InsightArn: string | undefined;
            /**
                * <p>The attribute that the findings are grouped by for the insight whose results are
                *          returned by the <code>GetInsightResults</code> operation.</p>
                */
            GroupByAttribute: string | undefined;
            /**
                * <p>The list of insight result values returned by the <code>GetInsightResults</code>
                *          operation.</p>
                */
            ResultValues: InsightResultValue[] | undefined;
    }
    export namespace InsightResults {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightResults) => any;
    }
    export interface GetInsightResultsResponse {
            /**
                * <p>The insight results returned by the operation.</p>
                */
            InsightResults: InsightResults | undefined;
    }
    export namespace GetInsightResultsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightResultsResponse) => any;
    }
    export interface GetInsightsRequest {
            /**
                * <p>The ARNs of the insights to describe. If you do not provide any insight ARNs, then
                *             <code>GetInsights</code> returns all of your custom insights. It does not return any
                *          managed insights.</p>
                */
            InsightArns?: string[];
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>GetInsights</code> operation, set the value of this parameter to
                *          <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace GetInsightsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightsRequest) => any;
    }
    /**
        * <p>Contains information about a Security Hub insight.</p>
        */
    export interface Insight {
            /**
                * <p>The ARN of a Security Hub insight.</p>
                */
            InsightArn: string | undefined;
            /**
                * <p>The name of a Security Hub insight.</p>
                */
            Name: string | undefined;
            /**
                * <p>One or more attributes used to filter the findings included in the insight. The insight
                *          only includes findings that match the criteria defined in the filters.</p>
                */
            Filters: AwsSecurityFindingFilters | undefined;
            /**
                * <p>The grouping attribute for the insight's findings. Indicates how to group the matching
                *          findings, and identifies the type of item that the insight applies to. For example, if an
                *          insight is grouped by resource identifier, then the insight produces a list of resource
                *          identifiers.</p>
                */
            GroupByAttribute: string | undefined;
    }
    export namespace Insight {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Insight) => any;
    }
    export interface GetInsightsResponse {
            /**
                * <p>The insights returned by the operation.</p>
                */
            Insights: Insight[] | undefined;
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetInsightsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightsResponse) => any;
    }
    export interface GetInvitationsCountRequest {
    }
    export namespace GetInvitationsCountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInvitationsCountRequest) => any;
    }
    export interface GetInvitationsCountResponse {
            /**
                * <p>The number of all membership invitations sent to this Security Hub member account, not
                *          including the currently accepted invitation.</p>
                */
            InvitationsCount?: number;
    }
    export namespace GetInvitationsCountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInvitationsCountResponse) => any;
    }
    export interface GetMasterAccountRequest {
    }
    export namespace GetMasterAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMasterAccountRequest) => any;
    }
    export interface GetMasterAccountResponse {
            /**
                * <p>A list of details about the Security Hub administrator account for the current member account.
                *       </p>
                */
            Master?: Invitation;
    }
    export namespace GetMasterAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMasterAccountResponse) => any;
    }
    export interface GetMembersRequest {
            /**
                * <p>The list of account IDs for the Security Hub member accounts to return the details for. </p>
                */
            AccountIds: string[] | undefined;
    }
    export namespace GetMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMembersRequest) => any;
    }
    /**
        * <p>The details about a member account.</p>
        */
    export interface Member {
            /**
                * <p>The Amazon Web Services account ID of the member account.</p>
                */
            AccountId?: string;
            /**
                * <p>The email address of the member account.</p>
                */
            Email?: string;
            /**
                * @deprecated
                *
                * <p>This is replaced by <code>AdministratorID</code>.</p>
                *          <p>The Amazon Web Services account ID of the Security Hub administrator account associated with this member account.</p>
                */
            MasterId?: string;
            /**
                * <p>The Amazon Web Services account ID of the Security Hub administrator account associated with this member account.</p>
                */
            AdministratorId?: string;
            /**
                * <p>The status of the relationship between the member account and its administrator account.
                *       </p>
                *          <p>The status can have one of the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CREATED</code> - Indicates that the administrator account added the member account,
                *                but has not yet invited the member account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INVITED</code> - Indicates that the administrator account invited the member
                *                account. The member account has not yet responded to the invitation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ENABLED</code> - Indicates that the member account is currently active. For
                *                manually invited member accounts, indicates that the member account accepted the
                *                invitation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>REMOVED</code> - Indicates that the administrator account disassociated the member
                *                account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RESIGNED</code> - Indicates that the member account disassociated themselves
                *                from the administrator account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETED</code> - Indicates that the administrator account deleted the member
                *                account.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ACCOUNT_SUSPENDED</code> - Indicates that an organization account was suspended from Amazon Web Services at the same time that the administrator account tried to enable the organization account as a member account.</p>
                *             </li>
                *          </ul>
                */
            MemberStatus?: string;
            /**
                * <p>A timestamp for the date and time when the invitation was sent to the member
                *          account.</p>
                */
            InvitedAt?: Date;
            /**
                * <p>The timestamp for the date and time when the member account was updated.</p>
                */
            UpdatedAt?: Date;
    }
    export namespace Member {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Member) => any;
    }
    export interface GetMembersResponse {
            /**
                * <p>The list of details about the Security Hub member accounts.</p>
                */
            Members?: Member[];
            /**
                * <p>The list of Amazon Web Services accounts that could not be processed. For each account, the list
                *          includes the account ID and the email address.</p>
                */
            UnprocessedAccounts?: Result[];
    }
    export namespace GetMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMembersResponse) => any;
    }
    export interface InviteMembersRequest {
            /**
                * <p>The list of account IDs of the Amazon Web Services accounts to invite to Security Hub as members. </p>
                */
            AccountIds: string[] | undefined;
    }
    export namespace InviteMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InviteMembersRequest) => any;
    }
    export interface InviteMembersResponse {
            /**
                * <p>The list of Amazon Web Services accounts that could not be processed. For each account, the list
                *          includes the account ID and the email address.</p>
                */
            UnprocessedAccounts?: Result[];
    }
    export namespace InviteMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InviteMembersResponse) => any;
    }
    export interface ListEnabledProductsForImportRequest {
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>ListEnabledProductsForImport</code> operation, set the value of this parameter to
                *             <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return in the response.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEnabledProductsForImportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEnabledProductsForImportRequest) => any;
    }
    export interface ListEnabledProductsForImportResponse {
            /**
                * <p>The list of ARNs for the resources that represent your subscriptions to products. </p>
                */
            ProductSubscriptions?: string[];
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEnabledProductsForImportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEnabledProductsForImportResponse) => any;
    }
    export interface ListFindingAggregatorsRequest {
            /**
                * <p>The token returned with the previous set of results. Identifies the next set of results to return.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return. This operation currently only returns a single result.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFindingAggregatorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingAggregatorsRequest) => any;
    }
    export interface ListFindingAggregatorsResponse {
            /**
                * <p>The list of finding aggregators. This operation currently only returns a single result.</p>
                */
            FindingAggregators?: FindingAggregator[];
            /**
                * <p>If there are more results, this is the token to provide in the next call to <code>ListFindingAggregators</code>.</p>
                *          <p>This operation currently only returns a single result.
                *       </p>
                */
            NextToken?: string;
    }
    export namespace ListFindingAggregatorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFindingAggregatorsResponse) => any;
    }
    export interface ListInvitationsRequest {
            /**
                * <p>The maximum number of items to return in the response. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>ListInvitations</code> operation, set the value of this parameter to
                *             <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
    }
    export namespace ListInvitationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInvitationsRequest) => any;
    }
    export interface ListInvitationsResponse {
            /**
                * <p>The details of the invitations returned by the operation.</p>
                */
            Invitations?: Invitation[];
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListInvitationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInvitationsResponse) => any;
    }
    export interface ListMembersRequest {
            /**
                * <p>Specifies which member accounts to include in the response based on their relationship
                *          status with the administrator account. The default value is <code>TRUE</code>.</p>
                *          <p>If <code>OnlyAssociated</code> is set to <code>TRUE</code>, the response includes member
                *          accounts whose relationship status with the administrator account is set to <code>ENABLED</code>.</p>
                *          <p>If <code>OnlyAssociated</code> is set to <code>FALSE</code>, the response includes all
                *          existing member accounts. </p>
                */
            OnlyAssociated?: boolean;
            /**
                * <p>The maximum number of items to return in the response. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>ListMembers</code> operation, set the value of this parameter to
                *          <code>NULL</code>.</p>
                *          <p>For subsequent calls to the operation, to continue listing data, set the value of this
                *          parameter to the value returned from the previous response.</p>
                */
            NextToken?: string;
    }
    export namespace ListMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMembersRequest) => any;
    }
    export interface ListMembersResponse {
            /**
                * <p>Member details returned by the operation.</p>
                */
            Members?: Member[];
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMembersResponse) => any;
    }
    export interface ListOrganizationAdminAccountsRequest {
            /**
                * <p>The maximum number of items to return in the response.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token that is required for pagination. On your first call to the
                *             <code>ListOrganizationAdminAccounts</code> operation, set the value of this parameter to
                *             <code>NULL</code>. For subsequent calls to the operation, to continue listing data, set
                *          the value of this parameter to the value returned from the previous response. </p>
                */
            NextToken?: string;
    }
    export namespace ListOrganizationAdminAccountsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOrganizationAdminAccountsRequest) => any;
    }
    export interface ListOrganizationAdminAccountsResponse {
            /**
                * <p>The list of Security Hub administrator accounts.</p>
                */
            AdminAccounts?: AdminAccount[];
            /**
                * <p>The pagination token to use to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListOrganizationAdminAccountsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOrganizationAdminAccountsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource to retrieve tags for.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags associated with a resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_2' {
    import { AutoEnableStandards } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_0";
    import { AwsSecurityFindingFilters, ControlStatus, NoteUpdate, RecordState } from "@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/models_1";
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the resource to apply the tags to.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tags to add to the resource. You can add up to 50 tags at a time. The tag keys can be no longer than 128 characters. The tag values can be no longer than 256 characters.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the resource to remove the tags from.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag keys associated with the tags to remove from the resource. You can remove up to 50 tags at a time.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateActionTargetRequest {
            /**
                * <p>The ARN of the custom action target to update.</p>
                */
            ActionTargetArn: string | undefined;
            /**
                * <p>The updated name of the custom action target.</p>
                */
            Name?: string;
            /**
                * <p>The updated description for the custom action target.</p>
                */
            Description?: string;
    }
    export namespace UpdateActionTargetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateActionTargetRequest) => any;
    }
    export interface UpdateActionTargetResponse {
    }
    export namespace UpdateActionTargetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateActionTargetResponse) => any;
    }
    export interface UpdateFindingAggregatorRequest {
            /**
                * <p>The ARN of the finding aggregator. To obtain the ARN, use <code>ListFindingAggregators</code>.</p>
                */
            FindingAggregatorArn: string | undefined;
            /**
                * <p>Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.</p>
                *          <p>The selected option also determines how to use the Regions provided in the Regions list.</p>
                *          <p>The options are as follows:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALL_REGIONS</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ALL_REGIONS_EXCEPT_SPECIFIED</code> - Indicates to aggregate findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the <code>Regions</code> parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them.
                *          </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SPECIFIED_REGIONS</code> - Indicates to aggregate findings only from the Regions listed in the <code>Regions</code> parameter. Security Hub does not automatically aggregate findings from new Regions.
                *          </p>
                *             </li>
                *          </ul>
                */
            RegionLinkingMode: string | undefined;
            /**
                * <p>If <code>RegionLinkingMode</code> is <code>ALL_REGIONS_EXCEPT_SPECIFIED</code>, then this is a comma-separated list of Regions that do not aggregate findings to the aggregation Region.</p>
                *          <p>If <code>RegionLinkingMode</code> is <code>SPECIFIED_REGIONS</code>, then this is a comma-separated list of Regions that do aggregate findings to the aggregation Region.</p>
                */
            Regions?: string[];
    }
    export namespace UpdateFindingAggregatorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFindingAggregatorRequest) => any;
    }
    export interface UpdateFindingAggregatorResponse {
            /**
                * <p>The ARN of the finding aggregator.</p>
                */
            FindingAggregatorArn?: string;
            /**
                * <p>The aggregation Region.</p>
                */
            FindingAggregationRegion?: string;
            /**
                * <p>Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions.</p>
                */
            RegionLinkingMode?: string;
            /**
                * <p>The list of excluded Regions or included Regions.</p>
                */
            Regions?: string[];
    }
    export namespace UpdateFindingAggregatorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFindingAggregatorResponse) => any;
    }
    export interface UpdateFindingsRequest {
            /**
                * <p>A collection of attributes that specify which findings you want to update.</p>
                */
            Filters: AwsSecurityFindingFilters | undefined;
            /**
                * <p>The updated note for the finding.</p>
                */
            Note?: NoteUpdate;
            /**
                * <p>The updated record state for the finding.</p>
                */
            RecordState?: RecordState | string;
    }
    export namespace UpdateFindingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFindingsRequest) => any;
    }
    export interface UpdateFindingsResponse {
    }
    export namespace UpdateFindingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFindingsResponse) => any;
    }
    export interface UpdateInsightRequest {
            /**
                * <p>The ARN of the insight that you want to update.</p>
                */
            InsightArn: string | undefined;
            /**
                * <p>The updated name for the insight.</p>
                */
            Name?: string;
            /**
                * <p>The updated filters that define this insight.</p>
                */
            Filters?: AwsSecurityFindingFilters;
            /**
                * <p>The updated <code>GroupBy</code> attribute that defines this insight.</p>
                */
            GroupByAttribute?: string;
    }
    export namespace UpdateInsightRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateInsightRequest) => any;
    }
    export interface UpdateInsightResponse {
    }
    export namespace UpdateInsightResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateInsightResponse) => any;
    }
    export interface UpdateOrganizationConfigurationRequest {
            /**
                * <p>Whether to automatically enable Security Hub for new accounts in the organization.</p>
                *          <p>By default, this is <code>false</code>, and new accounts are not added
                *          automatically.</p>
                *          <p>To automatically enable Security Hub for new accounts, set this to <code>true</code>.</p>
                */
            AutoEnable: boolean | undefined;
            /**
                * <p>Whether to automatically enable Security Hub <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html">default standards</a>
                *          for new member accounts in the organization.</p>
                *          <p>By default, this parameter is equal to <code>DEFAULT</code>, and new member accounts are automatically enabled with default Security Hub standards.</p>
                *          <p>To opt out of enabling default standards for new member accounts, set this parameter equal to <code>NONE</code>.</p>
                */
            AutoEnableStandards?: AutoEnableStandards | string;
    }
    export namespace UpdateOrganizationConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOrganizationConfigurationRequest) => any;
    }
    export interface UpdateOrganizationConfigurationResponse {
    }
    export namespace UpdateOrganizationConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOrganizationConfigurationResponse) => any;
    }
    export interface UpdateSecurityHubConfigurationRequest {
            /**
                * <p>Whether to automatically enable new controls when they are added to standards that are
                *          enabled.</p>
                *          <p>By default, this is set to <code>true</code>, and new controls are enabled
                *          automatically. To not automatically enable new controls, set this to <code>false</code>.
                *       </p>
                */
            AutoEnableControls?: boolean;
    }
    export namespace UpdateSecurityHubConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecurityHubConfigurationRequest) => any;
    }
    export interface UpdateSecurityHubConfigurationResponse {
    }
    export namespace UpdateSecurityHubConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecurityHubConfigurationResponse) => any;
    }
    export interface UpdateStandardsControlRequest {
            /**
                * <p>The ARN of the security standard control to enable or disable.</p>
                */
            StandardsControlArn: string | undefined;
            /**
                * <p>The updated status of the security standard control.</p>
                */
            ControlStatus?: ControlStatus | string;
            /**
                * <p>A description of the reason why you are disabling a security standard control. If you
                *          are disabling a control, then this is required.</p>
                */
            DisabledReason?: string;
    }
    export namespace UpdateStandardsControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStandardsControlRequest) => any;
    }
    export interface UpdateStandardsControlResponse {
    }
    export namespace UpdateStandardsControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStandardsControlResponse) => any;
    }
}

declare module '@aws-sdk/client-securityhub/node_modules/@aws-sdk/client-securityhub/dist-types/models/SecurityHubServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SecurityHub service.
        */
    export class SecurityHubServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

