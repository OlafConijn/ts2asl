// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-budgets' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BudgetsClient } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { CreateBudgetActionCommandInput, CreateBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateBudgetActionCommand";
    import { CreateBudgetCommandInput, CreateBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateBudgetCommand";
    import { CreateNotificationCommandInput, CreateNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateNotificationCommand";
    import { CreateSubscriberCommandInput, CreateSubscriberCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateSubscriberCommand";
    import { DeleteBudgetActionCommandInput, DeleteBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteBudgetActionCommand";
    import { DeleteBudgetCommandInput, DeleteBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteBudgetCommand";
    import { DeleteNotificationCommandInput, DeleteNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteNotificationCommand";
    import { DeleteSubscriberCommandInput, DeleteSubscriberCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteSubscriberCommand";
    import { DescribeBudgetActionCommandInput, DescribeBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionCommand";
    import { DescribeBudgetActionHistoriesCommandInput, DescribeBudgetActionHistoriesCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionHistoriesCommand";
    import { DescribeBudgetActionsForAccountCommandInput, DescribeBudgetActionsForAccountCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionsForAccountCommand";
    import { DescribeBudgetActionsForBudgetCommandInput, DescribeBudgetActionsForBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionsForBudgetCommand";
    import { DescribeBudgetCommandInput, DescribeBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetCommand";
    import { DescribeBudgetNotificationsForAccountCommandInput, DescribeBudgetNotificationsForAccountCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetNotificationsForAccountCommand";
    import { DescribeBudgetPerformanceHistoryCommandInput, DescribeBudgetPerformanceHistoryCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetPerformanceHistoryCommand";
    import { DescribeBudgetsCommandInput, DescribeBudgetsCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetsCommand";
    import { DescribeNotificationsForBudgetCommandInput, DescribeNotificationsForBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeNotificationsForBudgetCommand";
    import { DescribeSubscribersForNotificationCommandInput, DescribeSubscribersForNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeSubscribersForNotificationCommand";
    import { ExecuteBudgetActionCommandInput, ExecuteBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/ExecuteBudgetActionCommand";
    import { UpdateBudgetActionCommandInput, UpdateBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateBudgetActionCommand";
    import { UpdateBudgetCommandInput, UpdateBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateBudgetCommand";
    import { UpdateNotificationCommandInput, UpdateNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateNotificationCommand";
    import { UpdateSubscriberCommandInput, UpdateSubscriberCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateSubscriberCommand";
    /**
        * <p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p>
        * 		       <p>Budgets provide you with a way to see the following information:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>How close your plan is to your budgeted amount or to the free tier limits</p>
        * 			         </li>
        *             <li>
        * 				           <p>Your usage-to-date, including how much you've used of your Reserved Instances (RIs)</p>
        * 			         </li>
        *             <li>
        * 				           <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p>
        * 			         </li>
        *             <li>
        * 				           <p>How much of your budget has been used</p>
        * 			         </li>
        *          </ul>
        * 		       <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>
        *                   <b>Cost budgets</b> - Plan how much you want to spend on a service.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <b>Usage budgets</b> - Plan how much you want to use one or more services.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p>
        * 			         </li>
        *          </ul>
        * 		       <p>Service Endpoint</p>
        * 	        <p>The Amazon Web Services Budgets API provides the following endpoint:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>https://budgets.amazonaws.com</p>
        * 			         </li>
        *          </ul>
        * 	        <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href="https://aws.amazon.com/aws-cost-management/pricing/">Amazon Web Services Cost Management Pricing</a>.</p>
        */
    export class Budgets extends BudgetsClient {
            /**
                * <p>Creates a budget and, if included, notifications and subscribers. </p>
                * 		       <important>
                * 			         <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_CreateBudget.html#API_CreateBudget_Examples">Examples</a> section. </p>
                * 		       </important>
                */
            createBudget(args: CreateBudgetCommandInput, options?: __HttpHandlerOptions): Promise<CreateBudgetCommandOutput>;
            createBudget(args: CreateBudgetCommandInput, cb: (err: any, data?: CreateBudgetCommandOutput) => void): void;
            createBudget(args: CreateBudgetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBudgetCommandOutput) => void): void;
            /**
                * <p>
                *          Creates a budget action.
                *       </p>
                */
            createBudgetAction(args: CreateBudgetActionCommandInput, options?: __HttpHandlerOptions): Promise<CreateBudgetActionCommandOutput>;
            createBudgetAction(args: CreateBudgetActionCommandInput, cb: (err: any, data?: CreateBudgetActionCommandOutput) => void): void;
            createBudgetAction(args: CreateBudgetActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBudgetActionCommandOutput) => void): void;
            /**
                * <p>Creates a notification. You must create the budget before you create the associated notification.</p>
                */
            createNotification(args: CreateNotificationCommandInput, options?: __HttpHandlerOptions): Promise<CreateNotificationCommandOutput>;
            createNotification(args: CreateNotificationCommandInput, cb: (err: any, data?: CreateNotificationCommandOutput) => void): void;
            createNotification(args: CreateNotificationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNotificationCommandOutput) => void): void;
            /**
                * <p>Creates a subscriber. You must create the associated budget and notification before you create the subscriber.</p>
                */
            createSubscriber(args: CreateSubscriberCommandInput, options?: __HttpHandlerOptions): Promise<CreateSubscriberCommandOutput>;
            createSubscriber(args: CreateSubscriberCommandInput, cb: (err: any, data?: CreateSubscriberCommandOutput) => void): void;
            createSubscriber(args: CreateSubscriberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSubscriberCommandOutput) => void): void;
            /**
                * <p>Deletes a budget. You can delete your budget at any time.</p>
                * 		       <important>
                * 			         <p>Deleting a budget also deletes the notifications and subscribers that are associated with that budget.</p>
                * 		       </important>
                */
            deleteBudget(args: DeleteBudgetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBudgetCommandOutput>;
            deleteBudget(args: DeleteBudgetCommandInput, cb: (err: any, data?: DeleteBudgetCommandOutput) => void): void;
            deleteBudget(args: DeleteBudgetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBudgetCommandOutput) => void): void;
            /**
                * <p>
                *          Deletes a budget action.
                *       </p>
                */
            deleteBudgetAction(args: DeleteBudgetActionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBudgetActionCommandOutput>;
            deleteBudgetAction(args: DeleteBudgetActionCommandInput, cb: (err: any, data?: DeleteBudgetActionCommandOutput) => void): void;
            deleteBudgetAction(args: DeleteBudgetActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBudgetActionCommandOutput) => void): void;
            /**
                * <p>Deletes a notification.</p>
                * 		       <important>
                * 			         <p>Deleting a notification also deletes the subscribers that are associated with the notification.</p>
                * 		       </important>
                */
            deleteNotification(args: DeleteNotificationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNotificationCommandOutput>;
            deleteNotification(args: DeleteNotificationCommandInput, cb: (err: any, data?: DeleteNotificationCommandOutput) => void): void;
            deleteNotification(args: DeleteNotificationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNotificationCommandOutput) => void): void;
            /**
                * <p>Deletes a subscriber.</p>
                * 		       <important>
                * 			         <p>Deleting the last subscriber to a notification also deletes the notification.</p>
                * 		       </important>
                */
            deleteSubscriber(args: DeleteSubscriberCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSubscriberCommandOutput>;
            deleteSubscriber(args: DeleteSubscriberCommandInput, cb: (err: any, data?: DeleteSubscriberCommandOutput) => void): void;
            deleteSubscriber(args: DeleteSubscriberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSubscriberCommandOutput) => void): void;
            /**
                * <p>Describes a budget.</p>
                * 		       <important>
                * 			         <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudget.html#API_DescribeBudget_Examples">Examples</a> section. </p>
                * 		       </important>
                */
            describeBudget(args: DescribeBudgetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetCommandOutput>;
            describeBudget(args: DescribeBudgetCommandInput, cb: (err: any, data?: DescribeBudgetCommandOutput) => void): void;
            describeBudget(args: DescribeBudgetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetCommandOutput) => void): void;
            /**
                * <p>
                *          Describes a budget action detail.
                *       </p>
                */
            describeBudgetAction(args: DescribeBudgetActionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetActionCommandOutput>;
            describeBudgetAction(args: DescribeBudgetActionCommandInput, cb: (err: any, data?: DescribeBudgetActionCommandOutput) => void): void;
            describeBudgetAction(args: DescribeBudgetActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetActionCommandOutput) => void): void;
            /**
                * <p>
                *          Describes a budget action history detail.
                *       </p>
                */
            describeBudgetActionHistories(args: DescribeBudgetActionHistoriesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetActionHistoriesCommandOutput>;
            describeBudgetActionHistories(args: DescribeBudgetActionHistoriesCommandInput, cb: (err: any, data?: DescribeBudgetActionHistoriesCommandOutput) => void): void;
            describeBudgetActionHistories(args: DescribeBudgetActionHistoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetActionHistoriesCommandOutput) => void): void;
            /**
                * <p>
                *          Describes all of the budget actions for an account.
                *       </p>
                */
            describeBudgetActionsForAccount(args: DescribeBudgetActionsForAccountCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetActionsForAccountCommandOutput>;
            describeBudgetActionsForAccount(args: DescribeBudgetActionsForAccountCommandInput, cb: (err: any, data?: DescribeBudgetActionsForAccountCommandOutput) => void): void;
            describeBudgetActionsForAccount(args: DescribeBudgetActionsForAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetActionsForAccountCommandOutput) => void): void;
            /**
                * <p>
                *          Describes all of the budget actions for a budget.
                *       </p>
                */
            describeBudgetActionsForBudget(args: DescribeBudgetActionsForBudgetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetActionsForBudgetCommandOutput>;
            describeBudgetActionsForBudget(args: DescribeBudgetActionsForBudgetCommandInput, cb: (err: any, data?: DescribeBudgetActionsForBudgetCommandOutput) => void): void;
            describeBudgetActionsForBudget(args: DescribeBudgetActionsForBudgetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetActionsForBudgetCommandOutput) => void): void;
            /**
                * <p>
                * 			Lists the budget names and notifications that are associated with an account.
                * 		</p>
                */
            describeBudgetNotificationsForAccount(args: DescribeBudgetNotificationsForAccountCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetNotificationsForAccountCommandOutput>;
            describeBudgetNotificationsForAccount(args: DescribeBudgetNotificationsForAccountCommandInput, cb: (err: any, data?: DescribeBudgetNotificationsForAccountCommandOutput) => void): void;
            describeBudgetNotificationsForAccount(args: DescribeBudgetNotificationsForAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetNotificationsForAccountCommandOutput) => void): void;
            /**
                * <p>Describes the history for <code>DAILY</code>, <code>MONTHLY</code>, and <code>QUARTERLY</code> budgets. Budget history isn't available for <code>ANNUAL</code> budgets.</p>
                */
            describeBudgetPerformanceHistory(args: DescribeBudgetPerformanceHistoryCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetPerformanceHistoryCommandOutput>;
            describeBudgetPerformanceHistory(args: DescribeBudgetPerformanceHistoryCommandInput, cb: (err: any, data?: DescribeBudgetPerformanceHistoryCommandOutput) => void): void;
            describeBudgetPerformanceHistory(args: DescribeBudgetPerformanceHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetPerformanceHistoryCommandOutput) => void): void;
            /**
                * <p>Lists the budgets that are associated with an account.</p>
                * 		       <important>
                * 			         <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudgets.html#API_DescribeBudgets_Examples">Examples</a> section. </p>
                * 		       </important>
                */
            describeBudgets(args: DescribeBudgetsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBudgetsCommandOutput>;
            describeBudgets(args: DescribeBudgetsCommandInput, cb: (err: any, data?: DescribeBudgetsCommandOutput) => void): void;
            describeBudgets(args: DescribeBudgetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBudgetsCommandOutput) => void): void;
            /**
                * <p>Lists the notifications that are associated with a budget.</p>
                */
            describeNotificationsForBudget(args: DescribeNotificationsForBudgetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNotificationsForBudgetCommandOutput>;
            describeNotificationsForBudget(args: DescribeNotificationsForBudgetCommandInput, cb: (err: any, data?: DescribeNotificationsForBudgetCommandOutput) => void): void;
            describeNotificationsForBudget(args: DescribeNotificationsForBudgetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNotificationsForBudgetCommandOutput) => void): void;
            /**
                * <p>Lists the subscribers that are associated with a notification.</p>
                */
            describeSubscribersForNotification(args: DescribeSubscribersForNotificationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSubscribersForNotificationCommandOutput>;
            describeSubscribersForNotification(args: DescribeSubscribersForNotificationCommandInput, cb: (err: any, data?: DescribeSubscribersForNotificationCommandOutput) => void): void;
            describeSubscribersForNotification(args: DescribeSubscribersForNotificationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSubscribersForNotificationCommandOutput) => void): void;
            /**
                * <p>
                *          Executes a budget action.
                *       </p>
                */
            executeBudgetAction(args: ExecuteBudgetActionCommandInput, options?: __HttpHandlerOptions): Promise<ExecuteBudgetActionCommandOutput>;
            executeBudgetAction(args: ExecuteBudgetActionCommandInput, cb: (err: any, data?: ExecuteBudgetActionCommandOutput) => void): void;
            executeBudgetAction(args: ExecuteBudgetActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExecuteBudgetActionCommandOutput) => void): void;
            /**
                * <p>Updates a budget. You can change every part of a budget except for the <code>budgetName</code> and the <code>calculatedSpend</code>. When you modify a budget, the <code>calculatedSpend</code> drops to zero until Amazon Web Services has new usage data to use for forecasting.</p>
                * 		       <important>
                * 			         <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_UpdateBudget.html#API_UpdateBudget_Examples">Examples</a> section. </p>
                * 		       </important>
                */
            updateBudget(args: UpdateBudgetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBudgetCommandOutput>;
            updateBudget(args: UpdateBudgetCommandInput, cb: (err: any, data?: UpdateBudgetCommandOutput) => void): void;
            updateBudget(args: UpdateBudgetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBudgetCommandOutput) => void): void;
            /**
                * <p>
                *          Updates a budget action.
                *       </p>
                */
            updateBudgetAction(args: UpdateBudgetActionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBudgetActionCommandOutput>;
            updateBudgetAction(args: UpdateBudgetActionCommandInput, cb: (err: any, data?: UpdateBudgetActionCommandOutput) => void): void;
            updateBudgetAction(args: UpdateBudgetActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBudgetActionCommandOutput) => void): void;
            /**
                * <p>Updates a notification.</p>
                */
            updateNotification(args: UpdateNotificationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNotificationCommandOutput>;
            updateNotification(args: UpdateNotificationCommandInput, cb: (err: any, data?: UpdateNotificationCommandOutput) => void): void;
            updateNotification(args: UpdateNotificationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNotificationCommandOutput) => void): void;
            /**
                * <p>Updates a subscriber.</p>
                */
            updateSubscriber(args: UpdateSubscriberCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSubscriberCommandOutput>;
            updateSubscriber(args: UpdateSubscriberCommandInput, cb: (err: any, data?: UpdateSubscriberCommandOutput) => void): void;
            updateSubscriber(args: UpdateSubscriberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSubscriberCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateBudgetActionCommandInput, CreateBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateBudgetActionCommand";
    import { CreateBudgetCommandInput, CreateBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateBudgetCommand";
    import { CreateNotificationCommandInput, CreateNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateNotificationCommand";
    import { CreateSubscriberCommandInput, CreateSubscriberCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateSubscriberCommand";
    import { DeleteBudgetActionCommandInput, DeleteBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteBudgetActionCommand";
    import { DeleteBudgetCommandInput, DeleteBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteBudgetCommand";
    import { DeleteNotificationCommandInput, DeleteNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteNotificationCommand";
    import { DeleteSubscriberCommandInput, DeleteSubscriberCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteSubscriberCommand";
    import { DescribeBudgetActionCommandInput, DescribeBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionCommand";
    import { DescribeBudgetActionHistoriesCommandInput, DescribeBudgetActionHistoriesCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionHistoriesCommand";
    import { DescribeBudgetActionsForAccountCommandInput, DescribeBudgetActionsForAccountCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionsForAccountCommand";
    import { DescribeBudgetActionsForBudgetCommandInput, DescribeBudgetActionsForBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionsForBudgetCommand";
    import { DescribeBudgetCommandInput, DescribeBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetCommand";
    import { DescribeBudgetNotificationsForAccountCommandInput, DescribeBudgetNotificationsForAccountCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetNotificationsForAccountCommand";
    import { DescribeBudgetPerformanceHistoryCommandInput, DescribeBudgetPerformanceHistoryCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetPerformanceHistoryCommand";
    import { DescribeBudgetsCommandInput, DescribeBudgetsCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetsCommand";
    import { DescribeNotificationsForBudgetCommandInput, DescribeNotificationsForBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeNotificationsForBudgetCommand";
    import { DescribeSubscribersForNotificationCommandInput, DescribeSubscribersForNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeSubscribersForNotificationCommand";
    import { ExecuteBudgetActionCommandInput, ExecuteBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/ExecuteBudgetActionCommand";
    import { UpdateBudgetActionCommandInput, UpdateBudgetActionCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateBudgetActionCommand";
    import { UpdateBudgetCommandInput, UpdateBudgetCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateBudgetCommand";
    import { UpdateNotificationCommandInput, UpdateNotificationCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateNotificationCommand";
    import { UpdateSubscriberCommandInput, UpdateSubscriberCommandOutput } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateSubscriberCommand";
    export type ServiceInputTypes = CreateBudgetActionCommandInput | CreateBudgetCommandInput | CreateNotificationCommandInput | CreateSubscriberCommandInput | DeleteBudgetActionCommandInput | DeleteBudgetCommandInput | DeleteNotificationCommandInput | DeleteSubscriberCommandInput | DescribeBudgetActionCommandInput | DescribeBudgetActionHistoriesCommandInput | DescribeBudgetActionsForAccountCommandInput | DescribeBudgetActionsForBudgetCommandInput | DescribeBudgetCommandInput | DescribeBudgetNotificationsForAccountCommandInput | DescribeBudgetPerformanceHistoryCommandInput | DescribeBudgetsCommandInput | DescribeNotificationsForBudgetCommandInput | DescribeSubscribersForNotificationCommandInput | ExecuteBudgetActionCommandInput | UpdateBudgetActionCommandInput | UpdateBudgetCommandInput | UpdateNotificationCommandInput | UpdateSubscriberCommandInput;
    export type ServiceOutputTypes = CreateBudgetActionCommandOutput | CreateBudgetCommandOutput | CreateNotificationCommandOutput | CreateSubscriberCommandOutput | DeleteBudgetActionCommandOutput | DeleteBudgetCommandOutput | DeleteNotificationCommandOutput | DeleteSubscriberCommandOutput | DescribeBudgetActionCommandOutput | DescribeBudgetActionHistoriesCommandOutput | DescribeBudgetActionsForAccountCommandOutput | DescribeBudgetActionsForBudgetCommandOutput | DescribeBudgetCommandOutput | DescribeBudgetNotificationsForAccountCommandOutput | DescribeBudgetPerformanceHistoryCommandOutput | DescribeBudgetsCommandOutput | DescribeNotificationsForBudgetCommandOutput | DescribeSubscribersForNotificationCommandOutput | ExecuteBudgetActionCommandOutput | UpdateBudgetActionCommandOutput | UpdateBudgetCommandOutput | UpdateNotificationCommandOutput | UpdateSubscriberCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type BudgetsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of BudgetsClient class constructor that set the region, credentials and other options.
        */
    export interface BudgetsClientConfig extends BudgetsClientConfigType {
    }
    type BudgetsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of BudgetsClient class. This is resolved and normalized from the {@link BudgetsClientConfig | constructor configuration interface}.
        */
    export interface BudgetsClientResolvedConfig extends BudgetsClientResolvedConfigType {
    }
    /**
        * <p>Use the Amazon Web Services Budgets API to plan your service usage, service costs, and instance reservations. This API reference provides descriptions, syntax, and usage examples for each of the actions and data types for the Amazon Web Services Budgets feature. </p>
        * 		       <p>Budgets provide you with a way to see the following information:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>How close your plan is to your budgeted amount or to the free tier limits</p>
        * 			         </li>
        *             <li>
        * 				           <p>Your usage-to-date, including how much you've used of your Reserved Instances (RIs)</p>
        * 			         </li>
        *             <li>
        * 				           <p>Your current estimated charges from Amazon Web Services, and how much your predicted usage will accrue in charges by the end of the month</p>
        * 			         </li>
        *             <li>
        * 				           <p>How much of your budget has been used</p>
        * 			         </li>
        *          </ul>
        * 		       <p>Amazon Web Services updates your budget status several times a day. Budgets track your unblended costs, subscriptions, refunds, and RIs. You can create the following types of budgets:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>
        *                   <b>Cost budgets</b> - Plan how much you want to spend on a service.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <b>Usage budgets</b> - Plan how much you want to use one or more services.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <b>RI utilization budgets</b> - Define a utilization threshold, and receive alerts when your RI usage falls below that threshold. This lets you see if your RIs are unused or under-utilized.</p>
        * 			         </li>
        *             <li>
        * 				           <p>
        *                   <b>RI coverage budgets</b> - Define a coverage threshold, and receive alerts when the number of your instance hours that are covered by RIs fall below that threshold. This lets you see how much of your instance usage is covered by a reservation.</p>
        * 			         </li>
        *          </ul>
        * 		       <p>Service Endpoint</p>
        * 	        <p>The Amazon Web Services Budgets API provides the following endpoint:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>https://budgets.amazonaws.com</p>
        * 			         </li>
        *          </ul>
        * 	        <p>For information about costs that are associated with the Amazon Web Services Budgets API, see <a href="https://aws.amazon.com/aws-cost-management/pricing/">Amazon Web Services Cost Management Pricing</a>.</p>
        */
    export class BudgetsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, BudgetsClientResolvedConfig> {
            /**
                * The resolved configuration of BudgetsClient class. This is resolved and normalized from the {@link BudgetsClientConfig | constructor configuration interface}.
                */
            readonly config: BudgetsClientResolvedConfig;
            constructor(configuration: BudgetsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateBudgetActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { CreateBudgetActionRequest, CreateBudgetActionResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface CreateBudgetActionCommandInput extends CreateBudgetActionRequest {
    }
    export interface CreateBudgetActionCommandOutput extends CreateBudgetActionResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Creates a budget action.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, CreateBudgetActionCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, CreateBudgetActionCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new CreateBudgetActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBudgetActionCommandInput} for command's `input` shape.
        * @see {@link CreateBudgetActionCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class CreateBudgetActionCommand extends $Command<CreateBudgetActionCommandInput, CreateBudgetActionCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: CreateBudgetActionCommandInput;
            constructor(input: CreateBudgetActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBudgetActionCommandInput, CreateBudgetActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateBudgetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { CreateBudgetRequest, CreateBudgetResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface CreateBudgetCommandInput extends CreateBudgetRequest {
    }
    export interface CreateBudgetCommandOutput extends CreateBudgetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a budget and, if included, notifications and subscribers. </p>
        * 		       <important>
        * 			         <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_CreateBudget.html#API_CreateBudget_Examples">Examples</a> section. </p>
        * 		       </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, CreateBudgetCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, CreateBudgetCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new CreateBudgetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBudgetCommandInput} for command's `input` shape.
        * @see {@link CreateBudgetCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class CreateBudgetCommand extends $Command<CreateBudgetCommandInput, CreateBudgetCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: CreateBudgetCommandInput;
            constructor(input: CreateBudgetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBudgetCommandInput, CreateBudgetCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateNotificationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { CreateNotificationRequest, CreateNotificationResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface CreateNotificationCommandInput extends CreateNotificationRequest {
    }
    export interface CreateNotificationCommandOutput extends CreateNotificationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a notification. You must create the budget before you create the associated notification.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, CreateNotificationCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, CreateNotificationCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new CreateNotificationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNotificationCommandInput} for command's `input` shape.
        * @see {@link CreateNotificationCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class CreateNotificationCommand extends $Command<CreateNotificationCommandInput, CreateNotificationCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: CreateNotificationCommandInput;
            constructor(input: CreateNotificationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNotificationCommandInput, CreateNotificationCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/CreateSubscriberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { CreateSubscriberRequest, CreateSubscriberResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface CreateSubscriberCommandInput extends CreateSubscriberRequest {
    }
    export interface CreateSubscriberCommandOutput extends CreateSubscriberResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a subscriber. You must create the associated budget and notification before you create the subscriber.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, CreateSubscriberCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, CreateSubscriberCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new CreateSubscriberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSubscriberCommandInput} for command's `input` shape.
        * @see {@link CreateSubscriberCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class CreateSubscriberCommand extends $Command<CreateSubscriberCommandInput, CreateSubscriberCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: CreateSubscriberCommandInput;
            constructor(input: CreateSubscriberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSubscriberCommandInput, CreateSubscriberCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteBudgetActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DeleteBudgetActionRequest, DeleteBudgetActionResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DeleteBudgetActionCommandInput extends DeleteBudgetActionRequest {
    }
    export interface DeleteBudgetActionCommandOutput extends DeleteBudgetActionResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Deletes a budget action.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DeleteBudgetActionCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DeleteBudgetActionCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DeleteBudgetActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBudgetActionCommandInput} for command's `input` shape.
        * @see {@link DeleteBudgetActionCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DeleteBudgetActionCommand extends $Command<DeleteBudgetActionCommandInput, DeleteBudgetActionCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DeleteBudgetActionCommandInput;
            constructor(input: DeleteBudgetActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBudgetActionCommandInput, DeleteBudgetActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteBudgetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DeleteBudgetRequest, DeleteBudgetResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DeleteBudgetCommandInput extends DeleteBudgetRequest {
    }
    export interface DeleteBudgetCommandOutput extends DeleteBudgetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a budget. You can delete your budget at any time.</p>
        * 		       <important>
        * 			         <p>Deleting a budget also deletes the notifications and subscribers that are associated with that budget.</p>
        * 		       </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DeleteBudgetCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DeleteBudgetCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DeleteBudgetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBudgetCommandInput} for command's `input` shape.
        * @see {@link DeleteBudgetCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DeleteBudgetCommand extends $Command<DeleteBudgetCommandInput, DeleteBudgetCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DeleteBudgetCommandInput;
            constructor(input: DeleteBudgetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBudgetCommandInput, DeleteBudgetCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteNotificationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DeleteNotificationRequest, DeleteNotificationResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DeleteNotificationCommandInput extends DeleteNotificationRequest {
    }
    export interface DeleteNotificationCommandOutput extends DeleteNotificationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a notification.</p>
        * 		       <important>
        * 			         <p>Deleting a notification also deletes the subscribers that are associated with the notification.</p>
        * 		       </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DeleteNotificationCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DeleteNotificationCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DeleteNotificationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNotificationCommandInput} for command's `input` shape.
        * @see {@link DeleteNotificationCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DeleteNotificationCommand extends $Command<DeleteNotificationCommandInput, DeleteNotificationCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DeleteNotificationCommandInput;
            constructor(input: DeleteNotificationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNotificationCommandInput, DeleteNotificationCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DeleteSubscriberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DeleteSubscriberRequest, DeleteSubscriberResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DeleteSubscriberCommandInput extends DeleteSubscriberRequest {
    }
    export interface DeleteSubscriberCommandOutput extends DeleteSubscriberResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a subscriber.</p>
        * 		       <important>
        * 			         <p>Deleting the last subscriber to a notification also deletes the notification.</p>
        * 		       </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DeleteSubscriberCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DeleteSubscriberCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DeleteSubscriberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSubscriberCommandInput} for command's `input` shape.
        * @see {@link DeleteSubscriberCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DeleteSubscriberCommand extends $Command<DeleteSubscriberCommandInput, DeleteSubscriberCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DeleteSubscriberCommandInput;
            constructor(input: DeleteSubscriberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSubscriberCommandInput, DeleteSubscriberCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetActionRequest, DescribeBudgetActionResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetActionCommandInput extends DescribeBudgetActionRequest {
    }
    export interface DescribeBudgetActionCommandOutput extends DescribeBudgetActionResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Describes a budget action detail.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetActionCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetActionCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetActionCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetActionCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetActionCommand extends $Command<DescribeBudgetActionCommandInput, DescribeBudgetActionCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetActionCommandInput;
            constructor(input: DescribeBudgetActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetActionCommandInput, DescribeBudgetActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionHistoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetActionHistoriesRequest, DescribeBudgetActionHistoriesResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetActionHistoriesCommandInput extends DescribeBudgetActionHistoriesRequest {
    }
    export interface DescribeBudgetActionHistoriesCommandOutput extends DescribeBudgetActionHistoriesResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Describes a budget action history detail.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetActionHistoriesCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetActionHistoriesCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetActionHistoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetActionHistoriesCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetActionHistoriesCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetActionHistoriesCommand extends $Command<DescribeBudgetActionHistoriesCommandInput, DescribeBudgetActionHistoriesCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetActionHistoriesCommandInput;
            constructor(input: DescribeBudgetActionHistoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetActionHistoriesCommandInput, DescribeBudgetActionHistoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionsForAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetActionsForAccountRequest, DescribeBudgetActionsForAccountResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetActionsForAccountCommandInput extends DescribeBudgetActionsForAccountRequest {
    }
    export interface DescribeBudgetActionsForAccountCommandOutput extends DescribeBudgetActionsForAccountResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Describes all of the budget actions for an account.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetActionsForAccountCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetActionsForAccountCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetActionsForAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetActionsForAccountCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetActionsForAccountCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetActionsForAccountCommand extends $Command<DescribeBudgetActionsForAccountCommandInput, DescribeBudgetActionsForAccountCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetActionsForAccountCommandInput;
            constructor(input: DescribeBudgetActionsForAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetActionsForAccountCommandInput, DescribeBudgetActionsForAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetActionsForBudgetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetActionsForBudgetRequest, DescribeBudgetActionsForBudgetResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetActionsForBudgetCommandInput extends DescribeBudgetActionsForBudgetRequest {
    }
    export interface DescribeBudgetActionsForBudgetCommandOutput extends DescribeBudgetActionsForBudgetResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Describes all of the budget actions for a budget.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetActionsForBudgetCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetActionsForBudgetCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetActionsForBudgetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetActionsForBudgetCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetActionsForBudgetCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetActionsForBudgetCommand extends $Command<DescribeBudgetActionsForBudgetCommandInput, DescribeBudgetActionsForBudgetCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetActionsForBudgetCommandInput;
            constructor(input: DescribeBudgetActionsForBudgetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetActionsForBudgetCommandInput, DescribeBudgetActionsForBudgetCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetRequest, DescribeBudgetResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetCommandInput extends DescribeBudgetRequest {
    }
    export interface DescribeBudgetCommandOutput extends DescribeBudgetResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a budget.</p>
        * 		       <important>
        * 			         <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudget.html#API_DescribeBudget_Examples">Examples</a> section. </p>
        * 		       </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetCommand extends $Command<DescribeBudgetCommandInput, DescribeBudgetCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetCommandInput;
            constructor(input: DescribeBudgetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetCommandInput, DescribeBudgetCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetNotificationsForAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetNotificationsForAccountRequest, DescribeBudgetNotificationsForAccountResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetNotificationsForAccountCommandInput extends DescribeBudgetNotificationsForAccountRequest {
    }
    export interface DescribeBudgetNotificationsForAccountCommandOutput extends DescribeBudgetNotificationsForAccountResponse, __MetadataBearer {
    }
    /**
        * <p>
        * 			Lists the budget names and notifications that are associated with an account.
        * 		</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetNotificationsForAccountCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetNotificationsForAccountCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetNotificationsForAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetNotificationsForAccountCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetNotificationsForAccountCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetNotificationsForAccountCommand extends $Command<DescribeBudgetNotificationsForAccountCommandInput, DescribeBudgetNotificationsForAccountCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetNotificationsForAccountCommandInput;
            constructor(input: DescribeBudgetNotificationsForAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetNotificationsForAccountCommandInput, DescribeBudgetNotificationsForAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetPerformanceHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetPerformanceHistoryRequest, DescribeBudgetPerformanceHistoryResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetPerformanceHistoryCommandInput extends DescribeBudgetPerformanceHistoryRequest {
    }
    export interface DescribeBudgetPerformanceHistoryCommandOutput extends DescribeBudgetPerformanceHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the history for <code>DAILY</code>, <code>MONTHLY</code>, and <code>QUARTERLY</code> budgets. Budget history isn't available for <code>ANNUAL</code> budgets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetPerformanceHistoryCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetPerformanceHistoryCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetPerformanceHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetPerformanceHistoryCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetPerformanceHistoryCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetPerformanceHistoryCommand extends $Command<DescribeBudgetPerformanceHistoryCommandInput, DescribeBudgetPerformanceHistoryCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetPerformanceHistoryCommandInput;
            constructor(input: DescribeBudgetPerformanceHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetPerformanceHistoryCommandInput, DescribeBudgetPerformanceHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeBudgetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeBudgetsRequest, DescribeBudgetsResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeBudgetsCommandInput extends DescribeBudgetsRequest {
    }
    export interface DescribeBudgetsCommandOutput extends DescribeBudgetsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the budgets that are associated with an account.</p>
        * 		       <important>
        * 			         <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudgets.html#API_DescribeBudgets_Examples">Examples</a> section. </p>
        * 		       </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeBudgetsCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeBudgetsCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeBudgetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBudgetsCommandInput} for command's `input` shape.
        * @see {@link DescribeBudgetsCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeBudgetsCommand extends $Command<DescribeBudgetsCommandInput, DescribeBudgetsCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeBudgetsCommandInput;
            constructor(input: DescribeBudgetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBudgetsCommandInput, DescribeBudgetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeNotificationsForBudgetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeNotificationsForBudgetRequest, DescribeNotificationsForBudgetResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeNotificationsForBudgetCommandInput extends DescribeNotificationsForBudgetRequest {
    }
    export interface DescribeNotificationsForBudgetCommandOutput extends DescribeNotificationsForBudgetResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the notifications that are associated with a budget.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeNotificationsForBudgetCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeNotificationsForBudgetCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeNotificationsForBudgetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNotificationsForBudgetCommandInput} for command's `input` shape.
        * @see {@link DescribeNotificationsForBudgetCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeNotificationsForBudgetCommand extends $Command<DescribeNotificationsForBudgetCommandInput, DescribeNotificationsForBudgetCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeNotificationsForBudgetCommandInput;
            constructor(input: DescribeNotificationsForBudgetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNotificationsForBudgetCommandInput, DescribeNotificationsForBudgetCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/DescribeSubscribersForNotificationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { DescribeSubscribersForNotificationRequest, DescribeSubscribersForNotificationResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface DescribeSubscribersForNotificationCommandInput extends DescribeSubscribersForNotificationRequest {
    }
    export interface DescribeSubscribersForNotificationCommandOutput extends DescribeSubscribersForNotificationResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the subscribers that are associated with a notification.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, DescribeSubscribersForNotificationCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, DescribeSubscribersForNotificationCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new DescribeSubscribersForNotificationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSubscribersForNotificationCommandInput} for command's `input` shape.
        * @see {@link DescribeSubscribersForNotificationCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class DescribeSubscribersForNotificationCommand extends $Command<DescribeSubscribersForNotificationCommandInput, DescribeSubscribersForNotificationCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: DescribeSubscribersForNotificationCommandInput;
            constructor(input: DescribeSubscribersForNotificationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSubscribersForNotificationCommandInput, DescribeSubscribersForNotificationCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/ExecuteBudgetActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { ExecuteBudgetActionRequest, ExecuteBudgetActionResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface ExecuteBudgetActionCommandInput extends ExecuteBudgetActionRequest {
    }
    export interface ExecuteBudgetActionCommandOutput extends ExecuteBudgetActionResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Executes a budget action.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, ExecuteBudgetActionCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, ExecuteBudgetActionCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new ExecuteBudgetActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExecuteBudgetActionCommandInput} for command's `input` shape.
        * @see {@link ExecuteBudgetActionCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class ExecuteBudgetActionCommand extends $Command<ExecuteBudgetActionCommandInput, ExecuteBudgetActionCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: ExecuteBudgetActionCommandInput;
            constructor(input: ExecuteBudgetActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExecuteBudgetActionCommandInput, ExecuteBudgetActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateBudgetActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { UpdateBudgetActionRequest, UpdateBudgetActionResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface UpdateBudgetActionCommandInput extends UpdateBudgetActionRequest {
    }
    export interface UpdateBudgetActionCommandOutput extends UpdateBudgetActionResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Updates a budget action.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, UpdateBudgetActionCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, UpdateBudgetActionCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new UpdateBudgetActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBudgetActionCommandInput} for command's `input` shape.
        * @see {@link UpdateBudgetActionCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class UpdateBudgetActionCommand extends $Command<UpdateBudgetActionCommandInput, UpdateBudgetActionCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: UpdateBudgetActionCommandInput;
            constructor(input: UpdateBudgetActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBudgetActionCommandInput, UpdateBudgetActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateBudgetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { UpdateBudgetRequest, UpdateBudgetResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface UpdateBudgetCommandInput extends UpdateBudgetRequest {
    }
    export interface UpdateBudgetCommandOutput extends UpdateBudgetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a budget. You can change every part of a budget except for the <code>budgetName</code> and the <code>calculatedSpend</code>. When you modify a budget, the <code>calculatedSpend</code> drops to zero until Amazon Web Services has new usage data to use for forecasting.</p>
        * 		       <important>
        * 			         <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_UpdateBudget.html#API_UpdateBudget_Examples">Examples</a> section. </p>
        * 		       </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, UpdateBudgetCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, UpdateBudgetCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new UpdateBudgetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBudgetCommandInput} for command's `input` shape.
        * @see {@link UpdateBudgetCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class UpdateBudgetCommand extends $Command<UpdateBudgetCommandInput, UpdateBudgetCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: UpdateBudgetCommandInput;
            constructor(input: UpdateBudgetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBudgetCommandInput, UpdateBudgetCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateNotificationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { UpdateNotificationRequest, UpdateNotificationResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface UpdateNotificationCommandInput extends UpdateNotificationRequest {
    }
    export interface UpdateNotificationCommandOutput extends UpdateNotificationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a notification.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, UpdateNotificationCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, UpdateNotificationCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new UpdateNotificationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNotificationCommandInput} for command's `input` shape.
        * @see {@link UpdateNotificationCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class UpdateNotificationCommand extends $Command<UpdateNotificationCommandInput, UpdateNotificationCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: UpdateNotificationCommandInput;
            constructor(input: UpdateNotificationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNotificationCommandInput, UpdateNotificationCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/commands/UpdateSubscriberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BudgetsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/BudgetsClient";
    import { UpdateSubscriberRequest, UpdateSubscriberResponse } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0";
    export interface UpdateSubscriberCommandInput extends UpdateSubscriberRequest {
    }
    export interface UpdateSubscriberCommandOutput extends UpdateSubscriberResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a subscriber.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { BudgetsClient, UpdateSubscriberCommand } from "@aws-sdk/client-budgets"; // ES Modules import
        * // const { BudgetsClient, UpdateSubscriberCommand } = require("@aws-sdk/client-budgets"); // CommonJS import
        * const client = new BudgetsClient(config);
        * const command = new UpdateSubscriberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSubscriberCommandInput} for command's `input` shape.
        * @see {@link UpdateSubscriberCommandOutput} for command's `response` shape.
        * @see {@link BudgetsClientResolvedConfig | config} for BudgetsClient's `config` shape.
        *
        */
    export class UpdateSubscriberCommand extends $Command<UpdateSubscriberCommandInput, UpdateSubscriberCommandOutput, BudgetsClientResolvedConfig> {
            readonly input: UpdateSubscriberCommandInput;
            constructor(input: UpdateSubscriberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: BudgetsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSubscriberCommandInput, UpdateSubscriberCommandOutput>;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { BudgetsServiceException as __BaseException } from "@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/BudgetsServiceException";
    /**
        * <p>You are not authorized to use this operation with the given parameters.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum ThresholdType {
            ABSOLUTE_VALUE = "ABSOLUTE_VALUE",
            PERCENTAGE = "PERCENTAGE"
    }
    /**
        * <p>The trigger threshold of the action. </p>
        */
    export interface ActionThreshold {
            /**
                * <p> The threshold of a notification.</p>
                */
            ActionThresholdValue: number | undefined;
            /**
                * <p> The type of threshold for a notification.</p>
                */
            ActionThresholdType: ThresholdType | string | undefined;
    }
    export namespace ActionThreshold {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionThreshold) => any;
    }
    export enum ActionType {
            IAM = "APPLY_IAM_POLICY",
            SCP = "APPLY_SCP_POLICY",
            SSM = "RUN_SSM_DOCUMENTS"
    }
    export enum ApprovalModel {
            AUTO = "AUTOMATIC",
            MANUAL = "MANUAL"
    }
    /**
        * <p>The Identity and Access Management (IAM) action definition details. </p>
        */
    export interface IamActionDefinition {
            /**
                * <p>The Amazon Resource Name (ARN) of the policy to be attached. </p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>A list of roles to be attached. There must be at least one role. </p>
                */
            Roles?: string[];
            /**
                * <p>A list of groups to be attached. There must be at least one group. </p>
                */
            Groups?: string[];
            /**
                * <p>A list of users to be attached. There must be at least one user. </p>
                */
            Users?: string[];
    }
    export namespace IamActionDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IamActionDefinition) => any;
    }
    /**
        * <p>The service control policies (SCP) action definition details. </p>
        */
    export interface ScpActionDefinition {
            /**
                * <p>The policy ID attached. </p>
                */
            PolicyId: string | undefined;
            /**
                * <p>A list of target IDs. </p>
                */
            TargetIds: string[] | undefined;
    }
    export namespace ScpActionDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScpActionDefinition) => any;
    }
    export enum ActionSubType {
            STOP_EC2 = "STOP_EC2_INSTANCES",
            STOP_RDS = "STOP_RDS_INSTANCES"
    }
    /**
        * <p>The Amazon Web Services Systems Manager (SSM) action definition details. </p>
        */
    export interface SsmActionDefinition {
            /**
                * <p>The action subType. </p>
                */
            ActionSubType: ActionSubType | string | undefined;
            /**
                * <p>The Region to run the SSM document. </p>
                */
            Region: string | undefined;
            /**
                * <p>The EC2 and RDS instance IDs. </p>
                */
            InstanceIds: string[] | undefined;
    }
    export namespace SsmActionDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SsmActionDefinition) => any;
    }
    /**
        * <p>Specifies all of the type-specific parameters. </p>
        */
    export interface Definition {
            /**
                * <p>The Identity and Access Management (IAM) action definition details. </p>
                */
            IamActionDefinition?: IamActionDefinition;
            /**
                * <p>The service control policies (SCPs) action definition details. </p>
                */
            ScpActionDefinition?: ScpActionDefinition;
            /**
                * <p>The Amazon Web Services Systems Manager (SSM) action definition details. </p>
                */
            SsmActionDefinition?: SsmActionDefinition;
    }
    export namespace Definition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Definition) => any;
    }
    export enum NotificationType {
            ACTUAL = "ACTUAL",
            FORECASTED = "FORECASTED"
    }
    export enum ActionStatus {
            Execution_Failure = "EXECUTION_FAILURE",
            Execution_In_Progress = "EXECUTION_IN_PROGRESS",
            Execution_Success = "EXECUTION_SUCCESS",
            Pending = "PENDING",
            Reset_Failure = "RESET_FAILURE",
            Reset_In_Progress = "RESET_IN_PROGRESS",
            Reverse_Failure = "REVERSE_FAILURE",
            Reverse_In_Progress = "REVERSE_IN_PROGRESS",
            Reverse_Success = "REVERSE_SUCCESS",
            Standby = "STANDBY"
    }
    export enum SubscriptionType {
            EMAIL = "EMAIL",
            SNS = "SNS"
    }
    /**
        * <p>The subscriber to a budget notification. The subscriber consists of a subscription type and either an Amazon SNS topic or an email address.</p>
        * 		       <p>For example, an email subscriber has the following parameters:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>A <code>subscriptionType</code> of <code>EMAIL</code>
        *                </p>
        * 			         </li>
        *             <li>
        * 				           <p>An <code>address</code> of <code>example@example.com</code>
        *                </p>
        * 			         </li>
        *          </ul>
        */
    export interface Subscriber {
            /**
                * <p>The type of notification that Amazon Web Services sends to a subscriber.</p>
                */
            SubscriptionType: SubscriptionType | string | undefined;
            /**
                * <p>The address that Amazon Web Services sends budget notifications to, either an SNS topic or an email.</p>
                * 		       <p>When you create a subscriber, the value of <code>Address</code> can't contain line breaks.</p>
                */
            Address: string | undefined;
    }
    export namespace Subscriber {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subscriber) => any;
    }
    /**
        * <p>A budget action resource. </p>
        */
    export interface Action {
            /**
                * <p>A system-generated universally unique identifier (UUID) for the action. </p>
                */
            ActionId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
                */
            NotificationType: NotificationType | string | undefined;
            /**
                * <p>The type of action. This defines the type of tasks that can be carried out by this action.
                * 			This field also determines the format for definition. </p>
                */
            ActionType: ActionType | string | undefined;
            /**
                * <p>The trigger threshold of the action. </p>
                */
            ActionThreshold: ActionThreshold | undefined;
            /**
                * <p>Where you specify all of the type-specific parameters. </p>
                */
            Definition: Definition | undefined;
            /**
                * <p>The role passed for action execution and reversion. Roles and actions must be in the same
                * 			account. </p>
                */
            ExecutionRoleArn: string | undefined;
            /**
                * <p>This specifies if the action needs manual or automatic approval. </p>
                */
            ApprovalModel: ApprovalModel | string | undefined;
            /**
                * <p>The status of the action. </p>
                */
            Status: ActionStatus | string | undefined;
            /**
                * <p> A list of subscribers.</p>
                */
            Subscribers: Subscriber[] | undefined;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    /**
        * <p>The description of the details for the event. </p>
        */
    export interface ActionHistoryDetails {
            /**
                * <p> A generic string.</p>
                */
            Message: string | undefined;
            /**
                * <p>The budget action resource. </p>
                */
            Action: Action | undefined;
    }
    export namespace ActionHistoryDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionHistoryDetails) => any;
    }
    export enum EventType {
            CreateAction = "CREATE_ACTION",
            DeleteAction = "DELETE_ACTION",
            ExecuteAction = "EXECUTE_ACTION",
            System = "SYSTEM",
            UpdateAction = "UPDATE_ACTION"
    }
    /**
        * <p>The historical records for a budget action. </p>
        */
    export interface ActionHistory {
            /**
                * <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
                */
            Timestamp: Date | undefined;
            /**
                * <p>The status of action at the time of the event. </p>
                */
            Status: ActionStatus | string | undefined;
            /**
                * <p>This distinguishes between whether the events are triggered by the user or are generated by
                * 			the system. </p>
                */
            EventType: EventType | string | undefined;
            /**
                * <p>The description of the details for the event. </p>
                */
            ActionHistoryDetails: ActionHistoryDetails | undefined;
    }
    export namespace ActionHistory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionHistory) => any;
    }
    export enum AutoAdjustType {
            FORECAST = "FORECAST",
            HISTORICAL = "HISTORICAL"
    }
    /**
        * <p>The parameters that define or describe the historical data that your auto-adjusting budget is based on.</p>
        */
    export interface HistoricalOptions {
            /**
                * <p>The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount. The maximum value depends on the <code>TimeUnit</code> granularity of the budget:</p>
                * 		       <ul>
                *             <li>
                *                <p>For the <code>DAILY</code> granularity, the maximum value is <code>60</code>.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>MONTHLY</code> granularity, the maximum value is <code>12</code>.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>QUARTERLY</code> granularity, the maximum value is <code>4</code>.</p>
                *             </li>
                *             <li>
                *                <p>For the <code>ANNUALLY</code> granularity, the maximum value is <code>1</code>.</p>
                *             </li>
                *          </ul>
                */
            BudgetAdjustmentPeriod: number | undefined;
            /**
                * <p>The integer that describes how many budget periods in your <code>BudgetAdjustmentPeriod</code> are included in the calculation of your current <code>BudgetLimit</code>. If the first budget period in your <code>BudgetAdjustmentPeriod</code> has no cost data, then that budget period isn’t included in the average that determines your budget limit. </p>
                * 		       <p>For example, if you set <code>BudgetAdjustmentPeriod</code> as <code>4</code> quarters, but your account had no cost data in the first quarter, then only the last three quarters are included in the calculation. In this scenario, <code>LookBackAvailablePeriods</code> returns <code>3</code>. </p>
                * 		       <p>You can’t set your own <code>LookBackAvailablePeriods</code>. The value is automatically calculated from the <code>BudgetAdjustmentPeriod</code> and your historical cost data.</p>
                */
            LookBackAvailablePeriods?: number;
    }
    export namespace HistoricalOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HistoricalOptions) => any;
    }
    /**
        * <p>The parameters that determine the budget amount for an auto-adjusting budget.</p>
        */
    export interface AutoAdjustData {
            /**
                * <p>The string that defines whether your budget auto-adjusts based on historical or forecasted data.</p>
                */
            AutoAdjustType: AutoAdjustType | string | undefined;
            /**
                * <p>The parameters that define or describe the historical data that your auto-adjusting budget is based on.</p>
                */
            HistoricalOptions?: HistoricalOptions;
            /**
                * <p>The last time that your budget was auto-adjusted.</p>
                */
            LastAutoAdjustTime?: Date;
    }
    export namespace AutoAdjustData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoAdjustData) => any;
    }
    /**
        * <p>The amount of cost or usage that's measured for a budget.</p>
        * 		       <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage has the following
        * 			parameters:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>An <code>Amount</code> of <code>3</code>
        *                </p>
        * 			         </li>
        *             <li>
        * 				           <p>A <code>unit</code> of <code>GB</code>
        *                </p>
        * 			         </li>
        *          </ul>
        */
    export interface Spend {
            /**
                * <p>The cost or usage amount that's associated with a budget forecast, actual spend, or budget
                * 			threshold.</p>
                */
            Amount: string | undefined;
            /**
                * <p>The unit of measurement that's used for the budget forecast, actual spend, or budget
                * 			threshold, such as USD or GBP.</p>
                */
            Unit: string | undefined;
    }
    export namespace Spend {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Spend) => any;
    }
    export enum BudgetType {
            Cost = "COST",
            RICoverage = "RI_COVERAGE",
            RIUtilization = "RI_UTILIZATION",
            SPCoverage = "SAVINGS_PLANS_COVERAGE",
            SPUtilization = "SAVINGS_PLANS_UTILIZATION",
            Usage = "USAGE"
    }
    /**
        * <p>The spend objects that are associated with this budget. The <code>actualSpend</code> tracks
        * 			how much you've used, cost, usage, RI units, or Savings Plans units and the
        * 				<code>forecastedSpend</code> tracks how much that you're predicted to spend based on
        * 			your historical usage profile.</p>
        * 		       <p>For example, if it's the 20th of the month and you have spent <code>50</code> dollars on
        * 			Amazon EC2, your <code>actualSpend</code> is <code>50 USD</code>, and your
        * 				<code>forecastedSpend</code> is <code>75 USD</code>.</p>
        */
    export interface CalculatedSpend {
            /**
                * <p>The amount of cost, usage, RI units, or Savings Plans units that you used.</p>
                */
            ActualSpend: Spend | undefined;
            /**
                * <p>The amount of cost, usage, RI units, or Savings Plans units that you're forecasted to
                * 			use.</p>
                */
            ForecastedSpend?: Spend;
    }
    export namespace CalculatedSpend {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CalculatedSpend) => any;
    }
    /**
        * <p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p>
        * 		       <p>
        *             <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>,
        * 				<code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code>
        * 			budgets don't have <code>CostTypes</code>.</p>
        */
    export interface CostTypes {
            /**
                * <p>Specifies whether a budget includes taxes.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeTax?: boolean;
            /**
                * <p>Specifies whether a budget includes subscriptions.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeSubscription?: boolean;
            /**
                * <p>Specifies whether a budget uses a blended rate.</p>
                * 		       <p>The default value is <code>false</code>.</p>
                */
            UseBlended?: boolean;
            /**
                * <p>Specifies whether a budget includes refunds.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeRefund?: boolean;
            /**
                * <p>Specifies whether a budget includes credits.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeCredit?: boolean;
            /**
                * <p>Specifies whether a budget includes upfront RI costs.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeUpfront?: boolean;
            /**
                * <p>Specifies whether a budget includes recurring fees such as monthly RI fees.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeRecurring?: boolean;
            /**
                * <p>Specifies whether a budget includes non-RI subscription costs.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeOtherSubscription?: boolean;
            /**
                * <p>Specifies whether a budget includes support subscription fees.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeSupport?: boolean;
            /**
                * <p>Specifies whether a budget includes discounts.</p>
                * 		       <p>The default value is <code>true</code>.</p>
                */
            IncludeDiscount?: boolean;
            /**
                * <p>Specifies whether a budget uses the amortized rate.</p>
                * 		       <p>The default value is <code>false</code>.</p>
                */
            UseAmortized?: boolean;
    }
    export namespace CostTypes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CostTypes) => any;
    }
    /**
        * <p>The period of time that's covered by a budget. The period has a start date and an end date.
        * 			The start date must come before the end date. There are no restrictions on the end date. </p>
        */
    export interface TimePeriod {
            /**
                * <p>The start date for a budget. If you created your budget and didn't specify a start date, Amazon Web Services defaults to the start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example, if you created your budget on January 24, 2018, chose <code>DAILY</code>, and didn't set a start date, Amazon Web Services set your start date to <code>01/24/18 00:00 UTC</code>. If you chose <code>MONTHLY</code>, Amazon Web Services set your start date to <code>01/01/18 00:00 UTC</code>. The defaults are the same for the Billing and Cost Management console and the API.</p>
                * 		       <p>You can change your start date with the <code>UpdateBudget</code> operation.</p>
                */
            Start?: Date;
            /**
                * <p>The end date for a budget. If you didn't specify an end date, Amazon Web Services set your end date to <code>06/15/87 00:00 UTC</code>. The defaults are the same for the Billing and Cost Management console and the API.</p>
                * 		       <p>After the end date, Amazon Web Services deletes the budget and all the associated
                * 			notifications and subscribers. You can change your end date with the
                * 				<code>UpdateBudget</code> operation.</p>
                */
            End?: Date;
    }
    export namespace TimePeriod {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimePeriod) => any;
    }
    export enum TimeUnit {
            ANNUALLY = "ANNUALLY",
            DAILY = "DAILY",
            MONTHLY = "MONTHLY",
            QUARTERLY = "QUARTERLY"
    }
    /**
        * <p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p>
        * 		       <p>This is the Amazon Resource Name (ARN) pattern for a budget: </p>
        * 		       <p>
        *             <code>arn:aws:budgets::AccountId:budget/budgetName</code>
        *          </p>
        */
    export interface Budget {
            /**
                * <p>The name of a budget. The name must be unique within an account. The <code>:</code> and <code>\</code> characters aren't allowed in <code>BudgetName</code>.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or
                * 			Savings Plans coverage that you want to track with your budget.</p>
                * 		       <p>
                *             <code>BudgetLimit</code> is required for cost or usage budgets, but optional for RI or
                * 			Savings Plans utilization or coverage budgets. RI and Savings Plans utilization or
                * 			coverage budgets default to <code>100</code>. This is the only valid value for RI or
                * 			Savings Plans utilization or coverage budgets. You can't use <code>BudgetLimit</code>
                * 			with <code>PlannedBudgetLimits</code> for <code>CreateBudget</code> and
                * 				<code>UpdateBudget</code> actions. </p>
                */
            BudgetLimit?: Spend;
            /**
                * <p>A map containing multiple <code>BudgetLimit</code>, including current or future limits.</p>
                * 		       <p>
                *             <code>PlannedBudgetLimits</code> is available for cost or usage budget and supports both
                * 			monthly and quarterly <code>TimeUnit</code>. </p>
                * 		       <p>For monthly budgets, provide 12 months of <code>PlannedBudgetLimits</code> values. This must start from the current month and include the next 11 months. The <code>key</code> is the start of the month, <code>UTC</code> in epoch seconds. </p>
                * 		       <p>For quarterly budgets, provide four quarters of <code>PlannedBudgetLimits</code> value
                * 			entries in standard calendar quarter increments. This must start from the current
                * 			quarter and include the next three quarters. The <code>key</code> is the start of the
                * 			quarter, <code>UTC</code> in epoch seconds. </p>
                * 		       <p>If the planned budget expires before 12 months for monthly or four quarters for quarterly,
                * 			provide the <code>PlannedBudgetLimits</code> values only for the remaining
                * 			periods.</p>
                * 		       <p>If the budget begins at a date in the future, provide <code>PlannedBudgetLimits</code> values from the start date of the budget. </p>
                * 		       <p>After all of the <code>BudgetLimit</code> values in <code>PlannedBudgetLimits</code> are used, the budget continues to use the last limit as the <code>BudgetLimit</code>. At that point, the planned budget provides the same experience as a fixed budget. </p>
                * 		       <p>
                *             <code>DescribeBudget</code> and <code>DescribeBudgets</code> response along with
                * 				<code>PlannedBudgetLimits</code> also contain <code>BudgetLimit</code> representing
                * 			the current month or quarter limit present in <code>PlannedBudgetLimits</code>. This
                * 			only applies to budgets that are created with <code>PlannedBudgetLimits</code>. Budgets
                * 			that are created without <code>PlannedBudgetLimits</code> only contain
                * 				<code>BudgetLimit</code>. They don't contain
                * 			<code>PlannedBudgetLimits</code>.</p>
                */
            PlannedBudgetLimits?: Record<string, Spend>;
            /**
                * <p>The cost filters, such as <code>Region</code>, <code>Service</code>, <code>member account</code>, <code>Tag</code>, or <code>Cost Category</code>, that are applied to a budget.</p>
                * 		       <p>Amazon Web Services Budgets supports the following services as a <code>Service</code> filter for RI budgets:</p>
                * 		       <ul>
                *             <li>
                * 				           <p>Amazon EC2</p>
                * 			         </li>
                *             <li>
                * 				           <p>Amazon Redshift</p>
                * 			         </li>
                *             <li>
                * 				           <p>Amazon Relational Database Service</p>
                * 			         </li>
                *             <li>
                * 				           <p>Amazon ElastiCache</p>
                * 			         </li>
                *             <li>
                * 				           <p>Amazon OpenSearch Service</p>
                * 			         </li>
                *          </ul>
                */
            CostFilters?: Record<string, string[]>;
            /**
                * <p>The types of costs that are included in this <code>COST</code> budget.</p>
                * 		       <p>
                *             <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>
                */
            CostTypes?: CostTypes;
            /**
                * <p>The length of time until a budget resets the actual and forecasted spend.</p>
                */
            TimeUnit: TimeUnit | string | undefined;
            /**
                * <p>The period of time that's covered by a budget. You setthe start date and end date. The start
                * 			date must come before the end date. The end date must come before <code>06/15/87 00:00
                * 				UTC</code>. </p>
                * 		       <p>If you create your budget and don't specify a start date, Amazon Web Services defaults to the
                * 			start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example,
                * 			if you created your budget on January 24, 2018, chose <code>DAILY</code>, and didn't set
                * 			a start date, Amazon Web Services set your start date to <code>01/24/18 00:00 UTC</code>.
                * 			If you chose <code>MONTHLY</code>, Amazon Web Services set your start date to
                * 				<code>01/01/18 00:00 UTC</code>. If you didn't specify an end date, Amazon Web Services set your end date to <code>06/15/87 00:00 UTC</code>. The defaults are the same for
                * 			the Billing and Cost Management console and the API. </p>
                * 		       <p>You can change either date with the <code>UpdateBudget</code> operation.</p>
                * 		       <p>After the end date, Amazon Web Services deletes the budget and all the associated
                * 			notifications and subscribers.</p>
                */
            TimePeriod?: TimePeriod;
            /**
                * <p>The actual and forecasted cost or usage that the budget tracks.</p>
                */
            CalculatedSpend?: CalculatedSpend;
            /**
                * <p>Specifies whether this budget tracks costs, usage, RI utilization, RI coverage, Savings
                * 			Plans utilization, or Savings Plans coverage.</p>
                */
            BudgetType: BudgetType | string | undefined;
            /**
                * <p>The last time that you updated this budget.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>The parameters that determine the budget amount for an auto-adjusting budget.</p>
                */
            AutoAdjustData?: AutoAdjustData;
    }
    export namespace Budget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Budget) => any;
    }
    export enum ComparisonOperator {
            EQUAL_TO = "EQUAL_TO",
            GREATER_THAN = "GREATER_THAN",
            LESS_THAN = "LESS_THAN"
    }
    export enum NotificationState {
            ALARM = "ALARM",
            OK = "OK"
    }
    /**
        * <p>A notification that's associated with a budget. A budget can have up to ten notifications. </p>
        * 		       <p>Each notification must have at least one subscriber. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p>
        * 		       <p>For example, if you have a budget for 200 dollars and you want to be notified when you go over 160 dollars, create a notification with the following parameters:</p>
        * 		       <ul>
        *             <li>
        * 				           <p>A notificationType of <code>ACTUAL</code>
        *                </p>
        * 			         </li>
        *             <li>
        * 				           <p>A <code>thresholdType</code> of <code>PERCENTAGE</code>
        *                </p>
        * 			         </li>
        *             <li>
        * 				           <p>A <code>comparisonOperator</code> of <code>GREATER_THAN</code>
        *                </p>
        * 			         </li>
        *             <li>
        * 				           <p>A notification <code>threshold</code> of <code>80</code>
        *                </p>
        * 			         </li>
        *          </ul>
        */
    export interface Notification {
            /**
                * <p>Specifies whether the notification is for how much you have spent (<code>ACTUAL</code>) or
                * 			for how much that you're forecasted to spend (<code>FORECASTED</code>).</p>
                */
            NotificationType: NotificationType | string | undefined;
            /**
                * <p>The comparison that's used for this notification.</p>
                */
            ComparisonOperator: ComparisonOperator | string | undefined;
            /**
                * <p>The threshold that's associated with a notification. Thresholds are always a percentage, and
                * 			many customers find value being alerted between 50% - 200% of the budgeted amount. The
                * 			maximum limit for your threshold is 1,000,000% above the budgeted amount.</p>
                */
            Threshold: number | undefined;
            /**
                * <p>The type of threshold for a notification. For <code>ABSOLUTE_VALUE</code> thresholds, Amazon Web Services notifies you when you go over or are forecasted to go over your total cost threshold. For <code>PERCENTAGE</code> thresholds, Amazon Web Services notifies you when you go over or are forecasted to go over a certain percentage of your forecasted spend. For example, if you have a budget for 200 dollars and you have a <code>PERCENTAGE</code> threshold of 80%, Amazon Web Services notifies you when you go over 160 dollars.</p>
                */
            ThresholdType?: ThresholdType | string;
            /**
                * <p>Specifies whether this notification is in alarm. If a budget notification is in the
                * 				<code>ALARM</code> state, you passed the set threshold for the budget.</p>
                */
            NotificationState?: NotificationState | string;
    }
    export namespace Notification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Notification) => any;
    }
    /**
        * <p>A notification with subscribers. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p>
        */
    export interface NotificationWithSubscribers {
            /**
                * <p>The notification that's associated with a budget.</p>
                */
            Notification: Notification | undefined;
            /**
                * <p>A list of subscribers who are subscribed to this notification.</p>
                */
            Subscribers: Subscriber[] | undefined;
    }
    export namespace NotificationWithSubscribers {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationWithSubscribers) => any;
    }
    /**
        * <p> Request of CreateBudget </p>
        */
    export interface CreateBudgetRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The budget object that you want to create.</p>
                */
            Budget: Budget | undefined;
            /**
                * <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
                */
            NotificationsWithSubscribers?: NotificationWithSubscribers[];
    }
    export namespace CreateBudgetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBudgetRequest) => any;
    }
    /**
        * <p> Response of CreateBudget </p>
        */
    export interface CreateBudgetResponse {
    }
    export namespace CreateBudgetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBudgetResponse) => any;
    }
    /**
        * <p>You've exceeded the notification or subscriber limit.</p>
        */
    export class CreationLimitExceededException extends __BaseException {
            readonly name: "CreationLimitExceededException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CreationLimitExceededException, __BaseException>);
    }
    /**
        * <p>The budget name already exists. Budget names must be unique within an account.</p>
        */
    export class DuplicateRecordException extends __BaseException {
            readonly name: "DuplicateRecordException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateRecordException, __BaseException>);
    }
    /**
        * <p>An error on the server occurred during the processing of your request. Try again later.</p>
        */
    export class InternalErrorException extends __BaseException {
            readonly name: "InternalErrorException";
            readonly $fault: "server";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
    }
    /**
        * <p>An error on the client occurred. Typically, the cause is an invalid input value.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>
        *       The number of API requests has exceeded the maximum allowed API request throttling limit for the account.
        *     </p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export interface CreateBudgetActionRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
                */
            NotificationType: NotificationType | string | undefined;
            /**
                * <p>
                *          The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
                *       </p>
                */
            ActionType: ActionType | string | undefined;
            /**
                * <p>The trigger threshold of the action. </p>
                */
            ActionThreshold: ActionThreshold | undefined;
            /**
                * <p>Specifies all of the type-specific parameters. </p>
                */
            Definition: Definition | undefined;
            /**
                * <p>
                *          The role passed for action execution and reversion. Roles and actions must be in the same account.
                *       </p>
                */
            ExecutionRoleArn: string | undefined;
            /**
                * <p>
                *          This specifies if the action needs manual or automatic approval.
                *       </p>
                */
            ApprovalModel: ApprovalModel | string | undefined;
            /**
                * <p> A list of subscribers.</p>
                */
            Subscribers: Subscriber[] | undefined;
    }
    export namespace CreateBudgetActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBudgetActionRequest) => any;
    }
    export interface CreateBudgetActionResponse {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A system-generated universally unique identifier (UUID) for the action.
                *       </p>
                */
            ActionId: string | undefined;
    }
    export namespace CreateBudgetActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBudgetActionResponse) => any;
    }
    /**
        * <p>We can’t locate the resource that you specified.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p> Request of CreateNotification </p>
        */
    export interface CreateNotificationRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget that you want to create a notification for.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget that you want Amazon Web Services to notify you about. Budget names must be unique within an account.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The notification that you want to create.</p>
                */
            Notification: Notification | undefined;
            /**
                * <p>A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.</p>
                */
            Subscribers: Subscriber[] | undefined;
    }
    export namespace CreateNotificationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotificationRequest) => any;
    }
    /**
        * <p> Response of CreateNotification </p>
        */
    export interface CreateNotificationResponse {
    }
    export namespace CreateNotificationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotificationResponse) => any;
    }
    /**
        * <p> Request of CreateSubscriber </p>
        */
    export interface CreateSubscriberRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget that you want to create a subscriber for.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget that you want to subscribe to. Budget names must be unique within an account.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The notification that you want to create a subscriber for.</p>
                */
            Notification: Notification | undefined;
            /**
                * <p>The subscriber that you want to associate with a budget notification.</p>
                */
            Subscriber: Subscriber | undefined;
    }
    export namespace CreateSubscriberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSubscriberRequest) => any;
    }
    /**
        * <p> Response of CreateSubscriber </p>
        */
    export interface CreateSubscriberResponse {
    }
    export namespace CreateSubscriberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSubscriberResponse) => any;
    }
    /**
        * <p> Request of DeleteBudget </p>
        */
    export interface DeleteBudgetRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget that you want to delete.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget that you want to delete.</p>
                */
            BudgetName: string | undefined;
    }
    export namespace DeleteBudgetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBudgetRequest) => any;
    }
    /**
        * <p> Response of DeleteBudget </p>
        */
    export interface DeleteBudgetResponse {
    }
    export namespace DeleteBudgetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBudgetResponse) => any;
    }
    export interface DeleteBudgetActionRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A system-generated universally unique identifier (UUID) for the action.
                *       </p>
                */
            ActionId: string | undefined;
    }
    export namespace DeleteBudgetActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBudgetActionRequest) => any;
    }
    export interface DeleteBudgetActionResponse {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>A budget action resource. </p>
                */
            Action: Action | undefined;
    }
    export namespace DeleteBudgetActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBudgetActionResponse) => any;
    }
    /**
        * <p> The request was received and recognized by the server, but the server rejected that
        *       particular method for the requested resource. </p>
        */
    export class ResourceLockedException extends __BaseException {
            readonly name: "ResourceLockedException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceLockedException, __BaseException>);
    }
    /**
        * <p> Request of DeleteNotification </p>
        */
    export interface DeleteNotificationRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget whose notification you want to delete.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget whose notification you want to delete.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The notification that you want to delete.</p>
                */
            Notification: Notification | undefined;
    }
    export namespace DeleteNotificationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotificationRequest) => any;
    }
    /**
        * <p> Response of DeleteNotification </p>
        */
    export interface DeleteNotificationResponse {
    }
    export namespace DeleteNotificationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotificationResponse) => any;
    }
    /**
        * <p> Request of DeleteSubscriber </p>
        */
    export interface DeleteSubscriberRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to delete.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget whose subscriber you want to delete.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The notification whose subscriber you want to delete.</p>
                */
            Notification: Notification | undefined;
            /**
                * <p>The subscriber that you want to delete.</p>
                */
            Subscriber: Subscriber | undefined;
    }
    export namespace DeleteSubscriberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSubscriberRequest) => any;
    }
    /**
        * <p> Response of DeleteSubscriber </p>
        */
    export interface DeleteSubscriberResponse {
    }
    export namespace DeleteSubscriberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSubscriberResponse) => any;
    }
    /**
        * <p> Request of DescribeBudget </p>
        */
    export interface DescribeBudgetRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget that you want a description of.</p>
                */
            BudgetName: string | undefined;
    }
    export namespace DescribeBudgetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetRequest) => any;
    }
    /**
        * <p> Response of DescribeBudget </p>
        */
    export interface DescribeBudgetResponse {
            /**
                * <p>The description of the budget.</p>
                */
            Budget?: Budget;
    }
    export namespace DescribeBudgetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetResponse) => any;
    }
    export interface DescribeBudgetActionRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A system-generated universally unique identifier (UUID) for the action.
                *       </p>
                */
            ActionId: string | undefined;
    }
    export namespace DescribeBudgetActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionRequest) => any;
    }
    export interface DescribeBudgetActionResponse {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A budget action resource.
                *       </p>
                */
            Action: Action | undefined;
    }
    export namespace DescribeBudgetActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionResponse) => any;
    }
    export interface DescribeBudgetActionHistoriesRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A system-generated universally unique identifier (UUID) for the action.
                *       </p>
                */
            ActionId: string | undefined;
            /**
                * <p>The period of time that's covered by a budget. The period has a start date and an end date.
                * 			The start date must come before the end date. There are no restrictions on the end date. </p>
                */
            TimePeriod?: TimePeriod;
            /**
                * <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetActionHistoriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionHistoriesRequest) => any;
    }
    export interface DescribeBudgetActionHistoriesResponse {
            /**
                * <p>
                *          The historical record of the budget action resource.
                *       </p>
                */
            ActionHistories: ActionHistory[] | undefined;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetActionHistoriesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionHistoriesResponse) => any;
    }
    /**
        * <p>The pagination token is invalid.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface DescribeBudgetActionsForAccountRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetActionsForAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionsForAccountRequest) => any;
    }
    export interface DescribeBudgetActionsForAccountResponse {
            /**
                * <p>
                *          A list of the budget action resources information.
                *       </p>
                */
            Actions: Action[] | undefined;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetActionsForAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionsForAccountResponse) => any;
    }
    export interface DescribeBudgetActionsForBudgetRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetActionsForBudgetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionsForBudgetRequest) => any;
    }
    export interface DescribeBudgetActionsForBudgetResponse {
            /**
                * <p>
                *          A list of the budget action resources information.
                *       </p>
                */
            Actions: Action[] | undefined;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetActionsForBudgetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetActionsForBudgetResponse) => any;
    }
    export interface DescribeBudgetNotificationsForAccountRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>
                * 			An integer that shows how many budget name entries a paginated response contains.
                * 		</p>
                */
            MaxResults?: number;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetNotificationsForAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetNotificationsForAccountRequest) => any;
    }
    /**
        * <p>
        *          The budget name and associated notifications for an account.
        *       </p>
        */
    export interface BudgetNotificationsForAccount {
            /**
                * <p> A list of notifications.</p>
                */
            Notifications?: Notification[];
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName?: string;
    }
    export namespace BudgetNotificationsForAccount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BudgetNotificationsForAccount) => any;
    }
    export interface DescribeBudgetNotificationsForAccountResponse {
            /**
                * <p>
                * 			A list of budget names and associated notifications for an account.
                * 		</p>
                */
            BudgetNotificationsForAccount?: BudgetNotificationsForAccount[];
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetNotificationsForAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetNotificationsForAccountResponse) => any;
    }
    /**
        * <p>The pagination token expired.</p>
        */
    export class ExpiredNextTokenException extends __BaseException {
            readonly name: "ExpiredNextTokenException";
            readonly $fault: "client";
            /**
                * <p>The error message the exception carries.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExpiredNextTokenException, __BaseException>);
    }
    export interface DescribeBudgetPerformanceHistoryRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>Retrieves how often the budget went into an <code>ALARM</code> state for the specified time period.</p>
                */
            TimePeriod?: TimePeriod;
            /**
                * <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetPerformanceHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetPerformanceHistoryRequest) => any;
    }
    /**
        * <p>The amount of cost or usage that you created the budget for, compared to your actual costs or usage.</p>
        */
    export interface BudgetedAndActualAmounts {
            /**
                * <p>The amount of cost or usage that you created the budget for.</p>
                */
            BudgetedAmount?: Spend;
            /**
                * <p>Your actual costs or usage for a budget period.</p>
                */
            ActualAmount?: Spend;
            /**
                * <p>The time period that's covered by this budget comparison.</p>
                */
            TimePeriod?: TimePeriod;
    }
    export namespace BudgetedAndActualAmounts {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BudgetedAndActualAmounts) => any;
    }
    /**
        * <p>A history of the state of a budget at the end of the budget's specified time period.</p>
        */
    export interface BudgetPerformanceHistory {
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName?: string;
            /**
                * <p> The type of a budget. It must be one of the following types: </p>
                * 		       <p>
                *             <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>
                */
            BudgetType?: BudgetType | string;
            /**
                * <p>The history of the cost filters for a budget during the specified time period.</p>
                */
            CostFilters?: Record<string, string[]>;
            /**
                * <p>The history of the cost types for a budget during the specified time period.</p>
                */
            CostTypes?: CostTypes;
            /**
                * <p> The time unit of the budget, such as MONTHLY or QUARTERLY.</p>
                */
            TimeUnit?: TimeUnit | string;
            /**
                * <p>A list of amounts of cost or usage that you created budgets for, which are compared to your
                * 			actual costs or usage.</p>
                */
            BudgetedAndActualAmountsList?: BudgetedAndActualAmounts[];
    }
    export namespace BudgetPerformanceHistory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BudgetPerformanceHistory) => any;
    }
    export interface DescribeBudgetPerformanceHistoryResponse {
            /**
                * <p>The history of how often the budget has gone into an <code>ALARM</code> state.</p>
                *          <p>For <code>DAILY</code> budgets, the history saves the state of the budget for the last 60 days. For <code>MONTHLY</code> budgets, the history saves the state of the budget for the current month plus the last 12 months. For <code>QUARTERLY</code> budgets, the history saves the state of the budget for the last four quarters.</p>
                */
            BudgetPerformanceHistory?: BudgetPerformanceHistory;
            /**
                * <p> A generic string.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetPerformanceHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetPerformanceHistoryResponse) => any;
    }
    /**
        * <p> Request of DescribeBudgets </p>
        */
    export interface DescribeBudgetsRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budgets that you want descriptions of.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetsRequest) => any;
    }
    /**
        * <p> Response of DescribeBudgets </p>
        */
    export interface DescribeBudgetsResponse {
            /**
                * <p>A list of budgets.</p>
                */
            Budgets?: Budget[];
            /**
                * <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBudgetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBudgetsResponse) => any;
    }
    /**
        * <p> Request of DescribeNotificationsForBudget </p>
        */
    export interface DescribeNotificationsForBudgetRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget whose notifications you want descriptions of.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget whose notifications you want descriptions of.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeNotificationsForBudgetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotificationsForBudgetRequest) => any;
    }
    /**
        * <p> Response of GetNotificationsForBudget </p>
        */
    export interface DescribeNotificationsForBudgetResponse {
            /**
                * <p>A list of notifications that are associated with a budget.</p>
                */
            Notifications?: Notification[];
            /**
                * <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeNotificationsForBudgetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotificationsForBudgetResponse) => any;
    }
    /**
        * <p> Request of DescribeSubscribersForNotification </p>
        */
    export interface DescribeSubscribersForNotificationRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget whose subscribers you want descriptions of.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget whose subscribers you want descriptions of.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The notification whose subscribers you want to list.</p>
                */
            Notification: Notification | undefined;
            /**
                * <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeSubscribersForNotificationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSubscribersForNotificationRequest) => any;
    }
    /**
        * <p> Response of DescribeSubscribersForNotification </p>
        */
    export interface DescribeSubscribersForNotificationResponse {
            /**
                * <p>A list of subscribers that are associated with a notification.</p>
                */
            Subscribers?: Subscriber[];
            /**
                * <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeSubscribersForNotificationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSubscribersForNotificationResponse) => any;
    }
    export enum ExecutionType {
            ApproveBudgetAction = "APPROVE_BUDGET_ACTION",
            ResetBudgetAction = "RESET_BUDGET_ACTION",
            RetryBudgetAction = "RETRY_BUDGET_ACTION",
            ReverseBudgetAction = "REVERSE_BUDGET_ACTION"
    }
    export interface ExecuteBudgetActionRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A system-generated universally unique identifier (UUID) for the action.
                *       </p>
                */
            ActionId: string | undefined;
            /**
                * <p>
                *          The type of execution.
                *       </p>
                */
            ExecutionType: ExecutionType | string | undefined;
    }
    export namespace ExecuteBudgetActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteBudgetActionRequest) => any;
    }
    export interface ExecuteBudgetActionResponse {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A system-generated universally unique identifier (UUID) for the action.
                *       </p>
                */
            ActionId: string | undefined;
            /**
                * <p>
                *          The type of execution.
                *       </p>
                */
            ExecutionType: ExecutionType | string | undefined;
    }
    export namespace ExecuteBudgetActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExecuteBudgetActionResponse) => any;
    }
    /**
        * <p> Request of UpdateBudget </p>
        */
    export interface UpdateBudgetRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget that you want to update.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The budget that you want to update your budget to.</p>
                */
            NewBudget: Budget | undefined;
    }
    export namespace UpdateBudgetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBudgetRequest) => any;
    }
    /**
        * <p> Response of UpdateBudget </p>
        */
    export interface UpdateBudgetResponse {
    }
    export namespace UpdateBudgetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBudgetResponse) => any;
    }
    export interface UpdateBudgetActionRequest {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          A system-generated universally unique identifier (UUID) for the action.
                *       </p>
                */
            ActionId: string | undefined;
            /**
                * <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
                */
            NotificationType?: NotificationType | string;
            /**
                * <p>The trigger threshold of the action. </p>
                */
            ActionThreshold?: ActionThreshold;
            /**
                * <p>Specifies all of the type-specific parameters. </p>
                */
            Definition?: Definition;
            /**
                * <p>
                *          The role passed for action execution and reversion. Roles and actions must be in the same account.
                *       </p>
                */
            ExecutionRoleArn?: string;
            /**
                * <p>
                *          This specifies if the action needs manual or automatic approval.
                *       </p>
                */
            ApprovalModel?: ApprovalModel | string;
            /**
                * <p> A list of subscribers.</p>
                */
            Subscribers?: Subscriber[];
    }
    export namespace UpdateBudgetActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBudgetActionRequest) => any;
    }
    export interface UpdateBudgetActionResponse {
            /**
                * <p>The account ID of the user. It's a 12-digit number.</p>
                */
            AccountId: string | undefined;
            /**
                * <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>
                *          The previous action resource information.
                *       </p>
                */
            OldAction: Action | undefined;
            /**
                * <p>
                *          The updated action resource information.
                *       </p>
                */
            NewAction: Action | undefined;
    }
    export namespace UpdateBudgetActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBudgetActionResponse) => any;
    }
    /**
        * <p> Request of UpdateNotification </p>
        */
    export interface UpdateNotificationRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget whose notification you want to update.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget whose notification you want to update.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The previous notification that is associated with a budget.</p>
                */
            OldNotification: Notification | undefined;
            /**
                * <p>The updated notification to be associated with a budget.</p>
                */
            NewNotification: Notification | undefined;
    }
    export namespace UpdateNotificationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotificationRequest) => any;
    }
    /**
        * <p> Response of UpdateNotification </p>
        */
    export interface UpdateNotificationResponse {
    }
    export namespace UpdateNotificationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotificationResponse) => any;
    }
    /**
        * <p> Request of UpdateSubscriber </p>
        */
    export interface UpdateSubscriberRequest {
            /**
                * <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to update.</p>
                */
            AccountId: string | undefined;
            /**
                * <p>The name of the budget whose subscriber you want to update.</p>
                */
            BudgetName: string | undefined;
            /**
                * <p>The notification whose subscriber you want to update.</p>
                */
            Notification: Notification | undefined;
            /**
                * <p>The previous subscriber that is associated with a budget notification.</p>
                */
            OldSubscriber: Subscriber | undefined;
            /**
                * <p>The updated subscriber that is associated with a budget notification.</p>
                */
            NewSubscriber: Subscriber | undefined;
    }
    export namespace UpdateSubscriberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubscriberRequest) => any;
    }
    /**
        * <p> Response of UpdateSubscriber </p>
        */
    export interface UpdateSubscriberResponse {
    }
    export namespace UpdateSubscriberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubscriberResponse) => any;
    }
}

declare module '@aws-sdk/client-budgets/node_modules/@aws-sdk/client-budgets/dist-types/models/BudgetsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Budgets service.
        */
    export class BudgetsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

