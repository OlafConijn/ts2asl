// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-wisdom' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateAssistantAssociationCommandInput, CreateAssistantAssociationCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateAssistantAssociationCommand";
    import { CreateAssistantCommandInput, CreateAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateAssistantCommand";
    import { CreateContentCommandInput, CreateContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateContentCommand";
    import { CreateKnowledgeBaseCommandInput, CreateKnowledgeBaseCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateKnowledgeBaseCommand";
    import { CreateSessionCommandInput, CreateSessionCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateSessionCommand";
    import { DeleteAssistantAssociationCommandInput, DeleteAssistantAssociationCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteAssistantAssociationCommand";
    import { DeleteAssistantCommandInput, DeleteAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteAssistantCommand";
    import { DeleteContentCommandInput, DeleteContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteContentCommand";
    import { DeleteKnowledgeBaseCommandInput, DeleteKnowledgeBaseCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteKnowledgeBaseCommand";
    import { GetAssistantAssociationCommandInput, GetAssistantAssociationCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetAssistantAssociationCommand";
    import { GetAssistantCommandInput, GetAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetAssistantCommand";
    import { GetContentCommandInput, GetContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetContentCommand";
    import { GetContentSummaryCommandInput, GetContentSummaryCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetContentSummaryCommand";
    import { GetKnowledgeBaseCommandInput, GetKnowledgeBaseCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetKnowledgeBaseCommand";
    import { GetRecommendationsCommandInput, GetRecommendationsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetRecommendationsCommand";
    import { GetSessionCommandInput, GetSessionCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetSessionCommand";
    import { ListAssistantAssociationsCommandInput, ListAssistantAssociationsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListAssistantAssociationsCommand";
    import { ListAssistantsCommandInput, ListAssistantsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListAssistantsCommand";
    import { ListContentsCommandInput, ListContentsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListContentsCommand";
    import { ListKnowledgeBasesCommandInput, ListKnowledgeBasesCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListKnowledgeBasesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListTagsForResourceCommand";
    import { NotifyRecommendationsReceivedCommandInput, NotifyRecommendationsReceivedCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/NotifyRecommendationsReceivedCommand";
    import { QueryAssistantCommandInput, QueryAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/QueryAssistantCommand";
    import { RemoveKnowledgeBaseTemplateUriCommandInput, RemoveKnowledgeBaseTemplateUriCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/RemoveKnowledgeBaseTemplateUriCommand";
    import { SearchContentCommandInput, SearchContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/SearchContentCommand";
    import { SearchSessionsCommandInput, SearchSessionsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/SearchSessionsCommand";
    import { StartContentUploadCommandInput, StartContentUploadCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/StartContentUploadCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UntagResourceCommand";
    import { UpdateContentCommandInput, UpdateContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UpdateContentCommand";
    import { UpdateKnowledgeBaseTemplateUriCommandInput, UpdateKnowledgeBaseTemplateUriCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UpdateKnowledgeBaseTemplateUriCommand";
    import { WisdomClient } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    /**
        * <p>Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively
        *         speaking with customers. Agents can search across connected repositories from within their agent desktop
        *         to find answers quickly. Use the Amazon Connect Wisdom APIs to create an assistant and a knowledge base, for example, or manage content by uploading custom files.</p>
        */
    export class Wisdom extends WisdomClient {
            /**
                * <p>Creates an Amazon Connect Wisdom assistant.</p>
                */
            createAssistant(args: CreateAssistantCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssistantCommandOutput>;
            createAssistant(args: CreateAssistantCommandInput, cb: (err: any, data?: CreateAssistantCommandOutput) => void): void;
            createAssistant(args: CreateAssistantCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssistantCommandOutput) => void): void;
            /**
                * <p>Creates an association between an Amazon Connect Wisdom assistant and another resource. Currently, the
                *       only supported association is with a knowledge base. An assistant can have only a single
                *       association.</p>
                */
            createAssistantAssociation(args: CreateAssistantAssociationCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssistantAssociationCommandOutput>;
            createAssistantAssociation(args: CreateAssistantAssociationCommandInput, cb: (err: any, data?: CreateAssistantAssociationCommandOutput) => void): void;
            createAssistantAssociation(args: CreateAssistantAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssistantAssociationCommandOutput) => void): void;
            /**
                * <p>Creates Wisdom content. Before to calling this API, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a> to
                *       upload an asset.</p>
                */
            createContent(args: CreateContentCommandInput, options?: __HttpHandlerOptions): Promise<CreateContentCommandOutput>;
            createContent(args: CreateContentCommandInput, cb: (err: any, data?: CreateContentCommandOutput) => void): void;
            createContent(args: CreateContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContentCommandOutput) => void): void;
            /**
                * <p>Creates a knowledge base.</p>
                *          <note>
                *             <p>When using this API, you cannot reuse <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html">Amazon AppIntegrations</a>
                *         DataIntegrations with external knowledge bases such as Salesforce and ServiceNow. If you do,
                *         you'll get an <code>InvalidRequestException</code> error. </p>
                *
                *             <p>For example, you're programmatically managing your external knowledge base, and you want
                *         to add or remove one of the fields that is being ingested from Salesforce. Do the
                *         following:</p>
                *             <ol>
                *                <li>
                *                   <p>Call <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_DeleteKnowledgeBase.html">DeleteKnowledgeBase</a>.</p>
                *                </li>
                *                <li>
                *                   <p>Call <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html">DeleteDataIntegration</a>.</p>
                *                </li>
                *                <li>
                *                   <p>Call <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration</a> to recreate the DataIntegration or a create different
                *             one.</p>
                *                </li>
                *                <li>
                *                   <p>Call CreateKnowledgeBase.</p>
                *                </li>
                *             </ol>
                *          </note>
                */
            createKnowledgeBase(args: CreateKnowledgeBaseCommandInput, options?: __HttpHandlerOptions): Promise<CreateKnowledgeBaseCommandOutput>;
            createKnowledgeBase(args: CreateKnowledgeBaseCommandInput, cb: (err: any, data?: CreateKnowledgeBaseCommandOutput) => void): void;
            createKnowledgeBase(args: CreateKnowledgeBaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateKnowledgeBaseCommandOutput) => void): void;
            /**
                * <p>Creates a session. A session is a contextual container used for generating
                *       recommendations. Amazon Connect creates a new Wisdom session for each contact on which Wisdom is
                *       enabled.</p>
                */
            createSession(args: CreateSessionCommandInput, options?: __HttpHandlerOptions): Promise<CreateSessionCommandOutput>;
            createSession(args: CreateSessionCommandInput, cb: (err: any, data?: CreateSessionCommandOutput) => void): void;
            createSession(args: CreateSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSessionCommandOutput) => void): void;
            /**
                * <p>Deletes an assistant.</p>
                */
            deleteAssistant(args: DeleteAssistantCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssistantCommandOutput>;
            deleteAssistant(args: DeleteAssistantCommandInput, cb: (err: any, data?: DeleteAssistantCommandOutput) => void): void;
            deleteAssistant(args: DeleteAssistantCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssistantCommandOutput) => void): void;
            /**
                * <p>Deletes an assistant association.</p>
                */
            deleteAssistantAssociation(args: DeleteAssistantAssociationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssistantAssociationCommandOutput>;
            deleteAssistantAssociation(args: DeleteAssistantAssociationCommandInput, cb: (err: any, data?: DeleteAssistantAssociationCommandOutput) => void): void;
            deleteAssistantAssociation(args: DeleteAssistantAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssistantAssociationCommandOutput) => void): void;
            /**
                * <p>Deletes the content.</p>
                */
            deleteContent(args: DeleteContentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContentCommandOutput>;
            deleteContent(args: DeleteContentCommandInput, cb: (err: any, data?: DeleteContentCommandOutput) => void): void;
            deleteContent(args: DeleteContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContentCommandOutput) => void): void;
            /**
                * <p>Deletes the knowledge base.</p>
                *          <note>
                *             <p>When you use this API to delete an external knowledge base such as Salesforce or
                *         ServiceNow, you must also delete the <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html">Amazon AppIntegrations</a> DataIntegration.
                *         This is because you can't reuse the DataIntegration after it's been associated with an
                *         external knowledge base. However, you can delete and recreate it. See <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html">DeleteDataIntegration</a> and <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration</a> in the <i>Amazon AppIntegrations API
                *         Reference</i>.</p>
                *          </note>
                */
            deleteKnowledgeBase(args: DeleteKnowledgeBaseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteKnowledgeBaseCommandOutput>;
            deleteKnowledgeBase(args: DeleteKnowledgeBaseCommandInput, cb: (err: any, data?: DeleteKnowledgeBaseCommandOutput) => void): void;
            deleteKnowledgeBase(args: DeleteKnowledgeBaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteKnowledgeBaseCommandOutput) => void): void;
            /**
                * <p>Retrieves information about an assistant.</p>
                */
            getAssistant(args: GetAssistantCommandInput, options?: __HttpHandlerOptions): Promise<GetAssistantCommandOutput>;
            getAssistant(args: GetAssistantCommandInput, cb: (err: any, data?: GetAssistantCommandOutput) => void): void;
            getAssistant(args: GetAssistantCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAssistantCommandOutput) => void): void;
            /**
                * <p>Retrieves information about an assistant association.</p>
                */
            getAssistantAssociation(args: GetAssistantAssociationCommandInput, options?: __HttpHandlerOptions): Promise<GetAssistantAssociationCommandOutput>;
            getAssistantAssociation(args: GetAssistantAssociationCommandInput, cb: (err: any, data?: GetAssistantAssociationCommandOutput) => void): void;
            getAssistantAssociation(args: GetAssistantAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAssistantAssociationCommandOutput) => void): void;
            /**
                * <p>Retrieves content, including a pre-signed URL to download the content.</p>
                */
            getContent(args: GetContentCommandInput, options?: __HttpHandlerOptions): Promise<GetContentCommandOutput>;
            getContent(args: GetContentCommandInput, cb: (err: any, data?: GetContentCommandOutput) => void): void;
            getContent(args: GetContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContentCommandOutput) => void): void;
            /**
                * <p>Retrieves summary information about the content.</p>
                */
            getContentSummary(args: GetContentSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetContentSummaryCommandOutput>;
            getContentSummary(args: GetContentSummaryCommandInput, cb: (err: any, data?: GetContentSummaryCommandOutput) => void): void;
            getContentSummary(args: GetContentSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContentSummaryCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the knowledge base.</p>
                */
            getKnowledgeBase(args: GetKnowledgeBaseCommandInput, options?: __HttpHandlerOptions): Promise<GetKnowledgeBaseCommandOutput>;
            getKnowledgeBase(args: GetKnowledgeBaseCommandInput, cb: (err: any, data?: GetKnowledgeBaseCommandOutput) => void): void;
            getKnowledgeBase(args: GetKnowledgeBaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetKnowledgeBaseCommandOutput) => void): void;
            /**
                * <p>Retrieves recommendations for the specified session. To avoid retrieving the same
                *       recommendations in subsequent calls, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_NotifyRecommendationsReceived.html">NotifyRecommendationsReceived</a>. This API supports long-polling behavior with the
                *         <code>waitTimeSeconds</code> parameter. Short poll is the default behavior and only returns
                *       recommendations already available. To perform a manual query against an assistant, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_QueryAssistant.html">QueryAssistant</a>.</p>
                */
            getRecommendations(args: GetRecommendationsCommandInput, options?: __HttpHandlerOptions): Promise<GetRecommendationsCommandOutput>;
            getRecommendations(args: GetRecommendationsCommandInput, cb: (err: any, data?: GetRecommendationsCommandOutput) => void): void;
            getRecommendations(args: GetRecommendationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRecommendationsCommandOutput) => void): void;
            /**
                * <p>Retrieves information for a specified session.</p>
                */
            getSession(args: GetSessionCommandInput, options?: __HttpHandlerOptions): Promise<GetSessionCommandOutput>;
            getSession(args: GetSessionCommandInput, cb: (err: any, data?: GetSessionCommandOutput) => void): void;
            getSession(args: GetSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSessionCommandOutput) => void): void;
            /**
                * <p>Lists information about assistant associations.</p>
                */
            listAssistantAssociations(args: ListAssistantAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssistantAssociationsCommandOutput>;
            listAssistantAssociations(args: ListAssistantAssociationsCommandInput, cb: (err: any, data?: ListAssistantAssociationsCommandOutput) => void): void;
            listAssistantAssociations(args: ListAssistantAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssistantAssociationsCommandOutput) => void): void;
            /**
                * <p>Lists information about assistants.</p>
                */
            listAssistants(args: ListAssistantsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssistantsCommandOutput>;
            listAssistants(args: ListAssistantsCommandInput, cb: (err: any, data?: ListAssistantsCommandOutput) => void): void;
            listAssistants(args: ListAssistantsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssistantsCommandOutput) => void): void;
            /**
                * <p>Lists the content.</p>
                */
            listContents(args: ListContentsCommandInput, options?: __HttpHandlerOptions): Promise<ListContentsCommandOutput>;
            listContents(args: ListContentsCommandInput, cb: (err: any, data?: ListContentsCommandOutput) => void): void;
            listContents(args: ListContentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListContentsCommandOutput) => void): void;
            /**
                * <p>Lists the knowledge bases.</p>
                */
            listKnowledgeBases(args: ListKnowledgeBasesCommandInput, options?: __HttpHandlerOptions): Promise<ListKnowledgeBasesCommandOutput>;
            listKnowledgeBases(args: ListKnowledgeBasesCommandInput, cb: (err: any, data?: ListKnowledgeBasesCommandOutput) => void): void;
            listKnowledgeBases(args: ListKnowledgeBasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListKnowledgeBasesCommandOutput) => void): void;
            /**
                * <p>Lists the tags for the specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified recommendations from the specified assistant's queue of newly
                *       available recommendations. You can use this API in conjunction with <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html">GetRecommendations</a> and a <code>waitTimeSeconds</code> input for long-polling
                *       behavior and avoiding duplicate recommendations.</p>
                */
            notifyRecommendationsReceived(args: NotifyRecommendationsReceivedCommandInput, options?: __HttpHandlerOptions): Promise<NotifyRecommendationsReceivedCommandOutput>;
            notifyRecommendationsReceived(args: NotifyRecommendationsReceivedCommandInput, cb: (err: any, data?: NotifyRecommendationsReceivedCommandOutput) => void): void;
            notifyRecommendationsReceived(args: NotifyRecommendationsReceivedCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: NotifyRecommendationsReceivedCommandOutput) => void): void;
            /**
                * <p>Performs a manual search against the specified assistant. To retrieve recommendations for
                *       an assistant, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html">GetRecommendations</a>.
                *     </p>
                */
            queryAssistant(args: QueryAssistantCommandInput, options?: __HttpHandlerOptions): Promise<QueryAssistantCommandOutput>;
            queryAssistant(args: QueryAssistantCommandInput, cb: (err: any, data?: QueryAssistantCommandOutput) => void): void;
            queryAssistant(args: QueryAssistantCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: QueryAssistantCommandOutput) => void): void;
            /**
                * <p>Removes a URI template from a knowledge base.</p>
                */
            removeKnowledgeBaseTemplateUri(args: RemoveKnowledgeBaseTemplateUriCommandInput, options?: __HttpHandlerOptions): Promise<RemoveKnowledgeBaseTemplateUriCommandOutput>;
            removeKnowledgeBaseTemplateUri(args: RemoveKnowledgeBaseTemplateUriCommandInput, cb: (err: any, data?: RemoveKnowledgeBaseTemplateUriCommandOutput) => void): void;
            removeKnowledgeBaseTemplateUri(args: RemoveKnowledgeBaseTemplateUriCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveKnowledgeBaseTemplateUriCommandOutput) => void): void;
            /**
                * <p>Searches for content in a specified knowledge base. Can be used to get a specific content
                *       resource by its name.</p>
                */
            searchContent(args: SearchContentCommandInput, options?: __HttpHandlerOptions): Promise<SearchContentCommandOutput>;
            searchContent(args: SearchContentCommandInput, cb: (err: any, data?: SearchContentCommandOutput) => void): void;
            searchContent(args: SearchContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchContentCommandOutput) => void): void;
            /**
                * <p>Searches for sessions.</p>
                */
            searchSessions(args: SearchSessionsCommandInput, options?: __HttpHandlerOptions): Promise<SearchSessionsCommandOutput>;
            searchSessions(args: SearchSessionsCommandInput, cb: (err: any, data?: SearchSessionsCommandOutput) => void): void;
            searchSessions(args: SearchSessionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchSessionsCommandOutput) => void): void;
            /**
                * <p>Get a URL to upload content to a knowledge base. To upload content, first make a PUT
                *       request to the returned URL with your file, making sure to include the required headers. Then
                *       use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_CreateContent.html">CreateContent</a> to finalize the content creation process or <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_UpdateContent.html">UpdateContent</a> to modify an existing resource. You can only upload content to a
                *       knowledge base of type CUSTOM.</p>
                */
            startContentUpload(args: StartContentUploadCommandInput, options?: __HttpHandlerOptions): Promise<StartContentUploadCommandOutput>;
            startContentUpload(args: StartContentUploadCommandInput, cb: (err: any, data?: StartContentUploadCommandOutput) => void): void;
            startContentUpload(args: StartContentUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartContentUploadCommandOutput) => void): void;
            /**
                * <p>Adds the specified tags to the specified resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates information about the content.</p>
                */
            updateContent(args: UpdateContentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateContentCommandOutput>;
            updateContent(args: UpdateContentCommandInput, cb: (err: any, data?: UpdateContentCommandOutput) => void): void;
            updateContent(args: UpdateContentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateContentCommandOutput) => void): void;
            /**
                * <p>Updates the template URI of a knowledge base. This is only supported for knowledge bases
                *       of type EXTERNAL. Include a single variable in <code>${variable}</code> format; this
                *       interpolated by Wisdom using ingested content. For example, if you ingest a Salesforce
                *       article, it has an <code>Id</code> value, and you can set the template URI to
                *         <code>https://myInstanceName.lightning.force.com/lightning/r/Knowledge__kav/*${Id}*\/view</code>.
                *     </p>
                */
            updateKnowledgeBaseTemplateUri(args: UpdateKnowledgeBaseTemplateUriCommandInput, options?: __HttpHandlerOptions): Promise<UpdateKnowledgeBaseTemplateUriCommandOutput>;
            updateKnowledgeBaseTemplateUri(args: UpdateKnowledgeBaseTemplateUriCommandInput, cb: (err: any, data?: UpdateKnowledgeBaseTemplateUriCommandOutput) => void): void;
            updateKnowledgeBaseTemplateUri(args: UpdateKnowledgeBaseTemplateUriCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateKnowledgeBaseTemplateUriCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateAssistantAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAssistantAssociationRequest, CreateAssistantAssociationResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface CreateAssistantAssociationCommandInput extends CreateAssistantAssociationRequest {
    }
    export interface CreateAssistantAssociationCommandOutput extends CreateAssistantAssociationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an association between an Amazon Connect Wisdom assistant and another resource. Currently, the
        *       only supported association is with a knowledge base. An assistant can have only a single
        *       association.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, CreateAssistantAssociationCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, CreateAssistantAssociationCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new CreateAssistantAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssistantAssociationCommandInput} for command's `input` shape.
        * @see {@link CreateAssistantAssociationCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class CreateAssistantAssociationCommand extends $Command<CreateAssistantAssociationCommandInput, CreateAssistantAssociationCommandOutput, WisdomClientResolvedConfig> {
            readonly input: CreateAssistantAssociationCommandInput;
            constructor(input: CreateAssistantAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssistantAssociationCommandInput, CreateAssistantAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateAssistantCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAssistantRequest, CreateAssistantResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface CreateAssistantCommandInput extends CreateAssistantRequest {
    }
    export interface CreateAssistantCommandOutput extends CreateAssistantResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Connect Wisdom assistant.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, CreateAssistantCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, CreateAssistantCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new CreateAssistantCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssistantCommandInput} for command's `input` shape.
        * @see {@link CreateAssistantCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class CreateAssistantCommand extends $Command<CreateAssistantCommandInput, CreateAssistantCommandOutput, WisdomClientResolvedConfig> {
            readonly input: CreateAssistantCommandInput;
            constructor(input: CreateAssistantCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssistantCommandInput, CreateAssistantCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateContentRequest, CreateContentResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface CreateContentCommandInput extends CreateContentRequest {
    }
    export interface CreateContentCommandOutput extends CreateContentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates Wisdom content. Before to calling this API, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a> to
        *       upload an asset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, CreateContentCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, CreateContentCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new CreateContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateContentCommandInput} for command's `input` shape.
        * @see {@link CreateContentCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class CreateContentCommand extends $Command<CreateContentCommandInput, CreateContentCommandOutput, WisdomClientResolvedConfig> {
            readonly input: CreateContentCommandInput;
            constructor(input: CreateContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateContentCommandInput, CreateContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateKnowledgeBaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateKnowledgeBaseRequest, CreateKnowledgeBaseResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface CreateKnowledgeBaseCommandInput extends CreateKnowledgeBaseRequest {
    }
    export interface CreateKnowledgeBaseCommandOutput extends CreateKnowledgeBaseResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a knowledge base.</p>
        *          <note>
        *             <p>When using this API, you cannot reuse <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html">Amazon AppIntegrations</a>
        *         DataIntegrations with external knowledge bases such as Salesforce and ServiceNow. If you do,
        *         you'll get an <code>InvalidRequestException</code> error. </p>
        *
        *             <p>For example, you're programmatically managing your external knowledge base, and you want
        *         to add or remove one of the fields that is being ingested from Salesforce. Do the
        *         following:</p>
        *             <ol>
        *                <li>
        *                   <p>Call <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_DeleteKnowledgeBase.html">DeleteKnowledgeBase</a>.</p>
        *                </li>
        *                <li>
        *                   <p>Call <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html">DeleteDataIntegration</a>.</p>
        *                </li>
        *                <li>
        *                   <p>Call <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration</a> to recreate the DataIntegration or a create different
        *             one.</p>
        *                </li>
        *                <li>
        *                   <p>Call CreateKnowledgeBase.</p>
        *                </li>
        *             </ol>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, CreateKnowledgeBaseCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, CreateKnowledgeBaseCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new CreateKnowledgeBaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateKnowledgeBaseCommandInput} for command's `input` shape.
        * @see {@link CreateKnowledgeBaseCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class CreateKnowledgeBaseCommand extends $Command<CreateKnowledgeBaseCommandInput, CreateKnowledgeBaseCommandOutput, WisdomClientResolvedConfig> {
            readonly input: CreateKnowledgeBaseCommandInput;
            constructor(input: CreateKnowledgeBaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateKnowledgeBaseCommandInput, CreateKnowledgeBaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSessionRequest, CreateSessionResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface CreateSessionCommandInput extends CreateSessionRequest {
    }
    export interface CreateSessionCommandOutput extends CreateSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a session. A session is a contextual container used for generating
        *       recommendations. Amazon Connect creates a new Wisdom session for each contact on which Wisdom is
        *       enabled.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, CreateSessionCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, CreateSessionCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new CreateSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSessionCommandInput} for command's `input` shape.
        * @see {@link CreateSessionCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class CreateSessionCommand extends $Command<CreateSessionCommandInput, CreateSessionCommandOutput, WisdomClientResolvedConfig> {
            readonly input: CreateSessionCommandInput;
            constructor(input: CreateSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSessionCommandInput, CreateSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteAssistantAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAssistantAssociationRequest, DeleteAssistantAssociationResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface DeleteAssistantAssociationCommandInput extends DeleteAssistantAssociationRequest {
    }
    export interface DeleteAssistantAssociationCommandOutput extends DeleteAssistantAssociationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an assistant association.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, DeleteAssistantAssociationCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, DeleteAssistantAssociationCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new DeleteAssistantAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssistantAssociationCommandInput} for command's `input` shape.
        * @see {@link DeleteAssistantAssociationCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class DeleteAssistantAssociationCommand extends $Command<DeleteAssistantAssociationCommandInput, DeleteAssistantAssociationCommandOutput, WisdomClientResolvedConfig> {
            readonly input: DeleteAssistantAssociationCommandInput;
            constructor(input: DeleteAssistantAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssistantAssociationCommandInput, DeleteAssistantAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteAssistantCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAssistantRequest, DeleteAssistantResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface DeleteAssistantCommandInput extends DeleteAssistantRequest {
    }
    export interface DeleteAssistantCommandOutput extends DeleteAssistantResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an assistant.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, DeleteAssistantCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, DeleteAssistantCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new DeleteAssistantCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssistantCommandInput} for command's `input` shape.
        * @see {@link DeleteAssistantCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class DeleteAssistantCommand extends $Command<DeleteAssistantCommandInput, DeleteAssistantCommandOutput, WisdomClientResolvedConfig> {
            readonly input: DeleteAssistantCommandInput;
            constructor(input: DeleteAssistantCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssistantCommandInput, DeleteAssistantCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteContentRequest, DeleteContentResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface DeleteContentCommandInput extends DeleteContentRequest {
    }
    export interface DeleteContentCommandOutput extends DeleteContentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the content.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, DeleteContentCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, DeleteContentCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new DeleteContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteContentCommandInput} for command's `input` shape.
        * @see {@link DeleteContentCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class DeleteContentCommand extends $Command<DeleteContentCommandInput, DeleteContentCommandOutput, WisdomClientResolvedConfig> {
            readonly input: DeleteContentCommandInput;
            constructor(input: DeleteContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteContentCommandInput, DeleteContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteKnowledgeBaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteKnowledgeBaseRequest, DeleteKnowledgeBaseResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface DeleteKnowledgeBaseCommandInput extends DeleteKnowledgeBaseRequest {
    }
    export interface DeleteKnowledgeBaseCommandOutput extends DeleteKnowledgeBaseResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the knowledge base.</p>
        *          <note>
        *             <p>When you use this API to delete an external knowledge base such as Salesforce or
        *         ServiceNow, you must also delete the <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/Welcome.html">Amazon AppIntegrations</a> DataIntegration.
        *         This is because you can't reuse the DataIntegration after it's been associated with an
        *         external knowledge base. However, you can delete and recreate it. See <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_DeleteDataIntegration.html">DeleteDataIntegration</a> and <a href="https://docs.aws.amazon.com/appintegrations/latest/APIReference/API_CreateDataIntegration.html">CreateDataIntegration</a> in the <i>Amazon AppIntegrations API
        *         Reference</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, DeleteKnowledgeBaseCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, DeleteKnowledgeBaseCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new DeleteKnowledgeBaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteKnowledgeBaseCommandInput} for command's `input` shape.
        * @see {@link DeleteKnowledgeBaseCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class DeleteKnowledgeBaseCommand extends $Command<DeleteKnowledgeBaseCommandInput, DeleteKnowledgeBaseCommandOutput, WisdomClientResolvedConfig> {
            readonly input: DeleteKnowledgeBaseCommandInput;
            constructor(input: DeleteKnowledgeBaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteKnowledgeBaseCommandInput, DeleteKnowledgeBaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetAssistantAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAssistantAssociationRequest, GetAssistantAssociationResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface GetAssistantAssociationCommandInput extends GetAssistantAssociationRequest {
    }
    export interface GetAssistantAssociationCommandOutput extends GetAssistantAssociationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about an assistant association.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, GetAssistantAssociationCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, GetAssistantAssociationCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new GetAssistantAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAssistantAssociationCommandInput} for command's `input` shape.
        * @see {@link GetAssistantAssociationCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class GetAssistantAssociationCommand extends $Command<GetAssistantAssociationCommandInput, GetAssistantAssociationCommandOutput, WisdomClientResolvedConfig> {
            readonly input: GetAssistantAssociationCommandInput;
            constructor(input: GetAssistantAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAssistantAssociationCommandInput, GetAssistantAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetAssistantCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAssistantRequest, GetAssistantResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface GetAssistantCommandInput extends GetAssistantRequest {
    }
    export interface GetAssistantCommandOutput extends GetAssistantResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about an assistant.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, GetAssistantCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, GetAssistantCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new GetAssistantCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAssistantCommandInput} for command's `input` shape.
        * @see {@link GetAssistantCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class GetAssistantCommand extends $Command<GetAssistantCommandInput, GetAssistantCommandOutput, WisdomClientResolvedConfig> {
            readonly input: GetAssistantCommandInput;
            constructor(input: GetAssistantCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAssistantCommandInput, GetAssistantCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetContentRequest, GetContentResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface GetContentCommandInput extends GetContentRequest {
    }
    export interface GetContentCommandOutput extends GetContentResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves content, including a pre-signed URL to download the content.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, GetContentCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, GetContentCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new GetContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContentCommandInput} for command's `input` shape.
        * @see {@link GetContentCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class GetContentCommand extends $Command<GetContentCommandInput, GetContentCommandOutput, WisdomClientResolvedConfig> {
            readonly input: GetContentCommandInput;
            constructor(input: GetContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContentCommandInput, GetContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetContentSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetContentSummaryRequest, GetContentSummaryResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface GetContentSummaryCommandInput extends GetContentSummaryRequest {
    }
    export interface GetContentSummaryCommandOutput extends GetContentSummaryResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves summary information about the content.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, GetContentSummaryCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, GetContentSummaryCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new GetContentSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContentSummaryCommandInput} for command's `input` shape.
        * @see {@link GetContentSummaryCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class GetContentSummaryCommand extends $Command<GetContentSummaryCommandInput, GetContentSummaryCommandOutput, WisdomClientResolvedConfig> {
            readonly input: GetContentSummaryCommandInput;
            constructor(input: GetContentSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContentSummaryCommandInput, GetContentSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetKnowledgeBaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetKnowledgeBaseRequest, GetKnowledgeBaseResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface GetKnowledgeBaseCommandInput extends GetKnowledgeBaseRequest {
    }
    export interface GetKnowledgeBaseCommandOutput extends GetKnowledgeBaseResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the knowledge base.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, GetKnowledgeBaseCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, GetKnowledgeBaseCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new GetKnowledgeBaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetKnowledgeBaseCommandInput} for command's `input` shape.
        * @see {@link GetKnowledgeBaseCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class GetKnowledgeBaseCommand extends $Command<GetKnowledgeBaseCommandInput, GetKnowledgeBaseCommandOutput, WisdomClientResolvedConfig> {
            readonly input: GetKnowledgeBaseCommandInput;
            constructor(input: GetKnowledgeBaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetKnowledgeBaseCommandInput, GetKnowledgeBaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetRecommendationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRecommendationsRequest, GetRecommendationsResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface GetRecommendationsCommandInput extends GetRecommendationsRequest {
    }
    export interface GetRecommendationsCommandOutput extends GetRecommendationsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves recommendations for the specified session. To avoid retrieving the same
        *       recommendations in subsequent calls, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_NotifyRecommendationsReceived.html">NotifyRecommendationsReceived</a>. This API supports long-polling behavior with the
        *         <code>waitTimeSeconds</code> parameter. Short poll is the default behavior and only returns
        *       recommendations already available. To perform a manual query against an assistant, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_QueryAssistant.html">QueryAssistant</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, GetRecommendationsCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, GetRecommendationsCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new GetRecommendationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRecommendationsCommandInput} for command's `input` shape.
        * @see {@link GetRecommendationsCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class GetRecommendationsCommand extends $Command<GetRecommendationsCommandInput, GetRecommendationsCommandOutput, WisdomClientResolvedConfig> {
            readonly input: GetRecommendationsCommandInput;
            constructor(input: GetRecommendationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRecommendationsCommandInput, GetRecommendationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSessionRequest, GetSessionResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface GetSessionCommandInput extends GetSessionRequest {
    }
    export interface GetSessionCommandOutput extends GetSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information for a specified session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, GetSessionCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, GetSessionCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new GetSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSessionCommandInput} for command's `input` shape.
        * @see {@link GetSessionCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class GetSessionCommand extends $Command<GetSessionCommandInput, GetSessionCommandOutput, WisdomClientResolvedConfig> {
            readonly input: GetSessionCommandInput;
            constructor(input: GetSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSessionCommandInput, GetSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListAssistantAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssistantAssociationsRequest, ListAssistantAssociationsResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface ListAssistantAssociationsCommandInput extends ListAssistantAssociationsRequest {
    }
    export interface ListAssistantAssociationsCommandOutput extends ListAssistantAssociationsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists information about assistant associations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, ListAssistantAssociationsCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, ListAssistantAssociationsCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new ListAssistantAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssistantAssociationsCommandInput} for command's `input` shape.
        * @see {@link ListAssistantAssociationsCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class ListAssistantAssociationsCommand extends $Command<ListAssistantAssociationsCommandInput, ListAssistantAssociationsCommandOutput, WisdomClientResolvedConfig> {
            readonly input: ListAssistantAssociationsCommandInput;
            constructor(input: ListAssistantAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssistantAssociationsCommandInput, ListAssistantAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListAssistantsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssistantsRequest, ListAssistantsResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface ListAssistantsCommandInput extends ListAssistantsRequest {
    }
    export interface ListAssistantsCommandOutput extends ListAssistantsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists information about assistants.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, ListAssistantsCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, ListAssistantsCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new ListAssistantsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssistantsCommandInput} for command's `input` shape.
        * @see {@link ListAssistantsCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class ListAssistantsCommand extends $Command<ListAssistantsCommandInput, ListAssistantsCommandOutput, WisdomClientResolvedConfig> {
            readonly input: ListAssistantsCommandInput;
            constructor(input: ListAssistantsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssistantsCommandInput, ListAssistantsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListContentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListContentsRequest, ListContentsResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface ListContentsCommandInput extends ListContentsRequest {
    }
    export interface ListContentsCommandOutput extends ListContentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the content.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, ListContentsCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, ListContentsCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new ListContentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListContentsCommandInput} for command's `input` shape.
        * @see {@link ListContentsCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class ListContentsCommand extends $Command<ListContentsCommandInput, ListContentsCommandOutput, WisdomClientResolvedConfig> {
            readonly input: ListContentsCommandInput;
            constructor(input: ListContentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListContentsCommandInput, ListContentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListKnowledgeBasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListKnowledgeBasesRequest, ListKnowledgeBasesResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface ListKnowledgeBasesCommandInput extends ListKnowledgeBasesRequest {
    }
    export interface ListKnowledgeBasesCommandOutput extends ListKnowledgeBasesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the knowledge bases.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, ListKnowledgeBasesCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, ListKnowledgeBasesCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new ListKnowledgeBasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListKnowledgeBasesCommandInput} for command's `input` shape.
        * @see {@link ListKnowledgeBasesCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class ListKnowledgeBasesCommand extends $Command<ListKnowledgeBasesCommandInput, ListKnowledgeBasesCommandOutput, WisdomClientResolvedConfig> {
            readonly input: ListKnowledgeBasesCommandInput;
            constructor(input: ListKnowledgeBasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListKnowledgeBasesCommandInput, ListKnowledgeBasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, ListTagsForResourceCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, ListTagsForResourceCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, WisdomClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/NotifyRecommendationsReceivedCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { NotifyRecommendationsReceivedRequest, NotifyRecommendationsReceivedResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface NotifyRecommendationsReceivedCommandInput extends NotifyRecommendationsReceivedRequest {
    }
    export interface NotifyRecommendationsReceivedCommandOutput extends NotifyRecommendationsReceivedResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified recommendations from the specified assistant's queue of newly
        *       available recommendations. You can use this API in conjunction with <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html">GetRecommendations</a> and a <code>waitTimeSeconds</code> input for long-polling
        *       behavior and avoiding duplicate recommendations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, NotifyRecommendationsReceivedCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, NotifyRecommendationsReceivedCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new NotifyRecommendationsReceivedCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link NotifyRecommendationsReceivedCommandInput} for command's `input` shape.
        * @see {@link NotifyRecommendationsReceivedCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class NotifyRecommendationsReceivedCommand extends $Command<NotifyRecommendationsReceivedCommandInput, NotifyRecommendationsReceivedCommandOutput, WisdomClientResolvedConfig> {
            readonly input: NotifyRecommendationsReceivedCommandInput;
            constructor(input: NotifyRecommendationsReceivedCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<NotifyRecommendationsReceivedCommandInput, NotifyRecommendationsReceivedCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/QueryAssistantCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { QueryAssistantRequest, QueryAssistantResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface QueryAssistantCommandInput extends QueryAssistantRequest {
    }
    export interface QueryAssistantCommandOutput extends QueryAssistantResponse, __MetadataBearer {
    }
    /**
        * <p>Performs a manual search against the specified assistant. To retrieve recommendations for
        *       an assistant, use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetRecommendations.html">GetRecommendations</a>.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, QueryAssistantCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, QueryAssistantCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new QueryAssistantCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link QueryAssistantCommandInput} for command's `input` shape.
        * @see {@link QueryAssistantCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class QueryAssistantCommand extends $Command<QueryAssistantCommandInput, QueryAssistantCommandOutput, WisdomClientResolvedConfig> {
            readonly input: QueryAssistantCommandInput;
            constructor(input: QueryAssistantCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<QueryAssistantCommandInput, QueryAssistantCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/RemoveKnowledgeBaseTemplateUriCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveKnowledgeBaseTemplateUriRequest, RemoveKnowledgeBaseTemplateUriResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface RemoveKnowledgeBaseTemplateUriCommandInput extends RemoveKnowledgeBaseTemplateUriRequest {
    }
    export interface RemoveKnowledgeBaseTemplateUriCommandOutput extends RemoveKnowledgeBaseTemplateUriResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a URI template from a knowledge base.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, RemoveKnowledgeBaseTemplateUriCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, RemoveKnowledgeBaseTemplateUriCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new RemoveKnowledgeBaseTemplateUriCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveKnowledgeBaseTemplateUriCommandInput} for command's `input` shape.
        * @see {@link RemoveKnowledgeBaseTemplateUriCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class RemoveKnowledgeBaseTemplateUriCommand extends $Command<RemoveKnowledgeBaseTemplateUriCommandInput, RemoveKnowledgeBaseTemplateUriCommandOutput, WisdomClientResolvedConfig> {
            readonly input: RemoveKnowledgeBaseTemplateUriCommandInput;
            constructor(input: RemoveKnowledgeBaseTemplateUriCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveKnowledgeBaseTemplateUriCommandInput, RemoveKnowledgeBaseTemplateUriCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/SearchContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchContentRequest, SearchContentResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface SearchContentCommandInput extends SearchContentRequest {
    }
    export interface SearchContentCommandOutput extends SearchContentResponse, __MetadataBearer {
    }
    /**
        * <p>Searches for content in a specified knowledge base. Can be used to get a specific content
        *       resource by its name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, SearchContentCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, SearchContentCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new SearchContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchContentCommandInput} for command's `input` shape.
        * @see {@link SearchContentCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class SearchContentCommand extends $Command<SearchContentCommandInput, SearchContentCommandOutput, WisdomClientResolvedConfig> {
            readonly input: SearchContentCommandInput;
            constructor(input: SearchContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchContentCommandInput, SearchContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/SearchSessionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchSessionsRequest, SearchSessionsResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface SearchSessionsCommandInput extends SearchSessionsRequest {
    }
    export interface SearchSessionsCommandOutput extends SearchSessionsResponse, __MetadataBearer {
    }
    /**
        * <p>Searches for sessions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, SearchSessionsCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, SearchSessionsCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new SearchSessionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchSessionsCommandInput} for command's `input` shape.
        * @see {@link SearchSessionsCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class SearchSessionsCommand extends $Command<SearchSessionsCommandInput, SearchSessionsCommandOutput, WisdomClientResolvedConfig> {
            readonly input: SearchSessionsCommandInput;
            constructor(input: SearchSessionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchSessionsCommandInput, SearchSessionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/StartContentUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartContentUploadRequest, StartContentUploadResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface StartContentUploadCommandInput extends StartContentUploadRequest {
    }
    export interface StartContentUploadCommandOutput extends StartContentUploadResponse, __MetadataBearer {
    }
    /**
        * <p>Get a URL to upload content to a knowledge base. To upload content, first make a PUT
        *       request to the returned URL with your file, making sure to include the required headers. Then
        *       use <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_CreateContent.html">CreateContent</a> to finalize the content creation process or <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_UpdateContent.html">UpdateContent</a> to modify an existing resource. You can only upload content to a
        *       knowledge base of type CUSTOM.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, StartContentUploadCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, StartContentUploadCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new StartContentUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartContentUploadCommandInput} for command's `input` shape.
        * @see {@link StartContentUploadCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class StartContentUploadCommand extends $Command<StartContentUploadCommandInput, StartContentUploadCommandOutput, WisdomClientResolvedConfig> {
            readonly input: StartContentUploadCommandInput;
            constructor(input: StartContentUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartContentUploadCommandInput, StartContentUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds the specified tags to the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, TagResourceCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, TagResourceCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, WisdomClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, UntagResourceCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, UntagResourceCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, WisdomClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UpdateContentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateContentRequest, UpdateContentResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface UpdateContentCommandInput extends UpdateContentRequest {
    }
    export interface UpdateContentCommandOutput extends UpdateContentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates information about the content.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, UpdateContentCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, UpdateContentCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new UpdateContentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateContentCommandInput} for command's `input` shape.
        * @see {@link UpdateContentCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class UpdateContentCommand extends $Command<UpdateContentCommandInput, UpdateContentCommandOutput, WisdomClientResolvedConfig> {
            readonly input: UpdateContentCommandInput;
            constructor(input: UpdateContentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateContentCommandInput, UpdateContentCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UpdateKnowledgeBaseTemplateUriCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateKnowledgeBaseTemplateUriRequest, UpdateKnowledgeBaseTemplateUriResponse } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient";
    export interface UpdateKnowledgeBaseTemplateUriCommandInput extends UpdateKnowledgeBaseTemplateUriRequest {
    }
    export interface UpdateKnowledgeBaseTemplateUriCommandOutput extends UpdateKnowledgeBaseTemplateUriResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the template URI of a knowledge base. This is only supported for knowledge bases
        *       of type EXTERNAL. Include a single variable in <code>${variable}</code> format; this
        *       interpolated by Wisdom using ingested content. For example, if you ingest a Salesforce
        *       article, it has an <code>Id</code> value, and you can set the template URI to
        *         <code>https://myInstanceName.lightning.force.com/lightning/r/Knowledge__kav/*${Id}*\/view</code>.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WisdomClient, UpdateKnowledgeBaseTemplateUriCommand } from "@aws-sdk/client-wisdom"; // ES Modules import
        * // const { WisdomClient, UpdateKnowledgeBaseTemplateUriCommand } = require("@aws-sdk/client-wisdom"); // CommonJS import
        * const client = new WisdomClient(config);
        * const command = new UpdateKnowledgeBaseTemplateUriCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateKnowledgeBaseTemplateUriCommandInput} for command's `input` shape.
        * @see {@link UpdateKnowledgeBaseTemplateUriCommandOutput} for command's `response` shape.
        * @see {@link WisdomClientResolvedConfig | config} for WisdomClient's `config` shape.
        *
        */
    export class UpdateKnowledgeBaseTemplateUriCommand extends $Command<UpdateKnowledgeBaseTemplateUriCommandInput, UpdateKnowledgeBaseTemplateUriCommandOutput, WisdomClientResolvedConfig> {
            readonly input: UpdateKnowledgeBaseTemplateUriCommandInput;
            constructor(input: UpdateKnowledgeBaseTemplateUriCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WisdomClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateKnowledgeBaseTemplateUriCommandInput, UpdateKnowledgeBaseTemplateUriCommandOutput>;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/WisdomClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateAssistantAssociationCommandInput, CreateAssistantAssociationCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateAssistantAssociationCommand";
    import { CreateAssistantCommandInput, CreateAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateAssistantCommand";
    import { CreateContentCommandInput, CreateContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateContentCommand";
    import { CreateKnowledgeBaseCommandInput, CreateKnowledgeBaseCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateKnowledgeBaseCommand";
    import { CreateSessionCommandInput, CreateSessionCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/CreateSessionCommand";
    import { DeleteAssistantAssociationCommandInput, DeleteAssistantAssociationCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteAssistantAssociationCommand";
    import { DeleteAssistantCommandInput, DeleteAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteAssistantCommand";
    import { DeleteContentCommandInput, DeleteContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteContentCommand";
    import { DeleteKnowledgeBaseCommandInput, DeleteKnowledgeBaseCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/DeleteKnowledgeBaseCommand";
    import { GetAssistantAssociationCommandInput, GetAssistantAssociationCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetAssistantAssociationCommand";
    import { GetAssistantCommandInput, GetAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetAssistantCommand";
    import { GetContentCommandInput, GetContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetContentCommand";
    import { GetContentSummaryCommandInput, GetContentSummaryCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetContentSummaryCommand";
    import { GetKnowledgeBaseCommandInput, GetKnowledgeBaseCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetKnowledgeBaseCommand";
    import { GetRecommendationsCommandInput, GetRecommendationsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetRecommendationsCommand";
    import { GetSessionCommandInput, GetSessionCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/GetSessionCommand";
    import { ListAssistantAssociationsCommandInput, ListAssistantAssociationsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListAssistantAssociationsCommand";
    import { ListAssistantsCommandInput, ListAssistantsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListAssistantsCommand";
    import { ListContentsCommandInput, ListContentsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListContentsCommand";
    import { ListKnowledgeBasesCommandInput, ListKnowledgeBasesCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListKnowledgeBasesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/ListTagsForResourceCommand";
    import { NotifyRecommendationsReceivedCommandInput, NotifyRecommendationsReceivedCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/NotifyRecommendationsReceivedCommand";
    import { QueryAssistantCommandInput, QueryAssistantCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/QueryAssistantCommand";
    import { RemoveKnowledgeBaseTemplateUriCommandInput, RemoveKnowledgeBaseTemplateUriCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/RemoveKnowledgeBaseTemplateUriCommand";
    import { SearchContentCommandInput, SearchContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/SearchContentCommand";
    import { SearchSessionsCommandInput, SearchSessionsCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/SearchSessionsCommand";
    import { StartContentUploadCommandInput, StartContentUploadCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/StartContentUploadCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UntagResourceCommand";
    import { UpdateContentCommandInput, UpdateContentCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UpdateContentCommand";
    import { UpdateKnowledgeBaseTemplateUriCommandInput, UpdateKnowledgeBaseTemplateUriCommandOutput } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/commands/UpdateKnowledgeBaseTemplateUriCommand";
    export type ServiceInputTypes = CreateAssistantAssociationCommandInput | CreateAssistantCommandInput | CreateContentCommandInput | CreateKnowledgeBaseCommandInput | CreateSessionCommandInput | DeleteAssistantAssociationCommandInput | DeleteAssistantCommandInput | DeleteContentCommandInput | DeleteKnowledgeBaseCommandInput | GetAssistantAssociationCommandInput | GetAssistantCommandInput | GetContentCommandInput | GetContentSummaryCommandInput | GetKnowledgeBaseCommandInput | GetRecommendationsCommandInput | GetSessionCommandInput | ListAssistantAssociationsCommandInput | ListAssistantsCommandInput | ListContentsCommandInput | ListKnowledgeBasesCommandInput | ListTagsForResourceCommandInput | NotifyRecommendationsReceivedCommandInput | QueryAssistantCommandInput | RemoveKnowledgeBaseTemplateUriCommandInput | SearchContentCommandInput | SearchSessionsCommandInput | StartContentUploadCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateContentCommandInput | UpdateKnowledgeBaseTemplateUriCommandInput;
    export type ServiceOutputTypes = CreateAssistantAssociationCommandOutput | CreateAssistantCommandOutput | CreateContentCommandOutput | CreateKnowledgeBaseCommandOutput | CreateSessionCommandOutput | DeleteAssistantAssociationCommandOutput | DeleteAssistantCommandOutput | DeleteContentCommandOutput | DeleteKnowledgeBaseCommandOutput | GetAssistantAssociationCommandOutput | GetAssistantCommandOutput | GetContentCommandOutput | GetContentSummaryCommandOutput | GetKnowledgeBaseCommandOutput | GetRecommendationsCommandOutput | GetSessionCommandOutput | ListAssistantAssociationsCommandOutput | ListAssistantsCommandOutput | ListContentsCommandOutput | ListKnowledgeBasesCommandOutput | ListTagsForResourceCommandOutput | NotifyRecommendationsReceivedCommandOutput | QueryAssistantCommandOutput | RemoveKnowledgeBaseTemplateUriCommandOutput | SearchContentCommandOutput | SearchSessionsCommandOutput | StartContentUploadCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateContentCommandOutput | UpdateKnowledgeBaseTemplateUriCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type WisdomClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of WisdomClient class constructor that set the region, credentials and other options.
        */
    export interface WisdomClientConfig extends WisdomClientConfigType {
    }
    type WisdomClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of WisdomClient class. This is resolved and normalized from the {@link WisdomClientConfig | constructor configuration interface}.
        */
    export interface WisdomClientResolvedConfig extends WisdomClientResolvedConfigType {
    }
    /**
        * <p>Amazon Connect Wisdom delivers agents the information they need to solve customer issues as they're actively
        *         speaking with customers. Agents can search across connected repositories from within their agent desktop
        *         to find answers quickly. Use the Amazon Connect Wisdom APIs to create an assistant and a knowledge base, for example, or manage content by uploading custom files.</p>
        */
    export class WisdomClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, WisdomClientResolvedConfig> {
            /**
                * The resolved configuration of WisdomClient class. This is resolved and normalized from the {@link WisdomClientConfig | constructor configuration interface}.
                */
            readonly config: WisdomClientResolvedConfig;
            constructor(configuration: WisdomClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { WisdomServiceException as __BaseException } from "@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/WisdomServiceException";
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Configuration information for Amazon AppIntegrations to automatically ingest content.</p>
        */
    export interface AppIntegrationsConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.</p>
                */
            appIntegrationArn: string | undefined;
            /**
                * <p>The fields from the source that are made available to your agents in Wisdom. </p>
                *          <ul>
                *             <li>
                *                <p> For <a href="https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm"> Salesforce</a>, you must include at least <code>Id</code>,
                *             <code>ArticleNumber</code>, <code>VersionNumber</code>, <code>Title</code>,
                *             <code>PublishStatus</code>, and <code>IsDeleted</code>. </p>
                *             </li>
                *             <li>
                *                <p>For <a href="https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api"> ServiceNow</a>, you must include at least <code>number</code>,
                *             <code>short_description</code>, <code>sys_mod_count</code>, <code>workflow_state</code>,
                *           and <code>active</code>. </p>
                *             </li>
                *          </ul>
                *          <p>Make sure to include additional fields. These fields are indexed and used to source
                *       recommendations. </p>
                */
            objectFields: string[] | undefined;
    }
    export namespace AppIntegrationsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppIntegrationsConfiguration) => any;
    }
    /**
        * <p>The request could not be processed because of conflict in the current state of the
        *       resource. For example, if you're using a <code>Create</code> API (such as
        *         <code>CreateAssistant</code>) that accepts name, a conflicting resource (usually with the
        *       same name) is being created or mutated.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The data that is input into Wisdom as a result of the assistant association.</p>
        */
    export type AssistantAssociationInputData = AssistantAssociationInputData.KnowledgeBaseIdMember | AssistantAssociationInputData.$UnknownMember;
    export namespace AssistantAssociationInputData {
            /**
                * <p>The identifier of the knowledge base.</p>
                */
            interface KnowledgeBaseIdMember {
                    knowledgeBaseId: string;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    knowledgeBaseId?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    knowledgeBaseId: (value: string) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: AssistantAssociationInputData, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssistantAssociationInputData) => any;
    }
    export enum AssociationType {
            KNOWLEDGE_BASE = "KNOWLEDGE_BASE"
    }
    export interface CreateAssistantAssociationRequest {
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The type of association.</p>
                */
            associationType: AssociationType | string | undefined;
            /**
                * <p>The identifier of the associated resource.</p>
                */
            association: AssistantAssociationInputData | undefined;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *    request.</p>
                */
            clientToken?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateAssistantAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssistantAssociationRequest) => any;
    }
    /**
        * <p>Association information about the knowledge base.</p>
        */
    export interface KnowledgeBaseAssociationData {
            /**
                * <p>The identifier of the knowledge base.</p>
                */
            knowledgeBaseId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
                */
            knowledgeBaseArn?: string;
    }
    export namespace KnowledgeBaseAssociationData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KnowledgeBaseAssociationData) => any;
    }
    /**
        * <p>The data that is output as a result of the assistant association.</p>
        */
    export type AssistantAssociationOutputData = AssistantAssociationOutputData.KnowledgeBaseAssociationMember | AssistantAssociationOutputData.$UnknownMember;
    export namespace AssistantAssociationOutputData {
            /**
                * <p>The knowledge base where output data is sent.</p>
                */
            interface KnowledgeBaseAssociationMember {
                    knowledgeBaseAssociation: KnowledgeBaseAssociationData;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    knowledgeBaseAssociation?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    knowledgeBaseAssociation: (value: KnowledgeBaseAssociationData) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: AssistantAssociationOutputData, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssistantAssociationOutputData) => any;
    }
    /**
        * <p>Information about the assistant association.</p>
        */
    export interface AssistantAssociationData {
            /**
                * <p>The identifier of the assistant association.</p>
                */
            assistantAssociationId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the assistant association.</p>
                */
            assistantAssociationArn: string | undefined;
            /**
                * <p>The identifier of the Wisdom assistant.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
                */
            assistantArn: string | undefined;
            /**
                * <p>The type of association.</p>
                */
            associationType: AssociationType | string | undefined;
            /**
                * <p>A union type that currently has a single argument, the knowledge base ID.</p>
                */
            associationData: AssistantAssociationOutputData | undefined;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace AssistantAssociationData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssistantAssociationData) => any;
    }
    export interface CreateAssistantAssociationResponse {
            /**
                * <p>The assistant association.</p>
                */
            assistantAssociation?: AssistantAssociationData;
    }
    export namespace CreateAssistantAssociationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssistantAssociationResponse) => any;
    }
    /**
        * <p>The specified resource does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The specified resource name.</p>
                */
            resourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>You've exceeded your service quota. To perform the requested action, remove some of the
        *       relevant resources, or use service quotas to request a service quota increase.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The input fails to satisfy the constraints specified by a service.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface DeleteAssistantAssociationRequest {
            /**
                * <p>The identifier of the assistant association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantAssociationId: string | undefined;
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
    }
    export namespace DeleteAssistantAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssistantAssociationRequest) => any;
    }
    export interface DeleteAssistantAssociationResponse {
    }
    export namespace DeleteAssistantAssociationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssistantAssociationResponse) => any;
    }
    export interface GetAssistantAssociationRequest {
            /**
                * <p>The identifier of the assistant association. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantAssociationId: string | undefined;
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
    }
    export namespace GetAssistantAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssistantAssociationRequest) => any;
    }
    export interface GetAssistantAssociationResponse {
            /**
                * <p>The assistant association.</p>
                */
            assistantAssociation?: AssistantAssociationData;
    }
    export namespace GetAssistantAssociationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssistantAssociationResponse) => any;
    }
    export interface ListAssistantAssociationsRequest {
            /**
                * <p>The token for the next set of results. Use the value returned in the previous
                * response in the next request to retrieve the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
    }
    export namespace ListAssistantAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssistantAssociationsRequest) => any;
    }
    /**
        * <p>Summary information about the assistant association.</p>
        */
    export interface AssistantAssociationSummary {
            /**
                * <p>The identifier of the assistant association.</p>
                */
            assistantAssociationId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the assistant association.</p>
                */
            assistantAssociationArn: string | undefined;
            /**
                * <p>The identifier of the Wisdom assistant.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
                */
            assistantArn: string | undefined;
            /**
                * <p>The type of association.</p>
                */
            associationType: AssociationType | string | undefined;
            /**
                * <p>The association data.</p>
                */
            associationData: AssistantAssociationOutputData | undefined;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace AssistantAssociationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssistantAssociationSummary) => any;
    }
    export interface ListAssistantAssociationsResponse {
            /**
                * <p>Summary information about assistant associations.</p>
                */
            assistantAssociationSummaries: AssistantAssociationSummary[] | undefined;
            /**
                * <p>If there are additional results, this is the token for the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListAssistantAssociationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssistantAssociationsResponse) => any;
    }
    /**
        * <p>The KMS key used for encryption.</p>
        */
    export interface ServerSideEncryptionConfiguration {
            /**
                * <p>The KMS key. For information about valid ID values, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id">Key identifiers (KeyId)</a>.</p>
                */
            kmsKeyId?: string;
    }
    export namespace ServerSideEncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerSideEncryptionConfiguration) => any;
    }
    export enum AssistantType {
            AGENT = "AGENT"
    }
    export interface CreateAssistantRequest {
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *    request.</p>
                */
            clientToken?: string;
            /**
                * <p>The name of the assistant.</p>
                */
            name: string | undefined;
            /**
                * <p>The type of assistant.</p>
                */
            type: AssistantType | string | undefined;
            /**
                * <p>The description of the assistant.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The KMS key used for encryption.</p>
                */
            serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
    }
    export namespace CreateAssistantRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssistantRequest) => any;
    }
    export enum AssistantStatus {
            ACTIVE = "ACTIVE",
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS"
    }
    /**
        * <p>The assistant data.</p>
        */
    export interface AssistantData {
            /**
                * <p>The identifier of the Wisdom assistant.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
                */
            assistantArn: string | undefined;
            /**
                * <p>The name.</p>
                */
            name: string | undefined;
            /**
                * <p>The type of assistant.</p>
                */
            type: AssistantType | string | undefined;
            /**
                * <p>The status of the assistant.</p>
                */
            status: AssistantStatus | string | undefined;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The KMS key used for encryption.</p>
                */
            serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
    }
    export namespace AssistantData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssistantData) => any;
    }
    export interface CreateAssistantResponse {
            /**
                * <p>Information about the assistant.</p>
                */
            assistant?: AssistantData;
    }
    export namespace CreateAssistantResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssistantResponse) => any;
    }
    export interface DeleteAssistantRequest {
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
    }
    export namespace DeleteAssistantRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssistantRequest) => any;
    }
    export interface DeleteAssistantResponse {
    }
    export namespace DeleteAssistantResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssistantResponse) => any;
    }
    export interface GetAssistantRequest {
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
    }
    export namespace GetAssistantRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssistantRequest) => any;
    }
    export interface GetAssistantResponse {
            /**
                * <p>Information about the assistant.</p>
                */
            assistant?: AssistantData;
    }
    export namespace GetAssistantResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssistantResponse) => any;
    }
    export interface GetRecommendationsRequest {
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
            /**
                * <p>The duration (in seconds) for which the call waits for a recommendation to be made
                *       available before returning. If a recommendation is available, the call returns sooner than
                *         <code>WaitTimeSeconds</code>. If no messages are available and the wait time expires, the
                *       call returns successfully with an empty list.</p>
                */
            waitTimeSeconds?: number;
    }
    export namespace GetRecommendationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRecommendationsRequest) => any;
    }
    /**
        * <p>Reference information about the content.</p>
        */
    export interface ContentReference {
            /**
                * <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
                */
            knowledgeBaseArn?: string;
            /**
                * <p>The identifier of the knowledge base.</p>
                */
            knowledgeBaseId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the content.</p>
                */
            contentArn?: string;
            /**
                * <p>The identifier of the content.</p>
                */
            contentId?: string;
    }
    export namespace ContentReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContentReference) => any;
    }
    /**
        * <p>Offset specification to describe highlighting of document excerpts for rendering search
        *       results and recommendations.</p>
        */
    export interface Highlight {
            /**
                * <p>The offset for the start of the highlight.</p>
                */
            beginOffsetInclusive?: number;
            /**
                * <p>The offset for the end of the highlight.</p>
                */
            endOffsetExclusive?: number;
    }
    export namespace Highlight {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Highlight) => any;
    }
    /**
        * <p>The text of the document.</p>
        */
    export interface DocumentText {
            /**
                * <p>Text in the document.</p>
                */
            text?: string;
            /**
                * <p>Highlights in the document text.</p>
                */
            highlights?: Highlight[];
    }
    export namespace DocumentText {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentText) => any;
    }
    /**
        * <p>The document.</p>
        */
    export interface Document {
            /**
                * <p>A reference to the content resource.</p>
                */
            contentReference: ContentReference | undefined;
            /**
                * <p>The title of the document.</p>
                */
            title?: DocumentText;
            /**
                * <p>The excerpt from the document.</p>
                */
            excerpt?: DocumentText;
    }
    export namespace Document {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Document) => any;
    }
    export enum RelevanceLevel {
            HIGH = "HIGH",
            LOW = "LOW",
            MEDIUM = "MEDIUM"
    }
    export enum RecommendationType {
            KNOWLEDGE_CONTENT = "KNOWLEDGE_CONTENT"
    }
    /**
        * <p>Information about the recommendation.</p>
        */
    export interface RecommendationData {
            /**
                * <p>The identifier of the recommendation.</p>
                */
            recommendationId: string | undefined;
            /**
                * <p>The recommended document.</p>
                */
            document: Document | undefined;
            /**
                * <p>The relevance score of the recommendation.</p>
                */
            relevanceScore?: number;
            /**
                * <p>The relevance level of the recommendation.</p>
                */
            relevanceLevel?: RelevanceLevel | string;
            /**
                * <p>The type of recommendation.</p>
                */
            type?: RecommendationType | string;
    }
    export namespace RecommendationData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationData) => any;
    }
    /**
        * <p>Data associated with the QUERY RecommendationTriggerType.</p>
        */
    export interface QueryRecommendationTriggerData {
            /**
                * <p>The text associated with the recommendation trigger.</p>
                */
            text?: string;
    }
    export namespace QueryRecommendationTriggerData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryRecommendationTriggerData) => any;
    }
    /**
        * <p>A union type containing information related to the trigger.</p>
        */
    export type RecommendationTriggerData = RecommendationTriggerData.QueryMember | RecommendationTriggerData.$UnknownMember;
    export namespace RecommendationTriggerData {
            /**
                * <p>Data associated with the QUERY RecommendationTriggerType.</p>
                */
            interface QueryMember {
                    query: QueryRecommendationTriggerData;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    query?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    query: (value: QueryRecommendationTriggerData) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: RecommendationTriggerData, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationTriggerData) => any;
    }
    export enum RecommendationSourceType {
            ISSUE_DETECTION = "ISSUE_DETECTION",
            OTHER = "OTHER",
            RULE_EVALUATION = "RULE_EVALUATION"
    }
    export enum RecommendationTriggerType {
            QUERY = "QUERY"
    }
    /**
        * <p>A recommendation trigger provides context on the event that produced the referenced recommendations.
        *       Recommendations are only referenced in <code>recommendationIds</code> by a single RecommendationTrigger.</p>
        */
    export interface RecommendationTrigger {
            /**
                * <p>The identifier of the recommendation trigger.</p>
                */
            id: string | undefined;
            /**
                * <p>The type of recommendation trigger.</p>
                */
            type: RecommendationTriggerType | string | undefined;
            /**
                * <p>The source of the recommendation trigger.</p>
                *          <ul>
                *             <li>
                *                <p>ISSUE_DETECTION: The corresponding recommendations were triggered
                *           by a Contact Lens issue.</p>
                *             </li>
                *             <li>
                *                <p>RULE_EVALUATION: The corresponding recommendations were triggered
                *           by a Contact Lens rule.</p>
                *             </li>
                *          </ul>
                */
            source: RecommendationSourceType | string | undefined;
            /**
                * <p>A union type containing information related to the trigger.</p>
                */
            data: RecommendationTriggerData | undefined;
            /**
                * <p>The identifiers of the recommendations.</p>
                */
            recommendationIds: string[] | undefined;
    }
    export namespace RecommendationTrigger {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecommendationTrigger) => any;
    }
    export interface GetRecommendationsResponse {
            /**
                * <p>The recommendations.</p>
                */
            recommendations: RecommendationData[] | undefined;
            /**
                * <p>The triggers corresponding to recommendations.</p>
                */
            triggers?: RecommendationTrigger[];
    }
    export namespace GetRecommendationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRecommendationsResponse) => any;
    }
    export interface ListAssistantsRequest {
            /**
                * <p>The token for the next set of results. Use the value returned in the previous
                * response in the next request to retrieve the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
    }
    export namespace ListAssistantsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssistantsRequest) => any;
    }
    /**
        * <p>Summary information about the assistant.</p>
        */
    export interface AssistantSummary {
            /**
                * <p>The identifier of the Wisdom assistant.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
                */
            assistantArn: string | undefined;
            /**
                * <p>The name of the assistant.</p>
                */
            name: string | undefined;
            /**
                * <p>The type of the assistant.</p>
                */
            type: AssistantType | string | undefined;
            /**
                * <p>The status of the assistant.</p>
                */
            status: AssistantStatus | string | undefined;
            /**
                * <p>The description of the assistant.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The KMS key used for encryption.</p>
                */
            serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
    }
    export namespace AssistantSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssistantSummary) => any;
    }
    export interface ListAssistantsResponse {
            /**
                * <p>Information about the assistants.</p>
                */
            assistantSummaries: AssistantSummary[] | undefined;
            /**
                * <p>If there are additional results, this is the token for the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListAssistantsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssistantsResponse) => any;
    }
    export interface NotifyRecommendationsReceivedRequest {
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The identifiers of the recommendations.</p>
                */
            recommendationIds: string[] | undefined;
    }
    export namespace NotifyRecommendationsReceivedRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyRecommendationsReceivedRequest) => any;
    }
    /**
        * <p>An error occurred when creating a recommendation.</p>
        */
    export interface NotifyRecommendationsReceivedError {
            /**
                * <p>The identifier of the recommendation that is in error.</p>
                */
            recommendationId?: string;
            /**
                * <p>A recommendation is causing an error.</p>
                */
            message?: string;
    }
    export namespace NotifyRecommendationsReceivedError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyRecommendationsReceivedError) => any;
    }
    export interface NotifyRecommendationsReceivedResponse {
            /**
                * <p>The identifiers of the recommendations.</p>
                */
            recommendationIds?: string[];
            /**
                * <p>The identifiers of recommendations that are causing errors.</p>
                */
            errors?: NotifyRecommendationsReceivedError[];
    }
    export namespace NotifyRecommendationsReceivedResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyRecommendationsReceivedResponse) => any;
    }
    export interface QueryAssistantRequest {
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The text to search for.</p>
                */
            queryText: string | undefined;
            /**
                * <p>The token for the next set of results. Use the value returned in the previous
                * response in the next request to retrieve the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
    }
    export namespace QueryAssistantRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryAssistantRequest) => any;
    }
    /**
        * <p>Information about the result.</p>
        */
    export interface ResultData {
            /**
                * <p>The identifier of the result data.</p>
                */
            resultId: string | undefined;
            /**
                * <p>The document.</p>
                */
            document: Document | undefined;
            /**
                * <p>The relevance score of the results.</p>
                */
            relevanceScore?: number;
    }
    export namespace ResultData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResultData) => any;
    }
    export interface QueryAssistantResponse {
            /**
                * <p>The results of the query.</p>
                */
            results: ResultData[] | undefined;
            /**
                * <p>If there are additional results, this is the token for the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace QueryAssistantResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryAssistantResponse) => any;
    }
    export enum FilterField {
            NAME = "NAME"
    }
    export enum FilterOperator {
            EQUALS = "EQUALS"
    }
    /**
        * <p>A search filter.</p>
        */
    export interface Filter {
            /**
                * <p>The field on which to filter.</p>
                */
            field: FilterField | string | undefined;
            /**
                * <p>The operator to use for comparing the field’s value with the provided value.</p>
                */
            operator: FilterOperator | string | undefined;
            /**
                * <p>The desired field value on which to filter.</p>
                */
            value: string | undefined;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>The search expression.</p>
        */
    export interface SearchExpression {
            /**
                * <p>The search expression filters.</p>
                */
            filters: Filter[] | undefined;
    }
    export namespace SearchExpression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchExpression) => any;
    }
    export interface SearchSessionsRequest {
            /**
                * <p>The token for the next set of results. Use the value returned in the previous
                * response in the next request to retrieve the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The search expression to filter results.</p>
                */
            searchExpression: SearchExpression | undefined;
    }
    export namespace SearchSessionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchSessionsRequest) => any;
    }
    /**
        * <p>Summary information about the session.</p>
        */
    export interface SessionSummary {
            /**
                * <p>The identifier of the session.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the session.</p>
                */
            sessionArn: string | undefined;
            /**
                * <p>The identifier of the Wisdom assistant.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Wisdom assistant.</p>
                */
            assistantArn: string | undefined;
    }
    export namespace SessionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SessionSummary) => any;
    }
    export interface SearchSessionsResponse {
            /**
                * <p>Summary information about the sessions.</p>
                */
            sessionSummaries: SessionSummary[] | undefined;
            /**
                * <p>If there are additional results, this is the token for the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace SearchSessionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchSessionsResponse) => any;
    }
    export interface CreateSessionRequest {
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *    request.</p>
                */
            clientToken?: string;
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The name of the session.</p>
                */
            name: string | undefined;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSessionRequest) => any;
    }
    /**
        * <p>Information about the session.</p>
        */
    export interface SessionData {
            /**
                * <p>The Amazon Resource Name (ARN) of the session.</p>
                */
            sessionArn: string | undefined;
            /**
                * <p>The identifier of the session.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The name of the session.</p>
                */
            name: string | undefined;
            /**
                * <p>The description of the session.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace SessionData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SessionData) => any;
    }
    export interface CreateSessionResponse {
            /**
                * <p>The session.</p>
                */
            session?: SessionData;
    }
    export namespace CreateSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSessionResponse) => any;
    }
    export interface GetSessionRequest {
            /**
                * <p>The identifier of the Wisdom assistant. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            assistantId: string | undefined;
            /**
                * <p>The identifier of the session. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            sessionId: string | undefined;
    }
    export namespace GetSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSessionRequest) => any;
    }
    export interface GetSessionResponse {
            /**
                * <p>The session.</p>
                */
            session?: SessionData;
    }
    export namespace GetSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSessionResponse) => any;
    }
    export interface CreateContentRequest {
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The name of the content. Each piece of content in a knowledge base must have a unique
                *       name. You can retrieve a piece of content using only its knowledge base and its name with the
                *         <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_SearchContent.html">SearchContent</a> API.</p>
                */
            name: string | undefined;
            /**
                * <p>The title of the content. If not set, the title is equal to the name.</p>
                */
            title?: string;
            /**
                * <p>The URI you want to use for the article. If the knowledge base has a templateUri, setting
                *       this argument overrides it for this piece of content.</p>
                */
            overrideLinkOutUri?: string;
            /**
                * <p>A key/value map to store attributes without affecting tagging or recommendations.
                * For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.</p>
                */
            metadata?: Record<string, string>;
            /**
                * <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.</p>
                */
            uploadId: string | undefined;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *    request.</p>
                */
            clientToken?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContentRequest) => any;
    }
    export enum ContentStatus {
            ACTIVE = "ACTIVE",
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            UPDATE_FAILED = "UPDATE_FAILED"
    }
    /**
        * <p>Information about the content.</p>
        */
    export interface ContentData {
            /**
                * <p>The Amazon Resource Name (ARN) of the content.</p>
                */
            contentArn: string | undefined;
            /**
                * <p>The identifier of the content.</p>
                */
            contentId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
                */
            knowledgeBaseArn: string | undefined;
            /**
                * <p>The identifier of the knowledge base.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The name of the content.</p>
                */
            name: string | undefined;
            /**
                * <p>The identifier of the content revision.</p>
                */
            revisionId: string | undefined;
            /**
                * <p>The title of the content.</p>
                */
            title: string | undefined;
            /**
                * <p>The media type of the content.</p>
                */
            contentType: string | undefined;
            /**
                * <p>The status of the content.</p>
                */
            status: ContentStatus | string | undefined;
            /**
                * <p>A key/value map to store attributes without affecting tagging or recommendations.
                * For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.</p>
                */
            metadata: Record<string, string> | undefined;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The URI of the content.</p>
                */
            linkOutUri?: string;
            /**
                * <p>The URL of the content.</p>
                */
            url: string | undefined;
            /**
                * <p>The expiration time of the URL as an epoch timestamp.</p>
                */
            urlExpiry: Date | undefined;
    }
    export namespace ContentData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContentData) => any;
    }
    export interface CreateContentResponse {
            /**
                * <p>The content.</p>
                */
            content?: ContentData;
    }
    export namespace CreateContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContentResponse) => any;
    }
    export interface DeleteContentRequest {
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            contentId: string | undefined;
    }
    export namespace DeleteContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContentRequest) => any;
    }
    export interface DeleteContentResponse {
    }
    export namespace DeleteContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContentResponse) => any;
    }
    export interface GetContentRequest {
            /**
                * <p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            contentId: string | undefined;
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
    }
    export namespace GetContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContentRequest) => any;
    }
    export interface GetContentResponse {
            /**
                * <p>The content.</p>
                */
            content?: ContentData;
    }
    export namespace GetContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContentResponse) => any;
    }
    export interface GetContentSummaryRequest {
            /**
                * <p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            contentId: string | undefined;
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
    }
    export namespace GetContentSummaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContentSummaryRequest) => any;
    }
    /**
        * <p>Summary information about the content.</p>
        */
    export interface ContentSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the content.</p>
                */
            contentArn: string | undefined;
            /**
                * <p>The identifier of the content.</p>
                */
            contentId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
                */
            knowledgeBaseArn: string | undefined;
            /**
                * <p>The identifier of the knowledge base.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The name of the content.</p>
                */
            name: string | undefined;
            /**
                * <p>The identifier of the revision of the content.</p>
                */
            revisionId: string | undefined;
            /**
                * <p>The title of the content.</p>
                */
            title: string | undefined;
            /**
                * <p>The media type of the content.</p>
                */
            contentType: string | undefined;
            /**
                * <p>The status of the content.</p>
                */
            status: ContentStatus | string | undefined;
            /**
                * <p>A key/value map to store attributes without affecting tagging or recommendations.
                * For example, when synchronizing data between an external system and Wisdom, you can store an external version identifier as metadata to utilize for determining drift.</p>
                */
            metadata: Record<string, string> | undefined;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ContentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContentSummary) => any;
    }
    export interface GetContentSummaryResponse {
            /**
                * <p>The content summary.</p>
                */
            contentSummary?: ContentSummary;
    }
    export namespace GetContentSummaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContentSummaryResponse) => any;
    }
    export interface ListContentsRequest {
            /**
                * <p>The token for the next set of results. Use the value returned in the previous
                * response in the next request to retrieve the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
    }
    export namespace ListContentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContentsRequest) => any;
    }
    export interface ListContentsResponse {
            /**
                * <p>Information about the content.</p>
                */
            contentSummaries: ContentSummary[] | undefined;
            /**
                * <p>If there are additional results, this is the token for the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListContentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListContentsResponse) => any;
    }
    /**
        * <p>The provided <code>revisionId</code> does not match, indicating the content has been
        *       modified since it was last read.</p>
        */
    export class PreconditionFailedException extends __BaseException {
            readonly name: "PreconditionFailedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PreconditionFailedException, __BaseException>);
    }
    export interface UpdateContentRequest {
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The identifier of the content. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            contentId: string | undefined;
            /**
                * <p>The <code>revisionId</code> of the content resource to update, taken from an earlier call
                *       to <code>GetContent</code>, <code>GetContentSummary</code>, <code>SearchContent</code>, or
                *         <code>ListContents</code>. If included, this argument acts as an optimistic lock to ensure
                *       content was not modified since it was last read. If it has been modified, this API throws a
                *         <code>PreconditionFailedException</code>.</p>
                */
            revisionId?: string;
            /**
                * <p>The title of the content.</p>
                */
            title?: string;
            /**
                * <p>The URI for the article. If the knowledge base has a templateUri, setting this argument
                *       overrides it for this piece of content. To remove an existing <code>overrideLinkOurUri</code>,
                *       exclude this argument and set <code>removeOverrideLinkOutUri</code> to true.</p>
                */
            overrideLinkOutUri?: string;
            /**
                * <p>Unset the existing <code>overrideLinkOutUri</code> if it exists.</p>
                */
            removeOverrideLinkOutUri?: boolean;
            /**
                * <p>A key/value map to store attributes without affecting tagging or recommendations. For
                *       example, when synchronizing data between an external system and Wisdom, you can store an
                *       external version identifier as metadata to utilize for determining drift.</p>
                */
            metadata?: Record<string, string>;
            /**
                * <p>A pointer to the uploaded asset. This value is returned by <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_StartContentUpload.html">StartContentUpload</a>.
                *     </p>
                */
            uploadId?: string;
    }
    export namespace UpdateContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateContentRequest) => any;
    }
    export interface UpdateContentResponse {
            /**
                * <p>The content.</p>
                */
            content?: ContentData;
    }
    export namespace UpdateContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateContentResponse) => any;
    }
    export enum KnowledgeBaseType {
            CUSTOM = "CUSTOM",
            EXTERNAL = "EXTERNAL"
    }
    /**
        * <p>Information about how to render the content.</p>
        */
    export interface RenderingConfiguration {
            /**
                * <p>A URI template containing exactly one variable in <code>${variableName} </code>format.
                *       This can only be set for <code>EXTERNAL</code> knowledge bases. For Salesforce and ServiceNow,
                *       the variable must be one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Salesforce: <code>Id</code>, <code>ArticleNumber</code>, <code>VersionNumber</code>,
                *             <code>Title</code>, <code>PublishStatus</code>, or <code>IsDeleted</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ServiceNow: <code>number</code>, <code>short_description</code>,
                *             <code>sys_mod_count</code>, <code>workflow_state</code>, or <code>active</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>The variable is replaced with the actual value for a piece of content when calling <a href="https://docs.aws.amazon.com/wisdom/latest/APIReference/API_GetContent.html">GetContent</a>. </p>
                */
            templateUri?: string;
    }
    export namespace RenderingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenderingConfiguration) => any;
    }
    /**
        * <p>Configuration information about the external data source.</p>
        */
    export type SourceConfiguration = SourceConfiguration.AppIntegrationsMember | SourceConfiguration.$UnknownMember;
    export namespace SourceConfiguration {
            /**
                * <p>Configuration information for Amazon AppIntegrations to automatically ingest content.</p>
                */
            interface AppIntegrationsMember {
                    appIntegrations: AppIntegrationsConfiguration;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    appIntegrations?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    appIntegrations: (value: AppIntegrationsConfiguration) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: SourceConfiguration, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceConfiguration) => any;
    }
    export interface CreateKnowledgeBaseRequest {
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *    request.</p>
                */
            clientToken?: string;
            /**
                * <p>The name of the knowledge base.</p>
                */
            name: string | undefined;
            /**
                * <p>The type of knowledge base. Only CUSTOM knowledge bases allow you to upload your own content.
                *       EXTERNAL knowledge bases support integrations with third-party systems whose content is
                *       synchronized automatically. </p>
                */
            knowledgeBaseType: KnowledgeBaseType | string | undefined;
            /**
                * <p>The source of the knowledge base content. Only set this argument for EXTERNAL knowledge
                *       bases.</p>
                */
            sourceConfiguration?: SourceConfiguration;
            /**
                * <p>Information about how to render the content.</p>
                */
            renderingConfiguration?: RenderingConfiguration;
            /**
                * <p>The KMS key used for encryption.</p>
                */
            serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateKnowledgeBaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateKnowledgeBaseRequest) => any;
    }
    export enum KnowledgeBaseStatus {
            ACTIVE = "ACTIVE",
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS"
    }
    /**
        * <p>Information about the knowledge base.</p>
        */
    export interface KnowledgeBaseData {
            /**
                * <p>The identifier of the knowledge base.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
                */
            knowledgeBaseArn: string | undefined;
            /**
                * <p>The name of the knowledge base.</p>
                */
            name: string | undefined;
            /**
                * <p>The type of knowledge base.</p>
                */
            knowledgeBaseType: KnowledgeBaseType | string | undefined;
            /**
                * <p>The status of the knowledge base.</p>
                */
            status: KnowledgeBaseStatus | string | undefined;
            /**
                * <p>An epoch timestamp indicating the most recent content modification inside the knowledge
                *       base. If no content exists in a knowledge base, this value is unset.</p>
                */
            lastContentModificationTime?: Date;
            /**
                * <p>Source configuration information about the knowledge base.</p>
                */
            sourceConfiguration?: SourceConfiguration;
            /**
                * <p>Information about how to render the content.</p>
                */
            renderingConfiguration?: RenderingConfiguration;
            /**
                * <p>The KMS key used for encryption.</p>
                */
            serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace KnowledgeBaseData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KnowledgeBaseData) => any;
    }
    export interface CreateKnowledgeBaseResponse {
            /**
                * <p>The knowledge base.</p>
                */
            knowledgeBase?: KnowledgeBaseData;
    }
    export namespace CreateKnowledgeBaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateKnowledgeBaseResponse) => any;
    }
    export interface DeleteKnowledgeBaseRequest {
            /**
                * <p>The knowledge base to delete content from. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
    }
    export namespace DeleteKnowledgeBaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteKnowledgeBaseRequest) => any;
    }
    export interface DeleteKnowledgeBaseResponse {
    }
    export namespace DeleteKnowledgeBaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteKnowledgeBaseResponse) => any;
    }
    export interface GetKnowledgeBaseRequest {
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
    }
    export namespace GetKnowledgeBaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetKnowledgeBaseRequest) => any;
    }
    export interface GetKnowledgeBaseResponse {
            /**
                * <p>The knowledge base.</p>
                */
            knowledgeBase?: KnowledgeBaseData;
    }
    export namespace GetKnowledgeBaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetKnowledgeBaseResponse) => any;
    }
    export interface ListKnowledgeBasesRequest {
            /**
                * <p>The token for the next set of results. Use the value returned in the previous
                * response in the next request to retrieve the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
    }
    export namespace ListKnowledgeBasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKnowledgeBasesRequest) => any;
    }
    /**
        * <p>Summary information about the knowledge base.</p>
        */
    export interface KnowledgeBaseSummary {
            /**
                * <p>The identifier of the knowledge base.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
                */
            knowledgeBaseArn: string | undefined;
            /**
                * <p>The name of the knowledge base.</p>
                */
            name: string | undefined;
            /**
                * <p>The type of knowledge base.</p>
                */
            knowledgeBaseType: KnowledgeBaseType | string | undefined;
            /**
                * <p>The status of the knowledge base summary.</p>
                */
            status: KnowledgeBaseStatus | string | undefined;
            /**
                * <p>Configuration information about the external data source.</p>
                */
            sourceConfiguration?: SourceConfiguration;
            /**
                * <p>Information about how to render the content.</p>
                */
            renderingConfiguration?: RenderingConfiguration;
            /**
                * <p>The KMS key used for encryption.</p>
                */
            serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
            /**
                * <p>The description of the knowledge base.</p>
                */
            description?: string;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace KnowledgeBaseSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KnowledgeBaseSummary) => any;
    }
    export interface ListKnowledgeBasesResponse {
            /**
                * <p>Information about the knowledge bases.</p>
                */
            knowledgeBaseSummaries: KnowledgeBaseSummary[] | undefined;
            /**
                * <p>If there are additional results, this is the token for the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListKnowledgeBasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKnowledgeBasesResponse) => any;
    }
    export interface RemoveKnowledgeBaseTemplateUriRequest {
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
    }
    export namespace RemoveKnowledgeBaseTemplateUriRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveKnowledgeBaseTemplateUriRequest) => any;
    }
    export interface RemoveKnowledgeBaseTemplateUriResponse {
    }
    export namespace RemoveKnowledgeBaseTemplateUriResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveKnowledgeBaseTemplateUriResponse) => any;
    }
    export interface SearchContentRequest {
            /**
                * <p>The token for the next set of results. Use the value returned in the previous
                * response in the next request to retrieve the next set of results.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return per page.</p>
                */
            maxResults?: number;
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The search expression to filter results.</p>
                */
            searchExpression: SearchExpression | undefined;
    }
    export namespace SearchContentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchContentRequest) => any;
    }
    export interface SearchContentResponse {
            /**
                * <p>Summary information about the content.</p>
                */
            contentSummaries: ContentSummary[] | undefined;
            /**
                * <p>If there are additional results, this is the token for the next set of results.</p>
                */
            nextToken?: string;
    }
    export namespace SearchContentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchContentResponse) => any;
    }
    export interface StartContentUploadRequest {
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The type of content to upload.</p>
                */
            contentType: string | undefined;
    }
    export namespace StartContentUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartContentUploadRequest) => any;
    }
    export interface StartContentUploadResponse {
            /**
                * <p>The identifier of the upload.</p>
                */
            uploadId: string | undefined;
            /**
                * <p>The URL of the upload.</p>
                */
            url: string | undefined;
            /**
                * <p>The expiration time of the URL as an epoch timestamp.</p>
                */
            urlExpiry: Date | undefined;
            /**
                * <p>The headers to include in the upload.</p>
                */
            headersToInclude: Record<string, string> | undefined;
    }
    export namespace StartContentUploadResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartContentUploadResponse) => any;
    }
    export interface UpdateKnowledgeBaseTemplateUriRequest {
            /**
                * <p>The identifier of the knowledge base. Can be either the ID or the ARN. URLs cannot contain the ARN.</p>
                */
            knowledgeBaseId: string | undefined;
            /**
                * <p>The template URI to update.</p>
                */
            templateUri: string | undefined;
    }
    export namespace UpdateKnowledgeBaseTemplateUriRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateKnowledgeBaseTemplateUriRequest) => any;
    }
    export interface UpdateKnowledgeBaseTemplateUriResponse {
            /**
                * <p>The knowledge base to update.</p>
                */
            knowledgeBase?: KnowledgeBaseData;
    }
    export namespace UpdateKnowledgeBaseTemplateUriResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateKnowledgeBaseTemplateUriResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tags used to organize, track, or control access for this resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    /**
        * <p>Amazon Connect Wisdom throws this exception if you have too many tags in your tag set.</p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            /**
                * <p>The specified resource name.</p>
                */
            resourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tag keys.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-wisdom/node_modules/@aws-sdk/client-wisdom/dist-types/models/WisdomServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Wisdom service.
        */
    export class WisdomServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

