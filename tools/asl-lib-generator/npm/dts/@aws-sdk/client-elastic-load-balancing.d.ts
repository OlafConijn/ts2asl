// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-elastic-load-balancing' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/AddTagsCommand";
    import { ApplySecurityGroupsToLoadBalancerCommandInput, ApplySecurityGroupsToLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ApplySecurityGroupsToLoadBalancerCommand";
    import { AttachLoadBalancerToSubnetsCommandInput, AttachLoadBalancerToSubnetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/AttachLoadBalancerToSubnetsCommand";
    import { ConfigureHealthCheckCommandInput, ConfigureHealthCheckCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ConfigureHealthCheckCommand";
    import { CreateAppCookieStickinessPolicyCommandInput, CreateAppCookieStickinessPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateAppCookieStickinessPolicyCommand";
    import { CreateLBCookieStickinessPolicyCommandInput, CreateLBCookieStickinessPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLBCookieStickinessPolicyCommand";
    import { CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerCommand";
    import { CreateLoadBalancerListenersCommandInput, CreateLoadBalancerListenersCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerListenersCommand";
    import { CreateLoadBalancerPolicyCommandInput, CreateLoadBalancerPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerPolicyCommand";
    import { DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerCommand";
    import { DeleteLoadBalancerListenersCommandInput, DeleteLoadBalancerListenersCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerListenersCommand";
    import { DeleteLoadBalancerPolicyCommandInput, DeleteLoadBalancerPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerPolicyCommand";
    import { DeregisterInstancesFromLoadBalancerCommandInput, DeregisterInstancesFromLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeregisterInstancesFromLoadBalancerCommand";
    import { DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeAccountLimitsCommand";
    import { DescribeInstanceHealthCommandInput, DescribeInstanceHealthCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeInstanceHealthCommand";
    import { DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerAttributesCommand";
    import { DescribeLoadBalancerPoliciesCommandInput, DescribeLoadBalancerPoliciesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerPoliciesCommand";
    import { DescribeLoadBalancerPolicyTypesCommandInput, DescribeLoadBalancerPolicyTypesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerPolicyTypesCommand";
    import { DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancersCommand";
    import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeTagsCommand";
    import { DetachLoadBalancerFromSubnetsCommandInput, DetachLoadBalancerFromSubnetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DetachLoadBalancerFromSubnetsCommand";
    import { DisableAvailabilityZonesForLoadBalancerCommandInput, DisableAvailabilityZonesForLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DisableAvailabilityZonesForLoadBalancerCommand";
    import { EnableAvailabilityZonesForLoadBalancerCommandInput, EnableAvailabilityZonesForLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/EnableAvailabilityZonesForLoadBalancerCommand";
    import { ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ModifyLoadBalancerAttributesCommand";
    import { RegisterInstancesWithLoadBalancerCommandInput, RegisterInstancesWithLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/RegisterInstancesWithLoadBalancerCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/RemoveTagsCommand";
    import { SetLoadBalancerListenerSSLCertificateCommandInput, SetLoadBalancerListenerSSLCertificateCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerListenerSSLCertificateCommand";
    import { SetLoadBalancerPoliciesForBackendServerCommandInput, SetLoadBalancerPoliciesForBackendServerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerPoliciesForBackendServerCommand";
    import { SetLoadBalancerPoliciesOfListenerCommandInput, SetLoadBalancerPoliciesOfListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerPoliciesOfListenerCommand";
    import { ElasticLoadBalancingClient } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    /**
        * <fullname>Elastic Load Balancing</fullname>
        *
        *         <p>A load balancer can distribute incoming traffic across your EC2 instances.
        *             This enables you to increase the availability of your application. The load balancer
        *             also monitors the health of its registered instances and ensures that it routes traffic
        *             only to healthy instances. You configure your load balancer to accept incoming traffic
        *             by specifying one or more listeners, which are configured with a protocol and port
        *             number for connections from clients to the load balancer and a protocol and port number
        *             for connections from the load balancer to the instances.</p>
        *         <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers,
        *             and Classic Load Balancers. You can select a load balancer based on your application needs. For more
        *             information, see the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/">Elastic Load Balancing User Guide</a>.</p>
        *         <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers.
        *             The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p>
        *
        *         <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>.
        *             Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p>
        *
        *         <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means
        *             that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK
        *             response code.</p>
        */
    export class ElasticLoadBalancing extends ElasticLoadBalancingClient {
            /**
                * <p>Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.</p>
                *
                *         <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated
                *             with the load balancer, <code>AddTags</code> updates its value.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            addTags(args: AddTagsCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsCommandOutput>;
            addTags(args: AddTagsCommandInput, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            addTags(args: AddTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
            /**
                * <p>Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups">Security Groups for Load Balancers in a VPC</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            applySecurityGroupsToLoadBalancer(args: ApplySecurityGroupsToLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<ApplySecurityGroupsToLoadBalancerCommandOutput>;
            applySecurityGroupsToLoadBalancer(args: ApplySecurityGroupsToLoadBalancerCommandInput, cb: (err: any, data?: ApplySecurityGroupsToLoadBalancerCommandOutput) => void): void;
            applySecurityGroupsToLoadBalancer(args: ApplySecurityGroupsToLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ApplySecurityGroupsToLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Adds one or more subnets to the set of configured subnets for the specified load balancer.</p>
                *         <p>The load balancer evenly distributes requests across all registered subnets.
                *             For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html">Add or Remove Subnets for Your Load Balancer in a VPC</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            attachLoadBalancerToSubnets(args: AttachLoadBalancerToSubnetsCommandInput, options?: __HttpHandlerOptions): Promise<AttachLoadBalancerToSubnetsCommandOutput>;
            attachLoadBalancerToSubnets(args: AttachLoadBalancerToSubnetsCommandInput, cb: (err: any, data?: AttachLoadBalancerToSubnetsCommandOutput) => void): void;
            attachLoadBalancerToSubnets(args: AttachLoadBalancerToSubnetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachLoadBalancerToSubnetsCommandOutput) => void): void;
            /**
                * <p>Specifies the health check settings to use when evaluating the health state of your EC2 instances.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html">Configure Health Checks for Your Load Balancer</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            configureHealthCheck(args: ConfigureHealthCheckCommandInput, options?: __HttpHandlerOptions): Promise<ConfigureHealthCheckCommandOutput>;
            configureHealthCheck(args: ConfigureHealthCheckCommandInput, cb: (err: any, data?: ConfigureHealthCheckCommandOutput) => void): void;
            configureHealthCheck(args: ConfigureHealthCheckCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfigureHealthCheckCommandOutput) => void): void;
            /**
                * <p>Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.</p>
                *         <p>This policy is similar to the policy created by <a>CreateLBCookieStickinessPolicy</a>,
                *             except that the lifetime of the special Elastic Load Balancing cookie, <code>AWSELB</code>,
                *             follows the lifetime of the application-generated cookie specified in the policy configuration.
                *             The load balancer only inserts a new stickiness cookie when the application response
                *             includes a new application cookie.</p>
                *         <p>If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            createAppCookieStickinessPolicy(args: CreateAppCookieStickinessPolicyCommandInput, options?: __HttpHandlerOptions): Promise<CreateAppCookieStickinessPolicyCommandOutput>;
            createAppCookieStickinessPolicy(args: CreateAppCookieStickinessPolicyCommandInput, cb: (err: any, data?: CreateAppCookieStickinessPolicyCommandOutput) => void): void;
            createAppCookieStickinessPolicy(args: CreateAppCookieStickinessPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAppCookieStickinessPolicyCommandOutput) => void): void;
            /**
                * <p>Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.</p>
                *         <p>When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request.
                *             If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.</p>
                *         <p>A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            createLBCookieStickinessPolicy(args: CreateLBCookieStickinessPolicyCommandInput, options?: __HttpHandlerOptions): Promise<CreateLBCookieStickinessPolicyCommandOutput>;
            createLBCookieStickinessPolicy(args: CreateLBCookieStickinessPolicyCommandInput, cb: (err: any, data?: CreateLBCookieStickinessPolicyCommandOutput) => void): void;
            createLBCookieStickinessPolicy(args: CreateLBCookieStickinessPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLBCookieStickinessPolicyCommandOutput) => void): void;
            /**
                * <p>Creates a Classic Load Balancer.</p>
                *
                *         <p>You can add listeners, security groups, subnets, and tags when you create your load balancer,
                *             or you can add them later using <a>CreateLoadBalancerListeners</a>,
                *             <a>ApplySecurityGroupsToLoadBalancer</a>, <a>AttachLoadBalancerToSubnets</a>,
                *             and <a>AddTags</a>.</p>
                *         <p>To describe your current load balancers, see <a>DescribeLoadBalancers</a>.
                *             When you are finished with a load balancer, you can delete it using
                *             <a>DeleteLoadBalancer</a>.</p>
                *
                *         <p>You can create up to 20 load balancers per region per account.
                *             You can request an increase for the number of load balancers for your account.
                *             For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            createLoadBalancer(args: CreateLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoadBalancerCommandOutput>;
            createLoadBalancer(args: CreateLoadBalancerCommandInput, cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void): void;
            createLoadBalancer(args: CreateLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            createLoadBalancerListeners(args: CreateLoadBalancerListenersCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoadBalancerListenersCommandOutput>;
            createLoadBalancerListeners(args: CreateLoadBalancerListenersCommandInput, cb: (err: any, data?: CreateLoadBalancerListenersCommandOutput) => void): void;
            createLoadBalancerListeners(args: CreateLoadBalancerListenersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoadBalancerListenersCommandOutput) => void): void;
            /**
                * <p>Creates a policy with the specified attributes for the specified load balancer.</p>
                *          <p>Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.</p>
                */
            createLoadBalancerPolicy(args: CreateLoadBalancerPolicyCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoadBalancerPolicyCommandOutput>;
            createLoadBalancerPolicy(args: CreateLoadBalancerPolicyCommandInput, cb: (err: any, data?: CreateLoadBalancerPolicyCommandOutput) => void): void;
            createLoadBalancerPolicy(args: CreateLoadBalancerPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoadBalancerPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified load balancer.</p>
                *         <p>If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.</p>
                *         <p>If the load balancer does not exist or has already been deleted, the call to
                *             <code>DeleteLoadBalancer</code> still succeeds.</p>
                */
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoadBalancerCommandOutput>;
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void): void;
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Deletes the specified listeners from the specified load balancer.</p>
                */
            deleteLoadBalancerListeners(args: DeleteLoadBalancerListenersCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoadBalancerListenersCommandOutput>;
            deleteLoadBalancerListeners(args: DeleteLoadBalancerListenersCommandInput, cb: (err: any, data?: DeleteLoadBalancerListenersCommandOutput) => void): void;
            deleteLoadBalancerListeners(args: DeleteLoadBalancerListenersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoadBalancerListenersCommandOutput) => void): void;
            /**
                * <p>Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.</p>
                */
            deleteLoadBalancerPolicy(args: DeleteLoadBalancerPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoadBalancerPolicyCommandOutput>;
            deleteLoadBalancerPolicy(args: DeleteLoadBalancerPolicyCommandInput, cb: (err: any, data?: DeleteLoadBalancerPolicyCommandOutput) => void): void;
            deleteLoadBalancerPolicy(args: DeleteLoadBalancerPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoadBalancerPolicyCommandOutput) => void): void;
            /**
                * <p>Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.</p>
                *
                *         <p>You can use <a>DescribeLoadBalancers</a> to verify that the instance is deregistered from the load balancer.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            deregisterInstancesFromLoadBalancer(args: DeregisterInstancesFromLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterInstancesFromLoadBalancerCommandOutput>;
            deregisterInstancesFromLoadBalancer(args: DeregisterInstancesFromLoadBalancerCommandInput, cb: (err: any, data?: DeregisterInstancesFromLoadBalancerCommandOutput) => void): void;
            deregisterInstancesFromLoadBalancer(args: DeregisterInstancesFromLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterInstancesFromLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            describeAccountLimits(args: DescribeAccountLimitsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountLimitsCommandOutput>;
            describeAccountLimits(args: DescribeAccountLimitsCommandInput, cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void): void;
            describeAccountLimits(args: DescribeAccountLimitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountLimitsCommandOutput) => void): void;
            /**
                * <p>Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.</p>
                */
            describeInstanceHealth(args: DescribeInstanceHealthCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstanceHealthCommandOutput>;
            describeInstanceHealth(args: DescribeInstanceHealthCommandInput, cb: (err: any, data?: DescribeInstanceHealthCommandOutput) => void): void;
            describeInstanceHealth(args: DescribeInstanceHealthCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstanceHealthCommandOutput) => void): void;
            /**
                * <p>Describes the attributes for the specified load balancer.</p>
                */
            describeLoadBalancerAttributes(args: DescribeLoadBalancerAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoadBalancerAttributesCommandOutput>;
            describeLoadBalancerAttributes(args: DescribeLoadBalancerAttributesCommandInput, cb: (err: any, data?: DescribeLoadBalancerAttributesCommandOutput) => void): void;
            describeLoadBalancerAttributes(args: DescribeLoadBalancerAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoadBalancerAttributesCommandOutput) => void): void;
            /**
                * <p>Describes the specified policies.</p>
                *          <p>If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer.
                *     If you specify a policy name associated with your load balancer, the action returns the description of that policy.
                *     If you don't specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies.
                *     The names of the sample policies have the <code>ELBSample-</code> prefix.</p>
                */
            describeLoadBalancerPolicies(args: DescribeLoadBalancerPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoadBalancerPoliciesCommandOutput>;
            describeLoadBalancerPolicies(args: DescribeLoadBalancerPoliciesCommandInput, cb: (err: any, data?: DescribeLoadBalancerPoliciesCommandOutput) => void): void;
            describeLoadBalancerPolicies(args: DescribeLoadBalancerPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoadBalancerPoliciesCommandOutput) => void): void;
            /**
                * <p>Describes the specified load balancer policy types or all load balancer policy types.</p>
                *          <p>The description of each type indicates how it can be used. For example,
                *            some policies can be used only with layer 7 listeners,
                *            some policies can be used only with layer 4 listeners,
                *            and some policies can be used only with your EC2 instances.</p>
                *          <p>You can use <a>CreateLoadBalancerPolicy</a> to create a policy configuration for any of these policy types.
                *            Then, depending on the policy type, use either <a>SetLoadBalancerPoliciesOfListener</a> or
                *            <a>SetLoadBalancerPoliciesForBackendServer</a> to set the policy.</p>
                */
            describeLoadBalancerPolicyTypes(args: DescribeLoadBalancerPolicyTypesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoadBalancerPolicyTypesCommandOutput>;
            describeLoadBalancerPolicyTypes(args: DescribeLoadBalancerPolicyTypesCommandInput, cb: (err: any, data?: DescribeLoadBalancerPolicyTypesCommandOutput) => void): void;
            describeLoadBalancerPolicyTypes(args: DescribeLoadBalancerPolicyTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoadBalancerPolicyTypesCommandOutput) => void): void;
            /**
                * <p>Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.</p>
                */
            describeLoadBalancers(args: DescribeLoadBalancersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoadBalancersCommandOutput>;
            describeLoadBalancers(args: DescribeLoadBalancersCommandInput, cb: (err: any, data?: DescribeLoadBalancersCommandOutput) => void): void;
            describeLoadBalancers(args: DescribeLoadBalancersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoadBalancersCommandOutput) => void): void;
            /**
                * <p>Describes the tags associated with the specified load balancers.</p>
                */
            describeTags(args: DescribeTagsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTagsCommandOutput>;
            describeTags(args: DescribeTagsCommandInput, cb: (err: any, data?: DescribeTagsCommandOutput) => void): void;
            describeTags(args: DescribeTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTagsCommandOutput) => void): void;
            /**
                * <p>Removes the specified subnets from the set of configured subnets for the load balancer.</p>
                *         <p>After a subnet is removed, all EC2 instances registered with the load balancer
                *             in the removed subnet go into the <code>OutOfService</code> state. Then,
                *             the load balancer balances the traffic among the remaining routable subnets.</p>
                */
            detachLoadBalancerFromSubnets(args: DetachLoadBalancerFromSubnetsCommandInput, options?: __HttpHandlerOptions): Promise<DetachLoadBalancerFromSubnetsCommandOutput>;
            detachLoadBalancerFromSubnets(args: DetachLoadBalancerFromSubnetsCommandInput, cb: (err: any, data?: DetachLoadBalancerFromSubnetsCommandOutput) => void): void;
            detachLoadBalancerFromSubnets(args: DetachLoadBalancerFromSubnetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachLoadBalancerFromSubnetsCommandOutput) => void): void;
            /**
                * <p>Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer
                *             in EC2-Classic or a default VPC.</p>
                *         <p>For load balancers in a non-default VPC, use <a>DetachLoadBalancerFromSubnets</a>.</p>
                *         <p>There must be at least one Availability Zone registered with a load balancer at all times.
                *          After an Availability Zone is removed, all instances registered with the load balancer that are in the removed
                *          Availability Zone go into the <code>OutOfService</code> state. Then, the load balancer attempts to equally balance
                *          the traffic among its remaining Availability Zones.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            disableAvailabilityZonesForLoadBalancer(args: DisableAvailabilityZonesForLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<DisableAvailabilityZonesForLoadBalancerCommandOutput>;
            disableAvailabilityZonesForLoadBalancer(args: DisableAvailabilityZonesForLoadBalancerCommandInput, cb: (err: any, data?: DisableAvailabilityZonesForLoadBalancerCommandOutput) => void): void;
            disableAvailabilityZonesForLoadBalancer(args: DisableAvailabilityZonesForLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableAvailabilityZonesForLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer
                *             in EC2-Classic or a default VPC.</p>
                *         <p>For load balancers in a non-default VPC, use <a>AttachLoadBalancerToSubnets</a>.</p>
                *         <p>The load balancer evenly distributes requests across all its registered Availability Zones
                *             that contain instances. For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            enableAvailabilityZonesForLoadBalancer(args: EnableAvailabilityZonesForLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<EnableAvailabilityZonesForLoadBalancerCommandOutput>;
            enableAvailabilityZonesForLoadBalancer(args: EnableAvailabilityZonesForLoadBalancerCommandInput, cb: (err: any, data?: EnableAvailabilityZonesForLoadBalancerCommandOutput) => void): void;
            enableAvailabilityZonesForLoadBalancer(args: EnableAvailabilityZonesForLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableAvailabilityZonesForLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Modifies the attributes of the specified load balancer.</p>
                *         <p>You can modify the load balancer attributes, such as <code>AccessLogs</code>, <code>ConnectionDraining</code>, and
                *             <code>CrossZoneLoadBalancing</code> by either enabling or disabling them. Or, you can modify the load balancer attribute
                *             <code>ConnectionSettings</code> by specifying an idle connection timeout value for your load balancer.</p>
                *         <p>For more information, see the following in the <i>Classic Load Balancers Guide</i>:</p>
                *         <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html">Cross-Zone Load Balancing</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html">Connection Draining</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html">Access Logs</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html">Idle Connection Timeout</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            modifyLoadBalancerAttributes(args: ModifyLoadBalancerAttributesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyLoadBalancerAttributesCommandOutput>;
            modifyLoadBalancerAttributes(args: ModifyLoadBalancerAttributesCommandInput, cb: (err: any, data?: ModifyLoadBalancerAttributesCommandOutput) => void): void;
            modifyLoadBalancerAttributes(args: ModifyLoadBalancerAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyLoadBalancerAttributesCommandOutput) => void): void;
            /**
                * <p>Adds the specified instances to the specified load balancer.</p>
                *
                *         <p>The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.</p>
                *
                *         <p>Note that <code>RegisterInstanceWithLoadBalancer</code> completes when the request has been registered.
                *          Instance registration takes a little time to complete. To check the state of the registered instances, use
                *          <a>DescribeLoadBalancers</a> or <a>DescribeInstanceHealth</a>.</p>
                *
                *         <p>After the instance is registered, it starts receiving traffic
                *          and requests from the load balancer. Any instance that is not
                *          in one of the Availability Zones registered for the load balancer
                *          is moved to the <code>OutOfService</code> state. If an Availability Zone
                *          is added to the load balancer later, any instances registered with the
                *          load balancer move to the <code>InService</code> state.</p>
                *
                *         <p>To deregister instances from a load balancer, use <a>DeregisterInstancesFromLoadBalancer</a>.</p>
                *
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            registerInstancesWithLoadBalancer(args: RegisterInstancesWithLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<RegisterInstancesWithLoadBalancerCommandOutput>;
            registerInstancesWithLoadBalancer(args: RegisterInstancesWithLoadBalancerCommandInput, cb: (err: any, data?: RegisterInstancesWithLoadBalancerCommandOutput) => void): void;
            registerInstancesWithLoadBalancer(args: RegisterInstancesWithLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterInstancesWithLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from the specified load balancer.</p>
                */
            removeTags(args: RemoveTagsCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsCommandOutput>;
            removeTags(args: RemoveTagsCommandInput, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            removeTags(args: RemoveTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
            /**
                * <p>Sets the certificate that terminates the specified listener's SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.</p>
                *
                *         <p>For more information about updating your SSL certificate, see
                *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html">Replace the SSL Certificate for Your Load Balancer</a>
                *                 in the <i>Classic Load Balancers Guide</i>.</p>
                */
            setLoadBalancerListenerSSLCertificate(args: SetLoadBalancerListenerSSLCertificateCommandInput, options?: __HttpHandlerOptions): Promise<SetLoadBalancerListenerSSLCertificateCommandOutput>;
            setLoadBalancerListenerSSLCertificate(args: SetLoadBalancerListenerSSLCertificateCommandInput, cb: (err: any, data?: SetLoadBalancerListenerSSLCertificateCommandOutput) => void): void;
            setLoadBalancerListenerSSLCertificate(args: SetLoadBalancerListenerSSLCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetLoadBalancerListenerSSLCertificateCommandOutput) => void): void;
            /**
                * <p>Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies.
                *             At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.</p>
                *         <p>Each time you use <code>SetLoadBalancerPoliciesForBackendServer</code> to enable the policies,
                *             use the <code>PolicyNames</code> parameter to list the policies that you want to enable.</p>
                *         <p>You can use <a>DescribeLoadBalancers</a> or <a>DescribeLoadBalancerPolicies</a> to verify that the policy
                *             is associated with the EC2 instance.</p>
                *
                *         <p>For more information about enabling back-end instance authentication, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt">Configure Back-end Instance Authentication</a>
                *             in the <i>Classic Load Balancers Guide</i>. For more information about Proxy Protocol, see
                *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html">Configure Proxy Protocol Support</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            setLoadBalancerPoliciesForBackendServer(args: SetLoadBalancerPoliciesForBackendServerCommandInput, options?: __HttpHandlerOptions): Promise<SetLoadBalancerPoliciesForBackendServerCommandOutput>;
            setLoadBalancerPoliciesForBackendServer(args: SetLoadBalancerPoliciesForBackendServerCommandInput, cb: (err: any, data?: SetLoadBalancerPoliciesForBackendServerCommandOutput) => void): void;
            setLoadBalancerPoliciesForBackendServer(args: SetLoadBalancerPoliciesForBackendServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetLoadBalancerPoliciesForBackendServerCommandOutput) => void): void;
            /**
                * <p>Replaces the current set of policies for the specified load balancer port with the specified set of policies.</p>
                *         <p>To enable back-end server authentication, use <a>SetLoadBalancerPoliciesForBackendServer</a>.</p>
                *         <p>For more information about setting policies, see
                *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html">Update the SSL Negotiation Configuration</a>,
                *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a>, and
                *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            setLoadBalancerPoliciesOfListener(args: SetLoadBalancerPoliciesOfListenerCommandInput, options?: __HttpHandlerOptions): Promise<SetLoadBalancerPoliciesOfListenerCommandOutput>;
            setLoadBalancerPoliciesOfListener(args: SetLoadBalancerPoliciesOfListenerCommandInput, cb: (err: any, data?: SetLoadBalancerPoliciesOfListenerCommandOutput) => void): void;
            setLoadBalancerPoliciesOfListener(args: SetLoadBalancerPoliciesOfListenerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetLoadBalancerPoliciesOfListenerCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/AddTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { AddTagsInput, AddTagsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface AddTagsCommandInput extends AddTagsInput {
    }
    export interface AddTagsCommandOutput extends AddTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Adds the specified tags to the specified load balancer. Each load balancer can have a maximum of 10 tags.</p>
        *
        *         <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated
        *             with the load balancer, <code>AddTags</code> updates its value.</p>
        *
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, AddTagsCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, AddTagsCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new AddTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsCommandInput} for command's `input` shape.
        * @see {@link AddTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class AddTagsCommand extends $Command<AddTagsCommandInput, AddTagsCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: AddTagsCommandInput;
            constructor(input: AddTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsCommandInput, AddTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ApplySecurityGroupsToLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { ApplySecurityGroupsToLoadBalancerInput, ApplySecurityGroupsToLoadBalancerOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface ApplySecurityGroupsToLoadBalancerCommandInput extends ApplySecurityGroupsToLoadBalancerInput {
    }
    export interface ApplySecurityGroupsToLoadBalancerCommandOutput extends ApplySecurityGroupsToLoadBalancerOutput, __MetadataBearer {
    }
    /**
        * <p>Associates one or more security groups with your load balancer in a virtual private cloud (VPC). The specified security groups override the previously associated security groups.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-groups.html#elb-vpc-security-groups">Security Groups for Load Balancers in a VPC</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, ApplySecurityGroupsToLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, ApplySecurityGroupsToLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new ApplySecurityGroupsToLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ApplySecurityGroupsToLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link ApplySecurityGroupsToLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class ApplySecurityGroupsToLoadBalancerCommand extends $Command<ApplySecurityGroupsToLoadBalancerCommandInput, ApplySecurityGroupsToLoadBalancerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: ApplySecurityGroupsToLoadBalancerCommandInput;
            constructor(input: ApplySecurityGroupsToLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ApplySecurityGroupsToLoadBalancerCommandInput, ApplySecurityGroupsToLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/AttachLoadBalancerToSubnetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { AttachLoadBalancerToSubnetsInput, AttachLoadBalancerToSubnetsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface AttachLoadBalancerToSubnetsCommandInput extends AttachLoadBalancerToSubnetsInput {
    }
    export interface AttachLoadBalancerToSubnetsCommandOutput extends AttachLoadBalancerToSubnetsOutput, __MetadataBearer {
    }
    /**
        * <p>Adds one or more subnets to the set of configured subnets for the specified load balancer.</p>
        *         <p>The load balancer evenly distributes requests across all registered subnets.
        *             For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-manage-subnets.html">Add or Remove Subnets for Your Load Balancer in a VPC</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, AttachLoadBalancerToSubnetsCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, AttachLoadBalancerToSubnetsCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new AttachLoadBalancerToSubnetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachLoadBalancerToSubnetsCommandInput} for command's `input` shape.
        * @see {@link AttachLoadBalancerToSubnetsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class AttachLoadBalancerToSubnetsCommand extends $Command<AttachLoadBalancerToSubnetsCommandInput, AttachLoadBalancerToSubnetsCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: AttachLoadBalancerToSubnetsCommandInput;
            constructor(input: AttachLoadBalancerToSubnetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachLoadBalancerToSubnetsCommandInput, AttachLoadBalancerToSubnetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ConfigureHealthCheckCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { ConfigureHealthCheckInput, ConfigureHealthCheckOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface ConfigureHealthCheckCommandInput extends ConfigureHealthCheckInput {
    }
    export interface ConfigureHealthCheckCommandOutput extends ConfigureHealthCheckOutput, __MetadataBearer {
    }
    /**
        * <p>Specifies the health check settings to use when evaluating the health state of your EC2 instances.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html">Configure Health Checks for Your Load Balancer</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, ConfigureHealthCheckCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, ConfigureHealthCheckCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new ConfigureHealthCheckCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfigureHealthCheckCommandInput} for command's `input` shape.
        * @see {@link ConfigureHealthCheckCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class ConfigureHealthCheckCommand extends $Command<ConfigureHealthCheckCommandInput, ConfigureHealthCheckCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: ConfigureHealthCheckCommandInput;
            constructor(input: ConfigureHealthCheckCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfigureHealthCheckCommandInput, ConfigureHealthCheckCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateAppCookieStickinessPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { CreateAppCookieStickinessPolicyInput, CreateAppCookieStickinessPolicyOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface CreateAppCookieStickinessPolicyCommandInput extends CreateAppCookieStickinessPolicyInput {
    }
    export interface CreateAppCookieStickinessPolicyCommandOutput extends CreateAppCookieStickinessPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Generates a stickiness policy with sticky session lifetimes that follow that of an application-generated cookie. This policy can be associated only with HTTP/HTTPS listeners.</p>
        *         <p>This policy is similar to the policy created by <a>CreateLBCookieStickinessPolicy</a>,
        *             except that the lifetime of the special Elastic Load Balancing cookie, <code>AWSELB</code>,
        *             follows the lifetime of the application-generated cookie specified in the policy configuration.
        *             The load balancer only inserts a new stickiness cookie when the application response
        *             includes a new application cookie.</p>
        *         <p>If the application cookie is explicitly removed or expires, the session stops being sticky until a new application cookie is issued.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, CreateAppCookieStickinessPolicyCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, CreateAppCookieStickinessPolicyCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new CreateAppCookieStickinessPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAppCookieStickinessPolicyCommandInput} for command's `input` shape.
        * @see {@link CreateAppCookieStickinessPolicyCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class CreateAppCookieStickinessPolicyCommand extends $Command<CreateAppCookieStickinessPolicyCommandInput, CreateAppCookieStickinessPolicyCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: CreateAppCookieStickinessPolicyCommandInput;
            constructor(input: CreateAppCookieStickinessPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAppCookieStickinessPolicyCommandInput, CreateAppCookieStickinessPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLBCookieStickinessPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { CreateLBCookieStickinessPolicyInput, CreateLBCookieStickinessPolicyOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface CreateLBCookieStickinessPolicyCommandInput extends CreateLBCookieStickinessPolicyInput {
    }
    export interface CreateLBCookieStickinessPolicyCommandOutput extends CreateLBCookieStickinessPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Generates a stickiness policy with sticky session lifetimes controlled by the lifetime of the browser (user-agent) or a specified expiration period. This policy can be associated only with HTTP/HTTPS listeners.</p>
        *         <p>When a load balancer implements this policy, the load balancer uses a special cookie to track the instance for each request. When the load balancer receives a request, it first checks to see if this cookie is present in the request.
        *             If so, the load balancer sends the request to the application server specified in the cookie. If not, the load balancer sends the request to a server that is chosen based on the existing load-balancing algorithm.</p>
        *         <p>A cookie is inserted into the response for binding subsequent requests from the same user to that server. The validity of the cookie is based on the cookie expiration time, which is specified in the policy configuration.</p>
        *
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, CreateLBCookieStickinessPolicyCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, CreateLBCookieStickinessPolicyCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new CreateLBCookieStickinessPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLBCookieStickinessPolicyCommandInput} for command's `input` shape.
        * @see {@link CreateLBCookieStickinessPolicyCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class CreateLBCookieStickinessPolicyCommand extends $Command<CreateLBCookieStickinessPolicyCommandInput, CreateLBCookieStickinessPolicyCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: CreateLBCookieStickinessPolicyCommandInput;
            constructor(input: CreateLBCookieStickinessPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLBCookieStickinessPolicyCommandInput, CreateLBCookieStickinessPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { CreateAccessPointInput, CreateAccessPointOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface CreateLoadBalancerCommandInput extends CreateAccessPointInput {
    }
    export interface CreateLoadBalancerCommandOutput extends CreateAccessPointOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a Classic Load Balancer.</p>
        *
        *         <p>You can add listeners, security groups, subnets, and tags when you create your load balancer,
        *             or you can add them later using <a>CreateLoadBalancerListeners</a>,
        *             <a>ApplySecurityGroupsToLoadBalancer</a>, <a>AttachLoadBalancerToSubnets</a>,
        *             and <a>AddTags</a>.</p>
        *         <p>To describe your current load balancers, see <a>DescribeLoadBalancers</a>.
        *             When you are finished with a load balancer, you can delete it using
        *             <a>DeleteLoadBalancer</a>.</p>
        *
        *         <p>You can create up to 20 load balancers per region per account.
        *             You can request an increase for the number of load balancers for your account.
        *             For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, CreateLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, CreateLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new CreateLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link CreateLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class CreateLoadBalancerCommand extends $Command<CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: CreateLoadBalancerCommandInput;
            constructor(input: CreateLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerListenersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { CreateLoadBalancerListenerInput, CreateLoadBalancerListenerOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface CreateLoadBalancerListenersCommandInput extends CreateLoadBalancerListenerInput {
    }
    export interface CreateLoadBalancerListenersCommandOutput extends CreateLoadBalancerListenerOutput, __MetadataBearer {
    }
    /**
        * <p>Creates one or more listeners for the specified load balancer. If a listener with the specified port does not already exist, it is created; otherwise, the properties of the new listener must match the properties of the existing listener.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, CreateLoadBalancerListenersCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, CreateLoadBalancerListenersCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new CreateLoadBalancerListenersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoadBalancerListenersCommandInput} for command's `input` shape.
        * @see {@link CreateLoadBalancerListenersCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class CreateLoadBalancerListenersCommand extends $Command<CreateLoadBalancerListenersCommandInput, CreateLoadBalancerListenersCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: CreateLoadBalancerListenersCommandInput;
            constructor(input: CreateLoadBalancerListenersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoadBalancerListenersCommandInput, CreateLoadBalancerListenersCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { CreateLoadBalancerPolicyInput, CreateLoadBalancerPolicyOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface CreateLoadBalancerPolicyCommandInput extends CreateLoadBalancerPolicyInput {
    }
    export interface CreateLoadBalancerPolicyCommandOutput extends CreateLoadBalancerPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a policy with the specified attributes for the specified load balancer.</p>
        *          <p>Policies are settings that are saved for your load balancer and that can be applied to the listener or the application server, depending on the policy type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, CreateLoadBalancerPolicyCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, CreateLoadBalancerPolicyCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new CreateLoadBalancerPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoadBalancerPolicyCommandInput} for command's `input` shape.
        * @see {@link CreateLoadBalancerPolicyCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class CreateLoadBalancerPolicyCommand extends $Command<CreateLoadBalancerPolicyCommandInput, CreateLoadBalancerPolicyCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: CreateLoadBalancerPolicyCommandInput;
            constructor(input: CreateLoadBalancerPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoadBalancerPolicyCommandInput, CreateLoadBalancerPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DeleteAccessPointInput, DeleteAccessPointOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DeleteLoadBalancerCommandInput extends DeleteAccessPointInput {
    }
    export interface DeleteLoadBalancerCommandOutput extends DeleteAccessPointOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified load balancer.</p>
        *         <p>If you are attempting to recreate a load balancer, you must reconfigure all settings. The DNS name associated with a deleted load balancer are no longer usable. The name and associated DNS record of the deleted load balancer no longer exist and traffic sent to any of its IP addresses is no longer delivered to your instances.</p>
        *         <p>If the load balancer does not exist or has already been deleted, the call to
        *             <code>DeleteLoadBalancer</code> still succeeds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DeleteLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DeleteLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DeleteLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link DeleteLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DeleteLoadBalancerCommand extends $Command<DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DeleteLoadBalancerCommandInput;
            constructor(input: DeleteLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerListenersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DeleteLoadBalancerListenerInput, DeleteLoadBalancerListenerOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DeleteLoadBalancerListenersCommandInput extends DeleteLoadBalancerListenerInput {
    }
    export interface DeleteLoadBalancerListenersCommandOutput extends DeleteLoadBalancerListenerOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified listeners from the specified load balancer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DeleteLoadBalancerListenersCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DeleteLoadBalancerListenersCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DeleteLoadBalancerListenersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoadBalancerListenersCommandInput} for command's `input` shape.
        * @see {@link DeleteLoadBalancerListenersCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DeleteLoadBalancerListenersCommand extends $Command<DeleteLoadBalancerListenersCommandInput, DeleteLoadBalancerListenersCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DeleteLoadBalancerListenersCommandInput;
            constructor(input: DeleteLoadBalancerListenersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoadBalancerListenersCommandInput, DeleteLoadBalancerListenersCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DeleteLoadBalancerPolicyInput, DeleteLoadBalancerPolicyOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DeleteLoadBalancerPolicyCommandInput extends DeleteLoadBalancerPolicyInput {
    }
    export interface DeleteLoadBalancerPolicyCommandOutput extends DeleteLoadBalancerPolicyOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified policy from the specified load balancer. This policy must not be enabled for any listeners.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DeleteLoadBalancerPolicyCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DeleteLoadBalancerPolicyCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DeleteLoadBalancerPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoadBalancerPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteLoadBalancerPolicyCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DeleteLoadBalancerPolicyCommand extends $Command<DeleteLoadBalancerPolicyCommandInput, DeleteLoadBalancerPolicyCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DeleteLoadBalancerPolicyCommandInput;
            constructor(input: DeleteLoadBalancerPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoadBalancerPolicyCommandInput, DeleteLoadBalancerPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeregisterInstancesFromLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DeregisterEndPointsInput, DeregisterEndPointsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DeregisterInstancesFromLoadBalancerCommandInput extends DeregisterEndPointsInput {
    }
    export interface DeregisterInstancesFromLoadBalancerCommandOutput extends DeregisterEndPointsOutput, __MetadataBearer {
    }
    /**
        * <p>Deregisters the specified instances from the specified load balancer. After the instance is deregistered, it no longer receives traffic from the load balancer.</p>
        *
        *         <p>You can use <a>DescribeLoadBalancers</a> to verify that the instance is deregistered from the load balancer.</p>
        *
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DeregisterInstancesFromLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DeregisterInstancesFromLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DeregisterInstancesFromLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterInstancesFromLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link DeregisterInstancesFromLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DeregisterInstancesFromLoadBalancerCommand extends $Command<DeregisterInstancesFromLoadBalancerCommandInput, DeregisterInstancesFromLoadBalancerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DeregisterInstancesFromLoadBalancerCommandInput;
            constructor(input: DeregisterInstancesFromLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterInstancesFromLoadBalancerCommandInput, DeregisterInstancesFromLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeAccountLimitsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DescribeAccountLimitsInput, DescribeAccountLimitsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DescribeAccountLimitsCommandInput extends DescribeAccountLimitsInput {
    }
    export interface DescribeAccountLimitsCommandOutput extends DescribeAccountLimitsOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-limits.html">Limits for Your Classic Load Balancer</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DescribeAccountLimitsCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DescribeAccountLimitsCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DescribeAccountLimitsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountLimitsCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountLimitsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DescribeAccountLimitsCommand extends $Command<DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DescribeAccountLimitsCommandInput;
            constructor(input: DescribeAccountLimitsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeInstanceHealthCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DescribeEndPointStateInput, DescribeEndPointStateOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DescribeInstanceHealthCommandInput extends DescribeEndPointStateInput {
    }
    export interface DescribeInstanceHealthCommandOutput extends DescribeEndPointStateOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the state of the specified instances with respect to the specified load balancer. If no instances are specified, the call describes the state of all instances that are currently registered with the load balancer. If instances are specified, their state is returned even if they are no longer registered with the load balancer. The state of terminated instances is not returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DescribeInstanceHealthCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DescribeInstanceHealthCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DescribeInstanceHealthCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInstanceHealthCommandInput} for command's `input` shape.
        * @see {@link DescribeInstanceHealthCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DescribeInstanceHealthCommand extends $Command<DescribeInstanceHealthCommandInput, DescribeInstanceHealthCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DescribeInstanceHealthCommandInput;
            constructor(input: DescribeInstanceHealthCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInstanceHealthCommandInput, DescribeInstanceHealthCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DescribeLoadBalancerAttributesInput, DescribeLoadBalancerAttributesOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DescribeLoadBalancerAttributesCommandInput extends DescribeLoadBalancerAttributesInput {
    }
    export interface DescribeLoadBalancerAttributesCommandOutput extends DescribeLoadBalancerAttributesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the attributes for the specified load balancer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DescribeLoadBalancerAttributesCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DescribeLoadBalancerAttributesCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DescribeLoadBalancerAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoadBalancerAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeLoadBalancerAttributesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DescribeLoadBalancerAttributesCommand extends $Command<DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DescribeLoadBalancerAttributesCommandInput;
            constructor(input: DescribeLoadBalancerAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DescribeLoadBalancerPoliciesInput, DescribeLoadBalancerPoliciesOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DescribeLoadBalancerPoliciesCommandInput extends DescribeLoadBalancerPoliciesInput {
    }
    export interface DescribeLoadBalancerPoliciesCommandOutput extends DescribeLoadBalancerPoliciesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified policies.</p>
        *          <p>If you specify a load balancer name, the action returns the descriptions of all policies created for the load balancer.
        *     If you specify a policy name associated with your load balancer, the action returns the description of that policy.
        *     If you don't specify a load balancer name, the action returns descriptions of the specified sample policies, or descriptions of all sample policies.
        *     The names of the sample policies have the <code>ELBSample-</code> prefix.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DescribeLoadBalancerPoliciesCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DescribeLoadBalancerPoliciesCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DescribeLoadBalancerPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoadBalancerPoliciesCommandInput} for command's `input` shape.
        * @see {@link DescribeLoadBalancerPoliciesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DescribeLoadBalancerPoliciesCommand extends $Command<DescribeLoadBalancerPoliciesCommandInput, DescribeLoadBalancerPoliciesCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DescribeLoadBalancerPoliciesCommandInput;
            constructor(input: DescribeLoadBalancerPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoadBalancerPoliciesCommandInput, DescribeLoadBalancerPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerPolicyTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DescribeLoadBalancerPolicyTypesInput, DescribeLoadBalancerPolicyTypesOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DescribeLoadBalancerPolicyTypesCommandInput extends DescribeLoadBalancerPolicyTypesInput {
    }
    export interface DescribeLoadBalancerPolicyTypesCommandOutput extends DescribeLoadBalancerPolicyTypesOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified load balancer policy types or all load balancer policy types.</p>
        *          <p>The description of each type indicates how it can be used. For example,
        *            some policies can be used only with layer 7 listeners,
        *            some policies can be used only with layer 4 listeners,
        *            and some policies can be used only with your EC2 instances.</p>
        *          <p>You can use <a>CreateLoadBalancerPolicy</a> to create a policy configuration for any of these policy types.
        *            Then, depending on the policy type, use either <a>SetLoadBalancerPoliciesOfListener</a> or
        *            <a>SetLoadBalancerPoliciesForBackendServer</a> to set the policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DescribeLoadBalancerPolicyTypesCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DescribeLoadBalancerPolicyTypesCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DescribeLoadBalancerPolicyTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoadBalancerPolicyTypesCommandInput} for command's `input` shape.
        * @see {@link DescribeLoadBalancerPolicyTypesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DescribeLoadBalancerPolicyTypesCommand extends $Command<DescribeLoadBalancerPolicyTypesCommandInput, DescribeLoadBalancerPolicyTypesCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DescribeLoadBalancerPolicyTypesCommandInput;
            constructor(input: DescribeLoadBalancerPolicyTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoadBalancerPolicyTypesCommandInput, DescribeLoadBalancerPolicyTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DescribeAccessPointsInput, DescribeAccessPointsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DescribeLoadBalancersCommandInput extends DescribeAccessPointsInput {
    }
    export interface DescribeLoadBalancersCommandOutput extends DescribeAccessPointsOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the specified the load balancers. If no load balancers are specified, the call describes all of your load balancers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DescribeLoadBalancersCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DescribeLoadBalancersCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DescribeLoadBalancersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoadBalancersCommandInput} for command's `input` shape.
        * @see {@link DescribeLoadBalancersCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DescribeLoadBalancersCommand extends $Command<DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DescribeLoadBalancersCommandInput;
            constructor(input: DescribeLoadBalancersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DescribeTagsInput, DescribeTagsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DescribeTagsCommandInput extends DescribeTagsInput {
    }
    export interface DescribeTagsCommandOutput extends DescribeTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Describes the tags associated with the specified load balancers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DescribeTagsCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DescribeTagsCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DescribeTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTagsCommandInput} for command's `input` shape.
        * @see {@link DescribeTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DescribeTagsCommand extends $Command<DescribeTagsCommandInput, DescribeTagsCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DescribeTagsCommandInput;
            constructor(input: DescribeTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTagsCommandInput, DescribeTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DetachLoadBalancerFromSubnetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { DetachLoadBalancerFromSubnetsInput, DetachLoadBalancerFromSubnetsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DetachLoadBalancerFromSubnetsCommandInput extends DetachLoadBalancerFromSubnetsInput {
    }
    export interface DetachLoadBalancerFromSubnetsCommandOutput extends DetachLoadBalancerFromSubnetsOutput, __MetadataBearer {
    }
    /**
        * <p>Removes the specified subnets from the set of configured subnets for the load balancer.</p>
        *         <p>After a subnet is removed, all EC2 instances registered with the load balancer
        *             in the removed subnet go into the <code>OutOfService</code> state. Then,
        *             the load balancer balances the traffic among the remaining routable subnets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DetachLoadBalancerFromSubnetsCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DetachLoadBalancerFromSubnetsCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DetachLoadBalancerFromSubnetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachLoadBalancerFromSubnetsCommandInput} for command's `input` shape.
        * @see {@link DetachLoadBalancerFromSubnetsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DetachLoadBalancerFromSubnetsCommand extends $Command<DetachLoadBalancerFromSubnetsCommandInput, DetachLoadBalancerFromSubnetsCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DetachLoadBalancerFromSubnetsCommandInput;
            constructor(input: DetachLoadBalancerFromSubnetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachLoadBalancerFromSubnetsCommandInput, DetachLoadBalancerFromSubnetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DisableAvailabilityZonesForLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { RemoveAvailabilityZonesInput, RemoveAvailabilityZonesOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface DisableAvailabilityZonesForLoadBalancerCommandInput extends RemoveAvailabilityZonesInput {
    }
    export interface DisableAvailabilityZonesForLoadBalancerCommandOutput extends RemoveAvailabilityZonesOutput, __MetadataBearer {
    }
    /**
        * <p>Removes the specified Availability Zones from the set of Availability Zones for the specified load balancer
        *             in EC2-Classic or a default VPC.</p>
        *         <p>For load balancers in a non-default VPC, use <a>DetachLoadBalancerFromSubnets</a>.</p>
        *         <p>There must be at least one Availability Zone registered with a load balancer at all times.
        *          After an Availability Zone is removed, all instances registered with the load balancer that are in the removed
        *          Availability Zone go into the <code>OutOfService</code> state. Then, the load balancer attempts to equally balance
        *          the traffic among its remaining Availability Zones.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, DisableAvailabilityZonesForLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, DisableAvailabilityZonesForLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new DisableAvailabilityZonesForLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableAvailabilityZonesForLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link DisableAvailabilityZonesForLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class DisableAvailabilityZonesForLoadBalancerCommand extends $Command<DisableAvailabilityZonesForLoadBalancerCommandInput, DisableAvailabilityZonesForLoadBalancerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: DisableAvailabilityZonesForLoadBalancerCommandInput;
            constructor(input: DisableAvailabilityZonesForLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableAvailabilityZonesForLoadBalancerCommandInput, DisableAvailabilityZonesForLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/EnableAvailabilityZonesForLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { AddAvailabilityZonesInput, AddAvailabilityZonesOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface EnableAvailabilityZonesForLoadBalancerCommandInput extends AddAvailabilityZonesInput {
    }
    export interface EnableAvailabilityZonesForLoadBalancerCommandOutput extends AddAvailabilityZonesOutput, __MetadataBearer {
    }
    /**
        * <p>Adds the specified Availability Zones to the set of Availability Zones for the specified load balancer
        *             in EC2-Classic or a default VPC.</p>
        *         <p>For load balancers in a non-default VPC, use <a>AttachLoadBalancerToSubnets</a>.</p>
        *         <p>The load balancer evenly distributes requests across all its registered Availability Zones
        *             that contain instances. For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-az.html">Add or Remove Availability Zones</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, EnableAvailabilityZonesForLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, EnableAvailabilityZonesForLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new EnableAvailabilityZonesForLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableAvailabilityZonesForLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link EnableAvailabilityZonesForLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class EnableAvailabilityZonesForLoadBalancerCommand extends $Command<EnableAvailabilityZonesForLoadBalancerCommandInput, EnableAvailabilityZonesForLoadBalancerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: EnableAvailabilityZonesForLoadBalancerCommandInput;
            constructor(input: EnableAvailabilityZonesForLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableAvailabilityZonesForLoadBalancerCommandInput, EnableAvailabilityZonesForLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ModifyLoadBalancerAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { ModifyLoadBalancerAttributesInput, ModifyLoadBalancerAttributesOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface ModifyLoadBalancerAttributesCommandInput extends ModifyLoadBalancerAttributesInput {
    }
    export interface ModifyLoadBalancerAttributesCommandOutput extends ModifyLoadBalancerAttributesOutput, __MetadataBearer {
    }
    /**
        * <p>Modifies the attributes of the specified load balancer.</p>
        *         <p>You can modify the load balancer attributes, such as <code>AccessLogs</code>, <code>ConnectionDraining</code>, and
        *             <code>CrossZoneLoadBalancing</code> by either enabling or disabling them. Or, you can modify the load balancer attribute
        *             <code>ConnectionSettings</code> by specifying an idle connection timeout value for your load balancer.</p>
        *         <p>For more information, see the following in the <i>Classic Load Balancers Guide</i>:</p>
        *         <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html">Cross-Zone Load Balancing</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html">Connection Draining</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/access-log-collection.html">Access Logs</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html">Idle Connection Timeout</a>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, ModifyLoadBalancerAttributesCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, ModifyLoadBalancerAttributesCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new ModifyLoadBalancerAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyLoadBalancerAttributesCommandInput} for command's `input` shape.
        * @see {@link ModifyLoadBalancerAttributesCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class ModifyLoadBalancerAttributesCommand extends $Command<ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: ModifyLoadBalancerAttributesCommandInput;
            constructor(input: ModifyLoadBalancerAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/RegisterInstancesWithLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { RegisterEndPointsInput, RegisterEndPointsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface RegisterInstancesWithLoadBalancerCommandInput extends RegisterEndPointsInput {
    }
    export interface RegisterInstancesWithLoadBalancerCommandOutput extends RegisterEndPointsOutput, __MetadataBearer {
    }
    /**
        * <p>Adds the specified instances to the specified load balancer.</p>
        *
        *         <p>The instance must be a running instance in the same network as the load balancer (EC2-Classic or the same VPC). If you have EC2-Classic instances and a load balancer in a VPC with ClassicLink enabled, you can link the EC2-Classic instances to that VPC and then register the linked EC2-Classic instances with the load balancer in the VPC.</p>
        *
        *         <p>Note that <code>RegisterInstanceWithLoadBalancer</code> completes when the request has been registered.
        *          Instance registration takes a little time to complete. To check the state of the registered instances, use
        *          <a>DescribeLoadBalancers</a> or <a>DescribeInstanceHealth</a>.</p>
        *
        *         <p>After the instance is registered, it starts receiving traffic
        *          and requests from the load balancer. Any instance that is not
        *          in one of the Availability Zones registered for the load balancer
        *          is moved to the <code>OutOfService</code> state. If an Availability Zone
        *          is added to the load balancer later, any instances registered with the
        *          load balancer move to the <code>InService</code> state.</p>
        *
        *         <p>To deregister instances from a load balancer, use <a>DeregisterInstancesFromLoadBalancer</a>.</p>
        *
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-deregister-register-instances.html">Register or De-Register EC2 Instances</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, RegisterInstancesWithLoadBalancerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, RegisterInstancesWithLoadBalancerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new RegisterInstancesWithLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterInstancesWithLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link RegisterInstancesWithLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class RegisterInstancesWithLoadBalancerCommand extends $Command<RegisterInstancesWithLoadBalancerCommandInput, RegisterInstancesWithLoadBalancerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: RegisterInstancesWithLoadBalancerCommandInput;
            constructor(input: RegisterInstancesWithLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterInstancesWithLoadBalancerCommandInput, RegisterInstancesWithLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/RemoveTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { RemoveTagsInput, RemoveTagsOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface RemoveTagsCommandInput extends RemoveTagsInput {
    }
    export interface RemoveTagsCommandOutput extends RemoveTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from the specified load balancer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, RemoveTagsCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, RemoveTagsCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new RemoveTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class RemoveTagsCommand extends $Command<RemoveTagsCommandInput, RemoveTagsCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: RemoveTagsCommandInput;
            constructor(input: RemoveTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsCommandInput, RemoveTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerListenerSSLCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { SetLoadBalancerListenerSSLCertificateInput, SetLoadBalancerListenerSSLCertificateOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface SetLoadBalancerListenerSSLCertificateCommandInput extends SetLoadBalancerListenerSSLCertificateInput {
    }
    export interface SetLoadBalancerListenerSSLCertificateCommandOutput extends SetLoadBalancerListenerSSLCertificateOutput, __MetadataBearer {
    }
    /**
        * <p>Sets the certificate that terminates the specified listener's SSL connections. The specified certificate replaces any prior certificate that was used on the same load balancer and port.</p>
        *
        *         <p>For more information about updating your SSL certificate, see
        *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-update-ssl-cert.html">Replace the SSL Certificate for Your Load Balancer</a>
        *                 in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, SetLoadBalancerListenerSSLCertificateCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, SetLoadBalancerListenerSSLCertificateCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new SetLoadBalancerListenerSSLCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetLoadBalancerListenerSSLCertificateCommandInput} for command's `input` shape.
        * @see {@link SetLoadBalancerListenerSSLCertificateCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class SetLoadBalancerListenerSSLCertificateCommand extends $Command<SetLoadBalancerListenerSSLCertificateCommandInput, SetLoadBalancerListenerSSLCertificateCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: SetLoadBalancerListenerSSLCertificateCommandInput;
            constructor(input: SetLoadBalancerListenerSSLCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetLoadBalancerListenerSSLCertificateCommandInput, SetLoadBalancerListenerSSLCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerPoliciesForBackendServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { SetLoadBalancerPoliciesForBackendServerInput, SetLoadBalancerPoliciesForBackendServerOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface SetLoadBalancerPoliciesForBackendServerCommandInput extends SetLoadBalancerPoliciesForBackendServerInput {
    }
    export interface SetLoadBalancerPoliciesForBackendServerCommandOutput extends SetLoadBalancerPoliciesForBackendServerOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces the set of policies associated with the specified port on which the EC2 instance is listening with a new set of policies.
        *             At this time, only the back-end server authentication policy type can be applied to the instance ports; this policy type is composed of multiple public key policies.</p>
        *         <p>Each time you use <code>SetLoadBalancerPoliciesForBackendServer</code> to enable the policies,
        *             use the <code>PolicyNames</code> parameter to list the policies that you want to enable.</p>
        *         <p>You can use <a>DescribeLoadBalancers</a> or <a>DescribeLoadBalancerPolicies</a> to verify that the policy
        *             is associated with the EC2 instance.</p>
        *
        *         <p>For more information about enabling back-end instance authentication, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html#configure_backendauth_clt">Configure Back-end Instance Authentication</a>
        *             in the <i>Classic Load Balancers Guide</i>. For more information about Proxy Protocol, see
        *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-proxy-protocol.html">Configure Proxy Protocol Support</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, SetLoadBalancerPoliciesForBackendServerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, SetLoadBalancerPoliciesForBackendServerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new SetLoadBalancerPoliciesForBackendServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetLoadBalancerPoliciesForBackendServerCommandInput} for command's `input` shape.
        * @see {@link SetLoadBalancerPoliciesForBackendServerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class SetLoadBalancerPoliciesForBackendServerCommand extends $Command<SetLoadBalancerPoliciesForBackendServerCommandInput, SetLoadBalancerPoliciesForBackendServerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: SetLoadBalancerPoliciesForBackendServerCommandInput;
            constructor(input: SetLoadBalancerPoliciesForBackendServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetLoadBalancerPoliciesForBackendServerCommandInput, SetLoadBalancerPoliciesForBackendServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerPoliciesOfListenerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ElasticLoadBalancingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient";
    import { SetLoadBalancerPoliciesOfListenerInput, SetLoadBalancerPoliciesOfListenerOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0";
    export interface SetLoadBalancerPoliciesOfListenerCommandInput extends SetLoadBalancerPoliciesOfListenerInput {
    }
    export interface SetLoadBalancerPoliciesOfListenerCommandOutput extends SetLoadBalancerPoliciesOfListenerOutput, __MetadataBearer {
    }
    /**
        * <p>Replaces the current set of policies for the specified load balancer port with the specified set of policies.</p>
        *         <p>To enable back-end server authentication, use <a>SetLoadBalancerPoliciesForBackendServer</a>.</p>
        *         <p>For more information about setting policies, see
        *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/ssl-config-update.html">Update the SSL Negotiation Configuration</a>,
        *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-duration">Duration-Based Session Stickiness</a>, and
        *             <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html#enable-sticky-sessions-application">Application-Controlled Session Stickiness</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ElasticLoadBalancingClient, SetLoadBalancerPoliciesOfListenerCommand } from "@aws-sdk/client-elastic-load-balancing"; // ES Modules import
        * // const { ElasticLoadBalancingClient, SetLoadBalancerPoliciesOfListenerCommand } = require("@aws-sdk/client-elastic-load-balancing"); // CommonJS import
        * const client = new ElasticLoadBalancingClient(config);
        * const command = new SetLoadBalancerPoliciesOfListenerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetLoadBalancerPoliciesOfListenerCommandInput} for command's `input` shape.
        * @see {@link SetLoadBalancerPoliciesOfListenerCommandOutput} for command's `response` shape.
        * @see {@link ElasticLoadBalancingClientResolvedConfig | config} for ElasticLoadBalancingClient's `config` shape.
        *
        */
    export class SetLoadBalancerPoliciesOfListenerCommand extends $Command<SetLoadBalancerPoliciesOfListenerCommandInput, SetLoadBalancerPoliciesOfListenerCommandOutput, ElasticLoadBalancingClientResolvedConfig> {
            readonly input: SetLoadBalancerPoliciesOfListenerCommandInput;
            constructor(input: SetLoadBalancerPoliciesOfListenerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ElasticLoadBalancingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetLoadBalancerPoliciesOfListenerCommandInput, SetLoadBalancerPoliciesOfListenerCommandOutput>;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/ElasticLoadBalancingClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddTagsCommandInput, AddTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/AddTagsCommand";
    import { ApplySecurityGroupsToLoadBalancerCommandInput, ApplySecurityGroupsToLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ApplySecurityGroupsToLoadBalancerCommand";
    import { AttachLoadBalancerToSubnetsCommandInput, AttachLoadBalancerToSubnetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/AttachLoadBalancerToSubnetsCommand";
    import { ConfigureHealthCheckCommandInput, ConfigureHealthCheckCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ConfigureHealthCheckCommand";
    import { CreateAppCookieStickinessPolicyCommandInput, CreateAppCookieStickinessPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateAppCookieStickinessPolicyCommand";
    import { CreateLBCookieStickinessPolicyCommandInput, CreateLBCookieStickinessPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLBCookieStickinessPolicyCommand";
    import { CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerCommand";
    import { CreateLoadBalancerListenersCommandInput, CreateLoadBalancerListenersCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerListenersCommand";
    import { CreateLoadBalancerPolicyCommandInput, CreateLoadBalancerPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/CreateLoadBalancerPolicyCommand";
    import { DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerCommand";
    import { DeleteLoadBalancerListenersCommandInput, DeleteLoadBalancerListenersCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerListenersCommand";
    import { DeleteLoadBalancerPolicyCommandInput, DeleteLoadBalancerPolicyCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeleteLoadBalancerPolicyCommand";
    import { DeregisterInstancesFromLoadBalancerCommandInput, DeregisterInstancesFromLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DeregisterInstancesFromLoadBalancerCommand";
    import { DescribeAccountLimitsCommandInput, DescribeAccountLimitsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeAccountLimitsCommand";
    import { DescribeInstanceHealthCommandInput, DescribeInstanceHealthCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeInstanceHealthCommand";
    import { DescribeLoadBalancerAttributesCommandInput, DescribeLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerAttributesCommand";
    import { DescribeLoadBalancerPoliciesCommandInput, DescribeLoadBalancerPoliciesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerPoliciesCommand";
    import { DescribeLoadBalancerPolicyTypesCommandInput, DescribeLoadBalancerPolicyTypesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancerPolicyTypesCommand";
    import { DescribeLoadBalancersCommandInput, DescribeLoadBalancersCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeLoadBalancersCommand";
    import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DescribeTagsCommand";
    import { DetachLoadBalancerFromSubnetsCommandInput, DetachLoadBalancerFromSubnetsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DetachLoadBalancerFromSubnetsCommand";
    import { DisableAvailabilityZonesForLoadBalancerCommandInput, DisableAvailabilityZonesForLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/DisableAvailabilityZonesForLoadBalancerCommand";
    import { EnableAvailabilityZonesForLoadBalancerCommandInput, EnableAvailabilityZonesForLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/EnableAvailabilityZonesForLoadBalancerCommand";
    import { ModifyLoadBalancerAttributesCommandInput, ModifyLoadBalancerAttributesCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/ModifyLoadBalancerAttributesCommand";
    import { RegisterInstancesWithLoadBalancerCommandInput, RegisterInstancesWithLoadBalancerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/RegisterInstancesWithLoadBalancerCommand";
    import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/RemoveTagsCommand";
    import { SetLoadBalancerListenerSSLCertificateCommandInput, SetLoadBalancerListenerSSLCertificateCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerListenerSSLCertificateCommand";
    import { SetLoadBalancerPoliciesForBackendServerCommandInput, SetLoadBalancerPoliciesForBackendServerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerPoliciesForBackendServerCommand";
    import { SetLoadBalancerPoliciesOfListenerCommandInput, SetLoadBalancerPoliciesOfListenerCommandOutput } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/commands/SetLoadBalancerPoliciesOfListenerCommand";
    export type ServiceInputTypes = AddTagsCommandInput | ApplySecurityGroupsToLoadBalancerCommandInput | AttachLoadBalancerToSubnetsCommandInput | ConfigureHealthCheckCommandInput | CreateAppCookieStickinessPolicyCommandInput | CreateLBCookieStickinessPolicyCommandInput | CreateLoadBalancerCommandInput | CreateLoadBalancerListenersCommandInput | CreateLoadBalancerPolicyCommandInput | DeleteLoadBalancerCommandInput | DeleteLoadBalancerListenersCommandInput | DeleteLoadBalancerPolicyCommandInput | DeregisterInstancesFromLoadBalancerCommandInput | DescribeAccountLimitsCommandInput | DescribeInstanceHealthCommandInput | DescribeLoadBalancerAttributesCommandInput | DescribeLoadBalancerPoliciesCommandInput | DescribeLoadBalancerPolicyTypesCommandInput | DescribeLoadBalancersCommandInput | DescribeTagsCommandInput | DetachLoadBalancerFromSubnetsCommandInput | DisableAvailabilityZonesForLoadBalancerCommandInput | EnableAvailabilityZonesForLoadBalancerCommandInput | ModifyLoadBalancerAttributesCommandInput | RegisterInstancesWithLoadBalancerCommandInput | RemoveTagsCommandInput | SetLoadBalancerListenerSSLCertificateCommandInput | SetLoadBalancerPoliciesForBackendServerCommandInput | SetLoadBalancerPoliciesOfListenerCommandInput;
    export type ServiceOutputTypes = AddTagsCommandOutput | ApplySecurityGroupsToLoadBalancerCommandOutput | AttachLoadBalancerToSubnetsCommandOutput | ConfigureHealthCheckCommandOutput | CreateAppCookieStickinessPolicyCommandOutput | CreateLBCookieStickinessPolicyCommandOutput | CreateLoadBalancerCommandOutput | CreateLoadBalancerListenersCommandOutput | CreateLoadBalancerPolicyCommandOutput | DeleteLoadBalancerCommandOutput | DeleteLoadBalancerListenersCommandOutput | DeleteLoadBalancerPolicyCommandOutput | DeregisterInstancesFromLoadBalancerCommandOutput | DescribeAccountLimitsCommandOutput | DescribeInstanceHealthCommandOutput | DescribeLoadBalancerAttributesCommandOutput | DescribeLoadBalancerPoliciesCommandOutput | DescribeLoadBalancerPolicyTypesCommandOutput | DescribeLoadBalancersCommandOutput | DescribeTagsCommandOutput | DetachLoadBalancerFromSubnetsCommandOutput | DisableAvailabilityZonesForLoadBalancerCommandOutput | EnableAvailabilityZonesForLoadBalancerCommandOutput | ModifyLoadBalancerAttributesCommandOutput | RegisterInstancesWithLoadBalancerCommandOutput | RemoveTagsCommandOutput | SetLoadBalancerListenerSSLCertificateCommandOutput | SetLoadBalancerPoliciesForBackendServerCommandOutput | SetLoadBalancerPoliciesOfListenerCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ElasticLoadBalancingClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ElasticLoadBalancingClient class constructor that set the region, credentials and other options.
        */
    export interface ElasticLoadBalancingClientConfig extends ElasticLoadBalancingClientConfigType {
    }
    type ElasticLoadBalancingClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ElasticLoadBalancingClient class. This is resolved and normalized from the {@link ElasticLoadBalancingClientConfig | constructor configuration interface}.
        */
    export interface ElasticLoadBalancingClientResolvedConfig extends ElasticLoadBalancingClientResolvedConfigType {
    }
    /**
        * <fullname>Elastic Load Balancing</fullname>
        *
        *         <p>A load balancer can distribute incoming traffic across your EC2 instances.
        *             This enables you to increase the availability of your application. The load balancer
        *             also monitors the health of its registered instances and ensures that it routes traffic
        *             only to healthy instances. You configure your load balancer to accept incoming traffic
        *             by specifying one or more listeners, which are configured with a protocol and port
        *             number for connections from clients to the load balancer and a protocol and port number
        *             for connections from the load balancer to the instances.</p>
        *         <p>Elastic Load Balancing supports three types of load balancers: Application Load Balancers, Network Load Balancers,
        *             and Classic Load Balancers. You can select a load balancer based on your application needs. For more
        *             information, see the <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/">Elastic Load Balancing User Guide</a>.</p>
        *         <p>This reference covers the 2012-06-01 API, which supports Classic Load Balancers.
        *             The 2015-12-01 API supports Application Load Balancers and Network Load Balancers.</p>
        *
        *         <p>To get started, create a load balancer with one or more listeners using <a>CreateLoadBalancer</a>.
        *             Register your instances with the load balancer using <a>RegisterInstancesWithLoadBalancer</a>.</p>
        *
        *         <p>All Elastic Load Balancing operations are <i>idempotent</i>, which means
        *             that they complete at most one time. If you repeat an operation, it succeeds with a 200 OK
        *             response code.</p>
        */
    export class ElasticLoadBalancingClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ElasticLoadBalancingClientResolvedConfig> {
            /**
                * The resolved configuration of ElasticLoadBalancingClient class. This is resolved and normalized from the {@link ElasticLoadBalancingClientConfig | constructor configuration interface}.
                */
            readonly config: ElasticLoadBalancingClientResolvedConfig;
            constructor(configuration: ElasticLoadBalancingClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ElasticLoadBalancingServiceException as __BaseException } from "@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/ElasticLoadBalancingServiceException";
    /**
        * <p>Information about the <code>AccessLog</code> attribute.</p>
        */
    export interface AccessLog {
            /**
                * <p>Specifies whether access logs are enabled for the load balancer.</p>
                */
            Enabled: boolean | undefined;
            /**
                * <p>The name of the Amazon S3 bucket where the access logs are stored.</p>
                */
            S3BucketName?: string;
            /**
                * <p>The interval for publishing the access logs. You can specify an interval of either 5 minutes or 60 minutes.</p>
                *         <p>Default: 60 minutes</p>
                */
            EmitInterval?: number;
            /**
                * <p>The logical hierarchy you created for your Amazon S3 bucket, for example <code>my-bucket-prefix/prod</code>.
                *             If the prefix is not provided, the log is placed at the root level of the bucket.</p>
                */
            S3BucketPrefix?: string;
    }
    export namespace AccessLog {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessLog) => any;
    }
    /**
        * <p>The specified load balancer does not exist.</p>
        */
    export class AccessPointNotFoundException extends __BaseException {
            readonly name: "AccessPointNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessPointNotFoundException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for EnableAvailabilityZonesForLoadBalancer.</p>
        */
    export interface AddAvailabilityZonesInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The Availability Zones. These must be in the same region as the load balancer.</p>
                */
            AvailabilityZones: string[] | undefined;
    }
    export namespace AddAvailabilityZonesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddAvailabilityZonesInput) => any;
    }
    /**
        * <p>Contains the output of EnableAvailabilityZonesForLoadBalancer.</p>
        */
    export interface AddAvailabilityZonesOutput {
            /**
                * <p>The updated list of Availability Zones for the load balancer.</p>
                */
            AvailabilityZones?: string[];
    }
    export namespace AddAvailabilityZonesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddAvailabilityZonesOutput) => any;
    }
    /**
        * <p>Information about additional load balancer attributes.</p>
        */
    export interface AdditionalAttribute {
            /**
                * <p>The name of the attribute.</p>
                *         <p>The following attribute is supported.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>elb.http.desyncmitigationmode</code> - Determines how the load balancer handles requests that
                *                     might pose a security risk to your application. The possible values are <code>monitor</code>,
                *                     <code>defensive</code>, and <code>strictest</code>. The default is <code>defensive</code>.</p>
                *             </li>
                *          </ul>
                */
            Key?: string;
            /**
                * <p>This value of the attribute.</p>
                */
            Value?: string;
    }
    export namespace AdditionalAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdditionalAttribute) => any;
    }
    /**
        * <p>Information about a tag.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value of the tag.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Contains the parameters for AddTags.</p>
        */
    export interface AddTagsInput {
            /**
                * <p>The name of the load balancer. You can specify one load balancer only.</p>
                */
            LoadBalancerNames: string[] | undefined;
            /**
                * <p>The tags.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace AddTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsInput) => any;
    }
    /**
        * <p>Contains the output of AddTags.</p>
        */
    export interface AddTagsOutput {
    }
    export namespace AddTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsOutput) => any;
    }
    /**
        * <p>A tag key was specified more than once.</p>
        */
    export class DuplicateTagKeysException extends __BaseException {
            readonly name: "DuplicateTagKeysException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateTagKeysException, __BaseException>);
    }
    /**
        * <p>The quota for the number of tags that can be assigned to a load balancer has been reached.</p>
        */
    export class TooManyTagsException extends __BaseException {
            readonly name: "TooManyTagsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsException, __BaseException>);
    }
    /**
        * <p>Information about a policy for application-controlled session stickiness.</p>
        */
    export interface AppCookieStickinessPolicy {
            /**
                * <p>The mnemonic name for the policy being created. The name must be unique within a set of policies for this load balancer.</p>
                */
            PolicyName?: string;
            /**
                * <p>The name of the application cookie used for stickiness.</p>
                */
            CookieName?: string;
    }
    export namespace AppCookieStickinessPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppCookieStickinessPolicy) => any;
    }
    /**
        * <p>Contains the parameters for ApplySecurityGroupsToLoadBalancer.</p>
        */
    export interface ApplySecurityGroupsToLoadBalancerInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The IDs of the security groups to associate with the load balancer. Note that you cannot specify the name of the security group.</p>
                */
            SecurityGroups: string[] | undefined;
    }
    export namespace ApplySecurityGroupsToLoadBalancerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplySecurityGroupsToLoadBalancerInput) => any;
    }
    /**
        * <p>Contains the output of ApplySecurityGroupsToLoadBalancer.</p>
        */
    export interface ApplySecurityGroupsToLoadBalancerOutput {
            /**
                * <p>The IDs of the security groups associated with the load balancer.</p>
                */
            SecurityGroups?: string[];
    }
    export namespace ApplySecurityGroupsToLoadBalancerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplySecurityGroupsToLoadBalancerOutput) => any;
    }
    /**
        * <p>The requested configuration change is not valid.</p>
        */
    export class InvalidConfigurationRequestException extends __BaseException {
            readonly name: "InvalidConfigurationRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidConfigurationRequestException, __BaseException>);
    }
    /**
        * <p>One or more of the specified security groups do not exist.</p>
        */
    export class InvalidSecurityGroupException extends __BaseException {
            readonly name: "InvalidSecurityGroupException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSecurityGroupException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for AttachLoaBalancerToSubnets.</p>
        */
    export interface AttachLoadBalancerToSubnetsInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The IDs of the subnets to add. You can add only one subnet per Availability Zone.</p>
                */
            Subnets: string[] | undefined;
    }
    export namespace AttachLoadBalancerToSubnetsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachLoadBalancerToSubnetsInput) => any;
    }
    /**
        * <p>Contains the output of AttachLoadBalancerToSubnets.</p>
        */
    export interface AttachLoadBalancerToSubnetsOutput {
            /**
                * <p>The IDs of the subnets attached to the load balancer.</p>
                */
            Subnets?: string[];
    }
    export namespace AttachLoadBalancerToSubnetsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachLoadBalancerToSubnetsOutput) => any;
    }
    /**
        * <p>The specified VPC has no associated Internet gateway.</p>
        */
    export class InvalidSubnetException extends __BaseException {
            readonly name: "InvalidSubnetException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSubnetException, __BaseException>);
    }
    /**
        * <p>One or more of the specified subnets do not exist.</p>
        */
    export class SubnetNotFoundException extends __BaseException {
            readonly name: "SubnetNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubnetNotFoundException, __BaseException>);
    }
    /**
        * <p>Information about the configuration of an EC2 instance.</p>
        */
    export interface BackendServerDescription {
            /**
                * <p>The port on which the EC2 instance is listening.</p>
                */
            InstancePort?: number;
            /**
                * <p>The names of the policies enabled for the EC2 instance.</p>
                */
            PolicyNames?: string[];
    }
    export namespace BackendServerDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BackendServerDescription) => any;
    }
    /**
        * <p>The specified ARN does not refer to a valid SSL certificate in AWS Identity and Access Management (IAM)
        *             or AWS Certificate Manager (ACM). Note that if you recently uploaded the certificate to IAM, this error might
        *             indicate that the certificate is not fully available yet.</p>
        */
    export class CertificateNotFoundException extends __BaseException {
            readonly name: "CertificateNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CertificateNotFoundException, __BaseException>);
    }
    /**
        * <p>Information about a health check.</p>
        */
    export interface HealthCheck {
            /**
                * <p>The instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535.</p>
                *         <p>TCP is the default, specified as a TCP: port pair, for example "TCP:5000". In this case, a health check simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy.</p>
                *         <p>SSL is also specified as SSL: port pair, for example, SSL:5000.</p>
                *         <p>For HTTP/HTTPS, you must include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example "HTTP:80/weather/us/wa/seattle". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than "200 OK" within the timeout period is considered unhealthy.</p>
                *          <p>The total length of the HTTP ping target must be 1024 16-bit Unicode characters or less.</p>
                */
            Target: string | undefined;
            /**
                * <p>The approximate interval, in seconds, between health checks of an individual instance.</p>
                */
            Interval: number | undefined;
            /**
                * <p>The amount of time, in seconds, during which no response means a failed health check.</p>
                *         <p>This value must be less than the <code>Interval</code> value.</p>
                */
            Timeout: number | undefined;
            /**
                * <p>The number of consecutive health check failures required before moving the instance to the <code>Unhealthy</code> state.</p>
                */
            UnhealthyThreshold: number | undefined;
            /**
                * <p>The number of consecutive health checks successes required before moving the instance to the <code>Healthy</code> state.</p>
                */
            HealthyThreshold: number | undefined;
    }
    export namespace HealthCheck {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HealthCheck) => any;
    }
    /**
        * <p>Contains the parameters for ConfigureHealthCheck.</p>
        */
    export interface ConfigureHealthCheckInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The configuration information.</p>
                */
            HealthCheck: HealthCheck | undefined;
    }
    export namespace ConfigureHealthCheckInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureHealthCheckInput) => any;
    }
    /**
        * <p>Contains the output of ConfigureHealthCheck.</p>
        */
    export interface ConfigureHealthCheckOutput {
            /**
                * <p>The updated health check.</p>
                */
            HealthCheck?: HealthCheck;
    }
    export namespace ConfigureHealthCheckOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureHealthCheckOutput) => any;
    }
    /**
        * <p>Information about the <code>ConnectionDraining</code> attribute.</p>
        */
    export interface ConnectionDraining {
            /**
                * <p>Specifies whether connection draining is enabled for the load balancer.</p>
                */
            Enabled: boolean | undefined;
            /**
                * <p>The maximum time, in seconds, to keep the existing connections open before deregistering the instances.</p>
                */
            Timeout?: number;
    }
    export namespace ConnectionDraining {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionDraining) => any;
    }
    /**
        * <p>Information about the <code>ConnectionSettings</code> attribute.</p>
        */
    export interface ConnectionSettings {
            /**
                * <p>The time, in seconds, that the connection is allowed to be idle (no data has been sent over the connection) before it is closed by the load balancer.</p>
                */
            IdleTimeout: number | undefined;
    }
    export namespace ConnectionSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionSettings) => any;
    }
    /**
        * <p>Information about a listener.</p>
        *         <p>For information about the protocols and the ports supported by Elastic Load Balancing, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a>
        *             in the <i>Classic Load Balancers Guide</i>.</p>
        */
    export interface Listener {
            /**
                * <p>The load balancer transport protocol to use for routing: HTTP, HTTPS, TCP, or SSL.</p>
                */
            Protocol: string | undefined;
            /**
                * <p>The port on which the load balancer is listening. On EC2-VPC, you can specify any port from the range 1-65535. On EC2-Classic, you can specify any port from the following list: 25, 80, 443, 465, 587, 1024-65535.</p>
                */
            LoadBalancerPort: number | undefined;
            /**
                * <p>The protocol to use for routing traffic to instances: HTTP, HTTPS, TCP, or SSL.</p>
                *          <p>If the front-end protocol is TCP or SSL, the back-end protocol must be TCP or SSL.
                *            If the front-end protocol is HTTP or HTTPS, the back-end protocol must be HTTP or HTTPS.</p>
                *          <p>If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is secure,
                *           (HTTPS or SSL), the listener's <code>InstanceProtocol</code> must also be secure.</p>
                *         <p>If there is another listener with the same <code>InstancePort</code> whose <code>InstanceProtocol</code> is HTTP or TCP,
                *            the listener's <code>InstanceProtocol</code> must be HTTP or TCP.</p>
                */
            InstanceProtocol?: string;
            /**
                * <p>The port on which the instance is listening.</p>
                */
            InstancePort: number | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the server certificate.</p>
                */
            SSLCertificateId?: string;
    }
    export namespace Listener {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Listener) => any;
    }
    /**
        * <p>Contains the parameters for CreateLoadBalancer.</p>
        */
    export interface CreateAccessPointInput {
            /**
                * <p>The name of the load balancer.</p>
                *         <p>This name must be unique within your set of load balancers for the region, must have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, and cannot begin or end with a hyphen.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The listeners.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-listener-config.html">Listeners for Your Classic Load Balancer</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            Listeners: Listener[] | undefined;
            /**
                * <p>One or more Availability Zones from the same region as the load balancer.</p>
                *         <p>You must specify at least one Availability Zone.</p>
                *         <p>You can add more Availability Zones after you create the load balancer using
                *             <a>EnableAvailabilityZonesForLoadBalancer</a>.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The IDs of the subnets in your VPC to attach to the load balancer.
                *             Specify one subnet per Availability Zone specified in <code>AvailabilityZones</code>.</p>
                */
            Subnets?: string[];
            /**
                * <p>The IDs of the security groups to assign to the load balancer.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The type of a load balancer. Valid only for load balancers in a VPC.</p>
                *         <p>By default, Elastic Load Balancing creates an Internet-facing load balancer with a DNS name that resolves to public IP addresses.
                *             For more information about Internet-facing and Internal load balancers, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme">Load Balancer Scheme</a>
                *             in the <i>Elastic Load Balancing User Guide</i>.</p>
                *         <p>Specify <code>internal</code> to create a load balancer with a DNS name that resolves to private IP addresses.</p>
                */
            Scheme?: string;
            /**
                * <p>A list of tags to assign to the load balancer.</p>
                *         <p>For more information about tagging your load balancer, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/add-remove-tags.html">Tag Your Classic Load Balancer</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateAccessPointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccessPointInput) => any;
    }
    /**
        * <p>Contains the output for CreateLoadBalancer.</p>
        */
    export interface CreateAccessPointOutput {
            /**
                * <p>The DNS name of the load balancer.</p>
                */
            DNSName?: string;
    }
    export namespace CreateAccessPointOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccessPointOutput) => any;
    }
    /**
        * <p>Contains the parameters for CreateAppCookieStickinessPolicy.</p>
        */
    export interface CreateAppCookieStickinessPolicyInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The name of the application cookie used for stickiness.</p>
                */
            CookieName: string | undefined;
    }
    export namespace CreateAppCookieStickinessPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppCookieStickinessPolicyInput) => any;
    }
    /**
        * <p>Contains the output for CreateAppCookieStickinessPolicy.</p>
        */
    export interface CreateAppCookieStickinessPolicyOutput {
    }
    export namespace CreateAppCookieStickinessPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppCookieStickinessPolicyOutput) => any;
    }
    /**
        * <p>A policy with the specified name already exists for this load balancer.</p>
        */
    export class DuplicatePolicyNameException extends __BaseException {
            readonly name: "DuplicatePolicyNameException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicatePolicyNameException, __BaseException>);
    }
    /**
        * <p>The quota for the number of policies for this load balancer has been reached.</p>
        */
    export class TooManyPoliciesException extends __BaseException {
            readonly name: "TooManyPoliciesException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyPoliciesException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for CreateLBCookieStickinessPolicy.</p>
        */
    export interface CreateLBCookieStickinessPolicyInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The name of the policy being created. Policy names must consist of alphanumeric characters and dashes (-). This name must be unique within the set of policies for this load balancer.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The time period, in seconds, after which the cookie should be considered stale. If you do not specify this parameter, the default value is 0, which indicates that the sticky session should last for the duration of the browser session.</p>
                */
            CookieExpirationPeriod?: number;
    }
    export namespace CreateLBCookieStickinessPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLBCookieStickinessPolicyInput) => any;
    }
    /**
        * <p>Contains the output for CreateLBCookieStickinessPolicy.</p>
        */
    export interface CreateLBCookieStickinessPolicyOutput {
    }
    export namespace CreateLBCookieStickinessPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLBCookieStickinessPolicyOutput) => any;
    }
    /**
        * <p>The specified load balancer name already exists for this account.</p>
        */
    export class DuplicateAccessPointNameException extends __BaseException {
            readonly name: "DuplicateAccessPointNameException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateAccessPointNameException, __BaseException>);
    }
    /**
        * <p>The specified value for the schema is not valid. You can only specify a scheme for load balancers in a VPC.</p>
        */
    export class InvalidSchemeException extends __BaseException {
            readonly name: "InvalidSchemeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSchemeException, __BaseException>);
    }
    /**
        * <p>This operation is not allowed.</p>
        */
    export class OperationNotPermittedException extends __BaseException {
            readonly name: "OperationNotPermittedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationNotPermittedException, __BaseException>);
    }
    /**
        * <p>The quota for the number of load balancers has been reached.</p>
        */
    export class TooManyAccessPointsException extends __BaseException {
            readonly name: "TooManyAccessPointsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyAccessPointsException, __BaseException>);
    }
    /**
        * <p>The specified protocol or signature version is not supported.</p>
        */
    export class UnsupportedProtocolException extends __BaseException {
            readonly name: "UnsupportedProtocolException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedProtocolException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for CreateLoadBalancerListeners.</p>
        */
    export interface CreateLoadBalancerListenerInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The listeners.</p>
                */
            Listeners: Listener[] | undefined;
    }
    export namespace CreateLoadBalancerListenerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerListenerInput) => any;
    }
    /**
        * <p>Contains the parameters for CreateLoadBalancerListener.</p>
        */
    export interface CreateLoadBalancerListenerOutput {
    }
    export namespace CreateLoadBalancerListenerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerListenerOutput) => any;
    }
    /**
        * <p>A listener already exists for the specified load balancer name and port, but with a different instance port, protocol, or SSL certificate.</p>
        */
    export class DuplicateListenerException extends __BaseException {
            readonly name: "DuplicateListenerException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateListenerException, __BaseException>);
    }
    /**
        * <p>Information about a policy attribute.</p>
        */
    export interface PolicyAttribute {
            /**
                * <p>The name of the attribute.</p>
                */
            AttributeName?: string;
            /**
                * <p>The value of the attribute.</p>
                */
            AttributeValue?: string;
    }
    export namespace PolicyAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyAttribute) => any;
    }
    /**
        * <p>Contains the parameters for CreateLoadBalancerPolicy.</p>
        */
    export interface CreateLoadBalancerPolicyInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The name of the load balancer policy to be created. This name must be unique within the set of policies for this load balancer.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The name of the base policy type.
                *    	   To get the list of policy types, use <a>DescribeLoadBalancerPolicyTypes</a>.</p>
                */
            PolicyTypeName: string | undefined;
            /**
                * <p>The policy attributes.</p>
                */
            PolicyAttributes?: PolicyAttribute[];
    }
    export namespace CreateLoadBalancerPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerPolicyInput) => any;
    }
    /**
        * <p>Contains the output of CreateLoadBalancerPolicy.</p>
        */
    export interface CreateLoadBalancerPolicyOutput {
    }
    export namespace CreateLoadBalancerPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerPolicyOutput) => any;
    }
    /**
        * <p>One or more of the specified policy types do not exist.</p>
        */
    export class PolicyTypeNotFoundException extends __BaseException {
            readonly name: "PolicyTypeNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PolicyTypeNotFoundException, __BaseException>);
    }
    /**
        * <p>Information about the <code>CrossZoneLoadBalancing</code> attribute.</p>
        */
    export interface CrossZoneLoadBalancing {
            /**
                * <p>Specifies whether cross-zone load balancing is enabled for the load balancer.</p>
                */
            Enabled: boolean | undefined;
    }
    export namespace CrossZoneLoadBalancing {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CrossZoneLoadBalancing) => any;
    }
    /**
        * <p>Contains the parameters for DeleteLoadBalancer.</p>
        */
    export interface DeleteAccessPointInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
    }
    export namespace DeleteAccessPointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccessPointInput) => any;
    }
    /**
        * <p>Contains the output of DeleteLoadBalancer.</p>
        */
    export interface DeleteAccessPointOutput {
    }
    export namespace DeleteAccessPointOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccessPointOutput) => any;
    }
    /**
        * <p>Contains the parameters for DeleteLoadBalancerListeners.</p>
        */
    export interface DeleteLoadBalancerListenerInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The client port numbers of the listeners.</p>
                */
            LoadBalancerPorts: number[] | undefined;
    }
    export namespace DeleteLoadBalancerListenerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerListenerInput) => any;
    }
    /**
        * <p>Contains the output of DeleteLoadBalancerListeners.</p>
        */
    export interface DeleteLoadBalancerListenerOutput {
    }
    export namespace DeleteLoadBalancerListenerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerListenerOutput) => any;
    }
    /**
        * <p>Contains the parameters for DeleteLoadBalancerPolicy.</p>
        */
    export interface DeleteLoadBalancerPolicyInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName: string | undefined;
    }
    export namespace DeleteLoadBalancerPolicyInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerPolicyInput) => any;
    }
    /**
        * <p>Contains the output of DeleteLoadBalancerPolicy.</p>
        */
    export interface DeleteLoadBalancerPolicyOutput {
    }
    export namespace DeleteLoadBalancerPolicyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerPolicyOutput) => any;
    }
    /**
        * <p>A request made by Elastic Load Balancing to another service exceeds the maximum request rate permitted for your account.</p>
        */
    export class DependencyThrottleException extends __BaseException {
            readonly name: "DependencyThrottleException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DependencyThrottleException, __BaseException>);
    }
    /**
        * <p>The ID of an EC2 instance.</p>
        */
    export interface Instance {
            /**
                * <p>The instance ID.</p>
                */
            InstanceId?: string;
    }
    export namespace Instance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Instance) => any;
    }
    /**
        * <p>Contains the parameters for DeregisterInstancesFromLoadBalancer.</p>
        */
    export interface DeregisterEndPointsInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The IDs of the instances.</p>
                */
            Instances: Instance[] | undefined;
    }
    export namespace DeregisterEndPointsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterEndPointsInput) => any;
    }
    /**
        * <p>Contains the output of DeregisterInstancesFromLoadBalancer.</p>
        */
    export interface DeregisterEndPointsOutput {
            /**
                * <p>The remaining instances registered with the load balancer.</p>
                */
            Instances?: Instance[];
    }
    export namespace DeregisterEndPointsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterEndPointsOutput) => any;
    }
    /**
        * <p>The specified endpoint is not valid.</p>
        */
    export class InvalidEndPointException extends __BaseException {
            readonly name: "InvalidEndPointException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEndPointException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for DescribeLoadBalancers.</p>
        */
    export interface DescribeAccessPointsInput {
            /**
                * <p>The names of the load balancers.</p>
                */
            LoadBalancerNames?: string[];
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call (a number from 1 to 400). The default is 400.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeAccessPointsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccessPointsInput) => any;
    }
    /**
        * <p>The policies enabled for a listener.</p>
        */
    export interface ListenerDescription {
            /**
                * <p>The listener.</p>
                */
            Listener?: Listener;
            /**
                * <p>The policies. If there are no policies enabled, the list is empty.</p>
                */
            PolicyNames?: string[];
    }
    export namespace ListenerDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListenerDescription) => any;
    }
    /**
        * <p>Information about a policy for duration-based session stickiness.</p>
        */
    export interface LBCookieStickinessPolicy {
            /**
                * <p>The name of the policy. This name must be unique within the set of policies for this load balancer.</p>
                */
            PolicyName?: string;
            /**
                * <p>The time period, in seconds, after which the cookie should be considered stale. If this parameter is not specified, the stickiness session lasts for the duration of the browser session.</p>
                */
            CookieExpirationPeriod?: number;
    }
    export namespace LBCookieStickinessPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LBCookieStickinessPolicy) => any;
    }
    /**
        * <p>The policies for a load balancer.</p>
        */
    export interface Policies {
            /**
                * <p>The stickiness policies created using <a>CreateAppCookieStickinessPolicy</a>.</p>
                */
            AppCookieStickinessPolicies?: AppCookieStickinessPolicy[];
            /**
                * <p>The stickiness policies created using <a>CreateLBCookieStickinessPolicy</a>.</p>
                */
            LBCookieStickinessPolicies?: LBCookieStickinessPolicy[];
            /**
                * <p>The policies other than the stickiness policies.</p>
                */
            OtherPolicies?: string[];
    }
    export namespace Policies {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Policies) => any;
    }
    /**
        * <p>Information about a source security group.</p>
        */
    export interface SourceSecurityGroup {
            /**
                * <p>The owner of the security group.</p>
                */
            OwnerAlias?: string;
            /**
                * <p>The name of the security group.</p>
                */
            GroupName?: string;
    }
    export namespace SourceSecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceSecurityGroup) => any;
    }
    /**
        * <p>Information about a load balancer.</p>
        */
    export interface LoadBalancerDescription {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>The DNS name of the load balancer.</p>
                */
            DNSName?: string;
            /**
                * <p>The DNS name of the load balancer.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/using-domain-names-with-elb.html">Configure a Custom Domain Name</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            CanonicalHostedZoneName?: string;
            /**
                * <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
                */
            CanonicalHostedZoneNameID?: string;
            /**
                * <p>The listeners for the load balancer.</p>
                */
            ListenerDescriptions?: ListenerDescription[];
            /**
                * <p>The policies defined for the load balancer.</p>
                */
            Policies?: Policies;
            /**
                * <p>Information about your EC2 instances.</p>
                */
            BackendServerDescriptions?: BackendServerDescription[];
            /**
                * <p>The Availability Zones for the load balancer.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The IDs of the subnets for the load balancer.</p>
                */
            Subnets?: string[];
            /**
                * <p>The ID of the VPC for the load balancer.</p>
                */
            VPCId?: string;
            /**
                * <p>The IDs of the instances for the load balancer.</p>
                */
            Instances?: Instance[];
            /**
                * <p>Information about the health checks conducted on the load balancer.</p>
                */
            HealthCheck?: HealthCheck;
            /**
                * <p>The security group for the load balancer, which you can use as part of your inbound rules for your registered instances.
                *             To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.</p>
                */
            SourceSecurityGroup?: SourceSecurityGroup;
            /**
                * <p>The security groups for the load balancer. Valid only for load balancers in a VPC.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>The date and time the load balancer was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The type of load balancer. Valid only for load balancers in a VPC.</p>
                *          <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer
                *            has a public DNS name that resolves to a public IP address.</p>
                *         <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public
                *            DNS name that resolves to a private IP address.</p>
                */
            Scheme?: string;
    }
    export namespace LoadBalancerDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerDescription) => any;
    }
    /**
        * <p>Contains the parameters for DescribeLoadBalancers.</p>
        */
    export interface DescribeAccessPointsOutput {
            /**
                * <p>Information about the load balancers.</p>
                */
            LoadBalancerDescriptions?: LoadBalancerDescription[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeAccessPointsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccessPointsOutput) => any;
    }
    export interface DescribeAccountLimitsInput {
            /**
                * <p>The marker for the next set of results. (You received this marker from a previous call.)</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of results to return with this call.</p>
                */
            PageSize?: number;
    }
    export namespace DescribeAccountLimitsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountLimitsInput) => any;
    }
    /**
        * <p>Information about an Elastic Load Balancing resource limit for your AWS account.</p>
        */
    export interface Limit {
            /**
                * <p>The name of the limit. The possible values are:</p>
                *         <ul>
                *             <li>
                *                 <p>classic-listeners</p>
                *             </li>
                *             <li>
                *                 <p>classic-load-balancers</p>
                *             </li>
                *             <li>
                *                 <p>classic-registered-instances</p>
                *             </li>
                *          </ul>
                */
            Name?: string;
            /**
                * <p>The maximum value of the limit.</p>
                */
            Max?: string;
    }
    export namespace Limit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Limit) => any;
    }
    export interface DescribeAccountLimitsOutput {
            /**
                * <p>Information about the limits.</p>
                */
            Limits?: Limit[];
            /**
                * <p>The marker to use when requesting the next set of results. If there are no additional results, the string is empty.</p>
                */
            NextMarker?: string;
    }
    export namespace DescribeAccountLimitsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountLimitsOutput) => any;
    }
    /**
        * <p>Contains the parameters for DescribeInstanceHealth.</p>
        */
    export interface DescribeEndPointStateInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The IDs of the instances.</p>
                */
            Instances?: Instance[];
    }
    export namespace DescribeEndPointStateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndPointStateInput) => any;
    }
    /**
        * <p>Information about the state of an EC2 instance.</p>
        */
    export interface InstanceState {
            /**
                * <p>The ID of the instance.</p>
                */
            InstanceId?: string;
            /**
                * <p>The current state of the instance.</p>
                *         <p>Valid values: <code>InService</code> | <code>OutOfService</code> | <code>Unknown</code>
                *          </p>
                */
            State?: string;
            /**
                * <p>Information about the cause of <code>OutOfService</code> instances.
                *          Specifically, whether the cause is Elastic Load Balancing or the instance.</p>
                *         <p>Valid values: <code>ELB</code> | <code>Instance</code> | <code>N/A</code>
                *          </p>
                */
            ReasonCode?: string;
            /**
                * <p>A description of the instance state. This string can contain one or more of the following messages.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>N/A</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>A transient error occurred. Please try again later.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance has failed at least the UnhealthyThreshold number of health checks consecutively.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance has not passed the configured HealthyThreshold number of health checks consecutively.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance registration is still in progress.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance is in the EC2 Availability Zone for which LoadBalancer is not configured to route traffic to.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance is not currently registered with the LoadBalancer.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance deregistration currently in progress.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Disable Availability Zone is currently in progress.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance is in pending state.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance is in stopped state.</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>Instance is in terminated state.</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Description?: string;
    }
    export namespace InstanceState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceState) => any;
    }
    /**
        * <p>Contains the output for DescribeInstanceHealth.</p>
        */
    export interface DescribeEndPointStateOutput {
            /**
                * <p>Information about the health of the instances.</p>
                */
            InstanceStates?: InstanceState[];
    }
    export namespace DescribeEndPointStateOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEndPointStateOutput) => any;
    }
    /**
        * <p>Contains the parameters for DescribeLoadBalancerAttributes.</p>
        */
    export interface DescribeLoadBalancerAttributesInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
    }
    export namespace DescribeLoadBalancerAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerAttributesInput) => any;
    }
    /**
        * <p>The attributes for a load balancer.</p>
        */
    export interface LoadBalancerAttributes {
            /**
                * <p>If enabled, the load balancer routes the request traffic evenly across all instances regardless of the Availability Zones.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-disable-crosszone-lb.html">Configure Cross-Zone Load Balancing</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            CrossZoneLoadBalancing?: CrossZoneLoadBalancing;
            /**
                * <p>If enabled, the load balancer captures detailed information of all requests and delivers the information to the Amazon S3 bucket that you specify.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html">Enable Access Logs</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            AccessLog?: AccessLog;
            /**
                * <p>If enabled, the load balancer allows existing requests to complete before the load balancer shifts traffic away from a deregistered or unhealthy instance.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-conn-drain.html">Configure Connection Draining</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            ConnectionDraining?: ConnectionDraining;
            /**
                * <p>If enabled, the load balancer allows the connections to remain idle (no data is sent over the connection) for the specified duration.</p>
                *         <p>By default, Elastic Load Balancing maintains a 60-second idle connection timeout for both front-end and back-end connections of your load balancer.
                *             For more information, see <a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/config-idle-timeout.html">Configure Idle Connection Timeout</a>
                *             in the <i>Classic Load Balancers Guide</i>.</p>
                */
            ConnectionSettings?: ConnectionSettings;
            /**
                * <p>Any additional attributes.</p>
                */
            AdditionalAttributes?: AdditionalAttribute[];
    }
    export namespace LoadBalancerAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerAttributes) => any;
    }
    /**
        * <p>Contains the output of DescribeLoadBalancerAttributes.</p>
        */
    export interface DescribeLoadBalancerAttributesOutput {
            /**
                * <p>Information about the load balancer attributes.</p>
                */
            LoadBalancerAttributes?: LoadBalancerAttributes;
    }
    export namespace DescribeLoadBalancerAttributesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerAttributesOutput) => any;
    }
    /**
        * <p>The specified load balancer attribute does not exist.</p>
        */
    export class LoadBalancerAttributeNotFoundException extends __BaseException {
            readonly name: "LoadBalancerAttributeNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LoadBalancerAttributeNotFoundException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for DescribeLoadBalancerPolicies.</p>
        */
    export interface DescribeLoadBalancerPoliciesInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>The names of the policies.</p>
                */
            PolicyNames?: string[];
    }
    export namespace DescribeLoadBalancerPoliciesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerPoliciesInput) => any;
    }
    /**
        * <p>Information about a policy attribute.</p>
        */
    export interface PolicyAttributeDescription {
            /**
                * <p>The name of the attribute.</p>
                */
            AttributeName?: string;
            /**
                * <p>The value of the attribute.</p>
                */
            AttributeValue?: string;
    }
    export namespace PolicyAttributeDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyAttributeDescription) => any;
    }
    /**
        * <p>Information about a policy.</p>
        */
    export interface PolicyDescription {
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The name of the policy type.</p>
                */
            PolicyTypeName?: string;
            /**
                * <p>The policy attributes.</p>
                */
            PolicyAttributeDescriptions?: PolicyAttributeDescription[];
    }
    export namespace PolicyDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyDescription) => any;
    }
    /**
        * <p>Contains the output of DescribeLoadBalancerPolicies.</p>
        */
    export interface DescribeLoadBalancerPoliciesOutput {
            /**
                * <p>Information about the policies.</p>
                */
            PolicyDescriptions?: PolicyDescription[];
    }
    export namespace DescribeLoadBalancerPoliciesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerPoliciesOutput) => any;
    }
    /**
        * <p>One or more of the specified policies do not exist.</p>
        */
    export class PolicyNotFoundException extends __BaseException {
            readonly name: "PolicyNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PolicyNotFoundException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for DescribeLoadBalancerPolicyTypes.</p>
        */
    export interface DescribeLoadBalancerPolicyTypesInput {
            /**
                * <p>The names of the policy types. If no names are specified, describes all policy types defined by Elastic Load Balancing.</p>
                */
            PolicyTypeNames?: string[];
    }
    export namespace DescribeLoadBalancerPolicyTypesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerPolicyTypesInput) => any;
    }
    /**
        * <p>Information about a policy attribute type.</p>
        */
    export interface PolicyAttributeTypeDescription {
            /**
                * <p>The name of the attribute.</p>
                */
            AttributeName?: string;
            /**
                * <p>The type of the attribute. For example, <code>Boolean</code> or <code>Integer</code>.</p>
                */
            AttributeType?: string;
            /**
                * <p>A description of the attribute.</p>
                */
            Description?: string;
            /**
                * <p>The default value of the attribute, if applicable.</p>
                */
            DefaultValue?: string;
            /**
                * <p>The cardinality of the attribute.</p>
                *         <p>Valid values:</p>
                *             <ul>
                *             <li>
                *                <p>ONE(1) : Single value required</p>
                *             </li>
                *             <li>
                *                <p>ZERO_OR_ONE(0..1) : Up to one value is allowed</p>
                *             </li>
                *             <li>
                *                <p>ZERO_OR_MORE(0..*) : Optional. Multiple values are allowed</p>
                *             </li>
                *             <li>
                *                <p>ONE_OR_MORE(1..*0) : Required. Multiple values are allowed</p>
                *             </li>
                *          </ul>
                */
            Cardinality?: string;
    }
    export namespace PolicyAttributeTypeDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyAttributeTypeDescription) => any;
    }
    /**
        * <p>Information about a policy type.</p>
        */
    export interface PolicyTypeDescription {
            /**
                * <p>The name of the policy type.</p>
                */
            PolicyTypeName?: string;
            /**
                * <p>A description of the policy type.</p>
                */
            Description?: string;
            /**
                * <p>The description of the policy attributes associated with the policies defined by Elastic Load Balancing.</p>
                */
            PolicyAttributeTypeDescriptions?: PolicyAttributeTypeDescription[];
    }
    export namespace PolicyTypeDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyTypeDescription) => any;
    }
    /**
        * <p>Contains the output of DescribeLoadBalancerPolicyTypes.</p>
        */
    export interface DescribeLoadBalancerPolicyTypesOutput {
            /**
                * <p>Information about the policy types.</p>
                */
            PolicyTypeDescriptions?: PolicyTypeDescription[];
    }
    export namespace DescribeLoadBalancerPolicyTypesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoadBalancerPolicyTypesOutput) => any;
    }
    /**
        * <p>Contains the parameters for DescribeTags.</p>
        */
    export interface DescribeTagsInput {
            /**
                * <p>The names of the load balancers.</p>
                */
            LoadBalancerNames: string[] | undefined;
    }
    export namespace DescribeTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTagsInput) => any;
    }
    /**
        * <p>The tags associated with a load balancer.</p>
        */
    export interface TagDescription {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>The tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace TagDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagDescription) => any;
    }
    /**
        * <p>Contains the output for DescribeTags.</p>
        */
    export interface DescribeTagsOutput {
            /**
                * <p>Information about the tags.</p>
                */
            TagDescriptions?: TagDescription[];
    }
    export namespace DescribeTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTagsOutput) => any;
    }
    /**
        * <p>Contains the parameters for DetachLoadBalancerFromSubnets.</p>
        */
    export interface DetachLoadBalancerFromSubnetsInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The IDs of the subnets.</p>
                */
            Subnets: string[] | undefined;
    }
    export namespace DetachLoadBalancerFromSubnetsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachLoadBalancerFromSubnetsInput) => any;
    }
    /**
        * <p>Contains the output of DetachLoadBalancerFromSubnets.</p>
        */
    export interface DetachLoadBalancerFromSubnetsOutput {
            /**
                * <p>The IDs of the remaining subnets for the load balancer.</p>
                */
            Subnets?: string[];
    }
    export namespace DetachLoadBalancerFromSubnetsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachLoadBalancerFromSubnetsOutput) => any;
    }
    /**
        * <p>Contains the parameters for DisableAvailabilityZonesForLoadBalancer.</p>
        */
    export interface RemoveAvailabilityZonesInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The Availability Zones.</p>
                */
            AvailabilityZones: string[] | undefined;
    }
    export namespace RemoveAvailabilityZonesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveAvailabilityZonesInput) => any;
    }
    /**
        * <p>Contains the output for DisableAvailabilityZonesForLoadBalancer.</p>
        */
    export interface RemoveAvailabilityZonesOutput {
            /**
                * <p>The remaining Availability Zones for the load balancer.</p>
                */
            AvailabilityZones?: string[];
    }
    export namespace RemoveAvailabilityZonesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveAvailabilityZonesOutput) => any;
    }
    /**
        * <p>Contains the parameters for ModifyLoadBalancerAttributes.</p>
        */
    export interface ModifyLoadBalancerAttributesInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The attributes for the load balancer.</p>
                */
            LoadBalancerAttributes: LoadBalancerAttributes | undefined;
    }
    export namespace ModifyLoadBalancerAttributesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyLoadBalancerAttributesInput) => any;
    }
    /**
        * <p>Contains the output of ModifyLoadBalancerAttributes.</p>
        */
    export interface ModifyLoadBalancerAttributesOutput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName?: string;
            /**
                * <p>Information about the load balancer attributes.</p>
                */
            LoadBalancerAttributes?: LoadBalancerAttributes;
    }
    export namespace ModifyLoadBalancerAttributesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyLoadBalancerAttributesOutput) => any;
    }
    /**
        * <p>Contains the parameters for RegisterInstancesWithLoadBalancer.</p>
        */
    export interface RegisterEndPointsInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The IDs of the instances.</p>
                */
            Instances: Instance[] | undefined;
    }
    export namespace RegisterEndPointsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterEndPointsInput) => any;
    }
    /**
        * <p>Contains the output of RegisterInstancesWithLoadBalancer.</p>
        */
    export interface RegisterEndPointsOutput {
            /**
                * <p>The updated list of instances for the load balancer.</p>
                */
            Instances?: Instance[];
    }
    export namespace RegisterEndPointsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterEndPointsOutput) => any;
    }
    /**
        * <p>The key of a tag.</p>
        */
    export interface TagKeyOnly {
            /**
                * <p>The name of the key.</p>
                */
            Key?: string;
    }
    export namespace TagKeyOnly {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagKeyOnly) => any;
    }
    /**
        * <p>Contains the parameters for RemoveTags.</p>
        */
    export interface RemoveTagsInput {
            /**
                * <p>The name of the load balancer. You can specify a maximum of one load balancer name.</p>
                */
            LoadBalancerNames: string[] | undefined;
            /**
                * <p>The list of tag keys to remove.</p>
                */
            Tags: TagKeyOnly[] | undefined;
    }
    export namespace RemoveTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsInput) => any;
    }
    /**
        * <p>Contains the output of RemoveTags.</p>
        */
    export interface RemoveTagsOutput {
    }
    export namespace RemoveTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsOutput) => any;
    }
    /**
        * <p>The load balancer does not have a listener configured at the specified port.</p>
        */
    export class ListenerNotFoundException extends __BaseException {
            readonly name: "ListenerNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ListenerNotFoundException, __BaseException>);
    }
    /**
        * <p>Contains the parameters for SetLoadBalancerListenerSSLCertificate.</p>
        */
    export interface SetLoadBalancerListenerSSLCertificateInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The port that uses the specified SSL certificate.</p>
                */
            LoadBalancerPort: number | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the SSL certificate.</p>
                */
            SSLCertificateId: string | undefined;
    }
    export namespace SetLoadBalancerListenerSSLCertificateInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetLoadBalancerListenerSSLCertificateInput) => any;
    }
    /**
        * <p>Contains the output of SetLoadBalancerListenerSSLCertificate.</p>
        */
    export interface SetLoadBalancerListenerSSLCertificateOutput {
    }
    export namespace SetLoadBalancerListenerSSLCertificateOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetLoadBalancerListenerSSLCertificateOutput) => any;
    }
    /**
        * <p>Contains the parameters for SetLoadBalancerPoliciesForBackendServer.</p>
        */
    export interface SetLoadBalancerPoliciesForBackendServerInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The port number associated with the EC2 instance.</p>
                */
            InstancePort: number | undefined;
            /**
                * <p>The names of the policies. If the list is empty, then all current polices are removed from the EC2 instance.</p>
                */
            PolicyNames: string[] | undefined;
    }
    export namespace SetLoadBalancerPoliciesForBackendServerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetLoadBalancerPoliciesForBackendServerInput) => any;
    }
    /**
        * <p>Contains the output of SetLoadBalancerPoliciesForBackendServer.</p>
        */
    export interface SetLoadBalancerPoliciesForBackendServerOutput {
    }
    export namespace SetLoadBalancerPoliciesForBackendServerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetLoadBalancerPoliciesForBackendServerOutput) => any;
    }
    /**
        * <p>Contains the parameters for SetLoadBalancePoliciesOfListener.</p>
        */
    export interface SetLoadBalancerPoliciesOfListenerInput {
            /**
                * <p>The name of the load balancer.</p>
                */
            LoadBalancerName: string | undefined;
            /**
                * <p>The external port of the load balancer.</p>
                */
            LoadBalancerPort: number | undefined;
            /**
                * <p>The names of the policies. This list must include all policies to be enabled. If you omit a policy that is currently enabled, it is disabled. If the list is empty, all current policies are disabled.</p>
                */
            PolicyNames: string[] | undefined;
    }
    export namespace SetLoadBalancerPoliciesOfListenerInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetLoadBalancerPoliciesOfListenerInput) => any;
    }
    /**
        * <p>Contains the output of SetLoadBalancePoliciesOfListener.</p>
        */
    export interface SetLoadBalancerPoliciesOfListenerOutput {
    }
    export namespace SetLoadBalancerPoliciesOfListenerOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetLoadBalancerPoliciesOfListenerOutput) => any;
    }
}

declare module '@aws-sdk/client-elastic-load-balancing/node_modules/@aws-sdk/client-elastic-load-balancing/dist-types/models/ElasticLoadBalancingServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ElasticLoadBalancing service.
        */
    export class ElasticLoadBalancingServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

