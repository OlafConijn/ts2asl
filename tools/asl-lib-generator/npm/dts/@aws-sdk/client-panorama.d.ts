// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-panorama' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateApplicationInstanceCommandInput, CreateApplicationInstanceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateApplicationInstanceCommand";
    import { CreateJobForDevicesCommandInput, CreateJobForDevicesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateJobForDevicesCommand";
    import { CreateNodeFromTemplateJobCommandInput, CreateNodeFromTemplateJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateNodeFromTemplateJobCommand";
    import { CreatePackageCommandInput, CreatePackageCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreatePackageCommand";
    import { CreatePackageImportJobCommandInput, CreatePackageImportJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreatePackageImportJobCommand";
    import { DeleteDeviceCommandInput, DeleteDeviceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeleteDeviceCommand";
    import { DeletePackageCommandInput, DeletePackageCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeletePackageCommand";
    import { DeregisterPackageVersionCommandInput, DeregisterPackageVersionCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeregisterPackageVersionCommand";
    import { DescribeApplicationInstanceCommandInput, DescribeApplicationInstanceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeApplicationInstanceCommand";
    import { DescribeApplicationInstanceDetailsCommandInput, DescribeApplicationInstanceDetailsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeApplicationInstanceDetailsCommand";
    import { DescribeDeviceCommandInput, DescribeDeviceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeDeviceCommand";
    import { DescribeDeviceJobCommandInput, DescribeDeviceJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeDeviceJobCommand";
    import { DescribeNodeCommandInput, DescribeNodeCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeNodeCommand";
    import { DescribeNodeFromTemplateJobCommandInput, DescribeNodeFromTemplateJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeNodeFromTemplateJobCommand";
    import { DescribePackageCommandInput, DescribePackageCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageCommand";
    import { DescribePackageImportJobCommandInput, DescribePackageImportJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageImportJobCommand";
    import { DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageVersionCommand";
    import { ListApplicationInstanceDependenciesCommandInput, ListApplicationInstanceDependenciesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstanceDependenciesCommand";
    import { ListApplicationInstanceNodeInstancesCommandInput, ListApplicationInstanceNodeInstancesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstanceNodeInstancesCommand";
    import { ListApplicationInstancesCommandInput, ListApplicationInstancesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstancesCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListDevicesCommand";
    import { ListDevicesJobsCommandInput, ListDevicesJobsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListDevicesJobsCommand";
    import { ListNodeFromTemplateJobsCommandInput, ListNodeFromTemplateJobsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListNodeFromTemplateJobsCommand";
    import { ListNodesCommandInput, ListNodesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListNodesCommand";
    import { ListPackageImportJobsCommandInput, ListPackageImportJobsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListPackageImportJobsCommand";
    import { ListPackagesCommandInput, ListPackagesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListPackagesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListTagsForResourceCommand";
    import { ProvisionDeviceCommandInput, ProvisionDeviceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ProvisionDeviceCommand";
    import { RegisterPackageVersionCommandInput, RegisterPackageVersionCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/RegisterPackageVersionCommand";
    import { RemoveApplicationInstanceCommandInput, RemoveApplicationInstanceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/RemoveApplicationInstanceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/UntagResourceCommand";
    import { UpdateDeviceMetadataCommandInput, UpdateDeviceMetadataCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/UpdateDeviceMetadataCommand";
    import { PanoramaClient } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    /**
        * <fullname>AWS Panorama</fullname>
        *          <p>
        *             <b>Overview</b>
        *          </p>
        *          <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href="https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html">What is AWS Panorama?</a> in the
        *         <i>AWS Panorama Developer Guide</i>.</p>
        */
    export class Panorama extends PanoramaClient {
            /**
                * <p>Creates an application instance and deploys it to a device.</p>
                */
            createApplicationInstance(args: CreateApplicationInstanceCommandInput, options?: __HttpHandlerOptions): Promise<CreateApplicationInstanceCommandOutput>;
            createApplicationInstance(args: CreateApplicationInstanceCommandInput, cb: (err: any, data?: CreateApplicationInstanceCommandOutput) => void): void;
            createApplicationInstance(args: CreateApplicationInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApplicationInstanceCommandOutput) => void): void;
            /**
                * <p>Creates a job to run on one or more devices.</p>
                */
            createJobForDevices(args: CreateJobForDevicesCommandInput, options?: __HttpHandlerOptions): Promise<CreateJobForDevicesCommandOutput>;
            createJobForDevices(args: CreateJobForDevicesCommandInput, cb: (err: any, data?: CreateJobForDevicesCommandOutput) => void): void;
            createJobForDevices(args: CreateJobForDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateJobForDevicesCommandOutput) => void): void;
            /**
                * <p>Creates a camera stream node.</p>
                */
            createNodeFromTemplateJob(args: CreateNodeFromTemplateJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateNodeFromTemplateJobCommandOutput>;
            createNodeFromTemplateJob(args: CreateNodeFromTemplateJobCommandInput, cb: (err: any, data?: CreateNodeFromTemplateJobCommandOutput) => void): void;
            createNodeFromTemplateJob(args: CreateNodeFromTemplateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNodeFromTemplateJobCommandOutput) => void): void;
            /**
                * <p>Creates a package and storage location in an Amazon S3 access point.</p>
                */
            createPackage(args: CreatePackageCommandInput, options?: __HttpHandlerOptions): Promise<CreatePackageCommandOutput>;
            createPackage(args: CreatePackageCommandInput, cb: (err: any, data?: CreatePackageCommandOutput) => void): void;
            createPackage(args: CreatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePackageCommandOutput) => void): void;
            /**
                * <p>Imports a node package.</p>
                */
            createPackageImportJob(args: CreatePackageImportJobCommandInput, options?: __HttpHandlerOptions): Promise<CreatePackageImportJobCommandOutput>;
            createPackageImportJob(args: CreatePackageImportJobCommandInput, cb: (err: any, data?: CreatePackageImportJobCommandOutput) => void): void;
            createPackageImportJob(args: CreatePackageImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePackageImportJobCommandOutput) => void): void;
            /**
                * <p>Deletes a device.</p>
                */
            deleteDevice(args: DeleteDeviceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeviceCommandOutput>;
            deleteDevice(args: DeleteDeviceCommandInput, cb: (err: any, data?: DeleteDeviceCommandOutput) => void): void;
            deleteDevice(args: DeleteDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeviceCommandOutput) => void): void;
            /**
                * <p>Deletes a package.</p>
                *          <note>
                *             <p>To delete a package, you need permission to call <code>s3:DeleteObject</code> in addition to permissions for
                *         the AWS Panorama API.</p>
                *          </note>
                */
            deletePackage(args: DeletePackageCommandInput, options?: __HttpHandlerOptions): Promise<DeletePackageCommandOutput>;
            deletePackage(args: DeletePackageCommandInput, cb: (err: any, data?: DeletePackageCommandOutput) => void): void;
            deletePackage(args: DeletePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePackageCommandOutput) => void): void;
            /**
                * <p>Deregisters a package version.</p>
                */
            deregisterPackageVersion(args: DeregisterPackageVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterPackageVersionCommandOutput>;
            deregisterPackageVersion(args: DeregisterPackageVersionCommandInput, cb: (err: any, data?: DeregisterPackageVersionCommandOutput) => void): void;
            deregisterPackageVersion(args: DeregisterPackageVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterPackageVersionCommandOutput) => void): void;
            /**
                * <p>Returns information about an application instance on a device.</p>
                */
            describeApplicationInstance(args: DescribeApplicationInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApplicationInstanceCommandOutput>;
            describeApplicationInstance(args: DescribeApplicationInstanceCommandInput, cb: (err: any, data?: DescribeApplicationInstanceCommandOutput) => void): void;
            describeApplicationInstance(args: DescribeApplicationInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApplicationInstanceCommandOutput) => void): void;
            /**
                * <p>Returns information about an application instance's configuration manifest.</p>
                */
            describeApplicationInstanceDetails(args: DescribeApplicationInstanceDetailsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeApplicationInstanceDetailsCommandOutput>;
            describeApplicationInstanceDetails(args: DescribeApplicationInstanceDetailsCommandInput, cb: (err: any, data?: DescribeApplicationInstanceDetailsCommandOutput) => void): void;
            describeApplicationInstanceDetails(args: DescribeApplicationInstanceDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeApplicationInstanceDetailsCommandOutput) => void): void;
            /**
                * <p>Returns information about a device.</p>
                */
            describeDevice(args: DescribeDeviceCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDeviceCommandOutput>;
            describeDevice(args: DescribeDeviceCommandInput, cb: (err: any, data?: DescribeDeviceCommandOutput) => void): void;
            describeDevice(args: DescribeDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDeviceCommandOutput) => void): void;
            /**
                * <p>Returns information about a device job.</p>
                */
            describeDeviceJob(args: DescribeDeviceJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDeviceJobCommandOutput>;
            describeDeviceJob(args: DescribeDeviceJobCommandInput, cb: (err: any, data?: DescribeDeviceJobCommandOutput) => void): void;
            describeDeviceJob(args: DescribeDeviceJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDeviceJobCommandOutput) => void): void;
            /**
                * <p>Returns information about a node.</p>
                */
            describeNode(args: DescribeNodeCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNodeCommandOutput>;
            describeNode(args: DescribeNodeCommandInput, cb: (err: any, data?: DescribeNodeCommandOutput) => void): void;
            describeNode(args: DescribeNodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNodeCommandOutput) => void): void;
            /**
                * <p>Returns information about a job to create a camera stream node.</p>
                */
            describeNodeFromTemplateJob(args: DescribeNodeFromTemplateJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNodeFromTemplateJobCommandOutput>;
            describeNodeFromTemplateJob(args: DescribeNodeFromTemplateJobCommandInput, cb: (err: any, data?: DescribeNodeFromTemplateJobCommandOutput) => void): void;
            describeNodeFromTemplateJob(args: DescribeNodeFromTemplateJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNodeFromTemplateJobCommandOutput) => void): void;
            /**
                * <p>Returns information about a package.</p>
                */
            describePackage(args: DescribePackageCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackageCommandOutput>;
            describePackage(args: DescribePackageCommandInput, cb: (err: any, data?: DescribePackageCommandOutput) => void): void;
            describePackage(args: DescribePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackageCommandOutput) => void): void;
            /**
                * <p>Returns information about a package import job.</p>
                */
            describePackageImportJob(args: DescribePackageImportJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackageImportJobCommandOutput>;
            describePackageImportJob(args: DescribePackageImportJobCommandInput, cb: (err: any, data?: DescribePackageImportJobCommandOutput) => void): void;
            describePackageImportJob(args: DescribePackageImportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackageImportJobCommandOutput) => void): void;
            /**
                * <p>Returns information about a package version.</p>
                */
            describePackageVersion(args: DescribePackageVersionCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackageVersionCommandOutput>;
            describePackageVersion(args: DescribePackageVersionCommandInput, cb: (err: any, data?: DescribePackageVersionCommandOutput) => void): void;
            describePackageVersion(args: DescribePackageVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackageVersionCommandOutput) => void): void;
            /**
                * <p>Returns a list of application instance dependencies.</p>
                */
            listApplicationInstanceDependencies(args: ListApplicationInstanceDependenciesCommandInput, options?: __HttpHandlerOptions): Promise<ListApplicationInstanceDependenciesCommandOutput>;
            listApplicationInstanceDependencies(args: ListApplicationInstanceDependenciesCommandInput, cb: (err: any, data?: ListApplicationInstanceDependenciesCommandOutput) => void): void;
            listApplicationInstanceDependencies(args: ListApplicationInstanceDependenciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApplicationInstanceDependenciesCommandOutput) => void): void;
            /**
                * <p>Returns a list of application node instances.</p>
                */
            listApplicationInstanceNodeInstances(args: ListApplicationInstanceNodeInstancesCommandInput, options?: __HttpHandlerOptions): Promise<ListApplicationInstanceNodeInstancesCommandOutput>;
            listApplicationInstanceNodeInstances(args: ListApplicationInstanceNodeInstancesCommandInput, cb: (err: any, data?: ListApplicationInstanceNodeInstancesCommandOutput) => void): void;
            listApplicationInstanceNodeInstances(args: ListApplicationInstanceNodeInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApplicationInstanceNodeInstancesCommandOutput) => void): void;
            /**
                * <p>Returns a list of application instances.</p>
                */
            listApplicationInstances(args: ListApplicationInstancesCommandInput, options?: __HttpHandlerOptions): Promise<ListApplicationInstancesCommandOutput>;
            listApplicationInstances(args: ListApplicationInstancesCommandInput, cb: (err: any, data?: ListApplicationInstancesCommandOutput) => void): void;
            listApplicationInstances(args: ListApplicationInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApplicationInstancesCommandOutput) => void): void;
            /**
                * <p>Returns a list of devices.</p>
                */
            listDevices(args: ListDevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicesCommandOutput>;
            listDevices(args: ListDevicesCommandInput, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            listDevices(args: ListDevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicesCommandOutput) => void): void;
            /**
                * <p>Returns a list of jobs.</p>
                */
            listDevicesJobs(args: ListDevicesJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListDevicesJobsCommandOutput>;
            listDevicesJobs(args: ListDevicesJobsCommandInput, cb: (err: any, data?: ListDevicesJobsCommandOutput) => void): void;
            listDevicesJobs(args: ListDevicesJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDevicesJobsCommandOutput) => void): void;
            /**
                * <p>Returns a list of camera stream node jobs.</p>
                */
            listNodeFromTemplateJobs(args: ListNodeFromTemplateJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListNodeFromTemplateJobsCommandOutput>;
            listNodeFromTemplateJobs(args: ListNodeFromTemplateJobsCommandInput, cb: (err: any, data?: ListNodeFromTemplateJobsCommandOutput) => void): void;
            listNodeFromTemplateJobs(args: ListNodeFromTemplateJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNodeFromTemplateJobsCommandOutput) => void): void;
            /**
                * <p>Returns a list of nodes.</p>
                */
            listNodes(args: ListNodesCommandInput, options?: __HttpHandlerOptions): Promise<ListNodesCommandOutput>;
            listNodes(args: ListNodesCommandInput, cb: (err: any, data?: ListNodesCommandOutput) => void): void;
            listNodes(args: ListNodesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNodesCommandOutput) => void): void;
            /**
                * <p>Returns a list of package import jobs.</p>
                */
            listPackageImportJobs(args: ListPackageImportJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListPackageImportJobsCommandOutput>;
            listPackageImportJobs(args: ListPackageImportJobsCommandInput, cb: (err: any, data?: ListPackageImportJobsCommandOutput) => void): void;
            listPackageImportJobs(args: ListPackageImportJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackageImportJobsCommandOutput) => void): void;
            /**
                * <p>Returns a list of packages.</p>
                */
            listPackages(args: ListPackagesCommandInput, options?: __HttpHandlerOptions): Promise<ListPackagesCommandOutput>;
            listPackages(args: ListPackagesCommandInput, cb: (err: any, data?: ListPackagesCommandOutput) => void): void;
            listPackages(args: ListPackagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackagesCommandOutput) => void): void;
            /**
                * <p>Returns a list of tags for a resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates a device and returns a configuration archive. The configuration archive is a ZIP file that contains a
                *       provisioning certificate that is valid for 5 minutes. Name the configuration archive
                *           <code>certificates-omni_<i>device-name</i>.zip</code> and transfer it to the device within 5
                *       minutes. Use the included USB storage device and connect it to the USB 3.0 port next to the HDMI output.</p>
                */
            provisionDevice(args: ProvisionDeviceCommandInput, options?: __HttpHandlerOptions): Promise<ProvisionDeviceCommandOutput>;
            provisionDevice(args: ProvisionDeviceCommandInput, cb: (err: any, data?: ProvisionDeviceCommandOutput) => void): void;
            provisionDevice(args: ProvisionDeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ProvisionDeviceCommandOutput) => void): void;
            /**
                * <p>Registers a package version.</p>
                */
            registerPackageVersion(args: RegisterPackageVersionCommandInput, options?: __HttpHandlerOptions): Promise<RegisterPackageVersionCommandOutput>;
            registerPackageVersion(args: RegisterPackageVersionCommandInput, cb: (err: any, data?: RegisterPackageVersionCommandOutput) => void): void;
            registerPackageVersion(args: RegisterPackageVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterPackageVersionCommandOutput) => void): void;
            /**
                * <p>Removes an application instance.</p>
                */
            removeApplicationInstance(args: RemoveApplicationInstanceCommandInput, options?: __HttpHandlerOptions): Promise<RemoveApplicationInstanceCommandOutput>;
            removeApplicationInstance(args: RemoveApplicationInstanceCommandInput, cb: (err: any, data?: RemoveApplicationInstanceCommandOutput) => void): void;
            removeApplicationInstance(args: RemoveApplicationInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveApplicationInstanceCommandOutput) => void): void;
            /**
                * <p>Tags a resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes tags from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates a device's metadata.</p>
                */
            updateDeviceMetadata(args: UpdateDeviceMetadataCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeviceMetadataCommandOutput>;
            updateDeviceMetadata(args: UpdateDeviceMetadataCommandInput, cb: (err: any, data?: UpdateDeviceMetadataCommandOutput) => void): void;
            updateDeviceMetadata(args: UpdateDeviceMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeviceMetadataCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateApplicationInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateApplicationInstanceRequest, CreateApplicationInstanceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface CreateApplicationInstanceCommandInput extends CreateApplicationInstanceRequest {
    }
    export interface CreateApplicationInstanceCommandOutput extends CreateApplicationInstanceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an application instance and deploys it to a device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, CreateApplicationInstanceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, CreateApplicationInstanceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new CreateApplicationInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApplicationInstanceCommandInput} for command's `input` shape.
        * @see {@link CreateApplicationInstanceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class CreateApplicationInstanceCommand extends $Command<CreateApplicationInstanceCommandInput, CreateApplicationInstanceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: CreateApplicationInstanceCommandInput;
            constructor(input: CreateApplicationInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApplicationInstanceCommandInput, CreateApplicationInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateJobForDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateJobForDevicesRequest, CreateJobForDevicesResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface CreateJobForDevicesCommandInput extends CreateJobForDevicesRequest {
    }
    export interface CreateJobForDevicesCommandOutput extends CreateJobForDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a job to run on one or more devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, CreateJobForDevicesCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, CreateJobForDevicesCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new CreateJobForDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateJobForDevicesCommandInput} for command's `input` shape.
        * @see {@link CreateJobForDevicesCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class CreateJobForDevicesCommand extends $Command<CreateJobForDevicesCommandInput, CreateJobForDevicesCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: CreateJobForDevicesCommandInput;
            constructor(input: CreateJobForDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateJobForDevicesCommandInput, CreateJobForDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateNodeFromTemplateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateNodeFromTemplateJobRequest, CreateNodeFromTemplateJobResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface CreateNodeFromTemplateJobCommandInput extends CreateNodeFromTemplateJobRequest {
    }
    export interface CreateNodeFromTemplateJobCommandOutput extends CreateNodeFromTemplateJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a camera stream node.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, CreateNodeFromTemplateJobCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, CreateNodeFromTemplateJobCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new CreateNodeFromTemplateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNodeFromTemplateJobCommandInput} for command's `input` shape.
        * @see {@link CreateNodeFromTemplateJobCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class CreateNodeFromTemplateJobCommand extends $Command<CreateNodeFromTemplateJobCommandInput, CreateNodeFromTemplateJobCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: CreateNodeFromTemplateJobCommandInput;
            constructor(input: CreateNodeFromTemplateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNodeFromTemplateJobCommandInput, CreateNodeFromTemplateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreatePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreatePackageRequest, CreatePackageResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface CreatePackageCommandInput extends CreatePackageRequest {
    }
    export interface CreatePackageCommandOutput extends CreatePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a package and storage location in an Amazon S3 access point.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, CreatePackageCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, CreatePackageCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new CreatePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePackageCommandInput} for command's `input` shape.
        * @see {@link CreatePackageCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class CreatePackageCommand extends $Command<CreatePackageCommandInput, CreatePackageCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: CreatePackageCommandInput;
            constructor(input: CreatePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePackageCommandInput, CreatePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreatePackageImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreatePackageImportJobRequest, CreatePackageImportJobResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface CreatePackageImportJobCommandInput extends CreatePackageImportJobRequest {
    }
    export interface CreatePackageImportJobCommandOutput extends CreatePackageImportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Imports a node package.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, CreatePackageImportJobCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, CreatePackageImportJobCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new CreatePackageImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePackageImportJobCommandInput} for command's `input` shape.
        * @see {@link CreatePackageImportJobCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class CreatePackageImportJobCommand extends $Command<CreatePackageImportJobCommandInput, CreatePackageImportJobCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: CreatePackageImportJobCommandInput;
            constructor(input: CreatePackageImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePackageImportJobCommandInput, CreatePackageImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeleteDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDeviceRequest, DeleteDeviceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DeleteDeviceCommandInput extends DeleteDeviceRequest {
    }
    export interface DeleteDeviceCommandOutput extends DeleteDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DeleteDeviceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DeleteDeviceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DeleteDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeviceCommandInput} for command's `input` shape.
        * @see {@link DeleteDeviceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DeleteDeviceCommand extends $Command<DeleteDeviceCommandInput, DeleteDeviceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DeleteDeviceCommandInput;
            constructor(input: DeleteDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeviceCommandInput, DeleteDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeletePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeletePackageRequest, DeletePackageResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DeletePackageCommandInput extends DeletePackageRequest {
    }
    export interface DeletePackageCommandOutput extends DeletePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a package.</p>
        *          <note>
        *             <p>To delete a package, you need permission to call <code>s3:DeleteObject</code> in addition to permissions for
        *         the AWS Panorama API.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DeletePackageCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DeletePackageCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DeletePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePackageCommandInput} for command's `input` shape.
        * @see {@link DeletePackageCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DeletePackageCommand extends $Command<DeletePackageCommandInput, DeletePackageCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DeletePackageCommandInput;
            constructor(input: DeletePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePackageCommandInput, DeletePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeregisterPackageVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterPackageVersionRequest, DeregisterPackageVersionResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DeregisterPackageVersionCommandInput extends DeregisterPackageVersionRequest {
    }
    export interface DeregisterPackageVersionCommandOutput extends DeregisterPackageVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Deregisters a package version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DeregisterPackageVersionCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DeregisterPackageVersionCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DeregisterPackageVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterPackageVersionCommandInput} for command's `input` shape.
        * @see {@link DeregisterPackageVersionCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DeregisterPackageVersionCommand extends $Command<DeregisterPackageVersionCommandInput, DeregisterPackageVersionCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DeregisterPackageVersionCommandInput;
            constructor(input: DeregisterPackageVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterPackageVersionCommandInput, DeregisterPackageVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeApplicationInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeApplicationInstanceRequest, DescribeApplicationInstanceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribeApplicationInstanceCommandInput extends DescribeApplicationInstanceRequest {
    }
    export interface DescribeApplicationInstanceCommandOutput extends DescribeApplicationInstanceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about an application instance on a device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribeApplicationInstanceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribeApplicationInstanceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribeApplicationInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApplicationInstanceCommandInput} for command's `input` shape.
        * @see {@link DescribeApplicationInstanceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribeApplicationInstanceCommand extends $Command<DescribeApplicationInstanceCommandInput, DescribeApplicationInstanceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribeApplicationInstanceCommandInput;
            constructor(input: DescribeApplicationInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApplicationInstanceCommandInput, DescribeApplicationInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeApplicationInstanceDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeApplicationInstanceDetailsRequest, DescribeApplicationInstanceDetailsResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribeApplicationInstanceDetailsCommandInput extends DescribeApplicationInstanceDetailsRequest {
    }
    export interface DescribeApplicationInstanceDetailsCommandOutput extends DescribeApplicationInstanceDetailsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about an application instance's configuration manifest.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribeApplicationInstanceDetailsCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribeApplicationInstanceDetailsCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribeApplicationInstanceDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeApplicationInstanceDetailsCommandInput} for command's `input` shape.
        * @see {@link DescribeApplicationInstanceDetailsCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribeApplicationInstanceDetailsCommand extends $Command<DescribeApplicationInstanceDetailsCommandInput, DescribeApplicationInstanceDetailsCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribeApplicationInstanceDetailsCommandInput;
            constructor(input: DescribeApplicationInstanceDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeApplicationInstanceDetailsCommandInput, DescribeApplicationInstanceDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDeviceRequest, DescribeDeviceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribeDeviceCommandInput extends DescribeDeviceRequest {
    }
    export interface DescribeDeviceCommandOutput extends DescribeDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribeDeviceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribeDeviceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribeDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDeviceCommandInput} for command's `input` shape.
        * @see {@link DescribeDeviceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribeDeviceCommand extends $Command<DescribeDeviceCommandInput, DescribeDeviceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribeDeviceCommandInput;
            constructor(input: DescribeDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDeviceCommandInput, DescribeDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeDeviceJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDeviceJobRequest, DescribeDeviceJobResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribeDeviceJobCommandInput extends DescribeDeviceJobRequest {
    }
    export interface DescribeDeviceJobCommandOutput extends DescribeDeviceJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a device job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribeDeviceJobCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribeDeviceJobCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribeDeviceJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDeviceJobCommandInput} for command's `input` shape.
        * @see {@link DescribeDeviceJobCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribeDeviceJobCommand extends $Command<DescribeDeviceJobCommandInput, DescribeDeviceJobCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribeDeviceJobCommandInput;
            constructor(input: DescribeDeviceJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDeviceJobCommandInput, DescribeDeviceJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeNodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeNodeRequest, DescribeNodeResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribeNodeCommandInput extends DescribeNodeRequest {
    }
    export interface DescribeNodeCommandOutput extends DescribeNodeResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a node.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribeNodeCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribeNodeCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribeNodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNodeCommandInput} for command's `input` shape.
        * @see {@link DescribeNodeCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribeNodeCommand extends $Command<DescribeNodeCommandInput, DescribeNodeCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribeNodeCommandInput;
            constructor(input: DescribeNodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNodeCommandInput, DescribeNodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeNodeFromTemplateJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeNodeFromTemplateJobRequest, DescribeNodeFromTemplateJobResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribeNodeFromTemplateJobCommandInput extends DescribeNodeFromTemplateJobRequest {
    }
    export interface DescribeNodeFromTemplateJobCommandOutput extends DescribeNodeFromTemplateJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a job to create a camera stream node.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribeNodeFromTemplateJobCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribeNodeFromTemplateJobCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribeNodeFromTemplateJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNodeFromTemplateJobCommandInput} for command's `input` shape.
        * @see {@link DescribeNodeFromTemplateJobCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribeNodeFromTemplateJobCommand extends $Command<DescribeNodeFromTemplateJobCommandInput, DescribeNodeFromTemplateJobCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribeNodeFromTemplateJobCommandInput;
            constructor(input: DescribeNodeFromTemplateJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNodeFromTemplateJobCommandInput, DescribeNodeFromTemplateJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePackageRequest, DescribePackageResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribePackageCommandInput extends DescribePackageRequest {
    }
    export interface DescribePackageCommandOutput extends DescribePackageResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a package.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribePackageCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribePackageCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribePackageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackageCommandInput} for command's `input` shape.
        * @see {@link DescribePackageCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribePackageCommand extends $Command<DescribePackageCommandInput, DescribePackageCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribePackageCommandInput;
            constructor(input: DescribePackageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackageCommandInput, DescribePackageCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageImportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePackageImportJobRequest, DescribePackageImportJobResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribePackageImportJobCommandInput extends DescribePackageImportJobRequest {
    }
    export interface DescribePackageImportJobCommandOutput extends DescribePackageImportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a package import job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribePackageImportJobCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribePackageImportJobCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribePackageImportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackageImportJobCommandInput} for command's `input` shape.
        * @see {@link DescribePackageImportJobCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribePackageImportJobCommand extends $Command<DescribePackageImportJobCommandInput, DescribePackageImportJobCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribePackageImportJobCommandInput;
            constructor(input: DescribePackageImportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackageImportJobCommandInput, DescribePackageImportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePackageVersionRequest, DescribePackageVersionResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface DescribePackageVersionCommandInput extends DescribePackageVersionRequest {
    }
    export interface DescribePackageVersionCommandOutput extends DescribePackageVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a package version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, DescribePackageVersionCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, DescribePackageVersionCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new DescribePackageVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackageVersionCommandInput} for command's `input` shape.
        * @see {@link DescribePackageVersionCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class DescribePackageVersionCommand extends $Command<DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: DescribePackageVersionCommandInput;
            constructor(input: DescribePackageVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstanceDependenciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListApplicationInstanceDependenciesRequest, ListApplicationInstanceDependenciesResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListApplicationInstanceDependenciesCommandInput extends ListApplicationInstanceDependenciesRequest {
    }
    export interface ListApplicationInstanceDependenciesCommandOutput extends ListApplicationInstanceDependenciesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of application instance dependencies.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListApplicationInstanceDependenciesCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListApplicationInstanceDependenciesCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListApplicationInstanceDependenciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListApplicationInstanceDependenciesCommandInput} for command's `input` shape.
        * @see {@link ListApplicationInstanceDependenciesCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListApplicationInstanceDependenciesCommand extends $Command<ListApplicationInstanceDependenciesCommandInput, ListApplicationInstanceDependenciesCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListApplicationInstanceDependenciesCommandInput;
            constructor(input: ListApplicationInstanceDependenciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListApplicationInstanceDependenciesCommandInput, ListApplicationInstanceDependenciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstanceNodeInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListApplicationInstanceNodeInstancesRequest, ListApplicationInstanceNodeInstancesResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListApplicationInstanceNodeInstancesCommandInput extends ListApplicationInstanceNodeInstancesRequest {
    }
    export interface ListApplicationInstanceNodeInstancesCommandOutput extends ListApplicationInstanceNodeInstancesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of application node instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListApplicationInstanceNodeInstancesCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListApplicationInstanceNodeInstancesCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListApplicationInstanceNodeInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListApplicationInstanceNodeInstancesCommandInput} for command's `input` shape.
        * @see {@link ListApplicationInstanceNodeInstancesCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListApplicationInstanceNodeInstancesCommand extends $Command<ListApplicationInstanceNodeInstancesCommandInput, ListApplicationInstanceNodeInstancesCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListApplicationInstanceNodeInstancesCommandInput;
            constructor(input: ListApplicationInstanceNodeInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListApplicationInstanceNodeInstancesCommandInput, ListApplicationInstanceNodeInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListApplicationInstancesRequest, ListApplicationInstancesResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListApplicationInstancesCommandInput extends ListApplicationInstancesRequest {
    }
    export interface ListApplicationInstancesCommandOutput extends ListApplicationInstancesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of application instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListApplicationInstancesCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListApplicationInstancesCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListApplicationInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListApplicationInstancesCommandInput} for command's `input` shape.
        * @see {@link ListApplicationInstancesCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListApplicationInstancesCommand extends $Command<ListApplicationInstancesCommandInput, ListApplicationInstancesCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListApplicationInstancesCommandInput;
            constructor(input: ListApplicationInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListApplicationInstancesCommandInput, ListApplicationInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListDevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDevicesRequest, ListDevicesResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListDevicesCommandInput extends ListDevicesRequest {
    }
    export interface ListDevicesCommandOutput extends ListDevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of devices.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListDevicesCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListDevicesCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListDevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevicesCommandInput} for command's `input` shape.
        * @see {@link ListDevicesCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListDevicesCommand extends $Command<ListDevicesCommandInput, ListDevicesCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListDevicesCommandInput;
            constructor(input: ListDevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevicesCommandInput, ListDevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListDevicesJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDevicesJobsRequest, ListDevicesJobsResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListDevicesJobsCommandInput extends ListDevicesJobsRequest {
    }
    export interface ListDevicesJobsCommandOutput extends ListDevicesJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListDevicesJobsCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListDevicesJobsCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListDevicesJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDevicesJobsCommandInput} for command's `input` shape.
        * @see {@link ListDevicesJobsCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListDevicesJobsCommand extends $Command<ListDevicesJobsCommandInput, ListDevicesJobsCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListDevicesJobsCommandInput;
            constructor(input: ListDevicesJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDevicesJobsCommandInput, ListDevicesJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListNodeFromTemplateJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListNodeFromTemplateJobsRequest, ListNodeFromTemplateJobsResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListNodeFromTemplateJobsCommandInput extends ListNodeFromTemplateJobsRequest {
    }
    export interface ListNodeFromTemplateJobsCommandOutput extends ListNodeFromTemplateJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of camera stream node jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListNodeFromTemplateJobsCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListNodeFromTemplateJobsCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListNodeFromTemplateJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNodeFromTemplateJobsCommandInput} for command's `input` shape.
        * @see {@link ListNodeFromTemplateJobsCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListNodeFromTemplateJobsCommand extends $Command<ListNodeFromTemplateJobsCommandInput, ListNodeFromTemplateJobsCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListNodeFromTemplateJobsCommandInput;
            constructor(input: ListNodeFromTemplateJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNodeFromTemplateJobsCommandInput, ListNodeFromTemplateJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListNodesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListNodesRequest, ListNodesResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListNodesCommandInput extends ListNodesRequest {
    }
    export interface ListNodesCommandOutput extends ListNodesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of nodes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListNodesCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListNodesCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListNodesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNodesCommandInput} for command's `input` shape.
        * @see {@link ListNodesCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListNodesCommand extends $Command<ListNodesCommandInput, ListNodesCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListNodesCommandInput;
            constructor(input: ListNodesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNodesCommandInput, ListNodesCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListPackageImportJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPackageImportJobsRequest, ListPackageImportJobsResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListPackageImportJobsCommandInput extends ListPackageImportJobsRequest {
    }
    export interface ListPackageImportJobsCommandOutput extends ListPackageImportJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of package import jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListPackageImportJobsCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListPackageImportJobsCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListPackageImportJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackageImportJobsCommandInput} for command's `input` shape.
        * @see {@link ListPackageImportJobsCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListPackageImportJobsCommand extends $Command<ListPackageImportJobsCommandInput, ListPackageImportJobsCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListPackageImportJobsCommandInput;
            constructor(input: ListPackageImportJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackageImportJobsCommandInput, ListPackageImportJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListPackagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListPackagesRequest, ListPackagesResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListPackagesCommandInput extends ListPackagesRequest {
    }
    export interface ListPackagesCommandOutput extends ListPackagesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of packages.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListPackagesCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListPackagesCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListPackagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackagesCommandInput} for command's `input` shape.
        * @see {@link ListPackagesCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListPackagesCommand extends $Command<ListPackagesCommandInput, ListPackagesCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListPackagesCommandInput;
            constructor(input: ListPackagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackagesCommandInput, ListPackagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of tags for a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ListTagsForResourceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ListTagsForResourceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ProvisionDeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ProvisionDeviceRequest, ProvisionDeviceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface ProvisionDeviceCommandInput extends ProvisionDeviceRequest {
    }
    export interface ProvisionDeviceCommandOutput extends ProvisionDeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a device and returns a configuration archive. The configuration archive is a ZIP file that contains a
        *       provisioning certificate that is valid for 5 minutes. Name the configuration archive
        *           <code>certificates-omni_<i>device-name</i>.zip</code> and transfer it to the device within 5
        *       minutes. Use the included USB storage device and connect it to the USB 3.0 port next to the HDMI output.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, ProvisionDeviceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, ProvisionDeviceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new ProvisionDeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ProvisionDeviceCommandInput} for command's `input` shape.
        * @see {@link ProvisionDeviceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class ProvisionDeviceCommand extends $Command<ProvisionDeviceCommandInput, ProvisionDeviceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: ProvisionDeviceCommandInput;
            constructor(input: ProvisionDeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ProvisionDeviceCommandInput, ProvisionDeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/RegisterPackageVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterPackageVersionRequest, RegisterPackageVersionResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface RegisterPackageVersionCommandInput extends RegisterPackageVersionRequest {
    }
    export interface RegisterPackageVersionCommandOutput extends RegisterPackageVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Registers a package version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, RegisterPackageVersionCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, RegisterPackageVersionCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new RegisterPackageVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterPackageVersionCommandInput} for command's `input` shape.
        * @see {@link RegisterPackageVersionCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class RegisterPackageVersionCommand extends $Command<RegisterPackageVersionCommandInput, RegisterPackageVersionCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: RegisterPackageVersionCommandInput;
            constructor(input: RegisterPackageVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterPackageVersionCommandInput, RegisterPackageVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/RemoveApplicationInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveApplicationInstanceRequest, RemoveApplicationInstanceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface RemoveApplicationInstanceCommandInput extends RemoveApplicationInstanceRequest {
    }
    export interface RemoveApplicationInstanceCommandOutput extends RemoveApplicationInstanceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes an application instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, RemoveApplicationInstanceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, RemoveApplicationInstanceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new RemoveApplicationInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveApplicationInstanceCommandInput} for command's `input` shape.
        * @see {@link RemoveApplicationInstanceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class RemoveApplicationInstanceCommand extends $Command<RemoveApplicationInstanceCommandInput, RemoveApplicationInstanceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: RemoveApplicationInstanceCommandInput;
            constructor(input: RemoveApplicationInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveApplicationInstanceCommandInput, RemoveApplicationInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Tags a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, TagResourceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, TagResourceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, UntagResourceCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, UntagResourceCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/UpdateDeviceMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDeviceMetadataRequest, UpdateDeviceMetadataResponse } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0";
    import { PanoramaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient";
    export interface UpdateDeviceMetadataCommandInput extends UpdateDeviceMetadataRequest {
    }
    export interface UpdateDeviceMetadataCommandOutput extends UpdateDeviceMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a device's metadata.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PanoramaClient, UpdateDeviceMetadataCommand } from "@aws-sdk/client-panorama"; // ES Modules import
        * // const { PanoramaClient, UpdateDeviceMetadataCommand } = require("@aws-sdk/client-panorama"); // CommonJS import
        * const client = new PanoramaClient(config);
        * const command = new UpdateDeviceMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeviceMetadataCommandInput} for command's `input` shape.
        * @see {@link UpdateDeviceMetadataCommandOutput} for command's `response` shape.
        * @see {@link PanoramaClientResolvedConfig | config} for PanoramaClient's `config` shape.
        *
        */
    export class UpdateDeviceMetadataCommand extends $Command<UpdateDeviceMetadataCommandInput, UpdateDeviceMetadataCommandOutput, PanoramaClientResolvedConfig> {
            readonly input: UpdateDeviceMetadataCommandInput;
            constructor(input: UpdateDeviceMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PanoramaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeviceMetadataCommandInput, UpdateDeviceMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/PanoramaClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateApplicationInstanceCommandInput, CreateApplicationInstanceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateApplicationInstanceCommand";
    import { CreateJobForDevicesCommandInput, CreateJobForDevicesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateJobForDevicesCommand";
    import { CreateNodeFromTemplateJobCommandInput, CreateNodeFromTemplateJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreateNodeFromTemplateJobCommand";
    import { CreatePackageCommandInput, CreatePackageCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreatePackageCommand";
    import { CreatePackageImportJobCommandInput, CreatePackageImportJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/CreatePackageImportJobCommand";
    import { DeleteDeviceCommandInput, DeleteDeviceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeleteDeviceCommand";
    import { DeletePackageCommandInput, DeletePackageCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeletePackageCommand";
    import { DeregisterPackageVersionCommandInput, DeregisterPackageVersionCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DeregisterPackageVersionCommand";
    import { DescribeApplicationInstanceCommandInput, DescribeApplicationInstanceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeApplicationInstanceCommand";
    import { DescribeApplicationInstanceDetailsCommandInput, DescribeApplicationInstanceDetailsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeApplicationInstanceDetailsCommand";
    import { DescribeDeviceCommandInput, DescribeDeviceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeDeviceCommand";
    import { DescribeDeviceJobCommandInput, DescribeDeviceJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeDeviceJobCommand";
    import { DescribeNodeCommandInput, DescribeNodeCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeNodeCommand";
    import { DescribeNodeFromTemplateJobCommandInput, DescribeNodeFromTemplateJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribeNodeFromTemplateJobCommand";
    import { DescribePackageCommandInput, DescribePackageCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageCommand";
    import { DescribePackageImportJobCommandInput, DescribePackageImportJobCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageImportJobCommand";
    import { DescribePackageVersionCommandInput, DescribePackageVersionCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/DescribePackageVersionCommand";
    import { ListApplicationInstanceDependenciesCommandInput, ListApplicationInstanceDependenciesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstanceDependenciesCommand";
    import { ListApplicationInstanceNodeInstancesCommandInput, ListApplicationInstanceNodeInstancesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstanceNodeInstancesCommand";
    import { ListApplicationInstancesCommandInput, ListApplicationInstancesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListApplicationInstancesCommand";
    import { ListDevicesCommandInput, ListDevicesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListDevicesCommand";
    import { ListDevicesJobsCommandInput, ListDevicesJobsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListDevicesJobsCommand";
    import { ListNodeFromTemplateJobsCommandInput, ListNodeFromTemplateJobsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListNodeFromTemplateJobsCommand";
    import { ListNodesCommandInput, ListNodesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListNodesCommand";
    import { ListPackageImportJobsCommandInput, ListPackageImportJobsCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListPackageImportJobsCommand";
    import { ListPackagesCommandInput, ListPackagesCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListPackagesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ListTagsForResourceCommand";
    import { ProvisionDeviceCommandInput, ProvisionDeviceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/ProvisionDeviceCommand";
    import { RegisterPackageVersionCommandInput, RegisterPackageVersionCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/RegisterPackageVersionCommand";
    import { RemoveApplicationInstanceCommandInput, RemoveApplicationInstanceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/RemoveApplicationInstanceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/UntagResourceCommand";
    import { UpdateDeviceMetadataCommandInput, UpdateDeviceMetadataCommandOutput } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/commands/UpdateDeviceMetadataCommand";
    export type ServiceInputTypes = CreateApplicationInstanceCommandInput | CreateJobForDevicesCommandInput | CreateNodeFromTemplateJobCommandInput | CreatePackageCommandInput | CreatePackageImportJobCommandInput | DeleteDeviceCommandInput | DeletePackageCommandInput | DeregisterPackageVersionCommandInput | DescribeApplicationInstanceCommandInput | DescribeApplicationInstanceDetailsCommandInput | DescribeDeviceCommandInput | DescribeDeviceJobCommandInput | DescribeNodeCommandInput | DescribeNodeFromTemplateJobCommandInput | DescribePackageCommandInput | DescribePackageImportJobCommandInput | DescribePackageVersionCommandInput | ListApplicationInstanceDependenciesCommandInput | ListApplicationInstanceNodeInstancesCommandInput | ListApplicationInstancesCommandInput | ListDevicesCommandInput | ListDevicesJobsCommandInput | ListNodeFromTemplateJobsCommandInput | ListNodesCommandInput | ListPackageImportJobsCommandInput | ListPackagesCommandInput | ListTagsForResourceCommandInput | ProvisionDeviceCommandInput | RegisterPackageVersionCommandInput | RemoveApplicationInstanceCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateDeviceMetadataCommandInput;
    export type ServiceOutputTypes = CreateApplicationInstanceCommandOutput | CreateJobForDevicesCommandOutput | CreateNodeFromTemplateJobCommandOutput | CreatePackageCommandOutput | CreatePackageImportJobCommandOutput | DeleteDeviceCommandOutput | DeletePackageCommandOutput | DeregisterPackageVersionCommandOutput | DescribeApplicationInstanceCommandOutput | DescribeApplicationInstanceDetailsCommandOutput | DescribeDeviceCommandOutput | DescribeDeviceJobCommandOutput | DescribeNodeCommandOutput | DescribeNodeFromTemplateJobCommandOutput | DescribePackageCommandOutput | DescribePackageImportJobCommandOutput | DescribePackageVersionCommandOutput | ListApplicationInstanceDependenciesCommandOutput | ListApplicationInstanceNodeInstancesCommandOutput | ListApplicationInstancesCommandOutput | ListDevicesCommandOutput | ListDevicesJobsCommandOutput | ListNodeFromTemplateJobsCommandOutput | ListNodesCommandOutput | ListPackageImportJobsCommandOutput | ListPackagesCommandOutput | ListTagsForResourceCommandOutput | ProvisionDeviceCommandOutput | RegisterPackageVersionCommandOutput | RemoveApplicationInstanceCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateDeviceMetadataCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type PanoramaClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of PanoramaClient class constructor that set the region, credentials and other options.
        */
    export interface PanoramaClientConfig extends PanoramaClientConfigType {
    }
    type PanoramaClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of PanoramaClient class. This is resolved and normalized from the {@link PanoramaClientConfig | constructor configuration interface}.
        */
    export interface PanoramaClientResolvedConfig extends PanoramaClientResolvedConfigType {
    }
    /**
        * <fullname>AWS Panorama</fullname>
        *          <p>
        *             <b>Overview</b>
        *          </p>
        *          <p>This is the <i>AWS Panorama API Reference</i>. For an introduction to the service, see <a href="https://docs.aws.amazon.com/panorama/latest/dev/panorama-welcome.html">What is AWS Panorama?</a> in the
        *         <i>AWS Panorama Developer Guide</i>.</p>
        */
    export class PanoramaClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, PanoramaClientResolvedConfig> {
            /**
                * The resolved configuration of PanoramaClient class. This is resolved and normalized from the {@link PanoramaClientConfig | constructor configuration interface}.
                */
            readonly config: PanoramaClientResolvedConfig;
            constructor(configuration: PanoramaClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { PanoramaServiceException as __BaseException } from "@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/PanoramaServiceException";
    /**
        * <p>The requestor does not have permission to access the target action or resource.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Details about a beta appliance software update.</p>
        */
    export interface AlternateSoftwareMetadata {
            /**
                * <p>The appliance software version.</p>
                */
            Version?: string;
    }
    export namespace AlternateSoftwareMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AlternateSoftwareMetadata) => any;
    }
    export enum ApplicationInstanceHealthStatus {
            ERROR = "ERROR",
            NOT_AVAILABLE = "NOT_AVAILABLE",
            RUNNING = "RUNNING"
    }
    export enum ApplicationInstanceStatus {
            DEPLOYMENT_ERROR = "DEPLOYMENT_ERROR",
            DEPLOYMENT_FAILED = "DEPLOYMENT_FAILED",
            DEPLOYMENT_IN_PROGRESS = "DEPLOYMENT_IN_PROGRESS",
            DEPLOYMENT_PENDING = "DEPLOYMENT_PENDING",
            DEPLOYMENT_REQUESTED = "DEPLOYMENT_REQUESTED",
            DEPLOYMENT_SUCCEEDED = "DEPLOYMENT_SUCCEEDED",
            REMOVAL_FAILED = "REMOVAL_FAILED",
            REMOVAL_IN_PROGRESS = "REMOVAL_IN_PROGRESS",
            REMOVAL_PENDING = "REMOVAL_PENDING",
            REMOVAL_REQUESTED = "REMOVAL_REQUESTED",
            REMOVAL_SUCCEEDED = "REMOVAL_SUCCEEDED"
    }
    /**
        * <p>An application instance on a device.</p>
        */
    export interface ApplicationInstance {
            /**
                * <p>The application instance's name.</p>
                */
            Name?: string;
            /**
                * <p>The application instance's ID.</p>
                */
            ApplicationInstanceId?: string;
            /**
                * <p>The device's ID.</p>
                */
            DefaultRuntimeContextDevice?: string;
            /**
                * <p>The device's name.</p>
                */
            DefaultRuntimeContextDeviceName?: string;
            /**
                * <p>The application instance's description.</p>
                */
            Description?: string;
            /**
                * <p>The application instance's status.</p>
                */
            Status?: ApplicationInstanceStatus | string;
            /**
                * <p>The application instance's health status.</p>
                */
            HealthStatus?: ApplicationInstanceHealthStatus | string;
            /**
                * <p>The application instance's status description.</p>
                */
            StatusDescription?: string;
            /**
                * <p>When the application instance was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The application instance's ARN.</p>
                */
            Arn?: string;
            /**
                * <p>The application instance's tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ApplicationInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplicationInstance) => any;
    }
    /**
        * <p>A conflict exception error argument.</p>
        */
    export interface ConflictExceptionErrorArgument {
            /**
                * <p>The error argument's name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The error argument's value.</p>
                */
            Value: string | undefined;
    }
    export namespace ConflictExceptionErrorArgument {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConflictExceptionErrorArgument) => any;
    }
    /**
        * <p>The target resource is in use.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The resource's ID.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The resource's type.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>A unique ID for the error.</p>
                */
            ErrorId?: string;
            /**
                * <p>A list of attributes that led to the exception and their values.</p>
                */
            ErrorArguments?: ConflictExceptionErrorArgument[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export enum ConnectionType {
            DHCP = "DHCP",
            STATIC_IP = "STATIC_IP"
    }
    /**
        * <p>Parameter overrides for an application instance. This is a JSON document that has a single key
        *         (<code>PayloadData</code>) where the value is an escaped string representation of the overrides document.</p>
        */
    export type ManifestOverridesPayload = ManifestOverridesPayload.PayloadDataMember | ManifestOverridesPayload.$UnknownMember;
    export namespace ManifestOverridesPayload {
            /**
                * <p>The overrides document.</p>
                */
            interface PayloadDataMember {
                    PayloadData: string;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    PayloadData?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    PayloadData: (value: string) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: ManifestOverridesPayload, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManifestOverridesPayload) => any;
    }
    /**
        * <p>A application verion's manifest file. This is a JSON document that has a single key (<code>PayloadData</code>)
        *       where the value is an escaped string representation of the application manifest (<code>graph.json</code>). This
        *       file is located in the <code>graphs</code> folder in your application source.</p>
        */
    export type ManifestPayload = ManifestPayload.PayloadDataMember | ManifestPayload.$UnknownMember;
    export namespace ManifestPayload {
            /**
                * <p>The application manifest.</p>
                */
            interface PayloadDataMember {
                    PayloadData: string;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    PayloadData?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    PayloadData: (value: string) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: ManifestPayload, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManifestPayload) => any;
    }
    export interface CreateApplicationInstanceRequest {
            /**
                * <p>A name for the application instance.</p>
                */
            Name?: string;
            /**
                * <p>A description for the application instance.</p>
                */
            Description?: string;
            /**
                * <p>The application's manifest document.</p>
                */
            ManifestPayload: ManifestPayload | undefined;
            /**
                * <p>Setting overrides for the application manifest.</p>
                */
            ManifestOverridesPayload?: ManifestOverridesPayload;
            /**
                * <p>The ID of an application instance to replace with the new instance.</p>
                */
            ApplicationInstanceIdToReplace?: string;
            /**
                * <p>The ARN of a runtime role for the application instance.</p>
                */
            RuntimeRoleArn?: string;
            /**
                * <p>A device's ID.</p>
                */
            DefaultRuntimeContextDevice: string | undefined;
            /**
                * <p>Tags for the application instance.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateApplicationInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApplicationInstanceRequest) => any;
    }
    export interface CreateApplicationInstanceResponse {
            /**
                * <p>The application instance's ID.</p>
                */
            ApplicationInstanceId: string | undefined;
    }
    export namespace CreateApplicationInstanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApplicationInstanceResponse) => any;
    }
    /**
        * <p>An internal error occurred.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message: string | undefined;
            /**
                * <p>The number of seconds a client should wait before retrying the call.</p>
                */
            RetryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The request would cause a limit to be exceeded.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The target resource's ID.</p>
                */
            ResourceId?: string;
            /**
                * <p>The target resource's type.</p>
                */
            ResourceType?: string;
            /**
                * <p>The name of the limit.</p>
                */
            QuotaCode: string | undefined;
            /**
                * <p>The name of the service.</p>
                */
            ServiceCode: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>A validation exception error argument.</p>
        */
    export interface ValidationExceptionErrorArgument {
            /**
                * <p>The argument's name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The argument's value.</p>
                */
            Value: string | undefined;
    }
    export namespace ValidationExceptionErrorArgument {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionErrorArgument) => any;
    }
    /**
        * <p>A validation exception field.</p>
        */
    export interface ValidationExceptionField {
            /**
                * <p>The field's name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The field's message.</p>
                */
            Message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "CANNOT_PARSE",
            FIELD_VALIDATION_FAILED = "FIELD_VALIDATION_FAILED",
            OTHER = "OTHER",
            UNKNOWN_OPERATION = "UNKNOWN_OPERATION"
    }
    /**
        * <p>The request contains an invalid parameter value.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The reason that validation failed.</p>
                */
            Reason?: ValidationExceptionReason | string;
            /**
                * <p>A unique ID for the error.</p>
                */
            ErrorId?: string;
            /**
                * <p>A list of attributes that led to the exception and their values.</p>
                */
            ErrorArguments?: ValidationExceptionErrorArgument[];
            /**
                * <p>A list of request parameters that failed validation.</p>
                */
            Fields?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>An over-the-air update (OTA) job configuration.</p>
        */
    export interface OTAJobConfig {
            /**
                * <p>The target version of the device software.</p>
                */
            ImageVersion: string | undefined;
    }
    export namespace OTAJobConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OTAJobConfig) => any;
    }
    /**
        * <p>A job's configuration.</p>
        */
    export interface DeviceJobConfig {
            /**
                * <p>A configuration for an over-the-air (OTA) upgrade. Required for OTA jobs.</p>
                */
            OTAJobConfig?: OTAJobConfig;
    }
    export namespace DeviceJobConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceJobConfig) => any;
    }
    export enum JobType {
            OTA = "OTA"
    }
    export interface CreateJobForDevicesRequest {
            /**
                * <p>IDs of target devices.</p>
                */
            DeviceIds: string[] | undefined;
            /**
                * <p>Configuration settings for the job.</p>
                */
            DeviceJobConfig: DeviceJobConfig | undefined;
            /**
                * <p>The type of job to run.</p>
                */
            JobType: JobType | string | undefined;
    }
    export namespace CreateJobForDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobForDevicesRequest) => any;
    }
    /**
        * <p>A job for a device.</p>
        */
    export interface Job {
            /**
                * <p>The job's ID.</p>
                */
            JobId?: string;
            /**
                * <p>The target device's ID.</p>
                */
            DeviceId?: string;
    }
    export namespace Job {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Job) => any;
    }
    export interface CreateJobForDevicesResponse {
            /**
                * <p>A list of jobs.</p>
                */
            Jobs: Job[] | undefined;
    }
    export namespace CreateJobForDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateJobForDevicesResponse) => any;
    }
    /**
        * <p>The target resource was not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * <p>The resource's ID.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The resource's type.</p>
                */
            ResourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum JobResourceType {
            PACKAGE = "PACKAGE"
    }
    /**
        * <p>Tags for a job.</p>
        */
    export interface JobResourceTags {
            /**
                * <p>The job's type.</p>
                */
            ResourceType: JobResourceType | string | undefined;
            /**
                * <p>The job's tags.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace JobResourceTags {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobResourceTags) => any;
    }
    export enum TemplateType {
            RTSP_CAMERA_STREAM = "RTSP_CAMERA_STREAM"
    }
    export interface CreateNodeFromTemplateJobRequest {
            /**
                * <p>The type of node.</p>
                */
            TemplateType: TemplateType | string | undefined;
            /**
                * <p>An output package name for the node.</p>
                */
            OutputPackageName: string | undefined;
            /**
                * <p>An output package version for the node.</p>
                */
            OutputPackageVersion: string | undefined;
            /**
                * <p>A name for the node.</p>
                */
            NodeName: string | undefined;
            /**
                * <p>A description for the node.</p>
                */
            NodeDescription?: string;
            /**
                * <p>Template parameters for the node.</p>
                */
            TemplateParameters: Record<string, string> | undefined;
            /**
                * <p>Tags for the job.</p>
                */
            JobTags?: JobResourceTags[];
    }
    export namespace CreateNodeFromTemplateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNodeFromTemplateJobRequest) => any;
    }
    export interface CreateNodeFromTemplateJobResponse {
            /**
                * <p>The job's ID.</p>
                */
            JobId: string | undefined;
    }
    export namespace CreateNodeFromTemplateJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNodeFromTemplateJobResponse) => any;
    }
    export interface CreatePackageRequest {
            /**
                * <p>A name for the package.</p>
                */
            PackageName: string | undefined;
            /**
                * <p>Tags for the package.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreatePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackageRequest) => any;
    }
    /**
        * <p>A storage location.</p>
        */
    export interface StorageLocation {
            /**
                * <p>The location's bucket.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The location's repo prefix.</p>
                */
            RepoPrefixLocation: string | undefined;
            /**
                * <p>The location's generated prefix.</p>
                */
            GeneratedPrefixLocation: string | undefined;
            /**
                * <p>The location's binary prefix.</p>
                */
            BinaryPrefixLocation: string | undefined;
            /**
                * <p>The location's manifest prefix.</p>
                */
            ManifestPrefixLocation: string | undefined;
    }
    export namespace StorageLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageLocation) => any;
    }
    export interface CreatePackageResponse {
            /**
                * <p>The package's ID.</p>
                */
            PackageId?: string;
            /**
                * <p>The package's ARN.</p>
                */
            Arn?: string;
            /**
                * <p>The package's storage location.</p>
                */
            StorageLocation: StorageLocation | undefined;
    }
    export namespace CreatePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackageResponse) => any;
    }
    /**
        * <p>A location in Amazon S3.</p>
        */
    export interface S3Location {
            /**
                * <p>The bucket's Region.</p>
                */
            Region?: string;
            /**
                * <p>A bucket name.</p>
                */
            BucketName: string | undefined;
            /**
                * <p>An object key.</p>
                */
            ObjectKey: string | undefined;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    /**
        * <p>A package version input configuration.</p>
        */
    export interface PackageVersionInputConfig {
            /**
                * <p>A location in Amazon S3.</p>
                */
            S3Location: S3Location | undefined;
    }
    export namespace PackageVersionInputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVersionInputConfig) => any;
    }
    /**
        * <p>A configuration for a package import job.</p>
        */
    export interface PackageImportJobInputConfig {
            /**
                * <p>The package version's input configuration.</p>
                */
            PackageVersionInputConfig?: PackageVersionInputConfig;
    }
    export namespace PackageImportJobInputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageImportJobInputConfig) => any;
    }
    export enum PackageImportJobType {
            MARKETPLACE_NODE_PACKAGE_VERSION = "MARKETPLACE_NODE_PACKAGE_VERSION",
            NODE_PACKAGE_VERSION = "NODE_PACKAGE_VERSION"
    }
    /**
        * <p>A package version output configuration.</p>
        */
    export interface PackageVersionOutputConfig {
            /**
                * <p>The output's package name.</p>
                */
            PackageName: string | undefined;
            /**
                * <p>The output's package version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>Indicates that the version is recommended for all users.</p>
                */
            MarkLatest?: boolean;
    }
    export namespace PackageVersionOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageVersionOutputConfig) => any;
    }
    /**
        * <p>An output configuration for a package import job.</p>
        */
    export interface PackageImportJobOutputConfig {
            /**
                * <p>The package version's output configuration.</p>
                */
            PackageVersionOutputConfig?: PackageVersionOutputConfig;
    }
    export namespace PackageImportJobOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageImportJobOutputConfig) => any;
    }
    export interface CreatePackageImportJobRequest {
            /**
                * <p>A job type for the package import job.</p>
                */
            JobType: PackageImportJobType | string | undefined;
            /**
                * <p>An input config for the package import job.</p>
                */
            InputConfig: PackageImportJobInputConfig | undefined;
            /**
                * <p>An output config for the package import job.</p>
                */
            OutputConfig: PackageImportJobOutputConfig | undefined;
            /**
                * <p>A client token for the package import job.</p>
                */
            ClientToken: string | undefined;
            /**
                * <p>Tags for the package import job.</p>
                */
            JobTags?: JobResourceTags[];
    }
    export namespace CreatePackageImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackageImportJobRequest) => any;
    }
    export interface CreatePackageImportJobResponse {
            /**
                * <p>The job's ID.</p>
                */
            JobId: string | undefined;
    }
    export namespace CreatePackageImportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackageImportJobResponse) => any;
    }
    export interface DeleteDeviceRequest {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId: string | undefined;
    }
    export namespace DeleteDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeviceRequest) => any;
    }
    export interface DeleteDeviceResponse {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId?: string;
    }
    export namespace DeleteDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeviceResponse) => any;
    }
    export interface DeletePackageRequest {
            /**
                * <p>The package's ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>Delete the package even if it has artifacts stored in its access point. Deletes the package's artifacts from
                *       Amazon S3.</p>
                */
            ForceDelete?: boolean;
    }
    export namespace DeletePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackageRequest) => any;
    }
    export interface DeletePackageResponse {
    }
    export namespace DeletePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackageResponse) => any;
    }
    export interface DeregisterPackageVersionRequest {
            /**
                * <p>An owner account.</p>
                */
            OwnerAccount?: string;
            /**
                * <p>A package ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>A package version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>A patch version.</p>
                */
            PatchVersion: string | undefined;
            /**
                * <p>If the version was marked latest, the new version to maker as latest.</p>
                */
            UpdatedLatestPatchVersion?: string;
    }
    export namespace DeregisterPackageVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterPackageVersionRequest) => any;
    }
    export interface DeregisterPackageVersionResponse {
    }
    export namespace DeregisterPackageVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterPackageVersionResponse) => any;
    }
    export interface DescribeApplicationInstanceRequest {
            /**
                * <p>The application instance's ID.</p>
                */
            ApplicationInstanceId: string | undefined;
    }
    export namespace DescribeApplicationInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationInstanceRequest) => any;
    }
    export interface DescribeApplicationInstanceResponse {
            /**
                * <p>The application instance's name.</p>
                */
            Name?: string;
            /**
                * <p>The application instance's description.</p>
                */
            Description?: string;
            /**
                * <p>The device's ID.</p>
                */
            DefaultRuntimeContextDevice?: string;
            /**
                * <p>The device's bane.</p>
                */
            DefaultRuntimeContextDeviceName?: string;
            /**
                * <p>The ID of the application instance that this instance replaced.</p>
                */
            ApplicationInstanceIdToReplace?: string;
            /**
                * <p>The application instance's runtime role ARN.</p>
                */
            RuntimeRoleArn?: string;
            /**
                * <p>The application instance's status.</p>
                */
            Status?: ApplicationInstanceStatus | string;
            /**
                * <p>The application instance's health status.</p>
                */
            HealthStatus?: ApplicationInstanceHealthStatus | string;
            /**
                * <p>The application instance's status description.</p>
                */
            StatusDescription?: string;
            /**
                * <p>When the application instance was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The application instance was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>The application instance's ID.</p>
                */
            ApplicationInstanceId?: string;
            /**
                * <p>The application instance's ARN.</p>
                */
            Arn?: string;
            /**
                * <p>The application instance's tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeApplicationInstanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationInstanceResponse) => any;
    }
    export interface DescribeApplicationInstanceDetailsRequest {
            /**
                * <p>The application instance's ID.</p>
                */
            ApplicationInstanceId: string | undefined;
    }
    export namespace DescribeApplicationInstanceDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationInstanceDetailsRequest) => any;
    }
    export interface DescribeApplicationInstanceDetailsResponse {
            /**
                * <p>The application instance's name.</p>
                */
            Name?: string;
            /**
                * <p>The application instance's description.</p>
                */
            Description?: string;
            /**
                * <p>The application instance's default runtime context device.</p>
                */
            DefaultRuntimeContextDevice?: string;
            /**
                * <p>The application instance's configuration manifest.</p>
                */
            ManifestPayload?: ManifestPayload;
            /**
                * <p>Parameter overrides for the configuration manifest.</p>
                */
            ManifestOverridesPayload?: ManifestOverridesPayload;
            /**
                * <p>The ID of the application instance that this instance replaced.</p>
                */
            ApplicationInstanceIdToReplace?: string;
            /**
                * <p>When the application instance was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The application instance's ID.</p>
                */
            ApplicationInstanceId?: string;
    }
    export namespace DescribeApplicationInstanceDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeApplicationInstanceDetailsResponse) => any;
    }
    export interface DescribeDeviceRequest {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId: string | undefined;
    }
    export namespace DescribeDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceRequest) => any;
    }
    export enum DeviceBrand {
            AWS_PANORAMA = "AWS_PANORAMA",
            LENOVO = "LENOVO"
    }
    export enum NetworkConnectionStatus {
            CONNECTED = "CONNECTED",
            CONNECTING = "CONNECTING",
            NOT_CONNECTED = "NOT_CONNECTED"
    }
    /**
        * <p>A device's Ethernet status.</p>
        */
    export interface EthernetStatus {
            /**
                * <p>The device's IP address.</p>
                */
            IpAddress?: string;
            /**
                * <p>The device's connection status.</p>
                */
            ConnectionStatus?: NetworkConnectionStatus | string;
            /**
                * <p>The device's physical address.</p>
                */
            HwAddress?: string;
    }
    export namespace EthernetStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EthernetStatus) => any;
    }
    /**
        * <p>Details about an NTP server connection.</p>
        */
    export interface NtpStatus {
            /**
                * <p>The connection's status.</p>
                */
            ConnectionStatus?: NetworkConnectionStatus | string;
            /**
                * <p>The IP address of the server.</p>
                */
            IpAddress?: string;
            /**
                * <p>The domain name of the server.</p>
                */
            NtpServerName?: string;
    }
    export namespace NtpStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NtpStatus) => any;
    }
    /**
        * <p>The network status of a device.</p>
        */
    export interface NetworkStatus {
            /**
                * <p>The status of Ethernet port 0.</p>
                */
            Ethernet0Status?: EthernetStatus;
            /**
                * <p>The status of Ethernet port 1.</p>
                */
            Ethernet1Status?: EthernetStatus;
            /**
                * <p>Details about a network time protocol (NTP) server connection.</p>
                */
            NtpStatus?: NtpStatus;
            /**
                * <p>When the network status changed.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace NetworkStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkStatus) => any;
    }
    export enum DeviceConnectionStatus {
            AWAITING_CREDENTIALS = "AWAITING_CREDENTIALS",
            ERROR = "ERROR",
            NOT_AVAILABLE = "NOT_AVAILABLE",
            OFFLINE = "OFFLINE",
            ONLINE = "ONLINE"
    }
    /**
        * <p>A static IP configuration.</p>
        */
    export interface StaticIpConnectionInfo {
            /**
                * <p>The connection's IP address.</p>
                */
            IpAddress: string | undefined;
            /**
                * <p>The connection's DNS mask.</p>
                */
            Mask: string | undefined;
            /**
                * <p>The connection's DNS address.</p>
                */
            Dns: string[] | undefined;
            /**
                * <p>The connection's default gateway.</p>
                */
            DefaultGateway: string | undefined;
    }
    export namespace StaticIpConnectionInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StaticIpConnectionInfo) => any;
    }
    /**
        * <p>A device's network configuration.</p>
        */
    export interface EthernetPayload {
            /**
                * <p>How the device gets an IP address.</p>
                */
            ConnectionType: ConnectionType | string | undefined;
            /**
                * <p>Network configuration for a static IP connection.</p>
                */
            StaticIpConnectionInfo?: StaticIpConnectionInfo;
    }
    export namespace EthernetPayload {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EthernetPayload) => any;
    }
    /**
        * <p>Network time protocol (NTP) server settings. Use this option to connect to local NTP servers instead of
        *         <code>pool.ntp.org</code>.</p>
        */
    export interface NtpPayload {
            /**
                * <p>NTP servers to use, in order of preference.</p>
                */
            NtpServers: string[] | undefined;
    }
    export namespace NtpPayload {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NtpPayload) => any;
    }
    /**
        * <p>The network configuration for a device.</p>
        */
    export interface NetworkPayload {
            /**
                * <p>Settings for Ethernet port 0.</p>
                */
            Ethernet0?: EthernetPayload;
            /**
                * <p>Settings for Ethernet port 1.</p>
                */
            Ethernet1?: EthernetPayload;
            /**
                * <p>Network time protocol (NTP) server settings.</p>
                */
            Ntp?: NtpPayload;
    }
    export namespace NetworkPayload {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkPayload) => any;
    }
    export enum DeviceStatus {
            AWAITING_PROVISIONING = "AWAITING_PROVISIONING",
            DELETING = "DELETING",
            ERROR = "ERROR",
            FAILED = "FAILED",
            PENDING = "PENDING",
            SUCCEEDED = "SUCCEEDED"
    }
    export enum DeviceType {
            PANORAMA_APPLIANCE = "PANORAMA_APPLIANCE",
            PANORAMA_APPLIANCE_DEVELOPER_KIT = "PANORAMA_APPLIANCE_DEVELOPER_KIT"
    }
    export interface DescribeDeviceResponse {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId?: string;
            /**
                * <p>The device's name.</p>
                */
            Name?: string;
            /**
                * <p>The device's ARN.</p>
                */
            Arn?: string;
            /**
                * <p>The device's description.</p>
                */
            Description?: string;
            /**
                * <p>The device's type.</p>
                */
            Type?: DeviceType | string;
            /**
                * <p>The device's connection status.</p>
                */
            DeviceConnectionStatus?: DeviceConnectionStatus | string;
            /**
                * <p>When the device was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The device's provisioning status.</p>
                */
            ProvisioningStatus?: DeviceStatus | string;
            /**
                * <p>The latest software version available for the device.</p>
                */
            LatestSoftware?: string;
            /**
                * <p>The device's current software version.</p>
                */
            CurrentSoftware?: string;
            /**
                * <p>The device's serial number.</p>
                */
            SerialNumber?: string;
            /**
                * <p>The device's tags.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The device's networking configuration.</p>
                */
            NetworkingConfiguration?: NetworkPayload;
            /**
                * <p>The device's networking status.</p>
                */
            CurrentNetworkingStatus?: NetworkStatus;
            /**
                * <p>The device's lease expiration time.</p>
                */
            LeaseExpirationTime?: Date;
            /**
                * <p>Beta software releases available for the device.</p>
                */
            AlternateSoftwares?: AlternateSoftwareMetadata[];
            /**
                * <p>The most recent beta software release.</p>
                */
            LatestAlternateSoftware?: string;
            /**
                * <p>The device's maker.</p>
                */
            Brand?: DeviceBrand | string;
    }
    export namespace DescribeDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceResponse) => any;
    }
    export interface DescribeDeviceJobRequest {
            /**
                * <p>The job's ID.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeDeviceJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceJobRequest) => any;
    }
    export enum UpdateProgress {
            COMPLETED = "COMPLETED",
            DOWNLOADING = "DOWNLOADING",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            PENDING = "PENDING",
            REBOOTING = "REBOOTING",
            VERIFYING = "VERIFYING"
    }
    export interface DescribeDeviceJobResponse {
            /**
                * <p>The job's ID.</p>
                */
            JobId?: string;
            /**
                * <p>The device's ID.</p>
                */
            DeviceId?: string;
            /**
                * <p>The device's ARN.</p>
                */
            DeviceArn?: string;
            /**
                * <p>The device's name.</p>
                */
            DeviceName?: string;
            /**
                * <p>The device's type.</p>
                */
            DeviceType?: DeviceType | string;
            /**
                * <p>For an OTA job, the target version of the device software.</p>
                */
            ImageVersion?: string;
            /**
                * <p>The job's status.</p>
                */
            Status?: UpdateProgress | string;
            /**
                * <p>When the job was created.</p>
                */
            CreatedTime?: Date;
    }
    export namespace DescribeDeviceJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeviceJobResponse) => any;
    }
    export interface DescribeNodeRequest {
            /**
                * <p>The node's ID.</p>
                */
            NodeId: string | undefined;
            /**
                * <p>The account ID of the node's owner.</p>
                */
            OwnerAccount?: string;
    }
    export namespace DescribeNodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNodeRequest) => any;
    }
    export enum NodeCategory {
            BUSINESS_LOGIC = "BUSINESS_LOGIC",
            MEDIA_SINK = "MEDIA_SINK",
            MEDIA_SOURCE = "MEDIA_SOURCE",
            ML_MODEL = "ML_MODEL"
    }
    export enum PortType {
            BOOLEAN = "BOOLEAN",
            FLOAT32 = "FLOAT32",
            INT32 = "INT32",
            MEDIA = "MEDIA",
            STRING = "STRING"
    }
    /**
        * <p>A node input port.</p>
        */
    export interface NodeInputPort {
            /**
                * <p>The input port's name.</p>
                */
            Name?: string;
            /**
                * <p>The input port's description.</p>
                */
            Description?: string;
            /**
                * <p>The input port's type.</p>
                */
            Type?: PortType | string;
            /**
                * <p>The input port's default value.</p>
                */
            DefaultValue?: string;
            /**
                * <p>The input port's max connections.</p>
                */
            MaxConnections?: number;
    }
    export namespace NodeInputPort {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeInputPort) => any;
    }
    /**
        * <p>A node output port.</p>
        */
    export interface NodeOutputPort {
            /**
                * <p>The output port's name.</p>
                */
            Name?: string;
            /**
                * <p>The output port's description.</p>
                */
            Description?: string;
            /**
                * <p>The output port's type.</p>
                */
            Type?: PortType | string;
    }
    export namespace NodeOutputPort {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeOutputPort) => any;
    }
    /**
        * <p>A node interface.</p>
        */
    export interface NodeInterface {
            /**
                * <p>The node interface's inputs.</p>
                */
            Inputs: NodeInputPort[] | undefined;
            /**
                * <p>The node interface's outputs.</p>
                */
            Outputs: NodeOutputPort[] | undefined;
    }
    export namespace NodeInterface {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeInterface) => any;
    }
    export interface DescribeNodeResponse {
            /**
                * <p>The node's ID.</p>
                */
            NodeId: string | undefined;
            /**
                * <p>The node's name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The node's category.</p>
                */
            Category: NodeCategory | string | undefined;
            /**
                * <p>The account ID of the node's owner.</p>
                */
            OwnerAccount: string | undefined;
            /**
                * <p>The node's package name.</p>
                */
            PackageName: string | undefined;
            /**
                * <p>The node's package ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>The node's ARN.</p>
                */
            PackageArn?: string;
            /**
                * <p>The node's package version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>The node's patch version.</p>
                */
            PatchVersion: string | undefined;
            /**
                * <p>The node's interface.</p>
                */
            NodeInterface: NodeInterface | undefined;
            /**
                * <p>The node's asset name.</p>
                */
            AssetName?: string;
            /**
                * <p>The node's description.</p>
                */
            Description: string | undefined;
            /**
                * <p>When the node was created.</p>
                */
            CreatedTime: Date | undefined;
            /**
                * <p>When the node was updated.</p>
                */
            LastUpdatedTime: Date | undefined;
    }
    export namespace DescribeNodeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNodeResponse) => any;
    }
    export interface DescribeNodeFromTemplateJobRequest {
            /**
                * <p>The job's ID.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribeNodeFromTemplateJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNodeFromTemplateJobRequest) => any;
    }
    export enum NodeFromTemplateJobStatus {
            FAILED = "FAILED",
            PENDING = "PENDING",
            SUCCEEDED = "SUCCEEDED"
    }
    export interface DescribeNodeFromTemplateJobResponse {
            /**
                * <p>The job's ID.</p>
                */
            JobId: string | undefined;
            /**
                * <p>The job's status.</p>
                */
            Status: NodeFromTemplateJobStatus | string | undefined;
            /**
                * <p>The job's status message.</p>
                */
            StatusMessage: string | undefined;
            /**
                * <p>When the job was created.</p>
                */
            CreatedTime: Date | undefined;
            /**
                * <p>When the job was updated.</p>
                */
            LastUpdatedTime: Date | undefined;
            /**
                * <p>The job's output package name.</p>
                */
            OutputPackageName: string | undefined;
            /**
                * <p>The job's output package version.</p>
                */
            OutputPackageVersion: string | undefined;
            /**
                * <p>The node's name.</p>
                */
            NodeName: string | undefined;
            /**
                * <p>The node's description.</p>
                */
            NodeDescription?: string;
            /**
                * <p>The job's template type.</p>
                */
            TemplateType: TemplateType | string | undefined;
            /**
                * <p>The job's template parameters.</p>
                */
            TemplateParameters: Record<string, string> | undefined;
            /**
                * <p>The job's tags.</p>
                */
            JobTags?: JobResourceTags[];
    }
    export namespace DescribeNodeFromTemplateJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNodeFromTemplateJobResponse) => any;
    }
    export interface DescribePackageRequest {
            /**
                * <p>The package's ID.</p>
                */
            PackageId: string | undefined;
    }
    export namespace DescribePackageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageRequest) => any;
    }
    export interface DescribePackageResponse {
            /**
                * <p>The package's ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>The package's name.</p>
                */
            PackageName: string | undefined;
            /**
                * <p>The package's ARN.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The package's storage location.</p>
                */
            StorageLocation: StorageLocation | undefined;
            /**
                * <p>ARNs of accounts that have read access to the package.</p>
                */
            ReadAccessPrincipalArns?: string[];
            /**
                * <p>ARNs of accounts that have write access to the package.</p>
                */
            WriteAccessPrincipalArns?: string[];
            /**
                * <p>When the package was created.</p>
                */
            CreatedTime: Date | undefined;
            /**
                * <p>The package's tags.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace DescribePackageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageResponse) => any;
    }
    export interface DescribePackageImportJobRequest {
            /**
                * <p>The job's ID.</p>
                */
            JobId: string | undefined;
    }
    export namespace DescribePackageImportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageImportJobRequest) => any;
    }
    /**
        * <p>The location of an output object in Amazon S3.</p>
        */
    export interface OutPutS3Location {
            /**
                * <p>The object's bucket.</p>
                */
            BucketName: string | undefined;
            /**
                * <p>The object's key.</p>
                */
            ObjectKey: string | undefined;
    }
    export namespace OutPutS3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutPutS3Location) => any;
    }
    /**
        * <p>Results of a package import job.</p>
        */
    export interface PackageImportJobOutput {
            /**
                * <p>The package's ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>The package's version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>The package's patch version.</p>
                */
            PatchVersion: string | undefined;
            /**
                * <p>The package's output location.</p>
                */
            OutputS3Location: OutPutS3Location | undefined;
    }
    export namespace PackageImportJobOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageImportJobOutput) => any;
    }
    export enum PackageImportJobStatus {
            FAILED = "FAILED",
            PENDING = "PENDING",
            SUCCEEDED = "SUCCEEDED"
    }
    export interface DescribePackageImportJobResponse {
            /**
                * <p>The job's ID.</p>
                */
            JobId: string | undefined;
            /**
                * <p>The job's client token.</p>
                */
            ClientToken?: string;
            /**
                * <p>The job's type.</p>
                */
            JobType: PackageImportJobType | string | undefined;
            /**
                * <p>The job's input config.</p>
                */
            InputConfig: PackageImportJobInputConfig | undefined;
            /**
                * <p>The job's output config.</p>
                */
            OutputConfig: PackageImportJobOutputConfig | undefined;
            /**
                * <p>The job's output.</p>
                */
            Output: PackageImportJobOutput | undefined;
            /**
                * <p>When the job was created.</p>
                */
            CreatedTime: Date | undefined;
            /**
                * <p>When the job was updated.</p>
                */
            LastUpdatedTime: Date | undefined;
            /**
                * <p>The job's status.</p>
                */
            Status: PackageImportJobStatus | string | undefined;
            /**
                * <p>The job's status message.</p>
                */
            StatusMessage: string | undefined;
            /**
                * <p>The job's tags.</p>
                */
            JobTags?: JobResourceTags[];
    }
    export namespace DescribePackageImportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageImportJobResponse) => any;
    }
    export interface DescribePackageVersionRequest {
            /**
                * <p>The version's owner account.</p>
                */
            OwnerAccount?: string;
            /**
                * <p>The version's ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>The version's version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>The version's patch version.</p>
                */
            PatchVersion?: string;
    }
    export namespace DescribePackageVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageVersionRequest) => any;
    }
    export enum PackageVersionStatus {
            DELETING = "DELETING",
            FAILED = "FAILED",
            REGISTER_COMPLETED = "REGISTER_COMPLETED",
            REGISTER_PENDING = "REGISTER_PENDING"
    }
    export interface DescribePackageVersionResponse {
            /**
                * <p>The account ID of the version's owner.</p>
                */
            OwnerAccount?: string;
            /**
                * <p>The version's ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>The ARN of the package.</p>
                */
            PackageArn?: string;
            /**
                * <p>The version's name.</p>
                */
            PackageName: string | undefined;
            /**
                * <p>The version's version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>The version's patch version.</p>
                */
            PatchVersion: string | undefined;
            /**
                * <p>Whether the version is the latest available.</p>
                */
            IsLatestPatch: boolean | undefined;
            /**
                * <p>The version's status.</p>
                */
            Status: PackageVersionStatus | string | undefined;
            /**
                * <p>The version's status description.</p>
                */
            StatusDescription?: string;
            /**
                * <p>The version's registered time.</p>
                */
            RegisteredTime?: Date;
    }
    export namespace DescribePackageVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackageVersionResponse) => any;
    }
    /**
        * <p>A device.</p>
        */
    export interface Device {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId?: string;
            /**
                * <p>The device's name.</p>
                */
            Name?: string;
            /**
                * <p>When the device was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The device's provisioning status.</p>
                */
            ProvisioningStatus?: DeviceStatus | string;
            /**
                * <p>When the device was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>The device's lease expiration time.</p>
                */
            LeaseExpirationTime?: Date;
            /**
                * <p>The device's maker.</p>
                */
            Brand?: DeviceBrand | string;
    }
    export namespace Device {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Device) => any;
    }
    /**
        * <p>A job that runs on a device.</p>
        */
    export interface DeviceJob {
            /**
                * <p>The name of the target device</p>
                */
            DeviceName?: string;
            /**
                * <p>The ID of the target device.</p>
                */
            DeviceId?: string;
            /**
                * <p>The job's ID.</p>
                */
            JobId?: string;
            /**
                * <p>When the job was created.</p>
                */
            CreatedTime?: Date;
    }
    export namespace DeviceJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeviceJob) => any;
    }
    export interface ListApplicationInstanceDependenciesRequest {
            /**
                * <p>The application instance's ID.</p>
                */
            ApplicationInstanceId: string | undefined;
            /**
                * <p>The maximum number of application instance dependencies to return in one page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListApplicationInstanceDependenciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApplicationInstanceDependenciesRequest) => any;
    }
    /**
        * <p>A package object.</p>
        */
    export interface PackageObject {
            /**
                * <p>The object's name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The object's package version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>The object's patch version.</p>
                */
            PatchVersion: string | undefined;
    }
    export namespace PackageObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageObject) => any;
    }
    export interface ListApplicationInstanceDependenciesResponse {
            /**
                * <p>A list of package objects.</p>
                */
            PackageObjects?: PackageObject[];
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListApplicationInstanceDependenciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApplicationInstanceDependenciesResponse) => any;
    }
    export interface ListApplicationInstanceNodeInstancesRequest {
            /**
                * <p>The node instances' application instance ID.</p>
                */
            ApplicationInstanceId: string | undefined;
            /**
                * <p>The maximum number of node instances to return in one page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListApplicationInstanceNodeInstancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApplicationInstanceNodeInstancesRequest) => any;
    }
    export enum NodeInstanceStatus {
            ERROR = "ERROR",
            NOT_AVAILABLE = "NOT_AVAILABLE",
            RUNNING = "RUNNING"
    }
    /**
        * <p>A node instance.</p>
        */
    export interface NodeInstance {
            /**
                * <p>The instance's ID.</p>
                */
            NodeInstanceId: string | undefined;
            /**
                * <p>The node's ID.</p>
                */
            NodeId?: string;
            /**
                * <p>The instance's package name.</p>
                */
            PackageName?: string;
            /**
                * <p>The instance's package version.</p>
                */
            PackageVersion?: string;
            /**
                * <p>The instance's package patch version.</p>
                */
            PackagePatchVersion?: string;
            /**
                * <p>The instance's name.</p>
                */
            NodeName?: string;
            /**
                * <p>The instance's current status.</p>
                */
            CurrentStatus: NodeInstanceStatus | string | undefined;
    }
    export namespace NodeInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeInstance) => any;
    }
    export interface ListApplicationInstanceNodeInstancesResponse {
            /**
                * <p>A list of node instances.</p>
                */
            NodeInstances?: NodeInstance[];
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListApplicationInstanceNodeInstancesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApplicationInstanceNodeInstancesResponse) => any;
    }
    export enum StatusFilter {
            DEPLOYMENT_ERROR = "DEPLOYMENT_ERROR",
            DEPLOYMENT_FAILED = "DEPLOYMENT_FAILED",
            DEPLOYMENT_SUCCEEDED = "DEPLOYMENT_SUCCEEDED",
            PROCESSING_DEPLOYMENT = "PROCESSING_DEPLOYMENT",
            PROCESSING_REMOVAL = "PROCESSING_REMOVAL",
            REMOVAL_FAILED = "REMOVAL_FAILED",
            REMOVAL_SUCCEEDED = "REMOVAL_SUCCEEDED"
    }
    export interface ListApplicationInstancesRequest {
            /**
                * <p>The application instances' device ID.</p>
                */
            DeviceId?: string;
            /**
                * <p>Only include instances with a specific status.</p>
                */
            StatusFilter?: StatusFilter | string;
            /**
                * <p>The maximum number of application instances to return in one page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListApplicationInstancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApplicationInstancesRequest) => any;
    }
    export interface ListApplicationInstancesResponse {
            /**
                * <p>A list of application instances.</p>
                */
            ApplicationInstances?: ApplicationInstance[];
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListApplicationInstancesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApplicationInstancesResponse) => any;
    }
    export interface ListDevicesRequest {
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of devices to return in one page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesRequest) => any;
    }
    export interface ListDevicesResponse {
            /**
                * <p>A list of devices.</p>
                */
            Devices: Device[] | undefined;
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListDevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesResponse) => any;
    }
    export interface ListDevicesJobsRequest {
            /**
                * <p>Filter results by the job's target device ID.</p>
                */
            DeviceId?: string;
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of device jobs to return in one page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDevicesJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesJobsRequest) => any;
    }
    export interface ListDevicesJobsResponse {
            /**
                * <p>A list of jobs.</p>
                */
            DeviceJobs?: DeviceJob[];
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListDevicesJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDevicesJobsResponse) => any;
    }
    export interface ListNodeFromTemplateJobsRequest {
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of node from template jobs to return in one page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListNodeFromTemplateJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNodeFromTemplateJobsRequest) => any;
    }
    /**
        * <p>A job to create a camera stream node.</p>
        */
    export interface NodeFromTemplateJob {
            /**
                * <p>The job's ID.</p>
                */
            JobId?: string;
            /**
                * <p>The job's template type.</p>
                */
            TemplateType?: TemplateType | string;
            /**
                * <p>The job's status.</p>
                */
            Status?: NodeFromTemplateJobStatus | string;
            /**
                * <p>The job's status message.</p>
                */
            StatusMessage?: string;
            /**
                * <p>When the job was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The node's name.</p>
                */
            NodeName?: string;
    }
    export namespace NodeFromTemplateJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeFromTemplateJob) => any;
    }
    export interface ListNodeFromTemplateJobsResponse {
            /**
                * <p>A list of jobs.</p>
                */
            NodeFromTemplateJobs: NodeFromTemplateJob[] | undefined;
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListNodeFromTemplateJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNodeFromTemplateJobsResponse) => any;
    }
    export interface ListNodesRequest {
            /**
                * <p>Search for nodes by category.</p>
                */
            Category?: NodeCategory | string;
            /**
                * <p>Search for nodes by the account ID of the nodes' owner.</p>
                */
            OwnerAccount?: string;
            /**
                * <p>Search for nodes by name.</p>
                */
            PackageName?: string;
            /**
                * <p>Search for nodes by version.</p>
                */
            PackageVersion?: string;
            /**
                * <p>Search for nodes by patch version.</p>
                */
            PatchVersion?: string;
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of nodes to return in one page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListNodesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNodesRequest) => any;
    }
    /**
        * <p>An application node that represents a camera stream, a model, code, or output.</p>
        */
    export interface Node {
            /**
                * <p>The node's ID.</p>
                */
            NodeId: string | undefined;
            /**
                * <p>The node's name.</p>
                */
            Name: string | undefined;
            /**
                * <p>The node's category.</p>
                */
            Category: NodeCategory | string | undefined;
            /**
                * <p>The account ID of the node's owner.</p>
                */
            OwnerAccount?: string;
            /**
                * <p>The node's package name.</p>
                */
            PackageName: string | undefined;
            /**
                * <p>The node's package ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>The node's ARN.</p>
                */
            PackageArn?: string;
            /**
                * <p>The node's package version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>The node's patch version.</p>
                */
            PatchVersion: string | undefined;
            /**
                * <p>The node's description.</p>
                */
            Description?: string;
            /**
                * <p>When the node was created.</p>
                */
            CreatedTime: Date | undefined;
    }
    export namespace Node {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Node) => any;
    }
    export interface ListNodesResponse {
            /**
                * <p>A list of nodes.</p>
                */
            Nodes?: Node[];
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListNodesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNodesResponse) => any;
    }
    export interface ListPackageImportJobsRequest {
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of package import jobs to return in one page of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListPackageImportJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageImportJobsRequest) => any;
    }
    /**
        * <p>A job to import a package version.</p>
        */
    export interface PackageImportJob {
            /**
                * <p>The job's ID.</p>
                */
            JobId?: string;
            /**
                * <p>The job's type.</p>
                */
            JobType?: PackageImportJobType | string;
            /**
                * <p>The job's status.</p>
                */
            Status?: PackageImportJobStatus | string;
            /**
                * <p>The job's status message.</p>
                */
            StatusMessage?: string;
            /**
                * <p>When the job was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>When the job was updated.</p>
                */
            LastUpdatedTime?: Date;
    }
    export namespace PackageImportJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageImportJob) => any;
    }
    export interface ListPackageImportJobsResponse {
            /**
                * <p>A list of package import jobs.</p>
                */
            PackageImportJobs: PackageImportJob[] | undefined;
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListPackageImportJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackageImportJobsResponse) => any;
    }
    export interface ListPackagesRequest {
            /**
                * <p>The maximum number of packages to return in one page of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>Specify the pagination token from a previous request to retrieve the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListPackagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagesRequest) => any;
    }
    /**
        * <p>A package summary.</p>
        */
    export interface PackageListItem {
            /**
                * <p>The package's ID.</p>
                */
            PackageId?: string;
            /**
                * <p>The package's name.</p>
                */
            PackageName?: string;
            /**
                * <p>The package's ARN.</p>
                */
            Arn?: string;
            /**
                * <p>When the package was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The package's tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace PackageListItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackageListItem) => any;
    }
    export interface ListPackagesResponse {
            /**
                * <p>A list of packages.</p>
                */
            Packages?: PackageListItem[];
            /**
                * <p>A pagination token that's included if more results are available.</p>
                */
            NextToken?: string;
    }
    export namespace ListPackagesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The resource's ARN.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A list of tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ProvisionDeviceRequest {
            /**
                * <p>A name for the device.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description for the device.</p>
                */
            Description?: string;
            /**
                * <p>Tags for the device.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A networking configuration for the device.</p>
                */
            NetworkingConfiguration?: NetworkPayload;
    }
    export namespace ProvisionDeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionDeviceRequest) => any;
    }
    export interface ProvisionDeviceResponse {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId?: string;
            /**
                * <p>The device's ARN.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The device's status.</p>
                */
            Status: DeviceStatus | string | undefined;
            /**
                * <p>The device's configuration bundle.</p>
                */
            Certificates?: Uint8Array;
            /**
                * <p>The device's IoT thing name.</p>
                */
            IotThingName?: string;
    }
    export namespace ProvisionDeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionDeviceResponse) => any;
    }
    export interface RegisterPackageVersionRequest {
            /**
                * <p>An owner account.</p>
                */
            OwnerAccount?: string;
            /**
                * <p>A package ID.</p>
                */
            PackageId: string | undefined;
            /**
                * <p>A package version.</p>
                */
            PackageVersion: string | undefined;
            /**
                * <p>A patch version.</p>
                */
            PatchVersion: string | undefined;
            /**
                * <p>Whether to mark the new version as the latest version.</p>
                */
            MarkLatest?: boolean;
    }
    export namespace RegisterPackageVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterPackageVersionRequest) => any;
    }
    export interface RegisterPackageVersionResponse {
    }
    export namespace RegisterPackageVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterPackageVersionResponse) => any;
    }
    export interface RemoveApplicationInstanceRequest {
            /**
                * <p>An application instance ID.</p>
                */
            ApplicationInstanceId: string | undefined;
    }
    export namespace RemoveApplicationInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveApplicationInstanceRequest) => any;
    }
    export interface RemoveApplicationInstanceResponse {
    }
    export namespace RemoveApplicationInstanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveApplicationInstanceResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The resource's ARN.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tags for the resource.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The resource's ARN.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tag keys to remove.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateDeviceMetadataRequest {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId: string | undefined;
            /**
                * <p>A description for the device.</p>
                */
            Description?: string;
    }
    export namespace UpdateDeviceMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceMetadataRequest) => any;
    }
    export interface UpdateDeviceMetadataResponse {
            /**
                * <p>The device's ID.</p>
                */
            DeviceId?: string;
    }
    export namespace UpdateDeviceMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeviceMetadataResponse) => any;
    }
}

declare module '@aws-sdk/client-panorama/node_modules/@aws-sdk/client-panorama/dist-types/models/PanoramaServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Panorama service.
        */
    export class PanoramaServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

