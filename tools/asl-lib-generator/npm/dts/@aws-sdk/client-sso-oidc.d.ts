// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-sso-oidc' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateTokenCommandInput, CreateTokenCommandOutput } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/CreateTokenCommand";
    import { RegisterClientCommandInput, RegisterClientCommandOutput } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/RegisterClientCommand";
    import { StartDeviceAuthorizationCommandInput, StartDeviceAuthorizationCommandOutput } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/StartDeviceAuthorizationCommand";
    import { SSOOIDCClient } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/SSOOIDCClient";
    /**
        * <p>AWS Single Sign-On (SSO) OpenID Connect (OIDC) is a web service that enables a client
        *       (such as AWS CLI or a native application) to register with AWS SSO. The service also
        *       enables the client to fetch the userâ€™s access token upon successful authentication and
        *       authorization with AWS SSO. This service conforms with the OAuth 2.0 based implementation of
        *       the device authorization grant standard (<a href="https://tools.ietf.org/html/rfc8628">https://tools.ietf.org/html/rfc8628</a>).</p>
        *
        *          <p>For general information about AWS SSO, see <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html">What is AWS
        *         Single Sign-On?</a> in the <i>AWS SSO User Guide</i>.</p>
        *
        *          <p>This API reference guide describes the AWS SSO OIDC operations that you can call
        *       programatically and includes detailed information on data types and errors.</p>
        *
        *          <note>
        *             <p>AWS provides SDKs that consist of libraries and sample code for various programming
        *         languages and platforms such as Java, Ruby, .Net, iOS, and Android. The SDKs provide a
        *         convenient way to create programmatic access to AWS SSO and other AWS services. For more
        *         information about the AWS SDKs, including how to download and install them, see <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
        *          </note>
        */
    export class SSOOIDC extends SSOOIDCClient {
            /**
                * <p>Creates and returns an access token for the authorized client. The access token issued
                *       will be used to fetch short-term credentials for the assigned roles in the AWS
                *       account.</p>
                */
            createToken(args: CreateTokenCommandInput, options?: __HttpHandlerOptions): Promise<CreateTokenCommandOutput>;
            createToken(args: CreateTokenCommandInput, cb: (err: any, data?: CreateTokenCommandOutput) => void): void;
            createToken(args: CreateTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTokenCommandOutput) => void): void;
            /**
                * <p>Registers a client with AWS SSO. This allows clients to initiate device authorization.
                *       The output should be persisted for reuse through many authentication requests.</p>
                */
            registerClient(args: RegisterClientCommandInput, options?: __HttpHandlerOptions): Promise<RegisterClientCommandOutput>;
            registerClient(args: RegisterClientCommandInput, cb: (err: any, data?: RegisterClientCommandOutput) => void): void;
            registerClient(args: RegisterClientCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterClientCommandOutput) => void): void;
            /**
                * <p>Initiates device authorization by requesting a pair of verification codes from the authorization service.</p>
                */
            startDeviceAuthorization(args: StartDeviceAuthorizationCommandInput, options?: __HttpHandlerOptions): Promise<StartDeviceAuthorizationCommandOutput>;
            startDeviceAuthorization(args: StartDeviceAuthorizationCommandInput, cb: (err: any, data?: StartDeviceAuthorizationCommandOutput) => void): void;
            startDeviceAuthorization(args: StartDeviceAuthorizationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDeviceAuthorizationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/CreateTokenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTokenRequest, CreateTokenResponse } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSOOIDCClientResolvedConfig } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/SSOOIDCClient";
    export interface CreateTokenCommandInput extends CreateTokenRequest {
    }
    export interface CreateTokenCommandOutput extends CreateTokenResponse, __MetadataBearer {
    }
    /**
        * <p>Creates and returns an access token for the authorized client. The access token issued
        *       will be used to fetch short-term credentials for the assigned roles in the AWS
        *       account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSOOIDCClient, CreateTokenCommand } from "@aws-sdk/client-sso-oidc"; // ES Modules import
        * // const { SSOOIDCClient, CreateTokenCommand } = require("@aws-sdk/client-sso-oidc"); // CommonJS import
        * const client = new SSOOIDCClient(config);
        * const command = new CreateTokenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTokenCommandInput} for command's `input` shape.
        * @see {@link CreateTokenCommandOutput} for command's `response` shape.
        * @see {@link SSOOIDCClientResolvedConfig | config} for SSOOIDCClient's `config` shape.
        *
        */
    export class CreateTokenCommand extends $Command<CreateTokenCommandInput, CreateTokenCommandOutput, SSOOIDCClientResolvedConfig> {
            readonly input: CreateTokenCommandInput;
            constructor(input: CreateTokenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSOOIDCClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTokenCommandInput, CreateTokenCommandOutput>;
    }
}

declare module '@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/RegisterClientCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterClientRequest, RegisterClientResponse } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSOOIDCClientResolvedConfig } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/SSOOIDCClient";
    export interface RegisterClientCommandInput extends RegisterClientRequest {
    }
    export interface RegisterClientCommandOutput extends RegisterClientResponse, __MetadataBearer {
    }
    /**
        * <p>Registers a client with AWS SSO. This allows clients to initiate device authorization.
        *       The output should be persisted for reuse through many authentication requests.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSOOIDCClient, RegisterClientCommand } from "@aws-sdk/client-sso-oidc"; // ES Modules import
        * // const { SSOOIDCClient, RegisterClientCommand } = require("@aws-sdk/client-sso-oidc"); // CommonJS import
        * const client = new SSOOIDCClient(config);
        * const command = new RegisterClientCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterClientCommandInput} for command's `input` shape.
        * @see {@link RegisterClientCommandOutput} for command's `response` shape.
        * @see {@link SSOOIDCClientResolvedConfig | config} for SSOOIDCClient's `config` shape.
        *
        */
    export class RegisterClientCommand extends $Command<RegisterClientCommandInput, RegisterClientCommandOutput, SSOOIDCClientResolvedConfig> {
            readonly input: RegisterClientCommandInput;
            constructor(input: RegisterClientCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSOOIDCClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterClientCommandInput, RegisterClientCommandOutput>;
    }
}

declare module '@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/StartDeviceAuthorizationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartDeviceAuthorizationRequest, StartDeviceAuthorizationResponse } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSOOIDCClientResolvedConfig } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/SSOOIDCClient";
    export interface StartDeviceAuthorizationCommandInput extends StartDeviceAuthorizationRequest {
    }
    export interface StartDeviceAuthorizationCommandOutput extends StartDeviceAuthorizationResponse, __MetadataBearer {
    }
    /**
        * <p>Initiates device authorization by requesting a pair of verification codes from the authorization service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSOOIDCClient, StartDeviceAuthorizationCommand } from "@aws-sdk/client-sso-oidc"; // ES Modules import
        * // const { SSOOIDCClient, StartDeviceAuthorizationCommand } = require("@aws-sdk/client-sso-oidc"); // CommonJS import
        * const client = new SSOOIDCClient(config);
        * const command = new StartDeviceAuthorizationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDeviceAuthorizationCommandInput} for command's `input` shape.
        * @see {@link StartDeviceAuthorizationCommandOutput} for command's `response` shape.
        * @see {@link SSOOIDCClientResolvedConfig | config} for SSOOIDCClient's `config` shape.
        *
        */
    export class StartDeviceAuthorizationCommand extends $Command<StartDeviceAuthorizationCommandInput, StartDeviceAuthorizationCommandOutput, SSOOIDCClientResolvedConfig> {
            readonly input: StartDeviceAuthorizationCommandInput;
            constructor(input: StartDeviceAuthorizationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSOOIDCClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDeviceAuthorizationCommandInput, StartDeviceAuthorizationCommandOutput>;
    }
}

declare module '@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/SSOOIDCClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateTokenCommandInput, CreateTokenCommandOutput } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/CreateTokenCommand";
    import { RegisterClientCommandInput, RegisterClientCommandOutput } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/RegisterClientCommand";
    import { StartDeviceAuthorizationCommandInput, StartDeviceAuthorizationCommandOutput } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/commands/StartDeviceAuthorizationCommand";
    export type ServiceInputTypes = CreateTokenCommandInput | RegisterClientCommandInput | StartDeviceAuthorizationCommandInput;
    export type ServiceOutputTypes = CreateTokenCommandOutput | RegisterClientCommandOutput | StartDeviceAuthorizationCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SSOOIDCClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SSOOIDCClient class constructor that set the region, credentials and other options.
        */
    export interface SSOOIDCClientConfig extends SSOOIDCClientConfigType {
    }
    type SSOOIDCClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SSOOIDCClient class. This is resolved and normalized from the {@link SSOOIDCClientConfig | constructor configuration interface}.
        */
    export interface SSOOIDCClientResolvedConfig extends SSOOIDCClientResolvedConfigType {
    }
    /**
        * <p>AWS Single Sign-On (SSO) OpenID Connect (OIDC) is a web service that enables a client
        *       (such as AWS CLI or a native application) to register with AWS SSO. The service also
        *       enables the client to fetch the userâ€™s access token upon successful authentication and
        *       authorization with AWS SSO. This service conforms with the OAuth 2.0 based implementation of
        *       the device authorization grant standard (<a href="https://tools.ietf.org/html/rfc8628">https://tools.ietf.org/html/rfc8628</a>).</p>
        *
        *          <p>For general information about AWS SSO, see <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html">What is AWS
        *         Single Sign-On?</a> in the <i>AWS SSO User Guide</i>.</p>
        *
        *          <p>This API reference guide describes the AWS SSO OIDC operations that you can call
        *       programatically and includes detailed information on data types and errors.</p>
        *
        *          <note>
        *             <p>AWS provides SDKs that consist of libraries and sample code for various programming
        *         languages and platforms such as Java, Ruby, .Net, iOS, and Android. The SDKs provide a
        *         convenient way to create programmatic access to AWS SSO and other AWS services. For more
        *         information about the AWS SDKs, including how to download and install them, see <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a>.</p>
        *          </note>
        */
    export class SSOOIDCClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SSOOIDCClientResolvedConfig> {
            /**
                * The resolved configuration of SSOOIDCClient class. This is resolved and normalized from the {@link SSOOIDCClientConfig | constructor configuration interface}.
                */
            readonly config: SSOOIDCClientResolvedConfig;
            constructor(configuration: SSOOIDCClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SSOOIDCServiceException as __BaseException } from "@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/models/SSOOIDCServiceException";
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Indicates that a request to authorize a client with an access user session token is pending.</p>
        */
    export class AuthorizationPendingException extends __BaseException {
            readonly name: "AuthorizationPendingException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthorizationPendingException, __BaseException>);
    }
    export interface CreateTokenRequest {
            /**
                * <p>The unique identifier string for each client. This value should come from the persisted result of the <a>RegisterClient</a> API.</p>
                */
            clientId: string | undefined;
            /**
                * <p>A secret string generated for the client. This value should come from the persisted result of the <a>RegisterClient</a> API.</p>
                */
            clientSecret: string | undefined;
            /**
                * <p>Supports grant types for authorization code, refresh token, and device code request.</p>
                */
            grantType: string | undefined;
            /**
                * <p>Used only when calling this API for the device code grant type. This short-term code is
                *       used to identify this authentication attempt. This should come from an in-memory reference to
                *       the result of the <a>StartDeviceAuthorization</a> API.</p>
                */
            deviceCode: string | undefined;
            /**
                * <p>The authorization code received from the authorization service. This parameter is required to perform an authorization grant request to get access to a token.</p>
                */
            code?: string;
            /**
                * <p>The token used to obtain an access token in the event that the access token is invalid or expired. This token is not issued by the service.</p>
                */
            refreshToken?: string;
            /**
                * <p>The list of scopes that is defined by the client. Upon authorization, this list is used to
                *       restrict permissions when granting an access token.</p>
                */
            scope?: string[];
            /**
                * <p>The location of the application that will receive the authorization code. Users authorize
                *       the service to send the request to this location.</p>
                */
            redirectUri?: string;
    }
    export namespace CreateTokenRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTokenRequest) => any;
    }
    export interface CreateTokenResponse {
            /**
                * <p>An opaque token to access AWS SSO resources assigned to a user.</p>
                */
            accessToken?: string;
            /**
                * <p>Used to notify the client that the returned token is an access token. The supported type
                *       is <code>BearerToken</code>.</p>
                */
            tokenType?: string;
            /**
                * <p>Indicates the time in seconds when an access token will expire.</p>
                */
            expiresIn?: number;
            /**
                * <p>A token that, if present, can be used to refresh a previously issued access token that
                *       might have expired.</p>
                */
            refreshToken?: string;
            /**
                * <p>The identifier of the user that associated with the access token, if present.</p>
                */
            idToken?: string;
    }
    export namespace CreateTokenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTokenResponse) => any;
    }
    /**
        * <p>Indicates that the token issued by the service is expired and is no longer valid.</p>
        */
    export class ExpiredTokenException extends __BaseException {
            readonly name: "ExpiredTokenException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExpiredTokenException, __BaseException>);
    }
    /**
        * <p>Indicates that an error from the service occurred while trying to process a request.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>Indicates that the <code>clientId</code> or <code>clientSecret</code> in the request is
        *       invalid. For example, this can occur when a client sends an incorrect <code>clientId</code> or
        *       an expired <code>clientSecret</code>.</p>
        */
    export class InvalidClientException extends __BaseException {
            readonly name: "InvalidClientException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidClientException, __BaseException>);
    }
    /**
        * <p>Indicates that a request contains an invalid grant. This can occur if a client makes a <a>CreateToken</a> request with an invalid grant type.</p>
        */
    export class InvalidGrantException extends __BaseException {
            readonly name: "InvalidGrantException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidGrantException, __BaseException>);
    }
    /**
        * <p>Indicates that something is wrong with the input to the request. For example, a required
        *       parameter might be missing or out of range.</p>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>Indicates that the scope provided in the request is invalid.</p>
        */
    export class InvalidScopeException extends __BaseException {
            readonly name: "InvalidScopeException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidScopeException, __BaseException>);
    }
    /**
        * <p>Indicates that the client is making the request too frequently and is more than the service can handle. </p>
        */
    export class SlowDownException extends __BaseException {
            readonly name: "SlowDownException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SlowDownException, __BaseException>);
    }
    /**
        * <p>Indicates that the client is not currently authorized to make the request. This can happen
        *       when a <code>clientId</code> is not issued for a public client.</p>
        */
    export class UnauthorizedClientException extends __BaseException {
            readonly name: "UnauthorizedClientException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedClientException, __BaseException>);
    }
    /**
        * <p>Indicates that the grant type in the request is not supported by the service.</p>
        */
    export class UnsupportedGrantTypeException extends __BaseException {
            readonly name: "UnsupportedGrantTypeException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedGrantTypeException, __BaseException>);
    }
    /**
        * <p>Indicates that the client information sent in the request during registration is invalid.</p>
        */
    export class InvalidClientMetadataException extends __BaseException {
            readonly name: "InvalidClientMetadataException";
            readonly $fault: "client";
            error?: string;
            error_description?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidClientMetadataException, __BaseException>);
    }
    export interface RegisterClientRequest {
            /**
                * <p>The friendly name of the client.</p>
                */
            clientName: string | undefined;
            /**
                * <p>The type of client. The service supports only <code>public</code> as a client type. Anything other than public will be rejected by the service.</p>
                */
            clientType: string | undefined;
            /**
                * <p>The list of scopes that are defined by the client. Upon authorization, this list is used
                *       to restrict permissions when granting an access token.</p>
                */
            scopes?: string[];
    }
    export namespace RegisterClientRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterClientRequest) => any;
    }
    export interface RegisterClientResponse {
            /**
                * <p>The unique identifier string for each client. This client uses this identifier to get
                *       authenticated by the service in subsequent calls.</p>
                */
            clientId?: string;
            /**
                * <p>A secret string generated for the client. The client will use this string to get
                *       authenticated by the service in subsequent calls.</p>
                */
            clientSecret?: string;
            /**
                * <p>Indicates the time at which the <code>clientId</code> and <code>clientSecret</code> were issued.</p>
                */
            clientIdIssuedAt?: number;
            /**
                * <p>Indicates the time at which the <code>clientId</code> and <code>clientSecret</code> will become invalid.</p>
                */
            clientSecretExpiresAt?: number;
            /**
                * <p>The endpoint where the client can request authorization.</p>
                */
            authorizationEndpoint?: string;
            /**
                * <p>The endpoint where the client can get an access token.</p>
                */
            tokenEndpoint?: string;
    }
    export namespace RegisterClientResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterClientResponse) => any;
    }
    export interface StartDeviceAuthorizationRequest {
            /**
                * <p>The unique identifier string for the client that is registered with AWS SSO. This value
                *       should come from the persisted result of the <a>RegisterClient</a> API
                *       operation.</p>
                */
            clientId: string | undefined;
            /**
                * <p>A secret string that is generated for the client. This value should come from the
                *       persisted result of the <a>RegisterClient</a> API operation.</p>
                */
            clientSecret: string | undefined;
            /**
                * <p>The URL for the AWS SSO user portal. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/using-the-portal.html">Using
                *         the User Portal</a> in the <i>AWS Single Sign-On User Guide</i>.</p>
                */
            startUrl: string | undefined;
    }
    export namespace StartDeviceAuthorizationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDeviceAuthorizationRequest) => any;
    }
    export interface StartDeviceAuthorizationResponse {
            /**
                * <p>The short-lived code that is used by the device when polling for a session token.</p>
                */
            deviceCode?: string;
            /**
                * <p>A one-time user verification code. This is needed to authorize an in-use device.</p>
                */
            userCode?: string;
            /**
                * <p>The URI of the verification page that takes the <code>userCode</code> to authorize the device.</p>
                */
            verificationUri?: string;
            /**
                * <p>An alternate URL that the client can use to automatically launch a browser. This process
                *       skips the manual step in which the user visits the verification page and enters their
                *       code.</p>
                */
            verificationUriComplete?: string;
            /**
                * <p>Indicates the number of seconds in which the verification code will become invalid.</p>
                */
            expiresIn?: number;
            /**
                * <p>Indicates the number of seconds the client must wait between attempts when polling for a session.</p>
                */
            interval?: number;
    }
    export namespace StartDeviceAuthorizationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDeviceAuthorizationResponse) => any;
    }
}

declare module '@aws-sdk/client-sso-oidc/node_modules/@aws-sdk/client-sso-oidc/dist-types/models/SSOOIDCServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SSOOIDC service.
        */
    export class SSOOIDCServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

