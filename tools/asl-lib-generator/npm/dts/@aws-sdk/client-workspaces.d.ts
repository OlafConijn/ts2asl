// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-workspaces' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateConnectionAliasCommandInput, AssociateConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AssociateConnectionAliasCommand";
    import { AssociateIpGroupsCommandInput, AssociateIpGroupsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AssociateIpGroupsCommand";
    import { AuthorizeIpRulesCommandInput, AuthorizeIpRulesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AuthorizeIpRulesCommand";
    import { CopyWorkspaceImageCommandInput, CopyWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CopyWorkspaceImageCommand";
    import { CreateConnectClientAddInCommandInput, CreateConnectClientAddInCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateConnectClientAddInCommand";
    import { CreateConnectionAliasCommandInput, CreateConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateConnectionAliasCommand";
    import { CreateIpGroupCommandInput, CreateIpGroupCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateIpGroupCommand";
    import { CreateTagsCommandInput, CreateTagsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateTagsCommand";
    import { CreateUpdatedWorkspaceImageCommandInput, CreateUpdatedWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateUpdatedWorkspaceImageCommand";
    import { CreateWorkspaceBundleCommandInput, CreateWorkspaceBundleCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateWorkspaceBundleCommand";
    import { CreateWorkspacesCommandInput, CreateWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateWorkspacesCommand";
    import { DeleteClientBrandingCommandInput, DeleteClientBrandingCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteClientBrandingCommand";
    import { DeleteConnectClientAddInCommandInput, DeleteConnectClientAddInCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteConnectClientAddInCommand";
    import { DeleteConnectionAliasCommandInput, DeleteConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteConnectionAliasCommand";
    import { DeleteIpGroupCommandInput, DeleteIpGroupCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteIpGroupCommand";
    import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteTagsCommand";
    import { DeleteWorkspaceBundleCommandInput, DeleteWorkspaceBundleCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteWorkspaceBundleCommand";
    import { DeleteWorkspaceImageCommandInput, DeleteWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteWorkspaceImageCommand";
    import { DeregisterWorkspaceDirectoryCommandInput, DeregisterWorkspaceDirectoryCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeregisterWorkspaceDirectoryCommand";
    import { DescribeAccountCommandInput, DescribeAccountCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeAccountCommand";
    import { DescribeAccountModificationsCommandInput, DescribeAccountModificationsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeAccountModificationsCommand";
    import { DescribeClientBrandingCommandInput, DescribeClientBrandingCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeClientBrandingCommand";
    import { DescribeClientPropertiesCommandInput, DescribeClientPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeClientPropertiesCommand";
    import { DescribeConnectClientAddInsCommandInput, DescribeConnectClientAddInsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectClientAddInsCommand";
    import { DescribeConnectionAliasesCommandInput, DescribeConnectionAliasesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectionAliasesCommand";
    import { DescribeConnectionAliasPermissionsCommandInput, DescribeConnectionAliasPermissionsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectionAliasPermissionsCommand";
    import { DescribeIpGroupsCommandInput, DescribeIpGroupsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeIpGroupsCommand";
    import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeTagsCommand";
    import { DescribeWorkspaceBundlesCommandInput, DescribeWorkspaceBundlesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceBundlesCommand";
    import { DescribeWorkspaceDirectoriesCommandInput, DescribeWorkspaceDirectoriesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceDirectoriesCommand";
    import { DescribeWorkspaceImagePermissionsCommandInput, DescribeWorkspaceImagePermissionsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceImagePermissionsCommand";
    import { DescribeWorkspaceImagesCommandInput, DescribeWorkspaceImagesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceImagesCommand";
    import { DescribeWorkspacesCommandInput, DescribeWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspacesCommand";
    import { DescribeWorkspacesConnectionStatusCommandInput, DescribeWorkspacesConnectionStatusCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspacesConnectionStatusCommand";
    import { DescribeWorkspaceSnapshotsCommandInput, DescribeWorkspaceSnapshotsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceSnapshotsCommand";
    import { DisassociateConnectionAliasCommandInput, DisassociateConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DisassociateConnectionAliasCommand";
    import { DisassociateIpGroupsCommandInput, DisassociateIpGroupsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DisassociateIpGroupsCommand";
    import { ImportClientBrandingCommandInput, ImportClientBrandingCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ImportClientBrandingCommand";
    import { ImportWorkspaceImageCommandInput, ImportWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ImportWorkspaceImageCommand";
    import { ListAvailableManagementCidrRangesCommandInput, ListAvailableManagementCidrRangesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ListAvailableManagementCidrRangesCommand";
    import { MigrateWorkspaceCommandInput, MigrateWorkspaceCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/MigrateWorkspaceCommand";
    import { ModifyAccountCommandInput, ModifyAccountCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyAccountCommand";
    import { ModifyClientPropertiesCommandInput, ModifyClientPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyClientPropertiesCommand";
    import { ModifySelfservicePermissionsCommandInput, ModifySelfservicePermissionsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifySelfservicePermissionsCommand";
    import { ModifyWorkspaceAccessPropertiesCommandInput, ModifyWorkspaceAccessPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceAccessPropertiesCommand";
    import { ModifyWorkspaceCreationPropertiesCommandInput, ModifyWorkspaceCreationPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceCreationPropertiesCommand";
    import { ModifyWorkspacePropertiesCommandInput, ModifyWorkspacePropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspacePropertiesCommand";
    import { ModifyWorkspaceStateCommandInput, ModifyWorkspaceStateCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceStateCommand";
    import { RebootWorkspacesCommandInput, RebootWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RebootWorkspacesCommand";
    import { RebuildWorkspacesCommandInput, RebuildWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RebuildWorkspacesCommand";
    import { RegisterWorkspaceDirectoryCommandInput, RegisterWorkspaceDirectoryCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RegisterWorkspaceDirectoryCommand";
    import { RestoreWorkspaceCommandInput, RestoreWorkspaceCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RestoreWorkspaceCommand";
    import { RevokeIpRulesCommandInput, RevokeIpRulesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RevokeIpRulesCommand";
    import { StartWorkspacesCommandInput, StartWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/StartWorkspacesCommand";
    import { StopWorkspacesCommandInput, StopWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/StopWorkspacesCommand";
    import { TerminateWorkspacesCommandInput, TerminateWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/TerminateWorkspacesCommand";
    import { UpdateConnectClientAddInCommandInput, UpdateConnectClientAddInCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateConnectClientAddInCommand";
    import { UpdateConnectionAliasPermissionCommandInput, UpdateConnectionAliasPermissionCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateConnectionAliasPermissionCommand";
    import { UpdateRulesOfIpGroupCommandInput, UpdateRulesOfIpGroupCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateRulesOfIpGroupCommand";
    import { UpdateWorkspaceBundleCommandInput, UpdateWorkspaceBundleCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateWorkspaceBundleCommand";
    import { UpdateWorkspaceImagePermissionCommandInput, UpdateWorkspaceImagePermissionCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateWorkspaceImagePermissionCommand";
    import { WorkSpacesClient } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    /**
        * <fullname>Amazon WorkSpaces Service</fullname>
        *          <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows
        *          or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>.
        *             WorkSpaces eliminates the need to procure and deploy hardware or install complex
        *          software. You can quickly add or remove users as your needs change. Users can access their
        *          virtual desktops from multiple devices or web browsers.</p>
        *          <p>This API Reference provides detailed information about the actions, data types,
        *          parameters, and errors of the WorkSpaces service. For more information about the
        *          supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href="https://docs.aws.amazon.com/general/latest/gr/wsp.html">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services
        *             General Reference</i>.</p>
        *          <p>You can also manage your WorkSpaces resources using the WorkSpaces
        *          console, Command Line Interface (CLI), and SDKs. For more information about
        *          administering WorkSpaces, see the <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/">Amazon WorkSpaces Administration Guide</a>.
        *          For more information about using the Amazon WorkSpaces client application or web
        *          browser to access provisioned WorkSpaces, see the <a href="https://docs.aws.amazon.com/workspaces/latest/userguide/">Amazon WorkSpaces User Guide</a>. For more
        *          information about using the CLI to manage your WorkSpaces resources,
        *          see the <a href="https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html">WorkSpaces section of the CLI Reference</a>.</p>
        */
    export class WorkSpaces extends WorkSpacesClient {
            /**
                * <p>Associates the specified connection alias with the specified directory to enable
                *          cross-Region redirection. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
                *             Redirection for Amazon WorkSpaces</a>.</p>
                *          <note>
                *             <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
                *                DescribeConnectionAliases</a> to make sure that the current state of the
                *             connection alias is <code>CREATED</code>.</p>
                *          </note>
                */
            associateConnectionAlias(args: AssociateConnectionAliasCommandInput, options?: __HttpHandlerOptions): Promise<AssociateConnectionAliasCommandOutput>;
            associateConnectionAlias(args: AssociateConnectionAliasCommandInput, cb: (err: any, data?: AssociateConnectionAliasCommandOutput) => void): void;
            associateConnectionAlias(args: AssociateConnectionAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateConnectionAliasCommandOutput) => void): void;
            /**
                * <p>Associates the specified IP access control group with the specified directory.</p>
                */
            associateIpGroups(args: AssociateIpGroupsCommandInput, options?: __HttpHandlerOptions): Promise<AssociateIpGroupsCommandOutput>;
            associateIpGroups(args: AssociateIpGroupsCommandInput, cb: (err: any, data?: AssociateIpGroupsCommandOutput) => void): void;
            associateIpGroups(args: AssociateIpGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateIpGroupsCommandOutput) => void): void;
            /**
                * <p>Adds one or more rules to the specified IP access control group.</p>
                *          <p>This action gives users permission to access their WorkSpaces from the CIDR address
                *          ranges specified in the rules.</p>
                */
            authorizeIpRules(args: AuthorizeIpRulesCommandInput, options?: __HttpHandlerOptions): Promise<AuthorizeIpRulesCommandOutput>;
            authorizeIpRules(args: AuthorizeIpRulesCommandInput, cb: (err: any, data?: AuthorizeIpRulesCommandOutput) => void): void;
            authorizeIpRules(args: AuthorizeIpRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AuthorizeIpRulesCommandOutput) => void): void;
            /**
                * <p>Copies the specified image from the specified Region to the current Region. For more
                *          information about copying images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/copy-custom-image.html"> Copy a Custom WorkSpaces
                *             Image</a>.</p>
                *          <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p>
                *          <p>In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.</p>
                *          <important>
                *             <p>Before copying a shared image, be sure to verify that it has been shared from the
                *             correct Amazon Web Services account. To determine if an image has been shared and to see
                *             the ID of the Amazon Web Services account that owns an image, use the <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html">DescribeWorkSpaceImages</a> and <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImagePermissions.html">DescribeWorkspaceImagePermissions</a> API operations. </p>
                *          </important>
                */
            copyWorkspaceImage(args: CopyWorkspaceImageCommandInput, options?: __HttpHandlerOptions): Promise<CopyWorkspaceImageCommandOutput>;
            copyWorkspaceImage(args: CopyWorkspaceImageCommandInput, cb: (err: any, data?: CopyWorkspaceImageCommandOutput) => void): void;
            copyWorkspaceImage(args: CopyWorkspaceImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyWorkspaceImageCommandOutput) => void): void;
            /**
                * <p>Creates a client-add-in for Amazon Connect within a directory. You can create only
                *          one Amazon Connect client add-in within a directory.</p>
                *          <p>This client add-in allows WorkSpaces users to seamlessly connect to Amazon Connect.</p>
                */
            createConnectClientAddIn(args: CreateConnectClientAddInCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectClientAddInCommandOutput>;
            createConnectClientAddIn(args: CreateConnectClientAddInCommandInput, cb: (err: any, data?: CreateConnectClientAddInCommandOutput) => void): void;
            createConnectClientAddIn(args: CreateConnectClientAddInCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectClientAddInCommandOutput) => void): void;
            /**
                * <p>Creates the specified connection alias for use with cross-Region redirection. For more
                *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
                *             Redirection for Amazon WorkSpaces</a>.</p>
                */
            createConnectionAlias(args: CreateConnectionAliasCommandInput, options?: __HttpHandlerOptions): Promise<CreateConnectionAliasCommandOutput>;
            createConnectionAlias(args: CreateConnectionAliasCommandInput, cb: (err: any, data?: CreateConnectionAliasCommandOutput) => void): void;
            createConnectionAlias(args: CreateConnectionAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConnectionAliasCommandOutput) => void): void;
            /**
                * <p>Creates an IP access control group.</p>
                *          <p>An IP access control group provides you with the ability to control the IP addresses
                *          from which users are allowed to access their WorkSpaces. To specify the CIDR address
                *          ranges, add rules to your IP access control group and then associate the group with your
                *          directory. You can add rules when you create the group or at any time using <a>AuthorizeIpRules</a>.</p>
                *          <p>There is a default IP access control group associated with your directory. If you don't
                *          associate an IP access control group with your directory, the default group is used. The
                *          default group includes a default rule that allows users to access their WorkSpaces from
                *          anywhere. You cannot modify the default IP access control group for your directory.</p>
                */
            createIpGroup(args: CreateIpGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateIpGroupCommandOutput>;
            createIpGroup(args: CreateIpGroupCommandInput, cb: (err: any, data?: CreateIpGroupCommandOutput) => void): void;
            createIpGroup(args: CreateIpGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIpGroupCommandOutput) => void): void;
            /**
                * <p>Creates the specified tags for the specified WorkSpaces resource.</p>
                */
            createTags(args: CreateTagsCommandInput, options?: __HttpHandlerOptions): Promise<CreateTagsCommandOutput>;
            createTags(args: CreateTagsCommandInput, cb: (err: any, data?: CreateTagsCommandOutput) => void): void;
            createTags(args: CreateTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTagsCommandOutput) => void): void;
            /**
                * <p>Creates a new updated WorkSpace image based on the specified source image. The new
                *          updated WorkSpace image has the latest drivers and other updates required by the Amazon
                *          WorkSpaces components.</p>
                *          <p>To determine which WorkSpace images need to be updated with the latest Amazon WorkSpaces
                *          requirements, use <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html">
                *             DescribeWorkspaceImages</a>.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>Only Windows 10, Windows Sever 2016, and Windows Server 2019 WorkSpace images
                *                   can be programmatically updated at this time.</p>
                *                </li>
                *                <li>
                *                   <p>Microsoft Windows updates and other application updates are not included in the
                *                   update process.</p>
                *                </li>
                *                <li>
                *                   <p>The source WorkSpace image is not deleted. You can delete the source image
                *                   after you've verified your new updated image and created a new bundle. </p>
                *                </li>
                *             </ul>
                *          </note>
                */
            createUpdatedWorkspaceImage(args: CreateUpdatedWorkspaceImageCommandInput, options?: __HttpHandlerOptions): Promise<CreateUpdatedWorkspaceImageCommandOutput>;
            createUpdatedWorkspaceImage(args: CreateUpdatedWorkspaceImageCommandInput, cb: (err: any, data?: CreateUpdatedWorkspaceImageCommandOutput) => void): void;
            createUpdatedWorkspaceImage(args: CreateUpdatedWorkspaceImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUpdatedWorkspaceImageCommandOutput) => void): void;
            /**
                * <p>Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see
                *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/create-custom-bundle.html">
                *             Create a Custom WorkSpaces Image and Bundle</a>.</p>
                */
            createWorkspaceBundle(args: CreateWorkspaceBundleCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkspaceBundleCommandOutput>;
            createWorkspaceBundle(args: CreateWorkspaceBundleCommandInput, cb: (err: any, data?: CreateWorkspaceBundleCommandOutput) => void): void;
            createWorkspaceBundle(args: CreateWorkspaceBundleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkspaceBundleCommandOutput) => void): void;
            /**
                * <p>Creates one or more WorkSpaces.</p>
                *          <p>This operation is asynchronous and returns before the WorkSpaces are created.</p>
                */
            createWorkspaces(args: CreateWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkspacesCommandOutput>;
            createWorkspaces(args: CreateWorkspacesCommandInput, cb: (err: any, data?: CreateWorkspacesCommandOutput) => void): void;
            createWorkspaces(args: CreateWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkspacesCommandOutput) => void): void;
            /**
                * <p>Deletes customized client branding. Client branding allows you to customize your
                *          WorkSpace's client login portal. You can tailor your login portal company logo, the support
                *          email address, support link, link to reset password, and a custom message for users trying
                *          to sign in.</p>
                *          <p>After you delete your customized client branding, your login portal reverts to the
                *          default client branding.</p>
                */
            deleteClientBranding(args: DeleteClientBrandingCommandInput, options?: __HttpHandlerOptions): Promise<DeleteClientBrandingCommandOutput>;
            deleteClientBranding(args: DeleteClientBrandingCommandInput, cb: (err: any, data?: DeleteClientBrandingCommandOutput) => void): void;
            deleteClientBranding(args: DeleteClientBrandingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteClientBrandingCommandOutput) => void): void;
            /**
                * <p>Deletes a client-add-in for Amazon Connect that is configured within a
                *          directory.</p>
                */
            deleteConnectClientAddIn(args: DeleteConnectClientAddInCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectClientAddInCommandOutput>;
            deleteConnectClientAddIn(args: DeleteConnectClientAddInCommandInput, cb: (err: any, data?: DeleteConnectClientAddInCommandOutput) => void): void;
            deleteConnectClientAddIn(args: DeleteConnectClientAddInCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectClientAddInCommandOutput) => void): void;
            /**
                * <p>Deletes the specified connection alias. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
                *             Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
                *          <important>
                *             <p>
                *                <b>If you will no longer be using a fully qualified domain name
                *                (FQDN) as the registration code for your WorkSpaces users, you must take certain
                *                precautions to prevent potential security issues.</b> For more information,
                *             see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html#cross-region-redirection-security-considerations"> Security Considerations if You Stop Using Cross-Region Redirection</a>.</p>
                *          </important>
                *          <note>
                *             <p>To delete a connection alias that has been shared, the shared account must first
                *             disassociate the connection alias from any directories it has been associated with. Then
                *             you must unshare the connection alias from the account it has been shared with. You can
                *             delete a connection alias only after it is no longer shared with any accounts or
                *             associated with any directories.</p>
                *          </note>
                */
            deleteConnectionAlias(args: DeleteConnectionAliasCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConnectionAliasCommandOutput>;
            deleteConnectionAlias(args: DeleteConnectionAliasCommandInput, cb: (err: any, data?: DeleteConnectionAliasCommandOutput) => void): void;
            deleteConnectionAlias(args: DeleteConnectionAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConnectionAliasCommandOutput) => void): void;
            /**
                * <p>Deletes the specified IP access control group.</p>
                *          <p>You cannot delete an IP access control group that is associated with a directory.</p>
                */
            deleteIpGroup(args: DeleteIpGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIpGroupCommandOutput>;
            deleteIpGroup(args: DeleteIpGroupCommandInput, cb: (err: any, data?: DeleteIpGroupCommandOutput) => void): void;
            deleteIpGroup(args: DeleteIpGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIpGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified tags from the specified WorkSpaces resource.</p>
                */
            deleteTags(args: DeleteTagsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTagsCommandOutput>;
            deleteTags(args: DeleteTagsCommandInput, cb: (err: any, data?: DeleteTagsCommandOutput) => void): void;
            deleteTags(args: DeleteTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTagsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see
                *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete_bundle.html">
                *             Delete a Custom WorkSpaces Bundle or Image</a>.</p>
                */
            deleteWorkspaceBundle(args: DeleteWorkspaceBundleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkspaceBundleCommandOutput>;
            deleteWorkspaceBundle(args: DeleteWorkspaceBundleCommandInput, cb: (err: any, data?: DeleteWorkspaceBundleCommandOutput) => void): void;
            deleteWorkspaceBundle(args: DeleteWorkspaceBundleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkspaceBundleCommandOutput) => void): void;
            /**
                * <p>Deletes the specified image from your account. To delete an image, you must first delete
                *          any bundles that are associated with the image and unshare the image if it is shared with
                *          other accounts. </p>
                */
            deleteWorkspaceImage(args: DeleteWorkspaceImageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkspaceImageCommandOutput>;
            deleteWorkspaceImage(args: DeleteWorkspaceImageCommandInput, cb: (err: any, data?: DeleteWorkspaceImageCommandOutput) => void): void;
            deleteWorkspaceImage(args: DeleteWorkspaceImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkspaceImageCommandOutput) => void): void;
            /**
                * <p>Deregisters the specified directory. This operation is asynchronous and returns before
                *          the WorkSpace directory is deregistered. If any WorkSpaces are registered to this
                *          directory, you must remove them before you can deregister the directory.</p>
                *          <note>
                *             <p>Simple AD and AD Connector are made available to you free of charge to use with
                *             WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector
                *             directory for 30 consecutive days, this directory will be automatically deregistered for
                *             use with Amazon WorkSpaces, and you will be charged for this directory as per the <a href="http://aws.amazon.com/directoryservice/pricing/">Directory Service pricing
                *                terms</a>.</p>
                *             <p>To delete empty directories, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html"> Delete the
                *                Directory for Your WorkSpaces</a>. If you delete your Simple AD or AD Connector
                *             directory, you can always create a new one when you want to start using WorkSpaces
                *             again.</p>
                *          </note>
                */
            deregisterWorkspaceDirectory(args: DeregisterWorkspaceDirectoryCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterWorkspaceDirectoryCommandOutput>;
            deregisterWorkspaceDirectory(args: DeregisterWorkspaceDirectoryCommandInput, cb: (err: any, data?: DeregisterWorkspaceDirectoryCommandOutput) => void): void;
            deregisterWorkspaceDirectory(args: DeregisterWorkspaceDirectoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterWorkspaceDirectoryCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for
                *          the specified account.</p>
                */
            describeAccount(args: DescribeAccountCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountCommandOutput>;
            describeAccount(args: DescribeAccountCommandInput, cb: (err: any, data?: DescribeAccountCommandOutput) => void): void;
            describeAccount(args: DescribeAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes modifications to the configuration of Bring Your Own
                *          License (BYOL) for the specified account.</p>
                */
            describeAccountModifications(args: DescribeAccountModificationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountModificationsCommandOutput>;
            describeAccountModifications(args: DescribeAccountModificationsCommandInput, cb: (err: any, data?: DescribeAccountModificationsCommandOutput) => void): void;
            describeAccountModifications(args: DescribeAccountModificationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountModificationsCommandOutput) => void): void;
            /**
                * <p>Describes the specified client branding. Client branding allows you to customize the log
                *          in page of various device types for your users. You can add your company logo, the support
                *          email address, support link, link to reset password, and a custom message for users trying
                *          to sign in.</p>
                *          <note>
                *             <p>Only device types that have branding information configured will be shown in the
                *             response.</p>
                *          </note>
                */
            describeClientBranding(args: DescribeClientBrandingCommandInput, options?: __HttpHandlerOptions): Promise<DescribeClientBrandingCommandOutput>;
            describeClientBranding(args: DescribeClientBrandingCommandInput, cb: (err: any, data?: DescribeClientBrandingCommandOutput) => void): void;
            describeClientBranding(args: DescribeClientBrandingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeClientBrandingCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified Amazon WorkSpaces clients.</p>
                */
            describeClientProperties(args: DescribeClientPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeClientPropertiesCommandOutput>;
            describeClientProperties(args: DescribeClientPropertiesCommandInput, cb: (err: any, data?: DescribeClientPropertiesCommandOutput) => void): void;
            describeClientProperties(args: DescribeClientPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeClientPropertiesCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of Amazon Connect client add-ins that have been created.</p>
                */
            describeConnectClientAddIns(args: DescribeConnectClientAddInsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConnectClientAddInsCommandOutput>;
            describeConnectClientAddIns(args: DescribeConnectClientAddInsCommandInput, cb: (err: any, data?: DescribeConnectClientAddInsCommandOutput) => void): void;
            describeConnectClientAddIns(args: DescribeConnectClientAddInsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConnectClientAddInsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes the connection aliases used for cross-Region
                *          redirection. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
                *             Redirection for Amazon WorkSpaces</a>.</p>
                */
            describeConnectionAliases(args: DescribeConnectionAliasesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConnectionAliasesCommandOutput>;
            describeConnectionAliases(args: DescribeConnectionAliasesCommandInput, cb: (err: any, data?: DescribeConnectionAliasesCommandOutput) => void): void;
            describeConnectionAliases(args: DescribeConnectionAliasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConnectionAliasesCommandOutput) => void): void;
            /**
                * <p>Describes the permissions that the owner of a connection alias has granted to another
                *             Amazon Web Services account for the specified connection alias. For more information, see
                *             <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
                *             Redirection for Amazon WorkSpaces</a>.</p>
                */
            describeConnectionAliasPermissions(args: DescribeConnectionAliasPermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConnectionAliasPermissionsCommandOutput>;
            describeConnectionAliasPermissions(args: DescribeConnectionAliasPermissionsCommandInput, cb: (err: any, data?: DescribeConnectionAliasPermissionsCommandOutput) => void): void;
            describeConnectionAliasPermissions(args: DescribeConnectionAliasPermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConnectionAliasPermissionsCommandOutput) => void): void;
            /**
                * <p>Describes one or more of your IP access control groups.</p>
                */
            describeIpGroups(args: DescribeIpGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeIpGroupsCommandOutput>;
            describeIpGroups(args: DescribeIpGroupsCommandInput, cb: (err: any, data?: DescribeIpGroupsCommandOutput) => void): void;
            describeIpGroups(args: DescribeIpGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeIpGroupsCommandOutput) => void): void;
            /**
                * <p>Describes the specified tags for the specified WorkSpaces resource.</p>
                */
            describeTags(args: DescribeTagsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTagsCommandOutput>;
            describeTags(args: DescribeTagsCommandInput, cb: (err: any, data?: DescribeTagsCommandOutput) => void): void;
            describeTags(args: DescribeTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTagsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes the available WorkSpace bundles.</p>
                *          <p>You can filter the results using either bundle ID or owner, but not both.</p>
                */
            describeWorkspaceBundles(args: DescribeWorkspaceBundlesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspaceBundlesCommandOutput>;
            describeWorkspaceBundles(args: DescribeWorkspaceBundlesCommandInput, cb: (err: any, data?: DescribeWorkspaceBundlesCommandOutput) => void): void;
            describeWorkspaceBundles(args: DescribeWorkspaceBundlesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspaceBundlesCommandOutput) => void): void;
            /**
                * <p>Describes the available directories that are registered with Amazon WorkSpaces.</p>
                */
            describeWorkspaceDirectories(args: DescribeWorkspaceDirectoriesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspaceDirectoriesCommandOutput>;
            describeWorkspaceDirectories(args: DescribeWorkspaceDirectoriesCommandInput, cb: (err: any, data?: DescribeWorkspaceDirectoriesCommandOutput) => void): void;
            describeWorkspaceDirectories(args: DescribeWorkspaceDirectoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspaceDirectoriesCommandOutput) => void): void;
            /**
                * <p>Describes the permissions that the owner of an image has granted to other Amazon Web Services accounts for an image.</p>
                */
            describeWorkspaceImagePermissions(args: DescribeWorkspaceImagePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspaceImagePermissionsCommandOutput>;
            describeWorkspaceImagePermissions(args: DescribeWorkspaceImagePermissionsCommandInput, cb: (err: any, data?: DescribeWorkspaceImagePermissionsCommandOutput) => void): void;
            describeWorkspaceImagePermissions(args: DescribeWorkspaceImagePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspaceImagePermissionsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list that describes one or more specified images, if the image identifiers
                *          are provided. Otherwise, all images in the account are described. </p>
                */
            describeWorkspaceImages(args: DescribeWorkspaceImagesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspaceImagesCommandOutput>;
            describeWorkspaceImages(args: DescribeWorkspaceImagesCommandInput, cb: (err: any, data?: DescribeWorkspaceImagesCommandOutput) => void): void;
            describeWorkspaceImages(args: DescribeWorkspaceImagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspaceImagesCommandOutput) => void): void;
            /**
                * <p>Describes the specified WorkSpaces.</p>
                *          <p>You can filter the results by using the bundle identifier, directory identifier, or
                *          owner, but you can specify only one filter at a time.</p>
                */
            describeWorkspaces(args: DescribeWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspacesCommandOutput>;
            describeWorkspaces(args: DescribeWorkspacesCommandInput, cb: (err: any, data?: DescribeWorkspacesCommandOutput) => void): void;
            describeWorkspaces(args: DescribeWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspacesCommandOutput) => void): void;
            /**
                * <p>Describes the connection status of the specified WorkSpaces.</p>
                */
            describeWorkspacesConnectionStatus(args: DescribeWorkspacesConnectionStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspacesConnectionStatusCommandOutput>;
            describeWorkspacesConnectionStatus(args: DescribeWorkspacesConnectionStatusCommandInput, cb: (err: any, data?: DescribeWorkspacesConnectionStatusCommandOutput) => void): void;
            describeWorkspacesConnectionStatus(args: DescribeWorkspacesConnectionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspacesConnectionStatusCommandOutput) => void): void;
            /**
                * <p>Describes the snapshots for the specified WorkSpace.</p>
                */
            describeWorkspaceSnapshots(args: DescribeWorkspaceSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorkspaceSnapshotsCommandOutput>;
            describeWorkspaceSnapshots(args: DescribeWorkspaceSnapshotsCommandInput, cb: (err: any, data?: DescribeWorkspaceSnapshotsCommandOutput) => void): void;
            describeWorkspaceSnapshots(args: DescribeWorkspaceSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorkspaceSnapshotsCommandOutput) => void): void;
            /**
                * <p>Disassociates a connection alias from a directory. Disassociating a connection alias
                *          disables cross-Region redirection between two directories in different Regions. For more
                *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
                *             Redirection for Amazon WorkSpaces</a>.</p>
                *          <note>
                *             <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
                *                DescribeConnectionAliases</a> to make sure that the current state of the
                *             connection alias is <code>CREATED</code>.</p>
                *          </note>
                */
            disassociateConnectionAlias(args: DisassociateConnectionAliasCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateConnectionAliasCommandOutput>;
            disassociateConnectionAlias(args: DisassociateConnectionAliasCommandInput, cb: (err: any, data?: DisassociateConnectionAliasCommandOutput) => void): void;
            disassociateConnectionAlias(args: DisassociateConnectionAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateConnectionAliasCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified IP access control group from the specified directory.</p>
                */
            disassociateIpGroups(args: DisassociateIpGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateIpGroupsCommandOutput>;
            disassociateIpGroups(args: DisassociateIpGroupsCommandInput, cb: (err: any, data?: DisassociateIpGroupsCommandOutput) => void): void;
            disassociateIpGroups(args: DisassociateIpGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateIpGroupsCommandOutput) => void): void;
            /**
                * <p>Imports client branding. Client branding allows you to customize your WorkSpace's client
                *          login portal. You can tailor your login portal company logo, the support email address,
                *          support link, link to reset password, and a custom message for users trying to sign
                *          in.</p>
                *          <p>After you import client branding, the default branding experience for the specified
                *          platform type is replaced with the imported experience</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>You must specify at least one platform type when importing client
                *                   branding.</p>
                *                </li>
                *                <li>
                *                   <p>You can import up to 6 MB of data with each request. If your request exceeds
                *                   this limit, you can import client branding for different platform types using
                *                   separate requests.</p>
                *                </li>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify
                *                   only one parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>Imported data can take up to a minute to appear in the WorkSpaces
                *                   client.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            importClientBranding(args: ImportClientBrandingCommandInput, options?: __HttpHandlerOptions): Promise<ImportClientBrandingCommandOutput>;
            importClientBranding(args: ImportClientBrandingCommandInput, cb: (err: any, data?: ImportClientBrandingCommandOutput) => void): void;
            importClientBranding(args: ImportClientBrandingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportClientBrandingCommandOutput) => void): void;
            /**
                * <p>Imports the specified Windows 10 Bring Your Own License (BYOL) image into Amazon
                *          WorkSpaces. The image must be an already licensed Amazon EC2 image that is in your Amazon Web Services account, and you must own the image. For more information about creating BYOL
                *          images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html"> Bring Your Own Windows
                *             Desktop Licenses</a>.</p>
                */
            importWorkspaceImage(args: ImportWorkspaceImageCommandInput, options?: __HttpHandlerOptions): Promise<ImportWorkspaceImageCommandOutput>;
            importWorkspaceImage(args: ImportWorkspaceImageCommandInput, cb: (err: any, data?: ImportWorkspaceImageCommandOutput) => void): void;
            importWorkspaceImage(args: ImportWorkspaceImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportWorkspaceImageCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use
                *          for the network management interface when you enable Bring Your Own License (BYOL). </p>
                *          <p>This operation can be run only by Amazon Web Services accounts that are enabled for BYOL.
                *          If your account isn't enabled for BYOL, you'll receive an
                *             <code>AccessDeniedException</code> error.</p>
                *          <p>The management network interface is connected to a secure Amazon WorkSpaces management
                *          network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces
                *          clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
                */
            listAvailableManagementCidrRanges(args: ListAvailableManagementCidrRangesCommandInput, options?: __HttpHandlerOptions): Promise<ListAvailableManagementCidrRangesCommandOutput>;
            listAvailableManagementCidrRanges(args: ListAvailableManagementCidrRangesCommandInput, cb: (err: any, data?: ListAvailableManagementCidrRangesCommandOutput) => void): void;
            listAvailableManagementCidrRanges(args: ListAvailableManagementCidrRangesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAvailableManagementCidrRangesCommandOutput) => void): void;
            /**
                * <p>Migrates a WorkSpace from one operating system or bundle type to another, while
                *          retaining the data on the user volume.</p>
                *          <p>The migration process recreates the WorkSpace by using a new root volume from the target
                *          bundle image and the user volume from the last available snapshot of the original
                *          WorkSpace. During migration, the original <code>D:\Users\%USERNAME%</code> user profile
                *          folder is renamed to <code>D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated</code>. A new
                *             <code>D:\Users\%USERNAME%\</code> folder is generated by the new OS. Certain files in
                *          the old user profile are moved to the new user profile.</p>
                *          <p>For available migration scenarios, details about what happens during migration, and best
                *          practices, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html">Migrate a
                *          WorkSpace</a>.</p>
                */
            migrateWorkspace(args: MigrateWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<MigrateWorkspaceCommandOutput>;
            migrateWorkspace(args: MigrateWorkspaceCommandInput, cb: (err: any, data?: MigrateWorkspaceCommandOutput) => void): void;
            migrateWorkspace(args: MigrateWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MigrateWorkspaceCommandOutput) => void): void;
            /**
                * <p>Modifies the configuration of Bring Your Own License (BYOL) for the specified
                *          account.</p>
                */
            modifyAccount(args: ModifyAccountCommandInput, options?: __HttpHandlerOptions): Promise<ModifyAccountCommandOutput>;
            modifyAccount(args: ModifyAccountCommandInput, cb: (err: any, data?: ModifyAccountCommandOutput) => void): void;
            modifyAccount(args: ModifyAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyAccountCommandOutput) => void): void;
            /**
                * <p>Modifies the properties of the specified Amazon WorkSpaces clients.</p>
                */
            modifyClientProperties(args: ModifyClientPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyClientPropertiesCommandOutput>;
            modifyClientProperties(args: ModifyClientPropertiesCommandInput, cb: (err: any, data?: ModifyClientPropertiesCommandOutput) => void): void;
            modifyClientProperties(args: ModifyClientPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyClientPropertiesCommandOutput) => void): void;
            /**
                * <p>Modifies the self-service WorkSpace management capabilities for your users. For more
                *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.</p>
                */
            modifySelfservicePermissions(args: ModifySelfservicePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<ModifySelfservicePermissionsCommandOutput>;
            modifySelfservicePermissions(args: ModifySelfservicePermissionsCommandInput, cb: (err: any, data?: ModifySelfservicePermissionsCommandOutput) => void): void;
            modifySelfservicePermissions(args: ModifySelfservicePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifySelfservicePermissionsCommandOutput) => void): void;
            /**
                * <p>Specifies which devices and operating systems users can use to access their WorkSpaces.
                *          For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html#control-device-access">
                *             Control Device Access</a>.</p>
                */
            modifyWorkspaceAccessProperties(args: ModifyWorkspaceAccessPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyWorkspaceAccessPropertiesCommandOutput>;
            modifyWorkspaceAccessProperties(args: ModifyWorkspaceAccessPropertiesCommandInput, cb: (err: any, data?: ModifyWorkspaceAccessPropertiesCommandOutput) => void): void;
            modifyWorkspaceAccessProperties(args: ModifyWorkspaceAccessPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyWorkspaceAccessPropertiesCommandOutput) => void): void;
            /**
                * <p>Modify the default properties used to create WorkSpaces.</p>
                */
            modifyWorkspaceCreationProperties(args: ModifyWorkspaceCreationPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyWorkspaceCreationPropertiesCommandOutput>;
            modifyWorkspaceCreationProperties(args: ModifyWorkspaceCreationPropertiesCommandInput, cb: (err: any, data?: ModifyWorkspaceCreationPropertiesCommandOutput) => void): void;
            modifyWorkspaceCreationProperties(args: ModifyWorkspaceCreationPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyWorkspaceCreationPropertiesCommandOutput) => void): void;
            /**
                * <p>Modifies the specified WorkSpace properties. For important information about how to
                *          modify the size of the root and user volumes, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html"> Modify a WorkSpace</a>.
                *       </p>
                */
            modifyWorkspaceProperties(args: ModifyWorkspacePropertiesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyWorkspacePropertiesCommandOutput>;
            modifyWorkspaceProperties(args: ModifyWorkspacePropertiesCommandInput, cb: (err: any, data?: ModifyWorkspacePropertiesCommandOutput) => void): void;
            modifyWorkspaceProperties(args: ModifyWorkspacePropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyWorkspacePropertiesCommandOutput) => void): void;
            /**
                * <p>Sets the state of the specified WorkSpace.</p>
                *          <p>To maintain a WorkSpace without being interrupted, set the WorkSpace state to
                *             <code>ADMIN_MAINTENANCE</code>. WorkSpaces in this state do not respond to requests to
                *          reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not
                *          stopped. Users cannot log into a WorkSpace in the <code>ADMIN_MAINTENANCE</code>
                *          state.</p>
                */
            modifyWorkspaceState(args: ModifyWorkspaceStateCommandInput, options?: __HttpHandlerOptions): Promise<ModifyWorkspaceStateCommandOutput>;
            modifyWorkspaceState(args: ModifyWorkspaceStateCommandInput, cb: (err: any, data?: ModifyWorkspaceStateCommandOutput) => void): void;
            modifyWorkspaceState(args: ModifyWorkspaceStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyWorkspaceStateCommandOutput) => void): void;
            /**
                * <p>Reboots the specified WorkSpaces.</p>
                *          <p>You cannot reboot a WorkSpace unless its state is <code>AVAILABLE</code> or
                *             <code>UNHEALTHY</code>.</p>
                *          <p>This operation is asynchronous and returns before the WorkSpaces have rebooted.</p>
                */
            rebootWorkspaces(args: RebootWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<RebootWorkspacesCommandOutput>;
            rebootWorkspaces(args: RebootWorkspacesCommandInput, cb: (err: any, data?: RebootWorkspacesCommandOutput) => void): void;
            rebootWorkspaces(args: RebootWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootWorkspacesCommandOutput) => void): void;
            /**
                * <p>Rebuilds the specified WorkSpace.</p>
                *          <p>You cannot rebuild a WorkSpace unless its state is <code>AVAILABLE</code>,
                *             <code>ERROR</code>, <code>UNHEALTHY</code>, <code>STOPPED</code>, or
                *             <code>REBOOTING</code>.</p>
                *          <p>Rebuilding a WorkSpace is a potentially destructive action that can result in the loss
                *          of data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/reset-workspace.html">Rebuild a
                *          WorkSpace</a>.</p>
                *          <p>This operation is asynchronous and returns before the WorkSpaces have been completely
                *          rebuilt.</p>
                */
            rebuildWorkspaces(args: RebuildWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<RebuildWorkspacesCommandOutput>;
            rebuildWorkspaces(args: RebuildWorkspacesCommandInput, cb: (err: any, data?: RebuildWorkspacesCommandOutput) => void): void;
            rebuildWorkspaces(args: RebuildWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebuildWorkspacesCommandOutput) => void): void;
            /**
                * <p>Registers the specified directory. This operation is asynchronous and returns before the
                *          WorkSpace directory is registered. If this is the first time you are registering a
                *          directory, you will need to create the workspaces_DefaultRole role before you can register
                *          a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role">
                *             Creating the workspaces_DefaultRole Role</a>.</p>
                */
            registerWorkspaceDirectory(args: RegisterWorkspaceDirectoryCommandInput, options?: __HttpHandlerOptions): Promise<RegisterWorkspaceDirectoryCommandOutput>;
            registerWorkspaceDirectory(args: RegisterWorkspaceDirectoryCommandInput, cb: (err: any, data?: RegisterWorkspaceDirectoryCommandOutput) => void): void;
            registerWorkspaceDirectory(args: RegisterWorkspaceDirectoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterWorkspaceDirectoryCommandOutput) => void): void;
            /**
                * <p>Restores the specified WorkSpace to its last known healthy state.</p>
                *          <p>You cannot restore a WorkSpace unless its state is <code> AVAILABLE</code>,
                *             <code>ERROR</code>, <code>UNHEALTHY</code>, or <code>STOPPED</code>.</p>
                *          <p>Restoring a WorkSpace is a potentially destructive action that can result in the loss of
                *          data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/restore-workspace.html">Restore a
                *          WorkSpace</a>.</p>
                *          <p>This operation is asynchronous and returns before the WorkSpace is completely
                *          restored.</p>
                */
            restoreWorkspace(args: RestoreWorkspaceCommandInput, options?: __HttpHandlerOptions): Promise<RestoreWorkspaceCommandOutput>;
            restoreWorkspace(args: RestoreWorkspaceCommandInput, cb: (err: any, data?: RestoreWorkspaceCommandOutput) => void): void;
            restoreWorkspace(args: RestoreWorkspaceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreWorkspaceCommandOutput) => void): void;
            /**
                * <p>Removes one or more rules from the specified IP access control group.</p>
                */
            revokeIpRules(args: RevokeIpRulesCommandInput, options?: __HttpHandlerOptions): Promise<RevokeIpRulesCommandOutput>;
            revokeIpRules(args: RevokeIpRulesCommandInput, cb: (err: any, data?: RevokeIpRulesCommandOutput) => void): void;
            revokeIpRules(args: RevokeIpRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RevokeIpRulesCommandOutput) => void): void;
            /**
                * <p>Starts the specified WorkSpaces.</p>
                *          <p>You cannot start a WorkSpace unless it has a running mode of <code>AutoStop</code> and a
                *          state of <code>STOPPED</code>.</p>
                */
            startWorkspaces(args: StartWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<StartWorkspacesCommandOutput>;
            startWorkspaces(args: StartWorkspacesCommandInput, cb: (err: any, data?: StartWorkspacesCommandOutput) => void): void;
            startWorkspaces(args: StartWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartWorkspacesCommandOutput) => void): void;
            /**
                * <p> Stops the specified WorkSpaces.</p>
                *          <p>You cannot stop a WorkSpace unless it has a running mode of <code>AutoStop</code> and a
                *          state of <code>AVAILABLE</code>, <code>IMPAIRED</code>, <code>UNHEALTHY</code>, or
                *             <code>ERROR</code>.</p>
                */
            stopWorkspaces(args: StopWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<StopWorkspacesCommandOutput>;
            stopWorkspaces(args: StopWorkspacesCommandInput, cb: (err: any, data?: StopWorkspacesCommandOutput) => void): void;
            stopWorkspaces(args: StopWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopWorkspacesCommandOutput) => void): void;
            /**
                * <p>Terminates the specified WorkSpaces.</p>
                *          <important>
                *             <p>Terminating a WorkSpace is a permanent action and cannot be undone. The user's data
                *             is destroyed. If you need to archive any user data, contact Amazon Web Services Support before
                *             terminating the WorkSpace.</p>
                *          </important>
                *          <p>You can terminate a WorkSpace that is in any state except <code>SUSPENDED</code>.</p>
                *          <p>This operation is asynchronous and returns before the WorkSpaces have been completely
                *          terminated. After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned
                *          only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely
                *          returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using
                *             <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html">
                *             DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has
                *          been successfully terminated.</p>
                *          <note>
                *             <p>Simple AD and AD Connector are made available to you free of charge to use with
                *             WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector
                *             directory for 30 consecutive days, this directory will be automatically deregistered for
                *             use with Amazon WorkSpaces, and you will be charged for this directory as per the <a href="http://aws.amazon.com/directoryservice/pricing/">Directory Service pricing
                *                terms</a>.</p>
                *             <p>To delete empty directories, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html"> Delete the
                *                Directory for Your WorkSpaces</a>. If you delete your Simple AD or AD Connector
                *             directory, you can always create a new one when you want to start using WorkSpaces
                *             again.</p>
                *          </note>
                */
            terminateWorkspaces(args: TerminateWorkspacesCommandInput, options?: __HttpHandlerOptions): Promise<TerminateWorkspacesCommandOutput>;
            terminateWorkspaces(args: TerminateWorkspacesCommandInput, cb: (err: any, data?: TerminateWorkspacesCommandOutput) => void): void;
            terminateWorkspaces(args: TerminateWorkspacesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TerminateWorkspacesCommandOutput) => void): void;
            /**
                * <p>Updates a Amazon Connect client add-in. Use this action to update the name and
                *          endpoint URL of a Amazon Connect client add-in.</p>
                */
            updateConnectClientAddIn(args: UpdateConnectClientAddInCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectClientAddInCommandOutput>;
            updateConnectClientAddIn(args: UpdateConnectClientAddInCommandInput, cb: (err: any, data?: UpdateConnectClientAddInCommandOutput) => void): void;
            updateConnectClientAddIn(args: UpdateConnectClientAddInCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectClientAddInCommandOutput) => void): void;
            /**
                * <p>Shares or unshares a connection alias with one account by specifying whether that
                *          account has permission to associate the connection alias with a directory. If the
                *          association permission is granted, the connection alias is shared with that account. If the
                *          association permission is revoked, the connection alias is unshared with the account. For
                *          more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
                *             Redirection for Amazon WorkSpaces</a>.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
                *                      DescribeConnectionAliases</a> to make sure that the current state of the
                *                   connection alias is <code>CREATED</code>.</p>
                *                </li>
                *                <li>
                *                   <p>To delete a connection alias that has been shared, the shared account must
                *                   first disassociate the connection alias from any directories it has been
                *                   associated with. Then you must unshare the connection alias from the account it
                *                   has been shared with. You can delete a connection alias only after it is no longer
                *                   shared with any accounts or associated with any directories.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            updateConnectionAliasPermission(args: UpdateConnectionAliasPermissionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectionAliasPermissionCommandOutput>;
            updateConnectionAliasPermission(args: UpdateConnectionAliasPermissionCommandInput, cb: (err: any, data?: UpdateConnectionAliasPermissionCommandOutput) => void): void;
            updateConnectionAliasPermission(args: UpdateConnectionAliasPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectionAliasPermissionCommandOutput) => void): void;
            /**
                * <p>Replaces the current rules of the specified IP access control group with the specified
                *          rules.</p>
                */
            updateRulesOfIpGroup(args: UpdateRulesOfIpGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRulesOfIpGroupCommandOutput>;
            updateRulesOfIpGroup(args: UpdateRulesOfIpGroupCommandInput, cb: (err: any, data?: UpdateRulesOfIpGroupCommandOutput) => void): void;
            updateRulesOfIpGroup(args: UpdateRulesOfIpGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRulesOfIpGroupCommandOutput) => void): void;
            /**
                * <p>Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see
                *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-custom-bundle.html">
                *             Update a Custom WorkSpaces Bundle</a>.</p>
                *
                *          <important>
                *             <p>Existing WorkSpaces aren't automatically updated when you update the bundle that they're
                *             based on. To update existing WorkSpaces that are based on a bundle that you've updated, you
                *             must either rebuild the WorkSpaces or delete and recreate them.</p>
                *          </important>
                */
            updateWorkspaceBundle(args: UpdateWorkspaceBundleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkspaceBundleCommandOutput>;
            updateWorkspaceBundle(args: UpdateWorkspaceBundleCommandInput, cb: (err: any, data?: UpdateWorkspaceBundleCommandOutput) => void): void;
            updateWorkspaceBundle(args: UpdateWorkspaceBundleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkspaceBundleCommandOutput) => void): void;
            /**
                * <p>Shares or unshares an image with one account in the same Amazon Web Services Region by
                *          specifying whether that account has permission to copy the image. If the copy image
                *          permission is granted, the image is shared with that account. If the copy image permission
                *          is revoked, the image is unshared with the account.</p>
                *          <p>After an image has been shared, the recipient account can copy the image to other
                *          Regions as needed.</p>
                *          <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p>
                *          <p>In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.</p>
                *          <p>For more information about sharing images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html"> Share or Unshare a Custom
                *             WorkSpaces Image</a>.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>To delete an image that has been shared, you must unshare the image before you
                *                   delete it.</p>
                *                </li>
                *                <li>
                *                   <p>Sharing Bring Your Own License (BYOL) images across Amazon Web Services accounts
                *                   isn't supported at this time in Amazon Web Services GovCloud (US). To share BYOL images
                *                   across accounts in Amazon Web Services GovCloud (US), contact Amazon Web Services Support.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            updateWorkspaceImagePermission(args: UpdateWorkspaceImagePermissionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorkspaceImagePermissionCommandOutput>;
            updateWorkspaceImagePermission(args: UpdateWorkspaceImagePermissionCommandInput, cb: (err: any, data?: UpdateWorkspaceImagePermissionCommandOutput) => void): void;
            updateWorkspaceImagePermission(args: UpdateWorkspaceImagePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorkspaceImagePermissionCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AssociateConnectionAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateConnectionAliasRequest, AssociateConnectionAliasResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface AssociateConnectionAliasCommandInput extends AssociateConnectionAliasRequest {
    }
    export interface AssociateConnectionAliasCommandOutput extends AssociateConnectionAliasResult, __MetadataBearer {
    }
    /**
        * <p>Associates the specified connection alias with the specified directory to enable
        *          cross-Region redirection. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        *          <note>
        *             <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
        *                DescribeConnectionAliases</a> to make sure that the current state of the
        *             connection alias is <code>CREATED</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, AssociateConnectionAliasCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, AssociateConnectionAliasCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new AssociateConnectionAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateConnectionAliasCommandInput} for command's `input` shape.
        * @see {@link AssociateConnectionAliasCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class AssociateConnectionAliasCommand extends $Command<AssociateConnectionAliasCommandInput, AssociateConnectionAliasCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: AssociateConnectionAliasCommandInput;
            constructor(input: AssociateConnectionAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateConnectionAliasCommandInput, AssociateConnectionAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AssociateIpGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateIpGroupsRequest, AssociateIpGroupsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface AssociateIpGroupsCommandInput extends AssociateIpGroupsRequest {
    }
    export interface AssociateIpGroupsCommandOutput extends AssociateIpGroupsResult, __MetadataBearer {
    }
    /**
        * <p>Associates the specified IP access control group with the specified directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, AssociateIpGroupsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, AssociateIpGroupsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new AssociateIpGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateIpGroupsCommandInput} for command's `input` shape.
        * @see {@link AssociateIpGroupsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class AssociateIpGroupsCommand extends $Command<AssociateIpGroupsCommandInput, AssociateIpGroupsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: AssociateIpGroupsCommandInput;
            constructor(input: AssociateIpGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateIpGroupsCommandInput, AssociateIpGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AuthorizeIpRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuthorizeIpRulesRequest, AuthorizeIpRulesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface AuthorizeIpRulesCommandInput extends AuthorizeIpRulesRequest {
    }
    export interface AuthorizeIpRulesCommandOutput extends AuthorizeIpRulesResult, __MetadataBearer {
    }
    /**
        * <p>Adds one or more rules to the specified IP access control group.</p>
        *          <p>This action gives users permission to access their WorkSpaces from the CIDR address
        *          ranges specified in the rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, AuthorizeIpRulesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, AuthorizeIpRulesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new AuthorizeIpRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AuthorizeIpRulesCommandInput} for command's `input` shape.
        * @see {@link AuthorizeIpRulesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class AuthorizeIpRulesCommand extends $Command<AuthorizeIpRulesCommandInput, AuthorizeIpRulesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: AuthorizeIpRulesCommandInput;
            constructor(input: AuthorizeIpRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AuthorizeIpRulesCommandInput, AuthorizeIpRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CopyWorkspaceImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CopyWorkspaceImageRequest, CopyWorkspaceImageResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CopyWorkspaceImageCommandInput extends CopyWorkspaceImageRequest {
    }
    export interface CopyWorkspaceImageCommandOutput extends CopyWorkspaceImageResult, __MetadataBearer {
    }
    /**
        * <p>Copies the specified image from the specified Region to the current Region. For more
        *          information about copying images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/copy-custom-image.html"> Copy a Custom WorkSpaces
        *             Image</a>.</p>
        *          <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p>
        *          <p>In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.</p>
        *          <important>
        *             <p>Before copying a shared image, be sure to verify that it has been shared from the
        *             correct Amazon Web Services account. To determine if an image has been shared and to see
        *             the ID of the Amazon Web Services account that owns an image, use the <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html">DescribeWorkSpaceImages</a> and <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImagePermissions.html">DescribeWorkspaceImagePermissions</a> API operations. </p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CopyWorkspaceImageCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CopyWorkspaceImageCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CopyWorkspaceImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyWorkspaceImageCommandInput} for command's `input` shape.
        * @see {@link CopyWorkspaceImageCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CopyWorkspaceImageCommand extends $Command<CopyWorkspaceImageCommandInput, CopyWorkspaceImageCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CopyWorkspaceImageCommandInput;
            constructor(input: CopyWorkspaceImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyWorkspaceImageCommandInput, CopyWorkspaceImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateConnectClientAddInCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConnectClientAddInRequest, CreateConnectClientAddInResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CreateConnectClientAddInCommandInput extends CreateConnectClientAddInRequest {
    }
    export interface CreateConnectClientAddInCommandOutput extends CreateConnectClientAddInResult, __MetadataBearer {
    }
    /**
        * <p>Creates a client-add-in for Amazon Connect within a directory. You can create only
        *          one Amazon Connect client add-in within a directory.</p>
        *          <p>This client add-in allows WorkSpaces users to seamlessly connect to Amazon Connect.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CreateConnectClientAddInCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CreateConnectClientAddInCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CreateConnectClientAddInCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectClientAddInCommandInput} for command's `input` shape.
        * @see {@link CreateConnectClientAddInCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CreateConnectClientAddInCommand extends $Command<CreateConnectClientAddInCommandInput, CreateConnectClientAddInCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CreateConnectClientAddInCommandInput;
            constructor(input: CreateConnectClientAddInCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectClientAddInCommandInput, CreateConnectClientAddInCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateConnectionAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateConnectionAliasRequest, CreateConnectionAliasResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CreateConnectionAliasCommandInput extends CreateConnectionAliasRequest {
    }
    export interface CreateConnectionAliasCommandOutput extends CreateConnectionAliasResult, __MetadataBearer {
    }
    /**
        * <p>Creates the specified connection alias for use with cross-Region redirection. For more
        *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CreateConnectionAliasCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CreateConnectionAliasCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CreateConnectionAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConnectionAliasCommandInput} for command's `input` shape.
        * @see {@link CreateConnectionAliasCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CreateConnectionAliasCommand extends $Command<CreateConnectionAliasCommandInput, CreateConnectionAliasCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CreateConnectionAliasCommandInput;
            constructor(input: CreateConnectionAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConnectionAliasCommandInput, CreateConnectionAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateIpGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateIpGroupRequest, CreateIpGroupResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CreateIpGroupCommandInput extends CreateIpGroupRequest {
    }
    export interface CreateIpGroupCommandOutput extends CreateIpGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates an IP access control group.</p>
        *          <p>An IP access control group provides you with the ability to control the IP addresses
        *          from which users are allowed to access their WorkSpaces. To specify the CIDR address
        *          ranges, add rules to your IP access control group and then associate the group with your
        *          directory. You can add rules when you create the group or at any time using <a>AuthorizeIpRules</a>.</p>
        *          <p>There is a default IP access control group associated with your directory. If you don't
        *          associate an IP access control group with your directory, the default group is used. The
        *          default group includes a default rule that allows users to access their WorkSpaces from
        *          anywhere. You cannot modify the default IP access control group for your directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CreateIpGroupCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CreateIpGroupCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CreateIpGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIpGroupCommandInput} for command's `input` shape.
        * @see {@link CreateIpGroupCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CreateIpGroupCommand extends $Command<CreateIpGroupCommandInput, CreateIpGroupCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CreateIpGroupCommandInput;
            constructor(input: CreateIpGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIpGroupCommandInput, CreateIpGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateTagsRequest, CreateTagsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CreateTagsCommandInput extends CreateTagsRequest {
    }
    export interface CreateTagsCommandOutput extends CreateTagsResult, __MetadataBearer {
    }
    /**
        * <p>Creates the specified tags for the specified WorkSpaces resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CreateTagsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CreateTagsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CreateTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTagsCommandInput} for command's `input` shape.
        * @see {@link CreateTagsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CreateTagsCommand extends $Command<CreateTagsCommandInput, CreateTagsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CreateTagsCommandInput;
            constructor(input: CreateTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTagsCommandInput, CreateTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateUpdatedWorkspaceImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateUpdatedWorkspaceImageRequest, CreateUpdatedWorkspaceImageResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CreateUpdatedWorkspaceImageCommandInput extends CreateUpdatedWorkspaceImageRequest {
    }
    export interface CreateUpdatedWorkspaceImageCommandOutput extends CreateUpdatedWorkspaceImageResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new updated WorkSpace image based on the specified source image. The new
        *          updated WorkSpace image has the latest drivers and other updates required by the Amazon
        *          WorkSpaces components.</p>
        *          <p>To determine which WorkSpace images need to be updated with the latest Amazon WorkSpaces
        *          requirements, use <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceImages.html">
        *             DescribeWorkspaceImages</a>.</p>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>Only Windows 10, Windows Sever 2016, and Windows Server 2019 WorkSpace images
        *                   can be programmatically updated at this time.</p>
        *                </li>
        *                <li>
        *                   <p>Microsoft Windows updates and other application updates are not included in the
        *                   update process.</p>
        *                </li>
        *                <li>
        *                   <p>The source WorkSpace image is not deleted. You can delete the source image
        *                   after you've verified your new updated image and created a new bundle. </p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CreateUpdatedWorkspaceImageCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CreateUpdatedWorkspaceImageCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CreateUpdatedWorkspaceImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUpdatedWorkspaceImageCommandInput} for command's `input` shape.
        * @see {@link CreateUpdatedWorkspaceImageCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CreateUpdatedWorkspaceImageCommand extends $Command<CreateUpdatedWorkspaceImageCommandInput, CreateUpdatedWorkspaceImageCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CreateUpdatedWorkspaceImageCommandInput;
            constructor(input: CreateUpdatedWorkspaceImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUpdatedWorkspaceImageCommandInput, CreateUpdatedWorkspaceImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateWorkspaceBundleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorkspaceBundleRequest, CreateWorkspaceBundleResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CreateWorkspaceBundleCommandInput extends CreateWorkspaceBundleRequest {
    }
    export interface CreateWorkspaceBundleCommandOutput extends CreateWorkspaceBundleResult, __MetadataBearer {
    }
    /**
        * <p>Creates the specified WorkSpace bundle. For more information about creating WorkSpace bundles, see
        *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/create-custom-bundle.html">
        *             Create a Custom WorkSpaces Image and Bundle</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CreateWorkspaceBundleCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CreateWorkspaceBundleCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CreateWorkspaceBundleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkspaceBundleCommandInput} for command's `input` shape.
        * @see {@link CreateWorkspaceBundleCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CreateWorkspaceBundleCommand extends $Command<CreateWorkspaceBundleCommandInput, CreateWorkspaceBundleCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CreateWorkspaceBundleCommandInput;
            constructor(input: CreateWorkspaceBundleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkspaceBundleCommandInput, CreateWorkspaceBundleCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorkspacesRequest, CreateWorkspacesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface CreateWorkspacesCommandInput extends CreateWorkspacesRequest {
    }
    export interface CreateWorkspacesCommandOutput extends CreateWorkspacesResult, __MetadataBearer {
    }
    /**
        * <p>Creates one or more WorkSpaces.</p>
        *          <p>This operation is asynchronous and returns before the WorkSpaces are created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, CreateWorkspacesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, CreateWorkspacesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new CreateWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkspacesCommandInput} for command's `input` shape.
        * @see {@link CreateWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class CreateWorkspacesCommand extends $Command<CreateWorkspacesCommandInput, CreateWorkspacesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: CreateWorkspacesCommandInput;
            constructor(input: CreateWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkspacesCommandInput, CreateWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteClientBrandingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteClientBrandingRequest, DeleteClientBrandingResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeleteClientBrandingCommandInput extends DeleteClientBrandingRequest {
    }
    export interface DeleteClientBrandingCommandOutput extends DeleteClientBrandingResult, __MetadataBearer {
    }
    /**
        * <p>Deletes customized client branding. Client branding allows you to customize your
        *          WorkSpace's client login portal. You can tailor your login portal company logo, the support
        *          email address, support link, link to reset password, and a custom message for users trying
        *          to sign in.</p>
        *          <p>After you delete your customized client branding, your login portal reverts to the
        *          default client branding.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeleteClientBrandingCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeleteClientBrandingCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeleteClientBrandingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteClientBrandingCommandInput} for command's `input` shape.
        * @see {@link DeleteClientBrandingCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeleteClientBrandingCommand extends $Command<DeleteClientBrandingCommandInput, DeleteClientBrandingCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeleteClientBrandingCommandInput;
            constructor(input: DeleteClientBrandingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteClientBrandingCommandInput, DeleteClientBrandingCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteConnectClientAddInCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConnectClientAddInRequest, DeleteConnectClientAddInResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeleteConnectClientAddInCommandInput extends DeleteConnectClientAddInRequest {
    }
    export interface DeleteConnectClientAddInCommandOutput extends DeleteConnectClientAddInResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a client-add-in for Amazon Connect that is configured within a
        *          directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeleteConnectClientAddInCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeleteConnectClientAddInCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeleteConnectClientAddInCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectClientAddInCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectClientAddInCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeleteConnectClientAddInCommand extends $Command<DeleteConnectClientAddInCommandInput, DeleteConnectClientAddInCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeleteConnectClientAddInCommandInput;
            constructor(input: DeleteConnectClientAddInCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectClientAddInCommandInput, DeleteConnectClientAddInCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteConnectionAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteConnectionAliasRequest, DeleteConnectionAliasResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeleteConnectionAliasCommandInput extends DeleteConnectionAliasRequest {
    }
    export interface DeleteConnectionAliasCommandOutput extends DeleteConnectionAliasResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified connection alias. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html">
        *             Cross-Region Redirection for Amazon WorkSpaces</a>.</p>
        *          <important>
        *             <p>
        *                <b>If you will no longer be using a fully qualified domain name
        *                (FQDN) as the registration code for your WorkSpaces users, you must take certain
        *                precautions to prevent potential security issues.</b> For more information,
        *             see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html#cross-region-redirection-security-considerations"> Security Considerations if You Stop Using Cross-Region Redirection</a>.</p>
        *          </important>
        *          <note>
        *             <p>To delete a connection alias that has been shared, the shared account must first
        *             disassociate the connection alias from any directories it has been associated with. Then
        *             you must unshare the connection alias from the account it has been shared with. You can
        *             delete a connection alias only after it is no longer shared with any accounts or
        *             associated with any directories.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeleteConnectionAliasCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeleteConnectionAliasCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeleteConnectionAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConnectionAliasCommandInput} for command's `input` shape.
        * @see {@link DeleteConnectionAliasCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeleteConnectionAliasCommand extends $Command<DeleteConnectionAliasCommandInput, DeleteConnectionAliasCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeleteConnectionAliasCommandInput;
            constructor(input: DeleteConnectionAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConnectionAliasCommandInput, DeleteConnectionAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteIpGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteIpGroupRequest, DeleteIpGroupResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeleteIpGroupCommandInput extends DeleteIpGroupRequest {
    }
    export interface DeleteIpGroupCommandOutput extends DeleteIpGroupResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified IP access control group.</p>
        *          <p>You cannot delete an IP access control group that is associated with a directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeleteIpGroupCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeleteIpGroupCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeleteIpGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIpGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteIpGroupCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeleteIpGroupCommand extends $Command<DeleteIpGroupCommandInput, DeleteIpGroupCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeleteIpGroupCommandInput;
            constructor(input: DeleteIpGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIpGroupCommandInput, DeleteIpGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteTagsRequest, DeleteTagsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeleteTagsCommandInput extends DeleteTagsRequest {
    }
    export interface DeleteTagsCommandOutput extends DeleteTagsResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified tags from the specified WorkSpaces resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeleteTagsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeleteTagsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeleteTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTagsCommandInput} for command's `input` shape.
        * @see {@link DeleteTagsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeleteTagsCommand extends $Command<DeleteTagsCommandInput, DeleteTagsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeleteTagsCommandInput;
            constructor(input: DeleteTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTagsCommandInput, DeleteTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteWorkspaceBundleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorkspaceBundleRequest, DeleteWorkspaceBundleResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeleteWorkspaceBundleCommandInput extends DeleteWorkspaceBundleRequest {
    }
    export interface DeleteWorkspaceBundleCommandOutput extends DeleteWorkspaceBundleResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified WorkSpace bundle. For more information about deleting WorkSpace bundles, see
        *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete_bundle.html">
        *             Delete a Custom WorkSpaces Bundle or Image</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeleteWorkspaceBundleCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeleteWorkspaceBundleCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeleteWorkspaceBundleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkspaceBundleCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkspaceBundleCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeleteWorkspaceBundleCommand extends $Command<DeleteWorkspaceBundleCommandInput, DeleteWorkspaceBundleCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeleteWorkspaceBundleCommandInput;
            constructor(input: DeleteWorkspaceBundleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkspaceBundleCommandInput, DeleteWorkspaceBundleCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteWorkspaceImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorkspaceImageRequest, DeleteWorkspaceImageResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeleteWorkspaceImageCommandInput extends DeleteWorkspaceImageRequest {
    }
    export interface DeleteWorkspaceImageCommandOutput extends DeleteWorkspaceImageResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified image from your account. To delete an image, you must first delete
        *          any bundles that are associated with the image and unshare the image if it is shared with
        *          other accounts. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeleteWorkspaceImageCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeleteWorkspaceImageCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeleteWorkspaceImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkspaceImageCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkspaceImageCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeleteWorkspaceImageCommand extends $Command<DeleteWorkspaceImageCommandInput, DeleteWorkspaceImageCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeleteWorkspaceImageCommandInput;
            constructor(input: DeleteWorkspaceImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkspaceImageCommandInput, DeleteWorkspaceImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeregisterWorkspaceDirectoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterWorkspaceDirectoryRequest, DeregisterWorkspaceDirectoryResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DeregisterWorkspaceDirectoryCommandInput extends DeregisterWorkspaceDirectoryRequest {
    }
    export interface DeregisterWorkspaceDirectoryCommandOutput extends DeregisterWorkspaceDirectoryResult, __MetadataBearer {
    }
    /**
        * <p>Deregisters the specified directory. This operation is asynchronous and returns before
        *          the WorkSpace directory is deregistered. If any WorkSpaces are registered to this
        *          directory, you must remove them before you can deregister the directory.</p>
        *          <note>
        *             <p>Simple AD and AD Connector are made available to you free of charge to use with
        *             WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector
        *             directory for 30 consecutive days, this directory will be automatically deregistered for
        *             use with Amazon WorkSpaces, and you will be charged for this directory as per the <a href="http://aws.amazon.com/directoryservice/pricing/">Directory Service pricing
        *                terms</a>.</p>
        *             <p>To delete empty directories, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html"> Delete the
        *                Directory for Your WorkSpaces</a>. If you delete your Simple AD or AD Connector
        *             directory, you can always create a new one when you want to start using WorkSpaces
        *             again.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DeregisterWorkspaceDirectoryCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DeregisterWorkspaceDirectoryCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DeregisterWorkspaceDirectoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterWorkspaceDirectoryCommandInput} for command's `input` shape.
        * @see {@link DeregisterWorkspaceDirectoryCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DeregisterWorkspaceDirectoryCommand extends $Command<DeregisterWorkspaceDirectoryCommandInput, DeregisterWorkspaceDirectoryCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DeregisterWorkspaceDirectoryCommandInput;
            constructor(input: DeregisterWorkspaceDirectoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterWorkspaceDirectoryCommandInput, DeregisterWorkspaceDirectoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAccountRequest, DescribeAccountResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeAccountCommandInput extends DescribeAccountRequest {
    }
    export interface DescribeAccountCommandOutput extends DescribeAccountResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes the configuration of Bring Your Own License (BYOL) for
        *          the specified account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeAccountCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeAccountCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeAccountCommand extends $Command<DescribeAccountCommandInput, DescribeAccountCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeAccountCommandInput;
            constructor(input: DescribeAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountCommandInput, DescribeAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeAccountModificationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAccountModificationsRequest, DescribeAccountModificationsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeAccountModificationsCommandInput extends DescribeAccountModificationsRequest {
    }
    export interface DescribeAccountModificationsCommandOutput extends DescribeAccountModificationsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes modifications to the configuration of Bring Your Own
        *          License (BYOL) for the specified account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeAccountModificationsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeAccountModificationsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeAccountModificationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountModificationsCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountModificationsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeAccountModificationsCommand extends $Command<DescribeAccountModificationsCommandInput, DescribeAccountModificationsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeAccountModificationsCommandInput;
            constructor(input: DescribeAccountModificationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountModificationsCommandInput, DescribeAccountModificationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeClientBrandingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeClientBrandingRequest, DescribeClientBrandingResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeClientBrandingCommandInput extends DescribeClientBrandingRequest {
    }
    export interface DescribeClientBrandingCommandOutput extends DescribeClientBrandingResult, __MetadataBearer {
    }
    /**
        * <p>Describes the specified client branding. Client branding allows you to customize the log
        *          in page of various device types for your users. You can add your company logo, the support
        *          email address, support link, link to reset password, and a custom message for users trying
        *          to sign in.</p>
        *          <note>
        *             <p>Only device types that have branding information configured will be shown in the
        *             response.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeClientBrandingCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeClientBrandingCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeClientBrandingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeClientBrandingCommandInput} for command's `input` shape.
        * @see {@link DescribeClientBrandingCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeClientBrandingCommand extends $Command<DescribeClientBrandingCommandInput, DescribeClientBrandingCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeClientBrandingCommandInput;
            constructor(input: DescribeClientBrandingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeClientBrandingCommandInput, DescribeClientBrandingCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeClientPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeClientPropertiesRequest, DescribeClientPropertiesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeClientPropertiesCommandInput extends DescribeClientPropertiesRequest {
    }
    export interface DescribeClientPropertiesCommandOutput extends DescribeClientPropertiesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified Amazon WorkSpaces clients.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeClientPropertiesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeClientPropertiesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeClientPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeClientPropertiesCommandInput} for command's `input` shape.
        * @see {@link DescribeClientPropertiesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeClientPropertiesCommand extends $Command<DescribeClientPropertiesCommandInput, DescribeClientPropertiesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeClientPropertiesCommandInput;
            constructor(input: DescribeClientPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeClientPropertiesCommandInput, DescribeClientPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectClientAddInsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeConnectClientAddInsRequest, DescribeConnectClientAddInsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeConnectClientAddInsCommandInput extends DescribeConnectClientAddInsRequest {
    }
    export interface DescribeConnectClientAddInsCommandOutput extends DescribeConnectClientAddInsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of Amazon Connect client add-ins that have been created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeConnectClientAddInsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeConnectClientAddInsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeConnectClientAddInsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConnectClientAddInsCommandInput} for command's `input` shape.
        * @see {@link DescribeConnectClientAddInsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeConnectClientAddInsCommand extends $Command<DescribeConnectClientAddInsCommandInput, DescribeConnectClientAddInsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeConnectClientAddInsCommandInput;
            constructor(input: DescribeConnectClientAddInsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConnectClientAddInsCommandInput, DescribeConnectClientAddInsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectionAliasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeConnectionAliasesRequest, DescribeConnectionAliasesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeConnectionAliasesCommandInput extends DescribeConnectionAliasesRequest {
    }
    export interface DescribeConnectionAliasesCommandOutput extends DescribeConnectionAliasesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes the connection aliases used for cross-Region
        *          redirection. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeConnectionAliasesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeConnectionAliasesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeConnectionAliasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConnectionAliasesCommandInput} for command's `input` shape.
        * @see {@link DescribeConnectionAliasesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeConnectionAliasesCommand extends $Command<DescribeConnectionAliasesCommandInput, DescribeConnectionAliasesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeConnectionAliasesCommandInput;
            constructor(input: DescribeConnectionAliasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConnectionAliasesCommandInput, DescribeConnectionAliasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectionAliasPermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeConnectionAliasPermissionsRequest, DescribeConnectionAliasPermissionsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeConnectionAliasPermissionsCommandInput extends DescribeConnectionAliasPermissionsRequest {
    }
    export interface DescribeConnectionAliasPermissionsCommandOutput extends DescribeConnectionAliasPermissionsResult, __MetadataBearer {
    }
    /**
        * <p>Describes the permissions that the owner of a connection alias has granted to another
        *             Amazon Web Services account for the specified connection alias. For more information, see
        *             <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeConnectionAliasPermissionsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeConnectionAliasPermissionsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeConnectionAliasPermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConnectionAliasPermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeConnectionAliasPermissionsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeConnectionAliasPermissionsCommand extends $Command<DescribeConnectionAliasPermissionsCommandInput, DescribeConnectionAliasPermissionsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeConnectionAliasPermissionsCommandInput;
            constructor(input: DescribeConnectionAliasPermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConnectionAliasPermissionsCommandInput, DescribeConnectionAliasPermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeIpGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeIpGroupsRequest, DescribeIpGroupsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeIpGroupsCommandInput extends DescribeIpGroupsRequest {
    }
    export interface DescribeIpGroupsCommandOutput extends DescribeIpGroupsResult, __MetadataBearer {
    }
    /**
        * <p>Describes one or more of your IP access control groups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeIpGroupsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeIpGroupsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeIpGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeIpGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeIpGroupsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeIpGroupsCommand extends $Command<DescribeIpGroupsCommandInput, DescribeIpGroupsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeIpGroupsCommandInput;
            constructor(input: DescribeIpGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeIpGroupsCommandInput, DescribeIpGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeTagsRequest, DescribeTagsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeTagsCommandInput extends DescribeTagsRequest {
    }
    export interface DescribeTagsCommandOutput extends DescribeTagsResult, __MetadataBearer {
    }
    /**
        * <p>Describes the specified tags for the specified WorkSpaces resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeTagsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeTagsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTagsCommandInput} for command's `input` shape.
        * @see {@link DescribeTagsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeTagsCommand extends $Command<DescribeTagsCommandInput, DescribeTagsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeTagsCommandInput;
            constructor(input: DescribeTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTagsCommandInput, DescribeTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceBundlesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkspaceBundlesRequest, DescribeWorkspaceBundlesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeWorkspaceBundlesCommandInput extends DescribeWorkspaceBundlesRequest {
    }
    export interface DescribeWorkspaceBundlesCommandOutput extends DescribeWorkspaceBundlesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes the available WorkSpace bundles.</p>
        *          <p>You can filter the results using either bundle ID or owner, but not both.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeWorkspaceBundlesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeWorkspaceBundlesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeWorkspaceBundlesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspaceBundlesCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspaceBundlesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeWorkspaceBundlesCommand extends $Command<DescribeWorkspaceBundlesCommandInput, DescribeWorkspaceBundlesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeWorkspaceBundlesCommandInput;
            constructor(input: DescribeWorkspaceBundlesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspaceBundlesCommandInput, DescribeWorkspaceBundlesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceDirectoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkspaceDirectoriesRequest, DescribeWorkspaceDirectoriesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeWorkspaceDirectoriesCommandInput extends DescribeWorkspaceDirectoriesRequest {
    }
    export interface DescribeWorkspaceDirectoriesCommandOutput extends DescribeWorkspaceDirectoriesResult, __MetadataBearer {
    }
    /**
        * <p>Describes the available directories that are registered with Amazon WorkSpaces.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeWorkspaceDirectoriesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeWorkspaceDirectoriesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeWorkspaceDirectoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspaceDirectoriesCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspaceDirectoriesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeWorkspaceDirectoriesCommand extends $Command<DescribeWorkspaceDirectoriesCommandInput, DescribeWorkspaceDirectoriesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeWorkspaceDirectoriesCommandInput;
            constructor(input: DescribeWorkspaceDirectoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspaceDirectoriesCommandInput, DescribeWorkspaceDirectoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceImagePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkspaceImagePermissionsRequest, DescribeWorkspaceImagePermissionsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeWorkspaceImagePermissionsCommandInput extends DescribeWorkspaceImagePermissionsRequest {
    }
    export interface DescribeWorkspaceImagePermissionsCommandOutput extends DescribeWorkspaceImagePermissionsResult, __MetadataBearer {
    }
    /**
        * <p>Describes the permissions that the owner of an image has granted to other Amazon Web Services accounts for an image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeWorkspaceImagePermissionsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeWorkspaceImagePermissionsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeWorkspaceImagePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspaceImagePermissionsCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspaceImagePermissionsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeWorkspaceImagePermissionsCommand extends $Command<DescribeWorkspaceImagePermissionsCommandInput, DescribeWorkspaceImagePermissionsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeWorkspaceImagePermissionsCommandInput;
            constructor(input: DescribeWorkspaceImagePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspaceImagePermissionsCommandInput, DescribeWorkspaceImagePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceImagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkspaceImagesRequest, DescribeWorkspaceImagesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeWorkspaceImagesCommandInput extends DescribeWorkspaceImagesRequest {
    }
    export interface DescribeWorkspaceImagesCommandOutput extends DescribeWorkspaceImagesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list that describes one or more specified images, if the image identifiers
        *          are provided. Otherwise, all images in the account are described. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeWorkspaceImagesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeWorkspaceImagesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeWorkspaceImagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspaceImagesCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspaceImagesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeWorkspaceImagesCommand extends $Command<DescribeWorkspaceImagesCommandInput, DescribeWorkspaceImagesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeWorkspaceImagesCommandInput;
            constructor(input: DescribeWorkspaceImagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspaceImagesCommandInput, DescribeWorkspaceImagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkspacesRequest, DescribeWorkspacesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeWorkspacesCommandInput extends DescribeWorkspacesRequest {
    }
    export interface DescribeWorkspacesCommandOutput extends DescribeWorkspacesResult, __MetadataBearer {
    }
    /**
        * <p>Describes the specified WorkSpaces.</p>
        *          <p>You can filter the results by using the bundle identifier, directory identifier, or
        *          owner, but you can specify only one filter at a time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeWorkspacesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeWorkspacesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspacesCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeWorkspacesCommand extends $Command<DescribeWorkspacesCommandInput, DescribeWorkspacesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeWorkspacesCommandInput;
            constructor(input: DescribeWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspacesCommandInput, DescribeWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspacesConnectionStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkspacesConnectionStatusRequest, DescribeWorkspacesConnectionStatusResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeWorkspacesConnectionStatusCommandInput extends DescribeWorkspacesConnectionStatusRequest {
    }
    export interface DescribeWorkspacesConnectionStatusCommandOutput extends DescribeWorkspacesConnectionStatusResult, __MetadataBearer {
    }
    /**
        * <p>Describes the connection status of the specified WorkSpaces.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeWorkspacesConnectionStatusCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeWorkspacesConnectionStatusCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeWorkspacesConnectionStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspacesConnectionStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspacesConnectionStatusCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeWorkspacesConnectionStatusCommand extends $Command<DescribeWorkspacesConnectionStatusCommandInput, DescribeWorkspacesConnectionStatusCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeWorkspacesConnectionStatusCommandInput;
            constructor(input: DescribeWorkspacesConnectionStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspacesConnectionStatusCommandInput, DescribeWorkspacesConnectionStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorkspaceSnapshotsRequest, DescribeWorkspaceSnapshotsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DescribeWorkspaceSnapshotsCommandInput extends DescribeWorkspaceSnapshotsRequest {
    }
    export interface DescribeWorkspaceSnapshotsCommandOutput extends DescribeWorkspaceSnapshotsResult, __MetadataBearer {
    }
    /**
        * <p>Describes the snapshots for the specified WorkSpace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DescribeWorkspaceSnapshotsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DescribeWorkspaceSnapshotsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DescribeWorkspaceSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorkspaceSnapshotsCommandInput} for command's `input` shape.
        * @see {@link DescribeWorkspaceSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DescribeWorkspaceSnapshotsCommand extends $Command<DescribeWorkspaceSnapshotsCommandInput, DescribeWorkspaceSnapshotsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DescribeWorkspaceSnapshotsCommandInput;
            constructor(input: DescribeWorkspaceSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorkspaceSnapshotsCommandInput, DescribeWorkspaceSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DisassociateConnectionAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateConnectionAliasRequest, DisassociateConnectionAliasResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DisassociateConnectionAliasCommandInput extends DisassociateConnectionAliasRequest {
    }
    export interface DisassociateConnectionAliasCommandOutput extends DisassociateConnectionAliasResult, __MetadataBearer {
    }
    /**
        * <p>Disassociates a connection alias from a directory. Disassociating a connection alias
        *          disables cross-Region redirection between two directories in different Regions. For more
        *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        *          <note>
        *             <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
        *                DescribeConnectionAliases</a> to make sure that the current state of the
        *             connection alias is <code>CREATED</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DisassociateConnectionAliasCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DisassociateConnectionAliasCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DisassociateConnectionAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateConnectionAliasCommandInput} for command's `input` shape.
        * @see {@link DisassociateConnectionAliasCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DisassociateConnectionAliasCommand extends $Command<DisassociateConnectionAliasCommandInput, DisassociateConnectionAliasCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DisassociateConnectionAliasCommandInput;
            constructor(input: DisassociateConnectionAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateConnectionAliasCommandInput, DisassociateConnectionAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DisassociateIpGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateIpGroupsRequest, DisassociateIpGroupsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface DisassociateIpGroupsCommandInput extends DisassociateIpGroupsRequest {
    }
    export interface DisassociateIpGroupsCommandOutput extends DisassociateIpGroupsResult, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified IP access control group from the specified directory.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, DisassociateIpGroupsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, DisassociateIpGroupsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new DisassociateIpGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateIpGroupsCommandInput} for command's `input` shape.
        * @see {@link DisassociateIpGroupsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class DisassociateIpGroupsCommand extends $Command<DisassociateIpGroupsCommandInput, DisassociateIpGroupsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: DisassociateIpGroupsCommandInput;
            constructor(input: DisassociateIpGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateIpGroupsCommandInput, DisassociateIpGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ImportClientBrandingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ImportClientBrandingRequest, ImportClientBrandingResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ImportClientBrandingCommandInput extends ImportClientBrandingRequest {
    }
    export interface ImportClientBrandingCommandOutput extends ImportClientBrandingResult, __MetadataBearer {
    }
    /**
        * <p>Imports client branding. Client branding allows you to customize your WorkSpace's client
        *          login portal. You can tailor your login portal company logo, the support email address,
        *          support link, link to reset password, and a custom message for users trying to sign
        *          in.</p>
        *          <p>After you import client branding, the default branding experience for the specified
        *          platform type is replaced with the imported experience</p>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>You must specify at least one platform type when importing client
        *                   branding.</p>
        *                </li>
        *                <li>
        *                   <p>You can import up to 6 MB of data with each request. If your request exceeds
        *                   this limit, you can import client branding for different platform types using
        *                   separate requests.</p>
        *                </li>
        *                <li>
        *                   <p>In each platform type, the <code>SupportEmail</code> and
        *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify
        *                   only one parameter for each platform type, but not both.</p>
        *                </li>
        *                <li>
        *                   <p>Imported data can take up to a minute to appear in the WorkSpaces
        *                   client.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ImportClientBrandingCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ImportClientBrandingCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ImportClientBrandingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportClientBrandingCommandInput} for command's `input` shape.
        * @see {@link ImportClientBrandingCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ImportClientBrandingCommand extends $Command<ImportClientBrandingCommandInput, ImportClientBrandingCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ImportClientBrandingCommandInput;
            constructor(input: ImportClientBrandingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportClientBrandingCommandInput, ImportClientBrandingCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ImportWorkspaceImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ImportWorkspaceImageRequest, ImportWorkspaceImageResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ImportWorkspaceImageCommandInput extends ImportWorkspaceImageRequest {
    }
    export interface ImportWorkspaceImageCommandOutput extends ImportWorkspaceImageResult, __MetadataBearer {
    }
    /**
        * <p>Imports the specified Windows 10 Bring Your Own License (BYOL) image into Amazon
        *          WorkSpaces. The image must be an already licensed Amazon EC2 image that is in your Amazon Web Services account, and you must own the image. For more information about creating BYOL
        *          images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html"> Bring Your Own Windows
        *             Desktop Licenses</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ImportWorkspaceImageCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ImportWorkspaceImageCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ImportWorkspaceImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportWorkspaceImageCommandInput} for command's `input` shape.
        * @see {@link ImportWorkspaceImageCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ImportWorkspaceImageCommand extends $Command<ImportWorkspaceImageCommandInput, ImportWorkspaceImageCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ImportWorkspaceImageCommandInput;
            constructor(input: ImportWorkspaceImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportWorkspaceImageCommandInput, ImportWorkspaceImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ListAvailableManagementCidrRangesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAvailableManagementCidrRangesRequest, ListAvailableManagementCidrRangesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ListAvailableManagementCidrRangesCommandInput extends ListAvailableManagementCidrRangesRequest {
    }
    export interface ListAvailableManagementCidrRangesCommandOutput extends ListAvailableManagementCidrRangesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of IP address ranges, specified as IPv4 CIDR blocks, that you can use
        *          for the network management interface when you enable Bring Your Own License (BYOL). </p>
        *          <p>This operation can be run only by Amazon Web Services accounts that are enabled for BYOL.
        *          If your account isn't enabled for BYOL, you'll receive an
        *             <code>AccessDeniedException</code> error.</p>
        *          <p>The management network interface is connected to a secure Amazon WorkSpaces management
        *          network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces
        *          clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ListAvailableManagementCidrRangesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ListAvailableManagementCidrRangesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ListAvailableManagementCidrRangesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAvailableManagementCidrRangesCommandInput} for command's `input` shape.
        * @see {@link ListAvailableManagementCidrRangesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ListAvailableManagementCidrRangesCommand extends $Command<ListAvailableManagementCidrRangesCommandInput, ListAvailableManagementCidrRangesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ListAvailableManagementCidrRangesCommandInput;
            constructor(input: ListAvailableManagementCidrRangesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAvailableManagementCidrRangesCommandInput, ListAvailableManagementCidrRangesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/MigrateWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MigrateWorkspaceRequest, MigrateWorkspaceResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface MigrateWorkspaceCommandInput extends MigrateWorkspaceRequest {
    }
    export interface MigrateWorkspaceCommandOutput extends MigrateWorkspaceResult, __MetadataBearer {
    }
    /**
        * <p>Migrates a WorkSpace from one operating system or bundle type to another, while
        *          retaining the data on the user volume.</p>
        *          <p>The migration process recreates the WorkSpace by using a new root volume from the target
        *          bundle image and the user volume from the last available snapshot of the original
        *          WorkSpace. During migration, the original <code>D:\Users\%USERNAME%</code> user profile
        *          folder is renamed to <code>D:\Users\%USERNAME%MMddyyTHHmmss%.NotMigrated</code>. A new
        *             <code>D:\Users\%USERNAME%\</code> folder is generated by the new OS. Certain files in
        *          the old user profile are moved to the new user profile.</p>
        *          <p>For available migration scenarios, details about what happens during migration, and best
        *          practices, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/migrate-workspaces.html">Migrate a
        *          WorkSpace</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, MigrateWorkspaceCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, MigrateWorkspaceCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new MigrateWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MigrateWorkspaceCommandInput} for command's `input` shape.
        * @see {@link MigrateWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class MigrateWorkspaceCommand extends $Command<MigrateWorkspaceCommandInput, MigrateWorkspaceCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: MigrateWorkspaceCommandInput;
            constructor(input: MigrateWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MigrateWorkspaceCommandInput, MigrateWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyAccountRequest, ModifyAccountResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ModifyAccountCommandInput extends ModifyAccountRequest {
    }
    export interface ModifyAccountCommandOutput extends ModifyAccountResult, __MetadataBearer {
    }
    /**
        * <p>Modifies the configuration of Bring Your Own License (BYOL) for the specified
        *          account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ModifyAccountCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ModifyAccountCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ModifyAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyAccountCommandInput} for command's `input` shape.
        * @see {@link ModifyAccountCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ModifyAccountCommand extends $Command<ModifyAccountCommandInput, ModifyAccountCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ModifyAccountCommandInput;
            constructor(input: ModifyAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyAccountCommandInput, ModifyAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyClientPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyClientPropertiesRequest, ModifyClientPropertiesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ModifyClientPropertiesCommandInput extends ModifyClientPropertiesRequest {
    }
    export interface ModifyClientPropertiesCommandOutput extends ModifyClientPropertiesResult, __MetadataBearer {
    }
    /**
        * <p>Modifies the properties of the specified Amazon WorkSpaces clients.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ModifyClientPropertiesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ModifyClientPropertiesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ModifyClientPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyClientPropertiesCommandInput} for command's `input` shape.
        * @see {@link ModifyClientPropertiesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ModifyClientPropertiesCommand extends $Command<ModifyClientPropertiesCommandInput, ModifyClientPropertiesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ModifyClientPropertiesCommandInput;
            constructor(input: ModifyClientPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyClientPropertiesCommandInput, ModifyClientPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifySelfservicePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifySelfservicePermissionsRequest, ModifySelfservicePermissionsResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ModifySelfservicePermissionsCommandInput extends ModifySelfservicePermissionsRequest {
    }
    export interface ModifySelfservicePermissionsCommandOutput extends ModifySelfservicePermissionsResult, __MetadataBearer {
    }
    /**
        * <p>Modifies the self-service WorkSpace management capabilities for your users. For more
        *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ModifySelfservicePermissionsCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ModifySelfservicePermissionsCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ModifySelfservicePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifySelfservicePermissionsCommandInput} for command's `input` shape.
        * @see {@link ModifySelfservicePermissionsCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ModifySelfservicePermissionsCommand extends $Command<ModifySelfservicePermissionsCommandInput, ModifySelfservicePermissionsCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ModifySelfservicePermissionsCommandInput;
            constructor(input: ModifySelfservicePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifySelfservicePermissionsCommandInput, ModifySelfservicePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceAccessPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyWorkspaceAccessPropertiesRequest, ModifyWorkspaceAccessPropertiesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ModifyWorkspaceAccessPropertiesCommandInput extends ModifyWorkspaceAccessPropertiesRequest {
    }
    export interface ModifyWorkspaceAccessPropertiesCommandOutput extends ModifyWorkspaceAccessPropertiesResult, __MetadataBearer {
    }
    /**
        * <p>Specifies which devices and operating systems users can use to access their WorkSpaces.
        *          For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html#control-device-access">
        *             Control Device Access</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ModifyWorkspaceAccessPropertiesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ModifyWorkspaceAccessPropertiesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ModifyWorkspaceAccessPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyWorkspaceAccessPropertiesCommandInput} for command's `input` shape.
        * @see {@link ModifyWorkspaceAccessPropertiesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ModifyWorkspaceAccessPropertiesCommand extends $Command<ModifyWorkspaceAccessPropertiesCommandInput, ModifyWorkspaceAccessPropertiesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ModifyWorkspaceAccessPropertiesCommandInput;
            constructor(input: ModifyWorkspaceAccessPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyWorkspaceAccessPropertiesCommandInput, ModifyWorkspaceAccessPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceCreationPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyWorkspaceCreationPropertiesRequest, ModifyWorkspaceCreationPropertiesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ModifyWorkspaceCreationPropertiesCommandInput extends ModifyWorkspaceCreationPropertiesRequest {
    }
    export interface ModifyWorkspaceCreationPropertiesCommandOutput extends ModifyWorkspaceCreationPropertiesResult, __MetadataBearer {
    }
    /**
        * <p>Modify the default properties used to create WorkSpaces.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ModifyWorkspaceCreationPropertiesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ModifyWorkspaceCreationPropertiesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ModifyWorkspaceCreationPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyWorkspaceCreationPropertiesCommandInput} for command's `input` shape.
        * @see {@link ModifyWorkspaceCreationPropertiesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ModifyWorkspaceCreationPropertiesCommand extends $Command<ModifyWorkspaceCreationPropertiesCommandInput, ModifyWorkspaceCreationPropertiesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ModifyWorkspaceCreationPropertiesCommandInput;
            constructor(input: ModifyWorkspaceCreationPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyWorkspaceCreationPropertiesCommandInput, ModifyWorkspaceCreationPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspacePropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyWorkspacePropertiesRequest, ModifyWorkspacePropertiesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ModifyWorkspacePropertiesCommandInput extends ModifyWorkspacePropertiesRequest {
    }
    export interface ModifyWorkspacePropertiesCommandOutput extends ModifyWorkspacePropertiesResult, __MetadataBearer {
    }
    /**
        * <p>Modifies the specified WorkSpace properties. For important information about how to
        *          modify the size of the root and user volumes, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html"> Modify a WorkSpace</a>.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ModifyWorkspacePropertiesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ModifyWorkspacePropertiesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ModifyWorkspacePropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyWorkspacePropertiesCommandInput} for command's `input` shape.
        * @see {@link ModifyWorkspacePropertiesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ModifyWorkspacePropertiesCommand extends $Command<ModifyWorkspacePropertiesCommandInput, ModifyWorkspacePropertiesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ModifyWorkspacePropertiesCommandInput;
            constructor(input: ModifyWorkspacePropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyWorkspacePropertiesCommandInput, ModifyWorkspacePropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyWorkspaceStateRequest, ModifyWorkspaceStateResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface ModifyWorkspaceStateCommandInput extends ModifyWorkspaceStateRequest {
    }
    export interface ModifyWorkspaceStateCommandOutput extends ModifyWorkspaceStateResult, __MetadataBearer {
    }
    /**
        * <p>Sets the state of the specified WorkSpace.</p>
        *          <p>To maintain a WorkSpace without being interrupted, set the WorkSpace state to
        *             <code>ADMIN_MAINTENANCE</code>. WorkSpaces in this state do not respond to requests to
        *          reboot, stop, start, rebuild, or restore. An AutoStop WorkSpace in this state is not
        *          stopped. Users cannot log into a WorkSpace in the <code>ADMIN_MAINTENANCE</code>
        *          state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, ModifyWorkspaceStateCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, ModifyWorkspaceStateCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new ModifyWorkspaceStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyWorkspaceStateCommandInput} for command's `input` shape.
        * @see {@link ModifyWorkspaceStateCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class ModifyWorkspaceStateCommand extends $Command<ModifyWorkspaceStateCommandInput, ModifyWorkspaceStateCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: ModifyWorkspaceStateCommandInput;
            constructor(input: ModifyWorkspaceStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyWorkspaceStateCommandInput, ModifyWorkspaceStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RebootWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RebootWorkspacesRequest, RebootWorkspacesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface RebootWorkspacesCommandInput extends RebootWorkspacesRequest {
    }
    export interface RebootWorkspacesCommandOutput extends RebootWorkspacesResult, __MetadataBearer {
    }
    /**
        * <p>Reboots the specified WorkSpaces.</p>
        *          <p>You cannot reboot a WorkSpace unless its state is <code>AVAILABLE</code> or
        *             <code>UNHEALTHY</code>.</p>
        *          <p>This operation is asynchronous and returns before the WorkSpaces have rebooted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, RebootWorkspacesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, RebootWorkspacesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new RebootWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootWorkspacesCommandInput} for command's `input` shape.
        * @see {@link RebootWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class RebootWorkspacesCommand extends $Command<RebootWorkspacesCommandInput, RebootWorkspacesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: RebootWorkspacesCommandInput;
            constructor(input: RebootWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootWorkspacesCommandInput, RebootWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RebuildWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RebuildWorkspacesRequest, RebuildWorkspacesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface RebuildWorkspacesCommandInput extends RebuildWorkspacesRequest {
    }
    export interface RebuildWorkspacesCommandOutput extends RebuildWorkspacesResult, __MetadataBearer {
    }
    /**
        * <p>Rebuilds the specified WorkSpace.</p>
        *          <p>You cannot rebuild a WorkSpace unless its state is <code>AVAILABLE</code>,
        *             <code>ERROR</code>, <code>UNHEALTHY</code>, <code>STOPPED</code>, or
        *             <code>REBOOTING</code>.</p>
        *          <p>Rebuilding a WorkSpace is a potentially destructive action that can result in the loss
        *          of data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/reset-workspace.html">Rebuild a
        *          WorkSpace</a>.</p>
        *          <p>This operation is asynchronous and returns before the WorkSpaces have been completely
        *          rebuilt.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, RebuildWorkspacesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, RebuildWorkspacesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new RebuildWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebuildWorkspacesCommandInput} for command's `input` shape.
        * @see {@link RebuildWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class RebuildWorkspacesCommand extends $Command<RebuildWorkspacesCommandInput, RebuildWorkspacesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: RebuildWorkspacesCommandInput;
            constructor(input: RebuildWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebuildWorkspacesCommandInput, RebuildWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RegisterWorkspaceDirectoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterWorkspaceDirectoryRequest, RegisterWorkspaceDirectoryResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface RegisterWorkspaceDirectoryCommandInput extends RegisterWorkspaceDirectoryRequest {
    }
    export interface RegisterWorkspaceDirectoryCommandOutput extends RegisterWorkspaceDirectoryResult, __MetadataBearer {
    }
    /**
        * <p>Registers the specified directory. This operation is asynchronous and returns before the
        *          WorkSpace directory is registered. If this is the first time you are registering a
        *          directory, you will need to create the workspaces_DefaultRole role before you can register
        *          a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role">
        *             Creating the workspaces_DefaultRole Role</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, RegisterWorkspaceDirectoryCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, RegisterWorkspaceDirectoryCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new RegisterWorkspaceDirectoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterWorkspaceDirectoryCommandInput} for command's `input` shape.
        * @see {@link RegisterWorkspaceDirectoryCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class RegisterWorkspaceDirectoryCommand extends $Command<RegisterWorkspaceDirectoryCommandInput, RegisterWorkspaceDirectoryCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: RegisterWorkspaceDirectoryCommandInput;
            constructor(input: RegisterWorkspaceDirectoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterWorkspaceDirectoryCommandInput, RegisterWorkspaceDirectoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RestoreWorkspaceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreWorkspaceRequest, RestoreWorkspaceResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface RestoreWorkspaceCommandInput extends RestoreWorkspaceRequest {
    }
    export interface RestoreWorkspaceCommandOutput extends RestoreWorkspaceResult, __MetadataBearer {
    }
    /**
        * <p>Restores the specified WorkSpace to its last known healthy state.</p>
        *          <p>You cannot restore a WorkSpace unless its state is <code> AVAILABLE</code>,
        *             <code>ERROR</code>, <code>UNHEALTHY</code>, or <code>STOPPED</code>.</p>
        *          <p>Restoring a WorkSpace is a potentially destructive action that can result in the loss of
        *          data. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/restore-workspace.html">Restore a
        *          WorkSpace</a>.</p>
        *          <p>This operation is asynchronous and returns before the WorkSpace is completely
        *          restored.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, RestoreWorkspaceCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, RestoreWorkspaceCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new RestoreWorkspaceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreWorkspaceCommandInput} for command's `input` shape.
        * @see {@link RestoreWorkspaceCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class RestoreWorkspaceCommand extends $Command<RestoreWorkspaceCommandInput, RestoreWorkspaceCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: RestoreWorkspaceCommandInput;
            constructor(input: RestoreWorkspaceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreWorkspaceCommandInput, RestoreWorkspaceCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RevokeIpRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RevokeIpRulesRequest, RevokeIpRulesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface RevokeIpRulesCommandInput extends RevokeIpRulesRequest {
    }
    export interface RevokeIpRulesCommandOutput extends RevokeIpRulesResult, __MetadataBearer {
    }
    /**
        * <p>Removes one or more rules from the specified IP access control group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, RevokeIpRulesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, RevokeIpRulesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new RevokeIpRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RevokeIpRulesCommandInput} for command's `input` shape.
        * @see {@link RevokeIpRulesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class RevokeIpRulesCommand extends $Command<RevokeIpRulesCommandInput, RevokeIpRulesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: RevokeIpRulesCommandInput;
            constructor(input: RevokeIpRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RevokeIpRulesCommandInput, RevokeIpRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/StartWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartWorkspacesRequest, StartWorkspacesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface StartWorkspacesCommandInput extends StartWorkspacesRequest {
    }
    export interface StartWorkspacesCommandOutput extends StartWorkspacesResult, __MetadataBearer {
    }
    /**
        * <p>Starts the specified WorkSpaces.</p>
        *          <p>You cannot start a WorkSpace unless it has a running mode of <code>AutoStop</code> and a
        *          state of <code>STOPPED</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, StartWorkspacesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, StartWorkspacesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new StartWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartWorkspacesCommandInput} for command's `input` shape.
        * @see {@link StartWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class StartWorkspacesCommand extends $Command<StartWorkspacesCommandInput, StartWorkspacesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: StartWorkspacesCommandInput;
            constructor(input: StartWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartWorkspacesCommandInput, StartWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/StopWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopWorkspacesRequest, StopWorkspacesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface StopWorkspacesCommandInput extends StopWorkspacesRequest {
    }
    export interface StopWorkspacesCommandOutput extends StopWorkspacesResult, __MetadataBearer {
    }
    /**
        * <p> Stops the specified WorkSpaces.</p>
        *          <p>You cannot stop a WorkSpace unless it has a running mode of <code>AutoStop</code> and a
        *          state of <code>AVAILABLE</code>, <code>IMPAIRED</code>, <code>UNHEALTHY</code>, or
        *             <code>ERROR</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, StopWorkspacesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, StopWorkspacesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new StopWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopWorkspacesCommandInput} for command's `input` shape.
        * @see {@link StopWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class StopWorkspacesCommand extends $Command<StopWorkspacesCommandInput, StopWorkspacesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: StopWorkspacesCommandInput;
            constructor(input: StopWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopWorkspacesCommandInput, StopWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/TerminateWorkspacesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TerminateWorkspacesRequest, TerminateWorkspacesResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface TerminateWorkspacesCommandInput extends TerminateWorkspacesRequest {
    }
    export interface TerminateWorkspacesCommandOutput extends TerminateWorkspacesResult, __MetadataBearer {
    }
    /**
        * <p>Terminates the specified WorkSpaces.</p>
        *          <important>
        *             <p>Terminating a WorkSpace is a permanent action and cannot be undone. The user's data
        *             is destroyed. If you need to archive any user data, contact Amazon Web Services Support before
        *             terminating the WorkSpace.</p>
        *          </important>
        *          <p>You can terminate a WorkSpace that is in any state except <code>SUSPENDED</code>.</p>
        *          <p>This operation is asynchronous and returns before the WorkSpaces have been completely
        *          terminated. After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned
        *          only briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely
        *          returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using
        *             <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html">
        *             DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace has
        *          been successfully terminated.</p>
        *          <note>
        *             <p>Simple AD and AD Connector are made available to you free of charge to use with
        *             WorkSpaces. If there are no WorkSpaces being used with your Simple AD or AD Connector
        *             directory for 30 consecutive days, this directory will be automatically deregistered for
        *             use with Amazon WorkSpaces, and you will be charged for this directory as per the <a href="http://aws.amazon.com/directoryservice/pricing/">Directory Service pricing
        *                terms</a>.</p>
        *             <p>To delete empty directories, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/delete-workspaces-directory.html"> Delete the
        *                Directory for Your WorkSpaces</a>. If you delete your Simple AD or AD Connector
        *             directory, you can always create a new one when you want to start using WorkSpaces
        *             again.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, TerminateWorkspacesCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, TerminateWorkspacesCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new TerminateWorkspacesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TerminateWorkspacesCommandInput} for command's `input` shape.
        * @see {@link TerminateWorkspacesCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class TerminateWorkspacesCommand extends $Command<TerminateWorkspacesCommandInput, TerminateWorkspacesCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: TerminateWorkspacesCommandInput;
            constructor(input: TerminateWorkspacesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TerminateWorkspacesCommandInput, TerminateWorkspacesCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateConnectClientAddInCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConnectClientAddInRequest, UpdateConnectClientAddInResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface UpdateConnectClientAddInCommandInput extends UpdateConnectClientAddInRequest {
    }
    export interface UpdateConnectClientAddInCommandOutput extends UpdateConnectClientAddInResult, __MetadataBearer {
    }
    /**
        * <p>Updates a Amazon Connect client add-in. Use this action to update the name and
        *          endpoint URL of a Amazon Connect client add-in.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, UpdateConnectClientAddInCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, UpdateConnectClientAddInCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new UpdateConnectClientAddInCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectClientAddInCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectClientAddInCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class UpdateConnectClientAddInCommand extends $Command<UpdateConnectClientAddInCommandInput, UpdateConnectClientAddInCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: UpdateConnectClientAddInCommandInput;
            constructor(input: UpdateConnectClientAddInCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectClientAddInCommandInput, UpdateConnectClientAddInCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateConnectionAliasPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateConnectionAliasPermissionRequest, UpdateConnectionAliasPermissionResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface UpdateConnectionAliasPermissionCommandInput extends UpdateConnectionAliasPermissionRequest {
    }
    export interface UpdateConnectionAliasPermissionCommandOutput extends UpdateConnectionAliasPermissionResult, __MetadataBearer {
    }
    /**
        * <p>Shares or unshares a connection alias with one account by specifying whether that
        *          account has permission to associate the connection alias with a directory. If the
        *          association permission is granted, the connection alias is shared with that account. If the
        *          association permission is revoked, the connection alias is unshared with the account. For
        *          more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>Before performing this operation, call <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeConnectionAliases.html">
        *                      DescribeConnectionAliases</a> to make sure that the current state of the
        *                   connection alias is <code>CREATED</code>.</p>
        *                </li>
        *                <li>
        *                   <p>To delete a connection alias that has been shared, the shared account must
        *                   first disassociate the connection alias from any directories it has been
        *                   associated with. Then you must unshare the connection alias from the account it
        *                   has been shared with. You can delete a connection alias only after it is no longer
        *                   shared with any accounts or associated with any directories.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, UpdateConnectionAliasPermissionCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, UpdateConnectionAliasPermissionCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new UpdateConnectionAliasPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectionAliasPermissionCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectionAliasPermissionCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class UpdateConnectionAliasPermissionCommand extends $Command<UpdateConnectionAliasPermissionCommandInput, UpdateConnectionAliasPermissionCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: UpdateConnectionAliasPermissionCommandInput;
            constructor(input: UpdateConnectionAliasPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectionAliasPermissionCommandInput, UpdateConnectionAliasPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateRulesOfIpGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateRulesOfIpGroupRequest, UpdateRulesOfIpGroupResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface UpdateRulesOfIpGroupCommandInput extends UpdateRulesOfIpGroupRequest {
    }
    export interface UpdateRulesOfIpGroupCommandOutput extends UpdateRulesOfIpGroupResult, __MetadataBearer {
    }
    /**
        * <p>Replaces the current rules of the specified IP access control group with the specified
        *          rules.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, UpdateRulesOfIpGroupCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, UpdateRulesOfIpGroupCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new UpdateRulesOfIpGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRulesOfIpGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateRulesOfIpGroupCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class UpdateRulesOfIpGroupCommand extends $Command<UpdateRulesOfIpGroupCommandInput, UpdateRulesOfIpGroupCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: UpdateRulesOfIpGroupCommandInput;
            constructor(input: UpdateRulesOfIpGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRulesOfIpGroupCommandInput, UpdateRulesOfIpGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateWorkspaceBundleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWorkspaceBundleRequest, UpdateWorkspaceBundleResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface UpdateWorkspaceBundleCommandInput extends UpdateWorkspaceBundleRequest {
    }
    export interface UpdateWorkspaceBundleCommandOutput extends UpdateWorkspaceBundleResult, __MetadataBearer {
    }
    /**
        * <p>Updates a WorkSpace bundle with a new image. For more information about updating WorkSpace bundles, see
        *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-custom-bundle.html">
        *             Update a Custom WorkSpaces Bundle</a>.</p>
        *
        *          <important>
        *             <p>Existing WorkSpaces aren't automatically updated when you update the bundle that they're
        *             based on. To update existing WorkSpaces that are based on a bundle that you've updated, you
        *             must either rebuild the WorkSpaces or delete and recreate them.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, UpdateWorkspaceBundleCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, UpdateWorkspaceBundleCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new UpdateWorkspaceBundleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkspaceBundleCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkspaceBundleCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class UpdateWorkspaceBundleCommand extends $Command<UpdateWorkspaceBundleCommandInput, UpdateWorkspaceBundleCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: UpdateWorkspaceBundleCommandInput;
            constructor(input: UpdateWorkspaceBundleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkspaceBundleCommandInput, UpdateWorkspaceBundleCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateWorkspaceImagePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWorkspaceImagePermissionRequest, UpdateWorkspaceImagePermissionResult } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient";
    export interface UpdateWorkspaceImagePermissionCommandInput extends UpdateWorkspaceImagePermissionRequest {
    }
    export interface UpdateWorkspaceImagePermissionCommandOutput extends UpdateWorkspaceImagePermissionResult, __MetadataBearer {
    }
    /**
        * <p>Shares or unshares an image with one account in the same Amazon Web Services Region by
        *          specifying whether that account has permission to copy the image. If the copy image
        *          permission is granted, the image is shared with that account. If the copy image permission
        *          is revoked, the image is unshared with the account.</p>
        *          <p>After an image has been shared, the recipient account can copy the image to other
        *          Regions as needed.</p>
        *          <p>In the China (Ningxia) Region, you can copy images only within the same Region.</p>
        *          <p>In Amazon Web Services GovCloud (US), to copy images to and from other Regions, contact Amazon Web Services Support.</p>
        *          <p>For more information about sharing images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html"> Share or Unshare a Custom
        *             WorkSpaces Image</a>.</p>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>To delete an image that has been shared, you must unshare the image before you
        *                   delete it.</p>
        *                </li>
        *                <li>
        *                   <p>Sharing Bring Your Own License (BYOL) images across Amazon Web Services accounts
        *                   isn't supported at this time in Amazon Web Services GovCloud (US). To share BYOL images
        *                   across accounts in Amazon Web Services GovCloud (US), contact Amazon Web Services Support.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WorkSpacesClient, UpdateWorkspaceImagePermissionCommand } from "@aws-sdk/client-workspaces"; // ES Modules import
        * // const { WorkSpacesClient, UpdateWorkspaceImagePermissionCommand } = require("@aws-sdk/client-workspaces"); // CommonJS import
        * const client = new WorkSpacesClient(config);
        * const command = new UpdateWorkspaceImagePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorkspaceImagePermissionCommandInput} for command's `input` shape.
        * @see {@link UpdateWorkspaceImagePermissionCommandOutput} for command's `response` shape.
        * @see {@link WorkSpacesClientResolvedConfig | config} for WorkSpacesClient's `config` shape.
        *
        */
    export class UpdateWorkspaceImagePermissionCommand extends $Command<UpdateWorkspaceImagePermissionCommandInput, UpdateWorkspaceImagePermissionCommandOutput, WorkSpacesClientResolvedConfig> {
            readonly input: UpdateWorkspaceImagePermissionCommandInput;
            constructor(input: UpdateWorkspaceImagePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WorkSpacesClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorkspaceImagePermissionCommandInput, UpdateWorkspaceImagePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/WorkSpacesClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateConnectionAliasCommandInput, AssociateConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AssociateConnectionAliasCommand";
    import { AssociateIpGroupsCommandInput, AssociateIpGroupsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AssociateIpGroupsCommand";
    import { AuthorizeIpRulesCommandInput, AuthorizeIpRulesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/AuthorizeIpRulesCommand";
    import { CopyWorkspaceImageCommandInput, CopyWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CopyWorkspaceImageCommand";
    import { CreateConnectClientAddInCommandInput, CreateConnectClientAddInCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateConnectClientAddInCommand";
    import { CreateConnectionAliasCommandInput, CreateConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateConnectionAliasCommand";
    import { CreateIpGroupCommandInput, CreateIpGroupCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateIpGroupCommand";
    import { CreateTagsCommandInput, CreateTagsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateTagsCommand";
    import { CreateUpdatedWorkspaceImageCommandInput, CreateUpdatedWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateUpdatedWorkspaceImageCommand";
    import { CreateWorkspaceBundleCommandInput, CreateWorkspaceBundleCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateWorkspaceBundleCommand";
    import { CreateWorkspacesCommandInput, CreateWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/CreateWorkspacesCommand";
    import { DeleteClientBrandingCommandInput, DeleteClientBrandingCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteClientBrandingCommand";
    import { DeleteConnectClientAddInCommandInput, DeleteConnectClientAddInCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteConnectClientAddInCommand";
    import { DeleteConnectionAliasCommandInput, DeleteConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteConnectionAliasCommand";
    import { DeleteIpGroupCommandInput, DeleteIpGroupCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteIpGroupCommand";
    import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteTagsCommand";
    import { DeleteWorkspaceBundleCommandInput, DeleteWorkspaceBundleCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteWorkspaceBundleCommand";
    import { DeleteWorkspaceImageCommandInput, DeleteWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeleteWorkspaceImageCommand";
    import { DeregisterWorkspaceDirectoryCommandInput, DeregisterWorkspaceDirectoryCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DeregisterWorkspaceDirectoryCommand";
    import { DescribeAccountCommandInput, DescribeAccountCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeAccountCommand";
    import { DescribeAccountModificationsCommandInput, DescribeAccountModificationsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeAccountModificationsCommand";
    import { DescribeClientBrandingCommandInput, DescribeClientBrandingCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeClientBrandingCommand";
    import { DescribeClientPropertiesCommandInput, DescribeClientPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeClientPropertiesCommand";
    import { DescribeConnectClientAddInsCommandInput, DescribeConnectClientAddInsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectClientAddInsCommand";
    import { DescribeConnectionAliasesCommandInput, DescribeConnectionAliasesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectionAliasesCommand";
    import { DescribeConnectionAliasPermissionsCommandInput, DescribeConnectionAliasPermissionsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeConnectionAliasPermissionsCommand";
    import { DescribeIpGroupsCommandInput, DescribeIpGroupsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeIpGroupsCommand";
    import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeTagsCommand";
    import { DescribeWorkspaceBundlesCommandInput, DescribeWorkspaceBundlesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceBundlesCommand";
    import { DescribeWorkspaceDirectoriesCommandInput, DescribeWorkspaceDirectoriesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceDirectoriesCommand";
    import { DescribeWorkspaceImagePermissionsCommandInput, DescribeWorkspaceImagePermissionsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceImagePermissionsCommand";
    import { DescribeWorkspaceImagesCommandInput, DescribeWorkspaceImagesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceImagesCommand";
    import { DescribeWorkspacesCommandInput, DescribeWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspacesCommand";
    import { DescribeWorkspacesConnectionStatusCommandInput, DescribeWorkspacesConnectionStatusCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspacesConnectionStatusCommand";
    import { DescribeWorkspaceSnapshotsCommandInput, DescribeWorkspaceSnapshotsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DescribeWorkspaceSnapshotsCommand";
    import { DisassociateConnectionAliasCommandInput, DisassociateConnectionAliasCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DisassociateConnectionAliasCommand";
    import { DisassociateIpGroupsCommandInput, DisassociateIpGroupsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/DisassociateIpGroupsCommand";
    import { ImportClientBrandingCommandInput, ImportClientBrandingCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ImportClientBrandingCommand";
    import { ImportWorkspaceImageCommandInput, ImportWorkspaceImageCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ImportWorkspaceImageCommand";
    import { ListAvailableManagementCidrRangesCommandInput, ListAvailableManagementCidrRangesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ListAvailableManagementCidrRangesCommand";
    import { MigrateWorkspaceCommandInput, MigrateWorkspaceCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/MigrateWorkspaceCommand";
    import { ModifyAccountCommandInput, ModifyAccountCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyAccountCommand";
    import { ModifyClientPropertiesCommandInput, ModifyClientPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyClientPropertiesCommand";
    import { ModifySelfservicePermissionsCommandInput, ModifySelfservicePermissionsCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifySelfservicePermissionsCommand";
    import { ModifyWorkspaceAccessPropertiesCommandInput, ModifyWorkspaceAccessPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceAccessPropertiesCommand";
    import { ModifyWorkspaceCreationPropertiesCommandInput, ModifyWorkspaceCreationPropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceCreationPropertiesCommand";
    import { ModifyWorkspacePropertiesCommandInput, ModifyWorkspacePropertiesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspacePropertiesCommand";
    import { ModifyWorkspaceStateCommandInput, ModifyWorkspaceStateCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/ModifyWorkspaceStateCommand";
    import { RebootWorkspacesCommandInput, RebootWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RebootWorkspacesCommand";
    import { RebuildWorkspacesCommandInput, RebuildWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RebuildWorkspacesCommand";
    import { RegisterWorkspaceDirectoryCommandInput, RegisterWorkspaceDirectoryCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RegisterWorkspaceDirectoryCommand";
    import { RestoreWorkspaceCommandInput, RestoreWorkspaceCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RestoreWorkspaceCommand";
    import { RevokeIpRulesCommandInput, RevokeIpRulesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/RevokeIpRulesCommand";
    import { StartWorkspacesCommandInput, StartWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/StartWorkspacesCommand";
    import { StopWorkspacesCommandInput, StopWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/StopWorkspacesCommand";
    import { TerminateWorkspacesCommandInput, TerminateWorkspacesCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/TerminateWorkspacesCommand";
    import { UpdateConnectClientAddInCommandInput, UpdateConnectClientAddInCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateConnectClientAddInCommand";
    import { UpdateConnectionAliasPermissionCommandInput, UpdateConnectionAliasPermissionCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateConnectionAliasPermissionCommand";
    import { UpdateRulesOfIpGroupCommandInput, UpdateRulesOfIpGroupCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateRulesOfIpGroupCommand";
    import { UpdateWorkspaceBundleCommandInput, UpdateWorkspaceBundleCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateWorkspaceBundleCommand";
    import { UpdateWorkspaceImagePermissionCommandInput, UpdateWorkspaceImagePermissionCommandOutput } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/commands/UpdateWorkspaceImagePermissionCommand";
    export type ServiceInputTypes = AssociateConnectionAliasCommandInput | AssociateIpGroupsCommandInput | AuthorizeIpRulesCommandInput | CopyWorkspaceImageCommandInput | CreateConnectClientAddInCommandInput | CreateConnectionAliasCommandInput | CreateIpGroupCommandInput | CreateTagsCommandInput | CreateUpdatedWorkspaceImageCommandInput | CreateWorkspaceBundleCommandInput | CreateWorkspacesCommandInput | DeleteClientBrandingCommandInput | DeleteConnectClientAddInCommandInput | DeleteConnectionAliasCommandInput | DeleteIpGroupCommandInput | DeleteTagsCommandInput | DeleteWorkspaceBundleCommandInput | DeleteWorkspaceImageCommandInput | DeregisterWorkspaceDirectoryCommandInput | DescribeAccountCommandInput | DescribeAccountModificationsCommandInput | DescribeClientBrandingCommandInput | DescribeClientPropertiesCommandInput | DescribeConnectClientAddInsCommandInput | DescribeConnectionAliasPermissionsCommandInput | DescribeConnectionAliasesCommandInput | DescribeIpGroupsCommandInput | DescribeTagsCommandInput | DescribeWorkspaceBundlesCommandInput | DescribeWorkspaceDirectoriesCommandInput | DescribeWorkspaceImagePermissionsCommandInput | DescribeWorkspaceImagesCommandInput | DescribeWorkspaceSnapshotsCommandInput | DescribeWorkspacesCommandInput | DescribeWorkspacesConnectionStatusCommandInput | DisassociateConnectionAliasCommandInput | DisassociateIpGroupsCommandInput | ImportClientBrandingCommandInput | ImportWorkspaceImageCommandInput | ListAvailableManagementCidrRangesCommandInput | MigrateWorkspaceCommandInput | ModifyAccountCommandInput | ModifyClientPropertiesCommandInput | ModifySelfservicePermissionsCommandInput | ModifyWorkspaceAccessPropertiesCommandInput | ModifyWorkspaceCreationPropertiesCommandInput | ModifyWorkspacePropertiesCommandInput | ModifyWorkspaceStateCommandInput | RebootWorkspacesCommandInput | RebuildWorkspacesCommandInput | RegisterWorkspaceDirectoryCommandInput | RestoreWorkspaceCommandInput | RevokeIpRulesCommandInput | StartWorkspacesCommandInput | StopWorkspacesCommandInput | TerminateWorkspacesCommandInput | UpdateConnectClientAddInCommandInput | UpdateConnectionAliasPermissionCommandInput | UpdateRulesOfIpGroupCommandInput | UpdateWorkspaceBundleCommandInput | UpdateWorkspaceImagePermissionCommandInput;
    export type ServiceOutputTypes = AssociateConnectionAliasCommandOutput | AssociateIpGroupsCommandOutput | AuthorizeIpRulesCommandOutput | CopyWorkspaceImageCommandOutput | CreateConnectClientAddInCommandOutput | CreateConnectionAliasCommandOutput | CreateIpGroupCommandOutput | CreateTagsCommandOutput | CreateUpdatedWorkspaceImageCommandOutput | CreateWorkspaceBundleCommandOutput | CreateWorkspacesCommandOutput | DeleteClientBrandingCommandOutput | DeleteConnectClientAddInCommandOutput | DeleteConnectionAliasCommandOutput | DeleteIpGroupCommandOutput | DeleteTagsCommandOutput | DeleteWorkspaceBundleCommandOutput | DeleteWorkspaceImageCommandOutput | DeregisterWorkspaceDirectoryCommandOutput | DescribeAccountCommandOutput | DescribeAccountModificationsCommandOutput | DescribeClientBrandingCommandOutput | DescribeClientPropertiesCommandOutput | DescribeConnectClientAddInsCommandOutput | DescribeConnectionAliasPermissionsCommandOutput | DescribeConnectionAliasesCommandOutput | DescribeIpGroupsCommandOutput | DescribeTagsCommandOutput | DescribeWorkspaceBundlesCommandOutput | DescribeWorkspaceDirectoriesCommandOutput | DescribeWorkspaceImagePermissionsCommandOutput | DescribeWorkspaceImagesCommandOutput | DescribeWorkspaceSnapshotsCommandOutput | DescribeWorkspacesCommandOutput | DescribeWorkspacesConnectionStatusCommandOutput | DisassociateConnectionAliasCommandOutput | DisassociateIpGroupsCommandOutput | ImportClientBrandingCommandOutput | ImportWorkspaceImageCommandOutput | ListAvailableManagementCidrRangesCommandOutput | MigrateWorkspaceCommandOutput | ModifyAccountCommandOutput | ModifyClientPropertiesCommandOutput | ModifySelfservicePermissionsCommandOutput | ModifyWorkspaceAccessPropertiesCommandOutput | ModifyWorkspaceCreationPropertiesCommandOutput | ModifyWorkspacePropertiesCommandOutput | ModifyWorkspaceStateCommandOutput | RebootWorkspacesCommandOutput | RebuildWorkspacesCommandOutput | RegisterWorkspaceDirectoryCommandOutput | RestoreWorkspaceCommandOutput | RevokeIpRulesCommandOutput | StartWorkspacesCommandOutput | StopWorkspacesCommandOutput | TerminateWorkspacesCommandOutput | UpdateConnectClientAddInCommandOutput | UpdateConnectionAliasPermissionCommandOutput | UpdateRulesOfIpGroupCommandOutput | UpdateWorkspaceBundleCommandOutput | UpdateWorkspaceImagePermissionCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type WorkSpacesClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of WorkSpacesClient class constructor that set the region, credentials and other options.
        */
    export interface WorkSpacesClientConfig extends WorkSpacesClientConfigType {
    }
    type WorkSpacesClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of WorkSpacesClient class. This is resolved and normalized from the {@link WorkSpacesClientConfig | constructor configuration interface}.
        */
    export interface WorkSpacesClientResolvedConfig extends WorkSpacesClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon WorkSpaces Service</fullname>
        *          <p>Amazon WorkSpaces enables you to provision virtual, cloud-based Microsoft Windows
        *          or Amazon Linux desktops for your users, known as <i>WorkSpaces</i>.
        *             WorkSpaces eliminates the need to procure and deploy hardware or install complex
        *          software. You can quickly add or remove users as your needs change. Users can access their
        *          virtual desktops from multiple devices or web browsers.</p>
        *          <p>This API Reference provides detailed information about the actions, data types,
        *          parameters, and errors of the WorkSpaces service. For more information about the
        *          supported Amazon Web Services Regions, endpoints, and service quotas of the Amazon WorkSpaces service, see <a href="https://docs.aws.amazon.com/general/latest/gr/wsp.html">WorkSpaces endpoints and quotas</a> in the <i>Amazon Web Services
        *             General Reference</i>.</p>
        *          <p>You can also manage your WorkSpaces resources using the WorkSpaces
        *          console, Command Line Interface (CLI), and SDKs. For more information about
        *          administering WorkSpaces, see the <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/">Amazon WorkSpaces Administration Guide</a>.
        *          For more information about using the Amazon WorkSpaces client application or web
        *          browser to access provisioned WorkSpaces, see the <a href="https://docs.aws.amazon.com/workspaces/latest/userguide/">Amazon WorkSpaces User Guide</a>. For more
        *          information about using the CLI to manage your WorkSpaces resources,
        *          see the <a href="https://docs.aws.amazon.com/cli/latest/reference/workspaces/index.html">WorkSpaces section of the CLI Reference</a>.</p>
        */
    export class WorkSpacesClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, WorkSpacesClientResolvedConfig> {
            /**
                * The resolved configuration of WorkSpacesClient class. This is resolved and normalized from the {@link WorkSpacesClientConfig | constructor configuration interface}.
                */
            readonly config: WorkSpacesClientResolvedConfig;
            constructor(configuration: WorkSpacesClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { WorkSpacesServiceException as __BaseException } from "@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/WorkSpacesServiceException";
    /**
        * <p>The user is not authorized to access a resource.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum AccessPropertyValue {
            ALLOW = "ALLOW",
            DENY = "DENY"
    }
    export enum DedicatedTenancySupportResultEnum {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    export enum DedicatedTenancyModificationStateEnum {
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            PENDING = "PENDING"
    }
    /**
        * <p>Describes a modification to the configuration of Bring Your Own License (BYOL) for the
        *          specified account. </p>
        */
    export interface AccountModification {
            /**
                * <p>The state of the modification to the configuration of BYOL.</p>
                */
            ModificationState?: DedicatedTenancyModificationStateEnum | string;
            /**
                * <p>The status of BYOL (whether BYOL is being enabled or disabled).</p>
                */
            DedicatedTenancySupport?: DedicatedTenancySupportResultEnum | string;
            /**
                * <p>The IP address range, specified as an IPv4 CIDR block, for the management network
                *          interface used for the account.</p>
                */
            DedicatedTenancyManagementCidrRange?: string;
            /**
                * <p>The timestamp when the modification of the BYOL configuration was started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The error code that is returned if the configuration of BYOL cannot be modified.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The text of the error message that is returned if the configuration of BYOL cannot be
                *          modified.</p>
                */
            ErrorMessage?: string;
    }
    export namespace AccountModification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountModification) => any;
    }
    export enum Application {
            Microsoft_Office_2016 = "Microsoft_Office_2016",
            Microsoft_Office_2019 = "Microsoft_Office_2019"
    }
    export interface AssociateConnectionAliasRequest {
            /**
                * <p>The identifier of the connection alias.</p>
                */
            AliasId: string | undefined;
            /**
                * <p>The identifier of the directory to associate the connection alias with.</p>
                */
            ResourceId: string | undefined;
    }
    export namespace AssociateConnectionAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateConnectionAliasRequest) => any;
    }
    export interface AssociateConnectionAliasResult {
            /**
                * <p>The identifier of the connection alias association. You use the connection identifier in
                *          the DNS TXT record when you're configuring your DNS routing policies. </p>
                */
            ConnectionIdentifier?: string;
    }
    export namespace AssociateConnectionAliasResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateConnectionAliasResult) => any;
    }
    /**
        * <p>One or more parameter values are not valid.</p>
        */
    export class InvalidParameterValuesException extends __BaseException {
            readonly name: "InvalidParameterValuesException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterValuesException, __BaseException>);
    }
    /**
        * <p>The state of the resource is not valid for this operation.</p>
        */
    export class InvalidResourceStateException extends __BaseException {
            readonly name: "InvalidResourceStateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResourceStateException, __BaseException>);
    }
    /**
        * <p>This operation is not supported.</p>
        */
    export class OperationNotSupportedException extends __BaseException {
            readonly name: "OperationNotSupportedException";
            readonly $fault: "client";
            /**
                * <p>The exception error reason.</p>
                */
            reason?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationNotSupportedException, __BaseException>);
    }
    /**
        * <p>The resource is associated with a directory.</p>
        */
    export class ResourceAssociatedException extends __BaseException {
            readonly name: "ResourceAssociatedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAssociatedException, __BaseException>);
    }
    /**
        * <p>The resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The ID of the resource that could not be found.</p>
                */
            ResourceId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface AssociateIpGroupsRequest {
            /**
                * <p>The identifier of the directory.</p>
                */
            DirectoryId: string | undefined;
            /**
                * <p>The identifiers of one or more IP access control groups.</p>
                */
            GroupIds: string[] | undefined;
    }
    export namespace AssociateIpGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateIpGroupsRequest) => any;
    }
    export interface AssociateIpGroupsResult {
    }
    export namespace AssociateIpGroupsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateIpGroupsResult) => any;
    }
    /**
        * <p>Your resource limits have been exceeded.</p>
        */
    export class ResourceLimitExceededException extends __BaseException {
            readonly name: "ResourceLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceLimitExceededException, __BaseException>);
    }
    export enum AssociationStatus {
            ASSOCIATED_WITH_OWNER_ACCOUNT = "ASSOCIATED_WITH_OWNER_ACCOUNT",
            ASSOCIATED_WITH_SHARED_ACCOUNT = "ASSOCIATED_WITH_SHARED_ACCOUNT",
            NOT_ASSOCIATED = "NOT_ASSOCIATED",
            PENDING_ASSOCIATION = "PENDING_ASSOCIATION",
            PENDING_DISASSOCIATION = "PENDING_DISASSOCIATION"
    }
    /**
        * <p>Describes a rule for an IP access control group.</p>
        */
    export interface IpRuleItem {
            /**
                * <p>The IP address range, in CIDR notation.</p>
                */
            ipRule?: string;
            /**
                * <p>The description.</p>
                */
            ruleDesc?: string;
    }
    export namespace IpRuleItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IpRuleItem) => any;
    }
    export interface AuthorizeIpRulesRequest {
            /**
                * <p>The identifier of the group.</p>
                */
            GroupId: string | undefined;
            /**
                * <p>The rules to add to the group.</p>
                */
            UserRules: IpRuleItem[] | undefined;
    }
    export namespace AuthorizeIpRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthorizeIpRulesRequest) => any;
    }
    export interface AuthorizeIpRulesResult {
    }
    export namespace AuthorizeIpRulesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthorizeIpRulesResult) => any;
    }
    export enum Compute {
            GRAPHICS = "GRAPHICS",
            GRAPHICSPRO = "GRAPHICSPRO",
            GRAPHICSPRO_G4DN = "GRAPHICSPRO_G4DN",
            GRAPHICS_G4DN = "GRAPHICS_G4DN",
            PERFORMANCE = "PERFORMANCE",
            POWER = "POWER",
            POWERPRO = "POWERPRO",
            STANDARD = "STANDARD",
            VALUE = "VALUE"
    }
    /**
        * <p>Describes the compute type of the bundle.</p>
        */
    export interface ComputeType {
            /**
                * <p>The compute type.</p>
                */
            Name?: Compute | string;
    }
    export namespace ComputeType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComputeType) => any;
    }
    /**
        * <p>Describes the root volume for a WorkSpace bundle.</p>
        */
    export interface RootStorage {
            /**
                * <p>The size of the root volume.</p>
                */
            Capacity?: string;
    }
    export namespace RootStorage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RootStorage) => any;
    }
    /**
        * <p>Describes the user volume for a WorkSpace bundle.</p>
        */
    export interface UserStorage {
            /**
                * <p>The size of the user volume.</p>
                */
            Capacity?: string;
    }
    export namespace UserStorage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserStorage) => any;
    }
    /**
        * <p>Describes a WorkSpace bundle.</p>
        */
    export interface WorkspaceBundle {
            /**
                * <p>The identifier of the bundle.</p>
                */
            BundleId?: string;
            /**
                * <p>The name of the bundle.</p>
                */
            Name?: string;
            /**
                * <p>The owner of the bundle. This is the account identifier of the owner, or
                *          <code>AMAZON</code> if the bundle is provided by Amazon Web Services.</p>
                */
            Owner?: string;
            /**
                * <p>The description of the bundle.</p>
                */
            Description?: string;
            /**
                * <p>The identifier of the image that was used to create the bundle.</p>
                */
            ImageId?: string;
            /**
                * <p>The size of the root volume.</p>
                */
            RootStorage?: RootStorage;
            /**
                * <p>The size of the user volume.</p>
                */
            UserStorage?: UserStorage;
            /**
                * <p>The compute type of the bundle. For more information, see
                *          <a href="http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles">Amazon WorkSpaces Bundles</a>.</p>
                */
            ComputeType?: ComputeType;
            /**
                * <p>The last time that the bundle was updated.</p>
                */
            LastUpdatedTime?: Date;
            /**
                * <p>The time when the bundle was created.</p>
                */
            CreationTime?: Date;
    }
    export namespace WorkspaceBundle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceBundle) => any;
    }
    export enum ClientDeviceType {
            DEVICE_TYPE_ANDROID = "DeviceTypeAndroid",
            DEVICE_TYPE_IOS = "DeviceTypeIos",
            DEVICE_TYPE_LINUX = "DeviceTypeLinux",
            DEVICE_TYPE_OSX = "DeviceTypeOsx",
            DEVICE_TYPE_WEB = "DeviceTypeWeb",
            DEVICE_TYPE_WINDOWS = "DeviceTypeWindows"
    }
    export enum ReconnectEnum {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Describes an Amazon WorkSpaces client.</p>
        */
    export interface ClientProperties {
            /**
                * <p>Specifies whether users can cache their credentials on the Amazon WorkSpaces client.
                *          When enabled, users can choose to reconnect to their WorkSpaces without re-entering their
                *          credentials. </p>
                */
            ReconnectEnabled?: ReconnectEnum | string;
    }
    export namespace ClientProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClientProperties) => any;
    }
    /**
        * <p>Information about the Amazon WorkSpaces client.</p>
        */
    export interface ClientPropertiesResult {
            /**
                * <p>The resource identifier, in the form of a directory ID.</p>
                */
            ResourceId?: string;
            /**
                * <p>Information about the Amazon WorkSpaces client.</p>
                */
            ClientProperties?: ClientProperties;
    }
    export namespace ClientPropertiesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClientPropertiesResult) => any;
    }
    /**
        * <p>Describes an Amazon Connect client add-in.</p>
        */
    export interface ConnectClientAddIn {
            /**
                * <p>The client add-in identifier.</p>
                */
            AddInId?: string;
            /**
                * <p>The directory identifier for which the client add-in is configured.</p>
                */
            ResourceId?: string;
            /**
                * <p>The name of the client add in.</p>
                */
            Name?: string;
            /**
                * <p>The endpoint URL of the client add-in.</p>
                */
            URL?: string;
    }
    export namespace ConnectClientAddIn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectClientAddIn) => any;
    }
    /**
        * <p>Describes a connection alias association that is used for cross-Region redirection. For
        *          more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        */
    export interface ConnectionAliasAssociation {
            /**
                * <p>The association status of the connection alias.</p>
                */
            AssociationStatus?: AssociationStatus | string;
            /**
                * <p>The identifier of the Amazon Web Services account that associated the connection alias
                *          with a directory.</p>
                */
            AssociatedAccountId?: string;
            /**
                * <p>The identifier of the directory associated with a connection alias.</p>
                */
            ResourceId?: string;
            /**
                * <p>The identifier of the connection alias association. You use the connection identifier in
                *          the DNS TXT record when you're configuring your DNS routing policies.</p>
                */
            ConnectionIdentifier?: string;
    }
    export namespace ConnectionAliasAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionAliasAssociation) => any;
    }
    export enum ConnectionAliasState {
            CREATED = "CREATED",
            CREATING = "CREATING",
            DELETING = "DELETING"
    }
    /**
        * <p>Describes a connection alias. Connection aliases are used for cross-Region redirection.
        *          For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        */
    export interface ConnectionAlias {
            /**
                * <p>The connection string specified for the connection alias. The connection string must be
                *          in the form of a fully qualified domain name (FQDN), such as
                *          <code>www.example.com</code>.</p>
                */
            ConnectionString?: string;
            /**
                * <p>The identifier of the connection alias.</p>
                */
            AliasId?: string;
            /**
                * <p>The current state of the connection alias.</p>
                */
            State?: ConnectionAliasState | string;
            /**
                * <p>The identifier of the Amazon Web Services account that owns the connection alias.</p>
                */
            OwnerAccountId?: string;
            /**
                * <p>The association status of the connection alias.</p>
                */
            Associations?: ConnectionAliasAssociation[];
    }
    export namespace ConnectionAlias {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionAlias) => any;
    }
    /**
        * <p>Describes the permissions for a connection alias. Connection aliases are used for
        *          cross-Region redirection. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/cross-region-redirection.html"> Cross-Region
        *             Redirection for Amazon WorkSpaces</a>.</p>
        */
    export interface ConnectionAliasPermission {
            /**
                * <p>The identifier of the Amazon Web Services account that the connection alias is shared
                *          with.</p>
                */
            SharedAccountId: string | undefined;
            /**
                * <p>Indicates whether the specified Amazon Web Services account is allowed to associate the
                *          connection alias with a directory.</p>
                */
            AllowAssociation: boolean | undefined;
    }
    export namespace ConnectionAliasPermission {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionAliasPermission) => any;
    }
    export enum ConnectionState {
            CONNECTED = "CONNECTED",
            DISCONNECTED = "DISCONNECTED",
            UNKNOWN = "UNKNOWN"
    }
    /**
        * <p>Describes a tag.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value of the tag.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CopyWorkspaceImageRequest {
            /**
                * <p>The name of the image.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of the image.</p>
                */
            Description?: string;
            /**
                * <p>The identifier of the source image.</p>
                */
            SourceImageId: string | undefined;
            /**
                * <p>The identifier of the source Region.</p>
                */
            SourceRegion: string | undefined;
            /**
                * <p>The tags for the image.</p>
                */
            Tags?: Tag[];
    }
    export namespace CopyWorkspaceImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyWorkspaceImageRequest) => any;
    }
    export interface CopyWorkspaceImageResult {
            /**
                * <p>The identifier of the image.</p>
                */
            ImageId?: string;
    }
    export namespace CopyWorkspaceImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyWorkspaceImageResult) => any;
    }
    /**
        * <p>The specified resource already exists.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The specified resource is not available.</p>
        */
    export class ResourceUnavailableException extends __BaseException {
            readonly name: "ResourceUnavailableException";
            readonly $fault: "client";
            /**
                * <p>The identifier of the resource that is not available.</p>
                */
            ResourceId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceUnavailableException, __BaseException>);
    }
    export interface CreateConnectClientAddInRequest {
            /**
                * <p>The directory identifier for which to configure the client add-in.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The name of the client add-in.</p>
                */
            Name: string | undefined;
            /**
                * <p>The endpoint URL of the Amazon Connect client add-in.</p>
                */
            URL: string | undefined;
    }
    export namespace CreateConnectClientAddInRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectClientAddInRequest) => any;
    }
    export interface CreateConnectClientAddInResult {
            /**
                * <p>The client add-in identifier.</p>
                */
            AddInId?: string;
    }
    export namespace CreateConnectClientAddInResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectClientAddInResult) => any;
    }
    /**
        * <p>The resource could not be created.</p>
        */
    export class ResourceCreationFailedException extends __BaseException {
            readonly name: "ResourceCreationFailedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceCreationFailedException, __BaseException>);
    }
    export interface CreateConnectionAliasRequest {
            /**
                * <p>A connection string in the form of a fully qualified domain name (FQDN), such as
                *             <code>www.example.com</code>.</p>
                *          <important>
                *             <p>After you create a connection string, it is always associated to your Amazon Web Services account. You cannot recreate the same connection string with a different
                *             account, even if you delete all instances of it from the original account. The
                *             connection string is globally reserved for your account.</p>
                *          </important>
                */
            ConnectionString: string | undefined;
            /**
                * <p>The tags to associate with the connection alias.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateConnectionAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionAliasRequest) => any;
    }
    export interface CreateConnectionAliasResult {
            /**
                * <p>The identifier of the connection alias.</p>
                */
            AliasId?: string;
    }
    export namespace CreateConnectionAliasResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConnectionAliasResult) => any;
    }
    export interface CreateIpGroupRequest {
            /**
                * <p>The name of the group.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The description of the group.</p>
                */
            GroupDesc?: string;
            /**
                * <p>The rules to add to the group.</p>
                */
            UserRules?: IpRuleItem[];
            /**
                * <p>The tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateIpGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIpGroupRequest) => any;
    }
    export interface CreateIpGroupResult {
            /**
                * <p>The identifier of the group.</p>
                */
            GroupId?: string;
    }
    export namespace CreateIpGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIpGroupResult) => any;
    }
    export interface CreateTagsRequest {
            /**
                * <p>The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
                *          registered directories, images, custom bundles, IP access control groups, and connection
                *          aliases.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace CreateTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTagsRequest) => any;
    }
    export interface CreateTagsResult {
    }
    export namespace CreateTagsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTagsResult) => any;
    }
    export interface CreateUpdatedWorkspaceImageRequest {
            /**
                * <p>The name of the new updated WorkSpace image.</p>
                */
            Name: string | undefined;
            /**
                * <p>A description of whether updates for the WorkSpace image are available.</p>
                */
            Description: string | undefined;
            /**
                * <p>The identifier of the source WorkSpace image.</p>
                */
            SourceImageId: string | undefined;
            /**
                * <p>The tags that you want to add to the new updated WorkSpace image.</p>
                *          <note>
                *             <p>To add tags at the same time when you're creating the updated image, you must create
                *             an IAM policy that grants your IAM user permissions to use
                *                <code>workspaces:CreateTags</code>. </p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateUpdatedWorkspaceImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUpdatedWorkspaceImageRequest) => any;
    }
    export interface CreateUpdatedWorkspaceImageResult {
            /**
                * <p>The identifier of the new updated WorkSpace image.</p>
                */
            ImageId?: string;
    }
    export namespace CreateUpdatedWorkspaceImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUpdatedWorkspaceImageResult) => any;
    }
    export interface CreateWorkspaceBundleRequest {
            /**
                * <p>The name of the bundle.</p>
                */
            BundleName: string | undefined;
            /**
                * <p>The description of the bundle.</p>
                */
            BundleDescription: string | undefined;
            /**
                * <p>The identifier of the image that is used to create the bundle.</p>
                */
            ImageId: string | undefined;
            /**
                * <p>Describes the compute type of the bundle.</p>
                */
            ComputeType: ComputeType | undefined;
            /**
                * <p>Describes the user volume for a WorkSpace bundle.</p>
                */
            UserStorage: UserStorage | undefined;
            /**
                * <p>Describes the root volume for a WorkSpace bundle.</p>
                */
            RootStorage?: RootStorage;
            /**
                * <p>The tags associated with the bundle.</p>
                *
                *          <note>
                *             <p>To add tags at the same time when you're creating the bundle, you must create an IAM policy that
                *             grants your IAM user permissions to use <code>workspaces:CreateTags</code>. </p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateWorkspaceBundleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceBundleRequest) => any;
    }
    export interface CreateWorkspaceBundleResult {
            /**
                * <p>Describes a WorkSpace bundle.</p>
                */
            WorkspaceBundle?: WorkspaceBundle;
    }
    export namespace CreateWorkspaceBundleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspaceBundleResult) => any;
    }
    export enum RunningMode {
            ALWAYS_ON = "ALWAYS_ON",
            AUTO_STOP = "AUTO_STOP"
    }
    /**
        * <p>Describes a WorkSpace.</p>
        */
    export interface WorkspaceProperties {
            /**
                * <p>The running mode. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html">Manage the WorkSpace Running
                *             Mode</a>.</p>
                */
            RunningMode?: RunningMode | string;
            /**
                * <p>The time after a user logs off when WorkSpaces are automatically stopped. Configured in
                *          60-minute intervals.</p>
                */
            RunningModeAutoStopTimeoutInMinutes?: number;
            /**
                * <p>The size of the root volume. For important information about how to modify the size of
                *          the root and user volumes, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html">Modify a
                *          WorkSpace</a>.</p>
                */
            RootVolumeSizeGib?: number;
            /**
                * <p>The size of the user storage. For important information about how to modify the size of
                *          the root and user volumes, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/modify-workspaces.html">Modify a
                *          WorkSpace</a>.</p>
                */
            UserVolumeSizeGib?: number;
            /**
                * <p>The compute type. For more information, see <a href="http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles">Amazon WorkSpaces
                *          Bundles</a>.</p>
                */
            ComputeTypeName?: Compute | string;
    }
    export namespace WorkspaceProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceProperties) => any;
    }
    /**
        * <p>Describes the information used to create a WorkSpace.</p>
        */
    export interface WorkspaceRequest {
            /**
                * <p>The identifier of the Directory Service directory for the WorkSpace. You can use <a>DescribeWorkspaceDirectories</a> to list the available directories.</p>
                */
            DirectoryId: string | undefined;
            /**
                * <p>The user name of the user for the WorkSpace. This user name must exist in the Directory Service directory for the WorkSpace.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The identifier of the bundle for the WorkSpace. You can use <a>DescribeWorkspaceBundles</a> to list the available bundles.</p>
                */
            BundleId: string | undefined;
            /**
                * <p>The symmetric KMS key used to encrypt data stored on your WorkSpace.
                *          Amazon WorkSpaces does not support asymmetric KMS keys.</p>
                */
            VolumeEncryptionKey?: string;
            /**
                * <p>Indicates whether the data stored on the user volume is encrypted.</p>
                */
            UserVolumeEncryptionEnabled?: boolean;
            /**
                * <p>Indicates whether the data stored on the root volume is encrypted.</p>
                */
            RootVolumeEncryptionEnabled?: boolean;
            /**
                * <p>The WorkSpace properties.</p>
                */
            WorkspaceProperties?: WorkspaceProperties;
            /**
                * <p>The tags for the WorkSpace.</p>
                */
            Tags?: Tag[];
    }
    export namespace WorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceRequest) => any;
    }
    export interface CreateWorkspacesRequest {
            /**
                * <p>The WorkSpaces to create. You can specify up to 25 WorkSpaces.</p>
                */
            Workspaces: WorkspaceRequest[] | undefined;
    }
    export namespace CreateWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspacesRequest) => any;
    }
    /**
        * <p>Describes a WorkSpace that cannot be created.</p>
        */
    export interface FailedCreateWorkspaceRequest {
            /**
                * <p>Information about the WorkSpace.</p>
                */
            WorkspaceRequest?: WorkspaceRequest;
            /**
                * <p>The error code that is returned if the WorkSpace cannot be created.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The text of the error message that is returned if the WorkSpace cannot be
                *          created.</p>
                */
            ErrorMessage?: string;
    }
    export namespace FailedCreateWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedCreateWorkspaceRequest) => any;
    }
    export enum ModificationResourceEnum {
            COMPUTE_TYPE = "COMPUTE_TYPE",
            ROOT_VOLUME = "ROOT_VOLUME",
            USER_VOLUME = "USER_VOLUME"
    }
    export enum ModificationStateEnum {
            UPDATE_INITIATED = "UPDATE_INITIATED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS"
    }
    /**
        * <p>Describes a WorkSpace modification.</p>
        */
    export interface ModificationState {
            /**
                * <p>The resource.</p>
                */
            Resource?: ModificationResourceEnum | string;
            /**
                * <p>The modification state.</p>
                */
            State?: ModificationStateEnum | string;
    }
    export namespace ModificationState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModificationState) => any;
    }
    export enum WorkspaceState {
            ADMIN_MAINTENANCE = "ADMIN_MAINTENANCE",
            AVAILABLE = "AVAILABLE",
            ERROR = "ERROR",
            IMPAIRED = "IMPAIRED",
            MAINTENANCE = "MAINTENANCE",
            PENDING = "PENDING",
            REBOOTING = "REBOOTING",
            REBUILDING = "REBUILDING",
            RESTORING = "RESTORING",
            STARTING = "STARTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING",
            SUSPENDED = "SUSPENDED",
            TERMINATED = "TERMINATED",
            TERMINATING = "TERMINATING",
            UNHEALTHY = "UNHEALTHY",
            UPDATING = "UPDATING"
    }
    /**
        * <p>Describes a WorkSpace.</p>
        */
    export interface Workspace {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId?: string;
            /**
                * <p>The identifier of the Directory Service directory for the WorkSpace.</p>
                */
            DirectoryId?: string;
            /**
                * <p>The user for the WorkSpace.</p>
                */
            UserName?: string;
            /**
                * <p>The IP address of the WorkSpace.</p>
                */
            IpAddress?: string;
            /**
                * <p>The operational state of the WorkSpace.</p>
                *          <note>
                *             <p>After a WorkSpace is terminated, the <code>TERMINATED</code> state is returned only
                *             briefly before the WorkSpace directory metadata is cleaned up, so this state is rarely
                *             returned. To confirm that a WorkSpace is terminated, check for the WorkSpace ID by using
                *                <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaces.html">
                *                DescribeWorkSpaces</a>. If the WorkSpace ID isn't returned, then the WorkSpace
                *             has been successfully terminated.</p>
                *          </note>
                */
            State?: WorkspaceState | string;
            /**
                * <p>The identifier of the bundle used to create the WorkSpace.</p>
                */
            BundleId?: string;
            /**
                * <p>The identifier of the subnet for the WorkSpace.</p>
                */
            SubnetId?: string;
            /**
                * <p>The text of the error message that is returned if the WorkSpace cannot be
                *          created.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The error code that is returned if the WorkSpace cannot be created.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The name of the WorkSpace, as seen by the operating system. The format of this name
                *          varies. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/launch-workspaces-tutorials.html"> Launch a
                *             WorkSpace</a>. </p>
                */
            ComputerName?: string;
            /**
                * <p>The symmetric KMS key used to encrypt data stored on your WorkSpace.
                *          Amazon WorkSpaces does not support asymmetric KMS keys.</p>
                */
            VolumeEncryptionKey?: string;
            /**
                * <p>Indicates whether the data stored on the user volume is encrypted.</p>
                */
            UserVolumeEncryptionEnabled?: boolean;
            /**
                * <p>Indicates whether the data stored on the root volume is encrypted.</p>
                */
            RootVolumeEncryptionEnabled?: boolean;
            /**
                * <p>The properties of the WorkSpace.</p>
                */
            WorkspaceProperties?: WorkspaceProperties;
            /**
                * <p>The modification states of the WorkSpace.</p>
                */
            ModificationStates?: ModificationState[];
    }
    export namespace Workspace {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Workspace) => any;
    }
    export interface CreateWorkspacesResult {
            /**
                * <p>Information about the WorkSpaces that could not be created.</p>
                */
            FailedRequests?: FailedCreateWorkspaceRequest[];
            /**
                * <p>Information about the WorkSpaces that were created.</p>
                *          <p>Because this operation is asynchronous, the identifier returned is not immediately
                *          available for use with other operations. For example, if you call <a>DescribeWorkspaces</a> before the WorkSpace is created, the information returned
                *          can be incomplete.</p>
                */
            PendingRequests?: Workspace[];
    }
    export namespace CreateWorkspacesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkspacesResult) => any;
    }
    export enum DedicatedTenancySupportEnum {
            ENABLED = "ENABLED"
    }
    /**
        * <p>Returns default client branding attributes that were imported. These attributes display
        *          on the client login screen.</p>
        *          <important>
        *             <p>Client branding attributes are public facing. Ensure that you don't include sensitive
        *             information.</p>
        *          </important>
        */
    export interface DefaultClientBrandingAttributes {
            /**
                * <p>The logo URL. The only image
                *          format accepted is a binary data object that is converted from a <code>.png</code> file.</p>
                */
            LogoUrl?: string;
            /**
                * <p>The support email. The company's customer support email address.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportEmail?: string;
            /**
                * <p>The support link. The link for the company's customer support page for their
                *          WorkSpace.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive.You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportLink?: string;
            /**
                * <p>The forgotten password link. This is the web address that users can go to if they forget
                *          the password for their WorkSpace.</p>
                */
            ForgotPasswordLink?: string;
            /**
                * <p>The login message. Specified as a key value pair, in which the key is a locale and the
                *          value is the localized message for that locale. The only key supported is
                *             <code>en_US</code>. </p>
                */
            LoginMessage?: Record<string, string>;
    }
    export namespace DefaultClientBrandingAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DefaultClientBrandingAttributes) => any;
    }
    /**
        * <p>The default client branding attributes to be imported. These attributes display on the
        *          client login screen.</p>
        *          <important>
        *             <p>Client branding attributes are public facing. Ensure that you do not include
        *             sensitive information.</p>
        *          </important>
        */
    export interface DefaultImportClientBrandingAttributes {
            /**
                * <p>The logo. The only image
                *          format accepted is a binary data object that is converted from a <code>.png</code> file.</p>
                */
            Logo?: Uint8Array;
            /**
                * <p>The support email. The company's customer support email address.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportEmail?: string;
            /**
                * <p>The support link. The link for the company's customer support page for their
                *          WorkSpace.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportLink?: string;
            /**
                * <p>The forgotten password link. This is the web address that users can go to if they forget
                *          the password for their WorkSpace.</p>
                */
            ForgotPasswordLink?: string;
            /**
                * <p>The login message. Specified as a key value pair, in which the key is a locale and the
                *          value is the localized message for that locale. The only key supported is
                *             <code>en_US</code>. </p>
                */
            LoginMessage?: Record<string, string>;
    }
    export namespace DefaultImportClientBrandingAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DefaultImportClientBrandingAttributes) => any;
    }
    /**
        * <p>Describes the default values that are used to create WorkSpaces. For more information,
        *          see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory
        *             Details for Your WorkSpaces</a>.</p>
        */
    export interface DefaultWorkspaceCreationProperties {
            /**
                * <p>Specifies whether the directory is enabled for Amazon WorkDocs.</p>
                */
            EnableWorkDocs?: boolean;
            /**
                * <p>Specifies whether to automatically assign an Elastic public IP address to WorkSpaces in
                *          this directory by default. If enabled, the Elastic public IP address allows outbound
                *          internet access from your WorkSpaces when you’re using an internet gateway in the Amazon
                *          VPC in which your WorkSpaces are located. If you're using a Network Address Translation
                *          (NAT) gateway for outbound internet access from your VPC, or if your WorkSpaces are in
                *          public subnets and you manually assign them Elastic IP addresses, you should disable this
                *          setting. This setting applies to new WorkSpaces that you launch or to existing WorkSpaces
                *          that you rebuild. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces-vpc.html"> Configure a VPC for
                *             Amazon WorkSpaces</a>.</p>
                */
            EnableInternetAccess?: boolean;
            /**
                * <p>The organizational unit (OU) in the directory for the WorkSpace machine accounts.</p>
                */
            DefaultOu?: string;
            /**
                * <p>The identifier of the default security group to apply to WorkSpaces when they are
                *          created. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces-security-groups.html"> Security
                *             Groups for Your WorkSpaces</a>.</p>
                */
            CustomSecurityGroupId?: string;
            /**
                * <p>Specifies whether WorkSpace users are local administrators on their WorkSpaces.</p>
                */
            UserEnabledAsLocalAdministrator?: boolean;
            /**
                * <p>Specifies whether maintenance mode is enabled for WorkSpaces. For more information, see
                *             <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html">WorkSpace
                *             Maintenance</a>.</p>
                */
            EnableMaintenanceMode?: boolean;
    }
    export namespace DefaultWorkspaceCreationProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DefaultWorkspaceCreationProperties) => any;
    }
    export interface DeleteClientBrandingRequest {
            /**
                * <p>The directory identifier of the WorkSpace for which you want to delete client
                *          branding.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The device type for which you want to delete client branding.</p>
                */
            Platforms: (ClientDeviceType | string)[] | undefined;
    }
    export namespace DeleteClientBrandingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteClientBrandingRequest) => any;
    }
    export interface DeleteClientBrandingResult {
    }
    export namespace DeleteClientBrandingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteClientBrandingResult) => any;
    }
    export interface DeleteConnectClientAddInRequest {
            /**
                * <p>The identifier of the client add-in to delete.</p>
                */
            AddInId: string | undefined;
            /**
                * <p>The directory identifier for which the client add-in is configured.</p>
                */
            ResourceId: string | undefined;
    }
    export namespace DeleteConnectClientAddInRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectClientAddInRequest) => any;
    }
    export interface DeleteConnectClientAddInResult {
    }
    export namespace DeleteConnectClientAddInResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectClientAddInResult) => any;
    }
    export interface DeleteConnectionAliasRequest {
            /**
                * <p>The identifier of the connection alias to delete.</p>
                */
            AliasId: string | undefined;
    }
    export namespace DeleteConnectionAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionAliasRequest) => any;
    }
    export interface DeleteConnectionAliasResult {
    }
    export namespace DeleteConnectionAliasResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConnectionAliasResult) => any;
    }
    export interface DeleteIpGroupRequest {
            /**
                * <p>The identifier of the IP access control group.</p>
                */
            GroupId: string | undefined;
    }
    export namespace DeleteIpGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIpGroupRequest) => any;
    }
    export interface DeleteIpGroupResult {
    }
    export namespace DeleteIpGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIpGroupResult) => any;
    }
    export interface DeleteTagsRequest {
            /**
                * <p>The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
                *          registered directories, images, custom bundles, IP access control groups, and connection
                *          aliases.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The tag keys.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace DeleteTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTagsRequest) => any;
    }
    export interface DeleteTagsResult {
    }
    export namespace DeleteTagsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTagsResult) => any;
    }
    export interface DeleteWorkspaceBundleRequest {
            /**
                * <p>The identifier of the bundle.</p>
                */
            BundleId?: string;
    }
    export namespace DeleteWorkspaceBundleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceBundleRequest) => any;
    }
    export interface DeleteWorkspaceBundleResult {
    }
    export namespace DeleteWorkspaceBundleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceBundleResult) => any;
    }
    export interface DeleteWorkspaceImageRequest {
            /**
                * <p>The identifier of the image.</p>
                */
            ImageId: string | undefined;
    }
    export namespace DeleteWorkspaceImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceImageRequest) => any;
    }
    export interface DeleteWorkspaceImageResult {
    }
    export namespace DeleteWorkspaceImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkspaceImageResult) => any;
    }
    export interface DeregisterWorkspaceDirectoryRequest {
            /**
                * <p>The identifier of the directory. If any WorkSpaces are registered to this directory, you
                *          must remove them before you deregister the directory, or you will receive an
                *          OperationNotSupportedException error.</p>
                */
            DirectoryId: string | undefined;
    }
    export namespace DeregisterWorkspaceDirectoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterWorkspaceDirectoryRequest) => any;
    }
    export interface DeregisterWorkspaceDirectoryResult {
    }
    export namespace DeregisterWorkspaceDirectoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterWorkspaceDirectoryResult) => any;
    }
    export interface DescribeAccountRequest {
    }
    export namespace DescribeAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountRequest) => any;
    }
    export interface DescribeAccountResult {
            /**
                * <p>The status of BYOL (whether BYOL is enabled or disabled).</p>
                */
            DedicatedTenancySupport?: DedicatedTenancySupportResultEnum | string;
            /**
                * <p>The IP address range, specified as an IPv4 CIDR block, used for the management network
                *          interface.</p>
                *          <p>The management network interface is connected to a secure Amazon WorkSpaces management
                *          network. It is used for interactive streaming of the WorkSpace desktop to Amazon WorkSpaces
                *          clients, and to allow Amazon WorkSpaces to manage the WorkSpace.</p>
                */
            DedicatedTenancyManagementCidrRange?: string;
    }
    export namespace DescribeAccountResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountResult) => any;
    }
    export interface DescribeAccountModificationsRequest {
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAccountModificationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountModificationsRequest) => any;
    }
    export interface DescribeAccountModificationsResult {
            /**
                * <p>The list of modifications to the configuration of BYOL.</p>
                */
            AccountModifications?: AccountModification[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeAccountModificationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountModificationsResult) => any;
    }
    export interface DescribeClientBrandingRequest {
            /**
                * <p>The directory identifier of the WorkSpace for which you want to view client branding
                *          information.</p>
                */
            ResourceId: string | undefined;
    }
    export namespace DescribeClientBrandingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClientBrandingRequest) => any;
    }
    /**
        * <p>The client branding attributes for iOS device types. These attributes are displayed on
        *          the iOS client login screen only.</p>
        *          <important>
        *             <p>Client branding attributes are public facing. Ensure you do not include sensitive
        *             information.</p>
        *          </important>
        */
    export interface IosClientBrandingAttributes {
            /**
                * <p>The logo. This is the
                *          standard-resolution display that has a 1:1 pixel density (or @1x), where one pixel is equal
                *          to one point. The only image format accepted is a binary data object that is converted from
                *          a <code>.png</code> file.</p>
                */
            LogoUrl?: string;
            /**
                * <p>The @2x version of the logo. This is the higher resolution display that offers a scale
                *          factor of 2.0 (or @2x). The only image format accepted is a binary data object that is
                *          converted from a <code>.png</code> file.</p>
                *          <note>
                *             <p> For more information about iOS image size and resolution, see <a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution </a> in the <i>Apple Human Interface
                *                Guidelines</i>.</p>
                *          </note>
                */
            Logo2xUrl?: string;
            /**
                * <p>The @3x version of the logo. This is the higher resolution display that offers a scale
                *          factor of 3.0 (or @3x).The only image format accepted is a binary data object that is
                *          converted from a <code>.png</code> file.</p>
                *          <note>
                *             <p> For more information about iOS image size and resolution, see <a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution </a> in the <i>Apple Human Interface
                *                Guidelines</i>.</p>
                *          </note>
                */
            Logo3xUrl?: string;
            /**
                * <p>The support email. The company's customer support email address.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportEmail?: string;
            /**
                * <p>The support link. The link for the company's customer support page for their
                *          WorkSpace.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportLink?: string;
            /**
                * <p>The forgotten password link. This is the web address that users can go to if they forget
                *          the password for their WorkSpace.</p>
                */
            ForgotPasswordLink?: string;
            /**
                * <p>The login message. Specified as a key value pair, in which the key is a locale and the
                *          value is the localized message for that locale. The only key supported is
                *             <code>en_US</code>. </p>
                */
            LoginMessage?: Record<string, string>;
    }
    export namespace IosClientBrandingAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IosClientBrandingAttributes) => any;
    }
    export interface DescribeClientBrandingResult {
            /**
                * <p>The branding information for Windows devices.</p>
                */
            DeviceTypeWindows?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information for macOS devices.</p>
                */
            DeviceTypeOsx?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information for Android devices.</p>
                */
            DeviceTypeAndroid?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information for iOS devices.</p>
                */
            DeviceTypeIos?: IosClientBrandingAttributes;
            /**
                * <p>The branding information for Linux devices.</p>
                */
            DeviceTypeLinux?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information for Web access.</p>
                */
            DeviceTypeWeb?: DefaultClientBrandingAttributes;
    }
    export namespace DescribeClientBrandingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClientBrandingResult) => any;
    }
    export interface DescribeClientPropertiesRequest {
            /**
                * <p>The resource identifier, in the form of directory IDs.</p>
                */
            ResourceIds: string[] | undefined;
    }
    export namespace DescribeClientPropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClientPropertiesRequest) => any;
    }
    export interface DescribeClientPropertiesResult {
            /**
                * <p>Information about the specified Amazon WorkSpaces clients.</p>
                */
            ClientPropertiesList?: ClientPropertiesResult[];
    }
    export namespace DescribeClientPropertiesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClientPropertiesResult) => any;
    }
    export interface DescribeConnectClientAddInsRequest {
            /**
                * <p>The directory identifier for which the client add-in is configured.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeConnectClientAddInsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectClientAddInsRequest) => any;
    }
    export interface DescribeConnectClientAddInsResult {
            /**
                * <p>Information about client add-ins.</p>
                */
            AddIns?: ConnectClientAddIn[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeConnectClientAddInsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectClientAddInsResult) => any;
    }
    export interface DescribeConnectionAliasesRequest {
            /**
                * <p>The identifiers of the connection aliases to describe.</p>
                */
            AliasIds?: string[];
            /**
                * <p>The identifier of the directory associated with the connection alias.</p>
                */
            ResourceId?: string;
            /**
                * <p>The maximum number of connection aliases to return.</p>
                */
            Limit?: number;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeConnectionAliasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionAliasesRequest) => any;
    }
    export interface DescribeConnectionAliasesResult {
            /**
                * <p>Information about the specified connection aliases.</p>
                */
            ConnectionAliases?: ConnectionAlias[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeConnectionAliasesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionAliasesResult) => any;
    }
    export interface DescribeConnectionAliasPermissionsRequest {
            /**
                * <p>The identifier of the connection alias.</p>
                */
            AliasId: string | undefined;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeConnectionAliasPermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionAliasPermissionsRequest) => any;
    }
    export interface DescribeConnectionAliasPermissionsResult {
            /**
                * <p>The identifier of the connection alias.</p>
                */
            AliasId?: string;
            /**
                * <p>The permissions associated with a connection alias.</p>
                */
            ConnectionAliasPermissions?: ConnectionAliasPermission[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeConnectionAliasPermissionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConnectionAliasPermissionsResult) => any;
    }
    export interface DescribeIpGroupsRequest {
            /**
                * <p>The identifiers of one or more IP access control groups.</p>
                */
            GroupIds?: string[];
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeIpGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIpGroupsRequest) => any;
    }
    /**
        * <p>Describes an IP access control group.</p>
        */
    export interface WorkspacesIpGroup {
            /**
                * <p>The identifier of the group.</p>
                */
            groupId?: string;
            /**
                * <p>The name of the group.</p>
                */
            groupName?: string;
            /**
                * <p>The description of the group.</p>
                */
            groupDesc?: string;
            /**
                * <p>The rules.</p>
                */
            userRules?: IpRuleItem[];
    }
    export namespace WorkspacesIpGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspacesIpGroup) => any;
    }
    export interface DescribeIpGroupsResult {
            /**
                * <p>Information about the IP access control groups.</p>
                */
            Result?: WorkspacesIpGroup[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeIpGroupsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeIpGroupsResult) => any;
    }
    export interface DescribeTagsRequest {
            /**
                * <p>The identifier of the WorkSpaces resource. The supported resource types are WorkSpaces,
                *          registered directories, images, custom bundles, IP access control groups, and connection
                *          aliases.</p>
                */
            ResourceId: string | undefined;
    }
    export namespace DescribeTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTagsRequest) => any;
    }
    export interface DescribeTagsResult {
            /**
                * <p>The tags.</p>
                */
            TagList?: Tag[];
    }
    export namespace DescribeTagsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTagsResult) => any;
    }
    export interface DescribeWorkspaceBundlesRequest {
            /**
                * <p>The identifiers of the bundles. You cannot combine this parameter with any other filter.</p>
                */
            BundleIds?: string[];
            /**
                * <p>The owner of the bundles. You cannot combine this parameter with any other filter.</p>
                *          <p>To describe the bundles provided by Amazon Web Services, specify <code>AMAZON</code>.
                *          To describe the bundles that belong to your account, don't specify a value.</p>
                */
            Owner?: string;
            /**
                * <p>The token for the next set of results. (You received this token from a previous call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspaceBundlesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceBundlesRequest) => any;
    }
    export interface DescribeWorkspaceBundlesResult {
            /**
                * <p>Information about the bundles.</p>
                */
            Bundles?: WorkspaceBundle[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are no more
                *          results to return. This token is valid for one day and must be used within that time
                *          frame.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspaceBundlesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceBundlesResult) => any;
    }
    export interface DescribeWorkspaceDirectoriesRequest {
            /**
                * <p>The identifiers of the directories. If the value is null, all directories are
                *          retrieved.</p>
                */
            DirectoryIds?: string[];
            /**
                * <p>The maximum number of directories to return.</p>
                */
            Limit?: number;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspaceDirectoriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceDirectoriesRequest) => any;
    }
    export enum WorkspaceDirectoryType {
            AD_CONNECTOR = "AD_CONNECTOR",
            SIMPLE_AD = "SIMPLE_AD"
    }
    /**
        * <p>Describes the self-service permissions for a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/enable-user-self-service-workspace-management.html">Enable Self-Service WorkSpace Management Capabilities for Your Users</a>.</p>
        */
    export interface SelfservicePermissions {
            /**
                * <p>Specifies whether users can restart their WorkSpace.</p>
                */
            RestartWorkspace?: ReconnectEnum | string;
            /**
                * <p>Specifies whether users can increase the volume size of the drives on their
                *          WorkSpace.</p>
                */
            IncreaseVolumeSize?: ReconnectEnum | string;
            /**
                * <p>Specifies whether users can change the compute type (bundle) for their WorkSpace.</p>
                */
            ChangeComputeType?: ReconnectEnum | string;
            /**
                * <p>Specifies whether users can switch the running mode of their WorkSpace.</p>
                */
            SwitchRunningMode?: ReconnectEnum | string;
            /**
                * <p>Specifies whether users can rebuild the operating system of a WorkSpace to its original
                *          state.</p>
                */
            RebuildWorkspace?: ReconnectEnum | string;
    }
    export namespace SelfservicePermissions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SelfservicePermissions) => any;
    }
    export enum WorkspaceDirectoryState {
            DEREGISTERED = "DEREGISTERED",
            DEREGISTERING = "DEREGISTERING",
            ERROR = "ERROR",
            REGISTERED = "REGISTERED",
            REGISTERING = "REGISTERING"
    }
    export enum Tenancy {
            DEDICATED = "DEDICATED",
            SHARED = "SHARED"
    }
    /**
        * <p>The device types and operating systems that can be used to access a WorkSpace. For more
        *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-network-requirements.html">Amazon
        *             WorkSpaces Client Network Requirements</a>.</p>
        */
    export interface WorkspaceAccessProperties {
            /**
                * <p>Indicates whether users can use Windows clients to access their WorkSpaces.</p>
                */
            DeviceTypeWindows?: AccessPropertyValue | string;
            /**
                * <p>Indicates whether users can use macOS clients to access their WorkSpaces.</p>
                */
            DeviceTypeOsx?: AccessPropertyValue | string;
            /**
                * <p>Indicates whether users can access their WorkSpaces through a web browser.</p>
                */
            DeviceTypeWeb?: AccessPropertyValue | string;
            /**
                * <p>Indicates whether users can use iOS devices to access their WorkSpaces.</p>
                */
            DeviceTypeIos?: AccessPropertyValue | string;
            /**
                * <p>Indicates whether users can use Android and Android-compatible Chrome OS devices to
                *          access their WorkSpaces.</p>
                */
            DeviceTypeAndroid?: AccessPropertyValue | string;
            /**
                * <p>Indicates whether users can use Chromebooks to access their WorkSpaces.</p>
                */
            DeviceTypeChromeOs?: AccessPropertyValue | string;
            /**
                * <p>Indicates whether users can use zero client devices to access their WorkSpaces.</p>
                */
            DeviceTypeZeroClient?: AccessPropertyValue | string;
            /**
                * <p>Indicates whether users can use Linux clients to access their WorkSpaces.</p>
                */
            DeviceTypeLinux?: AccessPropertyValue | string;
    }
    export namespace WorkspaceAccessProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceAccessProperties) => any;
    }
    /**
        * <p>Describes a directory that is used with Amazon WorkSpaces.</p>
        */
    export interface WorkspaceDirectory {
            /**
                * <p>The directory identifier.</p>
                */
            DirectoryId?: string;
            /**
                * <p>The directory alias.</p>
                */
            Alias?: string;
            /**
                * <p>The name of the directory.</p>
                */
            DirectoryName?: string;
            /**
                * <p>The registration code for the directory. This is the code that users enter in their
                *          Amazon WorkSpaces client application to connect to the directory.</p>
                */
            RegistrationCode?: string;
            /**
                * <p>The identifiers of the subnets used with the directory.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>The IP addresses of the DNS servers for the directory.</p>
                */
            DnsIpAddresses?: string[];
            /**
                * <p>The user name for the service account.</p>
                */
            CustomerUserName?: string;
            /**
                * <p>The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make
                *          calls to other services, such as Amazon EC2, on your behalf.</p>
                */
            IamRoleId?: string;
            /**
                * <p>The directory type.</p>
                */
            DirectoryType?: WorkspaceDirectoryType | string;
            /**
                * <p>The identifier of the security group that is assigned to new WorkSpaces.</p>
                */
            WorkspaceSecurityGroupId?: string;
            /**
                * <p>The state of the directory's registration with Amazon WorkSpaces. After a directory is
                *          deregistered, the <code>DEREGISTERED</code> state is returned very briefly before the
                *          directory metadata is cleaned up, so this state is rarely returned. To confirm that a
                *          directory is deregistered, check for the directory ID by using <a href="https://docs.aws.amazon.com/workspaces/latest/api/API_DescribeWorkspaceDirectories.html">
                *             DescribeWorkspaceDirectories</a>. If the directory ID isn't returned, then the
                *          directory has been successfully deregistered.</p>
                */
            State?: WorkspaceDirectoryState | string;
            /**
                * <p>The default creation properties for all WorkSpaces in the directory.</p>
                */
            WorkspaceCreationProperties?: DefaultWorkspaceCreationProperties;
            /**
                * <p>The identifiers of the IP access control groups associated with the directory.</p>
                */
            ipGroupIds?: string[];
            /**
                * <p>The devices and operating systems that users can use to access WorkSpaces.</p>
                */
            WorkspaceAccessProperties?: WorkspaceAccessProperties;
            /**
                * <p>Specifies whether the directory is dedicated or shared. To use Bring Your Own License
                *          (BYOL), this value must be set to <code>DEDICATED</code>. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring
                *             Your Own Windows Desktop Images</a>.</p>
                */
            Tenancy?: Tenancy | string;
            /**
                * <p>The default self-service permissions for WorkSpaces in the directory.</p>
                */
            SelfservicePermissions?: SelfservicePermissions;
    }
    export namespace WorkspaceDirectory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceDirectory) => any;
    }
    export interface DescribeWorkspaceDirectoriesResult {
            /**
                * <p>Information about the directories.</p>
                */
            Directories?: WorkspaceDirectory[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspaceDirectoriesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceDirectoriesResult) => any;
    }
    export interface DescribeWorkspaceImagePermissionsRequest {
            /**
                * <p>The identifier of the image.</p>
                */
            ImageId: string | undefined;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeWorkspaceImagePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceImagePermissionsRequest) => any;
    }
    /**
        * <p>Describes the Amazon Web Services accounts that have been granted permission to use a
        *          shared image. For more information about sharing images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/share-custom-image.html"> Share or Unshare a Custom
        *             WorkSpaces Image</a>.</p>
        */
    export interface ImagePermission {
            /**
                * <p>The identifier of the Amazon Web Services account that an image has been shared
                *          with.</p>
                */
            SharedAccountId?: string;
    }
    export namespace ImagePermission {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImagePermission) => any;
    }
    export interface DescribeWorkspaceImagePermissionsResult {
            /**
                * <p>The identifier of the image.</p>
                */
            ImageId?: string;
            /**
                * <p>The identifiers of the Amazon Web Services accounts that the image has been shared
                *          with.</p>
                */
            ImagePermissions?: ImagePermission[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspaceImagePermissionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceImagePermissionsResult) => any;
    }
    export enum ImageType {
            OWNED = "OWNED",
            SHARED = "SHARED"
    }
    export interface DescribeWorkspaceImagesRequest {
            /**
                * <p>The identifier of the image.</p>
                */
            ImageIds?: string[];
            /**
                * <p>The type (owned or shared) of the image.</p>
                */
            ImageType?: ImageType | string;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeWorkspaceImagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceImagesRequest) => any;
    }
    export enum OperatingSystemType {
            LINUX = "LINUX",
            WINDOWS = "WINDOWS"
    }
    /**
        * <p>The operating system that the image is running.</p>
        */
    export interface OperatingSystem {
            /**
                * <p>The operating system.</p>
                */
            Type?: OperatingSystemType | string;
    }
    export namespace OperatingSystem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OperatingSystem) => any;
    }
    export enum WorkspaceImageRequiredTenancy {
            DEDICATED = "DEDICATED",
            DEFAULT = "DEFAULT"
    }
    export enum WorkspaceImageState {
            AVAILABLE = "AVAILABLE",
            ERROR = "ERROR",
            PENDING = "PENDING"
    }
    /**
        * <p>Describes whether a WorkSpace image needs to be updated with the latest drivers and
        *          other components required by Amazon WorkSpaces.</p>
        *          <note>
        *             <p>Only Windows 10 WorkSpace images can be programmatically updated at this time.</p>
        *          </note>
        */
    export interface UpdateResult {
            /**
                * <p>Indicates whether updated drivers or other components are available for the specified
                *          WorkSpace image.</p>
                */
            UpdateAvailable?: boolean;
            /**
                * <p>A description of whether updates for the WorkSpace image are pending or
                *          available.</p>
                */
            Description?: string;
    }
    export namespace UpdateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResult) => any;
    }
    /**
        * <p>Describes a WorkSpace image.</p>
        */
    export interface WorkspaceImage {
            /**
                * <p>The identifier of the image.</p>
                */
            ImageId?: string;
            /**
                * <p>The name of the image.</p>
                */
            Name?: string;
            /**
                * <p>The description of the image.</p>
                */
            Description?: string;
            /**
                * <p>The operating system that the image is running. </p>
                */
            OperatingSystem?: OperatingSystem;
            /**
                * <p>The status of the image.</p>
                */
            State?: WorkspaceImageState | string;
            /**
                * <p>Specifies whether the image is running on dedicated hardware. When Bring Your Own
                *          License (BYOL) is enabled, this value is set to <code>DEDICATED</code>. For more
                *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows
                *             Desktop Images</a>.</p>
                */
            RequiredTenancy?: WorkspaceImageRequiredTenancy | string;
            /**
                * <p>The error code that is returned for the image.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The text of the error message that is returned for the image.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The date when the image was created. If the image has been shared, the Amazon Web Services account that the image has been shared with sees the original creation date
                *          of the image.</p>
                */
            Created?: Date;
            /**
                * <p>The identifier of the Amazon Web Services account that owns the image.</p>
                */
            OwnerAccountId?: string;
            /**
                * <p>The updates (if any) that are available for the specified image.</p>
                */
            Updates?: UpdateResult;
    }
    export namespace WorkspaceImage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceImage) => any;
    }
    export interface DescribeWorkspaceImagesResult {
            /**
                * <p>Information about the images.</p>
                */
            Images?: WorkspaceImage[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspaceImagesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceImagesResult) => any;
    }
    export interface DescribeWorkspacesRequest {
            /**
                * <p>The identifiers of the WorkSpaces. You cannot combine this parameter with any other
                *          filter.</p>
                *          <p>Because the <a>CreateWorkspaces</a> operation is asynchronous, the identifier
                *          it returns is not immediately available. If you immediately call <a>DescribeWorkspaces</a> with this identifier, no information is returned.</p>
                */
            WorkspaceIds?: string[];
            /**
                * <p>The identifier of the directory. In addition, you can optionally specify a specific
                *          directory user (see <code>UserName</code>). You cannot combine this parameter with any
                *          other filter.</p>
                */
            DirectoryId?: string;
            /**
                * <p>The name of the directory user. You must specify this parameter with
                *             <code>DirectoryId</code>.</p>
                */
            UserName?: string;
            /**
                * <p>The identifier of the bundle. All WorkSpaces that are created from this bundle are
                *          retrieved. You cannot combine this parameter with any other filter.</p>
                */
            BundleId?: string;
            /**
                * <p>The maximum number of items to return.</p>
                */
            Limit?: number;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspacesRequest) => any;
    }
    export interface DescribeWorkspacesResult {
            /**
                * <p>Information about the WorkSpaces.</p>
                *          <p>Because <a>CreateWorkspaces</a> is an asynchronous operation, some of the
                *          returned information could be incomplete.</p>
                */
            Workspaces?: Workspace[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspacesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspacesResult) => any;
    }
    export interface DescribeWorkspacesConnectionStatusRequest {
            /**
                * <p>The identifiers of the WorkSpaces. You can specify up to 25 WorkSpaces.</p>
                */
            WorkspaceIds?: string[];
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspacesConnectionStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspacesConnectionStatusRequest) => any;
    }
    /**
        * <p>Describes the connection status of a WorkSpace.</p>
        */
    export interface WorkspaceConnectionStatus {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId?: string;
            /**
                * <p>The connection state of the WorkSpace. The connection state is unknown if the WorkSpace
                *          is stopped.</p>
                */
            ConnectionState?: ConnectionState | string;
            /**
                * <p>The timestamp of the connection status check.</p>
                */
            ConnectionStateCheckTimestamp?: Date;
            /**
                * <p>The timestamp of the last known user connection.</p>
                */
            LastKnownUserConnectionTimestamp?: Date;
    }
    export namespace WorkspaceConnectionStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceConnectionStatus) => any;
    }
    export interface DescribeWorkspacesConnectionStatusResult {
            /**
                * <p>Information about the connection status of the WorkSpace.</p>
                */
            WorkspacesConnectionStatus?: WorkspaceConnectionStatus[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeWorkspacesConnectionStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspacesConnectionStatusResult) => any;
    }
    export interface DescribeWorkspaceSnapshotsRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId: string | undefined;
    }
    export namespace DescribeWorkspaceSnapshotsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceSnapshotsRequest) => any;
    }
    /**
        * <p>Describes a snapshot.</p>
        */
    export interface Snapshot {
            /**
                * <p>The time when the snapshot was created.</p>
                */
            SnapshotTime?: Date;
    }
    export namespace Snapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Snapshot) => any;
    }
    export interface DescribeWorkspaceSnapshotsResult {
            /**
                * <p>Information about the snapshots that can be used to rebuild a WorkSpace. These snapshots
                *          include the user volume.</p>
                */
            RebuildSnapshots?: Snapshot[];
            /**
                * <p>Information about the snapshots that can be used to restore a WorkSpace. These snapshots
                *          include both the root volume and the user volume.</p>
                */
            RestoreSnapshots?: Snapshot[];
    }
    export namespace DescribeWorkspaceSnapshotsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorkspaceSnapshotsResult) => any;
    }
    export interface DisassociateConnectionAliasRequest {
            /**
                * <p>The identifier of the connection alias to disassociate.</p>
                */
            AliasId: string | undefined;
    }
    export namespace DisassociateConnectionAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateConnectionAliasRequest) => any;
    }
    export interface DisassociateConnectionAliasResult {
    }
    export namespace DisassociateConnectionAliasResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateConnectionAliasResult) => any;
    }
    export interface DisassociateIpGroupsRequest {
            /**
                * <p>The identifier of the directory.</p>
                */
            DirectoryId: string | undefined;
            /**
                * <p>The identifiers of one or more IP access control groups.</p>
                */
            GroupIds: string[] | undefined;
    }
    export namespace DisassociateIpGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateIpGroupsRequest) => any;
    }
    export interface DisassociateIpGroupsResult {
    }
    export namespace DisassociateIpGroupsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateIpGroupsResult) => any;
    }
    /**
        * <p>Describes a WorkSpace that could not be rebooted. (<a>RebootWorkspaces</a>),
        *          rebuilt (<a>RebuildWorkspaces</a>), restored (<a>RestoreWorkspace</a>), terminated (<a>TerminateWorkspaces</a>), started (<a>StartWorkspaces</a>), or stopped (<a>StopWorkspaces</a>).</p>
        */
    export interface FailedWorkspaceChangeRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId?: string;
            /**
                * <p>The error code that is returned if the WorkSpace cannot be rebooted.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The text of the error message that is returned if the WorkSpace cannot be
                *          rebooted.</p>
                */
            ErrorMessage?: string;
    }
    export namespace FailedWorkspaceChangeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedWorkspaceChangeRequest) => any;
    }
    /**
        * <p>The client branding attributes to import for iOS device types. These attributes are
        *          displayed on the iOS client login screen.</p>
        *          <important>
        *             <p>Client branding attributes are public facing. Ensure you do not include sensitive
        *             information.</p>
        *          </important>
        */
    export interface IosImportClientBrandingAttributes {
            /**
                * <p>The logo. This is the
                *          standard-resolution display that has a 1:1 pixel density (or @1x), where one pixel is equal
                *          to one point. The only image format accepted is a binary data object that is converted
                *          from a <code>.png</code> file.</p>
                */
            Logo?: Uint8Array;
            /**
                * <p>The @2x version of the logo. This is the higher resolution display that offers a scale
                *          factor of 2.0 (or @2x). The only image format accepted is a binary data object that is
                *          converted from a <code>.png</code> file.</p>
                *          <note>
                *             <p> For more information about iOS image size and resolution, see <a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution </a> in the <i>Apple Human Interface
                *                Guidelines</i>.</p>
                *          </note>
                */
            Logo2x?: Uint8Array;
            /**
                * <p>The @3x version of the logo. This is the higher resolution display that offers a scale
                *          factor of 3.0 (or @3x). The only image format accepted is a binary data object that is
                *          converted from a <code>.png</code> file.</p>
                *          <note>
                *             <p> For more information about iOS image size and resolution, see <a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/image-size-and-resolution/">Image Size and Resolution </a> in the <i>Apple Human Interface
                *                Guidelines</i>.</p>
                *          </note>
                */
            Logo3x?: Uint8Array;
            /**
                * <p>The support email. The company's customer support email address.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default email is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportEmail?: string;
            /**
                * <p>The support link. The link for the company's customer support page for their
                *          WorkSpace.</p>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>In each platform type, the <code>SupportEmail</code> and
                *                      <code>SupportLink</code> parameters are mutually exclusive. You can specify one
                *                   parameter for each platform type, but not both.</p>
                *                </li>
                *                <li>
                *                   <p>The default support link is <code>workspaces-feedback@amazon.com</code>.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            SupportLink?: string;
            /**
                * <p>The forgotten password link. This is the web address that users can go to if they forget
                *          the password for their WorkSpace.</p>
                */
            ForgotPasswordLink?: string;
            /**
                * <p>The login message. Specified as a key value pair, in which the key is a locale and the
                *          value is the localized message for that locale. The only key supported is
                *             <code>en_US</code>. </p>
                */
            LoginMessage?: Record<string, string>;
    }
    export namespace IosImportClientBrandingAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IosImportClientBrandingAttributes) => any;
    }
    export interface ImportClientBrandingRequest {
            /**
                * <p>The directory identifier of the WorkSpace for which you want to import client
                *          branding.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The branding information to import for Windows devices.</p>
                */
            DeviceTypeWindows?: DefaultImportClientBrandingAttributes;
            /**
                * <p>The branding information to import for macOS devices.</p>
                */
            DeviceTypeOsx?: DefaultImportClientBrandingAttributes;
            /**
                * <p>The branding information to import for Android devices.</p>
                */
            DeviceTypeAndroid?: DefaultImportClientBrandingAttributes;
            /**
                * <p>The branding information to import for iOS devices.</p>
                */
            DeviceTypeIos?: IosImportClientBrandingAttributes;
            /**
                * <p>The branding information to import for Linux devices.</p>
                */
            DeviceTypeLinux?: DefaultImportClientBrandingAttributes;
            /**
                * <p>The branding information to import for web access.</p>
                */
            DeviceTypeWeb?: DefaultImportClientBrandingAttributes;
    }
    export namespace ImportClientBrandingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportClientBrandingRequest) => any;
    }
    export interface ImportClientBrandingResult {
            /**
                * <p>The branding information configured for Windows devices.</p>
                */
            DeviceTypeWindows?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information configured for macOS devices.</p>
                */
            DeviceTypeOsx?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information configured for Android devices.</p>
                */
            DeviceTypeAndroid?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information configured for iOS devices.</p>
                */
            DeviceTypeIos?: IosClientBrandingAttributes;
            /**
                * <p>The branding information configured for Linux devices.</p>
                */
            DeviceTypeLinux?: DefaultClientBrandingAttributes;
            /**
                * <p>The branding information configured for web access.</p>
                */
            DeviceTypeWeb?: DefaultClientBrandingAttributes;
    }
    export namespace ImportClientBrandingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportClientBrandingResult) => any;
    }
    export enum WorkspaceImageIngestionProcess {
            BYOL_GRAPHICS = "BYOL_GRAPHICS",
            BYOL_GRAPHICSPRO = "BYOL_GRAPHICSPRO",
            BYOL_GRAPHICS_G4DN = "BYOL_GRAPHICS_G4DN",
            BYOL_REGULAR = "BYOL_REGULAR",
            BYOL_REGULAR_WSP = "BYOL_REGULAR_WSP"
    }
    export interface ImportWorkspaceImageRequest {
            /**
                * <p>The identifier of the EC2 image.</p>
                */
            Ec2ImageId: string | undefined;
            /**
                * <p>The ingestion process to be used when importing the image, depending on which protocol
                *          you want to use for your BYOL Workspace image, either PCoIP or WorkSpaces Streaming
                *          Protocol (WSP). To use WSP, specify a value that ends in <code>_WSP</code>. To use PCoIP,
                *          specify a value that does not end in <code>_WSP</code>. </p>
                *          <p>For non-GPU-enabled bundles (bundles other than Graphics or GraphicsPro), specify
                *             <code>BYOL_REGULAR</code> or <code>BYOL_REGULAR_WSP</code>, depending on the
                *          protocol.</p>
                */
            IngestionProcess: WorkspaceImageIngestionProcess | string | undefined;
            /**
                * <p>The name of the WorkSpace image.</p>
                */
            ImageName: string | undefined;
            /**
                * <p>The description of the WorkSpace image.</p>
                */
            ImageDescription: string | undefined;
            /**
                * <p>The tags. Each WorkSpaces resource can have a maximum of 50 tags.</p>
                */
            Tags?: Tag[];
            /**
                * <p>If specified, the version of Microsoft Office to subscribe to. Valid only for Windows 10
                *          BYOL images. For more information about subscribing to Office for BYOL images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html"> Bring
                *             Your Own Windows Desktop Licenses</a>.</p>
                *          <note>
                *             <p>Although this parameter is an array, only one item is allowed at this time.</p>
                *          </note>
                */
            Applications?: (Application | string)[];
    }
    export namespace ImportWorkspaceImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportWorkspaceImageRequest) => any;
    }
    export interface ImportWorkspaceImageResult {
            /**
                * <p>The identifier of the WorkSpace image.</p>
                */
            ImageId?: string;
    }
    export namespace ImportWorkspaceImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportWorkspaceImageResult) => any;
    }
    export interface ListAvailableManagementCidrRangesRequest {
            /**
                * <p>The IP address range to search. Specify an IP address range that is compatible with your
                *          network and in CIDR notation (that is, specify the range as an IPv4 CIDR block).</p>
                */
            ManagementCidrRangeConstraint: string | undefined;
            /**
                * <p>The maximum number of items to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>If you received a <code>NextToken</code> from a previous call that was paginated,
                *          provide this token to receive the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAvailableManagementCidrRangesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAvailableManagementCidrRangesRequest) => any;
    }
    export interface ListAvailableManagementCidrRangesResult {
            /**
                * <p>The list of available IP address ranges, specified as IPv4 CIDR blocks.</p>
                */
            ManagementCidrRanges?: string[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is null when there are
                *          no more results to return. </p>
                */
            NextToken?: string;
    }
    export namespace ListAvailableManagementCidrRangesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAvailableManagementCidrRangesResult) => any;
    }
    export interface MigrateWorkspaceRequest {
            /**
                * <p>The identifier of the WorkSpace to migrate from.</p>
                */
            SourceWorkspaceId: string | undefined;
            /**
                * <p>The identifier of the target bundle type to migrate the WorkSpace to.</p>
                */
            BundleId: string | undefined;
    }
    export namespace MigrateWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MigrateWorkspaceRequest) => any;
    }
    export interface MigrateWorkspaceResult {
            /**
                * <p>The original identifier of the WorkSpace that is being migrated.</p>
                */
            SourceWorkspaceId?: string;
            /**
                * <p>The new identifier of the WorkSpace that is being migrated. If the migration does not
                *          succeed, the target WorkSpace ID will not be used, and the WorkSpace will still have the
                *          original WorkSpace ID.</p>
                */
            TargetWorkspaceId?: string;
    }
    export namespace MigrateWorkspaceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MigrateWorkspaceResult) => any;
    }
    /**
        * <p>The properties of this WorkSpace are currently being modified. Try again in a moment.</p>
        */
    export class OperationInProgressException extends __BaseException {
            readonly name: "OperationInProgressException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationInProgressException, __BaseException>);
    }
    export interface ModifyAccountRequest {
            /**
                * <p>The status of BYOL.</p>
                */
            DedicatedTenancySupport?: DedicatedTenancySupportEnum | string;
            /**
                * <p>The IP address range, specified as an IPv4 CIDR block, for the management network
                *          interface. Specify an IP address range that is compatible with your network and in CIDR
                *          notation (that is, specify the range as an IPv4 CIDR block). The CIDR block size must be
                *          /16 (for example, 203.0.113.25/16). It must also be specified as available by the
                *             <code>ListAvailableManagementCidrRanges</code> operation.</p>
                */
            DedicatedTenancyManagementCidrRange?: string;
    }
    export namespace ModifyAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyAccountRequest) => any;
    }
    export interface ModifyAccountResult {
    }
    export namespace ModifyAccountResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyAccountResult) => any;
    }
    export interface ModifyClientPropertiesRequest {
            /**
                * <p>The resource identifiers, in the form of directory IDs.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Information about the Amazon WorkSpaces client.</p>
                */
            ClientProperties: ClientProperties | undefined;
    }
    export namespace ModifyClientPropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyClientPropertiesRequest) => any;
    }
    export interface ModifyClientPropertiesResult {
    }
    export namespace ModifyClientPropertiesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyClientPropertiesResult) => any;
    }
    export interface ModifySelfservicePermissionsRequest {
            /**
                * <p>The identifier of the directory.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The permissions to enable or disable self-service capabilities.</p>
                */
            SelfservicePermissions: SelfservicePermissions | undefined;
    }
    export namespace ModifySelfservicePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifySelfservicePermissionsRequest) => any;
    }
    export interface ModifySelfservicePermissionsResult {
    }
    export namespace ModifySelfservicePermissionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifySelfservicePermissionsResult) => any;
    }
    export interface ModifyWorkspaceAccessPropertiesRequest {
            /**
                * <p>The identifier of the directory.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The device types and operating systems to enable or disable for access.</p>
                */
            WorkspaceAccessProperties: WorkspaceAccessProperties | undefined;
    }
    export namespace ModifyWorkspaceAccessPropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspaceAccessPropertiesRequest) => any;
    }
    export interface ModifyWorkspaceAccessPropertiesResult {
    }
    export namespace ModifyWorkspaceAccessPropertiesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspaceAccessPropertiesResult) => any;
    }
    /**
        * <p>Describes the default properties that are used for creating WorkSpaces. For more
        *          information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/update-directory-details.html">Update Directory
        *             Details for Your WorkSpaces</a>. </p>
        */
    export interface WorkspaceCreationProperties {
            /**
                * <p>Indicates whether Amazon WorkDocs is enabled for your WorkSpaces.</p>
                *          <note>
                *             <p>If WorkDocs is already enabled for a WorkSpaces directory and you disable it, new
                *             WorkSpaces launched in the directory will not have WorkDocs enabled. However, WorkDocs
                *             remains enabled for any existing WorkSpaces, unless you either disable users' access to
                *             WorkDocs or you delete the WorkDocs site. To disable users' access to WorkDocs, see
                *                <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/inactive-user.html">Disabling Users</a> in the <i>Amazon WorkDocs Administration
                *                Guide</i>. To delete a WorkDocs site, see <a href="https://docs.aws.amazon.com/workdocs/latest/adminguide/manage-sites.html">Deleting a Site</a> in the
                *                <i>Amazon WorkDocs Administration Guide</i>.</p>
                *             <p>If you enable WorkDocs on a directory that already has existing WorkSpaces, the
                *             existing WorkSpaces and any new WorkSpaces that are launched in the directory will have
                *             WorkDocs enabled.</p>
                *          </note>
                */
            EnableWorkDocs?: boolean;
            /**
                * <p>Indicates whether internet access is enabled for your WorkSpaces.</p>
                */
            EnableInternetAccess?: boolean;
            /**
                * <p>The default organizational unit (OU) for your WorkSpaces directories. This string must
                *          be the full Lightweight Directory Access Protocol (LDAP) distinguished name for the target
                *          domain and OU. It must be in the form
                *                <code>"OU=<i>value</i>,DC=<i>value</i>,DC=<i>value</i>"</code>,
                *          where <i>value</i> is any string of characters, and the number of domain
                *          components (DCs) is two or more. For example,
                *             <code>OU=WorkSpaces_machines,DC=machines,DC=example,DC=com</code>. </p>
                *          <important>
                *             <ul>
                *                <li>
                *                   <p>To avoid errors, certain characters in the distinguished name must be escaped.
                *                   For more information, see <a href="https://docs.microsoft.com/previous-versions/windows/desktop/ldap/distinguished-names"> Distinguished Names</a> in the Microsoft documentation.</p>
                *                </li>
                *                <li>
                *                   <p>The API doesn't validate whether the OU exists.</p>
                *                </li>
                *             </ul>
                *          </important>
                */
            DefaultOu?: string;
            /**
                * <p>The identifier of your custom security group.</p>
                */
            CustomSecurityGroupId?: string;
            /**
                * <p>Indicates whether users are local administrators of their WorkSpaces.</p>
                */
            UserEnabledAsLocalAdministrator?: boolean;
            /**
                * <p>Indicates whether maintenance mode is enabled for your WorkSpaces. For more information,
                *          see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html">WorkSpace
                *             Maintenance</a>. </p>
                */
            EnableMaintenanceMode?: boolean;
    }
    export namespace WorkspaceCreationProperties {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkspaceCreationProperties) => any;
    }
    export interface ModifyWorkspaceCreationPropertiesRequest {
            /**
                * <p>The identifier of the directory.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The default properties for creating WorkSpaces.</p>
                */
            WorkspaceCreationProperties: WorkspaceCreationProperties | undefined;
    }
    export namespace ModifyWorkspaceCreationPropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspaceCreationPropertiesRequest) => any;
    }
    export interface ModifyWorkspaceCreationPropertiesResult {
    }
    export namespace ModifyWorkspaceCreationPropertiesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspaceCreationPropertiesResult) => any;
    }
    export interface ModifyWorkspacePropertiesRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId: string | undefined;
            /**
                * <p>The properties of the WorkSpace.</p>
                */
            WorkspaceProperties: WorkspaceProperties | undefined;
    }
    export namespace ModifyWorkspacePropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspacePropertiesRequest) => any;
    }
    export interface ModifyWorkspacePropertiesResult {
    }
    export namespace ModifyWorkspacePropertiesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspacePropertiesResult) => any;
    }
    /**
        * <p>The configuration of this WorkSpace is not supported for this operation. For more information, see
        *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/required-service-components.html">Required
        *             Configuration and Service Components for WorkSpaces </a>.</p>
        */
    export class UnsupportedWorkspaceConfigurationException extends __BaseException {
            readonly name: "UnsupportedWorkspaceConfigurationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedWorkspaceConfigurationException, __BaseException>);
    }
    export enum TargetWorkspaceState {
            ADMIN_MAINTENANCE = "ADMIN_MAINTENANCE",
            AVAILABLE = "AVAILABLE"
    }
    export interface ModifyWorkspaceStateRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId: string | undefined;
            /**
                * <p>The WorkSpace state.</p>
                */
            WorkspaceState: TargetWorkspaceState | string | undefined;
    }
    export namespace ModifyWorkspaceStateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspaceStateRequest) => any;
    }
    export interface ModifyWorkspaceStateResult {
    }
    export namespace ModifyWorkspaceStateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyWorkspaceStateResult) => any;
    }
    /**
        * <p>Describes the information used to reboot a WorkSpace.</p>
        */
    export interface RebootRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId: string | undefined;
    }
    export namespace RebootRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootRequest) => any;
    }
    export interface RebootWorkspacesRequest {
            /**
                * <p>The WorkSpaces to reboot. You can specify up to 25 WorkSpaces.</p>
                */
            RebootWorkspaceRequests: RebootRequest[] | undefined;
    }
    export namespace RebootWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootWorkspacesRequest) => any;
    }
    export interface RebootWorkspacesResult {
            /**
                * <p>Information about the WorkSpaces that could not be rebooted.</p>
                */
            FailedRequests?: FailedWorkspaceChangeRequest[];
    }
    export namespace RebootWorkspacesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootWorkspacesResult) => any;
    }
    /**
        * <p>Describes the information used to rebuild a WorkSpace.</p>
        */
    export interface RebuildRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId: string | undefined;
    }
    export namespace RebuildRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebuildRequest) => any;
    }
    export interface RebuildWorkspacesRequest {
            /**
                * <p>The WorkSpace to rebuild. You can specify a single WorkSpace.</p>
                */
            RebuildWorkspaceRequests: RebuildRequest[] | undefined;
    }
    export namespace RebuildWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebuildWorkspacesRequest) => any;
    }
    export interface RebuildWorkspacesResult {
            /**
                * <p>Information about the WorkSpace that could not be rebuilt.</p>
                */
            FailedRequests?: FailedWorkspaceChangeRequest[];
    }
    export namespace RebuildWorkspacesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebuildWorkspacesResult) => any;
    }
    export interface RegisterWorkspaceDirectoryRequest {
            /**
                * <p>The identifier of the directory. You cannot register a directory if it does not have a
                *          status of Active. If the directory does not have a status of Active, you will receive an
                *          InvalidResourceStateException error. If you have already registered the maximum number of
                *          directories that you can register with Amazon WorkSpaces, you will receive a
                *          ResourceLimitExceededException error. Deregister directories that you are not using for
                *          WorkSpaces, and try again.</p>
                */
            DirectoryId: string | undefined;
            /**
                * <p>The identifiers of the subnets for your virtual private cloud (VPC). Make sure that the
                *          subnets are in supported Availability Zones. The subnets must also be in separate
                *          Availability Zones. If these conditions are not met, you will receive an
                *          OperationNotSupportedException error.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>Indicates whether Amazon WorkDocs is enabled or disabled. If you have enabled this
                *          parameter and WorkDocs is not available in the Region, you will receive an
                *          OperationNotSupportedException error. Set <code>EnableWorkDocs</code> to disabled, and try
                *          again.</p>
                */
            EnableWorkDocs: boolean | undefined;
            /**
                * <p>Indicates whether self-service capabilities are enabled or disabled.</p>
                */
            EnableSelfService?: boolean;
            /**
                * <p>Indicates whether your WorkSpace directory is dedicated or shared. To use Bring Your Own
                *          License (BYOL) images, this value must be set to <code>DEDICATED</code> and your Amazon Web Services account must be enabled for BYOL. If your account has not been enabled for
                *          BYOL, you will receive an InvalidParameterValuesException error. For more information about
                *          BYOL images, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/byol-windows-images.html">Bring Your Own Windows
                *             Desktop Images</a>.</p>
                */
            Tenancy?: Tenancy | string;
            /**
                * <p>The tags associated with the directory.</p>
                */
            Tags?: Tag[];
    }
    export namespace RegisterWorkspaceDirectoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterWorkspaceDirectoryRequest) => any;
    }
    export interface RegisterWorkspaceDirectoryResult {
    }
    export namespace RegisterWorkspaceDirectoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterWorkspaceDirectoryResult) => any;
    }
    /**
        * <p>The configuration of this network is not supported for this operation, or your network configuration
        *          conflicts with the Amazon WorkSpaces management network IP range. For more information, see
        *          <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces-vpc.html">
        *             Configure a VPC for Amazon WorkSpaces</a>.</p>
        */
    export class UnsupportedNetworkConfigurationException extends __BaseException {
            readonly name: "UnsupportedNetworkConfigurationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedNetworkConfigurationException, __BaseException>);
    }
    /**
        * <p>The workspaces_DefaultRole role could not be found. If this is the first time you are registering a directory, you
        *          will need to create the workspaces_DefaultRole role before you can register a directory. For more information, see <a href="https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role">Creating the workspaces_DefaultRole Role</a>.</p>
        */
    export class WorkspacesDefaultRoleNotFoundException extends __BaseException {
            readonly name: "WorkspacesDefaultRoleNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WorkspacesDefaultRoleNotFoundException, __BaseException>);
    }
    export interface RestoreWorkspaceRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId: string | undefined;
    }
    export namespace RestoreWorkspaceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreWorkspaceRequest) => any;
    }
    export interface RestoreWorkspaceResult {
    }
    export namespace RestoreWorkspaceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreWorkspaceResult) => any;
    }
    export interface RevokeIpRulesRequest {
            /**
                * <p>The identifier of the group.</p>
                */
            GroupId: string | undefined;
            /**
                * <p>The rules to remove from the group.</p>
                */
            UserRules: string[] | undefined;
    }
    export namespace RevokeIpRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeIpRulesRequest) => any;
    }
    export interface RevokeIpRulesResult {
    }
    export namespace RevokeIpRulesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeIpRulesResult) => any;
    }
    /**
        * <p>Information used to start a WorkSpace.</p>
        */
    export interface StartRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId?: string;
    }
    export namespace StartRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRequest) => any;
    }
    export interface StartWorkspacesRequest {
            /**
                * <p>The WorkSpaces to start. You can specify up to 25 WorkSpaces.</p>
                */
            StartWorkspaceRequests: StartRequest[] | undefined;
    }
    export namespace StartWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartWorkspacesRequest) => any;
    }
    export interface StartWorkspacesResult {
            /**
                * <p>Information about the WorkSpaces that could not be started.</p>
                */
            FailedRequests?: FailedWorkspaceChangeRequest[];
    }
    export namespace StartWorkspacesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartWorkspacesResult) => any;
    }
    /**
        * <p>Describes the information used to stop a WorkSpace.</p>
        */
    export interface StopRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId?: string;
    }
    export namespace StopRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRequest) => any;
    }
    export interface StopWorkspacesRequest {
            /**
                * <p>The WorkSpaces to stop. You can specify up to 25 WorkSpaces.</p>
                */
            StopWorkspaceRequests: StopRequest[] | undefined;
    }
    export namespace StopWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopWorkspacesRequest) => any;
    }
    export interface StopWorkspacesResult {
            /**
                * <p>Information about the WorkSpaces that could not be stopped.</p>
                */
            FailedRequests?: FailedWorkspaceChangeRequest[];
    }
    export namespace StopWorkspacesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopWorkspacesResult) => any;
    }
    /**
        * <p>Describes the information used to terminate a WorkSpace.</p>
        */
    export interface TerminateRequest {
            /**
                * <p>The identifier of the WorkSpace.</p>
                */
            WorkspaceId: string | undefined;
    }
    export namespace TerminateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateRequest) => any;
    }
    export interface TerminateWorkspacesRequest {
            /**
                * <p>The WorkSpaces to terminate. You can specify up to 25 WorkSpaces.</p>
                */
            TerminateWorkspaceRequests: TerminateRequest[] | undefined;
    }
    export namespace TerminateWorkspacesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateWorkspacesRequest) => any;
    }
    export interface TerminateWorkspacesResult {
            /**
                * <p>Information about the WorkSpaces that could not be terminated.</p>
                */
            FailedRequests?: FailedWorkspaceChangeRequest[];
    }
    export namespace TerminateWorkspacesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateWorkspacesResult) => any;
    }
    export interface UpdateConnectClientAddInRequest {
            /**
                * <p>The identifier of the client add-in to update.</p>
                */
            AddInId: string | undefined;
            /**
                * <p>The directory identifier for which the client add-in is configured.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>The name of the client add-in.</p>
                */
            Name?: string;
            /**
                * <p>The endpoint URL of the Amazon Connect client add-in.</p>
                */
            URL?: string;
    }
    export namespace UpdateConnectClientAddInRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectClientAddInRequest) => any;
    }
    export interface UpdateConnectClientAddInResult {
    }
    export namespace UpdateConnectClientAddInResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectClientAddInResult) => any;
    }
    export interface UpdateConnectionAliasPermissionRequest {
            /**
                * <p>The identifier of the connection alias that you want to update permissions for.</p>
                */
            AliasId: string | undefined;
            /**
                * <p>Indicates whether to share or unshare the connection alias with the specified Amazon Web Services account.</p>
                */
            ConnectionAliasPermission: ConnectionAliasPermission | undefined;
    }
    export namespace UpdateConnectionAliasPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionAliasPermissionRequest) => any;
    }
    export interface UpdateConnectionAliasPermissionResult {
    }
    export namespace UpdateConnectionAliasPermissionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectionAliasPermissionResult) => any;
    }
    export interface UpdateRulesOfIpGroupRequest {
            /**
                * <p>The identifier of the group.</p>
                */
            GroupId: string | undefined;
            /**
                * <p>One or more rules.</p>
                */
            UserRules: IpRuleItem[] | undefined;
    }
    export namespace UpdateRulesOfIpGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRulesOfIpGroupRequest) => any;
    }
    export interface UpdateRulesOfIpGroupResult {
    }
    export namespace UpdateRulesOfIpGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRulesOfIpGroupResult) => any;
    }
    export interface UpdateWorkspaceBundleRequest {
            /**
                * <p>The identifier of the bundle.</p>
                */
            BundleId?: string;
            /**
                * <p>The identifier of the image.</p>
                */
            ImageId?: string;
    }
    export namespace UpdateWorkspaceBundleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceBundleRequest) => any;
    }
    export interface UpdateWorkspaceBundleResult {
    }
    export namespace UpdateWorkspaceBundleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceBundleResult) => any;
    }
    export interface UpdateWorkspaceImagePermissionRequest {
            /**
                * <p>The identifier of the image.</p>
                */
            ImageId: string | undefined;
            /**
                * <p>The permission to copy the image. This permission can be revoked only after an image has
                *          been shared.</p>
                */
            AllowCopyImage: boolean | undefined;
            /**
                * <p>The identifier of the Amazon Web Services account to share or unshare the image
                *          with.</p>
                *          <important>
                *             <p>Before sharing the image, confirm that you are sharing to the correct Amazon Web Services account ID.</p>
                *          </important>
                */
            SharedAccountId: string | undefined;
    }
    export namespace UpdateWorkspaceImagePermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceImagePermissionRequest) => any;
    }
    export interface UpdateWorkspaceImagePermissionResult {
    }
    export namespace UpdateWorkspaceImagePermissionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorkspaceImagePermissionResult) => any;
    }
}

declare module '@aws-sdk/client-workspaces/node_modules/@aws-sdk/client-workspaces/dist-types/models/WorkSpacesServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from WorkSpaces service.
        */
    export class WorkSpacesServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

