// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-nimble' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AcceptEulasCommandInput, AcceptEulasCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/AcceptEulasCommand";
    import { CreateLaunchProfileCommandInput, CreateLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateLaunchProfileCommand";
    import { CreateStreamingImageCommandInput, CreateStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingImageCommand";
    import { CreateStreamingSessionCommandInput, CreateStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingSessionCommand";
    import { CreateStreamingSessionStreamCommandInput, CreateStreamingSessionStreamCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingSessionStreamCommand";
    import { CreateStudioCommandInput, CreateStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStudioCommand";
    import { CreateStudioComponentCommandInput, CreateStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStudioComponentCommand";
    import { DeleteLaunchProfileCommandInput, DeleteLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteLaunchProfileCommand";
    import { DeleteLaunchProfileMemberCommandInput, DeleteLaunchProfileMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteLaunchProfileMemberCommand";
    import { DeleteStreamingImageCommandInput, DeleteStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStreamingImageCommand";
    import { DeleteStreamingSessionCommandInput, DeleteStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStreamingSessionCommand";
    import { DeleteStudioCommandInput, DeleteStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioCommand";
    import { DeleteStudioComponentCommandInput, DeleteStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioComponentCommand";
    import { DeleteStudioMemberCommandInput, DeleteStudioMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioMemberCommand";
    import { GetEulaCommandInput, GetEulaCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetEulaCommand";
    import { GetLaunchProfileCommandInput, GetLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileCommand";
    import { GetLaunchProfileDetailsCommandInput, GetLaunchProfileDetailsCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileDetailsCommand";
    import { GetLaunchProfileInitializationCommandInput, GetLaunchProfileInitializationCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileInitializationCommand";
    import { GetLaunchProfileMemberCommandInput, GetLaunchProfileMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileMemberCommand";
    import { GetStreamingImageCommandInput, GetStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingImageCommand";
    import { GetStreamingSessionCommandInput, GetStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingSessionCommand";
    import { GetStreamingSessionStreamCommandInput, GetStreamingSessionStreamCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingSessionStreamCommand";
    import { GetStudioCommandInput, GetStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioCommand";
    import { GetStudioComponentCommandInput, GetStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioComponentCommand";
    import { GetStudioMemberCommandInput, GetStudioMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioMemberCommand";
    import { ListEulaAcceptancesCommandInput, ListEulaAcceptancesCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListEulaAcceptancesCommand";
    import { ListEulasCommandInput, ListEulasCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListEulasCommand";
    import { ListLaunchProfileMembersCommandInput, ListLaunchProfileMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListLaunchProfileMembersCommand";
    import { ListLaunchProfilesCommandInput, ListLaunchProfilesCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListLaunchProfilesCommand";
    import { ListStreamingImagesCommandInput, ListStreamingImagesCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStreamingImagesCommand";
    import { ListStreamingSessionsCommandInput, ListStreamingSessionsCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStreamingSessionsCommand";
    import { ListStudioComponentsCommandInput, ListStudioComponentsCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudioComponentsCommand";
    import { ListStudioMembersCommandInput, ListStudioMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudioMembersCommand";
    import { ListStudiosCommandInput, ListStudiosCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudiosCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListTagsForResourceCommand";
    import { PutLaunchProfileMembersCommandInput, PutLaunchProfileMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/PutLaunchProfileMembersCommand";
    import { PutStudioMembersCommandInput, PutStudioMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/PutStudioMembersCommand";
    import { StartStreamingSessionCommandInput, StartStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StartStreamingSessionCommand";
    import { StartStudioSSOConfigurationRepairCommandInput, StartStudioSSOConfigurationRepairCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StartStudioSSOConfigurationRepairCommand";
    import { StopStreamingSessionCommandInput, StopStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StopStreamingSessionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UntagResourceCommand";
    import { UpdateLaunchProfileCommandInput, UpdateLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateLaunchProfileCommand";
    import { UpdateLaunchProfileMemberCommandInput, UpdateLaunchProfileMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateLaunchProfileMemberCommand";
    import { UpdateStreamingImageCommandInput, UpdateStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStreamingImageCommand";
    import { UpdateStudioCommandInput, UpdateStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStudioCommand";
    import { UpdateStudioComponentCommandInput, UpdateStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStudioComponentCommand";
    import { NimbleClient } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    /**
        * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides
        *             methods, schema, resources, parameters, and more to help you get the most out of Nimble
        *             Studio.</p>
        *         <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and
        *             interactive content teams to create content securely within a scalable, private cloud
        *             service.</p>
        */
    export class Nimble extends NimbleClient {
            /**
                * <p>Accept EULAs.</p>
                */
            acceptEulas(args: AcceptEulasCommandInput, options?: __HttpHandlerOptions): Promise<AcceptEulasCommandOutput>;
            acceptEulas(args: AcceptEulasCommandInput, cb: (err: any, data?: AcceptEulasCommandOutput) => void): void;
            acceptEulas(args: AcceptEulasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptEulasCommandOutput) => void): void;
            /**
                * <p>Create a launch profile.</p>
                */
            createLaunchProfile(args: CreateLaunchProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateLaunchProfileCommandOutput>;
            createLaunchProfile(args: CreateLaunchProfileCommandInput, cb: (err: any, data?: CreateLaunchProfileCommandOutput) => void): void;
            createLaunchProfile(args: CreateLaunchProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLaunchProfileCommandOutput) => void): void;
            /**
                * <p>Creates a streaming image resource in a studio.</p>
                */
            createStreamingImage(args: CreateStreamingImageCommandInput, options?: __HttpHandlerOptions): Promise<CreateStreamingImageCommandOutput>;
            createStreamingImage(args: CreateStreamingImageCommandInput, cb: (err: any, data?: CreateStreamingImageCommandOutput) => void): void;
            createStreamingImage(args: CreateStreamingImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStreamingImageCommandOutput) => void): void;
            /**
                * <p>Creates a streaming session in a studio.</p>
                *         <p>After invoking this operation, you must poll GetStreamingSession until the streaming
                *             session is in state READY.</p>
                */
            createStreamingSession(args: CreateStreamingSessionCommandInput, options?: __HttpHandlerOptions): Promise<CreateStreamingSessionCommandOutput>;
            createStreamingSession(args: CreateStreamingSessionCommandInput, cb: (err: any, data?: CreateStreamingSessionCommandOutput) => void): void;
            createStreamingSession(args: CreateStreamingSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStreamingSessionCommandOutput) => void): void;
            /**
                * <p>Creates a streaming session stream for a streaming session.</p>
                *         <p>After invoking this API, invoke GetStreamingSessionStream with the returned streamId
                *             to poll the resource until it is in state READY.</p>
                */
            createStreamingSessionStream(args: CreateStreamingSessionStreamCommandInput, options?: __HttpHandlerOptions): Promise<CreateStreamingSessionStreamCommandOutput>;
            createStreamingSessionStream(args: CreateStreamingSessionStreamCommandInput, cb: (err: any, data?: CreateStreamingSessionStreamCommandOutput) => void): void;
            createStreamingSessionStream(args: CreateStreamingSessionStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStreamingSessionStreamCommandOutput) => void): void;
            /**
                * <p>Create a new Studio.</p>
                *         <p>When creating a Studio, two IAM roles must be provided: the admin role and the user
                *             Role. These roles are assumed by your users when they log in to the Nimble Studio
                *             portal.</p>
                *         <p>The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for
                *             the portal to function properly.</p>
                *         <p>The Admin Role must have the AmazonNimbleStudio-StudioAdmin managed policy attached
                *             for the portal to function properly.</p>
                *         <p>You may optionally specify a KMS key in the StudioEncryptionConfiguration.</p>
                *         <p>In Nimble Studio, resource names, descriptions, initialization scripts, and other
                *             data you provide are always encrypted at rest using an KMS key. By default, this key is
                *             owned by Amazon Web Services and managed on your behalf. You may provide your own KMS
                *             key when calling CreateStudio to encrypt this data using a key you own and
                *             manage.</p>
                *         <p>When providing an KMS key during studio creation, Nimble Studio creates KMS
                *             grants in your account to provide your studio user and admin roles access to these KMS
                *             keys.</p>
                *         <p>If you delete this grant, the studio will no longer be accessible to your portal
                *             users.</p>
                *         <p>If you delete the studio KMS key, your studio will no longer be accessible.</p>
                */
            createStudio(args: CreateStudioCommandInput, options?: __HttpHandlerOptions): Promise<CreateStudioCommandOutput>;
            createStudio(args: CreateStudioCommandInput, cb: (err: any, data?: CreateStudioCommandOutput) => void): void;
            createStudio(args: CreateStudioCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStudioCommandOutput) => void): void;
            /**
                * <p>Creates a studio component resource.</p>
                */
            createStudioComponent(args: CreateStudioComponentCommandInput, options?: __HttpHandlerOptions): Promise<CreateStudioComponentCommandOutput>;
            createStudioComponent(args: CreateStudioComponentCommandInput, cb: (err: any, data?: CreateStudioComponentCommandOutput) => void): void;
            createStudioComponent(args: CreateStudioComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStudioComponentCommandOutput) => void): void;
            /**
                * <p>Permanently delete a launch profile.</p>
                */
            deleteLaunchProfile(args: DeleteLaunchProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLaunchProfileCommandOutput>;
            deleteLaunchProfile(args: DeleteLaunchProfileCommandInput, cb: (err: any, data?: DeleteLaunchProfileCommandOutput) => void): void;
            deleteLaunchProfile(args: DeleteLaunchProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLaunchProfileCommandOutput) => void): void;
            /**
                * <p>Delete a user from launch profile membership.</p>
                */
            deleteLaunchProfileMember(args: DeleteLaunchProfileMemberCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLaunchProfileMemberCommandOutput>;
            deleteLaunchProfileMember(args: DeleteLaunchProfileMemberCommandInput, cb: (err: any, data?: DeleteLaunchProfileMemberCommandOutput) => void): void;
            deleteLaunchProfileMember(args: DeleteLaunchProfileMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLaunchProfileMemberCommandOutput) => void): void;
            /**
                * <p>Delete streaming image.</p>
                */
            deleteStreamingImage(args: DeleteStreamingImageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStreamingImageCommandOutput>;
            deleteStreamingImage(args: DeleteStreamingImageCommandInput, cb: (err: any, data?: DeleteStreamingImageCommandOutput) => void): void;
            deleteStreamingImage(args: DeleteStreamingImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStreamingImageCommandOutput) => void): void;
            /**
                * <p>Deletes streaming session resource.</p>
                *         <p>After invoking this operation, use GetStreamingSession to poll the resource until it
                *             transitions to a DELETED state.</p>
                *         <p>A streaming session will count against your streaming session quota until it is marked
                *             DELETED.</p>
                */
            deleteStreamingSession(args: DeleteStreamingSessionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStreamingSessionCommandOutput>;
            deleteStreamingSession(args: DeleteStreamingSessionCommandInput, cb: (err: any, data?: DeleteStreamingSessionCommandOutput) => void): void;
            deleteStreamingSession(args: DeleteStreamingSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStreamingSessionCommandOutput) => void): void;
            /**
                * <p>Delete a studio resource.</p>
                */
            deleteStudio(args: DeleteStudioCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStudioCommandOutput>;
            deleteStudio(args: DeleteStudioCommandInput, cb: (err: any, data?: DeleteStudioCommandOutput) => void): void;
            deleteStudio(args: DeleteStudioCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStudioCommandOutput) => void): void;
            /**
                * <p>Deletes a studio component resource.</p>
                */
            deleteStudioComponent(args: DeleteStudioComponentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStudioComponentCommandOutput>;
            deleteStudioComponent(args: DeleteStudioComponentCommandInput, cb: (err: any, data?: DeleteStudioComponentCommandOutput) => void): void;
            deleteStudioComponent(args: DeleteStudioComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStudioComponentCommandOutput) => void): void;
            /**
                * <p>Delete a user from studio membership.</p>
                */
            deleteStudioMember(args: DeleteStudioMemberCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStudioMemberCommandOutput>;
            deleteStudioMember(args: DeleteStudioMemberCommandInput, cb: (err: any, data?: DeleteStudioMemberCommandOutput) => void): void;
            deleteStudioMember(args: DeleteStudioMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStudioMemberCommandOutput) => void): void;
            /**
                * <p>Get Eula.</p>
                */
            getEula(args: GetEulaCommandInput, options?: __HttpHandlerOptions): Promise<GetEulaCommandOutput>;
            getEula(args: GetEulaCommandInput, cb: (err: any, data?: GetEulaCommandOutput) => void): void;
            getEula(args: GetEulaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEulaCommandOutput) => void): void;
            /**
                * <p>Get a launch profile.</p>
                */
            getLaunchProfile(args: GetLaunchProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetLaunchProfileCommandOutput>;
            getLaunchProfile(args: GetLaunchProfileCommandInput, cb: (err: any, data?: GetLaunchProfileCommandOutput) => void): void;
            getLaunchProfile(args: GetLaunchProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLaunchProfileCommandOutput) => void): void;
            /**
                * <p>Launch profile details include the launch profile resource and summary information of
                *             resources that are used by, or available to, the launch profile. This includes the name
                *             and description of all studio components used by the launch profiles, and the name and
                *             description of streaming images that can be used with this launch profile.</p>
                */
            getLaunchProfileDetails(args: GetLaunchProfileDetailsCommandInput, options?: __HttpHandlerOptions): Promise<GetLaunchProfileDetailsCommandOutput>;
            getLaunchProfileDetails(args: GetLaunchProfileDetailsCommandInput, cb: (err: any, data?: GetLaunchProfileDetailsCommandOutput) => void): void;
            getLaunchProfileDetails(args: GetLaunchProfileDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLaunchProfileDetailsCommandOutput) => void): void;
            /**
                * <p>Get a launch profile initialization.</p>
                */
            getLaunchProfileInitialization(args: GetLaunchProfileInitializationCommandInput, options?: __HttpHandlerOptions): Promise<GetLaunchProfileInitializationCommandOutput>;
            getLaunchProfileInitialization(args: GetLaunchProfileInitializationCommandInput, cb: (err: any, data?: GetLaunchProfileInitializationCommandOutput) => void): void;
            getLaunchProfileInitialization(args: GetLaunchProfileInitializationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLaunchProfileInitializationCommandOutput) => void): void;
            /**
                * <p>Get a user persona in launch profile membership.</p>
                */
            getLaunchProfileMember(args: GetLaunchProfileMemberCommandInput, options?: __HttpHandlerOptions): Promise<GetLaunchProfileMemberCommandOutput>;
            getLaunchProfileMember(args: GetLaunchProfileMemberCommandInput, cb: (err: any, data?: GetLaunchProfileMemberCommandOutput) => void): void;
            getLaunchProfileMember(args: GetLaunchProfileMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLaunchProfileMemberCommandOutput) => void): void;
            /**
                * <p>Get streaming image.</p>
                */
            getStreamingImage(args: GetStreamingImageCommandInput, options?: __HttpHandlerOptions): Promise<GetStreamingImageCommandOutput>;
            getStreamingImage(args: GetStreamingImageCommandInput, cb: (err: any, data?: GetStreamingImageCommandOutput) => void): void;
            getStreamingImage(args: GetStreamingImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStreamingImageCommandOutput) => void): void;
            /**
                * <p>Gets StreamingSession resource.</p>
                *         <p>Invoke this operation to poll for a streaming session state while creating or deleting
                *             a session.</p>
                */
            getStreamingSession(args: GetStreamingSessionCommandInput, options?: __HttpHandlerOptions): Promise<GetStreamingSessionCommandOutput>;
            getStreamingSession(args: GetStreamingSessionCommandInput, cb: (err: any, data?: GetStreamingSessionCommandOutput) => void): void;
            getStreamingSession(args: GetStreamingSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStreamingSessionCommandOutput) => void): void;
            /**
                * <p>Gets a StreamingSessionStream for a streaming session.</p>
                *         <p>Invoke this operation to poll the resource after invoking
                *             CreateStreamingSessionStream.</p>
                *         <p>After the StreamingSessionStream changes to the state READY, the url property will
                *             contain a stream to be used with the DCV streaming client.</p>
                */
            getStreamingSessionStream(args: GetStreamingSessionStreamCommandInput, options?: __HttpHandlerOptions): Promise<GetStreamingSessionStreamCommandOutput>;
            getStreamingSessionStream(args: GetStreamingSessionStreamCommandInput, cb: (err: any, data?: GetStreamingSessionStreamCommandOutput) => void): void;
            getStreamingSessionStream(args: GetStreamingSessionStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStreamingSessionStreamCommandOutput) => void): void;
            /**
                * <p>Get a Studio resource.</p>
                */
            getStudio(args: GetStudioCommandInput, options?: __HttpHandlerOptions): Promise<GetStudioCommandOutput>;
            getStudio(args: GetStudioCommandInput, cb: (err: any, data?: GetStudioCommandOutput) => void): void;
            getStudio(args: GetStudioCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStudioCommandOutput) => void): void;
            /**
                * <p>Gets a studio component resource.</p>
                */
            getStudioComponent(args: GetStudioComponentCommandInput, options?: __HttpHandlerOptions): Promise<GetStudioComponentCommandOutput>;
            getStudioComponent(args: GetStudioComponentCommandInput, cb: (err: any, data?: GetStudioComponentCommandOutput) => void): void;
            getStudioComponent(args: GetStudioComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStudioComponentCommandOutput) => void): void;
            /**
                * <p>Get a user's membership in a studio.</p>
                */
            getStudioMember(args: GetStudioMemberCommandInput, options?: __HttpHandlerOptions): Promise<GetStudioMemberCommandOutput>;
            getStudioMember(args: GetStudioMemberCommandInput, cb: (err: any, data?: GetStudioMemberCommandOutput) => void): void;
            getStudioMember(args: GetStudioMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStudioMemberCommandOutput) => void): void;
            /**
                * <p>List Eula Acceptances.</p>
                */
            listEulaAcceptances(args: ListEulaAcceptancesCommandInput, options?: __HttpHandlerOptions): Promise<ListEulaAcceptancesCommandOutput>;
            listEulaAcceptances(args: ListEulaAcceptancesCommandInput, cb: (err: any, data?: ListEulaAcceptancesCommandOutput) => void): void;
            listEulaAcceptances(args: ListEulaAcceptancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEulaAcceptancesCommandOutput) => void): void;
            /**
                * <p>List Eulas.</p>
                */
            listEulas(args: ListEulasCommandInput, options?: __HttpHandlerOptions): Promise<ListEulasCommandOutput>;
            listEulas(args: ListEulasCommandInput, cb: (err: any, data?: ListEulasCommandOutput) => void): void;
            listEulas(args: ListEulasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEulasCommandOutput) => void): void;
            /**
                * <p>Get all users in a given launch profile membership.</p>
                */
            listLaunchProfileMembers(args: ListLaunchProfileMembersCommandInput, options?: __HttpHandlerOptions): Promise<ListLaunchProfileMembersCommandOutput>;
            listLaunchProfileMembers(args: ListLaunchProfileMembersCommandInput, cb: (err: any, data?: ListLaunchProfileMembersCommandOutput) => void): void;
            listLaunchProfileMembers(args: ListLaunchProfileMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLaunchProfileMembersCommandOutput) => void): void;
            /**
                * <p>List all the launch profiles a studio.</p>
                */
            listLaunchProfiles(args: ListLaunchProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListLaunchProfilesCommandOutput>;
            listLaunchProfiles(args: ListLaunchProfilesCommandInput, cb: (err: any, data?: ListLaunchProfilesCommandOutput) => void): void;
            listLaunchProfiles(args: ListLaunchProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLaunchProfilesCommandOutput) => void): void;
            /**
                * <p>List the streaming image resources available to this studio.</p>
                *         <p>This list will contain both images provided by Amazon Web Services, as well as
                *             streaming images that you have created in your studio.</p>
                */
            listStreamingImages(args: ListStreamingImagesCommandInput, options?: __HttpHandlerOptions): Promise<ListStreamingImagesCommandOutput>;
            listStreamingImages(args: ListStreamingImagesCommandInput, cb: (err: any, data?: ListStreamingImagesCommandOutput) => void): void;
            listStreamingImages(args: ListStreamingImagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStreamingImagesCommandOutput) => void): void;
            /**
                * <p>Lists the streaming sessions in a studio.</p>
                */
            listStreamingSessions(args: ListStreamingSessionsCommandInput, options?: __HttpHandlerOptions): Promise<ListStreamingSessionsCommandOutput>;
            listStreamingSessions(args: ListStreamingSessionsCommandInput, cb: (err: any, data?: ListStreamingSessionsCommandOutput) => void): void;
            listStreamingSessions(args: ListStreamingSessionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStreamingSessionsCommandOutput) => void): void;
            /**
                * <p>Lists the StudioComponents in a studio.</p>
                */
            listStudioComponents(args: ListStudioComponentsCommandInput, options?: __HttpHandlerOptions): Promise<ListStudioComponentsCommandOutput>;
            listStudioComponents(args: ListStudioComponentsCommandInput, cb: (err: any, data?: ListStudioComponentsCommandOutput) => void): void;
            listStudioComponents(args: ListStudioComponentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStudioComponentsCommandOutput) => void): void;
            /**
                * <p>Get all users in a given studio membership.</p>
                *         <note>
                *             <p>
                *                <code>ListStudioMembers</code> only returns admin members.</p>
                *         </note>
                */
            listStudioMembers(args: ListStudioMembersCommandInput, options?: __HttpHandlerOptions): Promise<ListStudioMembersCommandOutput>;
            listStudioMembers(args: ListStudioMembersCommandInput, cb: (err: any, data?: ListStudioMembersCommandOutput) => void): void;
            listStudioMembers(args: ListStudioMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStudioMembersCommandOutput) => void): void;
            /**
                * <p>List studios in your Amazon Web Services account in the requested Amazon Web Services
                *             Region.</p>
                */
            listStudios(args: ListStudiosCommandInput, options?: __HttpHandlerOptions): Promise<ListStudiosCommandOutput>;
            listStudios(args: ListStudiosCommandInput, cb: (err: any, data?: ListStudiosCommandOutput) => void): void;
            listStudios(args: ListStudiosCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListStudiosCommandOutput) => void): void;
            /**
                * <p>Gets the tags for a resource, given its Amazon Resource Names (ARN).</p>
                *         <p>This operation supports ARNs for all resource types in Nimble Studio that support
                *             tags, including studio, studio component, launch profile, streaming image, and streaming
                *             session. All resources that can be tagged will contain an ARN property, so you do not
                *             have to create this ARN yourself.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Add/update users with given persona to launch profile membership.</p>
                */
            putLaunchProfileMembers(args: PutLaunchProfileMembersCommandInput, options?: __HttpHandlerOptions): Promise<PutLaunchProfileMembersCommandOutput>;
            putLaunchProfileMembers(args: PutLaunchProfileMembersCommandInput, cb: (err: any, data?: PutLaunchProfileMembersCommandOutput) => void): void;
            putLaunchProfileMembers(args: PutLaunchProfileMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutLaunchProfileMembersCommandOutput) => void): void;
            /**
                * <p>Add/update users with given persona to studio membership.</p>
                */
            putStudioMembers(args: PutStudioMembersCommandInput, options?: __HttpHandlerOptions): Promise<PutStudioMembersCommandOutput>;
            putStudioMembers(args: PutStudioMembersCommandInput, cb: (err: any, data?: PutStudioMembersCommandOutput) => void): void;
            putStudioMembers(args: PutStudioMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutStudioMembersCommandOutput) => void): void;
            /**
                * <p> Transitions sessions from the STOPPED state into the READY state. The
                *             START_IN_PROGRESS state is the intermediate state between the STOPPED and READY
                *             states.</p>
                */
            startStreamingSession(args: StartStreamingSessionCommandInput, options?: __HttpHandlerOptions): Promise<StartStreamingSessionCommandOutput>;
            startStreamingSession(args: StartStreamingSessionCommandInput, cb: (err: any, data?: StartStreamingSessionCommandOutput) => void): void;
            startStreamingSession(args: StartStreamingSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartStreamingSessionCommandOutput) => void): void;
            /**
                * <p>Repairs the Amazon Web Services SSO configuration for a given studio.</p>
                *         <p>If the studio has a valid Amazon Web Services SSO configuration currently associated with
                *             it, this operation will fail with a validation error.</p>
                *         <p>If the studio does not have a valid Amazon Web Services SSO configuration currently
                *             associated with it, then a new Amazon Web Services SSO application is created for the studio
                *             and the studio is changed to the READY state.</p>
                *         <p>After the Amazon Web Services SSO application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.</p>
                */
            startStudioSSOConfigurationRepair(args: StartStudioSSOConfigurationRepairCommandInput, options?: __HttpHandlerOptions): Promise<StartStudioSSOConfigurationRepairCommandOutput>;
            startStudioSSOConfigurationRepair(args: StartStudioSSOConfigurationRepairCommandInput, cb: (err: any, data?: StartStudioSSOConfigurationRepairCommandOutput) => void): void;
            startStudioSSOConfigurationRepair(args: StartStudioSSOConfigurationRepairCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartStudioSSOConfigurationRepairCommandOutput) => void): void;
            /**
                * <p>Transitions sessions from the READY state into the STOPPED state. The STOP_IN_PROGRESS
                *             state is the intermediate state between the READY and STOPPED states.</p>
                */
            stopStreamingSession(args: StopStreamingSessionCommandInput, options?: __HttpHandlerOptions): Promise<StopStreamingSessionCommandOutput>;
            stopStreamingSession(args: StopStreamingSessionCommandInput, cb: (err: any, data?: StopStreamingSessionCommandOutput) => void): void;
            stopStreamingSession(args: StopStreamingSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopStreamingSessionCommandOutput) => void): void;
            /**
                * <p>Creates tags for a resource, given its ARN.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deletes the tags for a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Update a launch profile.</p>
                */
            updateLaunchProfile(args: UpdateLaunchProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLaunchProfileCommandOutput>;
            updateLaunchProfile(args: UpdateLaunchProfileCommandInput, cb: (err: any, data?: UpdateLaunchProfileCommandOutput) => void): void;
            updateLaunchProfile(args: UpdateLaunchProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLaunchProfileCommandOutput) => void): void;
            /**
                * <p>Update a user persona in launch profile membership.</p>
                */
            updateLaunchProfileMember(args: UpdateLaunchProfileMemberCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLaunchProfileMemberCommandOutput>;
            updateLaunchProfileMember(args: UpdateLaunchProfileMemberCommandInput, cb: (err: any, data?: UpdateLaunchProfileMemberCommandOutput) => void): void;
            updateLaunchProfileMember(args: UpdateLaunchProfileMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLaunchProfileMemberCommandOutput) => void): void;
            /**
                * <p>Update streaming image.</p>
                */
            updateStreamingImage(args: UpdateStreamingImageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStreamingImageCommandOutput>;
            updateStreamingImage(args: UpdateStreamingImageCommandInput, cb: (err: any, data?: UpdateStreamingImageCommandOutput) => void): void;
            updateStreamingImage(args: UpdateStreamingImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStreamingImageCommandOutput) => void): void;
            /**
                * <p>Update a Studio resource.</p>
                *         <p>Currently, this operation only supports updating the displayName of your
                *             studio.</p>
                */
            updateStudio(args: UpdateStudioCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStudioCommandOutput>;
            updateStudio(args: UpdateStudioCommandInput, cb: (err: any, data?: UpdateStudioCommandOutput) => void): void;
            updateStudio(args: UpdateStudioCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStudioCommandOutput) => void): void;
            /**
                * <p>Updates a studio component resource.</p>
                */
            updateStudioComponent(args: UpdateStudioComponentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStudioComponentCommandOutput>;
            updateStudioComponent(args: UpdateStudioComponentCommandInput, cb: (err: any, data?: UpdateStudioComponentCommandOutput) => void): void;
            updateStudioComponent(args: UpdateStudioComponentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStudioComponentCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/AcceptEulasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AcceptEulasRequest, AcceptEulasResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface AcceptEulasCommandInput extends AcceptEulasRequest {
    }
    export interface AcceptEulasCommandOutput extends AcceptEulasResponse, __MetadataBearer {
    }
    /**
        * <p>Accept EULAs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, AcceptEulasCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, AcceptEulasCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new AcceptEulasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AcceptEulasCommandInput} for command's `input` shape.
        * @see {@link AcceptEulasCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class AcceptEulasCommand extends $Command<AcceptEulasCommandInput, AcceptEulasCommandOutput, NimbleClientResolvedConfig> {
            readonly input: AcceptEulasCommandInput;
            constructor(input: AcceptEulasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AcceptEulasCommandInput, AcceptEulasCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateLaunchProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLaunchProfileRequest, CreateLaunchProfileResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface CreateLaunchProfileCommandInput extends CreateLaunchProfileRequest {
    }
    export interface CreateLaunchProfileCommandOutput extends CreateLaunchProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Create a launch profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, CreateLaunchProfileCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, CreateLaunchProfileCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new CreateLaunchProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLaunchProfileCommandInput} for command's `input` shape.
        * @see {@link CreateLaunchProfileCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class CreateLaunchProfileCommand extends $Command<CreateLaunchProfileCommandInput, CreateLaunchProfileCommandOutput, NimbleClientResolvedConfig> {
            readonly input: CreateLaunchProfileCommandInput;
            constructor(input: CreateLaunchProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLaunchProfileCommandInput, CreateLaunchProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateStreamingImageRequest, CreateStreamingImageResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface CreateStreamingImageCommandInput extends CreateStreamingImageRequest {
    }
    export interface CreateStreamingImageCommandOutput extends CreateStreamingImageResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a streaming image resource in a studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, CreateStreamingImageCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, CreateStreamingImageCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new CreateStreamingImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStreamingImageCommandInput} for command's `input` shape.
        * @see {@link CreateStreamingImageCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class CreateStreamingImageCommand extends $Command<CreateStreamingImageCommandInput, CreateStreamingImageCommandOutput, NimbleClientResolvedConfig> {
            readonly input: CreateStreamingImageCommandInput;
            constructor(input: CreateStreamingImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStreamingImageCommandInput, CreateStreamingImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateStreamingSessionRequest, CreateStreamingSessionResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface CreateStreamingSessionCommandInput extends CreateStreamingSessionRequest {
    }
    export interface CreateStreamingSessionCommandOutput extends CreateStreamingSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a streaming session in a studio.</p>
        *         <p>After invoking this operation, you must poll GetStreamingSession until the streaming
        *             session is in state READY.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, CreateStreamingSessionCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, CreateStreamingSessionCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new CreateStreamingSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStreamingSessionCommandInput} for command's `input` shape.
        * @see {@link CreateStreamingSessionCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class CreateStreamingSessionCommand extends $Command<CreateStreamingSessionCommandInput, CreateStreamingSessionCommandOutput, NimbleClientResolvedConfig> {
            readonly input: CreateStreamingSessionCommandInput;
            constructor(input: CreateStreamingSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStreamingSessionCommandInput, CreateStreamingSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingSessionStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateStreamingSessionStreamRequest, CreateStreamingSessionStreamResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface CreateStreamingSessionStreamCommandInput extends CreateStreamingSessionStreamRequest {
    }
    export interface CreateStreamingSessionStreamCommandOutput extends CreateStreamingSessionStreamResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a streaming session stream for a streaming session.</p>
        *         <p>After invoking this API, invoke GetStreamingSessionStream with the returned streamId
        *             to poll the resource until it is in state READY.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, CreateStreamingSessionStreamCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, CreateStreamingSessionStreamCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new CreateStreamingSessionStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStreamingSessionStreamCommandInput} for command's `input` shape.
        * @see {@link CreateStreamingSessionStreamCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class CreateStreamingSessionStreamCommand extends $Command<CreateStreamingSessionStreamCommandInput, CreateStreamingSessionStreamCommandOutput, NimbleClientResolvedConfig> {
            readonly input: CreateStreamingSessionStreamCommandInput;
            constructor(input: CreateStreamingSessionStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStreamingSessionStreamCommandInput, CreateStreamingSessionStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStudioCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateStudioRequest, CreateStudioResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface CreateStudioCommandInput extends CreateStudioRequest {
    }
    export interface CreateStudioCommandOutput extends CreateStudioResponse, __MetadataBearer {
    }
    /**
        * <p>Create a new Studio.</p>
        *         <p>When creating a Studio, two IAM roles must be provided: the admin role and the user
        *             Role. These roles are assumed by your users when they log in to the Nimble Studio
        *             portal.</p>
        *         <p>The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for
        *             the portal to function properly.</p>
        *         <p>The Admin Role must have the AmazonNimbleStudio-StudioAdmin managed policy attached
        *             for the portal to function properly.</p>
        *         <p>You may optionally specify a KMS key in the StudioEncryptionConfiguration.</p>
        *         <p>In Nimble Studio, resource names, descriptions, initialization scripts, and other
        *             data you provide are always encrypted at rest using an KMS key. By default, this key is
        *             owned by Amazon Web Services and managed on your behalf. You may provide your own KMS
        *             key when calling CreateStudio to encrypt this data using a key you own and
        *             manage.</p>
        *         <p>When providing an KMS key during studio creation, Nimble Studio creates KMS
        *             grants in your account to provide your studio user and admin roles access to these KMS
        *             keys.</p>
        *         <p>If you delete this grant, the studio will no longer be accessible to your portal
        *             users.</p>
        *         <p>If you delete the studio KMS key, your studio will no longer be accessible.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, CreateStudioCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, CreateStudioCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new CreateStudioCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStudioCommandInput} for command's `input` shape.
        * @see {@link CreateStudioCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class CreateStudioCommand extends $Command<CreateStudioCommandInput, CreateStudioCommandOutput, NimbleClientResolvedConfig> {
            readonly input: CreateStudioCommandInput;
            constructor(input: CreateStudioCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStudioCommandInput, CreateStudioCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStudioComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateStudioComponentRequest, CreateStudioComponentResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface CreateStudioComponentCommandInput extends CreateStudioComponentRequest {
    }
    export interface CreateStudioComponentCommandOutput extends CreateStudioComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a studio component resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, CreateStudioComponentCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, CreateStudioComponentCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new CreateStudioComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStudioComponentCommandInput} for command's `input` shape.
        * @see {@link CreateStudioComponentCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class CreateStudioComponentCommand extends $Command<CreateStudioComponentCommandInput, CreateStudioComponentCommandOutput, NimbleClientResolvedConfig> {
            readonly input: CreateStudioComponentCommandInput;
            constructor(input: CreateStudioComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStudioComponentCommandInput, CreateStudioComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteLaunchProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLaunchProfileRequest, DeleteLaunchProfileResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface DeleteLaunchProfileCommandInput extends DeleteLaunchProfileRequest {
    }
    export interface DeleteLaunchProfileCommandOutput extends DeleteLaunchProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Permanently delete a launch profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, DeleteLaunchProfileCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, DeleteLaunchProfileCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new DeleteLaunchProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLaunchProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteLaunchProfileCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class DeleteLaunchProfileCommand extends $Command<DeleteLaunchProfileCommandInput, DeleteLaunchProfileCommandOutput, NimbleClientResolvedConfig> {
            readonly input: DeleteLaunchProfileCommandInput;
            constructor(input: DeleteLaunchProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLaunchProfileCommandInput, DeleteLaunchProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteLaunchProfileMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLaunchProfileMemberRequest, DeleteLaunchProfileMemberResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface DeleteLaunchProfileMemberCommandInput extends DeleteLaunchProfileMemberRequest {
    }
    export interface DeleteLaunchProfileMemberCommandOutput extends DeleteLaunchProfileMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Delete a user from launch profile membership.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, DeleteLaunchProfileMemberCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, DeleteLaunchProfileMemberCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new DeleteLaunchProfileMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLaunchProfileMemberCommandInput} for command's `input` shape.
        * @see {@link DeleteLaunchProfileMemberCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class DeleteLaunchProfileMemberCommand extends $Command<DeleteLaunchProfileMemberCommandInput, DeleteLaunchProfileMemberCommandOutput, NimbleClientResolvedConfig> {
            readonly input: DeleteLaunchProfileMemberCommandInput;
            constructor(input: DeleteLaunchProfileMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLaunchProfileMemberCommandInput, DeleteLaunchProfileMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStreamingImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteStreamingImageRequest, DeleteStreamingImageResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface DeleteStreamingImageCommandInput extends DeleteStreamingImageRequest {
    }
    export interface DeleteStreamingImageCommandOutput extends DeleteStreamingImageResponse, __MetadataBearer {
    }
    /**
        * <p>Delete streaming image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, DeleteStreamingImageCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, DeleteStreamingImageCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new DeleteStreamingImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStreamingImageCommandInput} for command's `input` shape.
        * @see {@link DeleteStreamingImageCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class DeleteStreamingImageCommand extends $Command<DeleteStreamingImageCommandInput, DeleteStreamingImageCommandOutput, NimbleClientResolvedConfig> {
            readonly input: DeleteStreamingImageCommandInput;
            constructor(input: DeleteStreamingImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStreamingImageCommandInput, DeleteStreamingImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStreamingSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteStreamingSessionRequest, DeleteStreamingSessionResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface DeleteStreamingSessionCommandInput extends DeleteStreamingSessionRequest {
    }
    export interface DeleteStreamingSessionCommandOutput extends DeleteStreamingSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes streaming session resource.</p>
        *         <p>After invoking this operation, use GetStreamingSession to poll the resource until it
        *             transitions to a DELETED state.</p>
        *         <p>A streaming session will count against your streaming session quota until it is marked
        *             DELETED.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, DeleteStreamingSessionCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, DeleteStreamingSessionCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new DeleteStreamingSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStreamingSessionCommandInput} for command's `input` shape.
        * @see {@link DeleteStreamingSessionCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class DeleteStreamingSessionCommand extends $Command<DeleteStreamingSessionCommandInput, DeleteStreamingSessionCommandOutput, NimbleClientResolvedConfig> {
            readonly input: DeleteStreamingSessionCommandInput;
            constructor(input: DeleteStreamingSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStreamingSessionCommandInput, DeleteStreamingSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteStudioRequest, DeleteStudioResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface DeleteStudioCommandInput extends DeleteStudioRequest {
    }
    export interface DeleteStudioCommandOutput extends DeleteStudioResponse, __MetadataBearer {
    }
    /**
        * <p>Delete a studio resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, DeleteStudioCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, DeleteStudioCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new DeleteStudioCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStudioCommandInput} for command's `input` shape.
        * @see {@link DeleteStudioCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class DeleteStudioCommand extends $Command<DeleteStudioCommandInput, DeleteStudioCommandOutput, NimbleClientResolvedConfig> {
            readonly input: DeleteStudioCommandInput;
            constructor(input: DeleteStudioCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStudioCommandInput, DeleteStudioCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteStudioComponentRequest, DeleteStudioComponentResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface DeleteStudioComponentCommandInput extends DeleteStudioComponentRequest {
    }
    export interface DeleteStudioComponentCommandOutput extends DeleteStudioComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a studio component resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, DeleteStudioComponentCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, DeleteStudioComponentCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new DeleteStudioComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStudioComponentCommandInput} for command's `input` shape.
        * @see {@link DeleteStudioComponentCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class DeleteStudioComponentCommand extends $Command<DeleteStudioComponentCommandInput, DeleteStudioComponentCommandOutput, NimbleClientResolvedConfig> {
            readonly input: DeleteStudioComponentCommandInput;
            constructor(input: DeleteStudioComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStudioComponentCommandInput, DeleteStudioComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteStudioMemberRequest, DeleteStudioMemberResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface DeleteStudioMemberCommandInput extends DeleteStudioMemberRequest {
    }
    export interface DeleteStudioMemberCommandOutput extends DeleteStudioMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Delete a user from studio membership.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, DeleteStudioMemberCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, DeleteStudioMemberCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new DeleteStudioMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStudioMemberCommandInput} for command's `input` shape.
        * @see {@link DeleteStudioMemberCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class DeleteStudioMemberCommand extends $Command<DeleteStudioMemberCommandInput, DeleteStudioMemberCommandOutput, NimbleClientResolvedConfig> {
            readonly input: DeleteStudioMemberCommandInput;
            constructor(input: DeleteStudioMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStudioMemberCommandInput, DeleteStudioMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetEulaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetEulaRequest, GetEulaResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetEulaCommandInput extends GetEulaRequest {
    }
    export interface GetEulaCommandOutput extends GetEulaResponse, __MetadataBearer {
    }
    /**
        * <p>Get Eula.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetEulaCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetEulaCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetEulaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEulaCommandInput} for command's `input` shape.
        * @see {@link GetEulaCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetEulaCommand extends $Command<GetEulaCommandInput, GetEulaCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetEulaCommandInput;
            constructor(input: GetEulaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEulaCommandInput, GetEulaCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLaunchProfileRequest, GetLaunchProfileResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetLaunchProfileCommandInput extends GetLaunchProfileRequest {
    }
    export interface GetLaunchProfileCommandOutput extends GetLaunchProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Get a launch profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetLaunchProfileCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetLaunchProfileCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetLaunchProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLaunchProfileCommandInput} for command's `input` shape.
        * @see {@link GetLaunchProfileCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetLaunchProfileCommand extends $Command<GetLaunchProfileCommandInput, GetLaunchProfileCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetLaunchProfileCommandInput;
            constructor(input: GetLaunchProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLaunchProfileCommandInput, GetLaunchProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLaunchProfileDetailsRequest, GetLaunchProfileDetailsResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetLaunchProfileDetailsCommandInput extends GetLaunchProfileDetailsRequest {
    }
    export interface GetLaunchProfileDetailsCommandOutput extends GetLaunchProfileDetailsResponse, __MetadataBearer {
    }
    /**
        * <p>Launch profile details include the launch profile resource and summary information of
        *             resources that are used by, or available to, the launch profile. This includes the name
        *             and description of all studio components used by the launch profiles, and the name and
        *             description of streaming images that can be used with this launch profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetLaunchProfileDetailsCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetLaunchProfileDetailsCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetLaunchProfileDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLaunchProfileDetailsCommandInput} for command's `input` shape.
        * @see {@link GetLaunchProfileDetailsCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetLaunchProfileDetailsCommand extends $Command<GetLaunchProfileDetailsCommandInput, GetLaunchProfileDetailsCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetLaunchProfileDetailsCommandInput;
            constructor(input: GetLaunchProfileDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLaunchProfileDetailsCommandInput, GetLaunchProfileDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileInitializationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLaunchProfileInitializationRequest, GetLaunchProfileInitializationResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetLaunchProfileInitializationCommandInput extends GetLaunchProfileInitializationRequest {
    }
    export interface GetLaunchProfileInitializationCommandOutput extends GetLaunchProfileInitializationResponse, __MetadataBearer {
    }
    /**
        * <p>Get a launch profile initialization.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetLaunchProfileInitializationCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetLaunchProfileInitializationCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetLaunchProfileInitializationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLaunchProfileInitializationCommandInput} for command's `input` shape.
        * @see {@link GetLaunchProfileInitializationCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetLaunchProfileInitializationCommand extends $Command<GetLaunchProfileInitializationCommandInput, GetLaunchProfileInitializationCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetLaunchProfileInitializationCommandInput;
            constructor(input: GetLaunchProfileInitializationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLaunchProfileInitializationCommandInput, GetLaunchProfileInitializationCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLaunchProfileMemberRequest, GetLaunchProfileMemberResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetLaunchProfileMemberCommandInput extends GetLaunchProfileMemberRequest {
    }
    export interface GetLaunchProfileMemberCommandOutput extends GetLaunchProfileMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Get a user persona in launch profile membership.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetLaunchProfileMemberCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetLaunchProfileMemberCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetLaunchProfileMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLaunchProfileMemberCommandInput} for command's `input` shape.
        * @see {@link GetLaunchProfileMemberCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetLaunchProfileMemberCommand extends $Command<GetLaunchProfileMemberCommandInput, GetLaunchProfileMemberCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetLaunchProfileMemberCommandInput;
            constructor(input: GetLaunchProfileMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLaunchProfileMemberCommandInput, GetLaunchProfileMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetStreamingImageRequest, GetStreamingImageResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetStreamingImageCommandInput extends GetStreamingImageRequest {
    }
    export interface GetStreamingImageCommandOutput extends GetStreamingImageResponse, __MetadataBearer {
    }
    /**
        * <p>Get streaming image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetStreamingImageCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetStreamingImageCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetStreamingImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStreamingImageCommandInput} for command's `input` shape.
        * @see {@link GetStreamingImageCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetStreamingImageCommand extends $Command<GetStreamingImageCommandInput, GetStreamingImageCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetStreamingImageCommandInput;
            constructor(input: GetStreamingImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStreamingImageCommandInput, GetStreamingImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetStreamingSessionRequest, GetStreamingSessionResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetStreamingSessionCommandInput extends GetStreamingSessionRequest {
    }
    export interface GetStreamingSessionCommandOutput extends GetStreamingSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Gets StreamingSession resource.</p>
        *         <p>Invoke this operation to poll for a streaming session state while creating or deleting
        *             a session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetStreamingSessionCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetStreamingSessionCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetStreamingSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStreamingSessionCommandInput} for command's `input` shape.
        * @see {@link GetStreamingSessionCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetStreamingSessionCommand extends $Command<GetStreamingSessionCommandInput, GetStreamingSessionCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetStreamingSessionCommandInput;
            constructor(input: GetStreamingSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStreamingSessionCommandInput, GetStreamingSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingSessionStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetStreamingSessionStreamRequest, GetStreamingSessionStreamResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetStreamingSessionStreamCommandInput extends GetStreamingSessionStreamRequest {
    }
    export interface GetStreamingSessionStreamCommandOutput extends GetStreamingSessionStreamResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a StreamingSessionStream for a streaming session.</p>
        *         <p>Invoke this operation to poll the resource after invoking
        *             CreateStreamingSessionStream.</p>
        *         <p>After the StreamingSessionStream changes to the state READY, the url property will
        *             contain a stream to be used with the DCV streaming client.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetStreamingSessionStreamCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetStreamingSessionStreamCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetStreamingSessionStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStreamingSessionStreamCommandInput} for command's `input` shape.
        * @see {@link GetStreamingSessionStreamCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetStreamingSessionStreamCommand extends $Command<GetStreamingSessionStreamCommandInput, GetStreamingSessionStreamCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetStreamingSessionStreamCommandInput;
            constructor(input: GetStreamingSessionStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStreamingSessionStreamCommandInput, GetStreamingSessionStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetStudioRequest, GetStudioResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetStudioCommandInput extends GetStudioRequest {
    }
    export interface GetStudioCommandOutput extends GetStudioResponse, __MetadataBearer {
    }
    /**
        * <p>Get a Studio resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetStudioCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetStudioCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetStudioCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStudioCommandInput} for command's `input` shape.
        * @see {@link GetStudioCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetStudioCommand extends $Command<GetStudioCommandInput, GetStudioCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetStudioCommandInput;
            constructor(input: GetStudioCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStudioCommandInput, GetStudioCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetStudioComponentRequest, GetStudioComponentResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetStudioComponentCommandInput extends GetStudioComponentRequest {
    }
    export interface GetStudioComponentCommandOutput extends GetStudioComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a studio component resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetStudioComponentCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetStudioComponentCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetStudioComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStudioComponentCommandInput} for command's `input` shape.
        * @see {@link GetStudioComponentCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetStudioComponentCommand extends $Command<GetStudioComponentCommandInput, GetStudioComponentCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetStudioComponentCommandInput;
            constructor(input: GetStudioComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStudioComponentCommandInput, GetStudioComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetStudioMemberRequest, GetStudioMemberResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface GetStudioMemberCommandInput extends GetStudioMemberRequest {
    }
    export interface GetStudioMemberCommandOutput extends GetStudioMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Get a user's membership in a studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, GetStudioMemberCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, GetStudioMemberCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new GetStudioMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStudioMemberCommandInput} for command's `input` shape.
        * @see {@link GetStudioMemberCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class GetStudioMemberCommand extends $Command<GetStudioMemberCommandInput, GetStudioMemberCommandOutput, NimbleClientResolvedConfig> {
            readonly input: GetStudioMemberCommandInput;
            constructor(input: GetStudioMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStudioMemberCommandInput, GetStudioMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListEulaAcceptancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEulaAcceptancesRequest, ListEulaAcceptancesResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListEulaAcceptancesCommandInput extends ListEulaAcceptancesRequest {
    }
    export interface ListEulaAcceptancesCommandOutput extends ListEulaAcceptancesResponse, __MetadataBearer {
    }
    /**
        * <p>List Eula Acceptances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListEulaAcceptancesCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListEulaAcceptancesCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListEulaAcceptancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEulaAcceptancesCommandInput} for command's `input` shape.
        * @see {@link ListEulaAcceptancesCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListEulaAcceptancesCommand extends $Command<ListEulaAcceptancesCommandInput, ListEulaAcceptancesCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListEulaAcceptancesCommandInput;
            constructor(input: ListEulaAcceptancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEulaAcceptancesCommandInput, ListEulaAcceptancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListEulasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListEulasRequest, ListEulasResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListEulasCommandInput extends ListEulasRequest {
    }
    export interface ListEulasCommandOutput extends ListEulasResponse, __MetadataBearer {
    }
    /**
        * <p>List Eulas.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListEulasCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListEulasCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListEulasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEulasCommandInput} for command's `input` shape.
        * @see {@link ListEulasCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListEulasCommand extends $Command<ListEulasCommandInput, ListEulasCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListEulasCommandInput;
            constructor(input: ListEulasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEulasCommandInput, ListEulasCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListLaunchProfileMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLaunchProfileMembersRequest, ListLaunchProfileMembersResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListLaunchProfileMembersCommandInput extends ListLaunchProfileMembersRequest {
    }
    export interface ListLaunchProfileMembersCommandOutput extends ListLaunchProfileMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Get all users in a given launch profile membership.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListLaunchProfileMembersCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListLaunchProfileMembersCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListLaunchProfileMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLaunchProfileMembersCommandInput} for command's `input` shape.
        * @see {@link ListLaunchProfileMembersCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListLaunchProfileMembersCommand extends $Command<ListLaunchProfileMembersCommandInput, ListLaunchProfileMembersCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListLaunchProfileMembersCommandInput;
            constructor(input: ListLaunchProfileMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLaunchProfileMembersCommandInput, ListLaunchProfileMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListLaunchProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLaunchProfilesRequest, ListLaunchProfilesResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListLaunchProfilesCommandInput extends ListLaunchProfilesRequest {
    }
    export interface ListLaunchProfilesCommandOutput extends ListLaunchProfilesResponse, __MetadataBearer {
    }
    /**
        * <p>List all the launch profiles a studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListLaunchProfilesCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListLaunchProfilesCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListLaunchProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLaunchProfilesCommandInput} for command's `input` shape.
        * @see {@link ListLaunchProfilesCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListLaunchProfilesCommand extends $Command<ListLaunchProfilesCommandInput, ListLaunchProfilesCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListLaunchProfilesCommandInput;
            constructor(input: ListLaunchProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLaunchProfilesCommandInput, ListLaunchProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStreamingImagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStreamingImagesRequest, ListStreamingImagesResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListStreamingImagesCommandInput extends ListStreamingImagesRequest {
    }
    export interface ListStreamingImagesCommandOutput extends ListStreamingImagesResponse, __MetadataBearer {
    }
    /**
        * <p>List the streaming image resources available to this studio.</p>
        *         <p>This list will contain both images provided by Amazon Web Services, as well as
        *             streaming images that you have created in your studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListStreamingImagesCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListStreamingImagesCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListStreamingImagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStreamingImagesCommandInput} for command's `input` shape.
        * @see {@link ListStreamingImagesCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListStreamingImagesCommand extends $Command<ListStreamingImagesCommandInput, ListStreamingImagesCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListStreamingImagesCommandInput;
            constructor(input: ListStreamingImagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStreamingImagesCommandInput, ListStreamingImagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStreamingSessionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStreamingSessionsRequest, ListStreamingSessionsResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListStreamingSessionsCommandInput extends ListStreamingSessionsRequest {
    }
    export interface ListStreamingSessionsCommandOutput extends ListStreamingSessionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the streaming sessions in a studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListStreamingSessionsCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListStreamingSessionsCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListStreamingSessionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStreamingSessionsCommandInput} for command's `input` shape.
        * @see {@link ListStreamingSessionsCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListStreamingSessionsCommand extends $Command<ListStreamingSessionsCommandInput, ListStreamingSessionsCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListStreamingSessionsCommandInput;
            constructor(input: ListStreamingSessionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStreamingSessionsCommandInput, ListStreamingSessionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudioComponentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStudioComponentsRequest, ListStudioComponentsResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListStudioComponentsCommandInput extends ListStudioComponentsRequest {
    }
    export interface ListStudioComponentsCommandOutput extends ListStudioComponentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the StudioComponents in a studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListStudioComponentsCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListStudioComponentsCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListStudioComponentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStudioComponentsCommandInput} for command's `input` shape.
        * @see {@link ListStudioComponentsCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListStudioComponentsCommand extends $Command<ListStudioComponentsCommandInput, ListStudioComponentsCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListStudioComponentsCommandInput;
            constructor(input: ListStudioComponentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStudioComponentsCommandInput, ListStudioComponentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudioMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStudioMembersRequest, ListStudioMembersResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListStudioMembersCommandInput extends ListStudioMembersRequest {
    }
    export interface ListStudioMembersCommandOutput extends ListStudioMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Get all users in a given studio membership.</p>
        *         <note>
        *             <p>
        *                <code>ListStudioMembers</code> only returns admin members.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListStudioMembersCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListStudioMembersCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListStudioMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStudioMembersCommandInput} for command's `input` shape.
        * @see {@link ListStudioMembersCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListStudioMembersCommand extends $Command<ListStudioMembersCommandInput, ListStudioMembersCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListStudioMembersCommandInput;
            constructor(input: ListStudioMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStudioMembersCommandInput, ListStudioMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudiosCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListStudiosRequest, ListStudiosResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListStudiosCommandInput extends ListStudiosRequest {
    }
    export interface ListStudiosCommandOutput extends ListStudiosResponse, __MetadataBearer {
    }
    /**
        * <p>List studios in your Amazon Web Services account in the requested Amazon Web Services
        *             Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListStudiosCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListStudiosCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListStudiosCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListStudiosCommandInput} for command's `input` shape.
        * @see {@link ListStudiosCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListStudiosCommand extends $Command<ListStudiosCommandInput, ListStudiosCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListStudiosCommandInput;
            constructor(input: ListStudiosCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListStudiosCommandInput, ListStudiosCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the tags for a resource, given its Amazon Resource Names (ARN).</p>
        *         <p>This operation supports ARNs for all resource types in Nimble Studio that support
        *             tags, including studio, studio component, launch profile, streaming image, and streaming
        *             session. All resources that can be tagged will contain an ARN property, so you do not
        *             have to create this ARN yourself.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, ListTagsForResourceCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, ListTagsForResourceCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, NimbleClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/PutLaunchProfileMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutLaunchProfileMembersRequest, PutLaunchProfileMembersResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface PutLaunchProfileMembersCommandInput extends PutLaunchProfileMembersRequest {
    }
    export interface PutLaunchProfileMembersCommandOutput extends PutLaunchProfileMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Add/update users with given persona to launch profile membership.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, PutLaunchProfileMembersCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, PutLaunchProfileMembersCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new PutLaunchProfileMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutLaunchProfileMembersCommandInput} for command's `input` shape.
        * @see {@link PutLaunchProfileMembersCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class PutLaunchProfileMembersCommand extends $Command<PutLaunchProfileMembersCommandInput, PutLaunchProfileMembersCommandOutput, NimbleClientResolvedConfig> {
            readonly input: PutLaunchProfileMembersCommandInput;
            constructor(input: PutLaunchProfileMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutLaunchProfileMembersCommandInput, PutLaunchProfileMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/PutStudioMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutStudioMembersRequest, PutStudioMembersResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface PutStudioMembersCommandInput extends PutStudioMembersRequest {
    }
    export interface PutStudioMembersCommandOutput extends PutStudioMembersResponse, __MetadataBearer {
    }
    /**
        * <p>Add/update users with given persona to studio membership.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, PutStudioMembersCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, PutStudioMembersCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new PutStudioMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutStudioMembersCommandInput} for command's `input` shape.
        * @see {@link PutStudioMembersCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class PutStudioMembersCommand extends $Command<PutStudioMembersCommandInput, PutStudioMembersCommandOutput, NimbleClientResolvedConfig> {
            readonly input: PutStudioMembersCommandInput;
            constructor(input: PutStudioMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutStudioMembersCommandInput, PutStudioMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StartStreamingSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartStreamingSessionRequest, StartStreamingSessionResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface StartStreamingSessionCommandInput extends StartStreamingSessionRequest {
    }
    export interface StartStreamingSessionCommandOutput extends StartStreamingSessionResponse, __MetadataBearer {
    }
    /**
        * <p> Transitions sessions from the STOPPED state into the READY state. The
        *             START_IN_PROGRESS state is the intermediate state between the STOPPED and READY
        *             states.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, StartStreamingSessionCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, StartStreamingSessionCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new StartStreamingSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartStreamingSessionCommandInput} for command's `input` shape.
        * @see {@link StartStreamingSessionCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class StartStreamingSessionCommand extends $Command<StartStreamingSessionCommandInput, StartStreamingSessionCommandOutput, NimbleClientResolvedConfig> {
            readonly input: StartStreamingSessionCommandInput;
            constructor(input: StartStreamingSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartStreamingSessionCommandInput, StartStreamingSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StartStudioSSOConfigurationRepairCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartStudioSSOConfigurationRepairRequest, StartStudioSSOConfigurationRepairResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface StartStudioSSOConfigurationRepairCommandInput extends StartStudioSSOConfigurationRepairRequest {
    }
    export interface StartStudioSSOConfigurationRepairCommandOutput extends StartStudioSSOConfigurationRepairResponse, __MetadataBearer {
    }
    /**
        * <p>Repairs the Amazon Web Services SSO configuration for a given studio.</p>
        *         <p>If the studio has a valid Amazon Web Services SSO configuration currently associated with
        *             it, this operation will fail with a validation error.</p>
        *         <p>If the studio does not have a valid Amazon Web Services SSO configuration currently
        *             associated with it, then a new Amazon Web Services SSO application is created for the studio
        *             and the studio is changed to the READY state.</p>
        *         <p>After the Amazon Web Services SSO application is repaired, you must use the Amazon Nimble Studio console to add administrators and users to your studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, StartStudioSSOConfigurationRepairCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, StartStudioSSOConfigurationRepairCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new StartStudioSSOConfigurationRepairCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartStudioSSOConfigurationRepairCommandInput} for command's `input` shape.
        * @see {@link StartStudioSSOConfigurationRepairCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class StartStudioSSOConfigurationRepairCommand extends $Command<StartStudioSSOConfigurationRepairCommandInput, StartStudioSSOConfigurationRepairCommandOutput, NimbleClientResolvedConfig> {
            readonly input: StartStudioSSOConfigurationRepairCommandInput;
            constructor(input: StartStudioSSOConfigurationRepairCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartStudioSSOConfigurationRepairCommandInput, StartStudioSSOConfigurationRepairCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StopStreamingSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopStreamingSessionRequest, StopStreamingSessionResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface StopStreamingSessionCommandInput extends StopStreamingSessionRequest {
    }
    export interface StopStreamingSessionCommandOutput extends StopStreamingSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Transitions sessions from the READY state into the STOPPED state. The STOP_IN_PROGRESS
        *             state is the intermediate state between the READY and STOPPED states.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, StopStreamingSessionCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, StopStreamingSessionCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new StopStreamingSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopStreamingSessionCommandInput} for command's `input` shape.
        * @see {@link StopStreamingSessionCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class StopStreamingSessionCommand extends $Command<StopStreamingSessionCommandInput, StopStreamingSessionCommandOutput, NimbleClientResolvedConfig> {
            readonly input: StopStreamingSessionCommandInput;
            constructor(input: StopStreamingSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopStreamingSessionCommandInput, StopStreamingSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates tags for a resource, given its ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, TagResourceCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, TagResourceCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, NimbleClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the tags for a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, UntagResourceCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, UntagResourceCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, NimbleClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateLaunchProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLaunchProfileRequest, UpdateLaunchProfileResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface UpdateLaunchProfileCommandInput extends UpdateLaunchProfileRequest {
    }
    export interface UpdateLaunchProfileCommandOutput extends UpdateLaunchProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Update a launch profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, UpdateLaunchProfileCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, UpdateLaunchProfileCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new UpdateLaunchProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLaunchProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateLaunchProfileCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class UpdateLaunchProfileCommand extends $Command<UpdateLaunchProfileCommandInput, UpdateLaunchProfileCommandOutput, NimbleClientResolvedConfig> {
            readonly input: UpdateLaunchProfileCommandInput;
            constructor(input: UpdateLaunchProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLaunchProfileCommandInput, UpdateLaunchProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateLaunchProfileMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLaunchProfileMemberRequest, UpdateLaunchProfileMemberResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface UpdateLaunchProfileMemberCommandInput extends UpdateLaunchProfileMemberRequest {
    }
    export interface UpdateLaunchProfileMemberCommandOutput extends UpdateLaunchProfileMemberResponse, __MetadataBearer {
    }
    /**
        * <p>Update a user persona in launch profile membership.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, UpdateLaunchProfileMemberCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, UpdateLaunchProfileMemberCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new UpdateLaunchProfileMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLaunchProfileMemberCommandInput} for command's `input` shape.
        * @see {@link UpdateLaunchProfileMemberCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class UpdateLaunchProfileMemberCommand extends $Command<UpdateLaunchProfileMemberCommandInput, UpdateLaunchProfileMemberCommandOutput, NimbleClientResolvedConfig> {
            readonly input: UpdateLaunchProfileMemberCommandInput;
            constructor(input: UpdateLaunchProfileMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLaunchProfileMemberCommandInput, UpdateLaunchProfileMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStreamingImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateStreamingImageRequest, UpdateStreamingImageResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface UpdateStreamingImageCommandInput extends UpdateStreamingImageRequest {
    }
    export interface UpdateStreamingImageCommandOutput extends UpdateStreamingImageResponse, __MetadataBearer {
    }
    /**
        * <p>Update streaming image.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, UpdateStreamingImageCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, UpdateStreamingImageCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new UpdateStreamingImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStreamingImageCommandInput} for command's `input` shape.
        * @see {@link UpdateStreamingImageCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class UpdateStreamingImageCommand extends $Command<UpdateStreamingImageCommandInput, UpdateStreamingImageCommandOutput, NimbleClientResolvedConfig> {
            readonly input: UpdateStreamingImageCommandInput;
            constructor(input: UpdateStreamingImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStreamingImageCommandInput, UpdateStreamingImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStudioCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateStudioRequest, UpdateStudioResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface UpdateStudioCommandInput extends UpdateStudioRequest {
    }
    export interface UpdateStudioCommandOutput extends UpdateStudioResponse, __MetadataBearer {
    }
    /**
        * <p>Update a Studio resource.</p>
        *         <p>Currently, this operation only supports updating the displayName of your
        *             studio.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, UpdateStudioCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, UpdateStudioCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new UpdateStudioCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStudioCommandInput} for command's `input` shape.
        * @see {@link UpdateStudioCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class UpdateStudioCommand extends $Command<UpdateStudioCommandInput, UpdateStudioCommandOutput, NimbleClientResolvedConfig> {
            readonly input: UpdateStudioCommandInput;
            constructor(input: UpdateStudioCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStudioCommandInput, UpdateStudioCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStudioComponentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateStudioComponentRequest, UpdateStudioComponentResponse } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0";
    import { NimbleClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient";
    export interface UpdateStudioComponentCommandInput extends UpdateStudioComponentRequest {
    }
    export interface UpdateStudioComponentCommandOutput extends UpdateStudioComponentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a studio component resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NimbleClient, UpdateStudioComponentCommand } from "@aws-sdk/client-nimble"; // ES Modules import
        * // const { NimbleClient, UpdateStudioComponentCommand } = require("@aws-sdk/client-nimble"); // CommonJS import
        * const client = new NimbleClient(config);
        * const command = new UpdateStudioComponentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStudioComponentCommandInput} for command's `input` shape.
        * @see {@link UpdateStudioComponentCommandOutput} for command's `response` shape.
        * @see {@link NimbleClientResolvedConfig | config} for NimbleClient's `config` shape.
        *
        */
    export class UpdateStudioComponentCommand extends $Command<UpdateStudioComponentCommandInput, UpdateStudioComponentCommandOutput, NimbleClientResolvedConfig> {
            readonly input: UpdateStudioComponentCommandInput;
            constructor(input: UpdateStudioComponentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NimbleClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStudioComponentCommandInput, UpdateStudioComponentCommandOutput>;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/NimbleClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AcceptEulasCommandInput, AcceptEulasCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/AcceptEulasCommand";
    import { CreateLaunchProfileCommandInput, CreateLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateLaunchProfileCommand";
    import { CreateStreamingImageCommandInput, CreateStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingImageCommand";
    import { CreateStreamingSessionCommandInput, CreateStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingSessionCommand";
    import { CreateStreamingSessionStreamCommandInput, CreateStreamingSessionStreamCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStreamingSessionStreamCommand";
    import { CreateStudioCommandInput, CreateStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStudioCommand";
    import { CreateStudioComponentCommandInput, CreateStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/CreateStudioComponentCommand";
    import { DeleteLaunchProfileCommandInput, DeleteLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteLaunchProfileCommand";
    import { DeleteLaunchProfileMemberCommandInput, DeleteLaunchProfileMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteLaunchProfileMemberCommand";
    import { DeleteStreamingImageCommandInput, DeleteStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStreamingImageCommand";
    import { DeleteStreamingSessionCommandInput, DeleteStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStreamingSessionCommand";
    import { DeleteStudioCommandInput, DeleteStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioCommand";
    import { DeleteStudioComponentCommandInput, DeleteStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioComponentCommand";
    import { DeleteStudioMemberCommandInput, DeleteStudioMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/DeleteStudioMemberCommand";
    import { GetEulaCommandInput, GetEulaCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetEulaCommand";
    import { GetLaunchProfileCommandInput, GetLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileCommand";
    import { GetLaunchProfileDetailsCommandInput, GetLaunchProfileDetailsCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileDetailsCommand";
    import { GetLaunchProfileInitializationCommandInput, GetLaunchProfileInitializationCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileInitializationCommand";
    import { GetLaunchProfileMemberCommandInput, GetLaunchProfileMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetLaunchProfileMemberCommand";
    import { GetStreamingImageCommandInput, GetStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingImageCommand";
    import { GetStreamingSessionCommandInput, GetStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingSessionCommand";
    import { GetStreamingSessionStreamCommandInput, GetStreamingSessionStreamCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStreamingSessionStreamCommand";
    import { GetStudioCommandInput, GetStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioCommand";
    import { GetStudioComponentCommandInput, GetStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioComponentCommand";
    import { GetStudioMemberCommandInput, GetStudioMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/GetStudioMemberCommand";
    import { ListEulaAcceptancesCommandInput, ListEulaAcceptancesCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListEulaAcceptancesCommand";
    import { ListEulasCommandInput, ListEulasCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListEulasCommand";
    import { ListLaunchProfileMembersCommandInput, ListLaunchProfileMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListLaunchProfileMembersCommand";
    import { ListLaunchProfilesCommandInput, ListLaunchProfilesCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListLaunchProfilesCommand";
    import { ListStreamingImagesCommandInput, ListStreamingImagesCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStreamingImagesCommand";
    import { ListStreamingSessionsCommandInput, ListStreamingSessionsCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStreamingSessionsCommand";
    import { ListStudioComponentsCommandInput, ListStudioComponentsCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudioComponentsCommand";
    import { ListStudioMembersCommandInput, ListStudioMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudioMembersCommand";
    import { ListStudiosCommandInput, ListStudiosCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListStudiosCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/ListTagsForResourceCommand";
    import { PutLaunchProfileMembersCommandInput, PutLaunchProfileMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/PutLaunchProfileMembersCommand";
    import { PutStudioMembersCommandInput, PutStudioMembersCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/PutStudioMembersCommand";
    import { StartStreamingSessionCommandInput, StartStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StartStreamingSessionCommand";
    import { StartStudioSSOConfigurationRepairCommandInput, StartStudioSSOConfigurationRepairCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StartStudioSSOConfigurationRepairCommand";
    import { StopStreamingSessionCommandInput, StopStreamingSessionCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/StopStreamingSessionCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UntagResourceCommand";
    import { UpdateLaunchProfileCommandInput, UpdateLaunchProfileCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateLaunchProfileCommand";
    import { UpdateLaunchProfileMemberCommandInput, UpdateLaunchProfileMemberCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateLaunchProfileMemberCommand";
    import { UpdateStreamingImageCommandInput, UpdateStreamingImageCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStreamingImageCommand";
    import { UpdateStudioCommandInput, UpdateStudioCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStudioCommand";
    import { UpdateStudioComponentCommandInput, UpdateStudioComponentCommandOutput } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/commands/UpdateStudioComponentCommand";
    export type ServiceInputTypes = AcceptEulasCommandInput | CreateLaunchProfileCommandInput | CreateStreamingImageCommandInput | CreateStreamingSessionCommandInput | CreateStreamingSessionStreamCommandInput | CreateStudioCommandInput | CreateStudioComponentCommandInput | DeleteLaunchProfileCommandInput | DeleteLaunchProfileMemberCommandInput | DeleteStreamingImageCommandInput | DeleteStreamingSessionCommandInput | DeleteStudioCommandInput | DeleteStudioComponentCommandInput | DeleteStudioMemberCommandInput | GetEulaCommandInput | GetLaunchProfileCommandInput | GetLaunchProfileDetailsCommandInput | GetLaunchProfileInitializationCommandInput | GetLaunchProfileMemberCommandInput | GetStreamingImageCommandInput | GetStreamingSessionCommandInput | GetStreamingSessionStreamCommandInput | GetStudioCommandInput | GetStudioComponentCommandInput | GetStudioMemberCommandInput | ListEulaAcceptancesCommandInput | ListEulasCommandInput | ListLaunchProfileMembersCommandInput | ListLaunchProfilesCommandInput | ListStreamingImagesCommandInput | ListStreamingSessionsCommandInput | ListStudioComponentsCommandInput | ListStudioMembersCommandInput | ListStudiosCommandInput | ListTagsForResourceCommandInput | PutLaunchProfileMembersCommandInput | PutStudioMembersCommandInput | StartStreamingSessionCommandInput | StartStudioSSOConfigurationRepairCommandInput | StopStreamingSessionCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateLaunchProfileCommandInput | UpdateLaunchProfileMemberCommandInput | UpdateStreamingImageCommandInput | UpdateStudioCommandInput | UpdateStudioComponentCommandInput;
    export type ServiceOutputTypes = AcceptEulasCommandOutput | CreateLaunchProfileCommandOutput | CreateStreamingImageCommandOutput | CreateStreamingSessionCommandOutput | CreateStreamingSessionStreamCommandOutput | CreateStudioCommandOutput | CreateStudioComponentCommandOutput | DeleteLaunchProfileCommandOutput | DeleteLaunchProfileMemberCommandOutput | DeleteStreamingImageCommandOutput | DeleteStreamingSessionCommandOutput | DeleteStudioCommandOutput | DeleteStudioComponentCommandOutput | DeleteStudioMemberCommandOutput | GetEulaCommandOutput | GetLaunchProfileCommandOutput | GetLaunchProfileDetailsCommandOutput | GetLaunchProfileInitializationCommandOutput | GetLaunchProfileMemberCommandOutput | GetStreamingImageCommandOutput | GetStreamingSessionCommandOutput | GetStreamingSessionStreamCommandOutput | GetStudioCommandOutput | GetStudioComponentCommandOutput | GetStudioMemberCommandOutput | ListEulaAcceptancesCommandOutput | ListEulasCommandOutput | ListLaunchProfileMembersCommandOutput | ListLaunchProfilesCommandOutput | ListStreamingImagesCommandOutput | ListStreamingSessionsCommandOutput | ListStudioComponentsCommandOutput | ListStudioMembersCommandOutput | ListStudiosCommandOutput | ListTagsForResourceCommandOutput | PutLaunchProfileMembersCommandOutput | PutStudioMembersCommandOutput | StartStreamingSessionCommandOutput | StartStudioSSOConfigurationRepairCommandOutput | StopStreamingSessionCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateLaunchProfileCommandOutput | UpdateLaunchProfileMemberCommandOutput | UpdateStreamingImageCommandOutput | UpdateStudioCommandOutput | UpdateStudioComponentCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type NimbleClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of NimbleClient class constructor that set the region, credentials and other options.
        */
    export interface NimbleClientConfig extends NimbleClientConfigType {
    }
    type NimbleClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of NimbleClient class. This is resolved and normalized from the {@link NimbleClientConfig | constructor configuration interface}.
        */
    export interface NimbleClientResolvedConfig extends NimbleClientResolvedConfigType {
    }
    /**
        * <p>Welcome to the Amazon Nimble Studio API reference. This API reference provides
        *             methods, schema, resources, parameters, and more to help you get the most out of Nimble
        *             Studio.</p>
        *         <p>Nimble Studio is a virtual studio that empowers visual effects, animation, and
        *             interactive content teams to create content securely within a scalable, private cloud
        *             service.</p>
        */
    export class NimbleClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, NimbleClientResolvedConfig> {
            /**
                * The resolved configuration of NimbleClient class. This is resolved and normalized from the {@link NimbleClientConfig | constructor configuration interface}.
                */
            readonly config: NimbleClientResolvedConfig;
            constructor(configuration: NimbleClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { NimbleServiceException as __BaseException } from "@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/NimbleServiceException";
    export interface AcceptEulasRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The EULA ID.</p>
                */
            eulaIds?: string[];
            /**
                * <p>A collection of EULA IDs.</p>
                */
            studioId: string | undefined;
    }
    export namespace AcceptEulasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptEulasRequest) => any;
    }
    /**
        * <p>The acceptance of a EULA, required to use Amazon-provided streaming images.</p>
        */
    export interface EulaAcceptance {
            /**
                * <p>The Unix epoch timestamp in seconds for when the EULA was accepted.</p>
                */
            acceptedAt?: Date;
            /**
                * <p>The ID of the person who accepted the EULA.</p>
                */
            acceptedBy?: string;
            /**
                * <p>The ID of the acceptee.</p>
                */
            accepteeId?: string;
            /**
                * <p>The EULA acceptance ID.</p>
                */
            eulaAcceptanceId?: string;
            /**
                * <p>The EULA ID.</p>
                */
            eulaId?: string;
    }
    export namespace EulaAcceptance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EulaAcceptance) => any;
    }
    export interface AcceptEulasResponse {
            /**
                * <p>A collection of EULA acceptances.</p>
                */
            eulaAcceptances?: EulaAcceptance[];
    }
    export namespace AcceptEulasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptEulasResponse) => any;
    }
    /**
        * <p>You are not authorized to perform this operation. Check your IAM policies, and ensure
        *             that you are using the correct access keys.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * <p>A more specific error code.</p>
                */
            code?: string;
            /**
                * <p>The exception context.</p>
                */
            context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Another operation is in progress. </p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>A more specific error code.</p>
                */
            code?: string;
            /**
                * <p>The exception context.</p>
                */
            context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>An internal error has occurred. Please retry your request.</p>
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            $retryable: {};
            /**
                * <p>A more specific error code.</p>
                */
            code?: string;
            /**
                * <p>The exception context.</p>
                */
            context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    /**
        * <p>The specified resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>A more specific error code.</p>
                */
            code?: string;
            /**
                * <p>The exception context.</p>
                */
            context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Your current quota does not allow you to perform the request action. You can request
        *             increases for some quotas, and other quotas cannot be increased.</p>
        *         <p>Please use AWS Service Quotas to request an increase. </p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * <p>A more specific error code.</p>
                */
            code?: string;
            /**
                * <p>The exception context.</p>
                */
            context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The request throughput limit was exceeded.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            $retryable: {};
            /**
                * <p>A more specific error code.</p>
                */
            code?: string;
            /**
                * <p>The exception context.</p>
                */
            context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>One of the parameters in the request is invalid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>A more specific error code.</p>
                */
            code?: string;
            /**
                * <p>The exception context.</p>
                */
            context?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>An LDAP attribute of an Active Directory computer account, in the form of a name:value
        *             pair.</p>
        */
    export interface ActiveDirectoryComputerAttribute {
            /**
                * <p>The name for the LDAP attribute.</p>
                */
            name?: string;
            /**
                * <p>The value for the LDAP attribute.</p>
                */
            value?: string;
    }
    export namespace ActiveDirectoryComputerAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActiveDirectoryComputerAttribute) => any;
    }
    /**
        * <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
        *             resource.</p>
        */
    export interface ActiveDirectoryConfiguration {
            /**
                * <p>A collection of custom attributes for an Active Directory computer.</p>
                */
            computerAttributes?: ActiveDirectoryComputerAttribute[];
            /**
                * <p>The directory ID of the Directory Service for Microsoft Active Directory to access
                *             using this studio component.</p>
                */
            directoryId?: string;
            /**
                * <p>The distinguished name (DN) and organizational unit (OU) of an Active Directory
                *             computer.</p>
                */
            organizationalUnitDistinguishedName?: string;
    }
    export namespace ActiveDirectoryConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActiveDirectoryConfiguration) => any;
    }
    /**
        * <p>The configuration for a render farm that is associated with a studio resource.</p>
        */
    export interface ComputeFarmConfiguration {
            /**
                * <p>The name of an Active Directory user that is used on ComputeFarm worker
                *             instances.</p>
                */
            activeDirectoryUser?: string;
            /**
                * <p>The endpoint of the ComputeFarm that is accessed by the studio component
                *             resource.</p>
                */
            endpoint?: string;
    }
    export namespace ComputeFarmConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComputeFarmConfiguration) => any;
    }
    export enum StreamingClipboardMode {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    export enum StreamingInstanceType {
            g4dn_12xlarge = "g4dn.12xlarge",
            g4dn_16xlarge = "g4dn.16xlarge",
            g4dn_2xlarge = "g4dn.2xlarge",
            g4dn_4xlarge = "g4dn.4xlarge",
            g4dn_8xlarge = "g4dn.8xlarge",
            g4dn_xlarge = "g4dn.xlarge"
    }
    export enum StreamingSessionStorageMode {
            UPLOAD = "UPLOAD"
    }
    /**
        * <p>The upload storage root location (folder) on streaming workstations where files are
        *             uploaded.</p>
        */
    export interface StreamingSessionStorageRoot {
            /**
                * <p>The folder path in Linux workstations where files are uploaded.</p>
                */
            linux?: string;
            /**
                * <p>The folder path in Windows workstations where files are uploaded.</p>
                */
            windows?: string;
    }
    export namespace StreamingSessionStorageRoot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamingSessionStorageRoot) => any;
    }
    /**
        * <p>The configuration for a streaming session’s upload storage.</p>
        */
    export interface StreamConfigurationSessionStorage {
            /**
                * <p>The configuration for the upload storage root of the streaming session.</p>
                */
            root?: StreamingSessionStorageRoot;
            /**
                * <p>Allows artists to upload files to their workstations. The only valid option is
                *                 <code>UPLOAD</code>.</p>
                */
            mode: (StreamingSessionStorageMode | string)[] | undefined;
    }
    export namespace StreamConfigurationSessionStorage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamConfigurationSessionStorage) => any;
    }
    /**
        * <p>Configuration for streaming workstations created using this launch profile.</p>
        */
    export interface StreamConfigurationCreate {
            /**
                * <p>Enable or disable the use of the system clipboard to copy and paste between the
                *             streaming session and streaming client.</p>
                */
            clipboardMode: StreamingClipboardMode | string | undefined;
            /**
                * <p>The EC2 instance types that users can select from when launching a streaming session
                *             with this launch profile.</p>
                */
            ec2InstanceTypes: (StreamingInstanceType | string)[] | undefined;
            /**
                * <p>The length of time, in minutes, that a streaming session can be active before it is
                *             stopped or terminated. After this point, Nimble Studio automatically terminates or
                *             stops the session. The default length of time is 690 minutes, and the maximum length of
                *             time is 30 days.</p>
                */
            maxSessionLengthInMinutes?: number;
            /**
                * <p>The streaming images that users can select from when launching a streaming session
                *             with this launch profile.</p>
                */
            streamingImageIds: string[] | undefined;
            /**
                * <p>Integer that determines if you can start and stop your sessions and how long a session
                *             can stay in the STOPPED state. The default value is 0. The maximum value is 5760.</p>
                *         <p>If the value is missing or set to 0, your sessions can’t be stopped. If you then call
                *                 <code>StopStreamingSession</code>, the session fails. If the time that a session
                *             stays in the READY state exceeds the <code>maxSessionLengthInMinutes</code> value, the
                *             session will automatically be terminated (instead of stopped).</p>
                *         <p>If the value is set to a positive number, the session can be stopped. You can call
                *                 <code>StopStreamingSession</code> to stop sessions in the READY state. If the time
                *             that a session stays in the READY state exceeds the
                *                 <code>maxSessionLengthInMinutes</code> value, the session will automatically be
                *             stopped (instead of terminated).</p>
                */
            maxStoppedSessionLengthInMinutes?: number;
            /**
                * <p>(Optional) The upload storage for a streaming workstation that is created using this
                *             launch profile.</p>
                */
            sessionStorage?: StreamConfigurationSessionStorage;
    }
    export namespace StreamConfigurationCreate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamConfigurationCreate) => any;
    }
    export interface CreateLaunchProfileRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>Specifies the IDs of the EC2 subnets where streaming sessions will be accessible from.
                *             These subnets must support the specified instance types. </p>
                */
            ec2SubnetIds: string[] | undefined;
            /**
                * <p>The version number of the protocol that is used by the launch profile. The only valid
                *             version is "2021-03-31".</p>
                */
            launchProfileProtocolVersions: string[] | undefined;
            /**
                * <p>The name for the launch profile.</p>
                */
            name: string | undefined;
            /**
                * <p>A configuration for a streaming session.</p>
                */
            streamConfiguration: StreamConfigurationCreate | undefined;
            /**
                * <p>Unique identifiers for a collection of studio components that can be used with this
                *             launch profile.</p>
                */
            studioComponentIds: string[] | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateLaunchProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLaunchProfileRequest) => any;
    }
    export enum LaunchProfileState {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            READY = "READY",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS"
    }
    export enum LaunchProfileStatusCode {
            ENCRYPTION_KEY_ACCESS_DENIED = "ENCRYPTION_KEY_ACCESS_DENIED",
            ENCRYPTION_KEY_NOT_FOUND = "ENCRYPTION_KEY_NOT_FOUND",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            INVALID_SUBNETS_PROVIDED = "INVALID_SUBNETS_PROVIDED",
            LAUNCH_PROFILE_CREATED = "LAUNCH_PROFILE_CREATED",
            LAUNCH_PROFILE_CREATE_IN_PROGRESS = "LAUNCH_PROFILE_CREATE_IN_PROGRESS",
            LAUNCH_PROFILE_DELETED = "LAUNCH_PROFILE_DELETED",
            LAUNCH_PROFILE_DELETE_IN_PROGRESS = "LAUNCH_PROFILE_DELETE_IN_PROGRESS",
            LAUNCH_PROFILE_UPDATED = "LAUNCH_PROFILE_UPDATED",
            LAUNCH_PROFILE_UPDATE_IN_PROGRESS = "LAUNCH_PROFILE_UPDATE_IN_PROGRESS",
            LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED = "LAUNCH_PROFILE_WITH_STREAM_SESSIONS_NOT_DELETED",
            STREAMING_IMAGE_NOT_FOUND = "STREAMING_IMAGE_NOT_FOUND",
            STREAMING_IMAGE_NOT_READY = "STREAMING_IMAGE_NOT_READY"
    }
    /**
        * <p>A configuration for a streaming session.</p>
        */
    export interface StreamConfiguration {
            /**
                * <p>Enable or disable the use of the system clipboard to copy and paste between the
                *             streaming session and streaming client.</p>
                */
            clipboardMode: StreamingClipboardMode | string | undefined;
            /**
                * <p>The EC2 instance types that users can select from when launching a streaming session
                *             with this launch profile.</p>
                */
            ec2InstanceTypes: (StreamingInstanceType | string)[] | undefined;
            /**
                * <p>The length of time, in minutes, that a streaming session can be active before it is
                *             stopped or terminated. After this point, Nimble Studio automatically terminates or
                *             stops the session. The default length of time is 690 minutes, and the maximum length of
                *             time is 30 days.</p>
                */
            maxSessionLengthInMinutes?: number;
            /**
                * <p>The streaming images that users can select from when launching a streaming session
                *             with this launch profile.</p>
                */
            streamingImageIds: string[] | undefined;
            /**
                * <p>Integer that determines if you can start and stop your sessions and how long a session
                *             can stay in the STOPPED state. The default value is 0. The maximum value is 5760.</p>
                *         <p>If the value is missing or set to 0, your sessions can’t be stopped. If you then call
                *                 <code>StopStreamingSession</code>, the session fails. If the time that a session
                *             stays in the READY state exceeds the <code>maxSessionLengthInMinutes</code> value, the
                *             session will automatically be terminated (instead of stopped).</p>
                *         <p>If the value is set to a positive number, the session can be stopped. You can call
                *                 <code>StopStreamingSession</code> to stop sessions in the READY state. If the time
                *             that a session stays in the READY state exceeds the
                *                 <code>maxSessionLengthInMinutes</code> value, the session will automatically be
                *             stopped (instead of terminated).</p>
                */
            maxStoppedSessionLengthInMinutes?: number;
            /**
                * <p>(Optional) The upload storage for a streaming session.</p>
                */
            sessionStorage?: StreamConfigurationSessionStorage;
    }
    export namespace StreamConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamConfiguration) => any;
    }
    export enum LaunchProfileValidationState {
            VALIDATION_FAILED = "VALIDATION_FAILED",
            VALIDATION_FAILED_INTERNAL_SERVER_ERROR = "VALIDATION_FAILED_INTERNAL_SERVER_ERROR",
            VALIDATION_IN_PROGRESS = "VALIDATION_IN_PROGRESS",
            VALIDATION_NOT_STARTED = "VALIDATION_NOT_STARTED",
            VALIDATION_SUCCESS = "VALIDATION_SUCCESS"
    }
    export enum LaunchProfileValidationStatusCode {
            VALIDATION_FAILED_INTERNAL_SERVER_ERROR = "VALIDATION_FAILED_INTERNAL_SERVER_ERROR",
            VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY = "VALIDATION_FAILED_INVALID_ACTIVE_DIRECTORY",
            VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION = "VALIDATION_FAILED_INVALID_SECURITY_GROUP_ASSOCIATION",
            VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION = "VALIDATION_FAILED_INVALID_SUBNET_ROUTE_TABLE_ASSOCIATION",
            VALIDATION_FAILED_SUBNET_NOT_FOUND = "VALIDATION_FAILED_SUBNET_NOT_FOUND",
            VALIDATION_FAILED_UNAUTHORIZED = "VALIDATION_FAILED_UNAUTHORIZED",
            VALIDATION_IN_PROGRESS = "VALIDATION_IN_PROGRESS",
            VALIDATION_NOT_STARTED = "VALIDATION_NOT_STARTED",
            VALIDATION_SUCCESS = "VALIDATION_SUCCESS"
    }
    export enum LaunchProfileValidationType {
            VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT = "VALIDATE_ACTIVE_DIRECTORY_STUDIO_COMPONENT",
            VALIDATE_NETWORK_ACL_ASSOCIATION = "VALIDATE_NETWORK_ACL_ASSOCIATION",
            VALIDATE_SECURITY_GROUP_ASSOCIATION = "VALIDATE_SECURITY_GROUP_ASSOCIATION",
            VALIDATE_SUBNET_ASSOCIATION = "VALIDATE_SUBNET_ASSOCIATION"
    }
    /**
        * <p>The launch profile validation result.</p>
        */
    export interface ValidationResult {
            /**
                * <p>The type of the validation result.</p>
                */
            type: LaunchProfileValidationType | string | undefined;
            /**
                * <p>The current state.</p>
                */
            state: LaunchProfileValidationState | string | undefined;
            /**
                * <p>The status code. This will contain the failure reason if the state is
                *                 <code>VALIDATION_FAILED</code>.</p>
                */
            statusCode: LaunchProfileValidationStatusCode | string | undefined;
            /**
                * <p>The status message for the validation result.</p>
                */
            statusMessage: string | undefined;
    }
    export namespace ValidationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationResult) => any;
    }
    /**
        * <p>A launch profile controls your artist workforce’s access to studio components, like
        *             compute farms, shared file systems, managed file systems, and license server
        *             configurations, as well as instance types and Amazon Machine Images (AMIs). </p>
        *
        *         <p>Studio administrators create launch profiles in the Nimble Studio console.
        *             Artists can use their launch profiles to launch an instance from the Nimble Studio
        *             portal. Each user’s launch profile defines how they can launch a streaming session. By
        *             default, studio admins can use all launch profiles.</p>
        */
    export interface LaunchProfile {
            /**
                * <p>The ARN of the resource.</p>
                */
            arn?: string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The user ID of the user that created the launch profile.</p>
                */
            createdBy?: string;
            /**
                * <p>A human-readable description of the launch profile.</p>
                */
            description?: string;
            /**
                * <p>Unique identifiers for a collection of EC2 subnets.</p>
                */
            ec2SubnetIds?: string[];
            /**
                * <p>The launch profile ID.</p>
                */
            launchProfileId?: string;
            /**
                * <p>The version number of the protocol that is used by the launch profile. The only valid
                *             version is "2021-03-31".</p>
                */
            launchProfileProtocolVersions?: string[];
            /**
                * <p>A friendly name for the launch profile.</p>
                */
            name?: string;
            /**
                * <p>The current state.</p>
                */
            state?: LaunchProfileState | string;
            /**
                * <p>The status code.</p>
                */
            statusCode?: LaunchProfileStatusCode | string;
            /**
                * <p>The status message for the launch profile.</p>
                */
            statusMessage?: string;
            /**
                * <p>A configuration for a streaming session.</p>
                */
            streamConfiguration?: StreamConfiguration;
            /**
                * <p>Unique identifiers for a collection of studio components that can be used with this
                *             launch profile.</p>
                */
            studioComponentIds?: string[];
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was updated.</p>
                */
            updatedAt?: Date;
            /**
                * <p>The user ID of the user that most recently updated the resource.</p>
                */
            updatedBy?: string;
            /**
                * <p>The list of the latest validation results.</p>
                */
            validationResults?: ValidationResult[];
    }
    export namespace LaunchProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchProfile) => any;
    }
    export interface CreateLaunchProfileResponse {
            /**
                * <p>The launch profile.</p>
                */
            launchProfile?: LaunchProfile;
    }
    export namespace CreateLaunchProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLaunchProfileResponse) => any;
    }
    export interface CreateStreamingImageRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>A human-readable description of the streaming image.</p>
                */
            description?: string;
            /**
                * <p>The ID of an EC2 machine image with which to create this streaming image.</p>
                */
            ec2ImageId: string | undefined;
            /**
                * <p>A friendly name for a streaming image resource.</p>
                */
            name: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateStreamingImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingImageRequest) => any;
    }
    export enum StreamingImageEncryptionConfigurationKeyType {
            CUSTOMER_MANAGED_KEY = "CUSTOMER_MANAGED_KEY"
    }
    /**
        * <p>Specifies how a streaming image is encrypted.</p>
        */
    export interface StreamingImageEncryptionConfiguration {
            /**
                * <p>The ARN for a KMS key that is used to encrypt studio data.</p>
                */
            keyArn?: string;
            /**
                * <p>The type of KMS key that is used to encrypt studio data.</p>
                */
            keyType: StreamingImageEncryptionConfigurationKeyType | string | undefined;
    }
    export namespace StreamingImageEncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamingImageEncryptionConfiguration) => any;
    }
    export enum StreamingImageState {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            READY = "READY",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS"
    }
    export enum StreamingImageStatusCode {
            ACCESS_DENIED = "ACCESS_DENIED",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            STREAMING_IMAGE_CREATE_IN_PROGRESS = "STREAMING_IMAGE_CREATE_IN_PROGRESS",
            STREAMING_IMAGE_DELETED = "STREAMING_IMAGE_DELETED",
            STREAMING_IMAGE_DELETE_IN_PROGRESS = "STREAMING_IMAGE_DELETE_IN_PROGRESS",
            STREAMING_IMAGE_READY = "STREAMING_IMAGE_READY",
            STREAMING_IMAGE_UPDATE_IN_PROGRESS = "STREAMING_IMAGE_UPDATE_IN_PROGRESS"
    }
    /**
        * <p>Represents a streaming image resource.</p>
        *         <p>Streaming images are used by studio users to select which operating system and
        *             software they want to use in a Nimble Studio streaming session.</p>
        *         <p>Amazon provides a number of streaming images that include popular 3rd-party
        *             software.</p>
        *         <p>You can create your own streaming images using an Amazon Elastic Compute Cloud (Amazon
        *             EC2) machine image that you create for this purpose. You can also include software that
        *             your users require.</p>
        */
    export interface StreamingImage {
            /**
                * <p>The ARN of the resource.</p>
                */
            arn?: string;
            /**
                * <p>A human-readable description of the streaming image.</p>
                */
            description?: string;
            /**
                * <p>The ID of an EC2 machine image with which to create the streaming image.</p>
                */
            ec2ImageId?: string;
            /**
                * <p>The encryption configuration.</p>
                */
            encryptionConfiguration?: StreamingImageEncryptionConfiguration;
            /**
                * <p>The list of EULAs that must be accepted before a Streaming Session can be started
                *             using this streaming image.</p>
                */
            eulaIds?: string[];
            /**
                * <p>A friendly name for a streaming image resource.</p>
                */
            name?: string;
            /**
                * <p>The owner of the streaming image, either the studioId that contains the streaming
                *             image, or 'amazon' for images that are provided by Amazon Nimble Studio.</p>
                */
            owner?: string;
            /**
                * <p>The platform of the streaming image, either WINDOWS or LINUX.</p>
                */
            platform?: string;
            /**
                * <p>The current state.</p>
                */
            state?: StreamingImageState | string;
            /**
                * <p>The status code.</p>
                */
            statusCode?: StreamingImageStatusCode | string;
            /**
                * <p>The status message for the streaming image.</p>
                */
            statusMessage?: string;
            /**
                * <p>The ID of the streaming image.</p>
                */
            streamingImageId?: string;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace StreamingImage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamingImage) => any;
    }
    export interface CreateStreamingImageResponse {
            /**
                * <p>The streaming image.</p>
                */
            streamingImage?: StreamingImage;
    }
    export namespace CreateStreamingImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingImageResponse) => any;
    }
    export interface CreateStreamingSessionRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The EC2 Instance type used for the streaming session.</p>
                */
            ec2InstanceType?: StreamingInstanceType | string;
            /**
                * <p>The launch profile ID.</p>
                */
            launchProfileId?: string;
            /**
                * <p>The user ID of the user that owns the streaming session. The user that owns the
                *             session will be logging into the session and interacting with the virtual
                *             workstation.</p>
                */
            ownedBy?: string;
            /**
                * <p>The ID of the streaming image.</p>
                */
            streamingImageId?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateStreamingSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingSessionRequest) => any;
    }
    export enum StreamingSessionState {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            READY = "READY",
            START_FAILED = "START_FAILED",
            START_IN_PROGRESS = "START_IN_PROGRESS",
            STOPPED = "STOPPED",
            STOP_FAILED = "STOP_FAILED",
            STOP_IN_PROGRESS = "STOP_IN_PROGRESS"
    }
    export enum StreamingSessionStatusCode {
            ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR = "ACTIVE_DIRECTORY_DOMAIN_JOIN_ERROR",
            AMI_VALIDATION_ERROR = "AMI_VALIDATION_ERROR",
            DECRYPT_STREAMING_IMAGE_ERROR = "DECRYPT_STREAMING_IMAGE_ERROR",
            INITIALIZATION_SCRIPT_ERROR = "INITIALIZATION_SCRIPT_ERROR",
            INSUFFICIENT_CAPACITY = "INSUFFICIENT_CAPACITY",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            NETWORK_CONNECTION_ERROR = "NETWORK_CONNECTION_ERROR",
            NETWORK_INTERFACE_ERROR = "NETWORK_INTERFACE_ERROR",
            STREAMING_SESSION_CREATE_IN_PROGRESS = "STREAMING_SESSION_CREATE_IN_PROGRESS",
            STREAMING_SESSION_DELETED = "STREAMING_SESSION_DELETED",
            STREAMING_SESSION_DELETE_IN_PROGRESS = "STREAMING_SESSION_DELETE_IN_PROGRESS",
            STREAMING_SESSION_READY = "STREAMING_SESSION_READY",
            STREAMING_SESSION_STARTED = "STREAMING_SESSION_STARTED",
            STREAMING_SESSION_START_IN_PROGRESS = "STREAMING_SESSION_START_IN_PROGRESS",
            STREAMING_SESSION_STOPPED = "STREAMING_SESSION_STOPPED",
            STREAMING_SESSION_STOP_IN_PROGRESS = "STREAMING_SESSION_STOP_IN_PROGRESS"
    }
    /**
        * <p>A streaming session is a virtual workstation created using a particular launch
        *             profile.</p>
        */
    export interface StreamingSession {
            /**
                * <p>The ARN of the resource.</p>
                */
            arn?: string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The user ID of the user that created the streaming session.</p>
                */
            createdBy?: string;
            /**
                * <p>The EC2 Instance type used for the streaming session.</p>
                */
            ec2InstanceType?: string;
            /**
                * <p>The ID of the launch profile used to control access from the streaming session.</p>
                */
            launchProfileId?: string;
            /**
                * <p>The user ID of the user that owns the streaming session. The user that owns the
                *             session will be logging into the session and interacting with the virtual
                *             workstation.</p>
                */
            ownedBy?: string;
            /**
                * <p>The session ID.</p>
                */
            sessionId?: string;
            /**
                * <p>The current state.</p>
                */
            state?: StreamingSessionState | string;
            /**
                * <p>The status code.</p>
                */
            statusCode?: StreamingSessionStatusCode | string;
            /**
                * <p>The status message for the streaming session.</p>
                */
            statusMessage?: string;
            /**
                * <p>The ID of the streaming image.</p>
                */
            streamingImageId?: string;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The time the streaming session will automatically terminate if not terminated by the
                *             user.</p>
                */
            terminateAt?: Date;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was updated.</p>
                */
            updatedAt?: Date;
            /**
                * <p>The user ID of the user that most recently updated the resource.</p>
                */
            updatedBy?: string;
            /**
                * <p>The time the session entered STOP_IN_PROGRESS state.</p>
                */
            stoppedAt?: Date;
            /**
                * <p>The user ID of the user that stopped the streaming session.</p>
                */
            stoppedBy?: string;
            /**
                * <p>The time the session entered START_IN_PROGRESS state.</p>
                */
            startedAt?: Date;
            /**
                * <p>The user ID of the user that started the streaming session.</p>
                */
            startedBy?: string;
            /**
                * <p>The time the streaming session will automatically be stopped if the user doesn’t stop
                *             the session themselves. </p>
                */
            stopAt?: Date;
    }
    export namespace StreamingSession {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamingSession) => any;
    }
    export interface CreateStreamingSessionResponse {
            /**
                * <p>The session.</p>
                */
            session?: StreamingSession;
    }
    export namespace CreateStreamingSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingSessionResponse) => any;
    }
    export interface CreateStreamingSessionStreamRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The expiration time in seconds.</p>
                */
            expirationInSeconds?: number;
            /**
                * <p>The streaming session ID.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace CreateStreamingSessionStreamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingSessionStreamRequest) => any;
    }
    export enum StreamingSessionStreamState {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            READY = "READY"
    }
    export enum StreamingSessionStreamStatusCode {
            INTERNAL_ERROR = "INTERNAL_ERROR",
            NETWORK_CONNECTION_ERROR = "NETWORK_CONNECTION_ERROR",
            STREAM_CREATE_IN_PROGRESS = "STREAM_CREATE_IN_PROGRESS",
            STREAM_DELETED = "STREAM_DELETED",
            STREAM_DELETE_IN_PROGRESS = "STREAM_DELETE_IN_PROGRESS",
            STREAM_READY = "STREAM_READY"
    }
    /**
        * <p>A stream is an active connection to a streaming session, enabling a studio user to
        *             control the streaming session using a compatible client. Streaming session streams are
        *             compatible with the NICE DCV web client, included in the Nimble Studio portal, or
        *             the NICE DCV desktop client.</p>
        */
    export interface StreamingSessionStream {
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The user ID of the user that created the streaming session stream.</p>
                */
            createdBy?: string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource expires.</p>
                */
            expiresAt?: Date;
            /**
                * <p>The user ID of the user that owns the streaming session. The user that owns the
                *             session will be logging into the session and interacting with the virtual
                *             workstation.</p>
                */
            ownedBy?: string;
            /**
                * <p>The current state.</p>
                */
            state?: StreamingSessionStreamState | string;
            /**
                * <p>The streaming session stream status code.</p>
                */
            statusCode?: StreamingSessionStreamStatusCode | string;
            /**
                * <p>The stream ID.</p>
                */
            streamId?: string;
            /**
                * <p>The URL to connect to this stream using the DCV client.</p>
                */
            url?: string;
    }
    export namespace StreamingSessionStream {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamingSessionStream) => any;
    }
    export interface CreateStreamingSessionStreamResponse {
            /**
                * <p>The stream.</p>
                */
            stream?: StreamingSessionStream;
    }
    export namespace CreateStreamingSessionStreamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStreamingSessionStreamResponse) => any;
    }
    export enum StudioEncryptionConfigurationKeyType {
            AWS_OWNED_KEY = "AWS_OWNED_KEY",
            CUSTOMER_MANAGED_KEY = "CUSTOMER_MANAGED_KEY"
    }
    /**
        * <p>Configuration of the encryption method that is used for the studio.</p>
        */
    export interface StudioEncryptionConfiguration {
            /**
                * <p>The ARN for a KMS key that is used to encrypt studio data.</p>
                */
            keyArn?: string;
            /**
                * <p>The type of KMS key that is used to encrypt studio data.</p>
                */
            keyType: StudioEncryptionConfigurationKeyType | string | undefined;
    }
    export namespace StudioEncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StudioEncryptionConfiguration) => any;
    }
    export interface CreateStudioRequest {
            /**
                * <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio
                *             portal.</p>
                */
            adminRoleArn: string | undefined;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>A friendly name for the studio.</p>
                */
            displayName: string | undefined;
            /**
                * <p>The studio encryption configuration.</p>
                */
            studioEncryptionConfiguration?: StudioEncryptionConfiguration;
            /**
                * <p>The studio name that is used in the URL of the Nimble Studio portal when accessed
                *             by Nimble Studio users.</p>
                */
            studioName: string | undefined;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio
                *             portal.</p>
                */
            userRoleArn: string | undefined;
    }
    export namespace CreateStudioRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStudioRequest) => any;
    }
    export enum StudioState {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            READY = "READY",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS"
    }
    export enum StudioStatusCode {
            AWS_SSO_ACCESS_DENIED = "AWS_SSO_ACCESS_DENIED",
            AWS_SSO_CONFIGURATION_REPAIRED = "AWS_SSO_CONFIGURATION_REPAIRED",
            AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS = "AWS_SSO_CONFIGURATION_REPAIR_IN_PROGRESS",
            AWS_SSO_NOT_ENABLED = "AWS_SSO_NOT_ENABLED",
            ENCRYPTION_KEY_ACCESS_DENIED = "ENCRYPTION_KEY_ACCESS_DENIED",
            ENCRYPTION_KEY_NOT_FOUND = "ENCRYPTION_KEY_NOT_FOUND",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            ROLE_COULD_NOT_BE_ASSUMED = "ROLE_COULD_NOT_BE_ASSUMED",
            ROLE_NOT_OWNED_BY_STUDIO_OWNER = "ROLE_NOT_OWNED_BY_STUDIO_OWNER",
            STUDIO_CREATED = "STUDIO_CREATED",
            STUDIO_CREATE_IN_PROGRESS = "STUDIO_CREATE_IN_PROGRESS",
            STUDIO_DELETED = "STUDIO_DELETED",
            STUDIO_DELETE_IN_PROGRESS = "STUDIO_DELETE_IN_PROGRESS",
            STUDIO_UPDATED = "STUDIO_UPDATED",
            STUDIO_UPDATE_IN_PROGRESS = "STUDIO_UPDATE_IN_PROGRESS",
            STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED = "STUDIO_WITH_LAUNCH_PROFILES_NOT_DELETED",
            STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED = "STUDIO_WITH_STREAMING_IMAGES_NOT_DELETED",
            STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED = "STUDIO_WITH_STUDIO_COMPONENTS_NOT_DELETED"
    }
    /**
        * <p>Represents a studio resource.</p>
        *         <p>A studio is the core resource used with Nimble Studio. You must create a studio
        *             first, before any other resource type can be created. All other resources you create and
        *             manage in Nimble Studio are contained within a studio.</p>
        *         <p>When creating a studio, you must provides two IAM roles for use with the Nimble Studio portal. These roles are assumed by your users when they log in to the
        *                 Nimble Studio portal via Amazon Web Services SSO and your identity source.</p>
        *         <p>The user role must have the AmazonNimbleStudio-StudioUser managed policy attached for
        *             the portal to function properly.</p>
        *         <p>The admin role must have the AmazonNimbleStudio-StudioAdmin managed policy attached
        *             for the portal to function properly.</p>
        *         <p>Your studio roles must trust the identity.nimble.amazonaws.com service principal to
        *             function properly.</p>
        */
    export interface Studio {
            /**
                * <p>The IAM role that studio admins assume when logging in to the Nimble Studio
                *             portal.</p>
                */
            adminRoleArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely
                *             identifies it. ARNs are unique across all Regions.</p>
                */
            arn?: string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>A friendly name for the studio.</p>
                */
            displayName?: string;
            /**
                * <p>The Amazon Web Services Region where the studio resource is located.</p>
                */
            homeRegion?: string;
            /**
                * <p>The Amazon Web Services SSO application client ID used to integrate with Amazon Web Services SSO
                *             to enable Amazon Web Services SSO users to log in to Nimble Studio portal.</p>
                */
            ssoClientId?: string;
            /**
                * <p>The current state of the studio resource.</p>
                */
            state?: StudioState | string;
            /**
                * <p>Status codes that provide additional detail on the studio state.</p>
                */
            statusCode?: StudioStatusCode | string;
            /**
                * <p>Additional detail on the studio state.</p>
                */
            statusMessage?: string;
            /**
                * <p>Configuration of the encryption method that is used for the studio.</p>
                */
            studioEncryptionConfiguration?: StudioEncryptionConfiguration;
            /**
                * <p>The unique identifier for a studio resource. In Nimble Studio, all other
                *             resources are contained in a studio resource.</p>
                */
            studioId?: string;
            /**
                * <p>The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.</p>
                */
            studioName?: string;
            /**
                * <p>The address of the web page for the studio.</p>
                */
            studioUrl?: string;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was updated.</p>
                */
            updatedAt?: Date;
            /**
                * <p>The IAM role that studio users assume when logging in to the Nimble Studio
                *             portal.</p>
                */
            userRoleArn?: string;
    }
    export namespace Studio {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Studio) => any;
    }
    export interface CreateStudioResponse {
            /**
                * <p>Information about a studio.</p>
                */
            studio?: Studio;
    }
    export namespace CreateStudioResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStudioResponse) => any;
    }
    /**
        * <p>The configuration for a license service that is associated with a studio
        *             resource.</p>
        */
    export interface LicenseServiceConfiguration {
            /**
                * <p>The endpoint of the license service that is accessed by the studio component
                *             resource.</p>
                */
            endpoint?: string;
    }
    export namespace LicenseServiceConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LicenseServiceConfiguration) => any;
    }
    /**
        * <p>The configuration for a shared file storage system that is associated with a studio
        *             resource.</p>
        */
    export interface SharedFileSystemConfiguration {
            /**
                * <p>The endpoint of the shared file system that is accessed by the studio component
                *             resource.</p>
                */
            endpoint?: string;
            /**
                * <p>The unique identifier for a file system.</p>
                */
            fileSystemId?: string;
            /**
                * <p>The mount location for a shared file system on a Linux virtual workstation.</p>
                */
            linuxMountPoint?: string;
            /**
                * <p>The name of the file share.</p>
                */
            shareName?: string;
            /**
                * <p>The mount location for a shared file system on a Windows virtual workstation.</p>
                */
            windowsMountDrive?: string;
    }
    export namespace SharedFileSystemConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SharedFileSystemConfiguration) => any;
    }
    /**
        * <p>The configuration of the studio component, based on component type.</p>
        */
    export interface StudioComponentConfiguration {
            /**
                * <p>The configuration for a Microsoft Active Directory (Microsoft AD) studio
                *             resource.</p>
                */
            activeDirectoryConfiguration?: ActiveDirectoryConfiguration;
            /**
                * <p>The configuration for a render farm that is associated with a studio resource.</p>
                */
            computeFarmConfiguration?: ComputeFarmConfiguration;
            /**
                * <p>The configuration for a license service that is associated with a studio
                *             resource.</p>
                */
            licenseServiceConfiguration?: LicenseServiceConfiguration;
            /**
                * <p>The configuration for a shared file storage system that is associated with a studio
                *             resource.</p>
                */
            sharedFileSystemConfiguration?: SharedFileSystemConfiguration;
    }
    export namespace StudioComponentConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StudioComponentConfiguration) => any;
    }
    export enum LaunchProfilePlatform {
            LINUX = "LINUX",
            WINDOWS = "WINDOWS"
    }
    export enum StudioComponentInitializationScriptRunContext {
            SYSTEM_INITIALIZATION = "SYSTEM_INITIALIZATION",
            USER_INITIALIZATION = "USER_INITIALIZATION"
    }
    /**
        * <p>Initialization scripts for studio components.</p>
        */
    export interface StudioComponentInitializationScript {
            /**
                * <p>The version number of the protocol that is used by the launch profile. The only valid
                *             version is "2021-03-31".</p>
                */
            launchProfileProtocolVersion?: string;
            /**
                * <p>The platform of the initialization script, either WINDOWS or LINUX.</p>
                */
            platform?: LaunchProfilePlatform | string;
            /**
                * <p>The method to use when running the initialization script.</p>
                */
            runContext?: StudioComponentInitializationScriptRunContext | string;
            /**
                * <p>The initialization script.</p>
                */
            script?: string;
    }
    export namespace StudioComponentInitializationScript {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StudioComponentInitializationScript) => any;
    }
    /**
        * <p>A parameter for a studio component script, in the form of a key:value pair.</p>
        */
    export interface ScriptParameterKeyValue {
            /**
                * <p>A script parameter key.</p>
                */
            key?: string;
            /**
                * <p>A script parameter value.</p>
                */
            value?: string;
    }
    export namespace ScriptParameterKeyValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScriptParameterKeyValue) => any;
    }
    export enum StudioComponentSubtype {
            AMAZON_FSX_FOR_LUSTRE = "AMAZON_FSX_FOR_LUSTRE",
            AMAZON_FSX_FOR_WINDOWS = "AMAZON_FSX_FOR_WINDOWS",
            AWS_MANAGED_MICROSOFT_AD = "AWS_MANAGED_MICROSOFT_AD",
            CUSTOM = "CUSTOM"
    }
    export enum StudioComponentType {
            ACTIVE_DIRECTORY = "ACTIVE_DIRECTORY",
            COMPUTE_FARM = "COMPUTE_FARM",
            CUSTOM = "CUSTOM",
            LICENSE_SERVICE = "LICENSE_SERVICE",
            SHARED_FILE_SYSTEM = "SHARED_FILE_SYSTEM"
    }
    export interface CreateStudioComponentRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The configuration of the studio component, based on component type.</p>
                */
            configuration?: StudioComponentConfiguration;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The EC2 security groups that control access to the studio component.</p>
                */
            ec2SecurityGroupIds?: string[];
            /**
                * <p>Initialization scripts for studio components.</p>
                */
            initializationScripts?: StudioComponentInitializationScript[];
            /**
                * <p>The name for the studio component.</p>
                */
            name: string | undefined;
            /**
                * <p>Parameters for the studio component scripts.</p>
                */
            scriptParameters?: ScriptParameterKeyValue[];
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
            /**
                * <p>The specific subtype of a studio component.</p>
                */
            subtype?: StudioComponentSubtype | string;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The type of the studio component.</p>
                */
            type: StudioComponentType | string | undefined;
            /**
                * <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>
                */
            secureInitializationRoleArn?: string;
            /**
                * <p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>
                */
            runtimeRoleArn?: string;
    }
    export namespace CreateStudioComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStudioComponentRequest) => any;
    }
    export enum StudioComponentState {
            CREATE_FAILED = "CREATE_FAILED",
            CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
            DELETED = "DELETED",
            DELETE_FAILED = "DELETE_FAILED",
            DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
            READY = "READY",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS"
    }
    export enum StudioComponentStatusCode {
            ACTIVE_DIRECTORY_ALREADY_EXISTS = "ACTIVE_DIRECTORY_ALREADY_EXISTS",
            ENCRYPTION_KEY_ACCESS_DENIED = "ENCRYPTION_KEY_ACCESS_DENIED",
            ENCRYPTION_KEY_NOT_FOUND = "ENCRYPTION_KEY_NOT_FOUND",
            INTERNAL_ERROR = "INTERNAL_ERROR",
            STUDIO_COMPONENT_CREATED = "STUDIO_COMPONENT_CREATED",
            STUDIO_COMPONENT_CREATE_IN_PROGRESS = "STUDIO_COMPONENT_CREATE_IN_PROGRESS",
            STUDIO_COMPONENT_DELETED = "STUDIO_COMPONENT_DELETED",
            STUDIO_COMPONENT_DELETE_IN_PROGRESS = "STUDIO_COMPONENT_DELETE_IN_PROGRESS",
            STUDIO_COMPONENT_UPDATED = "STUDIO_COMPONENT_UPDATED",
            STUDIO_COMPONENT_UPDATE_IN_PROGRESS = "STUDIO_COMPONENT_UPDATE_IN_PROGRESS"
    }
    /**
        * <p>A studio component represents a network resource to be used by a studio's users and
        *             workflows. A typical studio contains studio components for each of the following: render
        *             farm, Active Directory, licensing, and file system.</p>
        *         <p>Access to a studio component is managed by specifying security groups for the
        *             resource, as well as its endpoint.</p>
        *         <p>A studio component also has a set of initialization scripts that are returned by
        *                 <code>GetLaunchProfileInitialization</code>. These initialization scripts run on
        *             streaming sessions when they start. They provide users with flexibility in controlling
        *             how the studio resources are configured on a streaming session.</p>
        */
    export interface StudioComponent {
            /**
                * <p>The ARN of the resource.</p>
                */
            arn?: string;
            /**
                * <p>The configuration of the studio component, based on component type.</p>
                */
            configuration?: StudioComponentConfiguration;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The user ID of the user that created the studio component.</p>
                */
            createdBy?: string;
            /**
                * <p>A human-readable description for the studio component resource.</p>
                */
            description?: string;
            /**
                * <p>The EC2 security groups that control access to the studio component.</p>
                */
            ec2SecurityGroupIds?: string[];
            /**
                * <p>Initialization scripts for studio components.</p>
                */
            initializationScripts?: StudioComponentInitializationScript[];
            /**
                * <p>A friendly name for the studio component resource.</p>
                */
            name?: string;
            /**
                * <p>Parameters for the studio component scripts.</p>
                */
            scriptParameters?: ScriptParameterKeyValue[];
            /**
                * <p>The current state.</p>
                */
            state?: StudioComponentState | string;
            /**
                * <p>The status code.</p>
                */
            statusCode?: StudioComponentStatusCode | string;
            /**
                * <p>The status message for the studio component.</p>
                */
            statusMessage?: string;
            /**
                * <p>The unique identifier for a studio component resource.</p>
                */
            studioComponentId?: string;
            /**
                * <p>The specific subtype of a studio component.</p>
                */
            subtype?: StudioComponentSubtype | string;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The type of the studio component.</p>
                */
            type?: StudioComponentType | string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was updated.</p>
                */
            updatedAt?: Date;
            /**
                * <p>The user ID of the user that most recently updated the resource.</p>
                */
            updatedBy?: string;
            /**
                * <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>
                */
            secureInitializationRoleArn?: string;
            /**
                * <p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>
                */
            runtimeRoleArn?: string;
    }
    export namespace StudioComponent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StudioComponent) => any;
    }
    export interface CreateStudioComponentResponse {
            /**
                * <p>Information about the studio component.</p>
                */
            studioComponent?: StudioComponent;
    }
    export namespace CreateStudioComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStudioComponentResponse) => any;
    }
    export interface DeleteLaunchProfileRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace DeleteLaunchProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchProfileRequest) => any;
    }
    export interface DeleteLaunchProfileResponse {
            /**
                * <p>The launch profile.</p>
                */
            launchProfile?: LaunchProfile;
    }
    export namespace DeleteLaunchProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchProfileResponse) => any;
    }
    export interface DeleteLaunchProfileMemberRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The principal ID. This currently supports a Amazon Web Services SSO UserId. </p>
                */
            principalId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace DeleteLaunchProfileMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchProfileMemberRequest) => any;
    }
    export interface DeleteLaunchProfileMemberResponse {
    }
    export namespace DeleteLaunchProfileMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLaunchProfileMemberResponse) => any;
    }
    export interface DeleteStreamingImageRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The streaming image ID.</p>
                */
            streamingImageId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace DeleteStreamingImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStreamingImageRequest) => any;
    }
    export interface DeleteStreamingImageResponse {
            /**
                * <p>The streaming image.</p>
                */
            streamingImage?: StreamingImage;
    }
    export namespace DeleteStreamingImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStreamingImageResponse) => any;
    }
    export interface DeleteStreamingSessionRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The streaming session ID.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace DeleteStreamingSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStreamingSessionRequest) => any;
    }
    export interface DeleteStreamingSessionResponse {
            /**
                * <p>The session.</p>
                */
            session?: StreamingSession;
    }
    export namespace DeleteStreamingSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStreamingSessionResponse) => any;
    }
    export interface DeleteStudioRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace DeleteStudioRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStudioRequest) => any;
    }
    export interface DeleteStudioResponse {
            /**
                * <p>Information about a studio.</p>
                */
            studio: Studio | undefined;
    }
    export namespace DeleteStudioResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStudioResponse) => any;
    }
    export interface DeleteStudioComponentRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The studio component ID.</p>
                */
            studioComponentId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace DeleteStudioComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStudioComponentRequest) => any;
    }
    export interface DeleteStudioComponentResponse {
            /**
                * <p>Information about the studio component.</p>
                */
            studioComponent?: StudioComponent;
    }
    export namespace DeleteStudioComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStudioComponentResponse) => any;
    }
    export interface DeleteStudioMemberRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The principal ID. This currently supports a Amazon Web Services SSO UserId. </p>
                */
            principalId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace DeleteStudioMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStudioMemberRequest) => any;
    }
    export interface DeleteStudioMemberResponse {
    }
    export namespace DeleteStudioMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStudioMemberResponse) => any;
    }
    /**
        * <p>Represents a EULA resource.</p>
        */
    export interface Eula {
            /**
                * <p>The EULA content.</p>
                */
            content?: string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The EULA ID.</p>
                */
            eulaId?: string;
            /**
                * <p>The name for the EULA.</p>
                */
            name?: string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was updated.</p>
                */
            updatedAt?: Date;
    }
    export namespace Eula {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Eula) => any;
    }
    export interface ListEulaAcceptancesRequest {
            /**
                * <p>The list of EULA IDs that have been previously accepted.</p>
                */
            eulaIds?: string[];
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace ListEulaAcceptancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEulaAcceptancesRequest) => any;
    }
    export interface ListEulaAcceptancesResponse {
            /**
                * <p>A collection of EULA acceptances.</p>
                */
            eulaAcceptances?: EulaAcceptance[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
    }
    export namespace ListEulaAcceptancesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEulaAcceptancesResponse) => any;
    }
    export interface GetEulaRequest {
            /**
                * <p>The EULA ID.</p>
                */
            eulaId: string | undefined;
    }
    export namespace GetEulaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEulaRequest) => any;
    }
    export interface GetEulaResponse {
            /**
                * <p>The EULA.</p>
                */
            eula?: Eula;
    }
    export namespace GetEulaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEulaResponse) => any;
    }
    export interface ListEulasRequest {
            /**
                * <p>The list of EULA IDs that should be returned</p>
                */
            eulaIds?: string[];
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListEulasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEulasRequest) => any;
    }
    export interface ListEulasResponse {
            /**
                * <p>A collection of EULA resources.</p>
                */
            eulas?: Eula[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
    }
    export namespace ListEulasResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEulasResponse) => any;
    }
    export interface GetLaunchProfileRequest {
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetLaunchProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileRequest) => any;
    }
    export interface GetLaunchProfileResponse {
            /**
                * <p>The launch profile.</p>
                */
            launchProfile?: LaunchProfile;
    }
    export namespace GetLaunchProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileResponse) => any;
    }
    export interface GetLaunchProfileDetailsRequest {
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetLaunchProfileDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileDetailsRequest) => any;
    }
    /**
        * <p>The studio component's summary.</p>
        */
    export interface StudioComponentSummary {
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The user ID of the user that created the studio component.</p>
                */
            createdBy?: string;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The name for the studio component.</p>
                */
            name?: string;
            /**
                * <p>The unique identifier for a studio component resource.</p>
                */
            studioComponentId?: string;
            /**
                * <p>The specific subtype of a studio component.</p>
                */
            subtype?: StudioComponentSubtype | string;
            /**
                * <p>The type of the studio component.</p>
                */
            type?: StudioComponentType | string;
            /**
                * <p>The Unix epoch timestamp in seconds for when the resource was updated.</p>
                */
            updatedAt?: Date;
            /**
                * <p>The user ID of the user that most recently updated the resource.</p>
                */
            updatedBy?: string;
    }
    export namespace StudioComponentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StudioComponentSummary) => any;
    }
    export interface GetLaunchProfileDetailsResponse {
            /**
                * <p>The launch profile.</p>
                */
            launchProfile?: LaunchProfile;
            /**
                * <p>A collection of streaming images.</p>
                */
            streamingImages?: StreamingImage[];
            /**
                * <p>A collection of studio component summaries.</p>
                */
            studioComponentSummaries?: StudioComponentSummary[];
    }
    export namespace GetLaunchProfileDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileDetailsResponse) => any;
    }
    export interface GetLaunchProfileInitializationRequest {
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The launch profile protocol versions supported by the client.</p>
                */
            launchProfileProtocolVersions: string[] | undefined;
            /**
                * <p>The launch purpose.</p>
                */
            launchPurpose: string | undefined;
            /**
                * <p>The platform where this Launch Profile will be used, either WINDOWS or LINUX.</p>
                */
            platform: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetLaunchProfileInitializationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileInitializationRequest) => any;
    }
    /**
        * <p>The Launch Profile Initialization Active Directory contains information required for
        *             the launch profile to connect to the Active Directory.</p>
        */
    export interface LaunchProfileInitializationActiveDirectory {
            /**
                * <p>A collection of custom attributes for an Active Directory computer.</p>
                */
            computerAttributes?: ActiveDirectoryComputerAttribute[];
            /**
                * <p>The directory ID of the Directory Service for Microsoft Active Directory to access
                *             using this launch profile.</p>
                */
            directoryId?: string;
            /**
                * <p>The directory name.</p>
                */
            directoryName?: string;
            /**
                * <p>The DNS IP address.</p>
                */
            dnsIpAddresses?: string[];
            /**
                * <p>The name for the organizational unit distinguished name.</p>
                */
            organizationalUnitDistinguishedName?: string;
            /**
                * <p>The unique identifier for a studio component resource.</p>
                */
            studioComponentId?: string;
            /**
                * <p>The name for the studio component.</p>
                */
            studioComponentName?: string;
    }
    export namespace LaunchProfileInitializationActiveDirectory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchProfileInitializationActiveDirectory) => any;
    }
    /**
        * <p>The Launch Profile Initialization Script is used when start streaming session
        *             runs.</p>
        */
    export interface LaunchProfileInitializationScript {
            /**
                * <p>The initialization script.</p>
                */
            script?: string;
            /**
                * <p>The unique identifier for a studio component resource.</p>
                */
            studioComponentId?: string;
            /**
                * <p>The name for the studio component.</p>
                */
            studioComponentName?: string;
            /**
                * <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>
                */
            secureInitializationRoleArn?: string;
            /**
                * <p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>
                */
            runtimeRoleArn?: string;
    }
    export namespace LaunchProfileInitializationScript {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchProfileInitializationScript) => any;
    }
    /**
        * <p>A Launch Profile Initialization contains information required for a workstation or
        *             server to connect to a launch profile.</p>
        *         <p>This includes scripts, endpoints, security groups, subnets, and other
        *             configuration.</p>
        */
    export interface LaunchProfileInitialization {
            /**
                * <p>A LaunchProfileInitializationActiveDirectory resource.</p>
                */
            activeDirectory?: LaunchProfileInitializationActiveDirectory;
            /**
                * <p>The EC2 security groups that control access to the studio component.</p>
                */
            ec2SecurityGroupIds?: string[];
            /**
                * <p>The launch profile ID.</p>
                */
            launchProfileId?: string;
            /**
                * <p>The version number of the protocol that is used by the launch profile. The only valid
                *             version is "2021-03-31".</p>
                */
            launchProfileProtocolVersion?: string;
            /**
                * <p>The launch purpose.</p>
                */
            launchPurpose?: string;
            /**
                * <p>The name for the launch profile.</p>
                */
            name?: string;
            /**
                * <p>The platform of the launch platform, either WINDOWS or LINUX.</p>
                */
            platform?: LaunchProfilePlatform | string;
            /**
                * <p>The system initializtion scripts.</p>
                */
            systemInitializationScripts?: LaunchProfileInitializationScript[];
            /**
                * <p>The user initializtion scripts.</p>
                */
            userInitializationScripts?: LaunchProfileInitializationScript[];
    }
    export namespace LaunchProfileInitialization {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchProfileInitialization) => any;
    }
    export interface GetLaunchProfileInitializationResponse {
            /**
                * <p>The launch profile initialization.</p>
                */
            launchProfileInitialization?: LaunchProfileInitialization;
    }
    export namespace GetLaunchProfileInitializationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileInitializationResponse) => any;
    }
    export interface GetLaunchProfileMemberRequest {
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The principal ID. This currently supports a Amazon Web Services SSO UserId. </p>
                */
            principalId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetLaunchProfileMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileMemberRequest) => any;
    }
    export enum LaunchProfilePersona {
            USER = "USER"
    }
    /**
        * <p>Launch profile membership enables your studio admins to delegate launch profile access
        *             to other studio users in the Nimble Studio portal without needing to write or
        *             maintain complex IAM policies. A launch profile member is a user association from your
        *             studio identity source who is granted permissions to a launch profile.</p>
        *         <p>A launch profile member (type USER) provides the following permissions to that launch
        *             profile:</p>
        *         <ul>
        *             <li>
        *                 <p>GetLaunchProfile</p>
        *             </li>
        *             <li>
        *                 <p>GetLaunchProfileInitialization</p>
        *             </li>
        *             <li>
        *                 <p>GetLaunchProfileMembers</p>
        *             </li>
        *             <li>
        *                 <p>GetLaunchProfileMember</p>
        *             </li>
        *             <li>
        *                 <p>CreateStreamingSession</p>
        *             </li>
        *             <li>
        *                 <p>GetLaunchProfileDetails</p>
        *             </li>
        *          </ul>
        */
    export interface LaunchProfileMembership {
            /**
                * <p>The ID of the identity store.</p>
                */
            identityStoreId?: string;
            /**
                * <p>The persona.</p>
                */
            persona?: LaunchProfilePersona | string;
            /**
                * <p>The principal ID.</p>
                */
            principalId?: string;
            /**
                * <p>The Active Directory Security Identifier for this user, if available.</p>
                */
            sid?: string;
    }
    export namespace LaunchProfileMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchProfileMembership) => any;
    }
    export interface GetLaunchProfileMemberResponse {
            /**
                * <p>The member.</p>
                */
            member?: LaunchProfileMembership;
    }
    export namespace GetLaunchProfileMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLaunchProfileMemberResponse) => any;
    }
    export interface GetStreamingImageRequest {
            /**
                * <p>The streaming image ID.</p>
                */
            streamingImageId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetStreamingImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStreamingImageRequest) => any;
    }
    export interface GetStreamingImageResponse {
            /**
                * <p>The streaming image.</p>
                */
            streamingImage?: StreamingImage;
    }
    export namespace GetStreamingImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStreamingImageResponse) => any;
    }
    export interface GetStreamingSessionRequest {
            /**
                * <p>The streaming session ID.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetStreamingSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStreamingSessionRequest) => any;
    }
    export interface GetStreamingSessionResponse {
            /**
                * <p>The session.</p>
                */
            session?: StreamingSession;
    }
    export namespace GetStreamingSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStreamingSessionResponse) => any;
    }
    export interface GetStreamingSessionStreamRequest {
            /**
                * <p>The streaming session ID.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The streaming session stream ID.</p>
                */
            streamId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetStreamingSessionStreamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStreamingSessionStreamRequest) => any;
    }
    export interface GetStreamingSessionStreamResponse {
            /**
                * <p>The stream.</p>
                */
            stream?: StreamingSessionStream;
    }
    export namespace GetStreamingSessionStreamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStreamingSessionStreamResponse) => any;
    }
    export interface GetStudioRequest {
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetStudioRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStudioRequest) => any;
    }
    export interface GetStudioResponse {
            /**
                * <p>Information about a studio.</p>
                */
            studio: Studio | undefined;
    }
    export namespace GetStudioResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStudioResponse) => any;
    }
    export interface GetStudioComponentRequest {
            /**
                * <p>The studio component ID.</p>
                */
            studioComponentId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetStudioComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStudioComponentRequest) => any;
    }
    export interface GetStudioComponentResponse {
            /**
                * <p>Information about the studio component.</p>
                */
            studioComponent?: StudioComponent;
    }
    export namespace GetStudioComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStudioComponentResponse) => any;
    }
    export interface GetStudioMemberRequest {
            /**
                * <p>The principal ID. This currently supports a Amazon Web Services SSO UserId. </p>
                */
            principalId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace GetStudioMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStudioMemberRequest) => any;
    }
    export enum StudioPersona {
            ADMINISTRATOR = "ADMINISTRATOR"
    }
    /**
        * <p>A studio member is an association of a user from your studio identity source to
        *             elevated permissions that they are granted in the studio.</p>
        *         <p>When you add a user to your studio using the Nimble Studio console, they are
        *             given access to the studio's AWS SSO application and are given access to log in to the
        *                 Nimble Studio portal. These users have the permissions provided by the studio's
        *             user IAM role and do not appear in the studio membership collection. Only studio admins
        *             appear in studio membership.</p>
        *         <p>When you add a user to studio membership with the persona ADMIN, upon logging in to
        *             the Nimble Studio portal, they are granted permissions specified by the Studio's
        *             Admin IAM role.</p>
        */
    export interface StudioMembership {
            /**
                * <p>The ID of the identity store.</p>
                */
            identityStoreId?: string;
            /**
                * <p>The persona.</p>
                */
            persona?: StudioPersona | string;
            /**
                * <p>The principal ID.</p>
                */
            principalId?: string;
            /**
                * <p>The Active Directory Security Identifier for this user, if available.</p>
                */
            sid?: string;
    }
    export namespace StudioMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StudioMembership) => any;
    }
    export interface GetStudioMemberResponse {
            /**
                * <p>The member.</p>
                */
            member?: StudioMembership;
    }
    export namespace GetStudioMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStudioMemberResponse) => any;
    }
    export interface ListLaunchProfileMembersRequest {
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The max number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace ListLaunchProfileMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLaunchProfileMembersRequest) => any;
    }
    export interface ListLaunchProfileMembersResponse {
            /**
                * <p>A list of members.</p>
                */
            members?: LaunchProfileMembership[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
    }
    export namespace ListLaunchProfileMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLaunchProfileMembersResponse) => any;
    }
    export interface ListLaunchProfilesRequest {
            /**
                * <p>The max number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
            /**
                * <p>The principal ID. This currently supports a Amazon Web Services SSO UserId. </p>
                */
            principalId?: string;
            /**
                * <p>Filter this request to launch profiles in any of the given states.</p>
                */
            states?: (LaunchProfileState | string)[];
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace ListLaunchProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLaunchProfilesRequest) => any;
    }
    export interface ListLaunchProfilesResponse {
            /**
                * <p>A collection of launch profiles.</p>
                */
            launchProfiles?: LaunchProfile[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
    }
    export namespace ListLaunchProfilesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLaunchProfilesResponse) => any;
    }
    /**
        * <p>A new member that is added to a launch profile.</p>
        */
    export interface NewLaunchProfileMember {
            /**
                * <p>The persona.</p>
                */
            persona: LaunchProfilePersona | string | undefined;
            /**
                * <p>The principal ID.</p>
                */
            principalId: string | undefined;
    }
    export namespace NewLaunchProfileMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NewLaunchProfileMember) => any;
    }
    export interface PutLaunchProfileMembersRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The ID of the identity store.</p>
                */
            identityStoreId: string | undefined;
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>A list of members.</p>
                */
            members: NewLaunchProfileMember[] | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace PutLaunchProfileMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLaunchProfileMembersRequest) => any;
    }
    export interface PutLaunchProfileMembersResponse {
    }
    export namespace PutLaunchProfileMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLaunchProfileMembersResponse) => any;
    }
    export interface UpdateLaunchProfileRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The version number of the protocol that is used by the launch profile. The only valid
                *             version is "2021-03-31".</p>
                */
            launchProfileProtocolVersions?: string[];
            /**
                * <p>The name for the launch profile.</p>
                */
            name?: string;
            /**
                * <p>A configuration for a streaming session.</p>
                */
            streamConfiguration?: StreamConfigurationCreate;
            /**
                * <p>Unique identifiers for a collection of studio components that can be used with this
                *             launch profile.</p>
                */
            studioComponentIds?: string[];
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace UpdateLaunchProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchProfileRequest) => any;
    }
    export interface UpdateLaunchProfileResponse {
            /**
                * <p>The launch profile.</p>
                */
            launchProfile?: LaunchProfile;
    }
    export namespace UpdateLaunchProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchProfileResponse) => any;
    }
    export interface UpdateLaunchProfileMemberRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The Launch Profile ID.</p>
                */
            launchProfileId: string | undefined;
            /**
                * <p>The persona.</p>
                */
            persona: LaunchProfilePersona | string | undefined;
            /**
                * <p>The principal ID. This currently supports a Amazon Web Services SSO UserId. </p>
                */
            principalId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace UpdateLaunchProfileMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchProfileMemberRequest) => any;
    }
    export interface UpdateLaunchProfileMemberResponse {
            /**
                * <p>The updated member. </p>
                */
            member?: LaunchProfileMembership;
    }
    export namespace UpdateLaunchProfileMemberResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLaunchProfileMemberResponse) => any;
    }
    export interface ListStreamingImagesRequest {
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Filter this request to streaming images with the given owner</p>
                */
            owner?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace ListStreamingImagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStreamingImagesRequest) => any;
    }
    export interface ListStreamingImagesResponse {
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
            /**
                * <p>A collection of streaming images.</p>
                */
            streamingImages?: StreamingImage[];
    }
    export namespace ListStreamingImagesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStreamingImagesResponse) => any;
    }
    export interface ListStreamingSessionsRequest {
            /**
                * <p>Filters the request to streaming sessions created by the given user.</p>
                */
            createdBy?: string;
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Filters the request to streaming session owned by the given user</p>
                */
            ownedBy?: string;
            /**
                * <p>Filters the request to only the provided session IDs.</p>
                */
            sessionIds?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace ListStreamingSessionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStreamingSessionsRequest) => any;
    }
    export interface ListStreamingSessionsResponse {
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
            /**
                * <p>A collection of streaming sessions.</p>
                */
            sessions?: StreamingSession[];
    }
    export namespace ListStreamingSessionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStreamingSessionsResponse) => any;
    }
    export interface ListStudioComponentsRequest {
            /**
                * <p>The max number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Filters the request to studio components that are in one of the given states. </p>
                */
            states?: (StudioComponentState | string)[];
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
            /**
                * <p>Filters the request to studio components that are of one of the given types.</p>
                */
            types?: (StudioComponentType | string)[];
    }
    export namespace ListStudioComponentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudioComponentsRequest) => any;
    }
    export interface ListStudioComponentsResponse {
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
            /**
                * <p>A collection of studio components.</p>
                */
            studioComponents?: StudioComponent[];
    }
    export namespace ListStudioComponentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudioComponentsResponse) => any;
    }
    export interface ListStudioMembersRequest {
            /**
                * <p>The max number of results to return in the response.</p>
                */
            maxResults?: number;
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace ListStudioMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudioMembersRequest) => any;
    }
    export interface ListStudioMembersResponse {
            /**
                * <p>A list of admin members.</p>
                */
            members?: StudioMembership[];
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
    }
    export namespace ListStudioMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudioMembersResponse) => any;
    }
    export interface ListStudiosRequest {
            /**
                * <p>The token to request the next page of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListStudiosRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudiosRequest) => any;
    }
    export interface ListStudiosResponse {
            /**
                * <p>The token for the next set of results, or null if there are no more results.</p>
                */
            nextToken?: string;
            /**
                * <p>A collection of studios.</p>
                */
            studios: Studio[] | undefined;
    }
    export namespace ListStudiosResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListStudiosResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource for which you want to list tags.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>A new studio user's membership.</p>
        */
    export interface NewStudioMember {
            /**
                * <p>The persona.</p>
                */
            persona: StudioPersona | string | undefined;
            /**
                * <p>The principal ID.</p>
                */
            principalId: string | undefined;
    }
    export namespace NewStudioMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NewStudioMember) => any;
    }
    export interface UpdateStreamingImageRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The name for the streaming image.</p>
                */
            name?: string;
            /**
                * <p>The streaming image ID.</p>
                */
            streamingImageId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace UpdateStreamingImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStreamingImageRequest) => any;
    }
    export interface UpdateStreamingImageResponse {
            /**
                * <p>Represents a streaming image resource.</p>
                *         <p>Streaming images are used by studio users to select which operating system and
                *             software they want to use in a Nimble Studio streaming session.</p>
                *         <p>Amazon provides a number of streaming images that include popular 3rd-party
                *             software.</p>
                *         <p>You can create your own streaming images using an Amazon Elastic Compute Cloud (Amazon
                *             EC2) machine image that you create for this purpose. You can also include software that
                *             your users require.</p>
                */
            streamingImage?: StreamingImage;
    }
    export namespace UpdateStreamingImageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStreamingImageResponse) => any;
    }
    export interface StartStreamingSessionRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The streaming session ID for the StartStreamingSessionRequest.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The studio ID for the StartStreamingSessionRequest.</p>
                */
            studioId: string | undefined;
    }
    export namespace StartStreamingSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartStreamingSessionRequest) => any;
    }
    export interface StartStreamingSessionResponse {
            /**
                * <p>A streaming session is a virtual workstation created using a particular launch
                *             profile.</p>
                */
            session?: StreamingSession;
    }
    export namespace StartStreamingSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartStreamingSessionResponse) => any;
    }
    export interface StopStreamingSessionRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The streaming session ID for the StopStreamingSessionRequest.</p>
                */
            sessionId: string | undefined;
            /**
                * <p>The studioId for the StopStreamingSessionRequest.</p>
                */
            studioId: string | undefined;
    }
    export namespace StopStreamingSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopStreamingSessionRequest) => any;
    }
    export interface StopStreamingSessionResponse {
            /**
                * <p>A streaming session is a virtual workstation created using a particular launch
                *             profile.</p>
                */
            session?: StreamingSession;
    }
    export namespace StopStreamingSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopStreamingSessionResponse) => any;
    }
    export interface UpdateStudioComponentRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The configuration of the studio component, based on component type.</p>
                */
            configuration?: StudioComponentConfiguration;
            /**
                * <p>The description.</p>
                */
            description?: string;
            /**
                * <p>The EC2 security groups that control access to the studio component.</p>
                */
            ec2SecurityGroupIds?: string[];
            /**
                * <p>Initialization scripts for studio components.</p>
                */
            initializationScripts?: StudioComponentInitializationScript[];
            /**
                * <p>The name for the studio component.</p>
                */
            name?: string;
            /**
                * <p>Parameters for the studio component scripts.</p>
                */
            scriptParameters?: ScriptParameterKeyValue[];
            /**
                * <p>The studio component ID.</p>
                */
            studioComponentId: string | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
            /**
                * <p>The specific subtype of a studio component.</p>
                */
            subtype?: StudioComponentSubtype | string;
            /**
                * <p>The type of the studio component.</p>
                */
            type?: StudioComponentType | string;
            /**
                * <p>An IAM role attached to Studio Component when the system initialization script runs which give the studio component access to AWS resources when the system initialization script runs.</p>
                */
            secureInitializationRoleArn?: string;
            /**
                * <p>An IAM role attached to a Studio Component that gives the studio component access to AWS resources at anytime while the instance is running. </p>
                */
            runtimeRoleArn?: string;
    }
    export namespace UpdateStudioComponentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStudioComponentRequest) => any;
    }
    export interface UpdateStudioComponentResponse {
            /**
                * <p>Information about the studio component.</p>
                */
            studioComponent?: StudioComponent;
    }
    export namespace UpdateStudioComponentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStudioComponentResponse) => any;
    }
    export interface PutStudioMembersRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The ID of the identity store.</p>
                */
            identityStoreId: string | undefined;
            /**
                * <p>A list of members.</p>
                */
            members: NewStudioMember[] | undefined;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace PutStudioMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutStudioMembersRequest) => any;
    }
    export interface PutStudioMembersResponse {
    }
    export namespace PutStudioMembersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutStudioMembersResponse) => any;
    }
    export interface StartStudioSSOConfigurationRepairRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
    }
    export namespace StartStudioSSOConfigurationRepairRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartStudioSSOConfigurationRepairRequest) => any;
    }
    export interface StartStudioSSOConfigurationRepairResponse {
            /**
                * <p>Information about a studio.</p>
                */
            studio: Studio | undefined;
    }
    export namespace StartStudioSSOConfigurationRepairResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartStudioSSOConfigurationRepairResponse) => any;
    }
    export interface UpdateStudioRequest {
            /**
                * <p>The IAM role that Studio Admins will assume when logging in to the Nimble Studio
                *             portal.</p>
                */
            adminRoleArn?: string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request. If you don’t specify a client token, the AWS SDK automatically generates a
                *             client token and uses it for the request to ensure idempotency.</p>
                */
            clientToken?: string;
            /**
                * <p>A friendly name for the studio.</p>
                */
            displayName?: string;
            /**
                * <p>The studio ID. </p>
                */
            studioId: string | undefined;
            /**
                * <p>The IAM role that Studio Users will assume when logging in to the Nimble Studio
                *             portal.</p>
                */
            userRoleArn?: string;
    }
    export namespace UpdateStudioRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStudioRequest) => any;
    }
    export interface UpdateStudioResponse {
            /**
                * <p>Information about a studio.</p>
                */
            studio: Studio | undefined;
    }
    export namespace UpdateStudioResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStudioResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p> The Amazon Resource Name (ARN) of the resource you want to add tags to. </p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A collection of labels, in the form of key:value pairs, that apply to this
                *             resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>Identifies the Amazon Resource Name(ARN) key from which you are removing tags. </p>
                */
            resourceArn: string | undefined;
            /**
                * <p>One or more tag keys. Specify only the tag keys, not the tag values.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-nimble/node_modules/@aws-sdk/client-nimble/dist-types/models/NimbleServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Nimble service.
        */
    export class NimbleServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

