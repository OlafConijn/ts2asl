// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-apigatewayv2' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ApiGatewayV2Client } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateApiCommandInput, CreateApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateApiCommand";
    import { CreateApiMappingCommandInput, CreateApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateApiMappingCommand";
    import { CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateAuthorizerCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateDeploymentCommand";
    import { CreateDomainNameCommandInput, CreateDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateDomainNameCommand";
    import { CreateIntegrationCommandInput, CreateIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateIntegrationCommand";
    import { CreateIntegrationResponseCommandInput, CreateIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateIntegrationResponseCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateModelCommand";
    import { CreateRouteCommandInput, CreateRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateRouteCommand";
    import { CreateRouteResponseCommandInput, CreateRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateRouteResponseCommand";
    import { CreateStageCommandInput, CreateStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateStageCommand";
    import { CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateVpcLinkCommand";
    import { DeleteAccessLogSettingsCommandInput, DeleteAccessLogSettingsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteAccessLogSettingsCommand";
    import { DeleteApiCommandInput, DeleteApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteApiCommand";
    import { DeleteApiMappingCommandInput, DeleteApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteApiMappingCommand";
    import { DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteAuthorizerCommand";
    import { DeleteCorsConfigurationCommandInput, DeleteCorsConfigurationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteCorsConfigurationCommand";
    import { DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteDeploymentCommand";
    import { DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteDomainNameCommand";
    import { DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteIntegrationCommand";
    import { DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteIntegrationResponseCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteModelCommand";
    import { DeleteRouteCommandInput, DeleteRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteCommand";
    import { DeleteRouteRequestParameterCommandInput, DeleteRouteRequestParameterCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteRequestParameterCommand";
    import { DeleteRouteResponseCommandInput, DeleteRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteResponseCommand";
    import { DeleteRouteSettingsCommandInput, DeleteRouteSettingsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteSettingsCommand";
    import { DeleteStageCommandInput, DeleteStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteStageCommand";
    import { DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteVpcLinkCommand";
    import { ExportApiCommandInput, ExportApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ExportApiCommand";
    import { GetApiCommandInput, GetApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiCommand";
    import { GetApiMappingCommandInput, GetApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiMappingCommand";
    import { GetApiMappingsCommandInput, GetApiMappingsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiMappingsCommand";
    import { GetApisCommandInput, GetApisCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApisCommand";
    import { GetAuthorizerCommandInput, GetAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetAuthorizerCommand";
    import { GetAuthorizersCommandInput, GetAuthorizersCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetAuthorizersCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDeploymentCommand";
    import { GetDeploymentsCommandInput, GetDeploymentsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDeploymentsCommand";
    import { GetDomainNameCommandInput, GetDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDomainNameCommand";
    import { GetDomainNamesCommandInput, GetDomainNamesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDomainNamesCommand";
    import { GetIntegrationCommandInput, GetIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationCommand";
    import { GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationResponseCommand";
    import { GetIntegrationResponsesCommandInput, GetIntegrationResponsesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationResponsesCommand";
    import { GetIntegrationsCommandInput, GetIntegrationsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationsCommand";
    import { GetModelCommandInput, GetModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelCommand";
    import { GetModelsCommandInput, GetModelsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelsCommand";
    import { GetModelTemplateCommandInput, GetModelTemplateCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelTemplateCommand";
    import { GetRouteCommandInput, GetRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteCommand";
    import { GetRouteResponseCommandInput, GetRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteResponseCommand";
    import { GetRouteResponsesCommandInput, GetRouteResponsesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteResponsesCommand";
    import { GetRoutesCommandInput, GetRoutesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRoutesCommand";
    import { GetStageCommandInput, GetStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetStageCommand";
    import { GetStagesCommandInput, GetStagesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetStagesCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetTagsCommand";
    import { GetVpcLinkCommandInput, GetVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetVpcLinkCommand";
    import { GetVpcLinksCommandInput, GetVpcLinksCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetVpcLinksCommand";
    import { ImportApiCommandInput, ImportApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ImportApiCommand";
    import { ReimportApiCommandInput, ReimportApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ReimportApiCommand";
    import { ResetAuthorizersCacheCommandInput, ResetAuthorizersCacheCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ResetAuthorizersCacheCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UntagResourceCommand";
    import { UpdateApiCommandInput, UpdateApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateApiCommand";
    import { UpdateApiMappingCommandInput, UpdateApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateApiMappingCommand";
    import { UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateAuthorizerCommand";
    import { UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateDeploymentCommand";
    import { UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateDomainNameCommand";
    import { UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateIntegrationCommand";
    import { UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateIntegrationResponseCommand";
    import { UpdateModelCommandInput, UpdateModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateModelCommand";
    import { UpdateRouteCommandInput, UpdateRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateRouteCommand";
    import { UpdateRouteResponseCommandInput, UpdateRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateRouteResponseCommand";
    import { UpdateStageCommandInput, UpdateStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateStageCommand";
    import { UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateVpcLinkCommand";
    /**
        * <p>Amazon API Gateway V2</p>
        */
    export class ApiGatewayV2 extends ApiGatewayV2Client {
            /**
                * <p>Creates an Api resource.</p>
                */
            createApi(args: CreateApiCommandInput, options?: __HttpHandlerOptions): Promise<CreateApiCommandOutput>;
            createApi(args: CreateApiCommandInput, cb: (err: any, data?: CreateApiCommandOutput) => void): void;
            createApi(args: CreateApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApiCommandOutput) => void): void;
            /**
                * <p>Creates an API mapping.</p>
                */
            createApiMapping(args: CreateApiMappingCommandInput, options?: __HttpHandlerOptions): Promise<CreateApiMappingCommandOutput>;
            createApiMapping(args: CreateApiMappingCommandInput, cb: (err: any, data?: CreateApiMappingCommandOutput) => void): void;
            createApiMapping(args: CreateApiMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApiMappingCommandOutput) => void): void;
            /**
                * <p>Creates an Authorizer for an API.</p>
                */
            createAuthorizer(args: CreateAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<CreateAuthorizerCommandOutput>;
            createAuthorizer(args: CreateAuthorizerCommandInput, cb: (err: any, data?: CreateAuthorizerCommandOutput) => void): void;
            createAuthorizer(args: CreateAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAuthorizerCommandOutput) => void): void;
            /**
                * <p>Creates a Deployment for an API.</p>
                */
            createDeployment(args: CreateDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeploymentCommandOutput>;
            createDeployment(args: CreateDeploymentCommandInput, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            createDeployment(args: CreateDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeploymentCommandOutput) => void): void;
            /**
                * <p>Creates a domain name.</p>
                */
            createDomainName(args: CreateDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainNameCommandOutput>;
            createDomainName(args: CreateDomainNameCommandInput, cb: (err: any, data?: CreateDomainNameCommandOutput) => void): void;
            createDomainName(args: CreateDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainNameCommandOutput) => void): void;
            /**
                * <p>Creates an Integration.</p>
                */
            createIntegration(args: CreateIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<CreateIntegrationCommandOutput>;
            createIntegration(args: CreateIntegrationCommandInput, cb: (err: any, data?: CreateIntegrationCommandOutput) => void): void;
            createIntegration(args: CreateIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIntegrationCommandOutput) => void): void;
            /**
                * <p>Creates an IntegrationResponses.</p>
                */
            createIntegrationResponse(args: CreateIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<CreateIntegrationResponseCommandOutput>;
            createIntegrationResponse(args: CreateIntegrationResponseCommandInput, cb: (err: any, data?: CreateIntegrationResponseCommandOutput) => void): void;
            createIntegrationResponse(args: CreateIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Creates a Model for an API.</p>
                */
            createModel(args: CreateModelCommandInput, options?: __HttpHandlerOptions): Promise<CreateModelCommandOutput>;
            createModel(args: CreateModelCommandInput, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            createModel(args: CreateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateModelCommandOutput) => void): void;
            /**
                * <p>Creates a Route for an API.</p>
                */
            createRoute(args: CreateRouteCommandInput, options?: __HttpHandlerOptions): Promise<CreateRouteCommandOutput>;
            createRoute(args: CreateRouteCommandInput, cb: (err: any, data?: CreateRouteCommandOutput) => void): void;
            createRoute(args: CreateRouteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRouteCommandOutput) => void): void;
            /**
                * <p>Creates a RouteResponse for a Route.</p>
                */
            createRouteResponse(args: CreateRouteResponseCommandInput, options?: __HttpHandlerOptions): Promise<CreateRouteResponseCommandOutput>;
            createRouteResponse(args: CreateRouteResponseCommandInput, cb: (err: any, data?: CreateRouteResponseCommandOutput) => void): void;
            createRouteResponse(args: CreateRouteResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRouteResponseCommandOutput) => void): void;
            /**
                * <p>Creates a Stage for an API.</p>
                */
            createStage(args: CreateStageCommandInput, options?: __HttpHandlerOptions): Promise<CreateStageCommandOutput>;
            createStage(args: CreateStageCommandInput, cb: (err: any, data?: CreateStageCommandOutput) => void): void;
            createStage(args: CreateStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateStageCommandOutput) => void): void;
            /**
                * <p>Creates a VPC link.</p>
                */
            createVpcLink(args: CreateVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<CreateVpcLinkCommandOutput>;
            createVpcLink(args: CreateVpcLinkCommandInput, cb: (err: any, data?: CreateVpcLinkCommandOutput) => void): void;
            createVpcLink(args: CreateVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVpcLinkCommandOutput) => void): void;
            /**
                * <p>Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.</p>
                */
            deleteAccessLogSettings(args: DeleteAccessLogSettingsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAccessLogSettingsCommandOutput>;
            deleteAccessLogSettings(args: DeleteAccessLogSettingsCommandInput, cb: (err: any, data?: DeleteAccessLogSettingsCommandOutput) => void): void;
            deleteAccessLogSettings(args: DeleteAccessLogSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAccessLogSettingsCommandOutput) => void): void;
            /**
                * <p>Deletes an Api resource.</p>
                */
            deleteApi(args: DeleteApiCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApiCommandOutput>;
            deleteApi(args: DeleteApiCommandInput, cb: (err: any, data?: DeleteApiCommandOutput) => void): void;
            deleteApi(args: DeleteApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApiCommandOutput) => void): void;
            /**
                * <p>Deletes an API mapping.</p>
                */
            deleteApiMapping(args: DeleteApiMappingCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApiMappingCommandOutput>;
            deleteApiMapping(args: DeleteApiMappingCommandInput, cb: (err: any, data?: DeleteApiMappingCommandOutput) => void): void;
            deleteApiMapping(args: DeleteApiMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApiMappingCommandOutput) => void): void;
            /**
                * <p>Deletes an Authorizer.</p>
                */
            deleteAuthorizer(args: DeleteAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAuthorizerCommandOutput>;
            deleteAuthorizer(args: DeleteAuthorizerCommandInput, cb: (err: any, data?: DeleteAuthorizerCommandOutput) => void): void;
            deleteAuthorizer(args: DeleteAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAuthorizerCommandOutput) => void): void;
            /**
                * <p>Deletes a CORS configuration.</p>
                */
            deleteCorsConfiguration(args: DeleteCorsConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCorsConfigurationCommandOutput>;
            deleteCorsConfiguration(args: DeleteCorsConfigurationCommandInput, cb: (err: any, data?: DeleteCorsConfigurationCommandOutput) => void): void;
            deleteCorsConfiguration(args: DeleteCorsConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCorsConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes a Deployment.</p>
                */
            deleteDeployment(args: DeleteDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDeploymentCommandOutput>;
            deleteDeployment(args: DeleteDeploymentCommandInput, cb: (err: any, data?: DeleteDeploymentCommandOutput) => void): void;
            deleteDeployment(args: DeleteDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDeploymentCommandOutput) => void): void;
            /**
                * <p>Deletes a domain name.</p>
                */
            deleteDomainName(args: DeleteDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainNameCommandOutput>;
            deleteDomainName(args: DeleteDomainNameCommandInput, cb: (err: any, data?: DeleteDomainNameCommandOutput) => void): void;
            deleteDomainName(args: DeleteDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainNameCommandOutput) => void): void;
            /**
                * <p>Deletes an Integration.</p>
                */
            deleteIntegration(args: DeleteIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIntegrationCommandOutput>;
            deleteIntegration(args: DeleteIntegrationCommandInput, cb: (err: any, data?: DeleteIntegrationCommandOutput) => void): void;
            deleteIntegration(args: DeleteIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIntegrationCommandOutput) => void): void;
            /**
                * <p>Deletes an IntegrationResponses.</p>
                */
            deleteIntegrationResponse(args: DeleteIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIntegrationResponseCommandOutput>;
            deleteIntegrationResponse(args: DeleteIntegrationResponseCommandInput, cb: (err: any, data?: DeleteIntegrationResponseCommandOutput) => void): void;
            deleteIntegrationResponse(args: DeleteIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Deletes a Model.</p>
                */
            deleteModel(args: DeleteModelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteModelCommandOutput>;
            deleteModel(args: DeleteModelCommandInput, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            deleteModel(args: DeleteModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteModelCommandOutput) => void): void;
            /**
                * <p>Deletes a Route.</p>
                */
            deleteRoute(args: DeleteRouteCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRouteCommandOutput>;
            deleteRoute(args: DeleteRouteCommandInput, cb: (err: any, data?: DeleteRouteCommandOutput) => void): void;
            deleteRoute(args: DeleteRouteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRouteCommandOutput) => void): void;
            /**
                * <p>Deletes a route request parameter.</p>
                */
            deleteRouteRequestParameter(args: DeleteRouteRequestParameterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRouteRequestParameterCommandOutput>;
            deleteRouteRequestParameter(args: DeleteRouteRequestParameterCommandInput, cb: (err: any, data?: DeleteRouteRequestParameterCommandOutput) => void): void;
            deleteRouteRequestParameter(args: DeleteRouteRequestParameterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRouteRequestParameterCommandOutput) => void): void;
            /**
                * <p>Deletes a RouteResponse.</p>
                */
            deleteRouteResponse(args: DeleteRouteResponseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRouteResponseCommandOutput>;
            deleteRouteResponse(args: DeleteRouteResponseCommandInput, cb: (err: any, data?: DeleteRouteResponseCommandOutput) => void): void;
            deleteRouteResponse(args: DeleteRouteResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRouteResponseCommandOutput) => void): void;
            /**
                * <p>Deletes the RouteSettings for a stage.</p>
                */
            deleteRouteSettings(args: DeleteRouteSettingsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRouteSettingsCommandOutput>;
            deleteRouteSettings(args: DeleteRouteSettingsCommandInput, cb: (err: any, data?: DeleteRouteSettingsCommandOutput) => void): void;
            deleteRouteSettings(args: DeleteRouteSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRouteSettingsCommandOutput) => void): void;
            /**
                * <p>Deletes a Stage.</p>
                */
            deleteStage(args: DeleteStageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteStageCommandOutput>;
            deleteStage(args: DeleteStageCommandInput, cb: (err: any, data?: DeleteStageCommandOutput) => void): void;
            deleteStage(args: DeleteStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteStageCommandOutput) => void): void;
            /**
                * <p>Deletes a VPC link.</p>
                */
            deleteVpcLink(args: DeleteVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVpcLinkCommandOutput>;
            deleteVpcLink(args: DeleteVpcLinkCommandInput, cb: (err: any, data?: DeleteVpcLinkCommandOutput) => void): void;
            deleteVpcLink(args: DeleteVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVpcLinkCommandOutput) => void): void;
            exportApi(args: ExportApiCommandInput, options?: __HttpHandlerOptions): Promise<ExportApiCommandOutput>;
            exportApi(args: ExportApiCommandInput, cb: (err: any, data?: ExportApiCommandOutput) => void): void;
            exportApi(args: ExportApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExportApiCommandOutput) => void): void;
            /**
                * <p>Gets an Api resource.</p>
                */
            getApi(args: GetApiCommandInput, options?: __HttpHandlerOptions): Promise<GetApiCommandOutput>;
            getApi(args: GetApiCommandInput, cb: (err: any, data?: GetApiCommandOutput) => void): void;
            getApi(args: GetApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApiCommandOutput) => void): void;
            /**
                * <p>Gets an API mapping.</p>
                */
            getApiMapping(args: GetApiMappingCommandInput, options?: __HttpHandlerOptions): Promise<GetApiMappingCommandOutput>;
            getApiMapping(args: GetApiMappingCommandInput, cb: (err: any, data?: GetApiMappingCommandOutput) => void): void;
            getApiMapping(args: GetApiMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApiMappingCommandOutput) => void): void;
            /**
                * <p>Gets API mappings.</p>
                */
            getApiMappings(args: GetApiMappingsCommandInput, options?: __HttpHandlerOptions): Promise<GetApiMappingsCommandOutput>;
            getApiMappings(args: GetApiMappingsCommandInput, cb: (err: any, data?: GetApiMappingsCommandOutput) => void): void;
            getApiMappings(args: GetApiMappingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApiMappingsCommandOutput) => void): void;
            /**
                * <p>Gets a collection of Api resources.</p>
                */
            getApis(args: GetApisCommandInput, options?: __HttpHandlerOptions): Promise<GetApisCommandOutput>;
            getApis(args: GetApisCommandInput, cb: (err: any, data?: GetApisCommandOutput) => void): void;
            getApis(args: GetApisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApisCommandOutput) => void): void;
            /**
                * <p>Gets an Authorizer.</p>
                */
            getAuthorizer(args: GetAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<GetAuthorizerCommandOutput>;
            getAuthorizer(args: GetAuthorizerCommandInput, cb: (err: any, data?: GetAuthorizerCommandOutput) => void): void;
            getAuthorizer(args: GetAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAuthorizerCommandOutput) => void): void;
            /**
                * <p>Gets the Authorizers for an API.</p>
                */
            getAuthorizers(args: GetAuthorizersCommandInput, options?: __HttpHandlerOptions): Promise<GetAuthorizersCommandOutput>;
            getAuthorizers(args: GetAuthorizersCommandInput, cb: (err: any, data?: GetAuthorizersCommandOutput) => void): void;
            getAuthorizers(args: GetAuthorizersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAuthorizersCommandOutput) => void): void;
            /**
                * <p>Gets a Deployment.</p>
                */
            getDeployment(args: GetDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentCommandOutput>;
            getDeployment(args: GetDeploymentCommandInput, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            getDeployment(args: GetDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentCommandOutput) => void): void;
            /**
                * <p>Gets the Deployments for an API.</p>
                */
            getDeployments(args: GetDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<GetDeploymentsCommandOutput>;
            getDeployments(args: GetDeploymentsCommandInput, cb: (err: any, data?: GetDeploymentsCommandOutput) => void): void;
            getDeployments(args: GetDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeploymentsCommandOutput) => void): void;
            /**
                * <p>Gets a domain name.</p>
                */
            getDomainName(args: GetDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainNameCommandOutput>;
            getDomainName(args: GetDomainNameCommandInput, cb: (err: any, data?: GetDomainNameCommandOutput) => void): void;
            getDomainName(args: GetDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainNameCommandOutput) => void): void;
            /**
                * <p>Gets the domain names for an AWS account.</p>
                */
            getDomainNames(args: GetDomainNamesCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainNamesCommandOutput>;
            getDomainNames(args: GetDomainNamesCommandInput, cb: (err: any, data?: GetDomainNamesCommandOutput) => void): void;
            getDomainNames(args: GetDomainNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainNamesCommandOutput) => void): void;
            /**
                * <p>Gets an Integration.</p>
                */
            getIntegration(args: GetIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<GetIntegrationCommandOutput>;
            getIntegration(args: GetIntegrationCommandInput, cb: (err: any, data?: GetIntegrationCommandOutput) => void): void;
            getIntegration(args: GetIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIntegrationCommandOutput) => void): void;
            /**
                * <p>Gets an IntegrationResponses.</p>
                */
            getIntegrationResponse(args: GetIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<GetIntegrationResponseCommandOutput>;
            getIntegrationResponse(args: GetIntegrationResponseCommandInput, cb: (err: any, data?: GetIntegrationResponseCommandOutput) => void): void;
            getIntegrationResponse(args: GetIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Gets the IntegrationResponses for an Integration.</p>
                */
            getIntegrationResponses(args: GetIntegrationResponsesCommandInput, options?: __HttpHandlerOptions): Promise<GetIntegrationResponsesCommandOutput>;
            getIntegrationResponses(args: GetIntegrationResponsesCommandInput, cb: (err: any, data?: GetIntegrationResponsesCommandOutput) => void): void;
            getIntegrationResponses(args: GetIntegrationResponsesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIntegrationResponsesCommandOutput) => void): void;
            /**
                * <p>Gets the Integrations for an API.</p>
                */
            getIntegrations(args: GetIntegrationsCommandInput, options?: __HttpHandlerOptions): Promise<GetIntegrationsCommandOutput>;
            getIntegrations(args: GetIntegrationsCommandInput, cb: (err: any, data?: GetIntegrationsCommandOutput) => void): void;
            getIntegrations(args: GetIntegrationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIntegrationsCommandOutput) => void): void;
            /**
                * <p>Gets a Model.</p>
                */
            getModel(args: GetModelCommandInput, options?: __HttpHandlerOptions): Promise<GetModelCommandOutput>;
            getModel(args: GetModelCommandInput, cb: (err: any, data?: GetModelCommandOutput) => void): void;
            getModel(args: GetModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelCommandOutput) => void): void;
            /**
                * <p>Gets the Models for an API.</p>
                */
            getModels(args: GetModelsCommandInput, options?: __HttpHandlerOptions): Promise<GetModelsCommandOutput>;
            getModels(args: GetModelsCommandInput, cb: (err: any, data?: GetModelsCommandOutput) => void): void;
            getModels(args: GetModelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelsCommandOutput) => void): void;
            /**
                * <p>Gets a model template.</p>
                */
            getModelTemplate(args: GetModelTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetModelTemplateCommandOutput>;
            getModelTemplate(args: GetModelTemplateCommandInput, cb: (err: any, data?: GetModelTemplateCommandOutput) => void): void;
            getModelTemplate(args: GetModelTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetModelTemplateCommandOutput) => void): void;
            /**
                * <p>Gets a Route.</p>
                */
            getRoute(args: GetRouteCommandInput, options?: __HttpHandlerOptions): Promise<GetRouteCommandOutput>;
            getRoute(args: GetRouteCommandInput, cb: (err: any, data?: GetRouteCommandOutput) => void): void;
            getRoute(args: GetRouteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRouteCommandOutput) => void): void;
            /**
                * <p>Gets a RouteResponse.</p>
                */
            getRouteResponse(args: GetRouteResponseCommandInput, options?: __HttpHandlerOptions): Promise<GetRouteResponseCommandOutput>;
            getRouteResponse(args: GetRouteResponseCommandInput, cb: (err: any, data?: GetRouteResponseCommandOutput) => void): void;
            getRouteResponse(args: GetRouteResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRouteResponseCommandOutput) => void): void;
            /**
                * <p>Gets the RouteResponses for a Route.</p>
                */
            getRouteResponses(args: GetRouteResponsesCommandInput, options?: __HttpHandlerOptions): Promise<GetRouteResponsesCommandOutput>;
            getRouteResponses(args: GetRouteResponsesCommandInput, cb: (err: any, data?: GetRouteResponsesCommandOutput) => void): void;
            getRouteResponses(args: GetRouteResponsesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRouteResponsesCommandOutput) => void): void;
            /**
                * <p>Gets the Routes for an API.</p>
                */
            getRoutes(args: GetRoutesCommandInput, options?: __HttpHandlerOptions): Promise<GetRoutesCommandOutput>;
            getRoutes(args: GetRoutesCommandInput, cb: (err: any, data?: GetRoutesCommandOutput) => void): void;
            getRoutes(args: GetRoutesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRoutesCommandOutput) => void): void;
            /**
                * <p>Gets a Stage.</p>
                */
            getStage(args: GetStageCommandInput, options?: __HttpHandlerOptions): Promise<GetStageCommandOutput>;
            getStage(args: GetStageCommandInput, cb: (err: any, data?: GetStageCommandOutput) => void): void;
            getStage(args: GetStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStageCommandOutput) => void): void;
            /**
                * <p>Gets the Stages for an API.</p>
                */
            getStages(args: GetStagesCommandInput, options?: __HttpHandlerOptions): Promise<GetStagesCommandOutput>;
            getStages(args: GetStagesCommandInput, cb: (err: any, data?: GetStagesCommandOutput) => void): void;
            getStages(args: GetStagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStagesCommandOutput) => void): void;
            /**
                * <p>Gets a collection of Tag resources.</p>
                */
            getTags(args: GetTagsCommandInput, options?: __HttpHandlerOptions): Promise<GetTagsCommandOutput>;
            getTags(args: GetTagsCommandInput, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            getTags(args: GetTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            /**
                * <p>Gets a VPC link.</p>
                */
            getVpcLink(args: GetVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<GetVpcLinkCommandOutput>;
            getVpcLink(args: GetVpcLinkCommandInput, cb: (err: any, data?: GetVpcLinkCommandOutput) => void): void;
            getVpcLink(args: GetVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVpcLinkCommandOutput) => void): void;
            /**
                * <p>Gets a collection of VPC links.</p>
                */
            getVpcLinks(args: GetVpcLinksCommandInput, options?: __HttpHandlerOptions): Promise<GetVpcLinksCommandOutput>;
            getVpcLinks(args: GetVpcLinksCommandInput, cb: (err: any, data?: GetVpcLinksCommandOutput) => void): void;
            getVpcLinks(args: GetVpcLinksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetVpcLinksCommandOutput) => void): void;
            /**
                * <p>Imports an API.</p>
                */
            importApi(args: ImportApiCommandInput, options?: __HttpHandlerOptions): Promise<ImportApiCommandOutput>;
            importApi(args: ImportApiCommandInput, cb: (err: any, data?: ImportApiCommandOutput) => void): void;
            importApi(args: ImportApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportApiCommandOutput) => void): void;
            /**
                * <p>Puts an Api resource.</p>
                */
            reimportApi(args: ReimportApiCommandInput, options?: __HttpHandlerOptions): Promise<ReimportApiCommandOutput>;
            reimportApi(args: ReimportApiCommandInput, cb: (err: any, data?: ReimportApiCommandOutput) => void): void;
            reimportApi(args: ReimportApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ReimportApiCommandOutput) => void): void;
            /**
                * <p>Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.</p>
                */
            resetAuthorizersCache(args: ResetAuthorizersCacheCommandInput, options?: __HttpHandlerOptions): Promise<ResetAuthorizersCacheCommandOutput>;
            resetAuthorizersCache(args: ResetAuthorizersCacheCommandInput, cb: (err: any, data?: ResetAuthorizersCacheCommandOutput) => void): void;
            resetAuthorizersCache(args: ResetAuthorizersCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetAuthorizersCacheCommandOutput) => void): void;
            /**
                * <p>Creates a new Tag resource to represent a tag.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Deletes a Tag.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an Api resource.</p>
                */
            updateApi(args: UpdateApiCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApiCommandOutput>;
            updateApi(args: UpdateApiCommandInput, cb: (err: any, data?: UpdateApiCommandOutput) => void): void;
            updateApi(args: UpdateApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApiCommandOutput) => void): void;
            /**
                * <p>The API mapping.</p>
                */
            updateApiMapping(args: UpdateApiMappingCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApiMappingCommandOutput>;
            updateApiMapping(args: UpdateApiMappingCommandInput, cb: (err: any, data?: UpdateApiMappingCommandOutput) => void): void;
            updateApiMapping(args: UpdateApiMappingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApiMappingCommandOutput) => void): void;
            /**
                * <p>Updates an Authorizer.</p>
                */
            updateAuthorizer(args: UpdateAuthorizerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAuthorizerCommandOutput>;
            updateAuthorizer(args: UpdateAuthorizerCommandInput, cb: (err: any, data?: UpdateAuthorizerCommandOutput) => void): void;
            updateAuthorizer(args: UpdateAuthorizerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAuthorizerCommandOutput) => void): void;
            /**
                * <p>Updates a Deployment.</p>
                */
            updateDeployment(args: UpdateDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDeploymentCommandOutput>;
            updateDeployment(args: UpdateDeploymentCommandInput, cb: (err: any, data?: UpdateDeploymentCommandOutput) => void): void;
            updateDeployment(args: UpdateDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDeploymentCommandOutput) => void): void;
            /**
                * <p>Updates a domain name.</p>
                */
            updateDomainName(args: UpdateDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainNameCommandOutput>;
            updateDomainName(args: UpdateDomainNameCommandInput, cb: (err: any, data?: UpdateDomainNameCommandOutput) => void): void;
            updateDomainName(args: UpdateDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainNameCommandOutput) => void): void;
            /**
                * <p>Updates an Integration.</p>
                */
            updateIntegration(args: UpdateIntegrationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIntegrationCommandOutput>;
            updateIntegration(args: UpdateIntegrationCommandInput, cb: (err: any, data?: UpdateIntegrationCommandOutput) => void): void;
            updateIntegration(args: UpdateIntegrationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIntegrationCommandOutput) => void): void;
            /**
                * <p>Updates an IntegrationResponses.</p>
                */
            updateIntegrationResponse(args: UpdateIntegrationResponseCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIntegrationResponseCommandOutput>;
            updateIntegrationResponse(args: UpdateIntegrationResponseCommandInput, cb: (err: any, data?: UpdateIntegrationResponseCommandOutput) => void): void;
            updateIntegrationResponse(args: UpdateIntegrationResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIntegrationResponseCommandOutput) => void): void;
            /**
                * <p>Updates a Model.</p>
                */
            updateModel(args: UpdateModelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateModelCommandOutput>;
            updateModel(args: UpdateModelCommandInput, cb: (err: any, data?: UpdateModelCommandOutput) => void): void;
            updateModel(args: UpdateModelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateModelCommandOutput) => void): void;
            /**
                * <p>Updates a Route.</p>
                */
            updateRoute(args: UpdateRouteCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRouteCommandOutput>;
            updateRoute(args: UpdateRouteCommandInput, cb: (err: any, data?: UpdateRouteCommandOutput) => void): void;
            updateRoute(args: UpdateRouteCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRouteCommandOutput) => void): void;
            /**
                * <p>Updates a RouteResponse.</p>
                */
            updateRouteResponse(args: UpdateRouteResponseCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRouteResponseCommandOutput>;
            updateRouteResponse(args: UpdateRouteResponseCommandInput, cb: (err: any, data?: UpdateRouteResponseCommandOutput) => void): void;
            updateRouteResponse(args: UpdateRouteResponseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRouteResponseCommandOutput) => void): void;
            /**
                * <p>Updates a Stage.</p>
                */
            updateStage(args: UpdateStageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateStageCommandOutput>;
            updateStage(args: UpdateStageCommandInput, cb: (err: any, data?: UpdateStageCommandOutput) => void): void;
            updateStage(args: UpdateStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateStageCommandOutput) => void): void;
            /**
                * <p>Updates a VPC link.</p>
                */
            updateVpcLink(args: UpdateVpcLinkCommandInput, options?: __HttpHandlerOptions): Promise<UpdateVpcLinkCommandOutput>;
            updateVpcLink(args: UpdateVpcLinkCommandInput, cb: (err: any, data?: UpdateVpcLinkCommandOutput) => void): void;
            updateVpcLink(args: UpdateVpcLinkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateVpcLinkCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateApiCommandInput, CreateApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateApiCommand";
    import { CreateApiMappingCommandInput, CreateApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateApiMappingCommand";
    import { CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateAuthorizerCommand";
    import { CreateDeploymentCommandInput, CreateDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateDeploymentCommand";
    import { CreateDomainNameCommandInput, CreateDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateDomainNameCommand";
    import { CreateIntegrationCommandInput, CreateIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateIntegrationCommand";
    import { CreateIntegrationResponseCommandInput, CreateIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateIntegrationResponseCommand";
    import { CreateModelCommandInput, CreateModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateModelCommand";
    import { CreateRouteCommandInput, CreateRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateRouteCommand";
    import { CreateRouteResponseCommandInput, CreateRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateRouteResponseCommand";
    import { CreateStageCommandInput, CreateStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateStageCommand";
    import { CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateVpcLinkCommand";
    import { DeleteAccessLogSettingsCommandInput, DeleteAccessLogSettingsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteAccessLogSettingsCommand";
    import { DeleteApiCommandInput, DeleteApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteApiCommand";
    import { DeleteApiMappingCommandInput, DeleteApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteApiMappingCommand";
    import { DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteAuthorizerCommand";
    import { DeleteCorsConfigurationCommandInput, DeleteCorsConfigurationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteCorsConfigurationCommand";
    import { DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteDeploymentCommand";
    import { DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteDomainNameCommand";
    import { DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteIntegrationCommand";
    import { DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteIntegrationResponseCommand";
    import { DeleteModelCommandInput, DeleteModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteModelCommand";
    import { DeleteRouteCommandInput, DeleteRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteCommand";
    import { DeleteRouteRequestParameterCommandInput, DeleteRouteRequestParameterCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteRequestParameterCommand";
    import { DeleteRouteResponseCommandInput, DeleteRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteResponseCommand";
    import { DeleteRouteSettingsCommandInput, DeleteRouteSettingsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteSettingsCommand";
    import { DeleteStageCommandInput, DeleteStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteStageCommand";
    import { DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteVpcLinkCommand";
    import { ExportApiCommandInput, ExportApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ExportApiCommand";
    import { GetApiCommandInput, GetApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiCommand";
    import { GetApiMappingCommandInput, GetApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiMappingCommand";
    import { GetApiMappingsCommandInput, GetApiMappingsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiMappingsCommand";
    import { GetApisCommandInput, GetApisCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApisCommand";
    import { GetAuthorizerCommandInput, GetAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetAuthorizerCommand";
    import { GetAuthorizersCommandInput, GetAuthorizersCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetAuthorizersCommand";
    import { GetDeploymentCommandInput, GetDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDeploymentCommand";
    import { GetDeploymentsCommandInput, GetDeploymentsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDeploymentsCommand";
    import { GetDomainNameCommandInput, GetDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDomainNameCommand";
    import { GetDomainNamesCommandInput, GetDomainNamesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDomainNamesCommand";
    import { GetIntegrationCommandInput, GetIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationCommand";
    import { GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationResponseCommand";
    import { GetIntegrationResponsesCommandInput, GetIntegrationResponsesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationResponsesCommand";
    import { GetIntegrationsCommandInput, GetIntegrationsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationsCommand";
    import { GetModelCommandInput, GetModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelCommand";
    import { GetModelsCommandInput, GetModelsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelsCommand";
    import { GetModelTemplateCommandInput, GetModelTemplateCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelTemplateCommand";
    import { GetRouteCommandInput, GetRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteCommand";
    import { GetRouteResponseCommandInput, GetRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteResponseCommand";
    import { GetRouteResponsesCommandInput, GetRouteResponsesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteResponsesCommand";
    import { GetRoutesCommandInput, GetRoutesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRoutesCommand";
    import { GetStageCommandInput, GetStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetStageCommand";
    import { GetStagesCommandInput, GetStagesCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetStagesCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetTagsCommand";
    import { GetVpcLinkCommandInput, GetVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetVpcLinkCommand";
    import { GetVpcLinksCommandInput, GetVpcLinksCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetVpcLinksCommand";
    import { ImportApiCommandInput, ImportApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ImportApiCommand";
    import { ReimportApiCommandInput, ReimportApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ReimportApiCommand";
    import { ResetAuthorizersCacheCommandInput, ResetAuthorizersCacheCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ResetAuthorizersCacheCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UntagResourceCommand";
    import { UpdateApiCommandInput, UpdateApiCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateApiCommand";
    import { UpdateApiMappingCommandInput, UpdateApiMappingCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateApiMappingCommand";
    import { UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateAuthorizerCommand";
    import { UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateDeploymentCommand";
    import { UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateDomainNameCommand";
    import { UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateIntegrationCommand";
    import { UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateIntegrationResponseCommand";
    import { UpdateModelCommandInput, UpdateModelCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateModelCommand";
    import { UpdateRouteCommandInput, UpdateRouteCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateRouteCommand";
    import { UpdateRouteResponseCommandInput, UpdateRouteResponseCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateRouteResponseCommand";
    import { UpdateStageCommandInput, UpdateStageCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateStageCommand";
    import { UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateVpcLinkCommand";
    export type ServiceInputTypes = CreateApiCommandInput | CreateApiMappingCommandInput | CreateAuthorizerCommandInput | CreateDeploymentCommandInput | CreateDomainNameCommandInput | CreateIntegrationCommandInput | CreateIntegrationResponseCommandInput | CreateModelCommandInput | CreateRouteCommandInput | CreateRouteResponseCommandInput | CreateStageCommandInput | CreateVpcLinkCommandInput | DeleteAccessLogSettingsCommandInput | DeleteApiCommandInput | DeleteApiMappingCommandInput | DeleteAuthorizerCommandInput | DeleteCorsConfigurationCommandInput | DeleteDeploymentCommandInput | DeleteDomainNameCommandInput | DeleteIntegrationCommandInput | DeleteIntegrationResponseCommandInput | DeleteModelCommandInput | DeleteRouteCommandInput | DeleteRouteRequestParameterCommandInput | DeleteRouteResponseCommandInput | DeleteRouteSettingsCommandInput | DeleteStageCommandInput | DeleteVpcLinkCommandInput | ExportApiCommandInput | GetApiCommandInput | GetApiMappingCommandInput | GetApiMappingsCommandInput | GetApisCommandInput | GetAuthorizerCommandInput | GetAuthorizersCommandInput | GetDeploymentCommandInput | GetDeploymentsCommandInput | GetDomainNameCommandInput | GetDomainNamesCommandInput | GetIntegrationCommandInput | GetIntegrationResponseCommandInput | GetIntegrationResponsesCommandInput | GetIntegrationsCommandInput | GetModelCommandInput | GetModelTemplateCommandInput | GetModelsCommandInput | GetRouteCommandInput | GetRouteResponseCommandInput | GetRouteResponsesCommandInput | GetRoutesCommandInput | GetStageCommandInput | GetStagesCommandInput | GetTagsCommandInput | GetVpcLinkCommandInput | GetVpcLinksCommandInput | ImportApiCommandInput | ReimportApiCommandInput | ResetAuthorizersCacheCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateApiCommandInput | UpdateApiMappingCommandInput | UpdateAuthorizerCommandInput | UpdateDeploymentCommandInput | UpdateDomainNameCommandInput | UpdateIntegrationCommandInput | UpdateIntegrationResponseCommandInput | UpdateModelCommandInput | UpdateRouteCommandInput | UpdateRouteResponseCommandInput | UpdateStageCommandInput | UpdateVpcLinkCommandInput;
    export type ServiceOutputTypes = CreateApiCommandOutput | CreateApiMappingCommandOutput | CreateAuthorizerCommandOutput | CreateDeploymentCommandOutput | CreateDomainNameCommandOutput | CreateIntegrationCommandOutput | CreateIntegrationResponseCommandOutput | CreateModelCommandOutput | CreateRouteCommandOutput | CreateRouteResponseCommandOutput | CreateStageCommandOutput | CreateVpcLinkCommandOutput | DeleteAccessLogSettingsCommandOutput | DeleteApiCommandOutput | DeleteApiMappingCommandOutput | DeleteAuthorizerCommandOutput | DeleteCorsConfigurationCommandOutput | DeleteDeploymentCommandOutput | DeleteDomainNameCommandOutput | DeleteIntegrationCommandOutput | DeleteIntegrationResponseCommandOutput | DeleteModelCommandOutput | DeleteRouteCommandOutput | DeleteRouteRequestParameterCommandOutput | DeleteRouteResponseCommandOutput | DeleteRouteSettingsCommandOutput | DeleteStageCommandOutput | DeleteVpcLinkCommandOutput | ExportApiCommandOutput | GetApiCommandOutput | GetApiMappingCommandOutput | GetApiMappingsCommandOutput | GetApisCommandOutput | GetAuthorizerCommandOutput | GetAuthorizersCommandOutput | GetDeploymentCommandOutput | GetDeploymentsCommandOutput | GetDomainNameCommandOutput | GetDomainNamesCommandOutput | GetIntegrationCommandOutput | GetIntegrationResponseCommandOutput | GetIntegrationResponsesCommandOutput | GetIntegrationsCommandOutput | GetModelCommandOutput | GetModelTemplateCommandOutput | GetModelsCommandOutput | GetRouteCommandOutput | GetRouteResponseCommandOutput | GetRouteResponsesCommandOutput | GetRoutesCommandOutput | GetStageCommandOutput | GetStagesCommandOutput | GetTagsCommandOutput | GetVpcLinkCommandOutput | GetVpcLinksCommandOutput | ImportApiCommandOutput | ReimportApiCommandOutput | ResetAuthorizersCacheCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateApiCommandOutput | UpdateApiMappingCommandOutput | UpdateAuthorizerCommandOutput | UpdateDeploymentCommandOutput | UpdateDomainNameCommandOutput | UpdateIntegrationCommandOutput | UpdateIntegrationResponseCommandOutput | UpdateModelCommandOutput | UpdateRouteCommandOutput | UpdateRouteResponseCommandOutput | UpdateStageCommandOutput | UpdateVpcLinkCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ApiGatewayV2ClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ApiGatewayV2Client class constructor that set the region, credentials and other options.
        */
    export interface ApiGatewayV2ClientConfig extends ApiGatewayV2ClientConfigType {
    }
    type ApiGatewayV2ClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ApiGatewayV2Client class. This is resolved and normalized from the {@link ApiGatewayV2ClientConfig | constructor configuration interface}.
        */
    export interface ApiGatewayV2ClientResolvedConfig extends ApiGatewayV2ClientResolvedConfigType {
    }
    /**
        * <p>Amazon API Gateway V2</p>
        */
    export class ApiGatewayV2Client extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ApiGatewayV2ClientResolvedConfig> {
            /**
                * The resolved configuration of ApiGatewayV2Client class. This is resolved and normalized from the {@link ApiGatewayV2ClientConfig | constructor configuration interface}.
                */
            readonly config: ApiGatewayV2ClientResolvedConfig;
            constructor(configuration: ApiGatewayV2ClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateApiRequest, CreateApiResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateApiCommandInput extends CreateApiRequest {
    }
    export interface CreateApiCommandOutput extends CreateApiResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Api resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateApiCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateApiCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApiCommandInput} for command's `input` shape.
        * @see {@link CreateApiCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateApiCommand extends $Command<CreateApiCommandInput, CreateApiCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateApiCommandInput;
            constructor(input: CreateApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApiCommandInput, CreateApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateApiMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateApiMappingRequest, CreateApiMappingResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateApiMappingCommandInput extends CreateApiMappingRequest {
    }
    export interface CreateApiMappingCommandOutput extends CreateApiMappingResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an API mapping.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateApiMappingCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateApiMappingCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateApiMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApiMappingCommandInput} for command's `input` shape.
        * @see {@link CreateApiMappingCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateApiMappingCommand extends $Command<CreateApiMappingCommandInput, CreateApiMappingCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateApiMappingCommandInput;
            constructor(input: CreateApiMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApiMappingCommandInput, CreateApiMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateAuthorizerRequest, CreateAuthorizerResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateAuthorizerCommandInput extends CreateAuthorizerRequest {
    }
    export interface CreateAuthorizerCommandOutput extends CreateAuthorizerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Authorizer for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateAuthorizerCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateAuthorizerCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAuthorizerCommandInput} for command's `input` shape.
        * @see {@link CreateAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateAuthorizerCommand extends $Command<CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateAuthorizerCommandInput;
            constructor(input: CreateAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAuthorizerCommandInput, CreateAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateDeploymentRequest, CreateDeploymentResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateDeploymentCommandInput extends CreateDeploymentRequest {
    }
    export interface CreateDeploymentCommandOutput extends CreateDeploymentResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a Deployment for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateDeploymentCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateDeploymentCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeploymentCommandInput} for command's `input` shape.
        * @see {@link CreateDeploymentCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateDeploymentCommand extends $Command<CreateDeploymentCommandInput, CreateDeploymentCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateDeploymentCommandInput;
            constructor(input: CreateDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeploymentCommandInput, CreateDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateDomainNameRequest, CreateDomainNameResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateDomainNameCommandInput extends CreateDomainNameRequest {
    }
    export interface CreateDomainNameCommandOutput extends CreateDomainNameResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a domain name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateDomainNameCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateDomainNameCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDomainNameCommandInput} for command's `input` shape.
        * @see {@link CreateDomainNameCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateDomainNameCommand extends $Command<CreateDomainNameCommandInput, CreateDomainNameCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateDomainNameCommandInput;
            constructor(input: CreateDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDomainNameCommandInput, CreateDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateIntegrationRequest, CreateIntegrationResult } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateIntegrationCommandInput extends CreateIntegrationRequest {
    }
    export interface CreateIntegrationCommandOutput extends CreateIntegrationResult, __MetadataBearer {
    }
    /**
        * <p>Creates an Integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateIntegrationCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateIntegrationCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIntegrationCommandInput} for command's `input` shape.
        * @see {@link CreateIntegrationCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateIntegrationCommand extends $Command<CreateIntegrationCommandInput, CreateIntegrationCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateIntegrationCommandInput;
            constructor(input: CreateIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIntegrationCommandInput, CreateIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateIntegrationResponseRequest, CreateIntegrationResponseResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateIntegrationResponseCommandInput extends CreateIntegrationResponseRequest {
    }
    export interface CreateIntegrationResponseCommandOutput extends CreateIntegrationResponseResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an IntegrationResponses.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateIntegrationResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateIntegrationResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link CreateIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateIntegrationResponseCommand extends $Command<CreateIntegrationResponseCommandInput, CreateIntegrationResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateIntegrationResponseCommandInput;
            constructor(input: CreateIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIntegrationResponseCommandInput, CreateIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateModelRequest, CreateModelResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateModelCommandInput extends CreateModelRequest {
    }
    export interface CreateModelCommandOutput extends CreateModelResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a Model for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateModelCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateModelCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateModelCommandInput} for command's `input` shape.
        * @see {@link CreateModelCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateModelCommand extends $Command<CreateModelCommandInput, CreateModelCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateModelCommandInput;
            constructor(input: CreateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateModelCommandInput, CreateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateRouteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateRouteRequest, CreateRouteResult } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateRouteCommandInput extends CreateRouteRequest {
    }
    export interface CreateRouteCommandOutput extends CreateRouteResult, __MetadataBearer {
    }
    /**
        * <p>Creates a Route for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateRouteCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateRouteCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateRouteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRouteCommandInput} for command's `input` shape.
        * @see {@link CreateRouteCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateRouteCommand extends $Command<CreateRouteCommandInput, CreateRouteCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateRouteCommandInput;
            constructor(input: CreateRouteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRouteCommandInput, CreateRouteCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateRouteResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateRouteResponseRequest, CreateRouteResponseResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateRouteResponseCommandInput extends CreateRouteResponseRequest {
    }
    export interface CreateRouteResponseCommandOutput extends CreateRouteResponseResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a RouteResponse for a Route.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateRouteResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateRouteResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateRouteResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRouteResponseCommandInput} for command's `input` shape.
        * @see {@link CreateRouteResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateRouteResponseCommand extends $Command<CreateRouteResponseCommandInput, CreateRouteResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateRouteResponseCommandInput;
            constructor(input: CreateRouteResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRouteResponseCommandInput, CreateRouteResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateStageRequest, CreateStageResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateStageCommandInput extends CreateStageRequest {
    }
    export interface CreateStageCommandOutput extends CreateStageResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a Stage for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateStageCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateStageCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateStageCommandInput} for command's `input` shape.
        * @see {@link CreateStageCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateStageCommand extends $Command<CreateStageCommandInput, CreateStageCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateStageCommandInput;
            constructor(input: CreateStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateStageCommandInput, CreateStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/CreateVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { CreateVpcLinkRequest, CreateVpcLinkResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface CreateVpcLinkCommandInput extends CreateVpcLinkRequest {
    }
    export interface CreateVpcLinkCommandOutput extends CreateVpcLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a VPC link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, CreateVpcLinkCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, CreateVpcLinkCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new CreateVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVpcLinkCommandInput} for command's `input` shape.
        * @see {@link CreateVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class CreateVpcLinkCommand extends $Command<CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: CreateVpcLinkCommandInput;
            constructor(input: CreateVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVpcLinkCommandInput, CreateVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteAccessLogSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteAccessLogSettingsRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteAccessLogSettingsCommandInput extends DeleteAccessLogSettingsRequest {
    }
    export interface DeleteAccessLogSettingsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteAccessLogSettingsCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteAccessLogSettingsCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteAccessLogSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAccessLogSettingsCommandInput} for command's `input` shape.
        * @see {@link DeleteAccessLogSettingsCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteAccessLogSettingsCommand extends $Command<DeleteAccessLogSettingsCommandInput, DeleteAccessLogSettingsCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteAccessLogSettingsCommandInput;
            constructor(input: DeleteAccessLogSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAccessLogSettingsCommandInput, DeleteAccessLogSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteApiRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteApiCommandInput extends DeleteApiRequest {
    }
    export interface DeleteApiCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an Api resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteApiCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteApiCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApiCommandInput} for command's `input` shape.
        * @see {@link DeleteApiCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteApiCommand extends $Command<DeleteApiCommandInput, DeleteApiCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteApiCommandInput;
            constructor(input: DeleteApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApiCommandInput, DeleteApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteApiMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteApiMappingRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteApiMappingCommandInput extends DeleteApiMappingRequest {
    }
    export interface DeleteApiMappingCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an API mapping.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteApiMappingCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteApiMappingCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteApiMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApiMappingCommandInput} for command's `input` shape.
        * @see {@link DeleteApiMappingCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteApiMappingCommand extends $Command<DeleteApiMappingCommandInput, DeleteApiMappingCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteApiMappingCommandInput;
            constructor(input: DeleteApiMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApiMappingCommandInput, DeleteApiMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteAuthorizerRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteAuthorizerCommandInput extends DeleteAuthorizerRequest {
    }
    export interface DeleteAuthorizerCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an Authorizer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteAuthorizerCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteAuthorizerCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAuthorizerCommandInput} for command's `input` shape.
        * @see {@link DeleteAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteAuthorizerCommand extends $Command<DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteAuthorizerCommandInput;
            constructor(input: DeleteAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAuthorizerCommandInput, DeleteAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteCorsConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteCorsConfigurationRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteCorsConfigurationCommandInput extends DeleteCorsConfigurationRequest {
    }
    export interface DeleteCorsConfigurationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a CORS configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteCorsConfigurationCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteCorsConfigurationCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteCorsConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCorsConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteCorsConfigurationCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteCorsConfigurationCommand extends $Command<DeleteCorsConfigurationCommandInput, DeleteCorsConfigurationCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteCorsConfigurationCommandInput;
            constructor(input: DeleteCorsConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCorsConfigurationCommandInput, DeleteCorsConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteDeploymentRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteDeploymentCommandInput extends DeleteDeploymentRequest {
    }
    export interface DeleteDeploymentCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Deployment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteDeploymentCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteDeploymentCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDeploymentCommandInput} for command's `input` shape.
        * @see {@link DeleteDeploymentCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteDeploymentCommand extends $Command<DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteDeploymentCommandInput;
            constructor(input: DeleteDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDeploymentCommandInput, DeleteDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteDomainNameRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteDomainNameCommandInput extends DeleteDomainNameRequest {
    }
    export interface DeleteDomainNameCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a domain name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteDomainNameCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteDomainNameCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainNameCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainNameCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteDomainNameCommand extends $Command<DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteDomainNameCommandInput;
            constructor(input: DeleteDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteIntegrationRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteIntegrationCommandInput extends DeleteIntegrationRequest {
    }
    export interface DeleteIntegrationCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an Integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteIntegrationCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteIntegrationCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIntegrationCommandInput} for command's `input` shape.
        * @see {@link DeleteIntegrationCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteIntegrationCommand extends $Command<DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteIntegrationCommandInput;
            constructor(input: DeleteIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIntegrationCommandInput, DeleteIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteIntegrationResponseRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteIntegrationResponseCommandInput extends DeleteIntegrationResponseRequest {
    }
    export interface DeleteIntegrationResponseCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an IntegrationResponses.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteIntegrationResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteIntegrationResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link DeleteIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteIntegrationResponseCommand extends $Command<DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteIntegrationResponseCommandInput;
            constructor(input: DeleteIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIntegrationResponseCommandInput, DeleteIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteModelRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteModelCommandInput extends DeleteModelRequest {
    }
    export interface DeleteModelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteModelCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteModelCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteModelCommandInput} for command's `input` shape.
        * @see {@link DeleteModelCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteModelCommand extends $Command<DeleteModelCommandInput, DeleteModelCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteModelCommandInput;
            constructor(input: DeleteModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteModelCommandInput, DeleteModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteRouteRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteRouteCommandInput extends DeleteRouteRequest {
    }
    export interface DeleteRouteCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Route.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteRouteCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteRouteCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteRouteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRouteCommandInput} for command's `input` shape.
        * @see {@link DeleteRouteCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteRouteCommand extends $Command<DeleteRouteCommandInput, DeleteRouteCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteRouteCommandInput;
            constructor(input: DeleteRouteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRouteCommandInput, DeleteRouteCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteRequestParameterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteRouteRequestParameterRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteRouteRequestParameterCommandInput extends DeleteRouteRequestParameterRequest {
    }
    export interface DeleteRouteRequestParameterCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a route request parameter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteRouteRequestParameterCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteRouteRequestParameterCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteRouteRequestParameterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRouteRequestParameterCommandInput} for command's `input` shape.
        * @see {@link DeleteRouteRequestParameterCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteRouteRequestParameterCommand extends $Command<DeleteRouteRequestParameterCommandInput, DeleteRouteRequestParameterCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteRouteRequestParameterCommandInput;
            constructor(input: DeleteRouteRequestParameterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRouteRequestParameterCommandInput, DeleteRouteRequestParameterCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteRouteResponseRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteRouteResponseCommandInput extends DeleteRouteResponseRequest {
    }
    export interface DeleteRouteResponseCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a RouteResponse.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteRouteResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteRouteResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteRouteResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRouteResponseCommandInput} for command's `input` shape.
        * @see {@link DeleteRouteResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteRouteResponseCommand extends $Command<DeleteRouteResponseCommandInput, DeleteRouteResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteRouteResponseCommandInput;
            constructor(input: DeleteRouteResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRouteResponseCommandInput, DeleteRouteResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteRouteSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteRouteSettingsRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteRouteSettingsCommandInput extends DeleteRouteSettingsRequest {
    }
    export interface DeleteRouteSettingsCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the RouteSettings for a stage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteRouteSettingsCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteRouteSettingsCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteRouteSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRouteSettingsCommandInput} for command's `input` shape.
        * @see {@link DeleteRouteSettingsCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteRouteSettingsCommand extends $Command<DeleteRouteSettingsCommandInput, DeleteRouteSettingsCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteRouteSettingsCommandInput;
            constructor(input: DeleteRouteSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRouteSettingsCommandInput, DeleteRouteSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteStageRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteStageCommandInput extends DeleteStageRequest {
    }
    export interface DeleteStageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Stage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteStageCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteStageCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteStageCommandInput} for command's `input` shape.
        * @see {@link DeleteStageCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteStageCommand extends $Command<DeleteStageCommandInput, DeleteStageCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteStageCommandInput;
            constructor(input: DeleteStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteStageCommandInput, DeleteStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/DeleteVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { DeleteVpcLinkRequest, DeleteVpcLinkResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface DeleteVpcLinkCommandInput extends DeleteVpcLinkRequest {
    }
    export interface DeleteVpcLinkCommandOutput extends DeleteVpcLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a VPC link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, DeleteVpcLinkCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, DeleteVpcLinkCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new DeleteVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVpcLinkCommandInput} for command's `input` shape.
        * @see {@link DeleteVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class DeleteVpcLinkCommand extends $Command<DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: DeleteVpcLinkCommandInput;
            constructor(input: DeleteVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVpcLinkCommandInput, DeleteVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ExportApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { ExportApiRequest, ExportApiResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface ExportApiCommandInput extends ExportApiRequest {
    }
    export interface ExportApiCommandOutput extends ExportApiResponse, __MetadataBearer {
    }
    export class ExportApiCommand extends $Command<ExportApiCommandInput, ExportApiCommandOutput, ApiGatewayV2ClientResolvedConfig> {
        readonly input: ExportApiCommandInput;
        constructor(input: ExportApiCommandInput);
        /**
          * @internal
          */
        resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExportApiCommandInput, ExportApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetApiRequest, GetApiResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetApiCommandInput extends GetApiRequest {
    }
    export interface GetApiCommandOutput extends GetApiResponse, __MetadataBearer {
    }
    /**
        * <p>Gets an Api resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetApiCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetApiCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApiCommandInput} for command's `input` shape.
        * @see {@link GetApiCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetApiCommand extends $Command<GetApiCommandInput, GetApiCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetApiCommandInput;
            constructor(input: GetApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApiCommandInput, GetApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetApiMappingRequest, GetApiMappingResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetApiMappingCommandInput extends GetApiMappingRequest {
    }
    export interface GetApiMappingCommandOutput extends GetApiMappingResponse, __MetadataBearer {
    }
    /**
        * <p>Gets an API mapping.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetApiMappingCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetApiMappingCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetApiMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApiMappingCommandInput} for command's `input` shape.
        * @see {@link GetApiMappingCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetApiMappingCommand extends $Command<GetApiMappingCommandInput, GetApiMappingCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetApiMappingCommandInput;
            constructor(input: GetApiMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApiMappingCommandInput, GetApiMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApiMappingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetApiMappingsRequest, GetApiMappingsResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetApiMappingsCommandInput extends GetApiMappingsRequest {
    }
    export interface GetApiMappingsCommandOutput extends GetApiMappingsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets API mappings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetApiMappingsCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetApiMappingsCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetApiMappingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApiMappingsCommandInput} for command's `input` shape.
        * @see {@link GetApiMappingsCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetApiMappingsCommand extends $Command<GetApiMappingsCommandInput, GetApiMappingsCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetApiMappingsCommandInput;
            constructor(input: GetApiMappingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApiMappingsCommandInput, GetApiMappingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetApisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetApisRequest, GetApisResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetApisCommandInput extends GetApisRequest {
    }
    export interface GetApisCommandOutput extends GetApisResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a collection of Api resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetApisCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetApisCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetApisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApisCommandInput} for command's `input` shape.
        * @see {@link GetApisCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetApisCommand extends $Command<GetApisCommandInput, GetApisCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetApisCommandInput;
            constructor(input: GetApisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApisCommandInput, GetApisCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetAuthorizerRequest, GetAuthorizerResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetAuthorizerCommandInput extends GetAuthorizerRequest {
    }
    export interface GetAuthorizerCommandOutput extends GetAuthorizerResponse, __MetadataBearer {
    }
    /**
        * <p>Gets an Authorizer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetAuthorizerCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetAuthorizerCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAuthorizerCommandInput} for command's `input` shape.
        * @see {@link GetAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetAuthorizerCommand extends $Command<GetAuthorizerCommandInput, GetAuthorizerCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetAuthorizerCommandInput;
            constructor(input: GetAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAuthorizerCommandInput, GetAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetAuthorizersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetAuthorizersRequest, GetAuthorizersResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetAuthorizersCommandInput extends GetAuthorizersRequest {
    }
    export interface GetAuthorizersCommandOutput extends GetAuthorizersResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the Authorizers for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetAuthorizersCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetAuthorizersCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetAuthorizersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAuthorizersCommandInput} for command's `input` shape.
        * @see {@link GetAuthorizersCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetAuthorizersCommand extends $Command<GetAuthorizersCommandInput, GetAuthorizersCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetAuthorizersCommandInput;
            constructor(input: GetAuthorizersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAuthorizersCommandInput, GetAuthorizersCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetDeploymentRequest, GetDeploymentResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetDeploymentCommandInput extends GetDeploymentRequest {
    }
    export interface GetDeploymentCommandOutput extends GetDeploymentResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a Deployment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetDeploymentCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetDeploymentCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetDeploymentCommand extends $Command<GetDeploymentCommandInput, GetDeploymentCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetDeploymentCommandInput;
            constructor(input: GetDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentCommandInput, GetDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetDeploymentsRequest, GetDeploymentsResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetDeploymentsCommandInput extends GetDeploymentsRequest {
    }
    export interface GetDeploymentsCommandOutput extends GetDeploymentsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the Deployments for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetDeploymentsCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetDeploymentsCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeploymentsCommandInput} for command's `input` shape.
        * @see {@link GetDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetDeploymentsCommand extends $Command<GetDeploymentsCommandInput, GetDeploymentsCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetDeploymentsCommandInput;
            constructor(input: GetDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeploymentsCommandInput, GetDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetDomainNameRequest, GetDomainNameResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetDomainNameCommandInput extends GetDomainNameRequest {
    }
    export interface GetDomainNameCommandOutput extends GetDomainNameResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a domain name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetDomainNameCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetDomainNameCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainNameCommandInput} for command's `input` shape.
        * @see {@link GetDomainNameCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetDomainNameCommand extends $Command<GetDomainNameCommandInput, GetDomainNameCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetDomainNameCommandInput;
            constructor(input: GetDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainNameCommandInput, GetDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetDomainNamesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetDomainNamesRequest, GetDomainNamesResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetDomainNamesCommandInput extends GetDomainNamesRequest {
    }
    export interface GetDomainNamesCommandOutput extends GetDomainNamesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the domain names for an AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetDomainNamesCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetDomainNamesCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetDomainNamesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainNamesCommandInput} for command's `input` shape.
        * @see {@link GetDomainNamesCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetDomainNamesCommand extends $Command<GetDomainNamesCommandInput, GetDomainNamesCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetDomainNamesCommandInput;
            constructor(input: GetDomainNamesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainNamesCommandInput, GetDomainNamesCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetIntegrationRequest, GetIntegrationResult } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetIntegrationCommandInput extends GetIntegrationRequest {
    }
    export interface GetIntegrationCommandOutput extends GetIntegrationResult, __MetadataBearer {
    }
    /**
        * <p>Gets an Integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetIntegrationCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetIntegrationCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIntegrationCommandInput} for command's `input` shape.
        * @see {@link GetIntegrationCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetIntegrationCommand extends $Command<GetIntegrationCommandInput, GetIntegrationCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetIntegrationCommandInput;
            constructor(input: GetIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIntegrationCommandInput, GetIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetIntegrationResponseRequest, GetIntegrationResponseResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetIntegrationResponseCommandInput extends GetIntegrationResponseRequest {
    }
    export interface GetIntegrationResponseCommandOutput extends GetIntegrationResponseResponse, __MetadataBearer {
    }
    /**
        * <p>Gets an IntegrationResponses.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetIntegrationResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetIntegrationResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link GetIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetIntegrationResponseCommand extends $Command<GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetIntegrationResponseCommandInput;
            constructor(input: GetIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIntegrationResponseCommandInput, GetIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationResponsesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetIntegrationResponsesRequest, GetIntegrationResponsesResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetIntegrationResponsesCommandInput extends GetIntegrationResponsesRequest {
    }
    export interface GetIntegrationResponsesCommandOutput extends GetIntegrationResponsesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the IntegrationResponses for an Integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetIntegrationResponsesCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetIntegrationResponsesCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetIntegrationResponsesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIntegrationResponsesCommandInput} for command's `input` shape.
        * @see {@link GetIntegrationResponsesCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetIntegrationResponsesCommand extends $Command<GetIntegrationResponsesCommandInput, GetIntegrationResponsesCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetIntegrationResponsesCommandInput;
            constructor(input: GetIntegrationResponsesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIntegrationResponsesCommandInput, GetIntegrationResponsesCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetIntegrationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetIntegrationsRequest, GetIntegrationsResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetIntegrationsCommandInput extends GetIntegrationsRequest {
    }
    export interface GetIntegrationsCommandOutput extends GetIntegrationsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the Integrations for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetIntegrationsCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetIntegrationsCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetIntegrationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIntegrationsCommandInput} for command's `input` shape.
        * @see {@link GetIntegrationsCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetIntegrationsCommand extends $Command<GetIntegrationsCommandInput, GetIntegrationsCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetIntegrationsCommandInput;
            constructor(input: GetIntegrationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIntegrationsCommandInput, GetIntegrationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetModelRequest, GetModelResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetModelCommandInput extends GetModelRequest {
    }
    export interface GetModelCommandOutput extends GetModelResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a Model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetModelCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetModelCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelCommandInput} for command's `input` shape.
        * @see {@link GetModelCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetModelCommand extends $Command<GetModelCommandInput, GetModelCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetModelCommandInput;
            constructor(input: GetModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelCommandInput, GetModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetModelsRequest, GetModelsResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetModelsCommandInput extends GetModelsRequest {
    }
    export interface GetModelsCommandOutput extends GetModelsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the Models for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetModelsCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetModelsCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetModelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelsCommandInput} for command's `input` shape.
        * @see {@link GetModelsCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetModelsCommand extends $Command<GetModelsCommandInput, GetModelsCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetModelsCommandInput;
            constructor(input: GetModelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelsCommandInput, GetModelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetModelTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetModelTemplateRequest, GetModelTemplateResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetModelTemplateCommandInput extends GetModelTemplateRequest {
    }
    export interface GetModelTemplateCommandOutput extends GetModelTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a model template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetModelTemplateCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetModelTemplateCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetModelTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetModelTemplateCommandInput} for command's `input` shape.
        * @see {@link GetModelTemplateCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetModelTemplateCommand extends $Command<GetModelTemplateCommandInput, GetModelTemplateCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetModelTemplateCommandInput;
            constructor(input: GetModelTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetModelTemplateCommandInput, GetModelTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetRouteRequest, GetRouteResult } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetRouteCommandInput extends GetRouteRequest {
    }
    export interface GetRouteCommandOutput extends GetRouteResult, __MetadataBearer {
    }
    /**
        * <p>Gets a Route.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetRouteCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetRouteCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetRouteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRouteCommandInput} for command's `input` shape.
        * @see {@link GetRouteCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetRouteCommand extends $Command<GetRouteCommandInput, GetRouteCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetRouteCommandInput;
            constructor(input: GetRouteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRouteCommandInput, GetRouteCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetRouteResponseRequest, GetRouteResponseResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetRouteResponseCommandInput extends GetRouteResponseRequest {
    }
    export interface GetRouteResponseCommandOutput extends GetRouteResponseResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a RouteResponse.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetRouteResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetRouteResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetRouteResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRouteResponseCommandInput} for command's `input` shape.
        * @see {@link GetRouteResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetRouteResponseCommand extends $Command<GetRouteResponseCommandInput, GetRouteResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetRouteResponseCommandInput;
            constructor(input: GetRouteResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRouteResponseCommandInput, GetRouteResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRouteResponsesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetRouteResponsesRequest, GetRouteResponsesResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetRouteResponsesCommandInput extends GetRouteResponsesRequest {
    }
    export interface GetRouteResponsesCommandOutput extends GetRouteResponsesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the RouteResponses for a Route.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetRouteResponsesCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetRouteResponsesCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetRouteResponsesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRouteResponsesCommandInput} for command's `input` shape.
        * @see {@link GetRouteResponsesCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetRouteResponsesCommand extends $Command<GetRouteResponsesCommandInput, GetRouteResponsesCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetRouteResponsesCommandInput;
            constructor(input: GetRouteResponsesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRouteResponsesCommandInput, GetRouteResponsesCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetRoutesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetRoutesRequest, GetRoutesResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetRoutesCommandInput extends GetRoutesRequest {
    }
    export interface GetRoutesCommandOutput extends GetRoutesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the Routes for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetRoutesCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetRoutesCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetRoutesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRoutesCommandInput} for command's `input` shape.
        * @see {@link GetRoutesCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetRoutesCommand extends $Command<GetRoutesCommandInput, GetRoutesCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetRoutesCommandInput;
            constructor(input: GetRoutesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRoutesCommandInput, GetRoutesCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetStageRequest, GetStageResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetStageCommandInput extends GetStageRequest {
    }
    export interface GetStageCommandOutput extends GetStageResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a Stage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetStageCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetStageCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStageCommandInput} for command's `input` shape.
        * @see {@link GetStageCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetStageCommand extends $Command<GetStageCommandInput, GetStageCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetStageCommandInput;
            constructor(input: GetStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStageCommandInput, GetStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetStagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetStagesRequest, GetStagesResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetStagesCommandInput extends GetStagesRequest {
    }
    export interface GetStagesCommandOutput extends GetStagesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the Stages for an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetStagesCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetStagesCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetStagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStagesCommandInput} for command's `input` shape.
        * @see {@link GetStagesCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetStagesCommand extends $Command<GetStagesCommandInput, GetStagesCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetStagesCommandInput;
            constructor(input: GetStagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStagesCommandInput, GetStagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetTagsRequest, GetTagsResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetTagsCommandInput extends GetTagsRequest {
    }
    export interface GetTagsCommandOutput extends GetTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a collection of Tag resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetTagsCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetTagsCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTagsCommandInput} for command's `input` shape.
        * @see {@link GetTagsCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetTagsCommand extends $Command<GetTagsCommandInput, GetTagsCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetTagsCommandInput;
            constructor(input: GetTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTagsCommandInput, GetTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetVpcLinkRequest, GetVpcLinkResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetVpcLinkCommandInput extends GetVpcLinkRequest {
    }
    export interface GetVpcLinkCommandOutput extends GetVpcLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a VPC link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetVpcLinkCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetVpcLinkCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVpcLinkCommandInput} for command's `input` shape.
        * @see {@link GetVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetVpcLinkCommand extends $Command<GetVpcLinkCommandInput, GetVpcLinkCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetVpcLinkCommandInput;
            constructor(input: GetVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVpcLinkCommandInput, GetVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/GetVpcLinksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { GetVpcLinksRequest, GetVpcLinksResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface GetVpcLinksCommandInput extends GetVpcLinksRequest {
    }
    export interface GetVpcLinksCommandOutput extends GetVpcLinksResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a collection of VPC links.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, GetVpcLinksCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, GetVpcLinksCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new GetVpcLinksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetVpcLinksCommandInput} for command's `input` shape.
        * @see {@link GetVpcLinksCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class GetVpcLinksCommand extends $Command<GetVpcLinksCommandInput, GetVpcLinksCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: GetVpcLinksCommandInput;
            constructor(input: GetVpcLinksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetVpcLinksCommandInput, GetVpcLinksCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ImportApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { ImportApiRequest, ImportApiResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface ImportApiCommandInput extends ImportApiRequest {
    }
    export interface ImportApiCommandOutput extends ImportApiResponse, __MetadataBearer {
    }
    /**
        * <p>Imports an API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, ImportApiCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, ImportApiCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new ImportApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportApiCommandInput} for command's `input` shape.
        * @see {@link ImportApiCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class ImportApiCommand extends $Command<ImportApiCommandInput, ImportApiCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: ImportApiCommandInput;
            constructor(input: ImportApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportApiCommandInput, ImportApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ReimportApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { ReimportApiRequest, ReimportApiResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface ReimportApiCommandInput extends ReimportApiRequest {
    }
    export interface ReimportApiCommandOutput extends ReimportApiResponse, __MetadataBearer {
    }
    /**
        * <p>Puts an Api resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, ReimportApiCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, ReimportApiCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new ReimportApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ReimportApiCommandInput} for command's `input` shape.
        * @see {@link ReimportApiCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class ReimportApiCommand extends $Command<ReimportApiCommandInput, ReimportApiCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: ReimportApiCommandInput;
            constructor(input: ReimportApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ReimportApiCommandInput, ReimportApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/ResetAuthorizersCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { ResetAuthorizersCacheRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface ResetAuthorizersCacheCommandInput extends ResetAuthorizersCacheRequest {
    }
    export interface ResetAuthorizersCacheCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, ResetAuthorizersCacheCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, ResetAuthorizersCacheCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new ResetAuthorizersCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetAuthorizersCacheCommandInput} for command's `input` shape.
        * @see {@link ResetAuthorizersCacheCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class ResetAuthorizersCacheCommand extends $Command<ResetAuthorizersCacheCommandInput, ResetAuthorizersCacheCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: ResetAuthorizersCacheCommandInput;
            constructor(input: ResetAuthorizersCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetAuthorizersCacheCommandInput, ResetAuthorizersCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new Tag resource to represent a tag.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, TagResourceCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, TagResourceCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UntagResourceRequest } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a Tag.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UntagResourceCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UntagResourceCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateApiRequest, UpdateApiResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateApiCommandInput extends UpdateApiRequest {
    }
    export interface UpdateApiCommandOutput extends UpdateApiResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an Api resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateApiCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateApiCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApiCommandInput} for command's `input` shape.
        * @see {@link UpdateApiCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateApiCommand extends $Command<UpdateApiCommandInput, UpdateApiCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateApiCommandInput;
            constructor(input: UpdateApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApiCommandInput, UpdateApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateApiMappingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateApiMappingRequest, UpdateApiMappingResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateApiMappingCommandInput extends UpdateApiMappingRequest {
    }
    export interface UpdateApiMappingCommandOutput extends UpdateApiMappingResponse, __MetadataBearer {
    }
    /**
        * <p>The API mapping.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateApiMappingCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateApiMappingCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateApiMappingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApiMappingCommandInput} for command's `input` shape.
        * @see {@link UpdateApiMappingCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateApiMappingCommand extends $Command<UpdateApiMappingCommandInput, UpdateApiMappingCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateApiMappingCommandInput;
            constructor(input: UpdateApiMappingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApiMappingCommandInput, UpdateApiMappingCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateAuthorizerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateAuthorizerRequest, UpdateAuthorizerResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateAuthorizerCommandInput extends UpdateAuthorizerRequest {
    }
    export interface UpdateAuthorizerCommandOutput extends UpdateAuthorizerResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an Authorizer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateAuthorizerCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateAuthorizerCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateAuthorizerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAuthorizerCommandInput} for command's `input` shape.
        * @see {@link UpdateAuthorizerCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateAuthorizerCommand extends $Command<UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateAuthorizerCommandInput;
            constructor(input: UpdateAuthorizerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAuthorizerCommandInput, UpdateAuthorizerCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateDeploymentRequest, UpdateDeploymentResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateDeploymentCommandInput extends UpdateDeploymentRequest {
    }
    export interface UpdateDeploymentCommandOutput extends UpdateDeploymentResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a Deployment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateDeploymentCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateDeploymentCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDeploymentCommandInput} for command's `input` shape.
        * @see {@link UpdateDeploymentCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateDeploymentCommand extends $Command<UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateDeploymentCommandInput;
            constructor(input: UpdateDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDeploymentCommandInput, UpdateDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateDomainNameRequest, UpdateDomainNameResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateDomainNameCommandInput extends UpdateDomainNameRequest {
    }
    export interface UpdateDomainNameCommandOutput extends UpdateDomainNameResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a domain name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateDomainNameCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateDomainNameCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainNameCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainNameCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateDomainNameCommand extends $Command<UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateDomainNameCommandInput;
            constructor(input: UpdateDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateIntegrationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateIntegrationRequest, UpdateIntegrationResult } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateIntegrationCommandInput extends UpdateIntegrationRequest {
    }
    export interface UpdateIntegrationCommandOutput extends UpdateIntegrationResult, __MetadataBearer {
    }
    /**
        * <p>Updates an Integration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateIntegrationCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateIntegrationCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateIntegrationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIntegrationCommandInput} for command's `input` shape.
        * @see {@link UpdateIntegrationCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateIntegrationCommand extends $Command<UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateIntegrationCommandInput;
            constructor(input: UpdateIntegrationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIntegrationCommandInput, UpdateIntegrationCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateIntegrationResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateIntegrationResponseRequest, UpdateIntegrationResponseResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateIntegrationResponseCommandInput extends UpdateIntegrationResponseRequest {
    }
    export interface UpdateIntegrationResponseCommandOutput extends UpdateIntegrationResponseResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an IntegrationResponses.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateIntegrationResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateIntegrationResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateIntegrationResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIntegrationResponseCommandInput} for command's `input` shape.
        * @see {@link UpdateIntegrationResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateIntegrationResponseCommand extends $Command<UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateIntegrationResponseCommandInput;
            constructor(input: UpdateIntegrationResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIntegrationResponseCommandInput, UpdateIntegrationResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateModelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateModelRequest, UpdateModelResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateModelCommandInput extends UpdateModelRequest {
    }
    export interface UpdateModelCommandOutput extends UpdateModelResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a Model.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateModelCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateModelCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateModelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateModelCommandInput} for command's `input` shape.
        * @see {@link UpdateModelCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateModelCommand extends $Command<UpdateModelCommandInput, UpdateModelCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateModelCommandInput;
            constructor(input: UpdateModelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateModelCommandInput, UpdateModelCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateRouteCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateRouteRequest, UpdateRouteResult } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateRouteCommandInput extends UpdateRouteRequest {
    }
    export interface UpdateRouteCommandOutput extends UpdateRouteResult, __MetadataBearer {
    }
    /**
        * <p>Updates a Route.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateRouteCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateRouteCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateRouteCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRouteCommandInput} for command's `input` shape.
        * @see {@link UpdateRouteCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateRouteCommand extends $Command<UpdateRouteCommandInput, UpdateRouteCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateRouteCommandInput;
            constructor(input: UpdateRouteCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRouteCommandInput, UpdateRouteCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateRouteResponseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateRouteResponseRequest, UpdateRouteResponseResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateRouteResponseCommandInput extends UpdateRouteResponseRequest {
    }
    export interface UpdateRouteResponseCommandOutput extends UpdateRouteResponseResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a RouteResponse.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateRouteResponseCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateRouteResponseCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateRouteResponseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRouteResponseCommandInput} for command's `input` shape.
        * @see {@link UpdateRouteResponseCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateRouteResponseCommand extends $Command<UpdateRouteResponseCommandInput, UpdateRouteResponseCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateRouteResponseCommandInput;
            constructor(input: UpdateRouteResponseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRouteResponseCommandInput, UpdateRouteResponseCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateStageRequest, UpdateStageResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateStageCommandInput extends UpdateStageRequest {
    }
    export interface UpdateStageCommandOutput extends UpdateStageResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a Stage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateStageCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateStageCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateStageCommandInput} for command's `input` shape.
        * @see {@link UpdateStageCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateStageCommand extends $Command<UpdateStageCommandInput, UpdateStageCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateStageCommandInput;
            constructor(input: UpdateStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateStageCommandInput, UpdateStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/commands/UpdateVpcLinkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApiGatewayV2ClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/ApiGatewayV2Client";
    import { UpdateVpcLinkRequest, UpdateVpcLinkResponse } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0";
    export interface UpdateVpcLinkCommandInput extends UpdateVpcLinkRequest {
    }
    export interface UpdateVpcLinkCommandOutput extends UpdateVpcLinkResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a VPC link.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ApiGatewayV2Client, UpdateVpcLinkCommand } from "@aws-sdk/client-apigatewayv2"; // ES Modules import
        * // const { ApiGatewayV2Client, UpdateVpcLinkCommand } = require("@aws-sdk/client-apigatewayv2"); // CommonJS import
        * const client = new ApiGatewayV2Client(config);
        * const command = new UpdateVpcLinkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateVpcLinkCommandInput} for command's `input` shape.
        * @see {@link UpdateVpcLinkCommandOutput} for command's `response` shape.
        * @see {@link ApiGatewayV2ClientResolvedConfig | config} for ApiGatewayV2Client's `config` shape.
        *
        */
    export class UpdateVpcLinkCommand extends $Command<UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput, ApiGatewayV2ClientResolvedConfig> {
            readonly input: UpdateVpcLinkCommandInput;
            constructor(input: UpdateVpcLinkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ApiGatewayV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateVpcLinkCommandInput, UpdateVpcLinkCommandOutput>;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ApiGatewayV2ServiceException as __BaseException } from "@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/ApiGatewayV2ServiceException";
    /**
        * <p>Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.</p>
        */
    export interface Cors {
            /**
                * <p>Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.</p>
                */
            AllowCredentials?: boolean;
            /**
                * <p>Represents a collection of allowed headers. Supported only for HTTP APIs.</p>
                */
            AllowHeaders?: string[];
            /**
                * <p>Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.</p>
                */
            AllowMethods?: string[];
            /**
                * <p>Represents a collection of allowed origins. Supported only for HTTP APIs.</p>
                */
            AllowOrigins?: string[];
            /**
                * <p>Represents a collection of exposed headers. Supported only for HTTP APIs.</p>
                */
            ExposeHeaders?: string[];
            /**
                * <p>The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.</p>
                */
            MaxAge?: number;
    }
    export namespace Cors {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Cors) => any;
    }
    export enum ProtocolType {
            HTTP = "HTTP",
            WEBSOCKET = "WEBSOCKET"
    }
    /**
        * <p>Represents an API.</p>
        */
    export interface Api {
            /**
                * <p>The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.</p>
                */
            ApiEndpoint?: string;
            /**
                * <p>Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The API ID.</p>
                */
            ApiId?: string;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>The timestamp when the API was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.</p>
                */
            ImportInfo?: string[];
            /**
                * <p>The name of the API.</p>
                */
            Name: string | undefined;
            /**
                * <p>The API protocol.</p>
                */
            ProtocolType: ProtocolType | string | undefined;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression: string | undefined;
            /**
                * <p>A collection of tags associated with the API.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
            /**
                * <p>The warning messages reported when failonwarnings is turned on during API import.</p>
                */
            Warnings?: string[];
    }
    export namespace Api {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Api) => any;
    }
    /**
        * <p>Represents an API mapping.</p>
        */
    export interface ApiMapping {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The API mapping identifier.</p>
                */
            ApiMappingId?: string;
            /**
                * <p>The API mapping key.</p>
                */
            ApiMappingKey?: string;
            /**
                * <p>The API stage.</p>
                */
            Stage: string | undefined;
    }
    export namespace ApiMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiMapping) => any;
    }
    export enum AuthorizerType {
            JWT = "JWT",
            REQUEST = "REQUEST"
    }
    /**
        * <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
        */
    export interface JWTConfiguration {
            /**
                * <p>A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.</p>
                */
            Audience?: string[];
            /**
                * <p>The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                *                . Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
                */
            Issuer?: string;
    }
    export namespace JWTConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JWTConfiguration) => any;
    }
    /**
        * <p>Represents an authorizer.</p>
        */
    export interface Authorizer {
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerCredentialsArn?: string;
            /**
                * <p>The authorizer identifier.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p>
                */
            AuthorizerPayloadFormatVersion?: string;
            /**
                * <p>The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.</p>
                */
            AuthorizerResultTtlInSeconds?: number;
            /**
                * <p>The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).</p>
                */
            AuthorizerType?: AuthorizerType | string;
            /**
                * <p>The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                *                , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerUri?: string;
            /**
                * <p>Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a></p>
                */
            EnableSimpleResponses?: boolean;
            /**
                * <p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>
                */
            IdentitySource?: string[];
            /**
                * <p>The validation expression does not apply to the REQUEST authorizer.</p>
                */
            IdentityValidationExpression?: string;
            /**
                * <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
                */
            JwtConfiguration?: JWTConfiguration;
            /**
                * <p>The name of the authorizer.</p>
                */
            Name: string | undefined;
    }
    export namespace Authorizer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Authorizer) => any;
    }
    export enum DeploymentStatus {
            DEPLOYED = "DEPLOYED",
            FAILED = "FAILED",
            PENDING = "PENDING"
    }
    /**
        * <p>An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet.</p>
        */
    export interface Deployment {
            /**
                * <p>Specifies whether a deployment was automatically released.</p>
                */
            AutoDeployed?: boolean;
            /**
                * <p>The date and time when the Deployment resource was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The identifier for the deployment.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
                */
            DeploymentStatus?: DeploymentStatus | string;
            /**
                * <p>May contain additional feedback on the status of an API deployment.</p>
                */
            DeploymentStatusMessage?: string;
            /**
                * <p>The description for the deployment.</p>
                */
            Description?: string;
    }
    export namespace Deployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Deployment) => any;
    }
    export enum DomainNameStatus {
            AVAILABLE = "AVAILABLE",
            PENDING_CERTIFICATE_REIMPORT = "PENDING_CERTIFICATE_REIMPORT",
            PENDING_OWNERSHIP_VERIFICATION = "PENDING_OWNERSHIP_VERIFICATION",
            UPDATING = "UPDATING"
    }
    export enum EndpointType {
            EDGE = "EDGE",
            REGIONAL = "REGIONAL"
    }
    export enum SecurityPolicy {
            TLS_1_0 = "TLS_1_0",
            TLS_1_2 = "TLS_1_2"
    }
    /**
        * <p>The domain name configuration.</p>
        */
    export interface DomainNameConfiguration {
            /**
                * <p>A domain name for the API.</p>
                */
            ApiGatewayDomainName?: string;
            /**
                * <p>An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.</p>
                */
            CertificateArn?: string;
            /**
                * <p>The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.</p>
                */
            CertificateName?: string;
            /**
                * <p>The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.</p>
                */
            CertificateUploadDate?: Date;
            /**
                * <p>The status of the domain name migration. The valid values are AVAILABLE, UPDATING, PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.</p>
                */
            DomainNameStatus?: DomainNameStatus | string;
            /**
                * <p>An optional text message containing detailed information about status of the domain name migration.</p>
                */
            DomainNameStatusMessage?: string;
            /**
                * <p>The endpoint type.</p>
                */
            EndpointType?: EndpointType | string;
            /**
                * <p>The Amazon Route 53 Hosted Zone ID of the endpoint.</p>
                */
            HostedZoneId?: string;
            /**
                * <p>The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.</p>
                */
            SecurityPolicy?: SecurityPolicy | string;
            /**
                * <p>The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn</p>
                */
            OwnershipVerificationCertificateArn?: string;
    }
    export namespace DomainNameConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainNameConfiguration) => any;
    }
    export interface MutualTlsAuthentication {
            /**
                * <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.</p>
                */
            TruststoreUri?: string;
            /**
                * <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.</p>
                */
            TruststoreVersion?: string;
            /**
                * <p>A list of warnings that API Gateway returns while processing your truststore. Invalid certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able to access your API. To resolve warnings, upload a new truststore to S3, and then update you domain name to use the new version.</p>
                */
            TruststoreWarnings?: string[];
    }
    export namespace MutualTlsAuthentication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MutualTlsAuthentication) => any;
    }
    /**
        * <p>Represents a domain name.</p>
        */
    export interface DomainName {
            /**
                * <p>The API mapping selection expression.</p>
                */
            ApiMappingSelectionExpression?: string;
            /**
                * <p>The name of the DomainName resource.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The domain name configurations.</p>
                */
            DomainNameConfigurations?: DomainNameConfiguration[];
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name.</p>
                */
            MutualTlsAuthentication?: MutualTlsAuthentication;
            /**
                * <p>The collection of tags associated with a domain name.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DomainName {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainName) => any;
    }
    export enum ConnectionType {
            INTERNET = "INTERNET",
            VPC_LINK = "VPC_LINK"
    }
    export enum ContentHandlingStrategy {
            CONVERT_TO_BINARY = "CONVERT_TO_BINARY",
            CONVERT_TO_TEXT = "CONVERT_TO_TEXT"
    }
    export enum IntegrationType {
            AWS = "AWS",
            AWS_PROXY = "AWS_PROXY",
            HTTP = "HTTP",
            HTTP_PROXY = "HTTP_PROXY",
            MOCK = "MOCK"
    }
    export enum PassthroughBehavior {
            NEVER = "NEVER",
            WHEN_NO_MATCH = "WHEN_NO_MATCH",
            WHEN_NO_TEMPLATES = "WHEN_NO_TEMPLATES"
    }
    /**
        * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
        */
    export interface TlsConfig {
            /**
                * <p>If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.</p>
                */
            ServerNameToVerify?: string;
    }
    export namespace TlsConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TlsConfig) => any;
    }
    /**
        * <p>Represents an integration.</p>
        */
    export interface Integration {
            /**
                * <p>Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can't delete it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The ID of the VPC link for a private integration. Supported only for HTTP APIs.</p>
                */
            ConnectionId?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.</p>
                */
            ConnectionType?: ConnectionType | string;
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>Represents the description of an integration.</p>
                */
            Description?: string;
            /**
                * <p>Represents the identifier of an integration.</p>
                */
            IntegrationId?: string;
            /**
                * <p>Specifies the integration's HTTP method type.</p>
                */
            IntegrationMethod?: string;
            /**
                * <p>The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.</p>
                */
            IntegrationResponseSelectionExpression?: string;
            /**
                * <p>Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.</p>
                */
            IntegrationSubtype?: string;
            /**
                * <p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>
                */
            IntegrationType?: IntegrationType | string;
            /**
                * <p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>
                */
            IntegrationUri?: string;
            /**
                * <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>
                */
            PassthroughBehavior?: PassthroughBehavior | string;
            /**
                * <p>Specifies the format of the payload sent to an integration. Required for HTTP APIs.</p>
                */
            PayloadFormatVersion?: string;
            /**
                * <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                *           , where
                *             <replaceable>{location}</replaceable>
                *            is querystring, path, or header; and
                *             <replaceable>{name}</replaceable>
                *            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            RequestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.</p>
                */
            RequestTemplates?: Record<string, string>;
            /**
                * <p>Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            ResponseParameters?: Record<string, Record<string, string>>;
            /**
                * <p>The template selection expression for the integration. Supported only for WebSocket APIs.</p>
                */
            TemplateSelectionExpression?: string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.</p>
                */
            TimeoutInMillis?: number;
            /**
                * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
                */
            TlsConfig?: TlsConfig;
    }
    export namespace Integration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Integration) => any;
    }
    /**
        * <p>Represents an integration response.</p>
        */
    export interface IntegrationResponse {
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>The integration response ID.</p>
                */
            IntegrationResponseId?: string;
            /**
                * <p>The integration response key.</p>
                */
            IntegrationResponseKey: string | undefined;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.</p>
                */
            ResponseParameters?: Record<string, string>;
            /**
                * <p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
                */
            ResponseTemplates?: Record<string, string>;
            /**
                * <p>The template selection expressions for the integration response.</p>
                */
            TemplateSelectionExpression?: string;
    }
    export namespace IntegrationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IntegrationResponse) => any;
    }
    /**
        * <p>Represents a data model for an API. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create Models and Mapping Templates for Request and Response Mappings</a>.</p>
        */
    export interface Model {
            /**
                * <p>The content-type for the model, for example, "application/json".</p>
                */
            ContentType?: string;
            /**
                * <p>The description of the model.</p>
                */
            Description?: string;
            /**
                * <p>The model identifier.</p>
                */
            ModelId?: string;
            /**
                * <p>The name of the model. Must be alphanumeric.</p>
                */
            Name: string | undefined;
            /**
                * <p>The schema for the model. For application/json models, this should be JSON schema draft 4 model.</p>
                */
            Schema?: string;
    }
    export namespace Model {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Model) => any;
    }
    export enum AuthorizationType {
            AWS_IAM = "AWS_IAM",
            CUSTOM = "CUSTOM",
            JWT = "JWT",
            NONE = "NONE"
    }
    /**
        * <p>Validation constraints imposed on parameters of a request (path, query string, headers).</p>
        */
    export interface ParameterConstraints {
            /**
                * <p>Whether or not the parameter is required.</p>
                */
            Required?: boolean;
    }
    export namespace ParameterConstraints {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterConstraints) => any;
    }
    /**
        * <p>Represents a route.</p>
        */
    export interface Route {
            /**
                * <p>Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can't modify the $default route key.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether an API key is required for this route. Supported only for WebSocket APIs.</p>
                */
            ApiKeyRequired?: boolean;
            /**
                * <p>A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
                */
            AuthorizationScopes?: string[];
            /**
                * <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
                */
            AuthorizationType?: AuthorizationType | string;
            /**
                * <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The operation name for the route.</p>
                */
            OperationName?: string;
            /**
                * <p>The request models for the route. Supported only for WebSocket APIs.</p>
                */
            RequestModels?: Record<string, string>;
            /**
                * <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
                */
            RequestParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route ID.</p>
                */
            RouteId?: string;
            /**
                * <p>The route key for the route.</p>
                */
            RouteKey: string | undefined;
            /**
                * <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            RouteResponseSelectionExpression?: string;
            /**
                * <p>The target for the route.</p>
                */
            Target?: string;
    }
    export namespace Route {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Route) => any;
    }
    /**
        * <p>Represents a route response.</p>
        */
    export interface RouteResponse {
            /**
                * <p>Represents the model selection expression of a route response. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>Represents the response models of a route response.</p>
                */
            ResponseModels?: Record<string, string>;
            /**
                * <p>Represents the response parameters of a route response.</p>
                */
            ResponseParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>Represents the identifier of a route response.</p>
                */
            RouteResponseId?: string;
            /**
                * <p>Represents the route response key of a route response.</p>
                */
            RouteResponseKey: string | undefined;
    }
    export namespace RouteResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteResponse) => any;
    }
    /**
        * <p>Settings for logging access in a stage.</p>
        */
    export interface AccessLogSettings {
            /**
                * <p>The ARN of the CloudWatch Logs log group to receive access logs.</p>
                */
            DestinationArn?: string;
            /**
                * <p>A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.</p>
                */
            Format?: string;
    }
    export namespace AccessLogSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessLogSettings) => any;
    }
    export enum LoggingLevel {
            ERROR = "ERROR",
            INFO = "INFO",
            OFF = "OFF"
    }
    /**
        * <p>Represents a collection of route settings.</p>
        */
    export interface RouteSettings {
            /**
                * <p>Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.</p>
                */
            DataTraceEnabled?: boolean;
            /**
                * <p>Specifies whether detailed metrics are enabled.</p>
                */
            DetailedMetricsEnabled?: boolean;
            /**
                * <p>Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.</p>
                */
            LoggingLevel?: LoggingLevel | string;
            /**
                * <p>Specifies the throttling burst limit.</p>
                */
            ThrottlingBurstLimit?: number;
            /**
                * <p>Specifies the throttling rate limit.</p>
                */
            ThrottlingRateLimit?: number;
    }
    export namespace RouteSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RouteSettings) => any;
    }
    /**
        * <p>Represents an API stage.</p>
        */
    export interface Stage {
            /**
                * <p>Settings for logging access in this stage.</p>
                */
            AccessLogSettings?: AccessLogSettings;
            /**
                * <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
                */
            AutoDeploy?: boolean;
            /**
                * <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>The timestamp when the stage was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>Default route settings for the stage.</p>
                */
            DefaultRouteSettings?: RouteSettings;
            /**
                * <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The description of the stage.</p>
                */
            Description?: string;
            /**
                * <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
                */
            LastDeploymentStatusMessage?: string;
            /**
                * <p>The timestamp when the stage was last updated.</p>
                */
            LastUpdatedDate?: Date;
            /**
                * <p>Route settings for the stage, by routeKey.</p>
                */
            RouteSettings?: Record<string, RouteSettings>;
            /**
                * <p>The name of the stage.</p>
                */
            StageName: string | undefined;
            /**
                * <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
                */
            StageVariables?: Record<string, string>;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace Stage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Stage) => any;
    }
    export enum VpcLinkStatus {
            AVAILABLE = "AVAILABLE",
            DELETING = "DELETING",
            FAILED = "FAILED",
            INACTIVE = "INACTIVE",
            PENDING = "PENDING"
    }
    export enum VpcLinkVersion {
            V2 = "V2"
    }
    /**
        * <p>Represents a VPC link.</p>
        */
    export interface VpcLink {
            /**
                * <p>The timestamp when the VPC link was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The name of the VPC link.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of security group IDs for the VPC link.</p>
                */
            SecurityGroupIds: string[] | undefined;
            /**
                * <p>A list of subnet IDs to include in the VPC link.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>Tags for the VPC link.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The ID of the VPC link.</p>
                */
            VpcLinkId: string | undefined;
            /**
                * <p>The status of the VPC link.</p>
                */
            VpcLinkStatus?: VpcLinkStatus | string;
            /**
                * <p>A message summarizing the cause of the status of the VPC link.</p>
                */
            VpcLinkStatusMessage?: string;
            /**
                * <p>The version of the VPC link.</p>
                */
            VpcLinkVersion?: VpcLinkVersion | string;
    }
    export namespace VpcLink {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcLink) => any;
    }
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>The request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * <p>Describes the error encountered.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>The requested operation would cause a conflict with the current state of a service resource associated with the request. Resolve the conflict before retrying this request. See the accompanying error message for details.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>Describes the error encountered.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>Creates a new Api resource to represent an API.</p>
        */
    export interface CreateApiRequest {
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. Supported only for HTTP APIs.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The name of the API.</p>
                */
            Name: string | undefined;
            /**
                * <p>The API protocol.</p>
                */
            ProtocolType: ProtocolType | string | undefined;
            /**
                * <p>This property is part of quick create. If you don't specify a routeKey, a default route of $default is created. The $default route acts as a catch-all for any request made to your API, for a particular stage. The $default route key can't be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.</p>
                */
            RouteKey?: string;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.</p>
                */
            Target?: string;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
    }
    export namespace CreateApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiRequest) => any;
    }
    export interface CreateApiResponse {
            /**
                * <p>The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.</p>
                */
            ApiEndpoint?: string;
            /**
                * <p>Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The API ID.</p>
                */
            ApiId?: string;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>The timestamp when the API was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.</p>
                */
            ImportInfo?: string[];
            /**
                * <p>The name of the API.</p>
                */
            Name?: string;
            /**
                * <p>The API protocol.</p>
                */
            ProtocolType?: ProtocolType | string;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>A collection of tags associated with the API.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
            /**
                * <p>The warning messages reported when failonwarnings is turned on during API import.</p>
                */
            Warnings?: string[];
    }
    export namespace CreateApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiResponse) => any;
    }
    /**
        * <p>The resource specified in the request was not found. See the message field for more information.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * <p>Describes the error encountered.</p>
                */
            Message?: string;
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>A limit has been exceeded. See the accompanying error message for details.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * <p>The limit type.</p>
                */
            LimitType?: string;
            /**
                * <p>Describes the error encountered.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>Creates a new ApiMapping resource to represent an API mapping.</p>
        */
    export interface CreateApiMappingRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * The API mapping key.
                */
            ApiMappingKey?: string;
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The API stage.</p>
                */
            Stage: string | undefined;
    }
    export namespace CreateApiMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiMappingRequest) => any;
    }
    export interface CreateApiMappingResponse {
            /**
                * <p>The API identifier.</p>
                */
            ApiId?: string;
            /**
                * <p>The API mapping identifier.</p>
                */
            ApiMappingId?: string;
            /**
                * <p>The API mapping key.</p>
                */
            ApiMappingKey?: string;
            /**
                * <p>The API stage.</p>
                */
            Stage?: string;
    }
    export namespace CreateApiMappingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiMappingResponse) => any;
    }
    /**
        * <p>Creates a new Authorizer resource to represent an authorizer.</p>
        */
    export interface CreateAuthorizerRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerCredentialsArn?: string;
            /**
                * <p>Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p>
                */
            AuthorizerPayloadFormatVersion?: string;
            /**
                * <p>The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.</p>
                */
            AuthorizerResultTtlInSeconds?: number;
            /**
                * <p>The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).</p>
                */
            AuthorizerType: AuthorizerType | string | undefined;
            /**
                * <p>The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                *                , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerUri?: string;
            /**
                * <p>Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a></p>
                */
            EnableSimpleResponses?: boolean;
            /**
                * <p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>
                */
            IdentitySource: string[] | undefined;
            /**
                * <p>This parameter is not used.</p>
                */
            IdentityValidationExpression?: string;
            /**
                * <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
                */
            JwtConfiguration?: JWTConfiguration;
            /**
                * <p>The name of the authorizer.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAuthorizerRequest) => any;
    }
    export interface CreateAuthorizerResponse {
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerCredentialsArn?: string;
            /**
                * <p>The authorizer identifier.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p>
                */
            AuthorizerPayloadFormatVersion?: string;
            /**
                * <p>The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.</p>
                */
            AuthorizerResultTtlInSeconds?: number;
            /**
                * <p>The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).</p>
                */
            AuthorizerType?: AuthorizerType | string;
            /**
                * <p>The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                *                , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerUri?: string;
            /**
                * <p>Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a></p>
                */
            EnableSimpleResponses?: boolean;
            /**
                * <p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>
                */
            IdentitySource?: string[];
            /**
                * <p>The validation expression does not apply to the REQUEST authorizer.</p>
                */
            IdentityValidationExpression?: string;
            /**
                * <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
                */
            JwtConfiguration?: JWTConfiguration;
            /**
                * <p>The name of the authorizer.</p>
                */
            Name?: string;
    }
    export namespace CreateAuthorizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAuthorizerResponse) => any;
    }
    /**
        * <p>Creates a new Deployment resource to represent a deployment.</p>
        */
    export interface CreateDeploymentRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The description for the deployment resource.</p>
                */
            Description?: string;
            /**
                * <p>The name of the Stage resource for the Deployment resource to create.</p>
                */
            StageName?: string;
    }
    export namespace CreateDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentRequest) => any;
    }
    export interface CreateDeploymentResponse {
            /**
                * <p>Specifies whether a deployment was automatically released.</p>
                */
            AutoDeployed?: boolean;
            /**
                * <p>The date and time when the Deployment resource was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The identifier for the deployment.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
                */
            DeploymentStatus?: DeploymentStatus | string;
            /**
                * <p>May contain additional feedback on the status of an API deployment.</p>
                */
            DeploymentStatusMessage?: string;
            /**
                * <p>The description for the deployment.</p>
                */
            Description?: string;
    }
    export namespace CreateDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentResponse) => any;
    }
    export interface MutualTlsAuthenticationInput {
            /**
                * <p>An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.</p>
                */
            TruststoreUri?: string;
            /**
                * <p>The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.</p>
                */
            TruststoreVersion?: string;
    }
    export namespace MutualTlsAuthenticationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MutualTlsAuthenticationInput) => any;
    }
    /**
        * <p>Creates a new DomainName resource to represent a domain name.</p>
        */
    export interface CreateDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The domain name configurations.</p>
                */
            DomainNameConfigurations?: DomainNameConfiguration[];
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name.</p>
                */
            MutualTlsAuthentication?: MutualTlsAuthenticationInput;
            /**
                * <p>The collection of tags associated with a domain name.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainNameRequest) => any;
    }
    export interface CreateDomainNameResponse {
            /**
                * <p>The API mapping selection expression.</p>
                */
            ApiMappingSelectionExpression?: string;
            /**
                * <p>The name of the DomainName resource.</p>
                */
            DomainName?: string;
            /**
                * <p>The domain name configurations.</p>
                */
            DomainNameConfigurations?: DomainNameConfiguration[];
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name.</p>
                */
            MutualTlsAuthentication?: MutualTlsAuthentication;
            /**
                * <p>The collection of tags associated with a domain name.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateDomainNameResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainNameResponse) => any;
    }
    /**
        * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
        */
    export interface TlsConfigInput {
            /**
                * <p>If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.</p>
                */
            ServerNameToVerify?: string;
    }
    export namespace TlsConfigInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TlsConfigInput) => any;
    }
    /**
        * <p>Creates a new Integration resource to represent an integration.</p>
        */
    export interface CreateIntegrationRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The ID of the VPC link for a private integration. Supported only for HTTP APIs.</p>
                */
            ConnectionId?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.</p>
                */
            ConnectionType?: ConnectionType | string;
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>The description of the integration.</p>
                */
            Description?: string;
            /**
                * <p>Specifies the integration's HTTP method type.</p>
                */
            IntegrationMethod?: string;
            /**
                * <p>Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.</p>
                */
            IntegrationSubtype?: string;
            /**
                * <p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>
                */
            IntegrationType: IntegrationType | string | undefined;
            /**
                * <p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>
                */
            IntegrationUri?: string;
            /**
                * <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>
                */
            PassthroughBehavior?: PassthroughBehavior | string;
            /**
                * <p>Specifies the format of the payload sent to an integration. Required for HTTP APIs.</p>
                */
            PayloadFormatVersion?: string;
            /**
                * <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                *                , where
                *                   <replaceable>{location}</replaceable>
                *                 is querystring, path, or header; and
                *                   <replaceable>{name}</replaceable>
                *                 must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            RequestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.</p>
                */
            RequestTemplates?: Record<string, string>;
            /**
                * <p>Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            ResponseParameters?: Record<string, Record<string, string>>;
            /**
                * <p>The template selection expression for the integration.</p>
                */
            TemplateSelectionExpression?: string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.</p>
                */
            TimeoutInMillis?: number;
            /**
                * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
                */
            TlsConfig?: TlsConfigInput;
    }
    export namespace CreateIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIntegrationRequest) => any;
    }
    export interface CreateIntegrationResult {
            /**
                * <p>Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can't delete it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The ID of the VPC link for a private integration. Supported only for HTTP APIs.</p>
                */
            ConnectionId?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.</p>
                */
            ConnectionType?: ConnectionType | string;
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>Represents the description of an integration.</p>
                */
            Description?: string;
            /**
                * <p>Represents the identifier of an integration.</p>
                */
            IntegrationId?: string;
            /**
                * <p>Specifies the integration's HTTP method type.</p>
                */
            IntegrationMethod?: string;
            /**
                * <p>The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.</p>
                */
            IntegrationResponseSelectionExpression?: string;
            /**
                * <p>Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.</p>
                */
            IntegrationSubtype?: string;
            /**
                * <p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>
                */
            IntegrationType?: IntegrationType | string;
            /**
                * <p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>
                */
            IntegrationUri?: string;
            /**
                * <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>
                */
            PassthroughBehavior?: PassthroughBehavior | string;
            /**
                * <p>Specifies the format of the payload sent to an integration. Required for HTTP APIs.</p>
                */
            PayloadFormatVersion?: string;
            /**
                * <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                *           , where
                *             <replaceable>{location}</replaceable>
                *            is querystring, path, or header; and
                *             <replaceable>{name}</replaceable>
                *            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            RequestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.</p>
                */
            RequestTemplates?: Record<string, string>;
            /**
                * <p>Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            ResponseParameters?: Record<string, Record<string, string>>;
            /**
                * <p>The template selection expression for the integration. Supported only for WebSocket APIs.</p>
                */
            TemplateSelectionExpression?: string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.</p>
                */
            TimeoutInMillis?: number;
            /**
                * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
                */
            TlsConfig?: TlsConfig;
    }
    export namespace CreateIntegrationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIntegrationResult) => any;
    }
    /**
        * <p>Creates a new IntegrationResponse resource to represent an integration response.</p>
        */
    export interface CreateIntegrationResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
            /**
                * <p>The integration response key.</p>
                */
            IntegrationResponseKey: string | undefined;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where {name} is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where {name} is a valid and unique response header name and {JSON-expression} is a valid JSON expression without the $ prefix.</p>
                */
            ResponseParameters?: Record<string, string>;
            /**
                * <p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
                */
            ResponseTemplates?: Record<string, string>;
            /**
                * <p>The template selection expression for the integration response. Supported only for WebSocket APIs.</p>
                */
            TemplateSelectionExpression?: string;
    }
    export namespace CreateIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIntegrationResponseRequest) => any;
    }
    export interface CreateIntegrationResponseResponse {
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>The integration response ID.</p>
                */
            IntegrationResponseId?: string;
            /**
                * <p>The integration response key.</p>
                */
            IntegrationResponseKey?: string;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.</p>
                */
            ResponseParameters?: Record<string, string>;
            /**
                * <p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
                */
            ResponseTemplates?: Record<string, string>;
            /**
                * <p>The template selection expressions for the integration response.</p>
                */
            TemplateSelectionExpression?: string;
    }
    export namespace CreateIntegrationResponseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIntegrationResponseResponse) => any;
    }
    /**
        * <p>Creates a new Model.</p>
        */
    export interface CreateModelRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The content-type for the model, for example, "application/json".</p>
                */
            ContentType?: string;
            /**
                * <p>The description of the model.</p>
                */
            Description?: string;
            /**
                * <p>The name of the model. Must be alphanumeric.</p>
                */
            Name: string | undefined;
            /**
                * <p>The schema for the model. For application/json models, this should be JSON schema draft 4 model.</p>
                */
            Schema: string | undefined;
    }
    export namespace CreateModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelRequest) => any;
    }
    export interface CreateModelResponse {
            /**
                * <p>The content-type for the model, for example, "application/json".</p>
                */
            ContentType?: string;
            /**
                * <p>The description of the model.</p>
                */
            Description?: string;
            /**
                * <p>The model identifier.</p>
                */
            ModelId?: string;
            /**
                * <p>The name of the model. Must be alphanumeric.</p>
                */
            Name?: string;
            /**
                * <p>The schema for the model. For application/json models, this should be JSON schema draft 4 model.</p>
                */
            Schema?: string;
    }
    export namespace CreateModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateModelResponse) => any;
    }
    /**
        * <p>Creates a new Route resource to represent a route.</p>
        */
    export interface CreateRouteRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies whether an API key is required for the route. Supported only for WebSocket APIs.</p>
                */
            ApiKeyRequired?: boolean;
            /**
                * <p>The authorization scopes supported by this route.</p>
                */
            AuthorizationScopes?: string[];
            /**
                * <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
                */
            AuthorizationType?: AuthorizationType | string;
            /**
                * <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The operation name for the route.</p>
                */
            OperationName?: string;
            /**
                * <p>The request models for the route. Supported only for WebSocket APIs.</p>
                */
            RequestModels?: Record<string, string>;
            /**
                * <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
                */
            RequestParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route key for the route.</p>
                */
            RouteKey: string | undefined;
            /**
                * <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            RouteResponseSelectionExpression?: string;
            /**
                * <p>The target for the route.</p>
                */
            Target?: string;
    }
    export namespace CreateRouteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRouteRequest) => any;
    }
    export interface CreateRouteResult {
            /**
                * <p>Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can't modify the $default route key.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether an API key is required for this route. Supported only for WebSocket APIs.</p>
                */
            ApiKeyRequired?: boolean;
            /**
                * <p>A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
                */
            AuthorizationScopes?: string[];
            /**
                * <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
                */
            AuthorizationType?: AuthorizationType | string;
            /**
                * <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The operation name for the route.</p>
                */
            OperationName?: string;
            /**
                * <p>The request models for the route. Supported only for WebSocket APIs.</p>
                */
            RequestModels?: Record<string, string>;
            /**
                * <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
                */
            RequestParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route ID.</p>
                */
            RouteId?: string;
            /**
                * <p>The route key for the route.</p>
                */
            RouteKey?: string;
            /**
                * <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            RouteResponseSelectionExpression?: string;
            /**
                * <p>The target for the route.</p>
                */
            Target?: string;
    }
    export namespace CreateRouteResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRouteResult) => any;
    }
    /**
        * <p>Creates a new RouteResponse resource to represent a route response.</p>
        */
    export interface CreateRouteResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The model selection expression for the route response. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The response models for the route response.</p>
                */
            ResponseModels?: Record<string, string>;
            /**
                * <p>The route response parameters.</p>
                */
            ResponseParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
            /**
                * <p>The route response key.</p>
                */
            RouteResponseKey: string | undefined;
    }
    export namespace CreateRouteResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRouteResponseRequest) => any;
    }
    export interface CreateRouteResponseResponse {
            /**
                * <p>Represents the model selection expression of a route response. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>Represents the response models of a route response.</p>
                */
            ResponseModels?: Record<string, string>;
            /**
                * <p>Represents the response parameters of a route response.</p>
                */
            ResponseParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>Represents the identifier of a route response.</p>
                */
            RouteResponseId?: string;
            /**
                * <p>Represents the route response key of a route response.</p>
                */
            RouteResponseKey?: string;
    }
    export namespace CreateRouteResponseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRouteResponseResponse) => any;
    }
    /**
        * <p>Creates a new Stage resource to represent a stage.</p>
        */
    export interface CreateStageRequest {
            /**
                * <p>Settings for logging access in this stage.</p>
                */
            AccessLogSettings?: AccessLogSettings;
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
                */
            AutoDeploy?: boolean;
            /**
                * <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>The default route settings for the stage.</p>
                */
            DefaultRouteSettings?: RouteSettings;
            /**
                * <p>The deployment identifier of the API stage.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The description for the API stage.</p>
                */
            Description?: string;
            /**
                * <p>Route settings for the stage, by routeKey.</p>
                */
            RouteSettings?: Record<string, RouteSettings>;
            /**
                * <p>The name of the stage.</p>
                */
            StageName: string | undefined;
            /**
                * <p>A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
                */
            StageVariables?: Record<string, string>;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStageRequest) => any;
    }
    export interface CreateStageResponse {
            /**
                * <p>Settings for logging access in this stage.</p>
                */
            AccessLogSettings?: AccessLogSettings;
            /**
                * <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
                */
            AutoDeploy?: boolean;
            /**
                * <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>The timestamp when the stage was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>Default route settings for the stage.</p>
                */
            DefaultRouteSettings?: RouteSettings;
            /**
                * <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The description of the stage.</p>
                */
            Description?: string;
            /**
                * <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
                */
            LastDeploymentStatusMessage?: string;
            /**
                * <p>The timestamp when the stage was last updated.</p>
                */
            LastUpdatedDate?: Date;
            /**
                * <p>Route settings for the stage, by routeKey.</p>
                */
            RouteSettings?: Record<string, RouteSettings>;
            /**
                * <p>The name of the stage.</p>
                */
            StageName?: string;
            /**
                * <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
                */
            StageVariables?: Record<string, string>;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateStageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateStageResponse) => any;
    }
    /**
        * <p>Creates a VPC link</p>
        */
    export interface CreateVpcLinkRequest {
            /**
                * <p>The name of the VPC link.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of security group IDs for the VPC link.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A list of subnet IDs to include in the VPC link.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>A list of tags.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVpcLinkRequest) => any;
    }
    export interface CreateVpcLinkResponse {
            /**
                * <p>The timestamp when the VPC link was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The name of the VPC link.</p>
                */
            Name?: string;
            /**
                * <p>A list of security group IDs for the VPC link.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A list of subnet IDs to include in the VPC link.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>Tags for the VPC link.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The ID of the VPC link.</p>
                */
            VpcLinkId?: string;
            /**
                * <p>The status of the VPC link.</p>
                */
            VpcLinkStatus?: VpcLinkStatus | string;
            /**
                * <p>A message summarizing the cause of the status of the VPC link.</p>
                */
            VpcLinkStatusMessage?: string;
            /**
                * <p>The version of the VPC link.</p>
                */
            VpcLinkVersion?: VpcLinkVersion | string;
    }
    export namespace CreateVpcLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVpcLinkResponse) => any;
    }
    export interface DeleteAccessLogSettingsRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
                */
            StageName: string | undefined;
    }
    export namespace DeleteAccessLogSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccessLogSettingsRequest) => any;
    }
    export interface DeleteApiRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
    }
    export namespace DeleteApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiRequest) => any;
    }
    export interface DeleteApiMappingRequest {
            /**
                * <p>The API mapping identifier.</p>
                */
            ApiMappingId: string | undefined;
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DeleteApiMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiMappingRequest) => any;
    }
    export interface DeleteAuthorizerRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The authorizer identifier.</p>
                */
            AuthorizerId: string | undefined;
    }
    export namespace DeleteAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAuthorizerRequest) => any;
    }
    export interface DeleteCorsConfigurationRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
    }
    export namespace DeleteCorsConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCorsConfigurationRequest) => any;
    }
    export interface DeleteDeploymentRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The deployment ID.</p>
                */
            DeploymentId: string | undefined;
    }
    export namespace DeleteDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDeploymentRequest) => any;
    }
    export interface DeleteDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
    }
    export namespace DeleteDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainNameRequest) => any;
    }
    export interface DeleteIntegrationRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
    }
    export namespace DeleteIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIntegrationRequest) => any;
    }
    export interface DeleteIntegrationResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
            /**
                * <p>The integration response ID.</p>
                */
            IntegrationResponseId: string | undefined;
    }
    export namespace DeleteIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIntegrationResponseRequest) => any;
    }
    export interface DeleteModelRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The model ID.</p>
                */
            ModelId: string | undefined;
    }
    export namespace DeleteModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteModelRequest) => any;
    }
    export interface DeleteRouteRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
    }
    export namespace DeleteRouteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRouteRequest) => any;
    }
    export interface DeleteRouteRequestParameterRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The route request parameter key.</p>
                */
            RequestParameterKey: string | undefined;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
    }
    export namespace DeleteRouteRequestParameterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRouteRequestParameterRequest) => any;
    }
    export interface DeleteRouteResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
            /**
                * <p>The route response ID.</p>
                */
            RouteResponseId: string | undefined;
    }
    export namespace DeleteRouteResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRouteResponseRequest) => any;
    }
    export interface DeleteRouteSettingsRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The route key.</p>
                */
            RouteKey: string | undefined;
            /**
                * <p>The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
                */
            StageName: string | undefined;
    }
    export namespace DeleteRouteSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRouteSettingsRequest) => any;
    }
    export interface DeleteStageRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
                */
            StageName: string | undefined;
    }
    export namespace DeleteStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteStageRequest) => any;
    }
    export interface DeleteVpcLinkRequest {
            /**
                * <p>The ID of the VPC link.</p>
                */
            VpcLinkId: string | undefined;
    }
    export namespace DeleteVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVpcLinkRequest) => any;
    }
    export interface DeleteVpcLinkResponse {
    }
    export namespace DeleteVpcLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVpcLinkResponse) => any;
    }
    export interface ExportApiRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The version of the API Gateway export algorithm. API Gateway uses the latest version by default. Currently, the only supported version is 1.0.</p>
                */
            ExportVersion?: string;
            /**
                * <p>Specifies whether to include <a href="https://docs.aws.amazon.com//apigateway/latest/developerguide/api-gateway-swagger-extensions.html">API Gateway extensions</a> in the exported API definition. API Gateway extensions are included by default.</p>
                */
            IncludeExtensions?: boolean;
            /**
                * <p>The output type of the exported definition file. Valid values are JSON and YAML.</p>
                */
            OutputType: string | undefined;
            /**
                * <p>The version of the API specification to use. OAS30, for OpenAPI 3.0, is the only supported value.</p>
                */
            Specification: string | undefined;
            /**
                * <p>The name of the API stage to export. If you don't specify this property, a representation of the latest API configuration is exported.</p>
                */
            StageName?: string;
    }
    export namespace ExportApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportApiRequest) => any;
    }
    export interface ExportApiResponse {
            /**
                * <p>Represents an exported definition of an API in a particular output format, for example, YAML. The API is serialized to the requested specification, for example, OpenAPI 3.0.</p>
                */
            body?: Uint8Array;
    }
    export namespace ExportApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportApiResponse) => any;
    }
    export interface GetApiRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
    }
    export namespace GetApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiRequest) => any;
    }
    export interface GetApiResponse {
            /**
                * <p>The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.</p>
                */
            ApiEndpoint?: string;
            /**
                * <p>Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The API ID.</p>
                */
            ApiId?: string;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>The timestamp when the API was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.</p>
                */
            ImportInfo?: string[];
            /**
                * <p>The name of the API.</p>
                */
            Name?: string;
            /**
                * <p>The API protocol.</p>
                */
            ProtocolType?: ProtocolType | string;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>A collection of tags associated with the API.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
            /**
                * <p>The warning messages reported when failonwarnings is turned on during API import.</p>
                */
            Warnings?: string[];
    }
    export namespace GetApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiResponse) => any;
    }
    export interface GetApiMappingRequest {
            /**
                * <p>The API mapping identifier.</p>
                */
            ApiMappingId: string | undefined;
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
    }
    export namespace GetApiMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiMappingRequest) => any;
    }
    export interface GetApiMappingResponse {
            /**
                * <p>The API identifier.</p>
                */
            ApiId?: string;
            /**
                * <p>The API mapping identifier.</p>
                */
            ApiMappingId?: string;
            /**
                * <p>The API mapping key.</p>
                */
            ApiMappingKey?: string;
            /**
                * <p>The API stage.</p>
                */
            Stage?: string;
    }
    export namespace GetApiMappingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiMappingResponse) => any;
    }
    export interface GetApiMappingsRequest {
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetApiMappingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiMappingsRequest) => any;
    }
    export interface GetApiMappingsResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: ApiMapping[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetApiMappingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiMappingsResponse) => any;
    }
    export interface GetApisRequest {
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetApisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApisRequest) => any;
    }
    export interface GetApisResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Api[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetApisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApisResponse) => any;
    }
    export interface GetAuthorizerRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The authorizer identifier.</p>
                */
            AuthorizerId: string | undefined;
    }
    export namespace GetAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizerRequest) => any;
    }
    export interface GetAuthorizerResponse {
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerCredentialsArn?: string;
            /**
                * <p>The authorizer identifier.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p>
                */
            AuthorizerPayloadFormatVersion?: string;
            /**
                * <p>The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.</p>
                */
            AuthorizerResultTtlInSeconds?: number;
            /**
                * <p>The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).</p>
                */
            AuthorizerType?: AuthorizerType | string;
            /**
                * <p>The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                *                , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerUri?: string;
            /**
                * <p>Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a></p>
                */
            EnableSimpleResponses?: boolean;
            /**
                * <p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>
                */
            IdentitySource?: string[];
            /**
                * <p>The validation expression does not apply to the REQUEST authorizer.</p>
                */
            IdentityValidationExpression?: string;
            /**
                * <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
                */
            JwtConfiguration?: JWTConfiguration;
            /**
                * <p>The name of the authorizer.</p>
                */
            Name?: string;
    }
    export namespace GetAuthorizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizerResponse) => any;
    }
    export interface GetAuthorizersRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetAuthorizersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizersRequest) => any;
    }
    export interface GetAuthorizersResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Authorizer[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetAuthorizersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAuthorizersResponse) => any;
    }
    export interface GetDeploymentRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The deployment ID.</p>
                */
            DeploymentId: string | undefined;
    }
    export namespace GetDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentRequest) => any;
    }
    export interface GetDeploymentResponse {
            /**
                * <p>Specifies whether a deployment was automatically released.</p>
                */
            AutoDeployed?: boolean;
            /**
                * <p>The date and time when the Deployment resource was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The identifier for the deployment.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
                */
            DeploymentStatus?: DeploymentStatus | string;
            /**
                * <p>May contain additional feedback on the status of an API deployment.</p>
                */
            DeploymentStatusMessage?: string;
            /**
                * <p>The description for the deployment.</p>
                */
            Description?: string;
    }
    export namespace GetDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentResponse) => any;
    }
    export interface GetDeploymentsRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentsRequest) => any;
    }
    export interface GetDeploymentsResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Deployment[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetDeploymentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeploymentsResponse) => any;
    }
    export interface GetDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
    }
    export namespace GetDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNameRequest) => any;
    }
    export interface GetDomainNameResponse {
            /**
                * <p>The API mapping selection expression.</p>
                */
            ApiMappingSelectionExpression?: string;
            /**
                * <p>The name of the DomainName resource.</p>
                */
            DomainName?: string;
            /**
                * <p>The domain name configurations.</p>
                */
            DomainNameConfigurations?: DomainNameConfiguration[];
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name.</p>
                */
            MutualTlsAuthentication?: MutualTlsAuthentication;
            /**
                * <p>The collection of tags associated with a domain name.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace GetDomainNameResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNameResponse) => any;
    }
    export interface GetDomainNamesRequest {
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetDomainNamesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNamesRequest) => any;
    }
    export interface GetDomainNamesResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: DomainName[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetDomainNamesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNamesResponse) => any;
    }
    export interface GetIntegrationRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
    }
    export namespace GetIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationRequest) => any;
    }
    export interface GetIntegrationResult {
            /**
                * <p>Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can't delete it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The ID of the VPC link for a private integration. Supported only for HTTP APIs.</p>
                */
            ConnectionId?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.</p>
                */
            ConnectionType?: ConnectionType | string;
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>Represents the description of an integration.</p>
                */
            Description?: string;
            /**
                * <p>Represents the identifier of an integration.</p>
                */
            IntegrationId?: string;
            /**
                * <p>Specifies the integration's HTTP method type.</p>
                */
            IntegrationMethod?: string;
            /**
                * <p>The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.</p>
                */
            IntegrationResponseSelectionExpression?: string;
            /**
                * <p>Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.</p>
                */
            IntegrationSubtype?: string;
            /**
                * <p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>
                */
            IntegrationType?: IntegrationType | string;
            /**
                * <p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>
                */
            IntegrationUri?: string;
            /**
                * <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>
                */
            PassthroughBehavior?: PassthroughBehavior | string;
            /**
                * <p>Specifies the format of the payload sent to an integration. Required for HTTP APIs.</p>
                */
            PayloadFormatVersion?: string;
            /**
                * <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                *           , where
                *             <replaceable>{location}</replaceable>
                *            is querystring, path, or header; and
                *             <replaceable>{name}</replaceable>
                *            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            RequestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.</p>
                */
            RequestTemplates?: Record<string, string>;
            /**
                * <p>Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            ResponseParameters?: Record<string, Record<string, string>>;
            /**
                * <p>The template selection expression for the integration. Supported only for WebSocket APIs.</p>
                */
            TemplateSelectionExpression?: string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.</p>
                */
            TimeoutInMillis?: number;
            /**
                * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
                */
            TlsConfig?: TlsConfig;
    }
    export namespace GetIntegrationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationResult) => any;
    }
    export interface GetIntegrationResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
            /**
                * <p>The integration response ID.</p>
                */
            IntegrationResponseId: string | undefined;
    }
    export namespace GetIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationResponseRequest) => any;
    }
    export interface GetIntegrationResponseResponse {
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>The integration response ID.</p>
                */
            IntegrationResponseId?: string;
            /**
                * <p>The integration response key.</p>
                */
            IntegrationResponseKey?: string;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.</p>
                */
            ResponseParameters?: Record<string, string>;
            /**
                * <p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
                */
            ResponseTemplates?: Record<string, string>;
            /**
                * <p>The template selection expressions for the integration response.</p>
                */
            TemplateSelectionExpression?: string;
    }
    export namespace GetIntegrationResponseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationResponseResponse) => any;
    }
    export interface GetIntegrationResponsesRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetIntegrationResponsesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationResponsesRequest) => any;
    }
    export interface GetIntegrationResponsesResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: IntegrationResponse[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetIntegrationResponsesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationResponsesResponse) => any;
    }
    export interface GetIntegrationsRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetIntegrationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationsRequest) => any;
    }
    export interface GetIntegrationsResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Integration[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetIntegrationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntegrationsResponse) => any;
    }
    export interface GetModelRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The model ID.</p>
                */
            ModelId: string | undefined;
    }
    export namespace GetModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelRequest) => any;
    }
    export interface GetModelResponse {
            /**
                * <p>The content-type for the model, for example, "application/json".</p>
                */
            ContentType?: string;
            /**
                * <p>The description of the model.</p>
                */
            Description?: string;
            /**
                * <p>The model identifier.</p>
                */
            ModelId?: string;
            /**
                * <p>The name of the model. Must be alphanumeric.</p>
                */
            Name?: string;
            /**
                * <p>The schema for the model. For application/json models, this should be JSON schema draft 4 model.</p>
                */
            Schema?: string;
    }
    export namespace GetModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelResponse) => any;
    }
    export interface GetModelsRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetModelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelsRequest) => any;
    }
    export interface GetModelsResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Model[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetModelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelsResponse) => any;
    }
    export interface GetModelTemplateRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The model ID.</p>
                */
            ModelId: string | undefined;
    }
    export namespace GetModelTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelTemplateRequest) => any;
    }
    export interface GetModelTemplateResponse {
            /**
                * <p>The template value.</p>
                */
            Value?: string;
    }
    export namespace GetModelTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetModelTemplateResponse) => any;
    }
    export interface GetRouteRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
    }
    export namespace GetRouteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteRequest) => any;
    }
    export interface GetRouteResult {
            /**
                * <p>Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can't modify the $default route key.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether an API key is required for this route. Supported only for WebSocket APIs.</p>
                */
            ApiKeyRequired?: boolean;
            /**
                * <p>A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
                */
            AuthorizationScopes?: string[];
            /**
                * <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
                */
            AuthorizationType?: AuthorizationType | string;
            /**
                * <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The operation name for the route.</p>
                */
            OperationName?: string;
            /**
                * <p>The request models for the route. Supported only for WebSocket APIs.</p>
                */
            RequestModels?: Record<string, string>;
            /**
                * <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
                */
            RequestParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route ID.</p>
                */
            RouteId?: string;
            /**
                * <p>The route key for the route.</p>
                */
            RouteKey?: string;
            /**
                * <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            RouteResponseSelectionExpression?: string;
            /**
                * <p>The target for the route.</p>
                */
            Target?: string;
    }
    export namespace GetRouteResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteResult) => any;
    }
    export interface GetRouteResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
            /**
                * <p>The route response ID.</p>
                */
            RouteResponseId: string | undefined;
    }
    export namespace GetRouteResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteResponseRequest) => any;
    }
    export interface GetRouteResponseResponse {
            /**
                * <p>Represents the model selection expression of a route response. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>Represents the response models of a route response.</p>
                */
            ResponseModels?: Record<string, string>;
            /**
                * <p>Represents the response parameters of a route response.</p>
                */
            ResponseParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>Represents the identifier of a route response.</p>
                */
            RouteResponseId?: string;
            /**
                * <p>Represents the route response key of a route response.</p>
                */
            RouteResponseKey?: string;
    }
    export namespace GetRouteResponseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteResponseResponse) => any;
    }
    export interface GetRouteResponsesRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
    }
    export namespace GetRouteResponsesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteResponsesRequest) => any;
    }
    export interface GetRouteResponsesResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: RouteResponse[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetRouteResponsesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRouteResponsesResponse) => any;
    }
    export interface GetRoutesRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetRoutesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRoutesRequest) => any;
    }
    export interface GetRoutesResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Route[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetRoutesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRoutesResponse) => any;
    }
    export interface GetStageRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
                */
            StageName: string | undefined;
    }
    export namespace GetStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStageRequest) => any;
    }
    export interface GetStageResponse {
            /**
                * <p>Settings for logging access in this stage.</p>
                */
            AccessLogSettings?: AccessLogSettings;
            /**
                * <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
                */
            AutoDeploy?: boolean;
            /**
                * <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>The timestamp when the stage was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>Default route settings for the stage.</p>
                */
            DefaultRouteSettings?: RouteSettings;
            /**
                * <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The description of the stage.</p>
                */
            Description?: string;
            /**
                * <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
                */
            LastDeploymentStatusMessage?: string;
            /**
                * <p>The timestamp when the stage was last updated.</p>
                */
            LastUpdatedDate?: Date;
            /**
                * <p>Route settings for the stage, by routeKey.</p>
                */
            RouteSettings?: Record<string, RouteSettings>;
            /**
                * <p>The name of the stage.</p>
                */
            StageName?: string;
            /**
                * <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
                */
            StageVariables?: Record<string, string>;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace GetStageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStageResponse) => any;
    }
    export interface GetStagesRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetStagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStagesRequest) => any;
    }
    export interface GetStagesResponse {
            /**
                * <p>The elements from this collection.</p>
                */
            Items?: Stage[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetStagesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStagesResponse) => any;
    }
    export interface GetTagsRequest {
            /**
                * <p>The resource ARN for the tag.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace GetTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTagsRequest) => any;
    }
    export interface GetTagsResponse {
            /**
                * <p>Represents a collection of tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace GetTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTagsResponse) => any;
    }
    export interface GetVpcLinkRequest {
            /**
                * <p>The ID of the VPC link.</p>
                */
            VpcLinkId: string | undefined;
    }
    export namespace GetVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcLinkRequest) => any;
    }
    export interface GetVpcLinkResponse {
            /**
                * <p>The timestamp when the VPC link was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The name of the VPC link.</p>
                */
            Name?: string;
            /**
                * <p>A list of security group IDs for the VPC link.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A list of subnet IDs to include in the VPC link.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>Tags for the VPC link.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The ID of the VPC link.</p>
                */
            VpcLinkId?: string;
            /**
                * <p>The status of the VPC link.</p>
                */
            VpcLinkStatus?: VpcLinkStatus | string;
            /**
                * <p>A message summarizing the cause of the status of the VPC link.</p>
                */
            VpcLinkStatusMessage?: string;
            /**
                * <p>The version of the VPC link.</p>
                */
            VpcLinkVersion?: VpcLinkVersion | string;
    }
    export namespace GetVpcLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcLinkResponse) => any;
    }
    export interface GetVpcLinksRequest {
            /**
                * <p>The maximum number of elements to be returned for this resource.</p>
                */
            MaxResults?: string;
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetVpcLinksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcLinksRequest) => any;
    }
    export interface GetVpcLinksResponse {
            /**
                * <p>A collection of VPC links.</p>
                */
            Items?: VpcLink[];
            /**
                * <p>The next page of elements from this collection. Not valid for the last element of the collection.</p>
                */
            NextToken?: string;
    }
    export namespace GetVpcLinksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetVpcLinksResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface ImportApiRequest {
            /**
                * <p>Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.</p>
                */
            Basepath?: string;
            /**
                * <p>The OpenAPI definition. Supported only for HTTP APIs.</p>
                */
            Body: string | undefined;
            /**
                * <p>Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.</p>
                */
            FailOnWarnings?: boolean;
    }
    export namespace ImportApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportApiRequest) => any;
    }
    export interface ImportApiResponse {
            /**
                * <p>The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.</p>
                */
            ApiEndpoint?: string;
            /**
                * <p>Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The API ID.</p>
                */
            ApiId?: string;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>The timestamp when the API was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.</p>
                */
            ImportInfo?: string[];
            /**
                * <p>The name of the API.</p>
                */
            Name?: string;
            /**
                * <p>The API protocol.</p>
                */
            ProtocolType?: ProtocolType | string;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>A collection of tags associated with the API.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
            /**
                * <p>The warning messages reported when failonwarnings is turned on during API import.</p>
                */
            Warnings?: string[];
    }
    export namespace ImportApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportApiResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface ReimportApiRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.</p>
                */
            Basepath?: string;
            /**
                * <p>The OpenAPI definition. Supported only for HTTP APIs.</p>
                */
            Body: string | undefined;
            /**
                * <p>Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.</p>
                */
            FailOnWarnings?: boolean;
    }
    export namespace ReimportApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReimportApiRequest) => any;
    }
    export interface ReimportApiResponse {
            /**
                * <p>The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.</p>
                */
            ApiEndpoint?: string;
            /**
                * <p>Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The API ID.</p>
                */
            ApiId?: string;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>The timestamp when the API was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.</p>
                */
            ImportInfo?: string[];
            /**
                * <p>The name of the API.</p>
                */
            Name?: string;
            /**
                * <p>The API protocol.</p>
                */
            ProtocolType?: ProtocolType | string;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>A collection of tags associated with the API.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
            /**
                * <p>The warning messages reported when failonwarnings is turned on during API import.</p>
                */
            Warnings?: string[];
    }
    export namespace ReimportApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReimportApiResponse) => any;
    }
    export interface ResetAuthorizersCacheRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</p>
                */
            StageName: string | undefined;
    }
    export namespace ResetAuthorizersCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetAuthorizersCacheRequest) => any;
    }
    /**
        * <p>Creates a new Tag resource to represent a tag.</p>
        */
    export interface TagResourceRequest {
            /**
                * <p>The resource ARN for the tag.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The resource ARN for the tag.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The Tag keys to delete</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    /**
        * <p>Updates an Api.</p>
        */
    export interface UpdateApiRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, don't specify this parameter. Currently, this property is not used for HTTP integrations. If provided, this value replaces the credentials associated with the quick create integration. Supported only for HTTP APIs.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The name of the API.</p>
                */
            Name?: string;
            /**
                * <p>This property is part of quick create. If not specified, the route created using quick create is kept. Otherwise, this value replaces the route key of the quick create route. Additional routes may still be added after the API is updated. Supported only for HTTP APIs.</p>
                */
            RouteKey?: string;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>This property is part of quick create. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. The value provided updates the integration URI and integration type. You can update a quick-created target, but you can't remove it from an API. Supported only for HTTP APIs.</p>
                */
            Target?: string;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
    }
    export namespace UpdateApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiRequest) => any;
    }
    export interface UpdateApiResponse {
            /**
                * <p>The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.</p>
                */
            ApiEndpoint?: string;
            /**
                * <p>Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The API ID.</p>
                */
            ApiId?: string;
            /**
                * <p>An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.</p>
                */
            ApiKeySelectionExpression?: string;
            /**
                * <p>A CORS configuration. Supported only for HTTP APIs.</p>
                */
            CorsConfiguration?: Cors;
            /**
                * <p>The timestamp when the API was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The description of the API.</p>
                */
            Description?: string;
            /**
                * <p>Avoid validating models when creating a deployment. Supported only for WebSocket APIs.</p>
                */
            DisableSchemaValidation?: boolean;
            /**
                * <p>Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.</p>
                */
            DisableExecuteApiEndpoint?: boolean;
            /**
                * <p>The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.</p>
                */
            ImportInfo?: string[];
            /**
                * <p>The name of the API.</p>
                */
            Name?: string;
            /**
                * <p>The API protocol.</p>
                */
            ProtocolType?: ProtocolType | string;
            /**
                * <p>The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.</p>
                */
            RouteSelectionExpression?: string;
            /**
                * <p>A collection of tags associated with the API.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A version identifier for the API.</p>
                */
            Version?: string;
            /**
                * <p>The warning messages reported when failonwarnings is turned on during API import.</p>
                */
            Warnings?: string[];
    }
    export namespace UpdateApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiResponse) => any;
    }
    /**
        * <p>Updates an ApiMapping.</p>
        */
    export interface UpdateApiMappingRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The API mapping identifier.</p>
                */
            ApiMappingId: string | undefined;
            /**
                * <p>The API mapping key.</p>
                */
            ApiMappingKey?: string;
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The API stage.</p>
                */
            Stage?: string;
    }
    export namespace UpdateApiMappingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiMappingRequest) => any;
    }
    export interface UpdateApiMappingResponse {
            /**
                * <p>The API identifier.</p>
                */
            ApiId?: string;
            /**
                * <p>The API mapping identifier.</p>
                */
            ApiMappingId?: string;
            /**
                * <p>The API mapping key.</p>
                */
            ApiMappingKey?: string;
            /**
                * <p>The API stage.</p>
                */
            Stage?: string;
    }
    export namespace UpdateApiMappingResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiMappingResponse) => any;
    }
    /**
        * <p>Updates an Authorizer.</p>
        */
    export interface UpdateAuthorizerRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter.</p>
                */
            AuthorizerCredentialsArn?: string;
            /**
                * <p>The authorizer identifier.</p>
                */
            AuthorizerId: string | undefined;
            /**
                * <p>Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p>
                */
            AuthorizerPayloadFormatVersion?: string;
            /**
                * <p>The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.</p>
                */
            AuthorizerResultTtlInSeconds?: number;
            /**
                * <p>The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).</p>
                */
            AuthorizerType?: AuthorizerType | string;
            /**
                * <p>The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                *                , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerUri?: string;
            /**
                * <p>Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a></p>
                */
            EnableSimpleResponses?: boolean;
            /**
                * <p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>
                */
            IdentitySource?: string[];
            /**
                * <p>This parameter is not used.</p>
                */
            IdentityValidationExpression?: string;
            /**
                * <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
                */
            JwtConfiguration?: JWTConfiguration;
            /**
                * <p>The name of the authorizer.</p>
                */
            Name?: string;
    }
    export namespace UpdateAuthorizerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAuthorizerRequest) => any;
    }
    export interface UpdateAuthorizerResponse {
            /**
                * <p>Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don't specify this parameter. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerCredentialsArn?: string;
            /**
                * <p>The authorizer identifier.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p>
                */
            AuthorizerPayloadFormatVersion?: string;
            /**
                * <p>The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.</p>
                */
            AuthorizerResultTtlInSeconds?: number;
            /**
                * <p>The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).</p>
                */
            AuthorizerType?: AuthorizerType | string;
            /**
                * <p>The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                *                , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.</p>
                */
            AuthorizerUri?: string;
            /**
                * <p>Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a></p>
                */
            EnableSimpleResponses?: boolean;
            /**
                * <p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>
                */
            IdentitySource?: string[];
            /**
                * <p>The validation expression does not apply to the REQUEST authorizer.</p>
                */
            IdentityValidationExpression?: string;
            /**
                * <p>Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.</p>
                */
            JwtConfiguration?: JWTConfiguration;
            /**
                * <p>The name of the authorizer.</p>
                */
            Name?: string;
    }
    export namespace UpdateAuthorizerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAuthorizerResponse) => any;
    }
    /**
        * <p>Updates a Deployment.</p>
        */
    export interface UpdateDeploymentRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The deployment ID.</p>
                */
            DeploymentId: string | undefined;
            /**
                * <p>The description for the deployment resource.</p>
                */
            Description?: string;
    }
    export namespace UpdateDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeploymentRequest) => any;
    }
    export interface UpdateDeploymentResponse {
            /**
                * <p>Specifies whether a deployment was automatically released.</p>
                */
            AutoDeployed?: boolean;
            /**
                * <p>The date and time when the Deployment resource was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The identifier for the deployment.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The status of the deployment: PENDING, FAILED, or SUCCEEDED.</p>
                */
            DeploymentStatus?: DeploymentStatus | string;
            /**
                * <p>May contain additional feedback on the status of an API deployment.</p>
                */
            DeploymentStatusMessage?: string;
            /**
                * <p>The description for the deployment.</p>
                */
            Description?: string;
    }
    export namespace UpdateDeploymentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDeploymentResponse) => any;
    }
    /**
        * <p>Updates a DomainName.</p>
        */
    export interface UpdateDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            DomainName: string | undefined;
            /**
                * <p>The domain name configurations.</p>
                */
            DomainNameConfigurations?: DomainNameConfiguration[];
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name.</p>
                */
            MutualTlsAuthentication?: MutualTlsAuthenticationInput;
    }
    export namespace UpdateDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainNameRequest) => any;
    }
    export interface UpdateDomainNameResponse {
            /**
                * <p>The API mapping selection expression.</p>
                */
            ApiMappingSelectionExpression?: string;
            /**
                * <p>The name of the DomainName resource.</p>
                */
            DomainName?: string;
            /**
                * <p>The domain name configurations.</p>
                */
            DomainNameConfigurations?: DomainNameConfiguration[];
            /**
                * <p>The mutual TLS authentication configuration for a custom domain name.</p>
                */
            MutualTlsAuthentication?: MutualTlsAuthentication;
            /**
                * <p>The collection of tags associated with a domain name.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdateDomainNameResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainNameResponse) => any;
    }
    /**
        * <p>Updates an Integration.</p>
        */
    export interface UpdateIntegrationRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The ID of the VPC link for a private integration. Supported only for HTTP APIs.</p>
                */
            ConnectionId?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.</p>
                */
            ConnectionType?: ConnectionType | string;
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>The description of the integration</p>
                */
            Description?: string;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
            /**
                * <p>Specifies the integration's HTTP method type.</p>
                */
            IntegrationMethod?: string;
            /**
                * <p>Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.</p>
                */
            IntegrationSubtype?: string;
            /**
                * <p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>
                */
            IntegrationType?: IntegrationType | string;
            /**
                * <p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>
                */
            IntegrationUri?: string;
            /**
                * <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>
                */
            PassthroughBehavior?: PassthroughBehavior | string;
            /**
                * <p>Specifies the format of the payload sent to an integration. Required for HTTP APIs.</p>
                */
            PayloadFormatVersion?: string;
            /**
                * <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                *           , where
                *             <replaceable>{location}</replaceable>
                *            is querystring, path, or header; and
                *             <replaceable>{name}</replaceable>
                *            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.">Transforming API requests and responses</a>.</p>
                */
            RequestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.</p>
                */
            RequestTemplates?: Record<string, string>;
            /**
                * <p>Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            ResponseParameters?: Record<string, Record<string, string>>;
            /**
                * <p>The template selection expression for the integration.</p>
                */
            TemplateSelectionExpression?: string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.</p>
                */
            TimeoutInMillis?: number;
            /**
                * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
                */
            TlsConfig?: TlsConfigInput;
    }
    export namespace UpdateIntegrationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIntegrationRequest) => any;
    }
    export interface UpdateIntegrationResult {
            /**
                * <p>Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can't delete it.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>The ID of the VPC link for a private integration. Supported only for HTTP APIs.</p>
                */
            ConnectionId?: string;
            /**
                * <p>The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.</p>
                */
            ConnectionType?: ConnectionType | string;
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.</p>
                */
            CredentialsArn?: string;
            /**
                * <p>Represents the description of an integration.</p>
                */
            Description?: string;
            /**
                * <p>Represents the identifier of an integration.</p>
                */
            IntegrationId?: string;
            /**
                * <p>Specifies the integration's HTTP method type.</p>
                */
            IntegrationMethod?: string;
            /**
                * <p>The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.</p>
                */
            IntegrationResponseSelectionExpression?: string;
            /**
                * <p>Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.</p>
                */
            IntegrationSubtype?: string;
            /**
                * <p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>
                */
            IntegrationType?: IntegrationType | string;
            /**
                * <p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>
                */
            IntegrationUri?: string;
            /**
                * <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>
                */
            PassthroughBehavior?: PassthroughBehavior | string;
            /**
                * <p>Specifies the format of the payload sent to an integration. Required for HTTP APIs.</p>
                */
            PayloadFormatVersion?: string;
            /**
                * <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                *           , where
                *             <replaceable>{location}</replaceable>
                *            is querystring, path, or header; and
                *             <replaceable>{name}</replaceable>
                *            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            RequestParameters?: Record<string, string>;
            /**
                * <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.</p>
                */
            RequestTemplates?: Record<string, string>;
            /**
                * <p>Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                */
            ResponseParameters?: Record<string, Record<string, string>>;
            /**
                * <p>The template selection expression for the integration. Supported only for WebSocket APIs.</p>
                */
            TemplateSelectionExpression?: string;
            /**
                * <p>Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.</p>
                */
            TimeoutInMillis?: number;
            /**
                * <p>The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.</p>
                */
            TlsConfig?: TlsConfig;
    }
    export namespace UpdateIntegrationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIntegrationResult) => any;
    }
    /**
        * <p>Updates an IntegrationResponses.</p>
        */
    export interface UpdateIntegrationResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>The integration ID.</p>
                */
            IntegrationId: string | undefined;
            /**
                * <p>The integration response ID.</p>
                */
            IntegrationResponseId: string | undefined;
            /**
                * <p>The integration response key.</p>
                */
            IntegrationResponseKey?: string;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.<replaceable>{name}</replaceable>
                *                , where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.<replaceable>{name}</replaceable>
                *                 or integration.response.body.<replaceable>{JSON-expression}</replaceable>
                *                , where
                *                   <replaceable>{name}</replaceable>
                *                 is a valid and unique response header name and
                *                   <replaceable>{JSON-expression}</replaceable>
                *                 is a valid JSON expression without the $ prefix.</p>
                */
            ResponseParameters?: Record<string, string>;
            /**
                * <p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
                */
            ResponseTemplates?: Record<string, string>;
            /**
                * <p>The template selection expression for the integration response. Supported only for WebSocket APIs.</p>
                */
            TemplateSelectionExpression?: string;
    }
    export namespace UpdateIntegrationResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIntegrationResponseRequest) => any;
    }
    export interface UpdateIntegrationResponseResponse {
            /**
                * <p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>
                */
            ContentHandlingStrategy?: ContentHandlingStrategy | string;
            /**
                * <p>The integration response ID.</p>
                */
            IntegrationResponseId?: string;
            /**
                * <p>The integration response key.</p>
                */
            IntegrationResponseKey?: string;
            /**
                * <p>A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.</p>
                */
            ResponseParameters?: Record<string, string>;
            /**
                * <p>The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.</p>
                */
            ResponseTemplates?: Record<string, string>;
            /**
                * <p>The template selection expressions for the integration response.</p>
                */
            TemplateSelectionExpression?: string;
    }
    export namespace UpdateIntegrationResponseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIntegrationResponseResponse) => any;
    }
    /**
        * <p>Updates a Model.</p>
        */
    export interface UpdateModelRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The content-type for the model, for example, "application/json".</p>
                */
            ContentType?: string;
            /**
                * <p>The description of the model.</p>
                */
            Description?: string;
            /**
                * <p>The model ID.</p>
                */
            ModelId: string | undefined;
            /**
                * <p>The name of the model.</p>
                */
            Name?: string;
            /**
                * <p>The schema for the model. For application/json models, this should be JSON schema draft 4 model.</p>
                */
            Schema?: string;
    }
    export namespace UpdateModelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelRequest) => any;
    }
    export interface UpdateModelResponse {
            /**
                * <p>The content-type for the model, for example, "application/json".</p>
                */
            ContentType?: string;
            /**
                * <p>The description of the model.</p>
                */
            Description?: string;
            /**
                * <p>The model identifier.</p>
                */
            ModelId?: string;
            /**
                * <p>The name of the model. Must be alphanumeric.</p>
                */
            Name?: string;
            /**
                * <p>The schema for the model. For application/json models, this should be JSON schema draft 4 model.</p>
                */
            Schema?: string;
    }
    export namespace UpdateModelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateModelResponse) => any;
    }
    /**
        * <p>Updates a Route.</p>
        */
    export interface UpdateRouteRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies whether an API key is required for the route. Supported only for WebSocket APIs.</p>
                */
            ApiKeyRequired?: boolean;
            /**
                * <p>The authorization scopes supported by this route.</p>
                */
            AuthorizationScopes?: string[];
            /**
                * <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
                */
            AuthorizationType?: AuthorizationType | string;
            /**
                * <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The operation name for the route.</p>
                */
            OperationName?: string;
            /**
                * <p>The request models for the route. Supported only for WebSocket APIs.</p>
                */
            RequestModels?: Record<string, string>;
            /**
                * <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
                */
            RequestParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
            /**
                * <p>The route key for the route.</p>
                */
            RouteKey?: string;
            /**
                * <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            RouteResponseSelectionExpression?: string;
            /**
                * <p>The target for the route.</p>
                */
            Target?: string;
    }
    export namespace UpdateRouteRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRouteRequest) => any;
    }
    export interface UpdateRouteResult {
            /**
                * <p>Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can't modify the $default route key.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether an API key is required for this route. Supported only for WebSocket APIs.</p>
                */
            ApiKeyRequired?: boolean;
            /**
                * <p>A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
                */
            AuthorizationScopes?: string[];
            /**
                * <p>The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.</p>
                */
            AuthorizationType?: AuthorizationType | string;
            /**
                * <p>The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
                */
            AuthorizerId?: string;
            /**
                * <p>The model selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The operation name for the route.</p>
                */
            OperationName?: string;
            /**
                * <p>The request models for the route. Supported only for WebSocket APIs.</p>
                */
            RequestModels?: Record<string, string>;
            /**
                * <p>The request parameters for the route. Supported only for WebSocket APIs.</p>
                */
            RequestParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route ID.</p>
                */
            RouteId?: string;
            /**
                * <p>The route key for the route.</p>
                */
            RouteKey?: string;
            /**
                * <p>The route response selection expression for the route. Supported only for WebSocket APIs.</p>
                */
            RouteResponseSelectionExpression?: string;
            /**
                * <p>The target for the route.</p>
                */
            Target?: string;
    }
    export namespace UpdateRouteResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRouteResult) => any;
    }
    /**
        * <p>Updates a RouteResponse.</p>
        */
    export interface UpdateRouteResponseRequest {
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>The model selection expression for the route response. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>The response models for the route response.</p>
                */
            ResponseModels?: Record<string, string>;
            /**
                * <p>The route response parameters.</p>
                */
            ResponseParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>The route ID.</p>
                */
            RouteId: string | undefined;
            /**
                * <p>The route response ID.</p>
                */
            RouteResponseId: string | undefined;
            /**
                * <p>The route response key.</p>
                */
            RouteResponseKey?: string;
    }
    export namespace UpdateRouteResponseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRouteResponseRequest) => any;
    }
    export interface UpdateRouteResponseResponse {
            /**
                * <p>Represents the model selection expression of a route response. Supported only for WebSocket APIs.</p>
                */
            ModelSelectionExpression?: string;
            /**
                * <p>Represents the response models of a route response.</p>
                */
            ResponseModels?: Record<string, string>;
            /**
                * <p>Represents the response parameters of a route response.</p>
                */
            ResponseParameters?: Record<string, ParameterConstraints>;
            /**
                * <p>Represents the identifier of a route response.</p>
                */
            RouteResponseId?: string;
            /**
                * <p>Represents the route response key of a route response.</p>
                */
            RouteResponseKey?: string;
    }
    export namespace UpdateRouteResponseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRouteResponseResponse) => any;
    }
    /**
        * <p>Updates a Stage.</p>
        */
    export interface UpdateStageRequest {
            /**
                * <p>Settings for logging access in this stage.</p>
                */
            AccessLogSettings?: AccessLogSettings;
            /**
                * <p>The API identifier.</p>
                */
            ApiId: string | undefined;
            /**
                * <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
                */
            AutoDeploy?: boolean;
            /**
                * <p>The identifier of a client certificate for a Stage.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>The default route settings for the stage.</p>
                */
            DefaultRouteSettings?: RouteSettings;
            /**
                * <p>The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The description for the API stage.</p>
                */
            Description?: string;
            /**
                * <p>Route settings for the stage.</p>
                */
            RouteSettings?: Record<string, RouteSettings>;
            /**
                * <p>The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.</p>
                */
            StageName: string | undefined;
            /**
                * <p>A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
                */
            StageVariables?: Record<string, string>;
    }
    export namespace UpdateStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStageRequest) => any;
    }
    export interface UpdateStageResponse {
            /**
                * <p>Settings for logging access in this stage.</p>
                */
            AccessLogSettings?: AccessLogSettings;
            /**
                * <p>Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can't modify the $default stage.</p>
                */
            ApiGatewayManaged?: boolean;
            /**
                * <p>Specifies whether updates to an API automatically trigger a new deployment. The default value is false.</p>
                */
            AutoDeploy?: boolean;
            /**
                * <p>The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.</p>
                */
            ClientCertificateId?: string;
            /**
                * <p>The timestamp when the stage was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>Default route settings for the stage.</p>
                */
            DefaultRouteSettings?: RouteSettings;
            /**
                * <p>The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.</p>
                */
            DeploymentId?: string;
            /**
                * <p>The description of the stage.</p>
                */
            Description?: string;
            /**
                * <p>Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.</p>
                */
            LastDeploymentStatusMessage?: string;
            /**
                * <p>The timestamp when the stage was last updated.</p>
                */
            LastUpdatedDate?: Date;
            /**
                * <p>Route settings for the stage, by routeKey.</p>
                */
            RouteSettings?: Record<string, RouteSettings>;
            /**
                * <p>The name of the stage.</p>
                */
            StageName?: string;
            /**
                * <p>A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.</p>
                */
            StageVariables?: Record<string, string>;
            /**
                * <p>The collection of tags. Each tag element is associated with a given resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdateStageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateStageResponse) => any;
    }
    /**
        * <p>Updates a VPC link.</p>
        */
    export interface UpdateVpcLinkRequest {
            /**
                * <p>The name of the VPC link.</p>
                */
            Name?: string;
            /**
                * <p>The ID of the VPC link.</p>
                */
            VpcLinkId: string | undefined;
    }
    export namespace UpdateVpcLinkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVpcLinkRequest) => any;
    }
    export interface UpdateVpcLinkResponse {
            /**
                * <p>The timestamp when the VPC link was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The name of the VPC link.</p>
                */
            Name?: string;
            /**
                * <p>A list of security group IDs for the VPC link.</p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>A list of subnet IDs to include in the VPC link.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>Tags for the VPC link.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The ID of the VPC link.</p>
                */
            VpcLinkId?: string;
            /**
                * <p>The status of the VPC link.</p>
                */
            VpcLinkStatus?: VpcLinkStatus | string;
            /**
                * <p>A message summarizing the cause of the status of the VPC link.</p>
                */
            VpcLinkStatusMessage?: string;
            /**
                * <p>The version of the VPC link.</p>
                */
            VpcLinkVersion?: VpcLinkVersion | string;
    }
    export namespace UpdateVpcLinkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateVpcLinkResponse) => any;
    }
}

declare module '@aws-sdk/client-apigatewayv2/node_modules/@aws-sdk/client-apigatewayv2/dist-types/models/ApiGatewayV2ServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ApiGatewayV2 service.
        */
    export class ApiGatewayV2ServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

