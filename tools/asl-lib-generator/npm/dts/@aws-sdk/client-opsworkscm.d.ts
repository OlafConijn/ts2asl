// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-opsworkscm' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateNodeCommandInput, AssociateNodeCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/AssociateNodeCommand";
    import { CreateBackupCommandInput, CreateBackupCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/CreateBackupCommand";
    import { CreateServerCommandInput, CreateServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/CreateServerCommand";
    import { DeleteBackupCommandInput, DeleteBackupCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DeleteBackupCommand";
    import { DeleteServerCommandInput, DeleteServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DeleteServerCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeBackupsCommandInput, DescribeBackupsCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeBackupsCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeEventsCommand";
    import { DescribeNodeAssociationStatusCommandInput, DescribeNodeAssociationStatusCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeNodeAssociationStatusCommand";
    import { DescribeServersCommandInput, DescribeServersCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeServersCommand";
    import { DisassociateNodeCommandInput, DisassociateNodeCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DisassociateNodeCommand";
    import { ExportServerEngineAttributeCommandInput, ExportServerEngineAttributeCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/ExportServerEngineAttributeCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/ListTagsForResourceCommand";
    import { RestoreServerCommandInput, RestoreServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/RestoreServerCommand";
    import { StartMaintenanceCommandInput, StartMaintenanceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/StartMaintenanceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UntagResourceCommand";
    import { UpdateServerCommandInput, UpdateServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UpdateServerCommand";
    import { UpdateServerEngineAttributesCommandInput, UpdateServerEngineAttributesCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UpdateServerEngineAttributesCommand";
    import { OpsWorksCMClient } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    /**
        * <fullname>AWS OpsWorks CM</fullname>
        *          <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages
        *       configuration management servers. You can use AWS OpsWorks CM to create and manage AWS
        *       OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove
        *       nodes for the servers to manage.</p>
        *          <p>
        *             <b>Glossary of terms</b>
        *          </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Server</b>: A configuration management server that can be
        *         highly-available. The configuration management server runs on
        *       an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational
        *       Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration
        *       manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start
        *       or stop servers. After you create servers, they continue to run until they are deleted.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Engine</b>: The engine is the specific configuration manager
        *         that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Backup</b>: This
        *       is an application-level backup of the data that the configuration manager
        *       stores. AWS OpsWorks CM
        *       creates an S3 bucket for backups when you launch the first
        *       server. A backup maintains a snapshot of a server's configuration-related
        *       attributes at the time the backup starts.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Events</b>:
        *       Events are always related to a server. Events are written
        *       during server creation, when health checks run, when backups
        *       are created, when system maintenance is performed, etc. When you delete a server, the server's events are
        *       also deleted.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Account attributes</b>:
        *       Every account has attributes that are assigned in the AWS OpsWorks CM
        *       database. These attributes store information about configuration limits (servers,
        *       backups, etc.) and your customer account.
        *       </p>
        *             </li>
        *          </ul>
        *          <p>
        *             <b>Endpoints</b>
        *          </p>
        *          <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers
        *       can only be accessed or managed within the endpoint in which they are created.</p>
        *          <ul>
        *             <li>
        *                <p>opsworks-cm.us-east-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.us-east-2.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.us-west-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.us-west-2.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.ap-northeast-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.ap-southeast-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.ap-southeast-2.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.eu-central-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.eu-west-1.amazonaws.com</p>
        *             </li>
        *          </ul>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p>
        *          <p>
        *             <b>Throttling limits</b>
        *          </p>
        *          <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
        */
    export class OpsWorksCM extends OpsWorksCMClient {
            /**
                * <p> Associates a new node with the server. For more information about how to disassociate a node, see <a>DisassociateNode</a>.</p>
                *          <p>
                *       On a Chef server: This command is an alternative to  <code>knife bootstrap</code>.</p>
                *          <p>
                *         Example (Chef): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>CHEF_ORGANIZATION</i>,Value=default" "Name=<i>CHEF_NODE_PUBLIC_KEY</i>,Value=<i>public-key-pem</i>"</code>
                *          </p>
                *          <p>
                *       On a Puppet server, this command is an alternative to the <code>puppet cert sign</code> command that signs a Puppet node CSR.
                *     </p>
                *          <p>
                *         Example (Puppet): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>PUPPET_NODE_CSR</i>,Value=<i>csr-pem</i>"</code>
                *          </p>
                *          <p>
                *       A node can can only be associated with servers that are in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *       The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server's instance.
                *     </p>
                */
            associateNode(args: AssociateNodeCommandInput, options?: __HttpHandlerOptions): Promise<AssociateNodeCommandOutput>;
            associateNode(args: AssociateNodeCommandInput, cb: (err: any, data?: AssociateNodeCommandOutput) => void): void;
            associateNode(args: AssociateNodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateNodeCommandOutput) => void): void;
            /**
                * <p>
                *       Creates an application-level backup of a server. While the
                *       server is in the <code>BACKING_UP</code> state, the server cannot be
                *       changed, and no additional backup can be created.
                *     </p>
                *          <p>
                *       Backups can be created for servers in <code>RUNNING</code>, <code>HEALTHY</code>, and <code>UNHEALTHY</code> states. By default, you can create a maximum of 50
                *       manual backups.
                *     </p>
                *          <p>
                *       This operation is asynchronous.
                *     </p>
                *          <p>
                *       A <code>LimitExceededException</code> is thrown when the maximum number of manual backups is reached.
                *       An <code>InvalidStateException</code> is thrown when the server is not in any of the following states: RUNNING, HEALTHY, or UNHEALTHY.
                *       A <code>ResourceNotFoundException</code> is thrown when the server is not found.
                *       A <code>ValidationException</code> is thrown when parameters of the request are not valid.
                *     </p>
                */
            createBackup(args: CreateBackupCommandInput, options?: __HttpHandlerOptions): Promise<CreateBackupCommandOutput>;
            createBackup(args: CreateBackupCommandInput, cb: (err: any, data?: CreateBackupCommandOutput) => void): void;
            createBackup(args: CreateBackupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBackupCommandOutput) => void): void;
            /**
                * <p>
                *       Creates and immedately starts a new server. The server is ready to use when it is in the <code>HEALTHY</code> state. By default, you can create a maximum of 10 servers.
                *     </p>
                *          <p>
                *       This operation is asynchronous.
                *     </p>
                *          <p>
                *       A <code>LimitExceededException</code> is thrown when you have created the maximum number of servers (10). A <code>ResourceAlreadyExistsException</code>
                *       is thrown when a server with the same name already exists in the account. A <code>ResourceNotFoundException</code> is thrown when you
                *       specify a backup ID that is not valid or is for a backup that does not exist. A <code>ValidationException</code> is thrown when parameters
                *       of the request are not valid.
                *     </p>
                *          <p>
                *       If you do not specify a security group by adding the <code>SecurityGroupIds</code> parameter, AWS OpsWorks creates a new security group.
                *     </p>
                *          <p>
                *             <i>Chef Automate:</i> The default security group opens the Chef server to the world on TCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
                *     </p>
                *          <p>
                *             <i>Puppet Enterprise:</i> The default security group opens TCP ports 22, 443, 4433, 8140, 8142, 8143, and 8170. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
                *     </p>
                *          <p>By default, your server is accessible from any IP address. We
                *       recommend that you update your security group rules to allow
                *       access from known IP addresses and address ranges only. To edit security group rules, open Security Groups
                *       in the navigation pane of the EC2 management console.
                *     </p>
                *          <p>To specify your own domain for a server, and provide your own self-signed or CA-signed certificate and private key, specify values for <code>CustomDomain</code>,
                *       <code>CustomCertificate</code>, and <code>CustomPrivateKey</code>.</p>
                */
            createServer(args: CreateServerCommandInput, options?: __HttpHandlerOptions): Promise<CreateServerCommandOutput>;
            createServer(args: CreateServerCommandInput, cb: (err: any, data?: CreateServerCommandOutput) => void): void;
            createServer(args: CreateServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateServerCommandOutput) => void): void;
            /**
                * <p>
                *       Deletes a backup. You can delete both manual and automated backups. This operation is asynchronous.
                *     </p>
                *          <p>
                *       An <code>InvalidStateException</code> is thrown when a backup deletion is already in progress.
                *       A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
                *       A <code>ValidationException</code> is thrown when parameters of the request are not valid.
                *     </p>
                */
            deleteBackup(args: DeleteBackupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBackupCommandOutput>;
            deleteBackup(args: DeleteBackupCommandInput, cb: (err: any, data?: DeleteBackupCommandOutput) => void): void;
            deleteBackup(args: DeleteBackupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBackupCommandOutput) => void): void;
            /**
                * <p>
                *       Deletes the server and the underlying AWS CloudFormation stacks
                *       (including the server's EC2 instance). When you run this command, the server state is updated
                *       to <code>DELETING</code>. After the server is deleted, it is no longer returned by
                *       <code>DescribeServer</code> requests. If the AWS CloudFormation stack cannot be deleted, the server cannot be deleted.
                *     </p>
                *          <p>
                *       This operation is asynchronous.
                *     </p>
                *          <p>
                *       An <code>InvalidStateException</code> is thrown when a server deletion is already in progress.
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
                *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                *          <p>
                *     </p>
                */
            deleteServer(args: DeleteServerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteServerCommandOutput>;
            deleteServer(args: DeleteServerCommandInput, cb: (err: any, data?: DeleteServerCommandOutput) => void): void;
            deleteServer(args: DeleteServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteServerCommandOutput) => void): void;
            /**
                * <p>
                *       Describes your OpsWorks-CM account attributes.
                *     </p>
                *          <p>
                *       This operation is synchronous.
                *     </p>
                */
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountAttributesCommandOutput>;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            /**
                * <p>
                *       Describes backups. The results are ordered by time, with newest backups first.
                *       If you do not specify a BackupId or ServerName, the command returns all backups.
                *     </p>
                *          <p>
                *       This operation is synchronous.
                *     </p>
                *          <p>
                *       A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
                *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            describeBackups(args: DescribeBackupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeBackupsCommandOutput>;
            describeBackups(args: DescribeBackupsCommandInput, cb: (err: any, data?: DescribeBackupsCommandOutput) => void): void;
            describeBackups(args: DescribeBackupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeBackupsCommandOutput) => void): void;
            /**
                * <p>
                *       Describes events for a specified server. Results are ordered by time, with newest events first.
                *     </p>
                *          <p>
                *       This operation is synchronous.
                *     </p>
                *          <p>
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
                *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            describeEvents(args: DescribeEventsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventsCommandOutput>;
            describeEvents(args: DescribeEventsCommandInput, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            describeEvents(args: DescribeEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            /**
                * <p>
                *       Returns the current status of an existing association or disassociation request.
                *     </p>
                *          <p>
                *       A <code>ResourceNotFoundException</code> is thrown when no recent association or disassociation request with the specified token is found,
                *       or when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            describeNodeAssociationStatus(args: DescribeNodeAssociationStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNodeAssociationStatusCommandOutput>;
            describeNodeAssociationStatus(args: DescribeNodeAssociationStatusCommandInput, cb: (err: any, data?: DescribeNodeAssociationStatusCommandOutput) => void): void;
            describeNodeAssociationStatus(args: DescribeNodeAssociationStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNodeAssociationStatusCommandOutput) => void): void;
            /**
                * <p>
                *       Lists all configuration management servers that are identified with your account.
                *       Only the stored results from Amazon DynamoDB
                *       are returned. AWS OpsWorks CM does not query other services.
                *     </p>
                *          <p>
                *       This operation is synchronous.
                *     </p>
                *          <p>
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
                *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            describeServers(args: DescribeServersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeServersCommandOutput>;
            describeServers(args: DescribeServersCommandInput, cb: (err: any, data?: DescribeServersCommandOutput) => void): void;
            describeServers(args: DescribeServersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeServersCommandOutput) => void): void;
            /**
                * <p>
                *       Disassociates a node from an AWS OpsWorks CM server, and removes the node from the server's managed nodes. After a node is disassociated,
                *       the node key pair is no longer valid for accessing the configuration manager's API. For more information about how to associate a node, see <a>AssociateNode</a>.
                *     </p>
                *          <p>A node can can only be disassociated from a server that is in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
                *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            disassociateNode(args: DisassociateNodeCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateNodeCommandOutput>;
            disassociateNode(args: DisassociateNodeCommandInput, cb: (err: any, data?: DisassociateNodeCommandOutput) => void): void;
            disassociateNode(args: DisassociateNodeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateNodeCommandOutput) => void): void;
            /**
                * <p>
                *       Exports a specified server engine attribute as a base64-encoded string. For example, you can export user data that you can use in EC2 to associate nodes with a server.
                *     </p>
                *          <p>
                *       This operation is synchronous.
                *     </p>
                *          <p>
                *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
                *       An <code>InvalidStateException</code> is thrown when the server is in any of the following states: CREATING, TERMINATED,
                *       FAILED or DELETING.
                *     </p>
                */
            exportServerEngineAttribute(args: ExportServerEngineAttributeCommandInput, options?: __HttpHandlerOptions): Promise<ExportServerEngineAttributeCommandOutput>;
            exportServerEngineAttribute(args: ExportServerEngineAttributeCommandInput, cb: (err: any, data?: ExportServerEngineAttributeCommandOutput) => void): void;
            exportServerEngineAttribute(args: ExportServerEngineAttributeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExportServerEngineAttributeCommandOutput) => void): void;
            /**
                * <p>Returns a list of tags that are applied to the specified AWS OpsWorks for Chef Automate or
                *       AWS OpsWorks for Puppet Enterprise servers or backups.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>
                *       Restores a backup to a server that is in a <code>CONNECTION_LOST</code>, <code>HEALTHY</code>, <code>RUNNING</code>, <code>UNHEALTHY</code>, or <code>TERMINATED</code> state.
                *       When you run RestoreServer, the server's EC2 instance is deleted, and a new EC2 instance is configured. RestoreServer maintains
                *       the existing server endpoint, so configuration management of the server's client devices (nodes) should continue to work.
                *     </p>
                *          <p>Restoring from a backup is performed by creating a new EC2 instance. If restoration is successful, and the server is in a <code>HEALTHY</code> state,
                *       AWS OpsWorks CM switches traffic over to the new instance. After restoration is finished, the old EC2 instance is maintained in a
                *       <code>Running</code> or <code>Stopped</code> state, but is eventually terminated.</p>
                *          <p>
                *       This operation is asynchronous.
                *     </p>
                *          <p>
                *       An <code>InvalidStateException</code> is thrown when the server is not in a valid state. A <code>ResourceNotFoundException</code> is thrown
                *       when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            restoreServer(args: RestoreServerCommandInput, options?: __HttpHandlerOptions): Promise<RestoreServerCommandOutput>;
            restoreServer(args: RestoreServerCommandInput, cb: (err: any, data?: RestoreServerCommandOutput) => void): void;
            restoreServer(args: RestoreServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreServerCommandOutput) => void): void;
            /**
                * <p>
                *       Manually starts server maintenance. This command can be useful if an earlier maintenance attempt failed, and the underlying
                *       cause of maintenance failure has been resolved. The server is in an <code>UNDER_MAINTENANCE</code> state while maintenance is in progress.
                *     </p>
                *          <p>
                *       Maintenance can only be started on servers in <code>HEALTHY</code> and <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is thrown.
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            startMaintenance(args: StartMaintenanceCommandInput, options?: __HttpHandlerOptions): Promise<StartMaintenanceCommandOutput>;
            startMaintenance(args: StartMaintenanceCommandInput, cb: (err: any, data?: StartMaintenanceCommandOutput) => void): void;
            startMaintenance(args: StartMaintenanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartMaintenanceCommandOutput) => void): void;
            /**
                * <p>Applies tags to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server, or to server backups.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes specified tags from an AWS OpsWorks-CM server or backup.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>
                *       Updates settings for a server.
                *     </p>
                *          <p>
                *       This operation is synchronous.
                *     </p>
                */
            updateServer(args: UpdateServerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateServerCommandOutput>;
            updateServer(args: UpdateServerCommandInput, cb: (err: any, data?: UpdateServerCommandOutput) => void): void;
            updateServer(args: UpdateServerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateServerCommandOutput) => void): void;
            /**
                * <p>
                *       Updates engine-specific attributes on a specified server. The server
                *       enters the <code>MODIFYING</code> state when this operation
                *       is in progress. Only one update can occur at a time.
                *       You can use this command to reset a Chef server's public key (<code>CHEF_PIVOTAL_KEY</code>) or a Puppet server's
                *       admin password (<code>PUPPET_ADMIN_PASSWORD</code>).
                *     </p>
                *          <p>
                *       This operation is asynchronous.
                *     </p>
                *          <p>
                *       This operation can only be called for servers in <code>HEALTHY</code> or <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is raised.
                *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
                *     </p>
                */
            updateServerEngineAttributes(args: UpdateServerEngineAttributesCommandInput, options?: __HttpHandlerOptions): Promise<UpdateServerEngineAttributesCommandOutput>;
            updateServerEngineAttributes(args: UpdateServerEngineAttributesCommandInput, cb: (err: any, data?: UpdateServerEngineAttributesCommandOutput) => void): void;
            updateServerEngineAttributes(args: UpdateServerEngineAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateServerEngineAttributesCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/AssociateNodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateNodeRequest, AssociateNodeResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface AssociateNodeCommandInput extends AssociateNodeRequest {
    }
    export interface AssociateNodeCommandOutput extends AssociateNodeResponse, __MetadataBearer {
    }
    /**
        * <p> Associates a new node with the server. For more information about how to disassociate a node, see <a>DisassociateNode</a>.</p>
        *          <p>
        *       On a Chef server: This command is an alternative to  <code>knife bootstrap</code>.</p>
        *          <p>
        *         Example (Chef): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>CHEF_ORGANIZATION</i>,Value=default" "Name=<i>CHEF_NODE_PUBLIC_KEY</i>,Value=<i>public-key-pem</i>"</code>
        *          </p>
        *          <p>
        *       On a Puppet server, this command is an alternative to the <code>puppet cert sign</code> command that signs a Puppet node CSR.
        *     </p>
        *          <p>
        *         Example (Puppet): <code>aws opsworks-cm associate-node --server-name <i>MyServer</i> --node-name <i>MyManagedNode</i> --engine-attributes "Name=<i>PUPPET_NODE_CSR</i>,Value=<i>csr-pem</i>"</code>
        *          </p>
        *          <p>
        *       A node can can only be associated with servers that are in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *       The AssociateNode API call can be integrated into Auto Scaling configurations, AWS Cloudformation templates, or the user data of a server's instance.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, AssociateNodeCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, AssociateNodeCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new AssociateNodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateNodeCommandInput} for command's `input` shape.
        * @see {@link AssociateNodeCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class AssociateNodeCommand extends $Command<AssociateNodeCommandInput, AssociateNodeCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: AssociateNodeCommandInput;
            constructor(input: AssociateNodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateNodeCommandInput, AssociateNodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/CreateBackupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateBackupRequest, CreateBackupResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface CreateBackupCommandInput extends CreateBackupRequest {
    }
    export interface CreateBackupCommandOutput extends CreateBackupResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Creates an application-level backup of a server. While the
        *       server is in the <code>BACKING_UP</code> state, the server cannot be
        *       changed, and no additional backup can be created.
        *     </p>
        *          <p>
        *       Backups can be created for servers in <code>RUNNING</code>, <code>HEALTHY</code>, and <code>UNHEALTHY</code> states. By default, you can create a maximum of 50
        *       manual backups.
        *     </p>
        *          <p>
        *       This operation is asynchronous.
        *     </p>
        *          <p>
        *       A <code>LimitExceededException</code> is thrown when the maximum number of manual backups is reached.
        *       An <code>InvalidStateException</code> is thrown when the server is not in any of the following states: RUNNING, HEALTHY, or UNHEALTHY.
        *       A <code>ResourceNotFoundException</code> is thrown when the server is not found.
        *       A <code>ValidationException</code> is thrown when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, CreateBackupCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, CreateBackupCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new CreateBackupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBackupCommandInput} for command's `input` shape.
        * @see {@link CreateBackupCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class CreateBackupCommand extends $Command<CreateBackupCommandInput, CreateBackupCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: CreateBackupCommandInput;
            constructor(input: CreateBackupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBackupCommandInput, CreateBackupCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/CreateServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateServerRequest, CreateServerResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface CreateServerCommandInput extends CreateServerRequest {
    }
    export interface CreateServerCommandOutput extends CreateServerResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Creates and immedately starts a new server. The server is ready to use when it is in the <code>HEALTHY</code> state. By default, you can create a maximum of 10 servers.
        *     </p>
        *          <p>
        *       This operation is asynchronous.
        *     </p>
        *          <p>
        *       A <code>LimitExceededException</code> is thrown when you have created the maximum number of servers (10). A <code>ResourceAlreadyExistsException</code>
        *       is thrown when a server with the same name already exists in the account. A <code>ResourceNotFoundException</code> is thrown when you
        *       specify a backup ID that is not valid or is for a backup that does not exist. A <code>ValidationException</code> is thrown when parameters
        *       of the request are not valid.
        *     </p>
        *          <p>
        *       If you do not specify a security group by adding the <code>SecurityGroupIds</code> parameter, AWS OpsWorks creates a new security group.
        *     </p>
        *          <p>
        *             <i>Chef Automate:</i> The default security group opens the Chef server to the world on TCP port 443. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
        *     </p>
        *          <p>
        *             <i>Puppet Enterprise:</i> The default security group opens TCP ports 22, 443, 4433, 8140, 8142, 8143, and 8170. If a KeyName is present, AWS OpsWorks enables SSH access. SSH is also open to the world on TCP port 22.
        *     </p>
        *          <p>By default, your server is accessible from any IP address. We
        *       recommend that you update your security group rules to allow
        *       access from known IP addresses and address ranges only. To edit security group rules, open Security Groups
        *       in the navigation pane of the EC2 management console.
        *     </p>
        *          <p>To specify your own domain for a server, and provide your own self-signed or CA-signed certificate and private key, specify values for <code>CustomDomain</code>,
        *       <code>CustomCertificate</code>, and <code>CustomPrivateKey</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, CreateServerCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, CreateServerCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new CreateServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateServerCommandInput} for command's `input` shape.
        * @see {@link CreateServerCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class CreateServerCommand extends $Command<CreateServerCommandInput, CreateServerCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: CreateServerCommandInput;
            constructor(input: CreateServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateServerCommandInput, CreateServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DeleteBackupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteBackupRequest, DeleteBackupResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DeleteBackupCommandInput extends DeleteBackupRequest {
    }
    export interface DeleteBackupCommandOutput extends DeleteBackupResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Deletes a backup. You can delete both manual and automated backups. This operation is asynchronous.
        *     </p>
        *          <p>
        *       An <code>InvalidStateException</code> is thrown when a backup deletion is already in progress.
        *       A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
        *       A <code>ValidationException</code> is thrown when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DeleteBackupCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DeleteBackupCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DeleteBackupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBackupCommandInput} for command's `input` shape.
        * @see {@link DeleteBackupCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DeleteBackupCommand extends $Command<DeleteBackupCommandInput, DeleteBackupCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DeleteBackupCommandInput;
            constructor(input: DeleteBackupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBackupCommandInput, DeleteBackupCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DeleteServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteServerRequest, DeleteServerResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DeleteServerCommandInput extends DeleteServerRequest {
    }
    export interface DeleteServerCommandOutput extends DeleteServerResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Deletes the server and the underlying AWS CloudFormation stacks
        *       (including the server's EC2 instance). When you run this command, the server state is updated
        *       to <code>DELETING</code>. After the server is deleted, it is no longer returned by
        *       <code>DescribeServer</code> requests. If the AWS CloudFormation stack cannot be deleted, the server cannot be deleted.
        *     </p>
        *          <p>
        *       This operation is asynchronous.
        *     </p>
        *          <p>
        *       An <code>InvalidStateException</code> is thrown when a server deletion is already in progress.
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
        *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        *          <p>
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DeleteServerCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DeleteServerCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DeleteServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteServerCommandInput} for command's `input` shape.
        * @see {@link DeleteServerCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DeleteServerCommand extends $Command<DeleteServerCommandInput, DeleteServerCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DeleteServerCommandInput;
            constructor(input: DeleteServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteServerCommandInput, DeleteServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeAccountAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAccountAttributesRequest, DescribeAccountAttributesResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DescribeAccountAttributesCommandInput extends DescribeAccountAttributesRequest {
    }
    export interface DescribeAccountAttributesCommandOutput extends DescribeAccountAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Describes your OpsWorks-CM account attributes.
        *     </p>
        *          <p>
        *       This operation is synchronous.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DescribeAccountAttributesCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DescribeAccountAttributesCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DescribeAccountAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountAttributesCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DescribeAccountAttributesCommand extends $Command<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DescribeAccountAttributesCommandInput;
            constructor(input: DescribeAccountAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeBackupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeBackupsRequest, DescribeBackupsResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DescribeBackupsCommandInput extends DescribeBackupsRequest {
    }
    export interface DescribeBackupsCommandOutput extends DescribeBackupsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Describes backups. The results are ordered by time, with newest backups first.
        *       If you do not specify a BackupId or ServerName, the command returns all backups.
        *     </p>
        *          <p>
        *       This operation is synchronous.
        *     </p>
        *          <p>
        *       A <code>ResourceNotFoundException</code> is thrown when the backup does not exist.
        *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DescribeBackupsCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DescribeBackupsCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DescribeBackupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeBackupsCommandInput} for command's `input` shape.
        * @see {@link DescribeBackupsCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DescribeBackupsCommand extends $Command<DescribeBackupsCommandInput, DescribeBackupsCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DescribeBackupsCommandInput;
            constructor(input: DescribeBackupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeBackupsCommandInput, DescribeBackupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEventsRequest, DescribeEventsResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DescribeEventsCommandInput extends DescribeEventsRequest {
    }
    export interface DescribeEventsCommandOutput extends DescribeEventsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Describes events for a specified server. Results are ordered by time, with newest events first.
        *     </p>
        *          <p>
        *       This operation is synchronous.
        *     </p>
        *          <p>
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
        *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DescribeEventsCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DescribeEventsCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DescribeEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventsCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DescribeEventsCommand extends $Command<DescribeEventsCommandInput, DescribeEventsCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DescribeEventsCommandInput;
            constructor(input: DescribeEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventsCommandInput, DescribeEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeNodeAssociationStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeNodeAssociationStatusRequest, DescribeNodeAssociationStatusResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DescribeNodeAssociationStatusCommandInput extends DescribeNodeAssociationStatusRequest {
    }
    export interface DescribeNodeAssociationStatusCommandOutput extends DescribeNodeAssociationStatusResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Returns the current status of an existing association or disassociation request.
        *     </p>
        *          <p>
        *       A <code>ResourceNotFoundException</code> is thrown when no recent association or disassociation request with the specified token is found,
        *       or when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DescribeNodeAssociationStatusCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DescribeNodeAssociationStatusCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DescribeNodeAssociationStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNodeAssociationStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeNodeAssociationStatusCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DescribeNodeAssociationStatusCommand extends $Command<DescribeNodeAssociationStatusCommandInput, DescribeNodeAssociationStatusCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DescribeNodeAssociationStatusCommandInput;
            constructor(input: DescribeNodeAssociationStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNodeAssociationStatusCommandInput, DescribeNodeAssociationStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeServersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeServersRequest, DescribeServersResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DescribeServersCommandInput extends DescribeServersRequest {
    }
    export interface DescribeServersCommandOutput extends DescribeServersResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Lists all configuration management servers that are identified with your account.
        *       Only the stored results from Amazon DynamoDB
        *       are returned. AWS OpsWorks CM does not query other services.
        *     </p>
        *          <p>
        *       This operation is synchronous.
        *     </p>
        *          <p>
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
        *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DescribeServersCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DescribeServersCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DescribeServersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeServersCommandInput} for command's `input` shape.
        * @see {@link DescribeServersCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DescribeServersCommand extends $Command<DescribeServersCommandInput, DescribeServersCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DescribeServersCommandInput;
            constructor(input: DescribeServersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeServersCommandInput, DescribeServersCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DisassociateNodeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateNodeRequest, DisassociateNodeResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface DisassociateNodeCommandInput extends DisassociateNodeRequest {
    }
    export interface DisassociateNodeCommandOutput extends DisassociateNodeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Disassociates a node from an AWS OpsWorks CM server, and removes the node from the server's managed nodes. After a node is disassociated,
        *       the node key pair is no longer valid for accessing the configuration manager's API. For more information about how to associate a node, see <a>AssociateNode</a>.
        *     </p>
        *          <p>A node can can only be disassociated from a server that is in a <code>HEALTHY</code> state. Otherwise, an <code>InvalidStateException</code> is thrown.
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
        *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, DisassociateNodeCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, DisassociateNodeCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new DisassociateNodeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateNodeCommandInput} for command's `input` shape.
        * @see {@link DisassociateNodeCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class DisassociateNodeCommand extends $Command<DisassociateNodeCommandInput, DisassociateNodeCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: DisassociateNodeCommandInput;
            constructor(input: DisassociateNodeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateNodeCommandInput, DisassociateNodeCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/ExportServerEngineAttributeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ExportServerEngineAttributeRequest, ExportServerEngineAttributeResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface ExportServerEngineAttributeCommandInput extends ExportServerEngineAttributeRequest {
    }
    export interface ExportServerEngineAttributeCommandOutput extends ExportServerEngineAttributeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Exports a specified server engine attribute as a base64-encoded string. For example, you can export user data that you can use in EC2 to associate nodes with a server.
        *     </p>
        *          <p>
        *       This operation is synchronous.
        *     </p>
        *          <p>
        *       A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist.
        *       An <code>InvalidStateException</code> is thrown when the server is in any of the following states: CREATING, TERMINATED,
        *       FAILED or DELETING.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, ExportServerEngineAttributeCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, ExportServerEngineAttributeCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new ExportServerEngineAttributeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExportServerEngineAttributeCommandInput} for command's `input` shape.
        * @see {@link ExportServerEngineAttributeCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class ExportServerEngineAttributeCommand extends $Command<ExportServerEngineAttributeCommandInput, ExportServerEngineAttributeCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: ExportServerEngineAttributeCommandInput;
            constructor(input: ExportServerEngineAttributeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExportServerEngineAttributeCommandInput, ExportServerEngineAttributeCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of tags that are applied to the specified AWS OpsWorks for Chef Automate or
        *       AWS OpsWorks for Puppet Enterprise servers or backups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, ListTagsForResourceCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, ListTagsForResourceCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/RestoreServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreServerRequest, RestoreServerResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface RestoreServerCommandInput extends RestoreServerRequest {
    }
    export interface RestoreServerCommandOutput extends RestoreServerResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Restores a backup to a server that is in a <code>CONNECTION_LOST</code>, <code>HEALTHY</code>, <code>RUNNING</code>, <code>UNHEALTHY</code>, or <code>TERMINATED</code> state.
        *       When you run RestoreServer, the server's EC2 instance is deleted, and a new EC2 instance is configured. RestoreServer maintains
        *       the existing server endpoint, so configuration management of the server's client devices (nodes) should continue to work.
        *     </p>
        *          <p>Restoring from a backup is performed by creating a new EC2 instance. If restoration is successful, and the server is in a <code>HEALTHY</code> state,
        *       AWS OpsWorks CM switches traffic over to the new instance. After restoration is finished, the old EC2 instance is maintained in a
        *       <code>Running</code> or <code>Stopped</code> state, but is eventually terminated.</p>
        *          <p>
        *       This operation is asynchronous.
        *     </p>
        *          <p>
        *       An <code>InvalidStateException</code> is thrown when the server is not in a valid state. A <code>ResourceNotFoundException</code> is thrown
        *       when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, RestoreServerCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, RestoreServerCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new RestoreServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreServerCommandInput} for command's `input` shape.
        * @see {@link RestoreServerCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class RestoreServerCommand extends $Command<RestoreServerCommandInput, RestoreServerCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: RestoreServerCommandInput;
            constructor(input: RestoreServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreServerCommandInput, RestoreServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/StartMaintenanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartMaintenanceRequest, StartMaintenanceResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface StartMaintenanceCommandInput extends StartMaintenanceRequest {
    }
    export interface StartMaintenanceCommandOutput extends StartMaintenanceResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Manually starts server maintenance. This command can be useful if an earlier maintenance attempt failed, and the underlying
        *       cause of maintenance failure has been resolved. The server is in an <code>UNDER_MAINTENANCE</code> state while maintenance is in progress.
        *     </p>
        *          <p>
        *       Maintenance can only be started on servers in <code>HEALTHY</code> and <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is thrown.
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, StartMaintenanceCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, StartMaintenanceCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new StartMaintenanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartMaintenanceCommandInput} for command's `input` shape.
        * @see {@link StartMaintenanceCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class StartMaintenanceCommand extends $Command<StartMaintenanceCommandInput, StartMaintenanceCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: StartMaintenanceCommandInput;
            constructor(input: StartMaintenanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartMaintenanceCommandInput, StartMaintenanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Applies tags to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server, or to server backups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, TagResourceCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, TagResourceCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes specified tags from an AWS OpsWorks-CM server or backup.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, UntagResourceCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, UntagResourceCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UpdateServerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateServerRequest, UpdateServerResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface UpdateServerCommandInput extends UpdateServerRequest {
    }
    export interface UpdateServerCommandOutput extends UpdateServerResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Updates settings for a server.
        *     </p>
        *          <p>
        *       This operation is synchronous.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, UpdateServerCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, UpdateServerCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new UpdateServerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateServerCommandInput} for command's `input` shape.
        * @see {@link UpdateServerCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class UpdateServerCommand extends $Command<UpdateServerCommandInput, UpdateServerCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: UpdateServerCommandInput;
            constructor(input: UpdateServerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateServerCommandInput, UpdateServerCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UpdateServerEngineAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateServerEngineAttributesRequest, UpdateServerEngineAttributesResponse } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0";
    import { OpsWorksCMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient";
    export interface UpdateServerEngineAttributesCommandInput extends UpdateServerEngineAttributesRequest {
    }
    export interface UpdateServerEngineAttributesCommandOutput extends UpdateServerEngineAttributesResponse, __MetadataBearer {
    }
    /**
        * <p>
        *       Updates engine-specific attributes on a specified server. The server
        *       enters the <code>MODIFYING</code> state when this operation
        *       is in progress. Only one update can occur at a time.
        *       You can use this command to reset a Chef server's public key (<code>CHEF_PIVOTAL_KEY</code>) or a Puppet server's
        *       admin password (<code>PUPPET_ADMIN_PASSWORD</code>).
        *     </p>
        *          <p>
        *       This operation is asynchronous.
        *     </p>
        *          <p>
        *       This operation can only be called for servers in <code>HEALTHY</code> or <code>UNHEALTHY</code> states. Otherwise, an <code>InvalidStateException</code> is raised.
        *       A <code>ResourceNotFoundException</code> is thrown when the server does not exist. A <code>ValidationException</code> is raised when parameters of the request are not valid.
        *     </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { OpsWorksCMClient, UpdateServerEngineAttributesCommand } from "@aws-sdk/client-opsworkscm"; // ES Modules import
        * // const { OpsWorksCMClient, UpdateServerEngineAttributesCommand } = require("@aws-sdk/client-opsworkscm"); // CommonJS import
        * const client = new OpsWorksCMClient(config);
        * const command = new UpdateServerEngineAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateServerEngineAttributesCommandInput} for command's `input` shape.
        * @see {@link UpdateServerEngineAttributesCommandOutput} for command's `response` shape.
        * @see {@link OpsWorksCMClientResolvedConfig | config} for OpsWorksCMClient's `config` shape.
        *
        */
    export class UpdateServerEngineAttributesCommand extends $Command<UpdateServerEngineAttributesCommandInput, UpdateServerEngineAttributesCommandOutput, OpsWorksCMClientResolvedConfig> {
            readonly input: UpdateServerEngineAttributesCommandInput;
            constructor(input: UpdateServerEngineAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpsWorksCMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateServerEngineAttributesCommandInput, UpdateServerEngineAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/OpsWorksCMClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateNodeCommandInput, AssociateNodeCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/AssociateNodeCommand";
    import { CreateBackupCommandInput, CreateBackupCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/CreateBackupCommand";
    import { CreateServerCommandInput, CreateServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/CreateServerCommand";
    import { DeleteBackupCommandInput, DeleteBackupCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DeleteBackupCommand";
    import { DeleteServerCommandInput, DeleteServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DeleteServerCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeBackupsCommandInput, DescribeBackupsCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeBackupsCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeEventsCommand";
    import { DescribeNodeAssociationStatusCommandInput, DescribeNodeAssociationStatusCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeNodeAssociationStatusCommand";
    import { DescribeServersCommandInput, DescribeServersCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DescribeServersCommand";
    import { DisassociateNodeCommandInput, DisassociateNodeCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/DisassociateNodeCommand";
    import { ExportServerEngineAttributeCommandInput, ExportServerEngineAttributeCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/ExportServerEngineAttributeCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/ListTagsForResourceCommand";
    import { RestoreServerCommandInput, RestoreServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/RestoreServerCommand";
    import { StartMaintenanceCommandInput, StartMaintenanceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/StartMaintenanceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UntagResourceCommand";
    import { UpdateServerCommandInput, UpdateServerCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UpdateServerCommand";
    import { UpdateServerEngineAttributesCommandInput, UpdateServerEngineAttributesCommandOutput } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/commands/UpdateServerEngineAttributesCommand";
    export type ServiceInputTypes = AssociateNodeCommandInput | CreateBackupCommandInput | CreateServerCommandInput | DeleteBackupCommandInput | DeleteServerCommandInput | DescribeAccountAttributesCommandInput | DescribeBackupsCommandInput | DescribeEventsCommandInput | DescribeNodeAssociationStatusCommandInput | DescribeServersCommandInput | DisassociateNodeCommandInput | ExportServerEngineAttributeCommandInput | ListTagsForResourceCommandInput | RestoreServerCommandInput | StartMaintenanceCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateServerCommandInput | UpdateServerEngineAttributesCommandInput;
    export type ServiceOutputTypes = AssociateNodeCommandOutput | CreateBackupCommandOutput | CreateServerCommandOutput | DeleteBackupCommandOutput | DeleteServerCommandOutput | DescribeAccountAttributesCommandOutput | DescribeBackupsCommandOutput | DescribeEventsCommandOutput | DescribeNodeAssociationStatusCommandOutput | DescribeServersCommandOutput | DisassociateNodeCommandOutput | ExportServerEngineAttributeCommandOutput | ListTagsForResourceCommandOutput | RestoreServerCommandOutput | StartMaintenanceCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateServerCommandOutput | UpdateServerEngineAttributesCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type OpsWorksCMClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of OpsWorksCMClient class constructor that set the region, credentials and other options.
        */
    export interface OpsWorksCMClientConfig extends OpsWorksCMClientConfigType {
    }
    type OpsWorksCMClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of OpsWorksCMClient class. This is resolved and normalized from the {@link OpsWorksCMClientConfig | constructor configuration interface}.
        */
    export interface OpsWorksCMClientResolvedConfig extends OpsWorksCMClientResolvedConfigType {
    }
    /**
        * <fullname>AWS OpsWorks CM</fullname>
        *          <p>AWS OpsWorks for configuration management (CM) is a service that runs and manages
        *       configuration management servers. You can use AWS OpsWorks CM to create and manage AWS
        *       OpsWorks for Chef Automate and AWS OpsWorks for Puppet Enterprise servers, and add or remove
        *       nodes for the servers to manage.</p>
        *          <p>
        *             <b>Glossary of terms</b>
        *          </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Server</b>: A configuration management server that can be
        *         highly-available. The configuration management server runs on
        *       an Amazon Elastic Compute Cloud (EC2) instance, and may use various other AWS services, such as Amazon Relational
        *       Database Service (RDS) and Elastic Load Balancing. A server is a generic abstraction over the configuration
        *       manager that you want to use, much like Amazon RDS. In AWS OpsWorks CM, you do not start
        *       or stop servers. After you create servers, they continue to run until they are deleted.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Engine</b>: The engine is the specific configuration manager
        *         that you want to use. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Backup</b>: This
        *       is an application-level backup of the data that the configuration manager
        *       stores. AWS OpsWorks CM
        *       creates an S3 bucket for backups when you launch the first
        *       server. A backup maintains a snapshot of a server's configuration-related
        *       attributes at the time the backup starts.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Events</b>:
        *       Events are always related to a server. Events are written
        *       during server creation, when health checks run, when backups
        *       are created, when system maintenance is performed, etc. When you delete a server, the server's events are
        *       also deleted.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Account attributes</b>:
        *       Every account has attributes that are assigned in the AWS OpsWorks CM
        *       database. These attributes store information about configuration limits (servers,
        *       backups, etc.) and your customer account.
        *       </p>
        *             </li>
        *          </ul>
        *          <p>
        *             <b>Endpoints</b>
        *          </p>
        *          <p>AWS OpsWorks CM supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Your servers
        *       can only be accessed or managed within the endpoint in which they are created.</p>
        *          <ul>
        *             <li>
        *                <p>opsworks-cm.us-east-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.us-east-2.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.us-west-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.us-west-2.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.ap-northeast-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.ap-southeast-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.ap-southeast-2.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.eu-central-1.amazonaws.com</p>
        *             </li>
        *             <li>
        *                <p>opsworks-cm.eu-west-1.amazonaws.com</p>
        *             </li>
        *          </ul>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/opsworks-service.html">AWS OpsWorks endpoints and quotas</a> in the AWS General Reference.</p>
        *          <p>
        *             <b>Throttling limits</b>
        *          </p>
        *          <p>All API operations allow for five requests per second with a burst of 10 requests per second.</p>
        */
    export class OpsWorksCMClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, OpsWorksCMClientResolvedConfig> {
            /**
                * The resolved configuration of OpsWorksCMClient class. This is resolved and normalized from the {@link OpsWorksCMClientConfig | constructor configuration interface}.
                */
            readonly config: OpsWorksCMClientResolvedConfig;
            constructor(configuration: OpsWorksCMClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { OpsWorksCMServiceException as __BaseException } from "@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/OpsWorksCMServiceException";
    /**
        * <p>Stores account attributes.
        *     </p>
        */
    export interface AccountAttribute {
            /**
                * <p>
                *       The attribute name. The following are supported attribute names.
                *     </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <i>ServerLimit:</i> The number of current servers/maximum number of servers allowed. By default, you can have a maximum of 10 servers.
                *       </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <i>ManualBackupLimit:</i> The number of current manual backups/maximum number of backups allowed. By default, you can have a maximum
                *         of 50 manual backups saved.
                *       </p>
                *             </li>
                *          </ul>
                */
            Name?: string;
            /**
                * <p>
                *       The maximum allowed value.
                *     </p>
                */
            Maximum?: number;
            /**
                * <p>
                *       The current usage, such as the current number of servers that are associated with the account.
                *     </p>
                */
            Used?: number;
    }
    export namespace AccountAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountAttribute) => any;
    }
    /**
        * <p>A name and value pair that is specific to the engine of the server.
        *     </p>
        */
    export interface EngineAttribute {
            /**
                * <p>The name of the engine attribute.
                *     </p>
                */
            Name?: string;
            /**
                * <p>The value of the engine attribute.
                *     </p>
                */
            Value?: string;
    }
    export namespace EngineAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EngineAttribute) => any;
    }
    export interface AssociateNodeRequest {
            /**
                * <p>The name of the server with which to associate the node.
                *     </p>
                */
            ServerName: string | undefined;
            /**
                * <p>The name of the node.
                *     </p>
                */
            NodeName: string | undefined;
            /**
                * <p>Engine attributes used for associating the node.
                *     </p>
                *          <p class="title">
                *             <b>Attributes accepted in a AssociateNode request for Chef</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CHEF_ORGANIZATION</code>: The Chef organization
                *           with which the node is associated. By default only one organization
                *           named <code>default</code> can exist.
                *       </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CHEF_NODE_PUBLIC_KEY</code>: A PEM-formatted public key. This key is required for the <code>chef-client</code> agent to access the Chef API.
                *     </p>
                *             </li>
                *          </ul>
                *          <p class="title">
                *             <b>Attributes accepted in a AssociateNode request for Puppet</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PUPPET_NODE_CSR</code>: A PEM-formatted certificate-signing request (CSR) that is created by the node.
                *     </p>
                *             </li>
                *          </ul>
                */
            EngineAttributes: EngineAttribute[] | undefined;
    }
    export namespace AssociateNodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateNodeRequest) => any;
    }
    export interface AssociateNodeResponse {
            /**
                * <p>Contains a token which can be passed to the <code>DescribeNodeAssociationStatus</code> API call to get the status of the association request.
                *     </p>
                */
            NodeAssociationStatusToken?: string;
    }
    export namespace AssociateNodeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateNodeResponse) => any;
    }
    /**
        * <p>The resource is in a state that does not allow you to perform a specified action.
        *     </p>
        */
    export class InvalidStateException extends __BaseException {
            readonly name: "InvalidStateException";
            readonly $fault: "client";
            /**
                * <p>Error or informational message that provides more detail if a resource is
                *       in a state that is not valid for performing a specified action.
                *     </p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidStateException, __BaseException>);
    }
    /**
        * <p>The requested resource does not exist, or access was denied.
        *     </p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>Error or informational message that can contain more detail about problems locating or accessing a resource.
                *     </p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>One or more of the provided request parameters are not valid.
        *     </p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p>Error or informational message that can contain more detail about a validation failure.
                *     </p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export enum BackupType {
            AUTOMATED = "AUTOMATED",
            MANUAL = "MANUAL"
    }
    export enum BackupStatus {
            DELETING = "DELETING",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            OK = "OK"
    }
    /**
        * <p>Describes a single backup.
        *     </p>
        */
    export interface Backup {
            /**
                * <p>The ARN of the backup.
                *     </p>
                */
            BackupArn?: string;
            /**
                * <p>
                *       The generated ID of the backup. Example: <code>myServerName-yyyyMMddHHmmssSSS</code>
                *          </p>
                */
            BackupId?: string;
            /**
                * <p>
                *       The backup type. Valid values are <code>automated</code> or <code>manual</code>.
                *     </p>
                */
            BackupType?: BackupType | string;
            /**
                * <p>
                *       The time stamp when the backup was created in the database. Example: <code>2016-07-29T13:38:47.520Z</code>
                *          </p>
                */
            CreatedAt?: Date;
            /**
                * <p>
                *       A user-provided description for a manual backup. This field is empty for automated backups.
                *     </p>
                */
            Description?: string;
            /**
                * <p>
                *       The engine type that is obtained from the server when the backup is created.
                *     </p>
                */
            Engine?: string;
            /**
                * <p>
                *       The engine model that is obtained from the server when the backup is created.
                *     </p>
                */
            EngineModel?: string;
            /**
                * <p>
                *       The engine version that is obtained from the server when the backup is created.
                *     </p>
                */
            EngineVersion?: string;
            /**
                * <p>
                *       The EC2 instance profile ARN that is obtained from the server when the backup is created. Because this value is stored,
                *       you are not required to provide the InstanceProfileArn again if you restore a backup.
                *     </p>
                */
            InstanceProfileArn?: string;
            /**
                * <p>
                *       The instance type that is obtained from the server when the backup is created.
                *     </p>
                */
            InstanceType?: string;
            /**
                * <p>
                *       The key pair that is obtained from the server when the backup is created.
                *     </p>
                */
            KeyPair?: string;
            /**
                * <p>
                *       The preferred backup period that is obtained from the server when the backup is created.
                *     </p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>
                *       The preferred maintenance period that is obtained from the server when the backup is created.
                *     </p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * @deprecated
                *
                * <p>
                *       This field is deprecated and is no longer used.
                *     </p>
                */
            S3DataSize?: number;
            /**
                * @deprecated
                *
                * <p>
                *       This field is deprecated and is no longer used.
                *     </p>
                */
            S3DataUrl?: string;
            /**
                * <p>
                *       The Amazon S3 URL of the backup's log file.
                *     </p>
                */
            S3LogUrl?: string;
            /**
                * <p>
                *       The security group IDs that are obtained from the server when the backup is created.
                *     </p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>
                *       The name of the server from which the backup was made.
                *     </p>
                */
            ServerName?: string;
            /**
                * <p>
                *       The service role ARN that is obtained from the server when the backup is created.
                *     </p>
                */
            ServiceRoleArn?: string;
            /**
                * <p>The status of a backup while in progress.
                *     </p>
                */
            Status?: BackupStatus | string;
            /**
                * <p>
                *       An informational message about backup status.
                *     </p>
                */
            StatusDescription?: string;
            /**
                * <p>
                *       The subnet IDs that are obtained from the server when the backup is created.
                *     </p>
                */
            SubnetIds?: string[];
            /**
                * <p>
                *       The version of AWS OpsWorks CM-specific tools that is obtained from the server when the backup is created.
                *     </p>
                */
            ToolsVersion?: string;
            /**
                * <p>
                *       The IAM user ARN of the requester for manual backups. This field is empty for automated backups.
                *     </p>
                */
            UserArn?: string;
    }
    export namespace Backup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Backup) => any;
    }
    /**
        * <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks for Chef Automate
        *       or AWS OpsWorks for Puppet Enterprise server. Leading and trailing white spaces are trimmed from both the key and value.
        *       A maximum of 50 user-applied tags is allowed for tag-supported AWS OpsWorks-CM resources.</p>
        */
    export interface Tag {
            /**
                * <p>A tag key, such as <code>Stage</code> or <code>Name</code>. A tag key cannot be empty. The key can be a maximum of 127 characters,
                *       and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
                *          </p>
                */
            Key: string | undefined;
            /**
                * <p>An optional tag value, such as <code>Production</code> or <code>test-owcm-server</code>. The value can be a maximum of 255 characters,
                *       and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
                *          </p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateBackupRequest {
            /**
                * <p>The name of the server that you want to back up.
                *     </p>
                */
            ServerName: string | undefined;
            /**
                * <p>
                *       A user-defined description of the backup.
                *     </p>
                */
            Description?: string;
            /**
                * <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks-CM server backup.</p>
                *          <ul>
                *             <li>
                *                <p>The key cannot be empty.</p>
                *             </li>
                *             <li>
                *                <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
                *             </li>
                *             <li>
                *                <p>A maximum of 50 user-applied tags is allowed for tag-supported AWS OpsWorks-CM resources.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Tag[];
    }
    export namespace CreateBackupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBackupRequest) => any;
    }
    export interface CreateBackupResponse {
            /**
                * <p>Backup created by request.</p>
                */
            Backup?: Backup;
    }
    export namespace CreateBackupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBackupResponse) => any;
    }
    /**
        * <p>The limit of servers or backups has been reached.
        *     </p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * <p>Error or informational message that the maximum allowed number of servers or backups has been exceeded.
                *     </p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface CreateServerRequest {
            /**
                * <p>
                *         Associate a public IP address with a server that you are launching. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
                *       </p>
                */
            AssociatePublicIpAddress?: boolean;
            /**
                * <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>. To access the server, create a CNAME DNS record in your preferred DNS service that points the custom
                *       domain to the endpoint that is generated when the server is created (the value of the CreateServer Endpoint attribute). You cannot access the server by using the
                *       generated <code>Endpoint</code> value if the server is using a custom domain. If you specify a custom domain, you must also specify values for <code>CustomCertificate</code>
                *       and <code>CustomPrivateKey</code>.</p>
                */
            CustomDomain?: string;
            /**
                * <p>A PEM-formatted HTTPS certificate. The value can be be a single, self-signed certificate, or a certificate chain. If you specify a
                *       custom certificate, you must also specify values for <code>CustomDomain</code> and <code>CustomPrivateKey</code>. The following are requirements for the <code>CustomCertificate</code> value:</p>
                *          <ul>
                *             <li>
                *                <p>You can provide either a self-signed, custom certificate, or the full certificate chain.</p>
                *             </li>
                *             <li>
                *                <p>The certificate must be a valid X509 certificate, or a certificate chain in PEM format.</p>
                *             </li>
                *             <li>
                *                <p>The certificate must be valid at the time of upload. A certificate can't be used before its validity period begins (the certificate's <code>NotBefore</code> date), or after it expires
                *         (the certificate's <code>NotAfter</code> date).</p>
                *             </li>
                *             <li>
                *                <p>The certificate’s common name or subject alternative names (SANs), if present, must match the value of <code>CustomDomain</code>.</p>
                *             </li>
                *             <li>
                *                <p>The certificate must match the value of <code>CustomPrivateKey</code>.</p>
                *             </li>
                *          </ul>
                */
            CustomCertificate?: string;
            /**
                * <p>A private key in PEM format for connecting to the server by using HTTPS. The private key must not be encrypted; it cannot be protected by a password or passphrase.
                *       If you specify a custom private key, you must also specify values for <code>CustomDomain</code> and <code>CustomCertificate</code>.</p>
                */
            CustomPrivateKey?: string;
            /**
                * <p>
                *         Enable or disable scheduled backups. Valid values are <code>true</code> or <code>false</code>. The default value is <code>true</code>.
                *       </p>
                */
            DisableAutomatedBackup?: boolean;
            /**
                * <p>
                *         The configuration management engine to use. Valid values include <code>ChefAutomate</code> and <code>Puppet</code>.
                *       </p>
                */
            Engine: string | undefined;
            /**
                * <p>
                *         The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef.
                *       </p>
                */
            EngineModel?: string;
            /**
                * <p>
                *         The major release version of the engine that you want to use. For a Chef server, the valid value for EngineVersion
                *         is currently <code>2</code>. For a Puppet server, valid values are <code>2019</code> or <code>2017</code>.
                *       </p>
                */
            EngineVersion?: string;
            /**
                * <p>Optional engine attributes on a specified server.
                *     </p>
                *          <p class="title">
                *             <b>Attributes accepted in a Chef createServer request:</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A
                *       base64-encoded RSA public key. The corresponding private key is required to
                *       access the Chef API. When no CHEF_AUTOMATE_PIVOTAL_KEY is set, a private key is
                *       generated and returned in the response.
                *       </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CHEF_AUTOMATE_ADMIN_PASSWORD</code>:
                *       The password for the administrative user in the Chef Automate web-based dashboard. The
                *       password length is a minimum of eight characters, and a maximum of 32. The
                *       password can contain letters, numbers, and special characters
                *       (!/@#$%^&+=_). The password must contain at least one lower case letter, one upper
                *       case letter, one number, and one special character. When no CHEF_AUTOMATE_ADMIN_PASSWORD is set, one is
                *       generated and returned in the response.</p>
                *             </li>
                *          </ul>
                *          <p class="title">
                *             <b>Attributes accepted in a Puppet createServer request:</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PUPPET_ADMIN_PASSWORD</code>: To work with the Puppet Enterprise console, a password must use ASCII characters.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PUPPET_R10K_REMOTE</code>: The r10k remote is the URL of your control repository
                *         (for example, ssh://git@your.git-repo.com:user/control-repo.git). Specifying an r10k remote opens TCP port 8170.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PUPPET_R10K_PRIVATE_KEY</code>: If you are using a private Git repository, add
                *         PUPPET_R10K_PRIVATE_KEY to specify a PEM-encoded private SSH key.</p>
                *             </li>
                *          </ul>
                */
            EngineAttributes?: EngineAttribute[];
            /**
                * <p>
                *         The number of automated backups that you want to keep. Whenever a new backup is created, AWS OpsWorks CM deletes the oldest backups if this number is exceeded.
                *         The default value is <code>1</code>.
                *       </p>
                */
            BackupRetentionCount?: number;
            /**
                * <p>
                *         The name of the server. The server name must be unique within your AWS account, within each region.
                *         Server names must start with a letter; then letters, numbers, or hyphens (-) are allowed, up to a maximum of 40 characters.
                *       </p>
                */
            ServerName: string | undefined;
            /**
                * <p>
                *         The ARN of the instance profile that your Amazon EC2
                *         instances use. Although the AWS OpsWorks console typically creates
                *         the instance profile for you, if you are using API commands instead, run the service-role-creation.yaml
                *         AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
                *         This template creates a CloudFormation stack that includes the instance profile you need.
                *
                *       </p>
                */
            InstanceProfileArn: string | undefined;
            /**
                * <p>
                *         The Amazon EC2 instance type to use. For example, <code>m5.large</code>.
                *       </p>
                */
            InstanceType: string | undefined;
            /**
                * <p>
                *         The Amazon EC2 key pair to set for the instance. This parameter is optional; if desired, you may specify this parameter to connect to your instances by using SSH.
                *       </p>
                */
            KeyPair?: string;
            /**
                * <p>
                *       The start time for a one-hour period each week during which AWS OpsWorks CM performs maintenance on the instance.
                *       Valid values must be specified in the following format: <code>DDD:HH:MM</code>. <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC).
                *       The default value is a random one-hour period on Tuesday, Wednesday, or Friday. See <code>TimeWindowDefinition</code> for more information.
                *     </p>
                *          <p>
                *             <b>Example:</b>
                *             <code>Mon:08:00</code>,
                *       which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)
                *     </p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>
                *       The start time for a one-hour period during which AWS OpsWorks CM backs up application-level data on your server
                *       if automated backups are enabled. Valid values must be specified in one of the following formats:
                *     </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>HH:MM</code> for daily backups</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DDD:HH:MM</code> for weekly backups</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <code>MM</code> must be specified as <code>00</code>. The specified time is in coordinated universal time (UTC). The default value is a random, daily start time.</p>
                *          <p>
                *             <b>Example:</b>
                *             <code>08:00</code>, which represents a daily start time of 08:00 UTC.</p>
                *          <p>
                *             <b>Example:</b>
                *             <code>Mon:08:00</code>, which represents a start time of every Monday at 08:00 UTC. (8:00 a.m.)</p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>
                *       A list of security group IDs to attach to the Amazon EC2 instance. If you add this parameter, the specified security groups
                *       must be within the VPC that is specified by <code>SubnetIds</code>.
                *     </p>
                *          <p>
                *       If you do not specify this parameter, AWS OpsWorks CM creates one new security group that uses TCP ports 22 and 443, open to
                *       0.0.0.0/0 (everyone).
                *     </p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>
                *       The service role that the AWS OpsWorks CM service backend uses to work with your account. Although the AWS OpsWorks management console typically creates
                *       the service role for you, if you are using the AWS CLI or API commands,
                *       run the service-role-creation.yaml AWS CloudFormation template, located at https://s3.amazonaws.com/opsworks-cm-us-east-1-prod-default-assets/misc/opsworks-cm-roles.yaml.
                *       This template creates a CloudFormation stack that includes the service role and instance profile that you need.
                *     </p>
                */
            ServiceRoleArn: string | undefined;
            /**
                * <p>
                *       The IDs of subnets in which to launch the server EC2 instance.
                *     </p>
                *          <p>
                *       Amazon EC2-Classic customers: This field is required. All servers must run within a VPC. The VPC must have "Auto Assign Public IP" enabled.
                *     </p>
                *          <p>
                *       EC2-VPC customers: This field is optional. If you do not specify subnet IDs, your EC2 instances are created in a default subnet that is selected by Amazon EC2. If you specify subnet IDs, the VPC must have "Auto Assign Public IP" enabled.
                *     </p>
                *          <p>For more information about supported Amazon EC2 platforms, see
                *       <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported Platforms</a>.</p>
                */
            SubnetIds?: string[];
            /**
                * <p>A map that contains tag keys and tag values to attach to an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server.</p>
                *          <ul>
                *             <li>
                *                <p>The key cannot be empty.</p>
                *             </li>
                *             <li>
                *                <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : / @</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
                *             </li>
                *             <li>
                *                <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Tag[];
            /**
                * <p>
                *       If you specify this field, AWS OpsWorks CM creates the server by using the backup represented by BackupId.
                *     </p>
                */
            BackupId?: string;
    }
    export namespace CreateServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateServerRequest) => any;
    }
    export enum MaintenanceStatus {
            FAILED = "FAILED",
            SUCCESS = "SUCCESS"
    }
    export enum ServerStatus {
            BACKING_UP = "BACKING_UP",
            CONNECTION_LOST = "CONNECTION_LOST",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            HEALTHY = "HEALTHY",
            MODIFYING = "MODIFYING",
            RESTORING = "RESTORING",
            RUNNING = "RUNNING",
            SETUP = "SETUP",
            TERMINATED = "TERMINATED",
            UNDER_MAINTENANCE = "UNDER_MAINTENANCE",
            UNHEALTHY = "UNHEALTHY"
    }
    /**
        * <p>Describes a configuration management server.
        *     </p>
        */
    export interface Server {
            /**
                * <p>Associate a public IP address with a server that you are launching.
                *     </p>
                */
            AssociatePublicIpAddress?: boolean;
            /**
                * <p>The number of automated backups to keep.
                *     </p>
                */
            BackupRetentionCount?: number;
            /**
                * <p>The name of the server.
                *     </p>
                */
            ServerName?: string;
            /**
                * <p>Time stamp of server creation. Example <code>2016-07-29T13:38:47.520Z</code>
                *          </p>
                */
            CreatedAt?: Date;
            /**
                * <p>The ARN of the CloudFormation stack that was used to create the server.
                *     </p>
                */
            CloudFormationStackArn?: string;
            /**
                * <p>An optional public endpoint of a server, such as <code>https://aws.my-company.com</code>.
                *       You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.</p>
                */
            CustomDomain?: string;
            /**
                * <p>Disables automated backups. The number of stored backups is dependent on the value of PreferredBackupCount.
                *     </p>
                */
            DisableAutomatedBackup?: boolean;
            /**
                * <p>
                *       A DNS name that can be used to access the engine. Example: <code>myserver-asdfghjkl.us-east-1.opsworks.io</code>.
                *       You cannot access the server by using the <code>Endpoint</code> value if the server has a <code>CustomDomain</code> specified.
                *     </p>
                */
            Endpoint?: string;
            /**
                * <p>The engine type of the server. Valid values in this release include <code>ChefAutomate</code> and <code>Puppet</code>.
                *     </p>
                */
            Engine?: string;
            /**
                * <p>The engine model of the server. Valid values in this release include <code>Monolithic</code> for Puppet and <code>Single</code> for Chef.
                *     </p>
                */
            EngineModel?: string;
            /**
                * <p>The response of a createServer() request returns the master
                *     credential to access the server in EngineAttributes. These
                *     credentials are not stored by AWS OpsWorks CM; they are returned only as part of the result of createServer().
                *     </p>
                *          <p class="title">
                *             <b>Attributes returned in a createServer response for Chef</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CHEF_AUTOMATE_PIVOTAL_KEY</code>: A base64-encoded RSA private key that is
                *       generated by AWS OpsWorks for Chef Automate. This private key is required to access
                *       the Chef API.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CHEF_STARTER_KIT</code>: A base64-encoded ZIP file.
                *       The ZIP file contains a Chef starter kit, which includes a README, a
                *       configuration file, and the required RSA private key. Save this file, unzip it,
                *       and then change to the directory where you've unzipped the file contents.
                *       From this directory, you can run Knife commands.</p>
                *             </li>
                *          </ul>
                *          <p class="title">
                *             <b>Attributes returned in a createServer response for Puppet</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PUPPET_STARTER_KIT</code>: A base64-encoded ZIP file.
                *         The ZIP file contains a Puppet starter kit, including a README and a
                *         required private key. Save this file, unzip it,
                *         and then change to the directory where you've unzipped the file contents.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PUPPET_ADMIN_PASSWORD</code>: An administrator password that you can use to sign in to the Puppet Enterprise console after the server is online.</p>
                *             </li>
                *          </ul>
                */
            EngineAttributes?: EngineAttribute[];
            /**
                * <p>The engine version of the server. For a Chef server, the valid value for EngineVersion is
                *       currently <code>2</code>. For a Puppet server, specify either <code>2019</code> or <code>2017</code>.
                *     </p>
                */
            EngineVersion?: string;
            /**
                * <p>The instance profile ARN of the server.
                *     </p>
                */
            InstanceProfileArn?: string;
            /**
                * <p>
                *       The instance type for the server, as specified in the CloudFormation stack. This might not be the same instance type that is shown in the EC2 console.
                *     </p>
                */
            InstanceType?: string;
            /**
                * <p>The key pair associated with the server.
                *     </p>
                */
            KeyPair?: string;
            /**
                * <p>The status of the most recent server maintenance run. Shows <code>SUCCESS</code> or <code>FAILED</code>.
                *     </p>
                */
            MaintenanceStatus?: MaintenanceStatus | string;
            /**
                * <p>The preferred maintenance period specified for the server.
                *     </p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The preferred backup period specified for the server.
                *     </p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>
                *       The security group IDs for the server, as specified in the CloudFormation stack.
                *       These might not be the same security groups that are shown in the EC2 console.
                *     </p>
                */
            SecurityGroupIds?: string[];
            /**
                * <p>The service role ARN used to create the server.
                *     </p>
                */
            ServiceRoleArn?: string;
            /**
                * <p>
                *       The server's status. This field displays the states of actions in progress, such as creating, running, or backing up the server,
                *       as well as the server's health state.
                *     </p>
                */
            Status?: ServerStatus | string;
            /**
                * <p>
                *       Depending on the server status, this field has either a human-readable
                *       message (such as a create or backup error), or an escaped block of JSON (used for health check results).
                *     </p>
                */
            StatusReason?: string;
            /**
                * <p>
                *       The subnet IDs specified in a CreateServer request.
                *     </p>
                */
            SubnetIds?: string[];
            /**
                * <p>The ARN of the server.
                *     </p>
                */
            ServerArn?: string;
    }
    export namespace Server {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Server) => any;
    }
    export interface CreateServerResponse {
            /**
                * <p>The server that is created by the request.
                *     </p>
                */
            Server?: Server;
    }
    export namespace CreateServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateServerResponse) => any;
    }
    /**
        * <p>The requested resource cannot be created because it already exists.
        *     </p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            /**
                * <p>Error or informational message in response to a CreateServer request that a resource cannot be created because it already exists.
                *     </p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    export interface DeleteBackupRequest {
            /**
                * <p>The ID of the backup to delete. Run the DescribeBackups command to get a list of backup IDs.
                *       Backup IDs are in the format <code>ServerName-yyyyMMddHHmmssSSS</code>.
                *     </p>
                */
            BackupId: string | undefined;
    }
    export namespace DeleteBackupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBackupRequest) => any;
    }
    export interface DeleteBackupResponse {
    }
    export namespace DeleteBackupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBackupResponse) => any;
    }
    export interface DeleteServerRequest {
            /**
                * <p>The ID of the server to delete.</p>
                */
            ServerName: string | undefined;
    }
    export namespace DeleteServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServerRequest) => any;
    }
    export interface DeleteServerResponse {
    }
    export namespace DeleteServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServerResponse) => any;
    }
    export interface DescribeAccountAttributesRequest {
    }
    export namespace DescribeAccountAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountAttributesRequest) => any;
    }
    export interface DescribeAccountAttributesResponse {
            /**
                * <p>
                *       The attributes that are currently set for the account.
                *     </p>
                */
            Attributes?: AccountAttribute[];
    }
    export namespace DescribeAccountAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountAttributesResponse) => any;
    }
    export interface DescribeBackupsRequest {
            /**
                * <p>Describes a single backup.
                *     </p>
                */
            BackupId?: string;
            /**
                * <p>Returns backups for the server with the specified ServerName.
                *     </p>
                */
            ServerName?: string;
            /**
                * <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
                */
            NextToken?: string;
            /**
                * <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeBackupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBackupsRequest) => any;
    }
    export interface DescribeBackupsResponse {
            /**
                * <p>Contains the response to a <code>DescribeBackups</code> request.
                *     </p>
                */
            Backups?: Backup[];
            /**
                * <p>This is not currently implemented for <code>DescribeBackups</code> requests.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeBackupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeBackupsResponse) => any;
    }
    /**
        * <p>This occurs when the provided nextToken is not valid.
        *     </p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            /**
                * <p>Error or informational message that can contain more detail about a nextToken failure.
                *     </p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface DescribeEventsRequest {
            /**
                * <p>The name of the server for which you want to view events.</p>
                */
            ServerName: string | undefined;
            /**
                * <p>NextToken is a string that is returned in some command responses. It indicates that
                *       not all entries have been returned, and that you must run at least one more request to get remaining
                *       items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous
                *       results as the value of the <code>nextToken</code> parameter. If there are no more results,
                *       the response object's <code>nextToken</code> parameter value is <code>null</code>.
                *       Setting a <code>nextToken</code> value that was not returned in
                *       your previous results causes an <code>InvalidNextTokenException</code> to occur.
                *     </p>
                */
            NextToken?: string;
            /**
                * <p>To receive a paginated response, use this parameter to specify the maximum number
                *       of results to be returned with a single call. If the number of available results exceeds
                *       this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
                *       request parameter to get the next set of results.
                *     </p>
                */
            MaxResults?: number;
    }
    export namespace DescribeEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsRequest) => any;
    }
    /**
        * <p>An event that is related to the server, such as the start of maintenance or backup.
        *     </p>
        */
    export interface ServerEvent {
            /**
                * <p>The time when the event occurred.
                *     </p>
                */
            CreatedAt?: Date;
            /**
                * <p>The name of the server on or for which the event occurred.
                *     </p>
                */
            ServerName?: string;
            /**
                * <p>A human-readable informational or status message.</p>
                */
            Message?: string;
            /**
                * <p>The Amazon S3 URL of the event's log file.</p>
                */
            LogUrl?: string;
    }
    export namespace ServerEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerEvent) => any;
    }
    export interface DescribeEventsResponse {
            /**
                * <p>Contains the response to a <code>DescribeEvents</code> request.
                *     </p>
                */
            ServerEvents?: ServerEvent[];
            /**
                * <p>NextToken is a string that is returned in some command responses. It indicates that
                *       not all entries have been returned, and that you must run at least one more request to get remaining
                *       items. To get remaining results, call <code>DescribeEvents</code> again, and assign the token from the previous
                *       results as the value of the <code>nextToken</code> parameter. If there are no more results,
                *       the response object's <code>nextToken</code> parameter value is <code>null</code>.
                *       Setting a <code>nextToken</code> value that was not returned in
                *       your previous results causes an <code>InvalidNextTokenException</code> to occur.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace DescribeEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsResponse) => any;
    }
    export interface DescribeNodeAssociationStatusRequest {
            /**
                * <p>The token returned in either the AssociateNodeResponse or the DisassociateNodeResponse.
                *     </p>
                */
            NodeAssociationStatusToken: string | undefined;
            /**
                * <p>The name of the server from which to disassociate the node.
                *     </p>
                */
            ServerName: string | undefined;
    }
    export namespace DescribeNodeAssociationStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNodeAssociationStatusRequest) => any;
    }
    export enum NodeAssociationStatus {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            SUCCESS = "SUCCESS"
    }
    export interface DescribeNodeAssociationStatusResponse {
            /**
                * <p>The status of the association or disassociation request.
                *     </p>
                *          <p class="title">
                *             <b>Possible values:</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SUCCESS</code>: The association or disassociation succeeded.
                *       </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>FAILED</code>: The association or disassociation failed.
                *       </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>IN_PROGRESS</code>: The association or disassociation is still in progress.
                *       </p>
                *             </li>
                *          </ul>
                */
            NodeAssociationStatus?: NodeAssociationStatus | string;
            /**
                * <p>Attributes specific to the node association.
                *       In Puppet, the attibute PUPPET_NODE_CERT contains the signed certificate (the result of the CSR).
                *     </p>
                */
            EngineAttributes?: EngineAttribute[];
    }
    export namespace DescribeNodeAssociationStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNodeAssociationStatusResponse) => any;
    }
    export interface DescribeServersRequest {
            /**
                * <p>Describes the server with the specified ServerName.</p>
                */
            ServerName?: string;
            /**
                * <p>This is not currently implemented for <code>DescribeServers</code> requests.
                *     </p>
                */
            NextToken?: string;
            /**
                * <p>This is not currently implemented for <code>DescribeServers</code> requests.
                *     </p>
                */
            MaxResults?: number;
    }
    export namespace DescribeServersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeServersRequest) => any;
    }
    export interface DescribeServersResponse {
            /**
                * <p>Contains the response to a <code>DescribeServers</code> request.</p>
                *          <p>
                *             <i>For Chef Automate servers:</i>  If <code>DescribeServersResponse$Servers$EngineAttributes</code> includes
                *       CHEF_MAJOR_UPGRADE_AVAILABLE, you can upgrade the Chef Automate server to Chef Automate 2. To be eligible for upgrade, a server running
                *       Chef Automate 1 must have had at least one successful maintenance run after November 1, 2019.</p>
                *          <p>
                *             <i>For Puppet servers:</i>
                *             <code>DescribeServersResponse$Servers$EngineAttributes</code> contains
                *       the following two responses:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PUPPET_API_CA_CERT</code>, the PEM-encoded CA certificate that is used by the Puppet API over TCP port number 8140.
                *         The CA certificate is also used to sign node certificates.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PUPPET_API_CRL</code>, a certificate revocation list. The certificate revocation list is for internal
                *         maintenance purposes only. For more information about the Puppet certificate revocation list, see
                *         <a href="https://puppet.com/docs/puppet/5.5/man/certificate_revocation_list.html">Man Page: puppet certificate_revocation_list</a> in the Puppet documentation.</p>
                *             </li>
                *          </ul>
                */
            Servers?: Server[];
            /**
                * <p>This is not currently implemented for <code>DescribeServers</code> requests.
                *     </p>
                */
            NextToken?: string;
    }
    export namespace DescribeServersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeServersResponse) => any;
    }
    export interface DisassociateNodeRequest {
            /**
                * <p>The name of the server from which to disassociate the node.
                *     </p>
                */
            ServerName: string | undefined;
            /**
                * <p>The name of the client node.
                *     </p>
                */
            NodeName: string | undefined;
            /**
                * <p>Engine attributes that are used for disassociating the node. No attributes are required for Puppet.
                *     </p>
                *          <p class="title">
                *             <b>Attributes required in a DisassociateNode request for Chef</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CHEF_ORGANIZATION</code>: The Chef organization
                *           with which the node was associated. By default only one organization
                *           named <code>default</code> can exist.
                *       </p>
                *             </li>
                *          </ul>
                */
            EngineAttributes?: EngineAttribute[];
    }
    export namespace DisassociateNodeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateNodeRequest) => any;
    }
    export interface DisassociateNodeResponse {
            /**
                * <p>Contains a token which can be passed to the
                *       <code>DescribeNodeAssociationStatus</code> API call to get the status of
                *       the disassociation request.
                *     </p>
                */
            NodeAssociationStatusToken?: string;
    }
    export namespace DisassociateNodeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateNodeResponse) => any;
    }
    export interface ExportServerEngineAttributeRequest {
            /**
                * <p>The name of the export attribute. Currently, the supported export attribute is <code>Userdata</code>.
                *       This exports a user data script that includes parameters and values provided in the <code>InputAttributes</code> list.</p>
                */
            ExportAttributeName: string | undefined;
            /**
                * <p>The name of the server from which you are exporting the attribute.</p>
                */
            ServerName: string | undefined;
            /**
                * <p>The list of engine attributes. The list type is <code>EngineAttribute</code>. An <code>EngineAttribute</code> list item
                *       is a pair that includes an attribute name and its value. For the <code>Userdata</code> ExportAttributeName, the following are
                *       supported engine attribute names.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>RunList</b> In Chef, a list of roles or recipes that are run in the specified order.
                *         In Puppet, this parameter is ignored.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>OrganizationName</b> In Chef, an organization name. AWS OpsWorks for Chef Automate
                *         always creates the organization <code>default</code>. In Puppet, this parameter is ignored.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>NodeEnvironment</b> In Chef, a node environment (for example, development, staging, or one-box).
                *         In Puppet, this parameter is ignored.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>NodeClientVersion</b> In Chef, the version of the Chef engine (three numbers separated
                *         by dots, such as 13.8.5). If this attribute is empty, OpsWorks for Chef Automate uses the most current version. In Puppet,
                *         this parameter is ignored.</p>
                *             </li>
                *          </ul>
                */
            InputAttributes?: EngineAttribute[];
    }
    export namespace ExportServerEngineAttributeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportServerEngineAttributeRequest) => any;
    }
    export interface ExportServerEngineAttributeResponse {
            /**
                * <p>The requested engine attribute pair with attribute name and value.</p>
                */
            EngineAttribute?: EngineAttribute;
            /**
                * <p>The server name used in the request.</p>
                */
            ServerName?: string;
    }
    export namespace ExportServerEngineAttributeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportServerEngineAttributeResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Number (ARN) of an AWS OpsWorks for Chef Automate or AWS OpsWorks for Puppet Enterprise server for which you want to show applied tags. For example,
                *         <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>NextToken is a string that is returned in some command responses. It indicates that
                *         not all entries have been returned, and that you must run at least one more request to get remaining
                *         items. To get remaining results, call <code>ListTagsForResource</code> again, and assign the token from the previous
                *         results as the value of the <code>nextToken</code> parameter. If there are no more results,
                *         the response object's <code>nextToken</code> parameter value is <code>null</code>.
                *         Setting a <code>nextToken</code> value that was not returned in
                *         your previous results causes an <code>InvalidNextTokenException</code> to occur.</p>
                */
            NextToken?: string;
            /**
                * <p>To receive a paginated response, use this parameter to specify the maximum number
                *         of results to be returned with a single call. If the number of available results exceeds
                *         this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code>
                *         request parameter to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>Tags that have been applied to the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A token that you can use as the value of <code>NextToken</code> in subsequent calls to the API to show more results.</p>
                */
            NextToken?: string;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface RestoreServerRequest {
            /**
                * <p> The ID of the backup that you want to use to restore a server.
                *     </p>
                */
            BackupId: string | undefined;
            /**
                * <p> The name of the server that you want to restore.
                *     </p>
                */
            ServerName: string | undefined;
            /**
                * <p> The type of instance to restore. Valid values must be specified in the following format: <code>^([cm][34]|t2).*</code>
                *       For example, <code>m5.large</code>. Valid values are <code>m5.large</code>, <code>r5.xlarge</code>, and <code>r5.2xlarge</code>. If you do not specify this parameter,
                *       RestoreServer uses the instance type from the specified backup.
                *     </p>
                */
            InstanceType?: string;
            /**
                * <p> The name of the key pair to set on the new EC2 instance. This can be helpful
                *       if the administrator no longer has the SSH key.
                *     </p>
                */
            KeyPair?: string;
    }
    export namespace RestoreServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreServerRequest) => any;
    }
    export interface RestoreServerResponse {
            /**
                * <p>Describes a configuration management server.
                *     </p>
                */
            Server?: Server;
    }
    export namespace RestoreServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreServerResponse) => any;
    }
    export interface StartMaintenanceRequest {
            /**
                * <p>The name of the server on which to run maintenance.
                *     </p>
                */
            ServerName: string | undefined;
            /**
                * <p>Engine attributes that are specific to the server on which you want to run maintenance.</p>
                *          <p class="title">
                *             <b>Attributes accepted in a StartMaintenance request for Chef</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CHEF_MAJOR_UPGRADE</code>: If a Chef Automate server is eligible for upgrade to Chef Automate 2,
                *         add this engine attribute to a <code>StartMaintenance</code> request and set the value to <code>true</code> to upgrade the server to Chef Automate 2. For more information, see
                *         <a href="https://docs.aws.amazon.com/opsworks/latest/userguide/opscm-a2upgrade.html">Upgrade an AWS OpsWorks for Chef Automate Server to Chef Automate 2</a>.
                *       </p>
                *             </li>
                *          </ul>
                */
            EngineAttributes?: EngineAttribute[];
    }
    export namespace StartMaintenanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMaintenanceRequest) => any;
    }
    export interface StartMaintenanceResponse {
            /**
                * <p>Contains the response to a <code>StartMaintenance</code> request.
                *     </p>
                */
            Server?: Server;
    }
    export namespace StartMaintenanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartMaintenanceResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Number (ARN) of a resource to which you want to apply tags. For example,
                *       <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>A map that contains tag keys and tag values to attach to AWS OpsWorks-CM servers or backups.</p>
                *          <ul>
                *             <li>
                *                <p>The key cannot be empty.</p>
                *             </li>
                *             <li>
                *                <p>The key can be a maximum of 127 characters, and can contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>The value can be a maximum 255 characters, and contain only Unicode letters, numbers, or separators, or the following special characters: <code>+ - = . _ : /</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Leading and trailing white spaces are trimmed from both the key and value.</p>
                *             </li>
                *             <li>
                *                <p>A maximum of 50 user-applied tags is allowed for any AWS OpsWorks-CM server or backup.</p>
                *             </li>
                *          </ul>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Number (ARN) of a resource from which you want to remove tags. For example,
                *       <code>arn:aws:opsworks-cm:us-west-2:123456789012:server/test-owcm-server/EXAMPLE-66b0-4196-8274-d1a2bEXAMPLE</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The keys of tags that you want to remove.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateServerRequest {
            /**
                * <p>Setting DisableAutomatedBackup to <code>true</code> disables automated or scheduled backups. Automated backups are enabled by default.
                *     </p>
                */
            DisableAutomatedBackup?: boolean;
            /**
                * <p>Sets the number of automated backups that you want to keep.
                *       </p>
                */
            BackupRetentionCount?: number;
            /**
                * <p>The name of the server to update.
                *     </p>
                */
            ServerName: string | undefined;
            /**
                * <p>
                *             <code>DDD:HH:MM</code> (weekly start time) or
                *     <code>HH:MM</code> (daily start time).
                *     </p>
                *          <p>
                *       Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
                *       <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>
                *             <code>DDD:HH:MM</code> (weekly start time) or
                *     <code>HH:MM</code> (daily start time).
                *     </p>
                *          <p>
                *       Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>,
                *       <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>
                */
            PreferredBackupWindow?: string;
    }
    export namespace UpdateServerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServerRequest) => any;
    }
    export interface UpdateServerResponse {
            /**
                * <p>Contains the response to a <code>UpdateServer</code> request.
                *     </p>
                */
            Server?: Server;
    }
    export namespace UpdateServerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServerResponse) => any;
    }
    export interface UpdateServerEngineAttributesRequest {
            /**
                * <p>The name of the server to update.
                *     </p>
                */
            ServerName: string | undefined;
            /**
                * <p>The name of the engine attribute to update.
                *     </p>
                */
            AttributeName: string | undefined;
            /**
                * <p>The value to set for the attribute.
                *     </p>
                */
            AttributeValue?: string;
    }
    export namespace UpdateServerEngineAttributesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServerEngineAttributesRequest) => any;
    }
    export interface UpdateServerEngineAttributesResponse {
            /**
                * <p>Contains the response to an <code>UpdateServerEngineAttributes</code> request.
                *     </p>
                */
            Server?: Server;
    }
    export namespace UpdateServerEngineAttributesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServerEngineAttributesResponse) => any;
    }
}

declare module '@aws-sdk/client-opsworkscm/node_modules/@aws-sdk/client-opsworkscm/dist-types/models/OpsWorksCMServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from OpsWorksCM service.
        */
    export class OpsWorksCMServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

