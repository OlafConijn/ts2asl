// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-robomaker' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchDeleteWorldsCommandInput, BatchDeleteWorldsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/BatchDeleteWorldsCommand";
    import { BatchDescribeSimulationJobCommandInput, BatchDescribeSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/BatchDescribeSimulationJobCommand";
    import { CancelDeploymentJobCommandInput, CancelDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelDeploymentJobCommand";
    import { CancelSimulationJobBatchCommandInput, CancelSimulationJobBatchCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelSimulationJobBatchCommand";
    import { CancelSimulationJobCommandInput, CancelSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelSimulationJobCommand";
    import { CancelWorldExportJobCommandInput, CancelWorldExportJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelWorldExportJobCommand";
    import { CancelWorldGenerationJobCommandInput, CancelWorldGenerationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelWorldGenerationJobCommand";
    import { CreateDeploymentJobCommandInput, CreateDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateDeploymentJobCommand";
    import { CreateFleetCommandInput, CreateFleetCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateFleetCommand";
    import { CreateRobotApplicationCommandInput, CreateRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotApplicationCommand";
    import { CreateRobotApplicationVersionCommandInput, CreateRobotApplicationVersionCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotApplicationVersionCommand";
    import { CreateRobotCommandInput, CreateRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotCommand";
    import { CreateSimulationApplicationCommandInput, CreateSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationApplicationCommand";
    import { CreateSimulationApplicationVersionCommandInput, CreateSimulationApplicationVersionCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationApplicationVersionCommand";
    import { CreateSimulationJobCommandInput, CreateSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationJobCommand";
    import { CreateWorldExportJobCommandInput, CreateWorldExportJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldExportJobCommand";
    import { CreateWorldGenerationJobCommandInput, CreateWorldGenerationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldGenerationJobCommand";
    import { CreateWorldTemplateCommandInput, CreateWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldTemplateCommand";
    import { DeleteFleetCommandInput, DeleteFleetCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteFleetCommand";
    import { DeleteRobotApplicationCommandInput, DeleteRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteRobotApplicationCommand";
    import { DeleteRobotCommandInput, DeleteRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteRobotCommand";
    import { DeleteSimulationApplicationCommandInput, DeleteSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteSimulationApplicationCommand";
    import { DeleteWorldTemplateCommandInput, DeleteWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteWorldTemplateCommand";
    import { DeregisterRobotCommandInput, DeregisterRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeregisterRobotCommand";
    import { DescribeDeploymentJobCommandInput, DescribeDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeDeploymentJobCommand";
    import { DescribeFleetCommandInput, DescribeFleetCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeFleetCommand";
    import { DescribeRobotApplicationCommandInput, DescribeRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeRobotApplicationCommand";
    import { DescribeRobotCommandInput, DescribeRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeRobotCommand";
    import { DescribeSimulationApplicationCommandInput, DescribeSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationApplicationCommand";
    import { DescribeSimulationJobBatchCommandInput, DescribeSimulationJobBatchCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationJobBatchCommand";
    import { DescribeSimulationJobCommandInput, DescribeSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationJobCommand";
    import { DescribeWorldCommandInput, DescribeWorldCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldCommand";
    import { DescribeWorldExportJobCommandInput, DescribeWorldExportJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldExportJobCommand";
    import { DescribeWorldGenerationJobCommandInput, DescribeWorldGenerationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldGenerationJobCommand";
    import { DescribeWorldTemplateCommandInput, DescribeWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldTemplateCommand";
    import { GetWorldTemplateBodyCommandInput, GetWorldTemplateBodyCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/GetWorldTemplateBodyCommand";
    import { ListDeploymentJobsCommandInput, ListDeploymentJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListDeploymentJobsCommand";
    import { ListFleetsCommandInput, ListFleetsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListFleetsCommand";
    import { ListRobotApplicationsCommandInput, ListRobotApplicationsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListRobotApplicationsCommand";
    import { ListRobotsCommandInput, ListRobotsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListRobotsCommand";
    import { ListSimulationApplicationsCommandInput, ListSimulationApplicationsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationApplicationsCommand";
    import { ListSimulationJobBatchesCommandInput, ListSimulationJobBatchesCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationJobBatchesCommand";
    import { ListSimulationJobsCommandInput, ListSimulationJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationJobsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorldExportJobsCommandInput, ListWorldExportJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldExportJobsCommand";
    import { ListWorldGenerationJobsCommandInput, ListWorldGenerationJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldGenerationJobsCommand";
    import { ListWorldsCommandInput, ListWorldsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldsCommand";
    import { ListWorldTemplatesCommandInput, ListWorldTemplatesCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldTemplatesCommand";
    import { RegisterRobotCommandInput, RegisterRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/RegisterRobotCommand";
    import { RestartSimulationJobCommandInput, RestartSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/RestartSimulationJobCommand";
    import { StartSimulationJobBatchCommandInput, StartSimulationJobBatchCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/StartSimulationJobBatchCommand";
    import { SyncDeploymentJobCommandInput, SyncDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/SyncDeploymentJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UntagResourceCommand";
    import { UpdateRobotApplicationCommandInput, UpdateRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateRobotApplicationCommand";
    import { UpdateSimulationApplicationCommandInput, UpdateSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateSimulationApplicationCommand";
    import { UpdateWorldTemplateCommandInput, UpdateWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateWorldTemplateCommand";
    import { RoboMakerClient } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    /**
        * <p>This section provides documentation for the AWS RoboMaker API operations.</p>
        */
    export class RoboMaker extends RoboMakerClient {
            /**
                * <p>Deletes one or more worlds in a batch operation.</p>
                */
            batchDeleteWorlds(args: BatchDeleteWorldsCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteWorldsCommandOutput>;
            batchDeleteWorlds(args: BatchDeleteWorldsCommandInput, cb: (err: any, data?: BatchDeleteWorldsCommandOutput) => void): void;
            batchDeleteWorlds(args: BatchDeleteWorldsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteWorldsCommandOutput) => void): void;
            /**
                * <p>Describes one or more simulation jobs.</p>
                */
            batchDescribeSimulationJob(args: BatchDescribeSimulationJobCommandInput, options?: __HttpHandlerOptions): Promise<BatchDescribeSimulationJobCommandOutput>;
            batchDescribeSimulationJob(args: BatchDescribeSimulationJobCommandInput, cb: (err: any, data?: BatchDescribeSimulationJobCommandOutput) => void): void;
            batchDescribeSimulationJob(args: BatchDescribeSimulationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDescribeSimulationJobCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Cancels the specified deployment job.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            cancelDeploymentJob(args: CancelDeploymentJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelDeploymentJobCommandOutput>;
            cancelDeploymentJob(args: CancelDeploymentJobCommandInput, cb: (err: any, data?: CancelDeploymentJobCommandOutput) => void): void;
            cancelDeploymentJob(args: CancelDeploymentJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelDeploymentJobCommandOutput) => void): void;
            /**
                * <p>Cancels the specified simulation job.</p>
                */
            cancelSimulationJob(args: CancelSimulationJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelSimulationJobCommandOutput>;
            cancelSimulationJob(args: CancelSimulationJobCommandInput, cb: (err: any, data?: CancelSimulationJobCommandOutput) => void): void;
            cancelSimulationJob(args: CancelSimulationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelSimulationJobCommandOutput) => void): void;
            /**
                * <p>Cancels a simulation job batch. When you cancel a simulation job batch, you are also
                *          cancelling all of the active simulation jobs created as part of the batch. </p>
                */
            cancelSimulationJobBatch(args: CancelSimulationJobBatchCommandInput, options?: __HttpHandlerOptions): Promise<CancelSimulationJobBatchCommandOutput>;
            cancelSimulationJobBatch(args: CancelSimulationJobBatchCommandInput, cb: (err: any, data?: CancelSimulationJobBatchCommandOutput) => void): void;
            cancelSimulationJobBatch(args: CancelSimulationJobBatchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelSimulationJobBatchCommandOutput) => void): void;
            /**
                * <p>Cancels the specified export job.</p>
                */
            cancelWorldExportJob(args: CancelWorldExportJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelWorldExportJobCommandOutput>;
            cancelWorldExportJob(args: CancelWorldExportJobCommandInput, cb: (err: any, data?: CancelWorldExportJobCommandOutput) => void): void;
            cancelWorldExportJob(args: CancelWorldExportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelWorldExportJobCommandOutput) => void): void;
            /**
                * <p>Cancels the specified world generator job.</p>
                */
            cancelWorldGenerationJob(args: CancelWorldGenerationJobCommandInput, options?: __HttpHandlerOptions): Promise<CancelWorldGenerationJobCommandOutput>;
            cancelWorldGenerationJob(args: CancelWorldGenerationJobCommandInput, cb: (err: any, data?: CancelWorldGenerationJobCommandOutput) => void): void;
            cancelWorldGenerationJob(args: CancelWorldGenerationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelWorldGenerationJobCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Deploys a specific version of a robot application to robots in a fleet.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                *          <p>The robot application must have a numbered <code>applicationVersion</code> for
                *          consistency reasons. To create a new version, use
                *             <code>CreateRobotApplicationVersion</code> or see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/create-robot-application-version.html">Creating a Robot Application Version</a>. </p>
                *          <note>
                *             <p>After 90 days, deployment jobs expire and will be deleted. They will no longer be
                *             accessible. </p>
                *          </note>
                */
            createDeploymentJob(args: CreateDeploymentJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateDeploymentJobCommandOutput>;
            createDeploymentJob(args: CreateDeploymentJobCommandInput, cb: (err: any, data?: CreateDeploymentJobCommandOutput) => void): void;
            createDeploymentJob(args: CreateDeploymentJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDeploymentJobCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Creates a fleet, a logical group of robots running the same robot application.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            createFleet(args: CreateFleetCommandInput, options?: __HttpHandlerOptions): Promise<CreateFleetCommandOutput>;
            createFleet(args: CreateFleetCommandInput, cb: (err: any, data?: CreateFleetCommandOutput) => void): void;
            createFleet(args: CreateFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFleetCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Creates a robot.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            createRobot(args: CreateRobotCommandInput, options?: __HttpHandlerOptions): Promise<CreateRobotCommandOutput>;
            createRobot(args: CreateRobotCommandInput, cb: (err: any, data?: CreateRobotCommandOutput) => void): void;
            createRobot(args: CreateRobotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRobotCommandOutput) => void): void;
            /**
                * <p>Creates a robot application. </p>
                */
            createRobotApplication(args: CreateRobotApplicationCommandInput, options?: __HttpHandlerOptions): Promise<CreateRobotApplicationCommandOutput>;
            createRobotApplication(args: CreateRobotApplicationCommandInput, cb: (err: any, data?: CreateRobotApplicationCommandOutput) => void): void;
            createRobotApplication(args: CreateRobotApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRobotApplicationCommandOutput) => void): void;
            /**
                * <p>Creates a version of a robot application.</p>
                */
            createRobotApplicationVersion(args: CreateRobotApplicationVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateRobotApplicationVersionCommandOutput>;
            createRobotApplicationVersion(args: CreateRobotApplicationVersionCommandInput, cb: (err: any, data?: CreateRobotApplicationVersionCommandOutput) => void): void;
            createRobotApplicationVersion(args: CreateRobotApplicationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRobotApplicationVersionCommandOutput) => void): void;
            /**
                * <p>Creates a simulation application.</p>
                */
            createSimulationApplication(args: CreateSimulationApplicationCommandInput, options?: __HttpHandlerOptions): Promise<CreateSimulationApplicationCommandOutput>;
            createSimulationApplication(args: CreateSimulationApplicationCommandInput, cb: (err: any, data?: CreateSimulationApplicationCommandOutput) => void): void;
            createSimulationApplication(args: CreateSimulationApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSimulationApplicationCommandOutput) => void): void;
            /**
                * <p>Creates a simulation application with a specific revision id.</p>
                */
            createSimulationApplicationVersion(args: CreateSimulationApplicationVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateSimulationApplicationVersionCommandOutput>;
            createSimulationApplicationVersion(args: CreateSimulationApplicationVersionCommandInput, cb: (err: any, data?: CreateSimulationApplicationVersionCommandOutput) => void): void;
            createSimulationApplicationVersion(args: CreateSimulationApplicationVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSimulationApplicationVersionCommandOutput) => void): void;
            /**
                * <p>Creates a simulation job.</p>
                *          <note>
                *             <p>After 90 days, simulation jobs expire and will be deleted. They will no longer be
                *             accessible. </p>
                *          </note>
                */
            createSimulationJob(args: CreateSimulationJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateSimulationJobCommandOutput>;
            createSimulationJob(args: CreateSimulationJobCommandInput, cb: (err: any, data?: CreateSimulationJobCommandOutput) => void): void;
            createSimulationJob(args: CreateSimulationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSimulationJobCommandOutput) => void): void;
            /**
                * <p>Creates a world export job.</p>
                */
            createWorldExportJob(args: CreateWorldExportJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorldExportJobCommandOutput>;
            createWorldExportJob(args: CreateWorldExportJobCommandInput, cb: (err: any, data?: CreateWorldExportJobCommandOutput) => void): void;
            createWorldExportJob(args: CreateWorldExportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorldExportJobCommandOutput) => void): void;
            /**
                * <p>Creates worlds using the specified template.</p>
                */
            createWorldGenerationJob(args: CreateWorldGenerationJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorldGenerationJobCommandOutput>;
            createWorldGenerationJob(args: CreateWorldGenerationJobCommandInput, cb: (err: any, data?: CreateWorldGenerationJobCommandOutput) => void): void;
            createWorldGenerationJob(args: CreateWorldGenerationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorldGenerationJobCommandOutput) => void): void;
            /**
                * <p>Creates a world template.</p>
                */
            createWorldTemplate(args: CreateWorldTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorldTemplateCommandOutput>;
            createWorldTemplate(args: CreateWorldTemplateCommandInput, cb: (err: any, data?: CreateWorldTemplateCommandOutput) => void): void;
            createWorldTemplate(args: CreateWorldTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorldTemplateCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Deletes a fleet.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            deleteFleet(args: DeleteFleetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFleetCommandOutput>;
            deleteFleet(args: DeleteFleetCommandInput, cb: (err: any, data?: DeleteFleetCommandOutput) => void): void;
            deleteFleet(args: DeleteFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFleetCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Deletes a robot.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            deleteRobot(args: DeleteRobotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRobotCommandOutput>;
            deleteRobot(args: DeleteRobotCommandInput, cb: (err: any, data?: DeleteRobotCommandOutput) => void): void;
            deleteRobot(args: DeleteRobotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRobotCommandOutput) => void): void;
            /**
                * <p>Deletes a robot application.</p>
                */
            deleteRobotApplication(args: DeleteRobotApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRobotApplicationCommandOutput>;
            deleteRobotApplication(args: DeleteRobotApplicationCommandInput, cb: (err: any, data?: DeleteRobotApplicationCommandOutput) => void): void;
            deleteRobotApplication(args: DeleteRobotApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRobotApplicationCommandOutput) => void): void;
            /**
                * <p>Deletes a simulation application.</p>
                */
            deleteSimulationApplication(args: DeleteSimulationApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSimulationApplicationCommandOutput>;
            deleteSimulationApplication(args: DeleteSimulationApplicationCommandInput, cb: (err: any, data?: DeleteSimulationApplicationCommandOutput) => void): void;
            deleteSimulationApplication(args: DeleteSimulationApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSimulationApplicationCommandOutput) => void): void;
            /**
                * <p>Deletes a world template.</p>
                */
            deleteWorldTemplate(args: DeleteWorldTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorldTemplateCommandOutput>;
            deleteWorldTemplate(args: DeleteWorldTemplateCommandInput, cb: (err: any, data?: DeleteWorldTemplateCommandOutput) => void): void;
            deleteWorldTemplate(args: DeleteWorldTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorldTemplateCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Deregisters a robot.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            deregisterRobot(args: DeregisterRobotCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterRobotCommandOutput>;
            deregisterRobot(args: DeregisterRobotCommandInput, cb: (err: any, data?: DeregisterRobotCommandOutput) => void): void;
            deregisterRobot(args: DeregisterRobotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterRobotCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Describes a deployment job.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            describeDeploymentJob(args: DescribeDeploymentJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDeploymentJobCommandOutput>;
            describeDeploymentJob(args: DescribeDeploymentJobCommandInput, cb: (err: any, data?: DescribeDeploymentJobCommandOutput) => void): void;
            describeDeploymentJob(args: DescribeDeploymentJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDeploymentJobCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Describes a fleet.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            describeFleet(args: DescribeFleetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFleetCommandOutput>;
            describeFleet(args: DescribeFleetCommandInput, cb: (err: any, data?: DescribeFleetCommandOutput) => void): void;
            describeFleet(args: DescribeFleetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFleetCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Describes a robot.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            describeRobot(args: DescribeRobotCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRobotCommandOutput>;
            describeRobot(args: DescribeRobotCommandInput, cb: (err: any, data?: DescribeRobotCommandOutput) => void): void;
            describeRobot(args: DescribeRobotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRobotCommandOutput) => void): void;
            /**
                * <p>Describes a robot application.</p>
                */
            describeRobotApplication(args: DescribeRobotApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRobotApplicationCommandOutput>;
            describeRobotApplication(args: DescribeRobotApplicationCommandInput, cb: (err: any, data?: DescribeRobotApplicationCommandOutput) => void): void;
            describeRobotApplication(args: DescribeRobotApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRobotApplicationCommandOutput) => void): void;
            /**
                * <p>Describes a simulation application.</p>
                */
            describeSimulationApplication(args: DescribeSimulationApplicationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSimulationApplicationCommandOutput>;
            describeSimulationApplication(args: DescribeSimulationApplicationCommandInput, cb: (err: any, data?: DescribeSimulationApplicationCommandOutput) => void): void;
            describeSimulationApplication(args: DescribeSimulationApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSimulationApplicationCommandOutput) => void): void;
            /**
                * <p>Describes a simulation job.</p>
                */
            describeSimulationJob(args: DescribeSimulationJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSimulationJobCommandOutput>;
            describeSimulationJob(args: DescribeSimulationJobCommandInput, cb: (err: any, data?: DescribeSimulationJobCommandOutput) => void): void;
            describeSimulationJob(args: DescribeSimulationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSimulationJobCommandOutput) => void): void;
            /**
                * <p>Describes a simulation job batch.</p>
                */
            describeSimulationJobBatch(args: DescribeSimulationJobBatchCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSimulationJobBatchCommandOutput>;
            describeSimulationJobBatch(args: DescribeSimulationJobBatchCommandInput, cb: (err: any, data?: DescribeSimulationJobBatchCommandOutput) => void): void;
            describeSimulationJobBatch(args: DescribeSimulationJobBatchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSimulationJobBatchCommandOutput) => void): void;
            /**
                * <p>Describes a world.</p>
                */
            describeWorld(args: DescribeWorldCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorldCommandOutput>;
            describeWorld(args: DescribeWorldCommandInput, cb: (err: any, data?: DescribeWorldCommandOutput) => void): void;
            describeWorld(args: DescribeWorldCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorldCommandOutput) => void): void;
            /**
                * <p>Describes a world export job.</p>
                */
            describeWorldExportJob(args: DescribeWorldExportJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorldExportJobCommandOutput>;
            describeWorldExportJob(args: DescribeWorldExportJobCommandInput, cb: (err: any, data?: DescribeWorldExportJobCommandOutput) => void): void;
            describeWorldExportJob(args: DescribeWorldExportJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorldExportJobCommandOutput) => void): void;
            /**
                * <p>Describes a world generation job.</p>
                */
            describeWorldGenerationJob(args: DescribeWorldGenerationJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorldGenerationJobCommandOutput>;
            describeWorldGenerationJob(args: DescribeWorldGenerationJobCommandInput, cb: (err: any, data?: DescribeWorldGenerationJobCommandOutput) => void): void;
            describeWorldGenerationJob(args: DescribeWorldGenerationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorldGenerationJobCommandOutput) => void): void;
            /**
                * <p>Describes a world template.</p>
                */
            describeWorldTemplate(args: DescribeWorldTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DescribeWorldTemplateCommandOutput>;
            describeWorldTemplate(args: DescribeWorldTemplateCommandInput, cb: (err: any, data?: DescribeWorldTemplateCommandOutput) => void): void;
            describeWorldTemplate(args: DescribeWorldTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeWorldTemplateCommandOutput) => void): void;
            /**
                * <p>Gets the world template body.</p>
                */
            getWorldTemplateBody(args: GetWorldTemplateBodyCommandInput, options?: __HttpHandlerOptions): Promise<GetWorldTemplateBodyCommandOutput>;
            getWorldTemplateBody(args: GetWorldTemplateBodyCommandInput, cb: (err: any, data?: GetWorldTemplateBodyCommandOutput) => void): void;
            getWorldTemplateBody(args: GetWorldTemplateBodyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWorldTemplateBodyCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Returns a list of deployment jobs for a fleet. You can optionally provide filters to retrieve specific deployment jobs.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            listDeploymentJobs(args: ListDeploymentJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListDeploymentJobsCommandOutput>;
            listDeploymentJobs(args: ListDeploymentJobsCommandInput, cb: (err: any, data?: ListDeploymentJobsCommandOutput) => void): void;
            listDeploymentJobs(args: ListDeploymentJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDeploymentJobsCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Returns a list of fleets. You can optionally provide filters to retrieve specific fleets.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            listFleets(args: ListFleetsCommandInput, options?: __HttpHandlerOptions): Promise<ListFleetsCommandOutput>;
            listFleets(args: ListFleetsCommandInput, cb: (err: any, data?: ListFleetsCommandOutput) => void): void;
            listFleets(args: ListFleetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFleetsCommandOutput) => void): void;
            /**
                * <p>Returns a list of robot application. You can optionally provide filters to retrieve
                *          specific robot applications.</p>
                */
            listRobotApplications(args: ListRobotApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<ListRobotApplicationsCommandOutput>;
            listRobotApplications(args: ListRobotApplicationsCommandInput, cb: (err: any, data?: ListRobotApplicationsCommandOutput) => void): void;
            listRobotApplications(args: ListRobotApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRobotApplicationsCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Returns a list of robots. You can optionally provide filters to retrieve specific robots.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            listRobots(args: ListRobotsCommandInput, options?: __HttpHandlerOptions): Promise<ListRobotsCommandOutput>;
            listRobots(args: ListRobotsCommandInput, cb: (err: any, data?: ListRobotsCommandOutput) => void): void;
            listRobots(args: ListRobotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRobotsCommandOutput) => void): void;
            /**
                * <p>Returns a list of simulation applications. You can optionally provide filters to
                *          retrieve specific simulation applications. </p>
                */
            listSimulationApplications(args: ListSimulationApplicationsCommandInput, options?: __HttpHandlerOptions): Promise<ListSimulationApplicationsCommandOutput>;
            listSimulationApplications(args: ListSimulationApplicationsCommandInput, cb: (err: any, data?: ListSimulationApplicationsCommandOutput) => void): void;
            listSimulationApplications(args: ListSimulationApplicationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSimulationApplicationsCommandOutput) => void): void;
            /**
                * <p>Returns a list simulation job batches. You can optionally provide filters to retrieve
                *          specific simulation batch jobs. </p>
                */
            listSimulationJobBatches(args: ListSimulationJobBatchesCommandInput, options?: __HttpHandlerOptions): Promise<ListSimulationJobBatchesCommandOutput>;
            listSimulationJobBatches(args: ListSimulationJobBatchesCommandInput, cb: (err: any, data?: ListSimulationJobBatchesCommandOutput) => void): void;
            listSimulationJobBatches(args: ListSimulationJobBatchesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSimulationJobBatchesCommandOutput) => void): void;
            /**
                * <p>Returns a list of simulation jobs. You can optionally provide filters to retrieve
                *          specific simulation jobs. </p>
                */
            listSimulationJobs(args: ListSimulationJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListSimulationJobsCommandOutput>;
            listSimulationJobs(args: ListSimulationJobsCommandInput, cb: (err: any, data?: ListSimulationJobsCommandOutput) => void): void;
            listSimulationJobs(args: ListSimulationJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSimulationJobsCommandOutput) => void): void;
            /**
                * <p>Lists all tags on a AWS RoboMaker resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists world export jobs.</p>
                */
            listWorldExportJobs(args: ListWorldExportJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorldExportJobsCommandOutput>;
            listWorldExportJobs(args: ListWorldExportJobsCommandInput, cb: (err: any, data?: ListWorldExportJobsCommandOutput) => void): void;
            listWorldExportJobs(args: ListWorldExportJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorldExportJobsCommandOutput) => void): void;
            /**
                * <p>Lists world generator jobs.</p>
                */
            listWorldGenerationJobs(args: ListWorldGenerationJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorldGenerationJobsCommandOutput>;
            listWorldGenerationJobs(args: ListWorldGenerationJobsCommandInput, cb: (err: any, data?: ListWorldGenerationJobsCommandOutput) => void): void;
            listWorldGenerationJobs(args: ListWorldGenerationJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorldGenerationJobsCommandOutput) => void): void;
            /**
                * <p>Lists worlds.</p>
                */
            listWorlds(args: ListWorldsCommandInput, options?: __HttpHandlerOptions): Promise<ListWorldsCommandOutput>;
            listWorlds(args: ListWorldsCommandInput, cb: (err: any, data?: ListWorldsCommandOutput) => void): void;
            listWorlds(args: ListWorldsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorldsCommandOutput) => void): void;
            /**
                * <p>Lists world templates.</p>
                */
            listWorldTemplates(args: ListWorldTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListWorldTemplatesCommandOutput>;
            listWorldTemplates(args: ListWorldTemplatesCommandInput, cb: (err: any, data?: ListWorldTemplatesCommandOutput) => void): void;
            listWorldTemplates(args: ListWorldTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorldTemplatesCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Registers a robot with a fleet.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            registerRobot(args: RegisterRobotCommandInput, options?: __HttpHandlerOptions): Promise<RegisterRobotCommandOutput>;
            registerRobot(args: RegisterRobotCommandInput, cb: (err: any, data?: RegisterRobotCommandOutput) => void): void;
            registerRobot(args: RegisterRobotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterRobotCommandOutput) => void): void;
            /**
                * <p>Restarts a running simulation job.</p>
                */
            restartSimulationJob(args: RestartSimulationJobCommandInput, options?: __HttpHandlerOptions): Promise<RestartSimulationJobCommandOutput>;
            restartSimulationJob(args: RestartSimulationJobCommandInput, cb: (err: any, data?: RestartSimulationJobCommandOutput) => void): void;
            restartSimulationJob(args: RestartSimulationJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestartSimulationJobCommandOutput) => void): void;
            /**
                * <p>Starts a new simulation job batch. The batch is defined using one or more
                *             <code>SimulationJobRequest</code> objects. </p>
                */
            startSimulationJobBatch(args: StartSimulationJobBatchCommandInput, options?: __HttpHandlerOptions): Promise<StartSimulationJobBatchCommandOutput>;
            startSimulationJobBatch(args: StartSimulationJobBatchCommandInput, cb: (err: any, data?: StartSimulationJobBatchCommandOutput) => void): void;
            startSimulationJobBatch(args: StartSimulationJobBatchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSimulationJobBatchCommandOutput) => void): void;
            /**
                * @deprecated
                *
                * <p>Syncrhonizes robots in a fleet to the latest deployment. This is helpful if robots were added after a deployment.</p>
                *          <important>
                *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
                *          </important>
                */
            syncDeploymentJob(args: SyncDeploymentJobCommandInput, options?: __HttpHandlerOptions): Promise<SyncDeploymentJobCommandOutput>;
            syncDeploymentJob(args: SyncDeploymentJobCommandInput, cb: (err: any, data?: SyncDeploymentJobCommandOutput) => void): void;
            syncDeploymentJob(args: SyncDeploymentJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SyncDeploymentJobCommandOutput) => void): void;
            /**
                * <p>Adds or edits tags for a AWS RoboMaker resource.</p>
                *          <p>Each tag consists of a tag key and a tag value. Tag keys and tag values are both
                *          required, but tag values can be empty strings. </p>
                *          <p>For information about the rules that apply to tag keys and tag values, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html">User-Defined Tag Restrictions</a> in the <i>AWS Billing and Cost Management
                *             User Guide</i>. </p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified AWS RoboMaker resource.</p>
                *          <p>To remove a tag, specify the tag key. To change the tag value of an existing tag key,
                *          use <a href="https://docs.aws.amazon.com/robomaker/latest/dg/API_TagResource.html">
                *                <code>TagResource</code>
                *             </a>. </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates a robot application.</p>
                */
            updateRobotApplication(args: UpdateRobotApplicationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRobotApplicationCommandOutput>;
            updateRobotApplication(args: UpdateRobotApplicationCommandInput, cb: (err: any, data?: UpdateRobotApplicationCommandOutput) => void): void;
            updateRobotApplication(args: UpdateRobotApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRobotApplicationCommandOutput) => void): void;
            /**
                * <p>Updates a simulation application.</p>
                */
            updateSimulationApplication(args: UpdateSimulationApplicationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSimulationApplicationCommandOutput>;
            updateSimulationApplication(args: UpdateSimulationApplicationCommandInput, cb: (err: any, data?: UpdateSimulationApplicationCommandOutput) => void): void;
            updateSimulationApplication(args: UpdateSimulationApplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSimulationApplicationCommandOutput) => void): void;
            /**
                * <p>Updates a world template.</p>
                */
            updateWorldTemplate(args: UpdateWorldTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWorldTemplateCommandOutput>;
            updateWorldTemplate(args: UpdateWorldTemplateCommandInput, cb: (err: any, data?: UpdateWorldTemplateCommandOutput) => void): void;
            updateWorldTemplate(args: UpdateWorldTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWorldTemplateCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/BatchDeleteWorldsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchDeleteWorldsRequest, BatchDeleteWorldsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface BatchDeleteWorldsCommandInput extends BatchDeleteWorldsRequest {
    }
    export interface BatchDeleteWorldsCommandOutput extends BatchDeleteWorldsResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes one or more worlds in a batch operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, BatchDeleteWorldsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, BatchDeleteWorldsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new BatchDeleteWorldsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteWorldsCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteWorldsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class BatchDeleteWorldsCommand extends $Command<BatchDeleteWorldsCommandInput, BatchDeleteWorldsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: BatchDeleteWorldsCommandInput;
            constructor(input: BatchDeleteWorldsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteWorldsCommandInput, BatchDeleteWorldsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/BatchDescribeSimulationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BatchDescribeSimulationJobRequest, BatchDescribeSimulationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface BatchDescribeSimulationJobCommandInput extends BatchDescribeSimulationJobRequest {
    }
    export interface BatchDescribeSimulationJobCommandOutput extends BatchDescribeSimulationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Describes one or more simulation jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, BatchDescribeSimulationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, BatchDescribeSimulationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new BatchDescribeSimulationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDescribeSimulationJobCommandInput} for command's `input` shape.
        * @see {@link BatchDescribeSimulationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class BatchDescribeSimulationJobCommand extends $Command<BatchDescribeSimulationJobCommandInput, BatchDescribeSimulationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: BatchDescribeSimulationJobCommandInput;
            constructor(input: BatchDescribeSimulationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDescribeSimulationJobCommandInput, BatchDescribeSimulationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelDeploymentJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelDeploymentJobRequest, CancelDeploymentJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CancelDeploymentJobCommandInput extends CancelDeploymentJobRequest {
    }
    export interface CancelDeploymentJobCommandOutput extends CancelDeploymentJobResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Cancels the specified deployment job.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CancelDeploymentJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CancelDeploymentJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CancelDeploymentJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelDeploymentJobCommandInput} for command's `input` shape.
        * @see {@link CancelDeploymentJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CancelDeploymentJobCommand extends $Command<CancelDeploymentJobCommandInput, CancelDeploymentJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CancelDeploymentJobCommandInput;
            constructor(input: CancelDeploymentJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelDeploymentJobCommandInput, CancelDeploymentJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelSimulationJobBatchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelSimulationJobBatchRequest, CancelSimulationJobBatchResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CancelSimulationJobBatchCommandInput extends CancelSimulationJobBatchRequest {
    }
    export interface CancelSimulationJobBatchCommandOutput extends CancelSimulationJobBatchResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels a simulation job batch. When you cancel a simulation job batch, you are also
        *          cancelling all of the active simulation jobs created as part of the batch. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CancelSimulationJobBatchCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CancelSimulationJobBatchCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CancelSimulationJobBatchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelSimulationJobBatchCommandInput} for command's `input` shape.
        * @see {@link CancelSimulationJobBatchCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CancelSimulationJobBatchCommand extends $Command<CancelSimulationJobBatchCommandInput, CancelSimulationJobBatchCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CancelSimulationJobBatchCommandInput;
            constructor(input: CancelSimulationJobBatchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelSimulationJobBatchCommandInput, CancelSimulationJobBatchCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelSimulationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelSimulationJobRequest, CancelSimulationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CancelSimulationJobCommandInput extends CancelSimulationJobRequest {
    }
    export interface CancelSimulationJobCommandOutput extends CancelSimulationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the specified simulation job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CancelSimulationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CancelSimulationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CancelSimulationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelSimulationJobCommandInput} for command's `input` shape.
        * @see {@link CancelSimulationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CancelSimulationJobCommand extends $Command<CancelSimulationJobCommandInput, CancelSimulationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CancelSimulationJobCommandInput;
            constructor(input: CancelSimulationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelSimulationJobCommandInput, CancelSimulationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelWorldExportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelWorldExportJobRequest, CancelWorldExportJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CancelWorldExportJobCommandInput extends CancelWorldExportJobRequest {
    }
    export interface CancelWorldExportJobCommandOutput extends CancelWorldExportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the specified export job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CancelWorldExportJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CancelWorldExportJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CancelWorldExportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelWorldExportJobCommandInput} for command's `input` shape.
        * @see {@link CancelWorldExportJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CancelWorldExportJobCommand extends $Command<CancelWorldExportJobCommandInput, CancelWorldExportJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CancelWorldExportJobCommandInput;
            constructor(input: CancelWorldExportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelWorldExportJobCommandInput, CancelWorldExportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelWorldGenerationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelWorldGenerationJobRequest, CancelWorldGenerationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CancelWorldGenerationJobCommandInput extends CancelWorldGenerationJobRequest {
    }
    export interface CancelWorldGenerationJobCommandOutput extends CancelWorldGenerationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the specified world generator job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CancelWorldGenerationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CancelWorldGenerationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CancelWorldGenerationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelWorldGenerationJobCommandInput} for command's `input` shape.
        * @see {@link CancelWorldGenerationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CancelWorldGenerationJobCommand extends $Command<CancelWorldGenerationJobCommandInput, CancelWorldGenerationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CancelWorldGenerationJobCommandInput;
            constructor(input: CancelWorldGenerationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelWorldGenerationJobCommandInput, CancelWorldGenerationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateDeploymentJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDeploymentJobRequest, CreateDeploymentJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateDeploymentJobCommandInput extends CreateDeploymentJobRequest {
    }
    export interface CreateDeploymentJobCommandOutput extends CreateDeploymentJobResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Deploys a specific version of a robot application to robots in a fleet.</p>
        *          <important>
        *             <p>This API is no longer supported and will throw an error if used.</p>
        *          </important>
        *          <p>The robot application must have a numbered <code>applicationVersion</code> for
        *          consistency reasons. To create a new version, use
        *             <code>CreateRobotApplicationVersion</code> or see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/create-robot-application-version.html">Creating a Robot Application Version</a>. </p>
        *          <note>
        *             <p>After 90 days, deployment jobs expire and will be deleted. They will no longer be
        *             accessible. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateDeploymentJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateDeploymentJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateDeploymentJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDeploymentJobCommandInput} for command's `input` shape.
        * @see {@link CreateDeploymentJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateDeploymentJobCommand extends $Command<CreateDeploymentJobCommandInput, CreateDeploymentJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateDeploymentJobCommandInput;
            constructor(input: CreateDeploymentJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDeploymentJobCommandInput, CreateDeploymentJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFleetRequest, CreateFleetResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateFleetCommandInput extends CreateFleetRequest {
    }
    export interface CreateFleetCommandOutput extends CreateFleetResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Creates a fleet, a logical group of robots running the same robot application.</p>
        *          <important>
        *             <p>This API is no longer supported and will throw an error if used.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateFleetCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateFleetCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFleetCommandInput} for command's `input` shape.
        * @see {@link CreateFleetCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateFleetCommand extends $Command<CreateFleetCommandInput, CreateFleetCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateFleetCommandInput;
            constructor(input: CreateFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFleetCommandInput, CreateFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateRobotApplicationRequest, CreateRobotApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateRobotApplicationCommandInput extends CreateRobotApplicationRequest {
    }
    export interface CreateRobotApplicationCommandOutput extends CreateRobotApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a robot application. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateRobotApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateRobotApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateRobotApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRobotApplicationCommandInput} for command's `input` shape.
        * @see {@link CreateRobotApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateRobotApplicationCommand extends $Command<CreateRobotApplicationCommandInput, CreateRobotApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateRobotApplicationCommandInput;
            constructor(input: CreateRobotApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRobotApplicationCommandInput, CreateRobotApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotApplicationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateRobotApplicationVersionRequest, CreateRobotApplicationVersionResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateRobotApplicationVersionCommandInput extends CreateRobotApplicationVersionRequest {
    }
    export interface CreateRobotApplicationVersionCommandOutput extends CreateRobotApplicationVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a version of a robot application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateRobotApplicationVersionCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateRobotApplicationVersionCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateRobotApplicationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRobotApplicationVersionCommandInput} for command's `input` shape.
        * @see {@link CreateRobotApplicationVersionCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateRobotApplicationVersionCommand extends $Command<CreateRobotApplicationVersionCommandInput, CreateRobotApplicationVersionCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateRobotApplicationVersionCommandInput;
            constructor(input: CreateRobotApplicationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRobotApplicationVersionCommandInput, CreateRobotApplicationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateRobotRequest, CreateRobotResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateRobotCommandInput extends CreateRobotRequest {
    }
    export interface CreateRobotCommandOutput extends CreateRobotResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Creates a robot.</p>
        *          <important>
        *             <p>This API is no longer supported and will throw an error if used.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateRobotCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateRobotCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateRobotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRobotCommandInput} for command's `input` shape.
        * @see {@link CreateRobotCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateRobotCommand extends $Command<CreateRobotCommandInput, CreateRobotCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateRobotCommandInput;
            constructor(input: CreateRobotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRobotCommandInput, CreateRobotCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSimulationApplicationRequest, CreateSimulationApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateSimulationApplicationCommandInput extends CreateSimulationApplicationRequest {
    }
    export interface CreateSimulationApplicationCommandOutput extends CreateSimulationApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a simulation application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateSimulationApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateSimulationApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateSimulationApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSimulationApplicationCommandInput} for command's `input` shape.
        * @see {@link CreateSimulationApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateSimulationApplicationCommand extends $Command<CreateSimulationApplicationCommandInput, CreateSimulationApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateSimulationApplicationCommandInput;
            constructor(input: CreateSimulationApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSimulationApplicationCommandInput, CreateSimulationApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationApplicationVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSimulationApplicationVersionRequest, CreateSimulationApplicationVersionResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateSimulationApplicationVersionCommandInput extends CreateSimulationApplicationVersionRequest {
    }
    export interface CreateSimulationApplicationVersionCommandOutput extends CreateSimulationApplicationVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a simulation application with a specific revision id.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateSimulationApplicationVersionCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateSimulationApplicationVersionCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateSimulationApplicationVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSimulationApplicationVersionCommandInput} for command's `input` shape.
        * @see {@link CreateSimulationApplicationVersionCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateSimulationApplicationVersionCommand extends $Command<CreateSimulationApplicationVersionCommandInput, CreateSimulationApplicationVersionCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateSimulationApplicationVersionCommandInput;
            constructor(input: CreateSimulationApplicationVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSimulationApplicationVersionCommandInput, CreateSimulationApplicationVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSimulationJobRequest, CreateSimulationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateSimulationJobCommandInput extends CreateSimulationJobRequest {
    }
    export interface CreateSimulationJobCommandOutput extends CreateSimulationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a simulation job.</p>
        *          <note>
        *             <p>After 90 days, simulation jobs expire and will be deleted. They will no longer be
        *             accessible. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateSimulationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateSimulationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateSimulationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSimulationJobCommandInput} for command's `input` shape.
        * @see {@link CreateSimulationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateSimulationJobCommand extends $Command<CreateSimulationJobCommandInput, CreateSimulationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateSimulationJobCommandInput;
            constructor(input: CreateSimulationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSimulationJobCommandInput, CreateSimulationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldExportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorldExportJobRequest, CreateWorldExportJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateWorldExportJobCommandInput extends CreateWorldExportJobRequest {
    }
    export interface CreateWorldExportJobCommandOutput extends CreateWorldExportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a world export job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateWorldExportJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateWorldExportJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateWorldExportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorldExportJobCommandInput} for command's `input` shape.
        * @see {@link CreateWorldExportJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateWorldExportJobCommand extends $Command<CreateWorldExportJobCommandInput, CreateWorldExportJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateWorldExportJobCommandInput;
            constructor(input: CreateWorldExportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorldExportJobCommandInput, CreateWorldExportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldGenerationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorldGenerationJobRequest, CreateWorldGenerationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateWorldGenerationJobCommandInput extends CreateWorldGenerationJobRequest {
    }
    export interface CreateWorldGenerationJobCommandOutput extends CreateWorldGenerationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates worlds using the specified template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateWorldGenerationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateWorldGenerationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateWorldGenerationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorldGenerationJobCommandInput} for command's `input` shape.
        * @see {@link CreateWorldGenerationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateWorldGenerationJobCommand extends $Command<CreateWorldGenerationJobCommandInput, CreateWorldGenerationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateWorldGenerationJobCommandInput;
            constructor(input: CreateWorldGenerationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorldGenerationJobCommandInput, CreateWorldGenerationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorldTemplateRequest, CreateWorldTemplateResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface CreateWorldTemplateCommandInput extends CreateWorldTemplateRequest {
    }
    export interface CreateWorldTemplateCommandOutput extends CreateWorldTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a world template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, CreateWorldTemplateCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, CreateWorldTemplateCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new CreateWorldTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorldTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateWorldTemplateCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class CreateWorldTemplateCommand extends $Command<CreateWorldTemplateCommandInput, CreateWorldTemplateCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: CreateWorldTemplateCommandInput;
            constructor(input: CreateWorldTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorldTemplateCommandInput, CreateWorldTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFleetRequest, DeleteFleetResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DeleteFleetCommandInput extends DeleteFleetRequest {
    }
    export interface DeleteFleetCommandOutput extends DeleteFleetResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Deletes a fleet.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DeleteFleetCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DeleteFleetCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DeleteFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFleetCommandInput} for command's `input` shape.
        * @see {@link DeleteFleetCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DeleteFleetCommand extends $Command<DeleteFleetCommandInput, DeleteFleetCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DeleteFleetCommandInput;
            constructor(input: DeleteFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFleetCommandInput, DeleteFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteRobotApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteRobotApplicationRequest, DeleteRobotApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DeleteRobotApplicationCommandInput extends DeleteRobotApplicationRequest {
    }
    export interface DeleteRobotApplicationCommandOutput extends DeleteRobotApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a robot application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DeleteRobotApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DeleteRobotApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DeleteRobotApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRobotApplicationCommandInput} for command's `input` shape.
        * @see {@link DeleteRobotApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DeleteRobotApplicationCommand extends $Command<DeleteRobotApplicationCommandInput, DeleteRobotApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DeleteRobotApplicationCommandInput;
            constructor(input: DeleteRobotApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRobotApplicationCommandInput, DeleteRobotApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteRobotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteRobotRequest, DeleteRobotResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DeleteRobotCommandInput extends DeleteRobotRequest {
    }
    export interface DeleteRobotCommandOutput extends DeleteRobotResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Deletes a robot.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DeleteRobotCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DeleteRobotCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DeleteRobotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRobotCommandInput} for command's `input` shape.
        * @see {@link DeleteRobotCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DeleteRobotCommand extends $Command<DeleteRobotCommandInput, DeleteRobotCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DeleteRobotCommandInput;
            constructor(input: DeleteRobotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRobotCommandInput, DeleteRobotCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteSimulationApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteSimulationApplicationRequest, DeleteSimulationApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DeleteSimulationApplicationCommandInput extends DeleteSimulationApplicationRequest {
    }
    export interface DeleteSimulationApplicationCommandOutput extends DeleteSimulationApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a simulation application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DeleteSimulationApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DeleteSimulationApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DeleteSimulationApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSimulationApplicationCommandInput} for command's `input` shape.
        * @see {@link DeleteSimulationApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DeleteSimulationApplicationCommand extends $Command<DeleteSimulationApplicationCommandInput, DeleteSimulationApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DeleteSimulationApplicationCommandInput;
            constructor(input: DeleteSimulationApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSimulationApplicationCommandInput, DeleteSimulationApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteWorldTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorldTemplateRequest, DeleteWorldTemplateResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DeleteWorldTemplateCommandInput extends DeleteWorldTemplateRequest {
    }
    export interface DeleteWorldTemplateCommandOutput extends DeleteWorldTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a world template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DeleteWorldTemplateCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DeleteWorldTemplateCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DeleteWorldTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorldTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteWorldTemplateCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DeleteWorldTemplateCommand extends $Command<DeleteWorldTemplateCommandInput, DeleteWorldTemplateCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DeleteWorldTemplateCommandInput;
            constructor(input: DeleteWorldTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorldTemplateCommandInput, DeleteWorldTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeregisterRobotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterRobotRequest, DeregisterRobotResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DeregisterRobotCommandInput extends DeregisterRobotRequest {
    }
    export interface DeregisterRobotCommandOutput extends DeregisterRobotResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Deregisters a robot.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DeregisterRobotCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DeregisterRobotCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DeregisterRobotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterRobotCommandInput} for command's `input` shape.
        * @see {@link DeregisterRobotCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DeregisterRobotCommand extends $Command<DeregisterRobotCommandInput, DeregisterRobotCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DeregisterRobotCommandInput;
            constructor(input: DeregisterRobotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterRobotCommandInput, DeregisterRobotCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeDeploymentJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDeploymentJobRequest, DescribeDeploymentJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeDeploymentJobCommandInput extends DescribeDeploymentJobRequest {
    }
    export interface DescribeDeploymentJobCommandOutput extends DescribeDeploymentJobResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Describes a deployment job.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeDeploymentJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeDeploymentJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeDeploymentJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDeploymentJobCommandInput} for command's `input` shape.
        * @see {@link DescribeDeploymentJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeDeploymentJobCommand extends $Command<DescribeDeploymentJobCommandInput, DescribeDeploymentJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeDeploymentJobCommandInput;
            constructor(input: DescribeDeploymentJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDeploymentJobCommandInput, DescribeDeploymentJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeFleetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFleetRequest, DescribeFleetResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeFleetCommandInput extends DescribeFleetRequest {
    }
    export interface DescribeFleetCommandOutput extends DescribeFleetResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Describes a fleet.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeFleetCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeFleetCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeFleetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFleetCommandInput} for command's `input` shape.
        * @see {@link DescribeFleetCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeFleetCommand extends $Command<DescribeFleetCommandInput, DescribeFleetCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeFleetCommandInput;
            constructor(input: DescribeFleetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFleetCommandInput, DescribeFleetCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeRobotApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeRobotApplicationRequest, DescribeRobotApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeRobotApplicationCommandInput extends DescribeRobotApplicationRequest {
    }
    export interface DescribeRobotApplicationCommandOutput extends DescribeRobotApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a robot application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeRobotApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeRobotApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeRobotApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRobotApplicationCommandInput} for command's `input` shape.
        * @see {@link DescribeRobotApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeRobotApplicationCommand extends $Command<DescribeRobotApplicationCommandInput, DescribeRobotApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeRobotApplicationCommandInput;
            constructor(input: DescribeRobotApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRobotApplicationCommandInput, DescribeRobotApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeRobotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeRobotRequest, DescribeRobotResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeRobotCommandInput extends DescribeRobotRequest {
    }
    export interface DescribeRobotCommandOutput extends DescribeRobotResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Describes a robot.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeRobotCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeRobotCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeRobotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRobotCommandInput} for command's `input` shape.
        * @see {@link DescribeRobotCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeRobotCommand extends $Command<DescribeRobotCommandInput, DescribeRobotCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeRobotCommandInput;
            constructor(input: DescribeRobotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRobotCommandInput, DescribeRobotCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSimulationApplicationRequest, DescribeSimulationApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeSimulationApplicationCommandInput extends DescribeSimulationApplicationRequest {
    }
    export interface DescribeSimulationApplicationCommandOutput extends DescribeSimulationApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a simulation application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeSimulationApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeSimulationApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeSimulationApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSimulationApplicationCommandInput} for command's `input` shape.
        * @see {@link DescribeSimulationApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeSimulationApplicationCommand extends $Command<DescribeSimulationApplicationCommandInput, DescribeSimulationApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeSimulationApplicationCommandInput;
            constructor(input: DescribeSimulationApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSimulationApplicationCommandInput, DescribeSimulationApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationJobBatchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSimulationJobBatchRequest, DescribeSimulationJobBatchResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeSimulationJobBatchCommandInput extends DescribeSimulationJobBatchRequest {
    }
    export interface DescribeSimulationJobBatchCommandOutput extends DescribeSimulationJobBatchResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a simulation job batch.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeSimulationJobBatchCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeSimulationJobBatchCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeSimulationJobBatchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSimulationJobBatchCommandInput} for command's `input` shape.
        * @see {@link DescribeSimulationJobBatchCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeSimulationJobBatchCommand extends $Command<DescribeSimulationJobBatchCommandInput, DescribeSimulationJobBatchCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeSimulationJobBatchCommandInput;
            constructor(input: DescribeSimulationJobBatchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSimulationJobBatchCommandInput, DescribeSimulationJobBatchCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSimulationJobRequest, DescribeSimulationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeSimulationJobCommandInput extends DescribeSimulationJobRequest {
    }
    export interface DescribeSimulationJobCommandOutput extends DescribeSimulationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a simulation job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeSimulationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeSimulationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeSimulationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSimulationJobCommandInput} for command's `input` shape.
        * @see {@link DescribeSimulationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeSimulationJobCommand extends $Command<DescribeSimulationJobCommandInput, DescribeSimulationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeSimulationJobCommandInput;
            constructor(input: DescribeSimulationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSimulationJobCommandInput, DescribeSimulationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorldRequest, DescribeWorldResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeWorldCommandInput extends DescribeWorldRequest {
    }
    export interface DescribeWorldCommandOutput extends DescribeWorldResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a world.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeWorldCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeWorldCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeWorldCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorldCommandInput} for command's `input` shape.
        * @see {@link DescribeWorldCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeWorldCommand extends $Command<DescribeWorldCommandInput, DescribeWorldCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeWorldCommandInput;
            constructor(input: DescribeWorldCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorldCommandInput, DescribeWorldCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldExportJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorldExportJobRequest, DescribeWorldExportJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeWorldExportJobCommandInput extends DescribeWorldExportJobRequest {
    }
    export interface DescribeWorldExportJobCommandOutput extends DescribeWorldExportJobResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a world export job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeWorldExportJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeWorldExportJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeWorldExportJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorldExportJobCommandInput} for command's `input` shape.
        * @see {@link DescribeWorldExportJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeWorldExportJobCommand extends $Command<DescribeWorldExportJobCommandInput, DescribeWorldExportJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeWorldExportJobCommandInput;
            constructor(input: DescribeWorldExportJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorldExportJobCommandInput, DescribeWorldExportJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldGenerationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorldGenerationJobRequest, DescribeWorldGenerationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeWorldGenerationJobCommandInput extends DescribeWorldGenerationJobRequest {
    }
    export interface DescribeWorldGenerationJobCommandOutput extends DescribeWorldGenerationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a world generation job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeWorldGenerationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeWorldGenerationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeWorldGenerationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorldGenerationJobCommandInput} for command's `input` shape.
        * @see {@link DescribeWorldGenerationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeWorldGenerationJobCommand extends $Command<DescribeWorldGenerationJobCommandInput, DescribeWorldGenerationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeWorldGenerationJobCommandInput;
            constructor(input: DescribeWorldGenerationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorldGenerationJobCommandInput, DescribeWorldGenerationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeWorldTemplateRequest, DescribeWorldTemplateResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface DescribeWorldTemplateCommandInput extends DescribeWorldTemplateRequest {
    }
    export interface DescribeWorldTemplateCommandOutput extends DescribeWorldTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Describes a world template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, DescribeWorldTemplateCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, DescribeWorldTemplateCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new DescribeWorldTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeWorldTemplateCommandInput} for command's `input` shape.
        * @see {@link DescribeWorldTemplateCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class DescribeWorldTemplateCommand extends $Command<DescribeWorldTemplateCommandInput, DescribeWorldTemplateCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: DescribeWorldTemplateCommandInput;
            constructor(input: DescribeWorldTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeWorldTemplateCommandInput, DescribeWorldTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/GetWorldTemplateBodyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetWorldTemplateBodyRequest, GetWorldTemplateBodyResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface GetWorldTemplateBodyCommandInput extends GetWorldTemplateBodyRequest {
    }
    export interface GetWorldTemplateBodyCommandOutput extends GetWorldTemplateBodyResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the world template body.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, GetWorldTemplateBodyCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, GetWorldTemplateBodyCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new GetWorldTemplateBodyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWorldTemplateBodyCommandInput} for command's `input` shape.
        * @see {@link GetWorldTemplateBodyCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class GetWorldTemplateBodyCommand extends $Command<GetWorldTemplateBodyCommandInput, GetWorldTemplateBodyCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: GetWorldTemplateBodyCommandInput;
            constructor(input: GetWorldTemplateBodyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWorldTemplateBodyCommandInput, GetWorldTemplateBodyCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListDeploymentJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDeploymentJobsRequest, ListDeploymentJobsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListDeploymentJobsCommandInput extends ListDeploymentJobsRequest {
    }
    export interface ListDeploymentJobsCommandOutput extends ListDeploymentJobsResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Returns a list of deployment jobs for a fleet. You can optionally provide filters to retrieve specific deployment jobs.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListDeploymentJobsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListDeploymentJobsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListDeploymentJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDeploymentJobsCommandInput} for command's `input` shape.
        * @see {@link ListDeploymentJobsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListDeploymentJobsCommand extends $Command<ListDeploymentJobsCommandInput, ListDeploymentJobsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListDeploymentJobsCommandInput;
            constructor(input: ListDeploymentJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDeploymentJobsCommandInput, ListDeploymentJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListFleetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFleetsRequest, ListFleetsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListFleetsCommandInput extends ListFleetsRequest {
    }
    export interface ListFleetsCommandOutput extends ListFleetsResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Returns a list of fleets. You can optionally provide filters to retrieve specific fleets.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListFleetsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListFleetsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListFleetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFleetsCommandInput} for command's `input` shape.
        * @see {@link ListFleetsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListFleetsCommand extends $Command<ListFleetsCommandInput, ListFleetsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListFleetsCommandInput;
            constructor(input: ListFleetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFleetsCommandInput, ListFleetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListRobotApplicationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListRobotApplicationsRequest, ListRobotApplicationsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListRobotApplicationsCommandInput extends ListRobotApplicationsRequest {
    }
    export interface ListRobotApplicationsCommandOutput extends ListRobotApplicationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of robot application. You can optionally provide filters to retrieve
        *          specific robot applications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListRobotApplicationsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListRobotApplicationsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListRobotApplicationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRobotApplicationsCommandInput} for command's `input` shape.
        * @see {@link ListRobotApplicationsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListRobotApplicationsCommand extends $Command<ListRobotApplicationsCommandInput, ListRobotApplicationsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListRobotApplicationsCommandInput;
            constructor(input: ListRobotApplicationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRobotApplicationsCommandInput, ListRobotApplicationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListRobotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListRobotsRequest, ListRobotsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListRobotsCommandInput extends ListRobotsRequest {
    }
    export interface ListRobotsCommandOutput extends ListRobotsResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Returns a list of robots. You can optionally provide filters to retrieve specific robots.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListRobotsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListRobotsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListRobotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRobotsCommandInput} for command's `input` shape.
        * @see {@link ListRobotsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListRobotsCommand extends $Command<ListRobotsCommandInput, ListRobotsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListRobotsCommandInput;
            constructor(input: ListRobotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRobotsCommandInput, ListRobotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationApplicationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSimulationApplicationsRequest, ListSimulationApplicationsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListSimulationApplicationsCommandInput extends ListSimulationApplicationsRequest {
    }
    export interface ListSimulationApplicationsCommandOutput extends ListSimulationApplicationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of simulation applications. You can optionally provide filters to
        *          retrieve specific simulation applications. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListSimulationApplicationsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListSimulationApplicationsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListSimulationApplicationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSimulationApplicationsCommandInput} for command's `input` shape.
        * @see {@link ListSimulationApplicationsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListSimulationApplicationsCommand extends $Command<ListSimulationApplicationsCommandInput, ListSimulationApplicationsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListSimulationApplicationsCommandInput;
            constructor(input: ListSimulationApplicationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSimulationApplicationsCommandInput, ListSimulationApplicationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationJobBatchesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSimulationJobBatchesRequest, ListSimulationJobBatchesResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListSimulationJobBatchesCommandInput extends ListSimulationJobBatchesRequest {
    }
    export interface ListSimulationJobBatchesCommandOutput extends ListSimulationJobBatchesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list simulation job batches. You can optionally provide filters to retrieve
        *          specific simulation batch jobs. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListSimulationJobBatchesCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListSimulationJobBatchesCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListSimulationJobBatchesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSimulationJobBatchesCommandInput} for command's `input` shape.
        * @see {@link ListSimulationJobBatchesCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListSimulationJobBatchesCommand extends $Command<ListSimulationJobBatchesCommandInput, ListSimulationJobBatchesCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListSimulationJobBatchesCommandInput;
            constructor(input: ListSimulationJobBatchesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSimulationJobBatchesCommandInput, ListSimulationJobBatchesCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSimulationJobsRequest, ListSimulationJobsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListSimulationJobsCommandInput extends ListSimulationJobsRequest {
    }
    export interface ListSimulationJobsCommandOutput extends ListSimulationJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of simulation jobs. You can optionally provide filters to retrieve
        *          specific simulation jobs. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListSimulationJobsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListSimulationJobsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListSimulationJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSimulationJobsCommandInput} for command's `input` shape.
        * @see {@link ListSimulationJobsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListSimulationJobsCommand extends $Command<ListSimulationJobsCommandInput, ListSimulationJobsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListSimulationJobsCommandInput;
            constructor(input: ListSimulationJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSimulationJobsCommandInput, ListSimulationJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all tags on a AWS RoboMaker resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListTagsForResourceCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListTagsForResourceCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldExportJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorldExportJobsRequest, ListWorldExportJobsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListWorldExportJobsCommandInput extends ListWorldExportJobsRequest {
    }
    export interface ListWorldExportJobsCommandOutput extends ListWorldExportJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists world export jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListWorldExportJobsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListWorldExportJobsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListWorldExportJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorldExportJobsCommandInput} for command's `input` shape.
        * @see {@link ListWorldExportJobsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListWorldExportJobsCommand extends $Command<ListWorldExportJobsCommandInput, ListWorldExportJobsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListWorldExportJobsCommandInput;
            constructor(input: ListWorldExportJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorldExportJobsCommandInput, ListWorldExportJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldGenerationJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorldGenerationJobsRequest, ListWorldGenerationJobsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListWorldGenerationJobsCommandInput extends ListWorldGenerationJobsRequest {
    }
    export interface ListWorldGenerationJobsCommandOutput extends ListWorldGenerationJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists world generator jobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListWorldGenerationJobsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListWorldGenerationJobsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListWorldGenerationJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorldGenerationJobsCommandInput} for command's `input` shape.
        * @see {@link ListWorldGenerationJobsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListWorldGenerationJobsCommand extends $Command<ListWorldGenerationJobsCommandInput, ListWorldGenerationJobsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListWorldGenerationJobsCommandInput;
            constructor(input: ListWorldGenerationJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorldGenerationJobsCommandInput, ListWorldGenerationJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorldsRequest, ListWorldsResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListWorldsCommandInput extends ListWorldsRequest {
    }
    export interface ListWorldsCommandOutput extends ListWorldsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists worlds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListWorldsCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListWorldsCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListWorldsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorldsCommandInput} for command's `input` shape.
        * @see {@link ListWorldsCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListWorldsCommand extends $Command<ListWorldsCommandInput, ListWorldsCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListWorldsCommandInput;
            constructor(input: ListWorldsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorldsCommandInput, ListWorldsCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorldTemplatesRequest, ListWorldTemplatesResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface ListWorldTemplatesCommandInput extends ListWorldTemplatesRequest {
    }
    export interface ListWorldTemplatesCommandOutput extends ListWorldTemplatesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists world templates.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, ListWorldTemplatesCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, ListWorldTemplatesCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new ListWorldTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorldTemplatesCommandInput} for command's `input` shape.
        * @see {@link ListWorldTemplatesCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class ListWorldTemplatesCommand extends $Command<ListWorldTemplatesCommandInput, ListWorldTemplatesCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: ListWorldTemplatesCommandInput;
            constructor(input: ListWorldTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorldTemplatesCommandInput, ListWorldTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/RegisterRobotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterRobotRequest, RegisterRobotResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface RegisterRobotCommandInput extends RegisterRobotRequest {
    }
    export interface RegisterRobotCommandOutput extends RegisterRobotResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Registers a robot with a fleet.</p>
        *          <important>
        *             <p>This API is no longer supported and will throw an error if used.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, RegisterRobotCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, RegisterRobotCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new RegisterRobotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterRobotCommandInput} for command's `input` shape.
        * @see {@link RegisterRobotCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class RegisterRobotCommand extends $Command<RegisterRobotCommandInput, RegisterRobotCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: RegisterRobotCommandInput;
            constructor(input: RegisterRobotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterRobotCommandInput, RegisterRobotCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/RestartSimulationJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestartSimulationJobRequest, RestartSimulationJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface RestartSimulationJobCommandInput extends RestartSimulationJobRequest {
    }
    export interface RestartSimulationJobCommandOutput extends RestartSimulationJobResponse, __MetadataBearer {
    }
    /**
        * <p>Restarts a running simulation job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, RestartSimulationJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, RestartSimulationJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new RestartSimulationJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestartSimulationJobCommandInput} for command's `input` shape.
        * @see {@link RestartSimulationJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class RestartSimulationJobCommand extends $Command<RestartSimulationJobCommandInput, RestartSimulationJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: RestartSimulationJobCommandInput;
            constructor(input: RestartSimulationJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestartSimulationJobCommandInput, RestartSimulationJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/StartSimulationJobBatchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartSimulationJobBatchRequest, StartSimulationJobBatchResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface StartSimulationJobBatchCommandInput extends StartSimulationJobBatchRequest {
    }
    export interface StartSimulationJobBatchCommandOutput extends StartSimulationJobBatchResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a new simulation job batch. The batch is defined using one or more
        *             <code>SimulationJobRequest</code> objects. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, StartSimulationJobBatchCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, StartSimulationJobBatchCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new StartSimulationJobBatchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSimulationJobBatchCommandInput} for command's `input` shape.
        * @see {@link StartSimulationJobBatchCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class StartSimulationJobBatchCommand extends $Command<StartSimulationJobBatchCommandInput, StartSimulationJobBatchCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: StartSimulationJobBatchCommandInput;
            constructor(input: StartSimulationJobBatchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSimulationJobBatchCommandInput, StartSimulationJobBatchCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/SyncDeploymentJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SyncDeploymentJobRequest, SyncDeploymentJobResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface SyncDeploymentJobCommandInput extends SyncDeploymentJobRequest {
    }
    export interface SyncDeploymentJobCommandOutput extends SyncDeploymentJobResponse, __MetadataBearer {
    }
    /**
        * @deprecated
        *
        * <p>Syncrhonizes robots in a fleet to the latest deployment. This is helpful if robots were added after a deployment.</p>
        *          <important>
        *             <p>This API will no longer be supported as of May 2, 2022. Use it to remove resources that were created for Deployment Service.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, SyncDeploymentJobCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, SyncDeploymentJobCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new SyncDeploymentJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SyncDeploymentJobCommandInput} for command's `input` shape.
        * @see {@link SyncDeploymentJobCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class SyncDeploymentJobCommand extends $Command<SyncDeploymentJobCommandInput, SyncDeploymentJobCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: SyncDeploymentJobCommandInput;
            constructor(input: SyncDeploymentJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SyncDeploymentJobCommandInput, SyncDeploymentJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds or edits tags for a AWS RoboMaker resource.</p>
        *          <p>Each tag consists of a tag key and a tag value. Tag keys and tag values are both
        *          required, but tag values can be empty strings. </p>
        *          <p>For information about the rules that apply to tag keys and tag values, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/allocation-tag-restrictions.html">User-Defined Tag Restrictions</a> in the <i>AWS Billing and Cost Management
        *             User Guide</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, TagResourceCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, TagResourceCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified AWS RoboMaker resource.</p>
        *          <p>To remove a tag, specify the tag key. To change the tag value of an existing tag key,
        *          use <a href="https://docs.aws.amazon.com/robomaker/latest/dg/API_TagResource.html">
        *                <code>TagResource</code>
        *             </a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, UntagResourceCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, UntagResourceCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateRobotApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateRobotApplicationRequest, UpdateRobotApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface UpdateRobotApplicationCommandInput extends UpdateRobotApplicationRequest {
    }
    export interface UpdateRobotApplicationCommandOutput extends UpdateRobotApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a robot application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, UpdateRobotApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, UpdateRobotApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new UpdateRobotApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRobotApplicationCommandInput} for command's `input` shape.
        * @see {@link UpdateRobotApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class UpdateRobotApplicationCommand extends $Command<UpdateRobotApplicationCommandInput, UpdateRobotApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: UpdateRobotApplicationCommandInput;
            constructor(input: UpdateRobotApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRobotApplicationCommandInput, UpdateRobotApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateSimulationApplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSimulationApplicationRequest, UpdateSimulationApplicationResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface UpdateSimulationApplicationCommandInput extends UpdateSimulationApplicationRequest {
    }
    export interface UpdateSimulationApplicationCommandOutput extends UpdateSimulationApplicationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a simulation application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, UpdateSimulationApplicationCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, UpdateSimulationApplicationCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new UpdateSimulationApplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSimulationApplicationCommandInput} for command's `input` shape.
        * @see {@link UpdateSimulationApplicationCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class UpdateSimulationApplicationCommand extends $Command<UpdateSimulationApplicationCommandInput, UpdateSimulationApplicationCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: UpdateSimulationApplicationCommandInput;
            constructor(input: UpdateSimulationApplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSimulationApplicationCommandInput, UpdateSimulationApplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateWorldTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWorldTemplateRequest, UpdateWorldTemplateResponse } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0";
    import { RoboMakerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient";
    export interface UpdateWorldTemplateCommandInput extends UpdateWorldTemplateRequest {
    }
    export interface UpdateWorldTemplateCommandOutput extends UpdateWorldTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a world template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RoboMakerClient, UpdateWorldTemplateCommand } from "@aws-sdk/client-robomaker"; // ES Modules import
        * // const { RoboMakerClient, UpdateWorldTemplateCommand } = require("@aws-sdk/client-robomaker"); // CommonJS import
        * const client = new RoboMakerClient(config);
        * const command = new UpdateWorldTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWorldTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateWorldTemplateCommandOutput} for command's `response` shape.
        * @see {@link RoboMakerClientResolvedConfig | config} for RoboMakerClient's `config` shape.
        *
        */
    export class UpdateWorldTemplateCommand extends $Command<UpdateWorldTemplateCommandInput, UpdateWorldTemplateCommandOutput, RoboMakerClientResolvedConfig> {
            readonly input: UpdateWorldTemplateCommandInput;
            constructor(input: UpdateWorldTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RoboMakerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWorldTemplateCommandInput, UpdateWorldTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/RoboMakerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchDeleteWorldsCommandInput, BatchDeleteWorldsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/BatchDeleteWorldsCommand";
    import { BatchDescribeSimulationJobCommandInput, BatchDescribeSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/BatchDescribeSimulationJobCommand";
    import { CancelDeploymentJobCommandInput, CancelDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelDeploymentJobCommand";
    import { CancelSimulationJobBatchCommandInput, CancelSimulationJobBatchCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelSimulationJobBatchCommand";
    import { CancelSimulationJobCommandInput, CancelSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelSimulationJobCommand";
    import { CancelWorldExportJobCommandInput, CancelWorldExportJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelWorldExportJobCommand";
    import { CancelWorldGenerationJobCommandInput, CancelWorldGenerationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CancelWorldGenerationJobCommand";
    import { CreateDeploymentJobCommandInput, CreateDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateDeploymentJobCommand";
    import { CreateFleetCommandInput, CreateFleetCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateFleetCommand";
    import { CreateRobotApplicationCommandInput, CreateRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotApplicationCommand";
    import { CreateRobotApplicationVersionCommandInput, CreateRobotApplicationVersionCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotApplicationVersionCommand";
    import { CreateRobotCommandInput, CreateRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateRobotCommand";
    import { CreateSimulationApplicationCommandInput, CreateSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationApplicationCommand";
    import { CreateSimulationApplicationVersionCommandInput, CreateSimulationApplicationVersionCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationApplicationVersionCommand";
    import { CreateSimulationJobCommandInput, CreateSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateSimulationJobCommand";
    import { CreateWorldExportJobCommandInput, CreateWorldExportJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldExportJobCommand";
    import { CreateWorldGenerationJobCommandInput, CreateWorldGenerationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldGenerationJobCommand";
    import { CreateWorldTemplateCommandInput, CreateWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/CreateWorldTemplateCommand";
    import { DeleteFleetCommandInput, DeleteFleetCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteFleetCommand";
    import { DeleteRobotApplicationCommandInput, DeleteRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteRobotApplicationCommand";
    import { DeleteRobotCommandInput, DeleteRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteRobotCommand";
    import { DeleteSimulationApplicationCommandInput, DeleteSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteSimulationApplicationCommand";
    import { DeleteWorldTemplateCommandInput, DeleteWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeleteWorldTemplateCommand";
    import { DeregisterRobotCommandInput, DeregisterRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DeregisterRobotCommand";
    import { DescribeDeploymentJobCommandInput, DescribeDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeDeploymentJobCommand";
    import { DescribeFleetCommandInput, DescribeFleetCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeFleetCommand";
    import { DescribeRobotApplicationCommandInput, DescribeRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeRobotApplicationCommand";
    import { DescribeRobotCommandInput, DescribeRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeRobotCommand";
    import { DescribeSimulationApplicationCommandInput, DescribeSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationApplicationCommand";
    import { DescribeSimulationJobBatchCommandInput, DescribeSimulationJobBatchCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationJobBatchCommand";
    import { DescribeSimulationJobCommandInput, DescribeSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeSimulationJobCommand";
    import { DescribeWorldCommandInput, DescribeWorldCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldCommand";
    import { DescribeWorldExportJobCommandInput, DescribeWorldExportJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldExportJobCommand";
    import { DescribeWorldGenerationJobCommandInput, DescribeWorldGenerationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldGenerationJobCommand";
    import { DescribeWorldTemplateCommandInput, DescribeWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/DescribeWorldTemplateCommand";
    import { GetWorldTemplateBodyCommandInput, GetWorldTemplateBodyCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/GetWorldTemplateBodyCommand";
    import { ListDeploymentJobsCommandInput, ListDeploymentJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListDeploymentJobsCommand";
    import { ListFleetsCommandInput, ListFleetsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListFleetsCommand";
    import { ListRobotApplicationsCommandInput, ListRobotApplicationsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListRobotApplicationsCommand";
    import { ListRobotsCommandInput, ListRobotsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListRobotsCommand";
    import { ListSimulationApplicationsCommandInput, ListSimulationApplicationsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationApplicationsCommand";
    import { ListSimulationJobBatchesCommandInput, ListSimulationJobBatchesCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationJobBatchesCommand";
    import { ListSimulationJobsCommandInput, ListSimulationJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListSimulationJobsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListTagsForResourceCommand";
    import { ListWorldExportJobsCommandInput, ListWorldExportJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldExportJobsCommand";
    import { ListWorldGenerationJobsCommandInput, ListWorldGenerationJobsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldGenerationJobsCommand";
    import { ListWorldsCommandInput, ListWorldsCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldsCommand";
    import { ListWorldTemplatesCommandInput, ListWorldTemplatesCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/ListWorldTemplatesCommand";
    import { RegisterRobotCommandInput, RegisterRobotCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/RegisterRobotCommand";
    import { RestartSimulationJobCommandInput, RestartSimulationJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/RestartSimulationJobCommand";
    import { StartSimulationJobBatchCommandInput, StartSimulationJobBatchCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/StartSimulationJobBatchCommand";
    import { SyncDeploymentJobCommandInput, SyncDeploymentJobCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/SyncDeploymentJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UntagResourceCommand";
    import { UpdateRobotApplicationCommandInput, UpdateRobotApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateRobotApplicationCommand";
    import { UpdateSimulationApplicationCommandInput, UpdateSimulationApplicationCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateSimulationApplicationCommand";
    import { UpdateWorldTemplateCommandInput, UpdateWorldTemplateCommandOutput } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/commands/UpdateWorldTemplateCommand";
    export type ServiceInputTypes = BatchDeleteWorldsCommandInput | BatchDescribeSimulationJobCommandInput | CancelDeploymentJobCommandInput | CancelSimulationJobBatchCommandInput | CancelSimulationJobCommandInput | CancelWorldExportJobCommandInput | CancelWorldGenerationJobCommandInput | CreateDeploymentJobCommandInput | CreateFleetCommandInput | CreateRobotApplicationCommandInput | CreateRobotApplicationVersionCommandInput | CreateRobotCommandInput | CreateSimulationApplicationCommandInput | CreateSimulationApplicationVersionCommandInput | CreateSimulationJobCommandInput | CreateWorldExportJobCommandInput | CreateWorldGenerationJobCommandInput | CreateWorldTemplateCommandInput | DeleteFleetCommandInput | DeleteRobotApplicationCommandInput | DeleteRobotCommandInput | DeleteSimulationApplicationCommandInput | DeleteWorldTemplateCommandInput | DeregisterRobotCommandInput | DescribeDeploymentJobCommandInput | DescribeFleetCommandInput | DescribeRobotApplicationCommandInput | DescribeRobotCommandInput | DescribeSimulationApplicationCommandInput | DescribeSimulationJobBatchCommandInput | DescribeSimulationJobCommandInput | DescribeWorldCommandInput | DescribeWorldExportJobCommandInput | DescribeWorldGenerationJobCommandInput | DescribeWorldTemplateCommandInput | GetWorldTemplateBodyCommandInput | ListDeploymentJobsCommandInput | ListFleetsCommandInput | ListRobotApplicationsCommandInput | ListRobotsCommandInput | ListSimulationApplicationsCommandInput | ListSimulationJobBatchesCommandInput | ListSimulationJobsCommandInput | ListTagsForResourceCommandInput | ListWorldExportJobsCommandInput | ListWorldGenerationJobsCommandInput | ListWorldTemplatesCommandInput | ListWorldsCommandInput | RegisterRobotCommandInput | RestartSimulationJobCommandInput | StartSimulationJobBatchCommandInput | SyncDeploymentJobCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateRobotApplicationCommandInput | UpdateSimulationApplicationCommandInput | UpdateWorldTemplateCommandInput;
    export type ServiceOutputTypes = BatchDeleteWorldsCommandOutput | BatchDescribeSimulationJobCommandOutput | CancelDeploymentJobCommandOutput | CancelSimulationJobBatchCommandOutput | CancelSimulationJobCommandOutput | CancelWorldExportJobCommandOutput | CancelWorldGenerationJobCommandOutput | CreateDeploymentJobCommandOutput | CreateFleetCommandOutput | CreateRobotApplicationCommandOutput | CreateRobotApplicationVersionCommandOutput | CreateRobotCommandOutput | CreateSimulationApplicationCommandOutput | CreateSimulationApplicationVersionCommandOutput | CreateSimulationJobCommandOutput | CreateWorldExportJobCommandOutput | CreateWorldGenerationJobCommandOutput | CreateWorldTemplateCommandOutput | DeleteFleetCommandOutput | DeleteRobotApplicationCommandOutput | DeleteRobotCommandOutput | DeleteSimulationApplicationCommandOutput | DeleteWorldTemplateCommandOutput | DeregisterRobotCommandOutput | DescribeDeploymentJobCommandOutput | DescribeFleetCommandOutput | DescribeRobotApplicationCommandOutput | DescribeRobotCommandOutput | DescribeSimulationApplicationCommandOutput | DescribeSimulationJobBatchCommandOutput | DescribeSimulationJobCommandOutput | DescribeWorldCommandOutput | DescribeWorldExportJobCommandOutput | DescribeWorldGenerationJobCommandOutput | DescribeWorldTemplateCommandOutput | GetWorldTemplateBodyCommandOutput | ListDeploymentJobsCommandOutput | ListFleetsCommandOutput | ListRobotApplicationsCommandOutput | ListRobotsCommandOutput | ListSimulationApplicationsCommandOutput | ListSimulationJobBatchesCommandOutput | ListSimulationJobsCommandOutput | ListTagsForResourceCommandOutput | ListWorldExportJobsCommandOutput | ListWorldGenerationJobsCommandOutput | ListWorldTemplatesCommandOutput | ListWorldsCommandOutput | RegisterRobotCommandOutput | RestartSimulationJobCommandOutput | StartSimulationJobBatchCommandOutput | SyncDeploymentJobCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateRobotApplicationCommandOutput | UpdateSimulationApplicationCommandOutput | UpdateWorldTemplateCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type RoboMakerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of RoboMakerClient class constructor that set the region, credentials and other options.
        */
    export interface RoboMakerClientConfig extends RoboMakerClientConfigType {
    }
    type RoboMakerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of RoboMakerClient class. This is resolved and normalized from the {@link RoboMakerClientConfig | constructor configuration interface}.
        */
    export interface RoboMakerClientResolvedConfig extends RoboMakerClientResolvedConfigType {
    }
    /**
        * <p>This section provides documentation for the AWS RoboMaker API operations.</p>
        */
    export class RoboMakerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, RoboMakerClientResolvedConfig> {
            /**
                * The resolved configuration of RoboMakerClient class. This is resolved and normalized from the {@link RoboMakerClientConfig | constructor configuration interface}.
                */
            readonly config: RoboMakerClientResolvedConfig;
            constructor(configuration: RoboMakerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { RoboMakerServiceException as __BaseException } from "@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/RoboMakerServiceException";
    export enum Architecture {
            ARM64 = "ARM64",
            ARMHF = "ARMHF",
            X86_64 = "X86_64"
    }
    export interface BatchDeleteWorldsRequest {
            /**
                * <p>A list of Amazon Resource Names (arns) that correspond to worlds to delete.</p>
                */
            worlds: string[] | undefined;
    }
    export namespace BatchDeleteWorldsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteWorldsRequest) => any;
    }
    export interface BatchDeleteWorldsResponse {
            /**
                * <p>A list of unprocessed worlds associated with the call. These worlds were not
                *          deleted.</p>
                */
            unprocessedWorlds?: string[];
    }
    export namespace BatchDeleteWorldsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteWorldsResponse) => any;
    }
    /**
        * <p>AWS RoboMaker experienced a service issue. Try your call again.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>A parameter specified in a request is not valid, is unsupported, or cannot be used. The
        *          returned message provides an explanation of the error value.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>AWS RoboMaker is temporarily unable to process the request. Try your call again.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export interface BatchDescribeSimulationJobRequest {
            /**
                * <p>A list of Amazon Resource Names (ARNs) of simulation jobs to describe.</p>
                */
            jobs: string[] | undefined;
    }
    export namespace BatchDescribeSimulationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeSimulationJobRequest) => any;
    }
    export enum ComputeType {
            CPU = "CPU",
            GPU_AND_CPU = "GPU_AND_CPU"
    }
    /**
        * <p>Compute information for the simulation job</p>
        */
    export interface ComputeResponse {
            /**
                * <p>The simulation unit limit. Your simulation is allocated CPU and memory proportional to
                *          the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are
                *          only billed for the SU utilization you consume up to the maximum value provided. The
                *          default is 15. </p>
                */
            simulationUnitLimit?: number;
            /**
                * <p>Compute type response information for the simulation job.</p>
                */
            computeType?: ComputeType | string;
            /**
                * <p>Compute GPU unit limit for the simulation job. It is the same as the number of GPUs
                *          allocated to the SimulationJob.</p>
                */
            gpuUnitLimit?: number;
    }
    export namespace ComputeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComputeResponse) => any;
    }
    /**
        * <p>Information about S3 keys.</p>
        */
    export interface S3KeyOutput {
            /**
                * <p>The S3 key.</p>
                */
            s3Key?: string;
            /**
                * <p>The etag for the object.</p>
                */
            etag?: string;
    }
    export namespace S3KeyOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3KeyOutput) => any;
    }
    export enum DataSourceType {
            Archive = "Archive",
            File = "File",
            Prefix = "Prefix"
    }
    /**
        * <p>Information about a data source.</p>
        */
    export interface DataSource {
            /**
                * <p>The name of the data source.</p>
                */
            name?: string;
            /**
                * <p>The S3 bucket where the data files are located.</p>
                */
            s3Bucket?: string;
            /**
                * <p>The list of S3 keys identifying the data source files.</p>
                */
            s3Keys?: S3KeyOutput[];
            /**
                * <p>The data type for the data source that you're using for your container image or
                *          simulation job. You can use this field to specify whether your data source is an Archive,
                *          an Amazon S3 prefix, or a file.</p>
                *          <p>If you don't specify a field, the default value is <code>File</code>.</p>
                */
            type?: DataSourceType | string;
            /**
                * <p>The location where your files are mounted in the container image.</p>
                *          <p>If you've specified the <code>type</code> of the data source as an <code>Archive</code>,
                *          you must provide an Amazon S3 object key to your archive. The object key must point to
                *          either a <code>.zip</code> or <code>.tar.gz</code> file.</p>
                *          <p>If you've specified the <code>type</code> of the data source as a <code>Prefix</code>,
                *          you provide the Amazon S3 prefix that points to the files that you are using for your data
                *          source.</p>
                *          <p>If you've specified the <code>type</code> of the data source as a <code>File</code>, you
                *          provide the Amazon S3 path to the file that you're using as your data source.</p>
                */
            destination?: string;
    }
    export namespace DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSource) => any;
    }
    export enum FailureBehavior {
            Continue = "Continue",
            Fail = "Fail"
    }
    export enum SimulationJobErrorCode {
            BadPermissionsCloudwatchLogs = "BadPermissionsCloudwatchLogs",
            BadPermissionsRobotApplication = "BadPermissionsRobotApplication",
            BadPermissionsS3Object = "BadPermissionsS3Object",
            BadPermissionsS3Output = "BadPermissionsS3Output",
            BadPermissionsSimulationApplication = "BadPermissionsSimulationApplication",
            BadPermissionsUserCredentials = "BadPermissionsUserCredentials",
            BatchCanceled = "BatchCanceled",
            BatchTimedOut = "BatchTimedOut",
            ENILimitExceeded = "ENILimitExceeded",
            InternalServiceError = "InternalServiceError",
            InvalidBundleRobotApplication = "InvalidBundleRobotApplication",
            InvalidBundleSimulationApplication = "InvalidBundleSimulationApplication",
            InvalidInput = "InvalidInput",
            InvalidS3Resource = "InvalidS3Resource",
            LimitExceeded = "LimitExceeded",
            MismatchedEtag = "MismatchedEtag",
            RequestThrottled = "RequestThrottled",
            ResourceNotFound = "ResourceNotFound",
            RobotApplicationCrash = "RobotApplicationCrash",
            RobotApplicationHealthCheckFailure = "RobotApplicationHealthCheckFailure",
            RobotApplicationVersionMismatchedEtag = "RobotApplicationVersionMismatchedEtag",
            SimulationApplicationCrash = "SimulationApplicationCrash",
            SimulationApplicationHealthCheckFailure = "SimulationApplicationHealthCheckFailure",
            SimulationApplicationVersionMismatchedEtag = "SimulationApplicationVersionMismatchedEtag",
            SubnetIpLimitExceeded = "SubnetIpLimitExceeded",
            ThrottlingError = "ThrottlingError",
            UploadContentMismatchError = "UploadContentMismatchError",
            WrongRegionRobotApplication = "WrongRegionRobotApplication",
            WrongRegionS3Bucket = "WrongRegionS3Bucket",
            WrongRegionS3Output = "WrongRegionS3Output",
            WrongRegionSimulationApplication = "WrongRegionSimulationApplication"
    }
    /**
        * <p>The logging configuration.</p>
        */
    export interface LoggingConfig {
            /**
                * @deprecated
                *
                * <p>A boolean indicating whether to record all ROS topics.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            recordAllRosTopics?: boolean;
    }
    export namespace LoggingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingConfig) => any;
    }
    /**
        * <p>Describes a network interface.</p>
        */
    export interface NetworkInterface {
            /**
                * <p>The ID of the network interface.</p>
                */
            networkInterfaceId?: string;
            /**
                * <p>The IPv4 address of the network interface within the subnet.</p>
                */
            privateIpAddress?: string;
            /**
                * <p>The IPv4 public address of the network interface.</p>
                */
            publicIpAddress?: string;
    }
    export namespace NetworkInterface {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NetworkInterface) => any;
    }
    /**
        * <p>The output location.</p>
        */
    export interface OutputLocation {
            /**
                * <p>The S3 bucket for output.</p>
                */
            s3Bucket?: string;
            /**
                * <p>The S3 folder in the <code>s3Bucket</code> where output files will be placed.</p>
                */
            s3Prefix?: string;
    }
    export namespace OutputLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputLocation) => any;
    }
    /**
        * <p>An object representing a port mapping.</p>
        */
    export interface PortMapping {
            /**
                * <p>The port number on the simulation job instance to use as a remote connection point.
                *          </p>
                */
            jobPort: number | undefined;
            /**
                * <p>The port number on the application.</p>
                */
            applicationPort: number | undefined;
            /**
                * <p>A Boolean indicating whether to enable this port mapping on public IP.</p>
                */
            enableOnPublicIp?: boolean;
    }
    export namespace PortMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortMapping) => any;
    }
    /**
        * <p>Configuration information for port forwarding.</p>
        */
    export interface PortForwardingConfig {
            /**
                * <p>The port mappings for the configuration.</p>
                */
            portMappings?: PortMapping[];
    }
    export namespace PortForwardingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortForwardingConfig) => any;
    }
    /**
        * <p>Information about a launch configuration.</p>
        */
    export interface LaunchConfig {
            /**
                * <p>The package name.</p>
                */
            packageName?: string;
            /**
                * <p>The launch file name.</p>
                */
            launchFile?: string;
            /**
                * <p>The environment variables for the application launch.</p>
                */
            environmentVariables?: Record<string, string>;
            /**
                * <p>The port forwarding configuration.</p>
                */
            portForwardingConfig?: PortForwardingConfig;
            /**
                * <p>Boolean indicating whether a streaming session will be configured for the application.
                *          If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with
                *          your application as it is running in the simulation. You must configure and launch the
                *          component. It must have a graphical user interface. </p>
                */
            streamUI?: boolean;
            /**
                * <p>If you've specified <code>General</code> as the value for your <code>RobotSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
                *          <p>If you've specified <code>SimulationRuntime</code> as the value for your <code>SimulationSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
                */
            command?: string[];
    }
    export namespace LaunchConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LaunchConfig) => any;
    }
    export enum ExitBehavior {
            FAIL = "FAIL",
            RESTART = "RESTART"
    }
    /**
        * <p>Information about a tool. Tools are used in a simulation job.</p>
        */
    export interface Tool {
            /**
                * <p>Boolean indicating whether a streaming session will be configured for the tool. If
                *             <code>True</code>, AWS RoboMaker will configure a connection so you can interact with
                *          the tool as it is running in the simulation. It must have a graphical user interface. The
                *          default is <code>False</code>. </p>
                */
            streamUI?: boolean;
            /**
                * <p>The name of the tool.</p>
                */
            name: string | undefined;
            /**
                * <p>Command-line arguments for the tool. It must include the tool executable name.</p>
                */
            command: string | undefined;
            /**
                * <p>Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default
                *          is <code>False</code>. </p>
                */
            streamOutputToCloudWatch?: boolean;
            /**
                * <p>Exit behavior determines what happens when your tool quits running. <code>RESTART</code>
                *          will cause your tool to be restarted. <code>FAIL</code> will cause your job to exit. The
                *          default is <code>RESTART</code>. </p>
                */
            exitBehavior?: ExitBehavior | string;
    }
    export namespace Tool {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tool) => any;
    }
    export enum UploadBehavior {
            UPLOAD_ON_TERMINATE = "UPLOAD_ON_TERMINATE",
            UPLOAD_ROLLING_AUTO_REMOVE = "UPLOAD_ROLLING_AUTO_REMOVE"
    }
    /**
        * <p>Provides upload configuration information. Files are uploaded from the simulation job to
        *          a location you specify. </p>
        */
    export interface UploadConfiguration {
            /**
                * <p>A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the
                *          simulation output location to determine the final path. </p>
                *          <p> For example, if your simulation output location is <code>s3://my-bucket</code> and your
                *          upload configuration name is <code>robot-test</code>, your files will be uploaded to
                *             <code>s3://my-bucket/<simid>/<runid>/robot-test</code>. </p>
                */
            name: string | undefined;
            /**
                * <p> Specifies the path of the file(s) to upload. Standard Unix glob matching rules are
                *          accepted, with the addition of <code>**</code> as a <i>super asterisk</i>.
                *          For example, specifying <code>/var/log/**.log</code> causes all .log files in the
                *             <code>/var/log</code> directory tree to be collected. For more examples, see <a href="https://github.com/gobwas/glob">Glob Library</a>. </p>
                */
            path: string | undefined;
            /**
                * <p>Specifies when to upload the files:</p>
                *          <dl>
                *             <dt>UPLOAD_ON_TERMINATE</dt>
                *             <dd>
                *                <p>Matching files are uploaded once the simulation enters the
                *                      <code>TERMINATING</code> state. Matching files are not uploaded until all of
                *                   your code (including tools) have stopped. </p>
                *                <p>If there is a problem uploading a file, the upload is retried. If problems
                *                   persist, no further upload attempts will be made.</p>
                *             </dd>
                *             <dt>UPLOAD_ROLLING_AUTO_REMOVE</dt>
                *             <dd>
                *                <p>Matching files are uploaded as they are created. They are deleted after they
                *                   are uploaded. The specified path is checked every 5 seconds. A final check is made
                *                   when all of your code (including tools) have stopped. </p>
                *             </dd>
                *          </dl>
                */
            uploadBehavior: UploadBehavior | string | undefined;
    }
    export namespace UploadConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadConfiguration) => any;
    }
    /**
        * <p>Application configuration information for a robot.</p>
        */
    export interface RobotApplicationConfig {
            /**
                * <p>The application information for the robot application.</p>
                */
            application: string | undefined;
            /**
                * <p>The version of the robot application.</p>
                */
            applicationVersion?: string;
            /**
                * <p>The launch configuration for the robot application.</p>
                */
            launchConfig: LaunchConfig | undefined;
            /**
                * <p>The upload configurations for the robot application.</p>
                */
            uploadConfigurations?: UploadConfiguration[];
            /**
                * @deprecated
                *
                * <p>A Boolean indicating whether to use default upload configurations. By default,
                *             <code>.ros</code> and <code>.gazebo</code> files are uploaded when the application
                *          terminates and all ROS topics will be recorded.</p>
                *          <p>If you set this value, you must specify an <code>outputLocation</code>.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            useDefaultUploadConfigurations?: boolean;
            /**
                * <p>Information about tools configured for the robot application.</p>
                */
            tools?: Tool[];
            /**
                * @deprecated
                *
                * <p>A Boolean indicating whether to use default robot application tools. The default tools
                *          are rviz, rqt, terminal and rosbag record. The default is <code>False</code>.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            useDefaultTools?: boolean;
    }
    export namespace RobotApplicationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RobotApplicationConfig) => any;
    }
    /**
        * <p>Configuration information for a world.</p>
        */
    export interface WorldConfig {
            /**
                * <p>The world generated by Simulation WorldForge.</p>
                */
            world?: string;
    }
    export namespace WorldConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorldConfig) => any;
    }
    /**
        * <p>Information about a simulation application configuration.</p>
        */
    export interface SimulationApplicationConfig {
            /**
                * <p>The application information for the simulation application.</p>
                */
            application: string | undefined;
            /**
                * <p>The version of the simulation application.</p>
                */
            applicationVersion?: string;
            /**
                * <p>The launch configuration for the simulation application.</p>
                */
            launchConfig: LaunchConfig | undefined;
            /**
                * <p>Information about upload configurations for the simulation application.</p>
                */
            uploadConfigurations?: UploadConfiguration[];
            /**
                * <p>A list of world configurations.</p>
                */
            worldConfigs?: WorldConfig[];
            /**
                * @deprecated
                *
                * <p>A Boolean indicating whether to use default upload configurations. By default,
                *             <code>.ros</code> and <code>.gazebo</code> files are uploaded when the application
                *          terminates and all ROS topics will be recorded.</p>
                *          <p>If you set this value, you must specify an <code>outputLocation</code>.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            useDefaultUploadConfigurations?: boolean;
            /**
                * <p>Information about tools configured for the simulation application.</p>
                */
            tools?: Tool[];
            /**
                * @deprecated
                *
                * <p>A Boolean indicating whether to use default simulation application tools. The default
                *          tools are rviz, rqt, terminal and rosbag record. The default is <code>False</code>.</p>
                *          <important>
                *             <p>This API is no longer supported and will throw an error if used.</p>
                *          </important>
                */
            useDefaultTools?: boolean;
    }
    export namespace SimulationApplicationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulationApplicationConfig) => any;
    }
    export enum SimulationJobStatus {
            Canceled = "Canceled",
            Completed = "Completed",
            Failed = "Failed",
            Pending = "Pending",
            Preparing = "Preparing",
            Restarting = "Restarting",
            Running = "Running",
            RunningFailed = "RunningFailed",
            Terminated = "Terminated",
            Terminating = "Terminating"
    }
    /**
        * <p>VPC configuration associated with your simulation job.</p>
        */
    export interface VPCConfigResponse {
            /**
                * <p>A list of subnet IDs associated with the simulation job.</p>
                */
            subnets?: string[];
            /**
                * <p>A list of security group IDs associated with the simulation job.</p>
                */
            securityGroups?: string[];
            /**
                * <p>The VPC ID associated with your simulation job.</p>
                */
            vpcId?: string;
            /**
                * <p>A boolean indicating if a public IP was assigned.</p>
                */
            assignPublicIp?: boolean;
    }
    export namespace VPCConfigResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VPCConfigResponse) => any;
    }
    /**
        * <p>Information about a simulation job.</p>
        */
    export interface SimulationJob {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation job.</p>
                */
            arn?: string;
            /**
                * <p>The name of the simulation job.</p>
                */
            name?: string;
            /**
                * <p>Status of the simulation job.</p>
                */
            status?: SimulationJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job was last
                *          started.</p>
                */
            lastStartedAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The failure behavior the simulation job.</p>
                *          <dl>
                *             <dt>Continue</dt>
                *             <dd>
                *                <p>Leaves the host running for its maximum timeout duration after a
                *                      <code>4XX</code> error code.</p>
                *             </dd>
                *             <dt>Fail</dt>
                *             <dd>
                *                <p>Stop the simulation job and terminate the instance.</p>
                *             </dd>
                *          </dl>
                */
            failureBehavior?: FailureBehavior | string;
            /**
                * <p>The failure code of the simulation job if it failed.</p>
                */
            failureCode?: SimulationJobErrorCode | string;
            /**
                * <p>The reason why the simulation job failed.</p>
                */
            failureReason?: string;
            /**
                * <p>A unique identifier for this <code>SimulationJob</code> request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>Location for output files generated by the simulation job.</p>
                */
            outputLocation?: OutputLocation;
            /**
                * <p>The logging configuration.</p>
                */
            loggingConfig?: LoggingConfig;
            /**
                * <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200
                *          seconds) or less.</p>
                */
            maxJobDurationInSeconds?: number;
            /**
                * <p>The simulation job execution duration in milliseconds.</p>
                */
            simulationTimeMillis?: number;
            /**
                * <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified
                *          in its associated policies on your behalf. This is how credentials are passed in to your
                *          simulation job. </p>
                */
            iamRole?: string;
            /**
                * <p>A list of robot applications.</p>
                */
            robotApplications?: RobotApplicationConfig[];
            /**
                * <p>A list of simulation applications.</p>
                */
            simulationApplications?: SimulationApplicationConfig[];
            /**
                * <p>The data sources for the simulation job.</p>
                */
            dataSources?: DataSource[];
            /**
                * <p>A map that contains tag keys and tag values that are attached to the simulation
                *          job.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>VPC configuration information.</p>
                */
            vpcConfig?: VPCConfigResponse;
            /**
                * <p>Information about a network interface.</p>
                */
            networkInterface?: NetworkInterface;
            /**
                * <p>Compute information for the simulation job</p>
                */
            compute?: ComputeResponse;
    }
    export namespace SimulationJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulationJob) => any;
    }
    export interface BatchDescribeSimulationJobResponse {
            /**
                * <p>A list of simulation jobs.</p>
                */
            jobs?: SimulationJob[];
            /**
                * <p>A list of unprocessed simulation job Amazon Resource Names (ARNs).</p>
                */
            unprocessedJobs?: string[];
    }
    export namespace BatchDescribeSimulationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDescribeSimulationJobResponse) => any;
    }
    /**
        * <p>The specified resource does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Information about the batch policy.</p>
        */
    export interface BatchPolicy {
            /**
                * <p>The amount of time, in seconds, to wait for the batch to complete.
                *
                *       </p>
                *          <p>If a batch times out, and there are pending requests that were failing due to an
                *          internal failure (like <code>InternalServiceError</code>), they will be moved to the failed
                *          list and the batch status will be <code>Failed</code>. If the pending requests were failing
                *          for any other reason, the failed pending requests will be moved to the failed list and the
                *          batch status will be <code>TimedOut</code>. </p>
                */
            timeoutInSeconds?: number;
            /**
                * <p>The number of active simulation jobs create as part of the batch that can be in an
                *          active state at the same time. </p>
                *          <p>Active states include: <code>Pending</code>,<code>Preparing</code>,
                *          <code>Running</code>, <code>Restarting</code>, <code>RunningFailed</code> and
                *             <code>Terminating</code>. All other states are terminal states. </p>
                */
            maxConcurrency?: number;
    }
    export namespace BatchPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchPolicy) => any;
    }
    export interface CancelDeploymentJobRequest {
            /**
                * <p>The deployment job ARN to cancel.</p>
                */
            job: string | undefined;
    }
    export namespace CancelDeploymentJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelDeploymentJobRequest) => any;
    }
    export interface CancelDeploymentJobResponse {
    }
    export namespace CancelDeploymentJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelDeploymentJobResponse) => any;
    }
    export interface CancelSimulationJobRequest {
            /**
                * <p>The simulation job ARN to cancel.</p>
                */
            job: string | undefined;
    }
    export namespace CancelSimulationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelSimulationJobRequest) => any;
    }
    export interface CancelSimulationJobResponse {
    }
    export namespace CancelSimulationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelSimulationJobResponse) => any;
    }
    export interface CancelSimulationJobBatchRequest {
            /**
                * <p>The id of the batch to cancel.</p>
                */
            batch: string | undefined;
    }
    export namespace CancelSimulationJobBatchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelSimulationJobBatchRequest) => any;
    }
    export interface CancelSimulationJobBatchResponse {
    }
    export namespace CancelSimulationJobBatchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelSimulationJobBatchResponse) => any;
    }
    export interface CancelWorldExportJobRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world export job to cancel.</p>
                */
            job: string | undefined;
    }
    export namespace CancelWorldExportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelWorldExportJobRequest) => any;
    }
    export interface CancelWorldExportJobResponse {
    }
    export namespace CancelWorldExportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelWorldExportJobResponse) => any;
    }
    export interface CancelWorldGenerationJobRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world generator job to cancel.</p>
                */
            job: string | undefined;
    }
    export namespace CancelWorldGenerationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelWorldGenerationJobRequest) => any;
    }
    export interface CancelWorldGenerationJobResponse {
    }
    export namespace CancelWorldGenerationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelWorldGenerationJobResponse) => any;
    }
    /**
        * <p>Compute information for the simulation job.</p>
        */
    export interface Compute {
            /**
                * <p>The simulation unit limit. Your simulation is allocated CPU and memory proportional to
                *          the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are
                *         only billed for the SU utilization you consume up to the maximum value provided. The
                *          default is 15. </p>
                */
            simulationUnitLimit?: number;
            /**
                * <p>Compute type information for the simulation job.</p>
                */
            computeType?: ComputeType | string;
            /**
                * <p>Compute GPU unit limit for the simulation job. It is the same as the number of GPUs
                *         allocated to the SimulationJob.</p>
                */
            gpuUnitLimit?: number;
    }
    export namespace Compute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Compute) => any;
    }
    /**
        * <p>The failure percentage threshold percentage was met.</p>
        */
    export class ConcurrentDeploymentException extends __BaseException {
            readonly name: "ConcurrentDeploymentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentDeploymentException, __BaseException>);
    }
    /**
        * <p>Configuration information for a deployment launch.</p>
        */
    export interface DeploymentLaunchConfig {
            /**
                * <p>The package name.</p>
                */
            packageName: string | undefined;
            /**
                * <p>The deployment pre-launch file. This file will be executed prior to the launch
                *          file.</p>
                */
            preLaunchFile?: string;
            /**
                * <p>The launch file name.</p>
                */
            launchFile: string | undefined;
            /**
                * <p>The deployment post-launch file. This file will be executed after the launch
                *          file.</p>
                */
            postLaunchFile?: string;
            /**
                * <p>An array of key/value pairs specifying environment variables for the robot
                *          application</p>
                */
            environmentVariables?: Record<string, string>;
    }
    export namespace DeploymentLaunchConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentLaunchConfig) => any;
    }
    /**
        * <p>Information about a deployment application configuration.</p>
        */
    export interface DeploymentApplicationConfig {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot application.</p>
                */
            application: string | undefined;
            /**
                * <p>The version of the application.</p>
                */
            applicationVersion: string | undefined;
            /**
                * <p>The launch configuration.</p>
                */
            launchConfig: DeploymentLaunchConfig | undefined;
    }
    export namespace DeploymentApplicationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentApplicationConfig) => any;
    }
    /**
        * <p>Information about an S3 object.</p>
        */
    export interface S3Object {
            /**
                * <p>The bucket containing the object.</p>
                */
            bucket: string | undefined;
            /**
                * <p>The key of the object.</p>
                */
            key: string | undefined;
            /**
                * <p>The etag of the object.</p>
                */
            etag?: string;
    }
    export namespace S3Object {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Object) => any;
    }
    /**
        * <p>Information about a deployment configuration.</p>
        */
    export interface DeploymentConfig {
            /**
                * <p>The percentage of robots receiving the deployment at the same time.</p>
                */
            concurrentDeploymentPercentage?: number;
            /**
                * <p>The percentage of deployments that need to fail before stopping deployment.</p>
                */
            failureThresholdPercentage?: number;
            /**
                * <p>The amount of time, in seconds, to wait for deployment to a single robot to complete.
                *          Choose a time between 1 minute and 7 days. The default is 5 hours.</p>
                */
            robotDeploymentTimeoutInSeconds?: number;
            /**
                * <p>The download condition file.</p>
                */
            downloadConditionFile?: S3Object;
    }
    export namespace DeploymentConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentConfig) => any;
    }
    export interface CreateDeploymentJobRequest {
            /**
                * <p>The requested deployment configuration.</p>
                */
            deploymentConfig?: DeploymentConfig;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet to deploy.</p>
                */
            fleet: string | undefined;
            /**
                * <p>The deployment application configuration.</p>
                */
            deploymentApplicationConfigs: DeploymentApplicationConfig[] | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the deployment
                *          job.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateDeploymentJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentJobRequest) => any;
    }
    export enum DeploymentJobErrorCode {
            BadLambdaAssociated = "BadLambdaAssociated",
            BadPermissionError = "BadPermissionError",
            DeploymentFleetDoesNotExist = "DeploymentFleetDoesNotExist",
            DownloadConditionFailed = "DownloadConditionFailed",
            EnvironmentSetupError = "EnvironmentSetupError",
            EtagMismatch = "EtagMismatch",
            ExtractingBundleFailure = "ExtractingBundleFailure",
            FailureThresholdBreached = "FailureThresholdBreached",
            FleetDeploymentTimeout = "FleetDeploymentTimeout",
            GreengrassDeploymentFailed = "GreengrassDeploymentFailed",
            GreengrassGroupVersionDoesNotExist = "GreengrassGroupVersionDoesNotExist",
            InternalServerError = "InternalServerError",
            InvalidGreengrassGroup = "InvalidGreengrassGroup",
            LambdaDeleted = "LambdaDeleted",
            MissingRobotApplicationArchitecture = "MissingRobotApplicationArchitecture",
            MissingRobotArchitecture = "MissingRobotArchitecture",
            MissingRobotDeploymentResource = "MissingRobotDeploymentResource",
            PostLaunchFileFailure = "PostLaunchFileFailure",
            PreLaunchFileFailure = "PreLaunchFileFailure",
            ResourceNotFound = "ResourceNotFound",
            RobotAgentConnectionTimeout = "RobotAgentConnectionTimeout",
            RobotApplicationDoesNotExist = "RobotApplicationDoesNotExist",
            RobotDeploymentAborted = "RobotDeploymentAborted",
            RobotDeploymentNoResponse = "RobotDeploymentNoResponse"
    }
    export enum DeploymentStatus {
            Canceled = "Canceled",
            Failed = "Failed",
            InProgress = "InProgress",
            Pending = "Pending",
            Preparing = "Preparing",
            Succeeded = "Succeeded"
    }
    export interface CreateDeploymentJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the deployment job.</p>
                */
            arn?: string;
            /**
                * <p>The target fleet for the deployment job.</p>
                */
            fleet?: string;
            /**
                * <p>The status of the deployment job.</p>
                */
            status?: DeploymentStatus | string;
            /**
                * <p>The deployment application configuration.</p>
                */
            deploymentApplicationConfigs?: DeploymentApplicationConfig[];
            /**
                * <p>The failure reason of the deployment job if it failed.</p>
                */
            failureReason?: string;
            /**
                * <p>The failure code of the simulation job if it failed:</p>
                *          <dl>
                *             <dt>BadPermissionError</dt>
                *             <dd>
                *                <p>AWS Greengrass requires a service-level role permission to access other
                *                   services. The role must include the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor">
                *                      <code>AWSGreengrassResourceAccessRolePolicy</code> managed policy</a>.
                *                </p>
                *             </dd>
                *             <dt>ExtractingBundleFailure</dt>
                *             <dd>
                *                <p>The robot application could not be extracted from the bundle.</p>
                *             </dd>
                *             <dt>FailureThresholdBreached</dt>
                *             <dd>
                *                <p>The percentage of robots that could not be updated exceeded the percentage set
                *                   for the deployment.</p>
                *             </dd>
                *             <dt>GreengrassDeploymentFailed</dt>
                *             <dd>
                *                <p>The robot application could not be deployed to the robot.</p>
                *             </dd>
                *             <dt>GreengrassGroupVersionDoesNotExist</dt>
                *             <dd>
                *                <p>The AWS Greengrass group or version associated with a robot is missing.</p>
                *             </dd>
                *             <dt>InternalServerError</dt>
                *             <dd>
                *                <p>An internal error has occurred. Retry your request, but if the problem
                *                   persists, contact us with details.</p>
                *             </dd>
                *             <dt>MissingRobotApplicationArchitecture</dt>
                *             <dd>
                *                <p>The robot application does not have a source that matches the architecture of
                *                   the robot.</p>
                *             </dd>
                *             <dt>MissingRobotDeploymentResource</dt>
                *             <dd>
                *                <p>One or more of the resources specified for the robot application are missing.
                *                   For example, does the robot application have the correct launch package and launch
                *                   file?</p>
                *             </dd>
                *             <dt>PostLaunchFileFailure</dt>
                *             <dd>
                *                <p>The post-launch script failed.</p>
                *             </dd>
                *             <dt>PreLaunchFileFailure</dt>
                *             <dd>
                *                <p>The pre-launch script failed.</p>
                *             </dd>
                *             <dt>ResourceNotFound</dt>
                *             <dd>
                *                <p>One or more deployment resources are missing. For example, do robot application
                *                   source bundles still exist? </p>
                *             </dd>
                *             <dt>RobotDeploymentNoResponse</dt>
                *             <dd>
                *                <p>There is no response from the robot. It might not be powered on or connected to
                *                   the internet.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: DeploymentJobErrorCode | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The deployment configuration.</p>
                */
            deploymentConfig?: DeploymentConfig;
            /**
                * <p>The list of all tags added to the deployment job.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateDeploymentJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDeploymentJobResponse) => any;
    }
    /**
        * <p>The request uses the same client token as a previous, but non-identical request. Do not
        *          reuse a client token with different requests, unless the requests are identical. </p>
        */
    export class IdempotentParameterMismatchException extends __BaseException {
            readonly name: "IdempotentParameterMismatchException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IdempotentParameterMismatchException, __BaseException>);
    }
    /**
        * <p>The requested resource exceeds the maximum number allowed, or the number of concurrent
        *          stream requests exceeds the maximum number allowed. </p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface CreateFleetRequest {
            /**
                * <p>The name of the fleet.</p>
                */
            name: string | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the fleet.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFleetRequest) => any;
    }
    export interface CreateFleetResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            arn?: string;
            /**
                * <p>The name of the fleet.</p>
                */
            name?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The list of all tags added to the fleet.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateFleetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFleetResponse) => any;
    }
    export interface CreateRobotRequest {
            /**
                * <p>The name for the robot.</p>
                */
            name: string | undefined;
            /**
                * <p>The target architecture of the robot.</p>
                */
            architecture: Architecture | string | undefined;
            /**
                * <p>The Greengrass group id.</p>
                */
            greengrassGroupId: string | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the robot.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateRobotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRobotRequest) => any;
    }
    export interface CreateRobotResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            arn?: string;
            /**
                * <p>The name of the robot.</p>
                */
            name?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the Greengrass group associated with the robot.</p>
                */
            greengrassGroupId?: string;
            /**
                * <p>The target architecture of the robot.</p>
                */
            architecture?: Architecture | string;
            /**
                * <p>The list of all tags added to the robot.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateRobotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRobotResponse) => any;
    }
    /**
        * <p>The specified resource already exists.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The object that contains the Docker image URI for either your robot or simulation
        *          applications.</p>
        */
    export interface Environment {
            /**
                * <p>The Docker image URI for either your robot or simulation applications.</p>
                */
            uri?: string;
    }
    export namespace Environment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Environment) => any;
    }
    export enum RobotSoftwareSuiteType {
            General = "General",
            ROS = "ROS",
            ROS2 = "ROS2"
    }
    export enum RobotSoftwareSuiteVersionType {
            Dashing = "Dashing",
            Foxy = "Foxy",
            Kinetic = "Kinetic",
            Melodic = "Melodic"
    }
    /**
        * <p>Information about a robot software suite (ROS distribution).</p>
        */
    export interface RobotSoftwareSuite {
            /**
                * <p>The name of the robot software suite (ROS distribution).</p>
                */
            name?: RobotSoftwareSuiteType | string;
            /**
                * <p>The version of the robot software suite (ROS distribution).</p>
                */
            version?: RobotSoftwareSuiteVersionType | string;
    }
    export namespace RobotSoftwareSuite {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RobotSoftwareSuite) => any;
    }
    /**
        * <p>Information about a source configuration.</p>
        */
    export interface SourceConfig {
            /**
                * <p>The Amazon S3 bucket name.</p>
                */
            s3Bucket?: string;
            /**
                * <p>The s3 object key.</p>
                */
            s3Key?: string;
            /**
                * <p>The target processor architecture for the application.</p>
                */
            architecture?: Architecture | string;
    }
    export namespace SourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceConfig) => any;
    }
    export interface CreateRobotApplicationRequest {
            /**
                * <p>The name of the robot application.</p>
                */
            name: string | undefined;
            /**
                * <p>The sources of the robot application.</p>
                */
            sources?: SourceConfig[];
            /**
                * <p>The robot software suite (ROS distribuition) used by the robot application.</p>
                */
            robotSoftwareSuite: RobotSoftwareSuite | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the robot
                *          application.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The object that contains that URI of the Docker image that you use for your robot
                *          application.</p>
                */
            environment?: Environment;
    }
    export namespace CreateRobotApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRobotApplicationRequest) => any;
    }
    /**
        * <p>Information about a source.</p>
        */
    export interface Source {
            /**
                * <p>The s3 bucket name.</p>
                */
            s3Bucket?: string;
            /**
                * <p>The s3 object key.</p>
                */
            s3Key?: string;
            /**
                * <p>A hash of the object specified by <code>s3Bucket</code> and <code>s3Key</code>.</p>
                */
            etag?: string;
            /**
                * <p>The taget processor architecture for the application.</p>
                */
            architecture?: Architecture | string;
    }
    export namespace Source {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Source) => any;
    }
    export interface CreateRobotApplicationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the robot application.</p>
                */
            name?: string;
            /**
                * <p>The version of the robot application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the robot application.</p>
                */
            sources?: Source[];
            /**
                * <p>The robot software suite (ROS distribution) used by the robot application.</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The revision id of the robot application.</p>
                */
            revisionId?: string;
            /**
                * <p>The list of all tags added to the robot application.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>An object that contains the Docker image URI used to a create your robot
                *          application.</p>
                */
            environment?: Environment;
    }
    export namespace CreateRobotApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRobotApplicationResponse) => any;
    }
    export interface CreateRobotApplicationVersionRequest {
            /**
                * <p>The application information for the robot application.</p>
                */
            application: string | undefined;
            /**
                * <p>The current revision id for the robot application. If you provide a value and it matches
                *          the latest revision ID, a new version will be created.</p>
                */
            currentRevisionId?: string;
            /**
                * <p>The Amazon S3 identifier for the zip file bundle that you use for your robot
                *          application.</p>
                */
            s3Etags?: string[];
            /**
                * <p>A SHA256 identifier for the Docker image that you use for your robot application.</p>
                */
            imageDigest?: string;
    }
    export namespace CreateRobotApplicationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRobotApplicationVersionRequest) => any;
    }
    export interface CreateRobotApplicationVersionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the robot application.</p>
                */
            name?: string;
            /**
                * <p>The version of the robot application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the robot application.</p>
                */
            sources?: Source[];
            /**
                * <p>The robot software suite (ROS distribution) used by the robot application.</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The revision id of the robot application.</p>
                */
            revisionId?: string;
            /**
                * <p>The object that contains the Docker image URI used to create your robot
                *          application.</p>
                */
            environment?: Environment;
    }
    export namespace CreateRobotApplicationVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRobotApplicationVersionResponse) => any;
    }
    export enum RenderingEngineType {
            OGRE = "OGRE"
    }
    /**
        * <p>Information about a rendering engine.</p>
        */
    export interface RenderingEngine {
            /**
                * <p>The name of the rendering engine.</p>
                */
            name?: RenderingEngineType | string;
            /**
                * <p>The version of the rendering engine.</p>
                */
            version?: string;
    }
    export namespace RenderingEngine {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenderingEngine) => any;
    }
    export enum SimulationSoftwareSuiteType {
            Gazebo = "Gazebo",
            RosbagPlay = "RosbagPlay",
            SimulationRuntime = "SimulationRuntime"
    }
    /**
        * <p>Information about a simulation software suite.</p>
        */
    export interface SimulationSoftwareSuite {
            /**
                * <p>The name of the simulation software suite.</p>
                */
            name?: SimulationSoftwareSuiteType | string;
            /**
                * <p>The version of the simulation software suite.</p>
                */
            version?: string;
    }
    export namespace SimulationSoftwareSuite {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulationSoftwareSuite) => any;
    }
    export interface CreateSimulationApplicationRequest {
            /**
                * <p>The name of the simulation application.</p>
                */
            name: string | undefined;
            /**
                * <p>The sources of the simulation application.</p>
                */
            sources?: SourceConfig[];
            /**
                * <p>The simulation software suite used by the simulation application.</p>
                */
            simulationSoftwareSuite: SimulationSoftwareSuite | undefined;
            /**
                * <p>The robot software suite (ROS distribution) used by the simulation application.</p>
                */
            robotSoftwareSuite: RobotSoftwareSuite | undefined;
            /**
                * <p>The rendering engine for the simulation application.</p>
                */
            renderingEngine?: RenderingEngine;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the simulation
                *          application.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The object that contains the Docker image URI used to create your simulation
                *          application.</p>
                */
            environment?: Environment;
    }
    export namespace CreateSimulationApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSimulationApplicationRequest) => any;
    }
    export interface CreateSimulationApplicationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the simulation application.</p>
                */
            name?: string;
            /**
                * <p>The version of the simulation application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the simulation application.</p>
                */
            sources?: Source[];
            /**
                * <p>The simulation software suite used by the simulation application.</p>
                */
            simulationSoftwareSuite?: SimulationSoftwareSuite;
            /**
                * <p>Information about the robot software suite (ROS distribution).</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The rendering engine for the simulation application.</p>
                */
            renderingEngine?: RenderingEngine;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The revision id of the simulation application.</p>
                */
            revisionId?: string;
            /**
                * <p>The list of all tags added to the simulation application.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The object that contains the Docker image URI that you used to create your simulation
                *          application.</p>
                */
            environment?: Environment;
    }
    export namespace CreateSimulationApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSimulationApplicationResponse) => any;
    }
    export interface CreateSimulationApplicationVersionRequest {
            /**
                * <p>The application information for the simulation application.</p>
                */
            application: string | undefined;
            /**
                * <p>The current revision id for the simulation application. If you provide a value and it
                *          matches the latest revision ID, a new version will be created.</p>
                */
            currentRevisionId?: string;
            /**
                * <p>The Amazon S3 eTag identifier for the zip file bundle that you use to create the
                *          simulation application.</p>
                */
            s3Etags?: string[];
            /**
                * <p>The SHA256 digest used to identify the Docker image URI used to created the simulation
                *          application.</p>
                */
            imageDigest?: string;
    }
    export namespace CreateSimulationApplicationVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSimulationApplicationVersionRequest) => any;
    }
    export interface CreateSimulationApplicationVersionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the simulation application.</p>
                */
            name?: string;
            /**
                * <p>The version of the simulation application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the simulation application.</p>
                */
            sources?: Source[];
            /**
                * <p>The simulation software suite used by the simulation application.</p>
                */
            simulationSoftwareSuite?: SimulationSoftwareSuite;
            /**
                * <p>Information about the robot software suite (ROS distribution).</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The rendering engine for the simulation application.</p>
                */
            renderingEngine?: RenderingEngine;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The revision ID of the simulation application.</p>
                */
            revisionId?: string;
            /**
                * <p>The object that contains the Docker image URI used to create the simulation
                *          application.</p>
                */
            environment?: Environment;
    }
    export namespace CreateSimulationApplicationVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSimulationApplicationVersionResponse) => any;
    }
    /**
        * <p>Information about a data source.</p>
        */
    export interface DataSourceConfig {
            /**
                * <p>The name of the data source.</p>
                */
            name: string | undefined;
            /**
                * <p>The S3 bucket where the data files are located.</p>
                */
            s3Bucket: string | undefined;
            /**
                * <p>The list of S3 keys identifying the data source files.</p>
                */
            s3Keys: string[] | undefined;
            /**
                * <p>The data type for the data source that you're using for your container image or
                *          simulation job. You can use this field to specify whether your data source is an Archive,
                *          an Amazon S3 prefix, or a file.</p>
                *          <p>If you don't specify a field, the default value is <code>File</code>.</p>
                */
            type?: DataSourceType | string;
            /**
                * <p>The location where your files are mounted in the container image.</p>
                *          <p>If you've specified the <code>type</code> of the data source as an <code>Archive</code>,
                *          you must provide an Amazon S3 object key to your archive. The object key must point to
                *          either a <code>.zip</code> or <code>.tar.gz</code> file.</p>
                *          <p>If you've specified the <code>type</code> of the data source as a <code>Prefix</code>,
                *          you provide the Amazon S3 prefix that points to the files that you are using for your data
                *          source.</p>
                *          <p>If you've specified the <code>type</code> of the data source as a <code>File</code>, you
                *          provide the Amazon S3 path to the file that you're using as your data source.</p>
                */
            destination?: string;
    }
    export namespace DataSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSourceConfig) => any;
    }
    /**
        * <p>If your simulation job accesses resources in a VPC, you provide this parameter
        *          identifying the list of security group IDs and subnet IDs. These must belong to the same
        *          VPC. You must provide at least one security group and two subnet IDs.</p>
        */
    export interface VPCConfig {
            /**
                * <p>A list of one or more subnet IDs in your VPC.</p>
                */
            subnets: string[] | undefined;
            /**
                * <p>A list of one or more security groups IDs in your VPC.</p>
                */
            securityGroups?: string[];
            /**
                * <p>A boolean indicating whether to assign a public IP address.</p>
                */
            assignPublicIp?: boolean;
    }
    export namespace VPCConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VPCConfig) => any;
    }
    export interface CreateSimulationJobRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>Location for output files generated by the simulation job.</p>
                */
            outputLocation?: OutputLocation;
            /**
                * <p>The logging configuration.</p>
                */
            loggingConfig?: LoggingConfig;
            /**
                * <p>The maximum simulation job duration in seconds (up to 14 days or 1,209,600 seconds. When
                *             <code>maxJobDurationInSeconds</code> is reached, the simulation job will status will
                *          transition to <code>Completed</code>.</p>
                */
            maxJobDurationInSeconds: number | undefined;
            /**
                * <p>The IAM role name that allows the simulation instance to call the AWS APIs that are
                *          specified in its associated policies on your behalf. This is how credentials are passed in
                *          to your simulation job. </p>
                */
            iamRole: string | undefined;
            /**
                * <p>The failure behavior the simulation job.</p>
                *          <dl>
                *             <dt>Continue</dt>
                *             <dd>
                *                <p>Leaves the instance running for its maximum timeout duration after a
                *                      <code>4XX</code> error code.</p>
                *             </dd>
                *             <dt>Fail</dt>
                *             <dd>
                *                <p>Stop the simulation job and terminate the instance.</p>
                *             </dd>
                *          </dl>
                */
            failureBehavior?: FailureBehavior | string;
            /**
                * <p>The robot application to use in the simulation job.</p>
                */
            robotApplications?: RobotApplicationConfig[];
            /**
                * <p>The simulation application to use in the simulation job.</p>
                */
            simulationApplications?: SimulationApplicationConfig[];
            /**
                * <p>Specify data sources to mount read-only files from S3 into your simulation. These files
                *          are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p>
                *          <note>
                *             <p>There is a limit of 100 files and a combined size of 25GB for all
                *                <code>DataSourceConfig</code> objects. </p>
                *          </note>
                */
            dataSources?: DataSourceConfig[];
            /**
                * <p>A map that contains tag keys and tag values that are attached to the simulation
                *          job.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>If your simulation job accesses resources in a VPC, you provide this parameter
                *          identifying the list of security group IDs and subnet IDs. These must belong to the same
                *          VPC. You must provide at least one security group and one subnet ID. </p>
                */
            vpcConfig?: VPCConfig;
            /**
                * <p>Compute information for the simulation job.</p>
                */
            compute?: Compute;
    }
    export namespace CreateSimulationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSimulationJobRequest) => any;
    }
    export interface CreateSimulationJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation job.</p>
                */
            arn?: string;
            /**
                * <p>The status of the simulation job.</p>
                */
            status?: SimulationJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job was last
                *          started.</p>
                */
            lastStartedAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>the failure behavior for the simulation job.</p>
                */
            failureBehavior?: FailureBehavior | string;
            /**
                * <p>The failure code of the simulation job if it failed:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>RobotApplicationCrash</dt>
                *             <dd>
                *                <p>Robot application exited abnormally.</p>
                *             </dd>
                *             <dt>SimulationApplicationCrash</dt>
                *             <dd>
                *                <p> Simulation application exited abnormally.</p>
                *             </dd>
                *             <dt>BadPermissionsRobotApplication</dt>
                *             <dd>
                *                <p>Robot application bundle could not be downloaded.</p>
                *             </dd>
                *             <dt>BadPermissionsSimulationApplication</dt>
                *             <dd>
                *                <p>Simulation application bundle could not be downloaded.</p>
                *             </dd>
                *             <dt>BadPermissionsS3Output</dt>
                *             <dd>
                *                <p>Unable to publish outputs to customer-provided S3 bucket.</p>
                *             </dd>
                *             <dt>BadPermissionsCloudwatchLogs</dt>
                *             <dd>
                *                <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
                *             </dd>
                *             <dt>SubnetIpLimitExceeded</dt>
                *             <dd>
                *                <p>Subnet IP limit exceeded.</p>
                *             </dd>
                *             <dt>ENILimitExceeded</dt>
                *             <dd>
                *                <p>ENI limit exceeded.</p>
                *             </dd>
                *             <dt>BadPermissionsUserCredentials</dt>
                *             <dd>
                *                <p>Unable to use the Role provided.</p>
                *             </dd>
                *             <dt>InvalidBundleRobotApplication</dt>
                *             <dd>
                *                <p>Robot bundle cannot be extracted (invalid format, bundling error, or other
                *                   issue).</p>
                *             </dd>
                *             <dt>InvalidBundleSimulationApplication</dt>
                *             <dd>
                *                <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other
                *                   issue).</p>
                *             </dd>
                *             <dt>RobotApplicationVersionMismatchedEtag</dt>
                *             <dd>
                *                <p>Etag for RobotApplication does not match value during version creation.</p>
                *             </dd>
                *             <dt>SimulationApplicationVersionMismatchedEtag</dt>
                *             <dd>
                *                <p>Etag for SimulationApplication does not match value during version
                *                   creation.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: SimulationJobErrorCode | string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>Simulation job output files location.</p>
                */
            outputLocation?: OutputLocation;
            /**
                * <p>The logging configuration.</p>
                */
            loggingConfig?: LoggingConfig;
            /**
                * <p>The maximum simulation job duration in seconds. </p>
                */
            maxJobDurationInSeconds?: number;
            /**
                * <p>The simulation job execution duration in milliseconds.</p>
                */
            simulationTimeMillis?: number;
            /**
                * <p>The IAM role that allows the simulation job to call the AWS APIs that are specified in
                *          its associated policies on your behalf.</p>
                */
            iamRole?: string;
            /**
                * <p>The robot application used by the simulation job.</p>
                */
            robotApplications?: RobotApplicationConfig[];
            /**
                * <p>The simulation application used by the simulation job.</p>
                */
            simulationApplications?: SimulationApplicationConfig[];
            /**
                * <p>The data sources for the simulation job.</p>
                */
            dataSources?: DataSource[];
            /**
                * <p>The list of all tags added to the simulation job.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Information about the vpc configuration.</p>
                */
            vpcConfig?: VPCConfigResponse;
            /**
                * <p>Compute information for the simulation job.</p>
                */
            compute?: ComputeResponse;
    }
    export namespace CreateSimulationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSimulationJobResponse) => any;
    }
    /**
        * <p>The request has failed due to a temporary failure of the server.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * <p>Information about a simulation job request.</p>
        */
    export interface SimulationJobRequest {
            /**
                * <p>The output location.</p>
                */
            outputLocation?: OutputLocation;
            /**
                * <p>The logging configuration.</p>
                */
            loggingConfig?: LoggingConfig;
            /**
                * <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200
                *          seconds) or less.</p>
                */
            maxJobDurationInSeconds: number | undefined;
            /**
                * <p>The IAM role name that allows the simulation instance to call the AWS APIs that are
                *          specified in its associated policies on your behalf. This is how credentials are passed in
                *          to your simulation job. </p>
                */
            iamRole?: string;
            /**
                * <p>The failure behavior the simulation job.</p>
                *          <dl>
                *             <dt>Continue</dt>
                *             <dd>
                *                <p>Leaves the host running for its maximum timeout duration after a
                *                      <code>4XX</code> error code.</p>
                *             </dd>
                *             <dt>Fail</dt>
                *             <dd>
                *                <p>Stop the simulation job and terminate the instance.</p>
                *             </dd>
                *          </dl>
                */
            failureBehavior?: FailureBehavior | string;
            /**
                * <p>A Boolean indicating whether to use default applications in the simulation job. Default
                *          applications include Gazebo, rqt, rviz and terminal access. </p>
                */
            useDefaultApplications?: boolean;
            /**
                * <p>The robot applications to use in the simulation job.</p>
                */
            robotApplications?: RobotApplicationConfig[];
            /**
                * <p>The simulation applications to use in the simulation job.</p>
                */
            simulationApplications?: SimulationApplicationConfig[];
            /**
                * <p>Specify data sources to mount read-only files from S3 into your simulation. These files
                *          are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p>
                *          <note>
                *             <p>There is a limit of 100 files and a combined size of 25GB for all
                *                <code>DataSourceConfig</code> objects. </p>
                *          </note>
                */
            dataSources?: DataSourceConfig[];
            /**
                * <p>If your simulation job accesses resources in a VPC, you provide this parameter
                *          identifying the list of security group IDs and subnet IDs. These must belong to the same
                *          VPC. You must provide at least one security group and two subnet IDs.</p>
                */
            vpcConfig?: VPCConfig;
            /**
                * <p>Compute information for the simulation job</p>
                */
            compute?: Compute;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the simulation job
                *          request.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace SimulationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulationJobRequest) => any;
    }
    export interface CreateWorldExportJobRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>A list of Amazon Resource Names (arns) that correspond to worlds to export.</p>
                */
            worlds: string[] | undefined;
            /**
                * <p>The output location.</p>
                */
            outputLocation: OutputLocation | undefined;
            /**
                * <p>The IAM role that the world export process uses to access the Amazon S3 bucket and put
                *          the export.</p>
                */
            iamRole: string | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world export
                *          job.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateWorldExportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorldExportJobRequest) => any;
    }
    export enum WorldExportJobErrorCode {
            AccessDenied = "AccessDenied",
            InternalServiceError = "InternalServiceError",
            InvalidInput = "InvalidInput",
            LimitExceeded = "LimitExceeded",
            RequestThrottled = "RequestThrottled",
            ResourceNotFound = "ResourceNotFound"
    }
    export enum WorldExportJobStatus {
            Canceled = "Canceled",
            Canceling = "Canceling",
            Completed = "Completed",
            Failed = "Failed",
            Pending = "Pending",
            Running = "Running"
    }
    export interface CreateWorldExportJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the world export job.</p>
                */
            arn?: string;
            /**
                * <p>The status of the world export job.</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The world export job request is pending.</p>
                *             </dd>
                *             <dt>Running</dt>
                *             <dd>
                *                <p>The world export job is running. </p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The world export job completed. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The world export job failed. See <code>failureCode</code> for more information.
                *                </p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The world export job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The world export job is being cancelled.</p>
                *             </dd>
                *          </dl>
                */
            status?: WorldExportJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world export job was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The failure code of the world export job if it failed:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>LimitExceeded</dt>
                *             <dd>
                *                <p>The requested resource exceeds the maximum number allowed, or the number of
                *                   concurrent stream requests exceeds the maximum number allowed. </p>
                *             </dd>
                *             <dt>ResourceNotFound</dt>
                *             <dd>
                *                <p>The specified resource could not be found. </p>
                *             </dd>
                *             <dt>RequestThrottled</dt>
                *             <dd>
                *                <p>The request was throttled.</p>
                *             </dd>
                *             <dt>InvalidInput</dt>
                *             <dd>
                *                <p>An input parameter in the request is not valid.</p>
                *             </dd>
                *             <dt>AllWorldGenerationFailed</dt>
                *             <dd>
                *                <p>All of the worlds in the world generation job failed. This can happen if your
                *                      <code>worldCount</code> is greater than 50 or less than 1. </p>
                *             </dd>
                *          </dl>
                *          <p>For more information about troubleshooting WorldForge, see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/troubleshooting-worldforge.html">Troubleshooting Simulation WorldForge</a>. </p>
                */
            failureCode?: WorldExportJobErrorCode | string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The output location.</p>
                */
            outputLocation?: OutputLocation;
            /**
                * <p>The IAM role that the world export process uses to access the Amazon S3 bucket and put
                *          the export. </p>
                */
            iamRole?: string;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world export
                *          job.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateWorldExportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorldExportJobResponse) => any;
    }
    /**
        * <p>The number of worlds that will be created. You can configure the number of unique
        *          floorplans and the number of unique interiors for each floor plan. For example, if you want
        *          1 world with 20 unique interiors, you set <code>floorplanCount = 1</code> and
        *             <code>interiorCountPerFloorplan = 20</code>. This will result in 20 worlds
        *             (<code>floorplanCount</code> * <code>interiorCountPerFloorplan)</code>. </p>
        *          <p>If you set <code>floorplanCount = 4</code> and <code>interiorCountPerFloorplan =
        *             5</code>, there will be 20 worlds with 5 unique floor plans. </p>
        */
    export interface WorldCount {
            /**
                * <p>The number of unique floorplans.</p>
                */
            floorplanCount?: number;
            /**
                * <p>The number of unique interiors per floorplan.</p>
                */
            interiorCountPerFloorplan?: number;
    }
    export namespace WorldCount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorldCount) => any;
    }
    export interface CreateWorldGenerationJobRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the world template describing the worlds you want to
                *          create.</p>
                */
            template: string | undefined;
            /**
                * <p>Information about the world count.</p>
                */
            worldCount: WorldCount | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world generator
                *          job.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the generated
                *          worlds.</p>
                */
            worldTags?: Record<string, string>;
    }
    export namespace CreateWorldGenerationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorldGenerationJobRequest) => any;
    }
    export enum WorldGenerationJobErrorCode {
            AllWorldGenerationFailed = "AllWorldGenerationFailed",
            InternalServiceError = "InternalServiceError",
            InvalidInput = "InvalidInput",
            LimitExceeded = "LimitExceeded",
            RequestThrottled = "RequestThrottled",
            ResourceNotFound = "ResourceNotFound"
    }
    export enum WorldGenerationJobStatus {
            Canceled = "Canceled",
            Canceling = "Canceling",
            Completed = "Completed",
            Failed = "Failed",
            PartialFailed = "PartialFailed",
            Pending = "Pending",
            Running = "Running"
    }
    export interface CreateWorldGenerationJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the world generator job.</p>
                */
            arn?: string;
            /**
                * <p>The status of the world generator job.</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The world generator job request is pending.</p>
                *             </dd>
                *             <dt>Running</dt>
                *             <dd>
                *                <p>The world generator job is running. </p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The world generator job completed. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The world generator job failed. See <code>failureCode</code> for more
                *                   information. </p>
                *             </dd>
                *             <dt>PartialFailed</dt>
                *             <dd>
                *                <p>Some worlds did not generate.</p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The world generator job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The world generator job is being cancelled.</p>
                *             </dd>
                *          </dl>
                */
            status?: WorldGenerationJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world generator job was
                *          created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The failure code of the world generator job if it failed:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>LimitExceeded</dt>
                *             <dd>
                *                <p>The requested resource exceeds the maximum number allowed, or the number of
                *                   concurrent stream requests exceeds the maximum number allowed. </p>
                *             </dd>
                *             <dt>ResourceNotFound</dt>
                *             <dd>
                *                <p>The specified resource could not be found. </p>
                *             </dd>
                *             <dt>RequestThrottled</dt>
                *             <dd>
                *                <p>The request was throttled.</p>
                *             </dd>
                *             <dt>InvalidInput</dt>
                *             <dd>
                *                <p>An input parameter in the request is not valid.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: WorldGenerationJobErrorCode | string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the world template.</p>
                */
            template?: string;
            /**
                * <p>Information about the world count. </p>
                */
            worldCount?: WorldCount;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world generator
                *          job.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the generated
                *          worlds.</p>
                */
            worldTags?: Record<string, string>;
    }
    export namespace CreateWorldGenerationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorldGenerationJobResponse) => any;
    }
    /**
        * <p>Information about a template location.</p>
        */
    export interface TemplateLocation {
            /**
                * <p>The Amazon S3 bucket name.</p>
                */
            s3Bucket: string | undefined;
            /**
                * <p>The list of S3 keys identifying the data source files.</p>
                */
            s3Key: string | undefined;
    }
    export namespace TemplateLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateLocation) => any;
    }
    export interface CreateWorldTemplateRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The name of the world template.</p>
                */
            name?: string;
            /**
                * <p>The world template body.</p>
                */
            templateBody?: string;
            /**
                * <p>The location of the world template.</p>
                */
            templateLocation?: TemplateLocation;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world
                *          template.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateWorldTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorldTemplateRequest) => any;
    }
    export interface CreateWorldTemplateResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the world template.</p>
                */
            arn?: string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world template was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The name of the world template.</p>
                */
            name?: string;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world
                *          template.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateWorldTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorldTemplateResponse) => any;
    }
    export interface DeleteFleetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet: string | undefined;
    }
    export namespace DeleteFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFleetRequest) => any;
    }
    export interface DeleteFleetResponse {
    }
    export namespace DeleteFleetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFleetResponse) => any;
    }
    export interface DeleteRobotRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            robot: string | undefined;
    }
    export namespace DeleteRobotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRobotRequest) => any;
    }
    export interface DeleteRobotResponse {
    }
    export namespace DeleteRobotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRobotResponse) => any;
    }
    export interface DeleteRobotApplicationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the the robot application.</p>
                */
            application: string | undefined;
            /**
                * <p>The version of the robot application to delete.</p>
                */
            applicationVersion?: string;
    }
    export namespace DeleteRobotApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRobotApplicationRequest) => any;
    }
    export interface DeleteRobotApplicationResponse {
    }
    export namespace DeleteRobotApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRobotApplicationResponse) => any;
    }
    export interface DeleteSimulationApplicationRequest {
            /**
                * <p>The application information for the simulation application to delete.</p>
                */
            application: string | undefined;
            /**
                * <p>The version of the simulation application to delete.</p>
                */
            applicationVersion?: string;
    }
    export namespace DeleteSimulationApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSimulationApplicationRequest) => any;
    }
    export interface DeleteSimulationApplicationResponse {
    }
    export namespace DeleteSimulationApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSimulationApplicationResponse) => any;
    }
    export interface DeleteWorldTemplateRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world template you want to delete.</p>
                */
            template: string | undefined;
    }
    export namespace DeleteWorldTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorldTemplateRequest) => any;
    }
    export interface DeleteWorldTemplateResponse {
    }
    export namespace DeleteWorldTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorldTemplateResponse) => any;
    }
    /**
        * <p>Information about a deployment job.</p>
        */
    export interface DeploymentJob {
            /**
                * <p>The Amazon Resource Name (ARN) of the deployment job.</p>
                */
            arn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet?: string;
            /**
                * <p>The status of the deployment job.</p>
                */
            status?: DeploymentStatus | string;
            /**
                * <p>The deployment application configuration.</p>
                */
            deploymentApplicationConfigs?: DeploymentApplicationConfig[];
            /**
                * <p>The deployment configuration.</p>
                */
            deploymentConfig?: DeploymentConfig;
            /**
                * <p>A short description of the reason why the deployment job failed.</p>
                */
            failureReason?: string;
            /**
                * <p>The deployment job failure code.</p>
                */
            failureCode?: DeploymentJobErrorCode | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the deployment job was created.</p>
                */
            createdAt?: Date;
    }
    export namespace DeploymentJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeploymentJob) => any;
    }
    export interface DeregisterRobotRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            robot: string | undefined;
    }
    export namespace DeregisterRobotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterRobotRequest) => any;
    }
    export interface DeregisterRobotResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            robot?: string;
    }
    export namespace DeregisterRobotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterRobotResponse) => any;
    }
    export interface DescribeDeploymentJobRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the deployment job.</p>
                */
            job: string | undefined;
    }
    export namespace DescribeDeploymentJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeploymentJobRequest) => any;
    }
    export enum RobotDeploymentStep {
            DownloadingExtractingStep = "DownloadingExtracting",
            ExecutingDownloadCondition = "ExecutingDownloadCondition",
            FinishedStep = "Finished",
            LaunchingStep = "Launching",
            PostLaunchStep = "ExecutingPostLaunch",
            PreLaunchStep = "ExecutingPreLaunch",
            ValidatingStep = "Validating"
    }
    /**
        * <p>Information about the progress of a deployment job.</p>
        */
    export interface ProgressDetail {
            /**
                * <p>The current progress status.</p>
                *          <dl>
                *             <dt>Validating</dt>
                *             <dd>
                *                <p>Validating the deployment.</p>
                *             </dd>
                *             <dt>DownloadingExtracting</dt>
                *             <dd>
                *                <p>Downloading and extracting the bundle on the robot.</p>
                *             </dd>
                *             <dt>ExecutingPreLaunch</dt>
                *             <dd>
                *                <p>Executing pre-launch script(s) if provided.</p>
                *             </dd>
                *             <dt>Launching</dt>
                *             <dd>
                *                <p>Launching the robot application.</p>
                *             </dd>
                *             <dt>ExecutingPostLaunch</dt>
                *             <dd>
                *                <p>Executing post-launch script(s) if provided.</p>
                *             </dd>
                *             <dt>Finished</dt>
                *             <dd>
                *                <p>Deployment is complete.</p>
                *             </dd>
                *          </dl>
                */
            currentProgress?: RobotDeploymentStep | string;
            /**
                * <p>Precentage of the step that is done. This currently only applies to the
                *             <code>Downloading/Extracting</code> step of the deployment. It is empty for other
                *          steps.</p>
                */
            percentDone?: number;
            /**
                * <p>Estimated amount of time in seconds remaining in the step. This currently only applies
                *          to the <code>Downloading/Extracting</code> step of the deployment. It is empty for other
                *          steps.</p>
                */
            estimatedTimeRemainingSeconds?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the deployment job.</p>
                */
            targetResource?: string;
    }
    export namespace ProgressDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProgressDetail) => any;
    }
    export enum RobotStatus {
            Available = "Available",
            Deploying = "Deploying",
            Failed = "Failed",
            InSync = "InSync",
            NoResponse = "NoResponse",
            PendingNewDeployment = "PendingNewDeployment",
            Registered = "Registered"
    }
    /**
        * <p>Information about a robot deployment.</p>
        */
    export interface RobotDeployment {
            /**
                * <p>The robot deployment Amazon Resource Name (ARN).</p>
                */
            arn?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the deployment was started.</p>
                */
            deploymentStartTime?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the deployment finished.</p>
                */
            deploymentFinishTime?: Date;
            /**
                * <p>The status of the robot deployment.</p>
                */
            status?: RobotStatus | string;
            /**
                * <p>Information about how the deployment is progressing.</p>
                */
            progressDetail?: ProgressDetail;
            /**
                * <p>A short description of the reason why the robot deployment failed.</p>
                */
            failureReason?: string;
            /**
                * <p>The robot deployment failure code.</p>
                */
            failureCode?: DeploymentJobErrorCode | string;
    }
    export namespace RobotDeployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RobotDeployment) => any;
    }
    export interface DescribeDeploymentJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the deployment job.</p>
                */
            arn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet?: string;
            /**
                * <p>The status of the deployment job.</p>
                */
            status?: DeploymentStatus | string;
            /**
                * <p>The deployment configuration.</p>
                */
            deploymentConfig?: DeploymentConfig;
            /**
                * <p>The deployment application configuration.</p>
                */
            deploymentApplicationConfigs?: DeploymentApplicationConfig[];
            /**
                * <p>A short description of the reason why the deployment job failed.</p>
                */
            failureReason?: string;
            /**
                * <p>The deployment job failure code.</p>
                */
            failureCode?: DeploymentJobErrorCode | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the deployment job was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>A list of robot deployment summaries.</p>
                */
            robotDeploymentSummary?: RobotDeployment[];
            /**
                * <p>The list of all tags added to the specified deployment job.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace DescribeDeploymentJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDeploymentJobResponse) => any;
    }
    export interface DescribeFleetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet: string | undefined;
    }
    export namespace DescribeFleetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetRequest) => any;
    }
    /**
        * <p>Information about a robot.</p>
        */
    export interface Robot {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            arn?: string;
            /**
                * <p>The name of the robot.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleetArn?: string;
            /**
                * <p>The status of the robot.</p>
                */
            status?: RobotStatus | string;
            /**
                * <p>The Greengrass group associated with the robot.</p>
                */
            greenGrassGroupId?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The architecture of the robot.</p>
                */
            architecture?: Architecture | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
                */
            lastDeploymentJob?: string;
            /**
                * <p>The time of the last deployment.</p>
                */
            lastDeploymentTime?: Date;
    }
    export namespace Robot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Robot) => any;
    }
    export interface DescribeFleetResponse {
            /**
                * <p>The name of the fleet.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            arn?: string;
            /**
                * <p>A list of robots.</p>
                */
            robots?: Robot[];
            /**
                * <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The status of the last deployment.</p>
                */
            lastDeploymentStatus?: DeploymentStatus | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
                */
            lastDeploymentJob?: string;
            /**
                * <p>The time of the last deployment.</p>
                */
            lastDeploymentTime?: Date;
            /**
                * <p>The list of all tags added to the specified fleet.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace DescribeFleetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFleetResponse) => any;
    }
    export interface DescribeRobotRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot to be described.</p>
                */
            robot: string | undefined;
    }
    export namespace DescribeRobotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRobotRequest) => any;
    }
    export interface DescribeRobotResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            arn?: string;
            /**
                * <p>The name of the robot.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleetArn?: string;
            /**
                * <p>The status of the fleet.</p>
                */
            status?: RobotStatus | string;
            /**
                * <p>The Greengrass group id.</p>
                */
            greengrassGroupId?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The target architecture of the robot application.</p>
                */
            architecture?: Architecture | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
                */
            lastDeploymentJob?: string;
            /**
                * <p>The time of the last deployment job.</p>
                */
            lastDeploymentTime?: Date;
            /**
                * <p>The list of all tags added to the specified robot.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace DescribeRobotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRobotResponse) => any;
    }
    export interface DescribeRobotApplicationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot application.</p>
                */
            application: string | undefined;
            /**
                * <p>The version of the robot application to describe.</p>
                */
            applicationVersion?: string;
    }
    export namespace DescribeRobotApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRobotApplicationRequest) => any;
    }
    export interface DescribeRobotApplicationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the robot application.</p>
                */
            name?: string;
            /**
                * <p>The version of the robot application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the robot application.</p>
                */
            sources?: Source[];
            /**
                * <p>The robot software suite (ROS distribution) used by the robot application.</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The revision id of the robot application.</p>
                */
            revisionId?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The list of all tags added to the specified robot application.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The object that contains the Docker image URI used to create the robot
                *          application.</p>
                */
            environment?: Environment;
            /**
                * <p>A SHA256 identifier for the Docker image that you use for your robot application.</p>
                */
            imageDigest?: string;
    }
    export namespace DescribeRobotApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRobotApplicationResponse) => any;
    }
    export interface DescribeSimulationApplicationRequest {
            /**
                * <p>The application information for the simulation application.</p>
                */
            application: string | undefined;
            /**
                * <p>The version of the simulation application to describe.</p>
                */
            applicationVersion?: string;
    }
    export namespace DescribeSimulationApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSimulationApplicationRequest) => any;
    }
    export interface DescribeSimulationApplicationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the robot simulation application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the simulation application.</p>
                */
            name?: string;
            /**
                * <p>The version of the simulation application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the simulation application.</p>
                */
            sources?: Source[];
            /**
                * <p>The simulation software suite used by the simulation application.</p>
                */
            simulationSoftwareSuite?: SimulationSoftwareSuite;
            /**
                * <p>Information about the robot software suite (ROS distribution).</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The rendering engine for the simulation application.</p>
                */
            renderingEngine?: RenderingEngine;
            /**
                * <p>The revision id of the simulation application.</p>
                */
            revisionId?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The list of all tags added to the specified simulation application.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The object that contains the Docker image URI used to create the simulation
                *          application.</p>
                */
            environment?: Environment;
            /**
                * <p>A SHA256 identifier for the Docker image that you use for your simulation
                *          application.</p>
                */
            imageDigest?: string;
    }
    export namespace DescribeSimulationApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSimulationApplicationResponse) => any;
    }
    export interface DescribeSimulationJobRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation job to be described.</p>
                */
            job: string | undefined;
    }
    export namespace DescribeSimulationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSimulationJobRequest) => any;
    }
    export interface DescribeSimulationJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation job.</p>
                */
            arn?: string;
            /**
                * <p>The name of the simulation job.</p>
                */
            name?: string;
            /**
                * <p>The status of the simulation job.</p>
                */
            status?: SimulationJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job was last
                *          started.</p>
                */
            lastStartedAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The failure behavior for the simulation job.</p>
                */
            failureBehavior?: FailureBehavior | string;
            /**
                * <p>The failure code of the simulation job if it failed:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>RobotApplicationCrash</dt>
                *             <dd>
                *                <p>Robot application exited abnormally.</p>
                *             </dd>
                *             <dt>SimulationApplicationCrash</dt>
                *             <dd>
                *                <p> Simulation application exited abnormally.</p>
                *             </dd>
                *             <dt>BadPermissionsRobotApplication</dt>
                *             <dd>
                *                <p>Robot application bundle could not be downloaded.</p>
                *             </dd>
                *             <dt>BadPermissionsSimulationApplication</dt>
                *             <dd>
                *                <p>Simulation application bundle could not be downloaded.</p>
                *             </dd>
                *             <dt>BadPermissionsS3Output</dt>
                *             <dd>
                *                <p>Unable to publish outputs to customer-provided S3 bucket.</p>
                *             </dd>
                *             <dt>BadPermissionsCloudwatchLogs</dt>
                *             <dd>
                *                <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
                *             </dd>
                *             <dt>SubnetIpLimitExceeded</dt>
                *             <dd>
                *                <p>Subnet IP limit exceeded.</p>
                *             </dd>
                *             <dt>ENILimitExceeded</dt>
                *             <dd>
                *                <p>ENI limit exceeded.</p>
                *             </dd>
                *             <dt>BadPermissionsUserCredentials</dt>
                *             <dd>
                *                <p>Unable to use the Role provided.</p>
                *             </dd>
                *             <dt>InvalidBundleRobotApplication</dt>
                *             <dd>
                *                <p>Robot bundle cannot be extracted (invalid format, bundling error, or other
                *                   issue).</p>
                *             </dd>
                *             <dt>InvalidBundleSimulationApplication</dt>
                *             <dd>
                *                <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other
                *                   issue).</p>
                *             </dd>
                *             <dt>RobotApplicationVersionMismatchedEtag</dt>
                *             <dd>
                *                <p>Etag for RobotApplication does not match value during version creation.</p>
                *             </dd>
                *             <dt>SimulationApplicationVersionMismatchedEtag</dt>
                *             <dd>
                *                <p>Etag for SimulationApplication does not match value during version
                *                   creation.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: SimulationJobErrorCode | string;
            /**
                * <p>Details about why the simulation job failed. For more information about troubleshooting,
                *          see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/troubleshooting.html">Troubleshooting</a>.</p>
                */
            failureReason?: string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>Location for output files generated by the simulation job.</p>
                */
            outputLocation?: OutputLocation;
            /**
                * <p>The logging configuration.</p>
                */
            loggingConfig?: LoggingConfig;
            /**
                * <p>The maximum job duration in seconds. The value must be 8 days (691,200 seconds) or
                *          less.</p>
                */
            maxJobDurationInSeconds?: number;
            /**
                * <p>The simulation job execution duration in milliseconds.</p>
                */
            simulationTimeMillis?: number;
            /**
                * <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified
                *          in its associated policies on your behalf.</p>
                */
            iamRole?: string;
            /**
                * <p>A list of robot applications.</p>
                */
            robotApplications?: RobotApplicationConfig[];
            /**
                * <p>A list of simulation applications.</p>
                */
            simulationApplications?: SimulationApplicationConfig[];
            /**
                * <p>The data sources for the simulation job.</p>
                */
            dataSources?: DataSource[];
            /**
                * <p>The list of all tags added to the specified simulation job.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The VPC configuration.</p>
                */
            vpcConfig?: VPCConfigResponse;
            /**
                * <p>The network interface information for the simulation job.</p>
                */
            networkInterface?: NetworkInterface;
            /**
                * <p>Compute information for the simulation job.</p>
                */
            compute?: ComputeResponse;
    }
    export namespace DescribeSimulationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSimulationJobResponse) => any;
    }
    export interface DescribeSimulationJobBatchRequest {
            /**
                * <p>The id of the batch to describe.</p>
                */
            batch: string | undefined;
    }
    export namespace DescribeSimulationJobBatchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSimulationJobBatchRequest) => any;
    }
    /**
        * <p>Summary information for a simulation job.</p>
        */
    export interface SimulationJobSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation job.</p>
                */
            arn?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The name of the simulation job.</p>
                */
            name?: string;
            /**
                * <p>The status of the simulation job.</p>
                */
            status?: SimulationJobStatus | string;
            /**
                * <p>A list of simulation job simulation application names.</p>
                */
            simulationApplicationNames?: string[];
            /**
                * <p>A list of simulation job robot application names.</p>
                */
            robotApplicationNames?: string[];
            /**
                * <p>The names of the data sources.</p>
                */
            dataSourceNames?: string[];
            /**
                * <p>The compute type for the simulation job summary.</p>
                */
            computeType?: ComputeType | string;
    }
    export namespace SimulationJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulationJobSummary) => any;
    }
    /**
        * <p>Information about a failed create simulation job request.</p>
        */
    export interface FailedCreateSimulationJobRequest {
            /**
                * <p>The simulation job request.</p>
                */
            request?: SimulationJobRequest;
            /**
                * <p>The failure reason of the simulation job request.</p>
                */
            failureReason?: string;
            /**
                * <p>The failure code.</p>
                */
            failureCode?: SimulationJobErrorCode | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job batch failed.</p>
                */
            failedAt?: Date;
    }
    export namespace FailedCreateSimulationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedCreateSimulationJobRequest) => any;
    }
    export enum SimulationJobBatchErrorCode {
            InternalServiceError = "InternalServiceError"
    }
    export enum SimulationJobBatchStatus {
            Canceled = "Canceled",
            Canceling = "Canceling",
            Completed = "Completed",
            Completing = "Completing",
            Failed = "Failed",
            InProgress = "InProgress",
            Pending = "Pending",
            TimedOut = "TimedOut",
            TimingOut = "TimingOut"
    }
    export interface DescribeSimulationJobBatchResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the batch.</p>
                */
            arn?: string;
            /**
                * <p>The status of the batch.</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The simulation job batch request is pending.</p>
                *             </dd>
                *             <dt>InProgress</dt>
                *             <dd>
                *                <p>The simulation job batch is in progress. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The simulation job batch failed. One or more simulation job requests could not
                *                   be completed due to an internal failure (like <code>InternalServiceError</code>).
                *                   See <code>failureCode</code> and <code>failureReason</code> for more
                *                   information.</p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The simulation batch job completed. A batch is complete when (1) there are no
                *                   pending simulation job requests in the batch and none of the failed simulation job
                *                   requests are due to <code>InternalServiceError</code> and (2) when all created
                *                   simulation jobs have reached a terminal state (for example, <code>Completed</code>
                *                   or <code>Failed</code>). </p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The simulation batch job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The simulation batch job is being cancelled.</p>
                *             </dd>
                *             <dt>Completing</dt>
                *             <dd>
                *                <p>The simulation batch job is completing.</p>
                *             </dd>
                *             <dt>TimingOut</dt>
                *             <dd>
                *                <p>The simulation job batch is timing out.</p>
                *                <p>If a batch timing out, and there are pending requests that were failing due to
                *                   an internal failure (like <code>InternalServiceError</code>), the batch status
                *                   will be <code>Failed</code>. If there are no such failing request, the batch
                *                   status will be <code>TimedOut</code>. </p>
                *             </dd>
                *             <dt>TimedOut</dt>
                *             <dd>
                *                <p>The simulation batch job timed out.</p>
                *             </dd>
                *          </dl>
                */
            status?: SimulationJobBatchStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job batch was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job batch was
                *          created.</p>
                */
            createdAt?: Date;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The batch policy.</p>
                */
            batchPolicy?: BatchPolicy;
            /**
                * <p>The failure code of the simulation job batch.</p>
                */
            failureCode?: SimulationJobBatchErrorCode | string;
            /**
                * <p>The reason the simulation job batch failed.</p>
                */
            failureReason?: string;
            /**
                * <p>A list of failed create simulation job requests. The request failed to be created into a
                *          simulation job. Failed requests do not have a simulation job ID. </p>
                */
            failedRequests?: FailedCreateSimulationJobRequest[];
            /**
                * <p>A list of pending simulation job requests. These requests have not yet been created into
                *          simulation jobs.</p>
                */
            pendingRequests?: SimulationJobRequest[];
            /**
                * <p>A list of created simulation job summaries.</p>
                */
            createdRequests?: SimulationJobSummary[];
            /**
                * <p>A map that contains tag keys and tag values that are attached to the simulation job
                *          batch.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace DescribeSimulationJobBatchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSimulationJobBatchResponse) => any;
    }
    export interface DescribeWorldRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world you want to describe.</p>
                */
            world: string | undefined;
    }
    export namespace DescribeWorldRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldRequest) => any;
    }
    export interface DescribeWorldResponse {
            /**
                * <p>The Amazon Resource Name (arn) of the world.</p>
                */
            arn?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the world generation job that generated the
                *          world.</p>
                */
            generationJob?: string;
            /**
                * <p>The world template.</p>
                */
            template?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Returns the JSON formatted string that describes the contents of your world.</p>
                */
            worldDescriptionBody?: string;
    }
    export namespace DescribeWorldResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldResponse) => any;
    }
    export interface DescribeWorldExportJobRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world export job to describe.</p>
                */
            job: string | undefined;
    }
    export namespace DescribeWorldExportJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldExportJobRequest) => any;
    }
    export interface DescribeWorldExportJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the world export job.</p>
                */
            arn?: string;
            /**
                * <p>The status of the world export job.</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The world export job request is pending.</p>
                *             </dd>
                *             <dt>Running</dt>
                *             <dd>
                *                <p>The world export job is running. </p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The world export job completed. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The world export job failed. See <code>failureCode</code> and
                *                      <code>failureReason</code> for more information. </p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The world export job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The world export job is being cancelled.</p>
                *             </dd>
                *          </dl>
                */
            status?: WorldExportJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world export job was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The failure code of the world export job if it failed:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>LimitExceeded</dt>
                *             <dd>
                *                <p>The requested resource exceeds the maximum number allowed, or the number of
                *                   concurrent stream requests exceeds the maximum number allowed. </p>
                *             </dd>
                *             <dt>ResourceNotFound</dt>
                *             <dd>
                *                <p>The specified resource could not be found. </p>
                *             </dd>
                *             <dt>RequestThrottled</dt>
                *             <dd>
                *                <p>The request was throttled.</p>
                *             </dd>
                *             <dt>InvalidInput</dt>
                *             <dd>
                *                <p>An input parameter in the request is not valid.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: WorldExportJobErrorCode | string;
            /**
                * <p>The reason why the world export job failed.</p>
                */
            failureReason?: string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>A list of Amazon Resource Names (arns) that correspond to worlds to be exported.</p>
                */
            worlds?: string[];
            /**
                * <p>The output location.</p>
                */
            outputLocation?: OutputLocation;
            /**
                * <p>The IAM role that the world export process uses to access the Amazon S3 bucket and put
                *          the export.</p>
                */
            iamRole?: string;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world export
                *          job.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace DescribeWorldExportJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldExportJobResponse) => any;
    }
    export interface DescribeWorldGenerationJobRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world generation job to describe.</p>
                */
            job: string | undefined;
    }
    export namespace DescribeWorldGenerationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldGenerationJobRequest) => any;
    }
    /**
        * <p>Information about a failed world.</p>
        */
    export interface WorldFailure {
            /**
                * <p>The failure code of the world export job if it failed:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>LimitExceeded</dt>
                *             <dd>
                *                <p>The requested resource exceeds the maximum number allowed, or the number of
                *                   concurrent stream requests exceeds the maximum number allowed. </p>
                *             </dd>
                *             <dt>ResourceNotFound</dt>
                *             <dd>
                *                <p>The specified resource could not be found. </p>
                *             </dd>
                *             <dt>RequestThrottled</dt>
                *             <dd>
                *                <p>The request was throttled.</p>
                *             </dd>
                *             <dt>InvalidInput</dt>
                *             <dd>
                *                <p>An input parameter in the request is not valid.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: WorldGenerationJobErrorCode | string;
            /**
                * <p>The sample reason why the world failed. World errors are aggregated. A sample is used as
                *          the <code>sampleFailureReason</code>. </p>
                */
            sampleFailureReason?: string;
            /**
                * <p>The number of failed worlds.</p>
                */
            failureCount?: number;
    }
    export namespace WorldFailure {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorldFailure) => any;
    }
    /**
        * <p>Information about worlds that failed.</p>
        */
    export interface FailureSummary {
            /**
                * <p>The total number of failures.</p>
                */
            totalFailureCount?: number;
            /**
                * <p>The worlds that failed.</p>
                */
            failures?: WorldFailure[];
    }
    export namespace FailureSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailureSummary) => any;
    }
    /**
        * <p>Information about worlds that finished.</p>
        */
    export interface FinishedWorldsSummary {
            /**
                * <p>The total number of finished worlds.</p>
                */
            finishedCount?: number;
            /**
                * <p>A list of worlds that succeeded.</p>
                */
            succeededWorlds?: string[];
            /**
                * <p>Information about worlds that failed.</p>
                */
            failureSummary?: FailureSummary;
    }
    export namespace FinishedWorldsSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FinishedWorldsSummary) => any;
    }
    export interface DescribeWorldGenerationJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the world generation job.</p>
                */
            arn?: string;
            /**
                * <p>The status of the world generation job:</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The world generation job request is pending.</p>
                *             </dd>
                *             <dt>Running</dt>
                *             <dd>
                *                <p>The world generation job is running. </p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The world generation job completed. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The world generation job failed. See <code>failureCode</code> for more
                *                   information. </p>
                *             </dd>
                *             <dt>PartialFailed</dt>
                *             <dd>
                *                <p>Some worlds did not generate.</p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The world generation job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The world generation job is being cancelled.</p>
                *             </dd>
                *          </dl>
                */
            status?: WorldGenerationJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world generation job was
                *          created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The failure code of the world generation job if it failed:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>LimitExceeded</dt>
                *             <dd>
                *                <p>The requested resource exceeds the maximum number allowed, or the number of
                *                   concurrent stream requests exceeds the maximum number allowed. </p>
                *             </dd>
                *             <dt>ResourceNotFound</dt>
                *             <dd>
                *                <p>The specified resource could not be found. </p>
                *             </dd>
                *             <dt>RequestThrottled</dt>
                *             <dd>
                *                <p>The request was throttled.</p>
                *             </dd>
                *             <dt>InvalidInput</dt>
                *             <dd>
                *                <p>An input parameter in the request is not valid.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: WorldGenerationJobErrorCode | string;
            /**
                * <p>The reason why the world generation job failed.</p>
                */
            failureReason?: string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the world template.</p>
                */
            template?: string;
            /**
                * <p>Information about the world count.</p>
                */
            worldCount?: WorldCount;
            /**
                * <p>Summary information about finished worlds.</p>
                */
            finishedWorldsSummary?: FinishedWorldsSummary;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world generation
                *          job.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the generated
                *          worlds.</p>
                */
            worldTags?: Record<string, string>;
    }
    export namespace DescribeWorldGenerationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldGenerationJobResponse) => any;
    }
    export interface DescribeWorldTemplateRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world template you want to describe.</p>
                */
            template: string | undefined;
    }
    export namespace DescribeWorldTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldTemplateRequest) => any;
    }
    export interface DescribeWorldTemplateResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the world template.</p>
                */
            arn?: string;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The name of the world template.</p>
                */
            name?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world template was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the world template was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the world
                *          template.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The version of the world template that you're using.</p>
                */
            version?: string;
    }
    export namespace DescribeWorldTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeWorldTemplateResponse) => any;
    }
    /**
        * <p>Information about a filter.</p>
        */
    export interface Filter {
            /**
                * <p>The name of the filter.</p>
                */
            name?: string;
            /**
                * <p>A list of values.</p>
                */
            values?: string[];
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>Information about a fleet.</p>
        */
    export interface Fleet {
            /**
                * <p>The name of the fleet.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            arn?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The status of the last fleet deployment.</p>
                */
            lastDeploymentStatus?: DeploymentStatus | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
                */
            lastDeploymentJob?: string;
            /**
                * <p>The time of the last deployment.</p>
                */
            lastDeploymentTime?: Date;
    }
    export namespace Fleet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Fleet) => any;
    }
    export interface GetWorldTemplateBodyRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world template.</p>
                */
            template?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the world generator job.</p>
                */
            generationJob?: string;
    }
    export namespace GetWorldTemplateBodyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorldTemplateBodyRequest) => any;
    }
    export interface GetWorldTemplateBodyResponse {
            /**
                * <p>The world template body.</p>
                */
            templateBody?: string;
    }
    export namespace GetWorldTemplateBodyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWorldTemplateBodyResponse) => any;
    }
    export interface ListDeploymentJobsRequest {
            /**
                * <p>Optional filters to limit results.</p>
                *          <p>The filter names <code>status</code> and <code>fleetName</code> are supported. When
                *          filtering, you must use the complete value of the filtered item. You can use up to three
                *          filters, but they must be for the same named item. For example, if you are looking for
                *          items with the status <code>InProgress</code> or the status <code>Pending</code>.</p>
                */
            filters?: Filter[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListDeploymentJobs</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListDeploymentJobs</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListDeploymentJobs</code> request with the returned <code>nextToken</code>
                *          value. This value can be between 1 and 200. If this parameter is not used, then
                *             <code>ListDeploymentJobs</code> returns up to 200 results and a <code>nextToken</code>
                *          value if applicable. </p>
                */
            maxResults?: number;
    }
    export namespace ListDeploymentJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentJobsRequest) => any;
    }
    export interface ListDeploymentJobsResponse {
            /**
                * <p>A list of deployment jobs that meet the criteria of the request.</p>
                */
            deploymentJobs?: DeploymentJob[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListDeploymentJobs</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListDeploymentJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDeploymentJobsResponse) => any;
    }
    export interface ListFleetsRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListFleets</code> again and assign that token to the
                *          request object's <code>nextToken</code> parameter. If there are no remaining results, the
                *          previous response object's NextToken parameter is set to null. </p>
                *          <note>
                *             <p>This token should be treated as an opaque identifier that is only used to retrieve
                *             the next items in a list and not for other programmatic purposes.</p>
                *          </note>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListFleets</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListFleets</code> request with the returned <code>nextToken</code> value.
                *          This value can be between 1 and 200. If this parameter is not used, then
                *             <code>ListFleets</code> returns up to 200 results and a <code>nextToken</code> value if
                *          applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results.</p>
                *          <p>The filter name <code>name</code> is supported. When filtering, you must use the
                *          complete value of the filtered item. You can use up to three filters.</p>
                */
            filters?: Filter[];
    }
    export namespace ListFleetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFleetsRequest) => any;
    }
    export interface ListFleetsResponse {
            /**
                * <p>A list of fleet details meeting the request criteria.</p>
                */
            fleetDetails?: Fleet[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListFleets</code> again and assign that token to the
                *          request object's <code>nextToken</code> parameter. If there are no remaining results, the
                *          previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListFleetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFleetsResponse) => any;
    }
    export interface ListRobotApplicationsRequest {
            /**
                * <p>The version qualifier of the robot application.</p>
                */
            versionQualifier?: string;
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListRobotApplications</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListRobotApplications</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListRobotApplications</code> request with the returned <code>nextToken</code>
                *          value. This value can be between 1 and 100. If this parameter is not used, then
                *             <code>ListRobotApplications</code> returns up to 100 results and a
                *             <code>nextToken</code> value if applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results.</p>
                *          <p>The filter name <code>name</code> is supported. When filtering, you must use the
                *          complete value of the filtered item. You can use up to three filters.</p>
                */
            filters?: Filter[];
    }
    export namespace ListRobotApplicationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRobotApplicationsRequest) => any;
    }
    /**
        * <p>Summary information for a robot application.</p>
        */
    export interface RobotApplicationSummary {
            /**
                * <p>The name of the robot application.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            arn?: string;
            /**
                * <p>The version of the robot application.</p>
                */
            version?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>Information about a robot software suite (ROS distribution).</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
    }
    export namespace RobotApplicationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RobotApplicationSummary) => any;
    }
    export interface ListRobotApplicationsResponse {
            /**
                * <p>A list of robot application summaries that meet the criteria of the request.</p>
                */
            robotApplicationSummaries?: RobotApplicationSummary[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListRobotApplications</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListRobotApplicationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRobotApplicationsResponse) => any;
    }
    export interface ListRobotsRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListRobots</code> again and assign that token to the
                *          request object's <code>nextToken</code> parameter. If there are no remaining results, the
                *          previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListRobots</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListRobots</code> request with the returned <code>nextToken</code> value.
                *          This value can be between 1 and 200. If this parameter is not used, then
                *             <code>ListRobots</code> returns up to 200 results and a <code>nextToken</code> value if
                *          applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results.</p>
                *          <p>The filter names <code>status</code> and <code>fleetName</code> are supported. When
                *          filtering, you must use the complete value of the filtered item. You can use up to three
                *          filters, but they must be for the same named item. For example, if you are looking for
                *          items with the status <code>Registered</code> or the status <code>Available</code>.</p>
                */
            filters?: Filter[];
    }
    export namespace ListRobotsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRobotsRequest) => any;
    }
    export interface ListRobotsResponse {
            /**
                * <p>A list of robots that meet the criteria of the request.</p>
                */
            robots?: Robot[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListRobots</code> again and assign that token to the
                *          request object's <code>nextToken</code> parameter. If there are no remaining results, the
                *          previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListRobotsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRobotsResponse) => any;
    }
    export interface ListSimulationApplicationsRequest {
            /**
                * <p>The version qualifier of the simulation application.</p>
                */
            versionQualifier?: string;
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListSimulationApplications</code> again and assign that
                *          token to the request object's <code>nextToken</code> parameter. If there are no remaining
                *          results, the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListSimulationApplications</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListSimulationApplications</code> request with the returned
                *             <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is
                *          not used, then <code>ListSimulationApplications</code> returns up to 100 results and a
                *             <code>nextToken</code> value if applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional list of filters to limit results.</p>
                *          <p>The filter name <code>name</code> is supported. When filtering, you must use the
                *          complete value of the filtered item. You can use up to three filters.</p>
                */
            filters?: Filter[];
    }
    export namespace ListSimulationApplicationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSimulationApplicationsRequest) => any;
    }
    /**
        * <p>Summary information for a simulation application.</p>
        */
    export interface SimulationApplicationSummary {
            /**
                * <p>The name of the simulation application.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation application.</p>
                */
            arn?: string;
            /**
                * <p>The version of the simulation application.</p>
                */
            version?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>Information about a robot software suite (ROS distribution).</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>Information about a simulation software suite.</p>
                */
            simulationSoftwareSuite?: SimulationSoftwareSuite;
    }
    export namespace SimulationApplicationSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulationApplicationSummary) => any;
    }
    export interface ListSimulationApplicationsResponse {
            /**
                * <p>A list of simulation application summaries that meet the criteria of the request.</p>
                */
            simulationApplicationSummaries?: SimulationApplicationSummary[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListSimulationApplications</code> again and assign that
                *          token to the request object's <code>nextToken</code> parameter. If there are no remaining
                *          results, the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListSimulationApplicationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSimulationApplicationsResponse) => any;
    }
    export interface ListSimulationJobBatchesRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListSimulationJobBatches</code> again and assign that token
                *          to the request object's <code>nextToken</code> parameter. If there are no remaining
                *          results, the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListSimulationJobBatches</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListSimulationJobBatches</code> request with the returned
                *             <code>nextToken</code> value. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results.</p>
                */
            filters?: Filter[];
    }
    export namespace ListSimulationJobBatchesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSimulationJobBatchesRequest) => any;
    }
    /**
        * <p>Information about a simulation job batch.</p>
        */
    export interface SimulationJobBatchSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the batch.</p>
                */
            arn?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job batch was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job batch was
                *          created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The status of the simulation job batch.</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The simulation job batch request is pending.</p>
                *             </dd>
                *             <dt>InProgress</dt>
                *             <dd>
                *                <p>The simulation job batch is in progress. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The simulation job batch failed. One or more simulation job requests could not
                *                   be completed due to an internal failure (like <code>InternalServiceError</code>).
                *                   See <code>failureCode</code> and <code>failureReason</code> for more
                *                   information.</p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The simulation batch job completed. A batch is complete when (1) there are no
                *                   pending simulation job requests in the batch and none of the failed simulation job
                *                   requests are due to <code>InternalServiceError</code> and (2) when all created
                *                   simulation jobs have reached a terminal state (for example, <code>Completed</code>
                *                   or <code>Failed</code>). </p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The simulation batch job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The simulation batch job is being cancelled.</p>
                *             </dd>
                *             <dt>Completing</dt>
                *             <dd>
                *                <p>The simulation batch job is completing.</p>
                *             </dd>
                *             <dt>TimingOut</dt>
                *             <dd>
                *                <p>The simulation job batch is timing out.</p>
                *                <p>If a batch timing out, and there are pending requests that were failing due to
                *                   an internal failure (like <code>InternalServiceError</code>), the batch status
                *                   will be <code>Failed</code>. If there are no such failing request, the batch
                *                   status will be <code>TimedOut</code>. </p>
                *             </dd>
                *             <dt>TimedOut</dt>
                *             <dd>
                *                <p>The simulation batch job timed out.</p>
                *             </dd>
                *          </dl>
                */
            status?: SimulationJobBatchStatus | string;
            /**
                * <p>The number of failed simulation job requests.</p>
                */
            failedRequestCount?: number;
            /**
                * <p>The number of pending simulation job requests.</p>
                */
            pendingRequestCount?: number;
            /**
                * <p>The number of created simulation job requests.</p>
                */
            createdRequestCount?: number;
    }
    export namespace SimulationJobBatchSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulationJobBatchSummary) => any;
    }
    export interface ListSimulationJobBatchesResponse {
            /**
                * <p>A list of simulation job batch summaries.</p>
                */
            simulationJobBatchSummaries?: SimulationJobBatchSummary[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListSimulationJobBatches</code> again and assign that token
                *          to the request object's <code>nextToken</code> parameter. If there are no remaining
                *          results, the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListSimulationJobBatchesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSimulationJobBatchesResponse) => any;
    }
    export interface ListSimulationJobsRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListSimulationJobs</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListSimulationJobs</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListSimulationJobs</code> request with the returned <code>nextToken</code>
                *          value. This value can be between 1 and 1000. If this parameter is not used, then
                *             <code>ListSimulationJobs</code> returns up to 1000 results and a <code>nextToken</code>
                *          value if applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results.</p>
                *          <p>The filter names <code>status</code> and <code>simulationApplicationName</code> and
                *             <code>robotApplicationName</code> are supported. When filtering, you must use the
                *          complete value of the filtered item. You can use up to three filters, but they must be for
                *          the same named item. For example, if you are looking for items with the status
                *             <code>Preparing</code> or the status <code>Running</code>.</p>
                */
            filters?: Filter[];
    }
    export namespace ListSimulationJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSimulationJobsRequest) => any;
    }
    export interface ListSimulationJobsResponse {
            /**
                * <p>A list of simulation job summaries that meet the criteria of the request.</p>
                */
            simulationJobSummaries: SimulationJobSummary[] | undefined;
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListSimulationJobs</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListSimulationJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSimulationJobsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The AWS RoboMaker Amazon Resource Name (ARN) with tags to be listed.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The list of all tags added to the specified resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListWorldExportJobsRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorldExportJobs</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListWorldExportJobs</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListWorldExportJobs</code> request with the returned <code>nextToken</code>
                *          value. This value can be between 1 and 100. If this parameter is not used, then
                *             <code>ListWorldExportJobs</code> returns up to 100 results and a <code>nextToken</code>
                *          value if applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results. You can use <code>generationJobId</code> and
                *             <code>templateId</code>.</p>
                */
            filters?: Filter[];
    }
    export namespace ListWorldExportJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldExportJobsRequest) => any;
    }
    /**
        * <p>Information about a world export job.</p>
        */
    export interface WorldExportJobSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the world export job.</p>
                */
            arn?: string;
            /**
                * <p>The status of the world export job.</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The world export job request is pending.</p>
                *             </dd>
                *             <dt>Running</dt>
                *             <dd>
                *                <p>The world export job is running. </p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The world export job completed. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The world export job failed. See <code>failureCode</code> for more information.
                *                </p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The world export job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The world export job is being cancelled.</p>
                *             </dd>
                *          </dl>
                */
            status?: WorldExportJobStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world export job was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>A list of worlds.</p>
                */
            worlds?: string[];
            /**
                * <p>The output location.</p>
                */
            outputLocation?: OutputLocation;
    }
    export namespace WorldExportJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorldExportJobSummary) => any;
    }
    export interface ListWorldExportJobsResponse {
            /**
                * <p>Summary information for world export jobs.</p>
                */
            worldExportJobSummaries: WorldExportJobSummary[] | undefined;
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorldExportJobsRequest</code> again and assign that
                *          token to the request object's <code>nextToken</code> parameter. If there are no remaining
                *          results, the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListWorldExportJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldExportJobsResponse) => any;
    }
    export interface ListWorldGenerationJobsRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorldGenerationJobsRequest</code> again and assign that
                *          token to the request object's <code>nextToken</code> parameter. If there are no remaining
                *          results, the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListWorldGeneratorJobs</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListWorldGeneratorJobs</code> request with the returned
                *             <code>nextToken</code> value. This value can be between 1 and 100. If this parameter is
                *          not used, then <code>ListWorldGeneratorJobs</code> returns up to 100 results and a
                *             <code>nextToken</code> value if applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results. You can use <code>status</code> and
                *             <code>templateId</code>.</p>
                */
            filters?: Filter[];
    }
    export namespace ListWorldGenerationJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldGenerationJobsRequest) => any;
    }
    /**
        * <p>Information about a world generator job.</p>
        */
    export interface WorldGenerationJobSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the world generator job.</p>
                */
            arn?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the world template.</p>
                */
            template?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world generator job was
                *          created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The status of the world generator job:</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The world generator job request is pending.</p>
                *             </dd>
                *             <dt>Running</dt>
                *             <dd>
                *                <p>The world generator job is running. </p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The world generator job completed. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The world generator job failed. See <code>failureCode</code> for more
                *                   information. </p>
                *             </dd>
                *             <dt>PartialFailed</dt>
                *             <dd>
                *                <p>Some worlds did not generate.</p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The world generator job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The world generator job is being cancelled.</p>
                *             </dd>
                *          </dl>
                */
            status?: WorldGenerationJobStatus | string;
            /**
                * <p>Information about the world count.</p>
                */
            worldCount?: WorldCount;
            /**
                * <p>The number of worlds that were generated.</p>
                */
            succeededWorldCount?: number;
            /**
                * <p>The number of worlds that failed.</p>
                */
            failedWorldCount?: number;
    }
    export namespace WorldGenerationJobSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorldGenerationJobSummary) => any;
    }
    export interface ListWorldGenerationJobsResponse {
            /**
                * <p>Summary information for world generator jobs.</p>
                */
            worldGenerationJobSummaries: WorldGenerationJobSummary[] | undefined;
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorldGeneratorJobsRequest</code> again and assign that
                *          token to the request object's <code>nextToken</code> parameter. If there are no remaining
                *          results, the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListWorldGenerationJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldGenerationJobsResponse) => any;
    }
    export interface ListWorldsRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorlds</code> again and assign that token to the
                *          request object's <code>nextToken</code> parameter. If there are no remaining results, the
                *          previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListWorlds</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListWorlds</code> request with the returned <code>nextToken</code> value.
                *          This value can be between 1 and 100. If this parameter is not used, then
                *             <code>ListWorlds</code> returns up to 100 results and a <code>nextToken</code> value if
                *          applicable. </p>
                */
            maxResults?: number;
            /**
                * <p>Optional filters to limit results. You can use <code>status</code>.</p>
                */
            filters?: Filter[];
    }
    export namespace ListWorldsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldsRequest) => any;
    }
    /**
        * <p>Information about a world.</p>
        */
    export interface WorldSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the world.</p>
                */
            arn?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The Amazon Resource Name (arn) of the world generation job.</p>
                */
            generationJob?: string;
            /**
                * <p>The Amazon Resource Name (arn) of the world template.</p>
                */
            template?: string;
    }
    export namespace WorldSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorldSummary) => any;
    }
    export interface ListWorldsResponse {
            /**
                * <p>Summary information for worlds.</p>
                */
            worldSummaries?: WorldSummary[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorlds</code> again and assign that token to the
                *          request object's <code>nextToken</code> parameter. If there are no remaining results, the
                *          previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListWorldsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldsResponse) => any;
    }
    export interface ListWorldTemplatesRequest {
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorldTemplates</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
            /**
                * <p>When this parameter is used, <code>ListWorldTemplates</code> only returns
                *             <code>maxResults</code> results in a single page along with a <code>nextToken</code>
                *          response element. The remaining results of the initial request can be seen by sending
                *          another <code>ListWorldTemplates</code> request with the returned <code>nextToken</code>
                *          value. This value can be between 1 and 100. If this parameter is not used, then
                *             <code>ListWorldTemplates</code> returns up to 100 results and a <code>nextToken</code>
                *          value if applicable. </p>
                */
            maxResults?: number;
    }
    export namespace ListWorldTemplatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldTemplatesRequest) => any;
    }
    /**
        * <p>Summary information for a template.</p>
        */
    export interface TemplateSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the template.</p>
                */
            arn?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the template was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the template was last updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The name of the template.</p>
                */
            name?: string;
            /**
                * <p>The version of the template that you're using.</p>
                */
            version?: string;
    }
    export namespace TemplateSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TemplateSummary) => any;
    }
    export interface ListWorldTemplatesResponse {
            /**
                * <p>Summary information for templates.</p>
                */
            templateSummaries?: TemplateSummary[];
            /**
                * <p>If the previous paginated request did not return all of the remaining results, the
                *          response object's <code>nextToken</code> parameter value is set to a token. To retrieve the
                *          next set of results, call <code>ListWorldTemplates</code> again and assign that token to
                *          the request object's <code>nextToken</code> parameter. If there are no remaining results,
                *          the previous response object's NextToken parameter is set to null. </p>
                */
            nextToken?: string;
    }
    export namespace ListWorldTemplatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorldTemplatesResponse) => any;
    }
    export interface RegisterRobotRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the robot.</p>
                */
            robot: string | undefined;
    }
    export namespace RegisterRobotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterRobotRequest) => any;
    }
    export interface RegisterRobotResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet that the robot will join.</p>
                */
            fleet?: string;
            /**
                * <p>Information about the robot registration.</p>
                */
            robot?: string;
    }
    export namespace RegisterRobotResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterRobotResponse) => any;
    }
    export interface RestartSimulationJobRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the simulation job.</p>
                */
            job: string | undefined;
    }
    export namespace RestartSimulationJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestartSimulationJobRequest) => any;
    }
    export interface RestartSimulationJobResponse {
    }
    export namespace RestartSimulationJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestartSimulationJobResponse) => any;
    }
    export interface StartSimulationJobBatchRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The batch policy.</p>
                */
            batchPolicy?: BatchPolicy;
            /**
                * <p>A list of simulation job requests to create in the batch.</p>
                */
            createSimulationJobRequests: SimulationJobRequest[] | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the deployment job
                *          batch.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace StartSimulationJobBatchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSimulationJobBatchRequest) => any;
    }
    export interface StartSimulationJobBatchResponse {
            /**
                * <p>The Amazon Resource Name (arn) of the batch.</p>
                */
            arn?: string;
            /**
                * <p>The status of the simulation job batch.</p>
                *          <dl>
                *             <dt>Pending</dt>
                *             <dd>
                *                <p>The simulation job batch request is pending.</p>
                *             </dd>
                *             <dt>InProgress</dt>
                *             <dd>
                *                <p>The simulation job batch is in progress. </p>
                *             </dd>
                *             <dt>Failed</dt>
                *             <dd>
                *                <p>The simulation job batch failed. One or more simulation job requests could not
                *                   be completed due to an internal failure (like <code>InternalServiceError</code>).
                *                   See <code>failureCode</code> and <code>failureReason</code> for more
                *                   information.</p>
                *             </dd>
                *             <dt>Completed</dt>
                *             <dd>
                *                <p>The simulation batch job completed. A batch is complete when (1) there are no
                *                   pending simulation job requests in the batch and none of the failed simulation job
                *                   requests are due to <code>InternalServiceError</code> and (2) when all created
                *                   simulation jobs have reached a terminal state (for example, <code>Completed</code>
                *                   or <code>Failed</code>). </p>
                *             </dd>
                *             <dt>Canceled</dt>
                *             <dd>
                *                <p>The simulation batch job was cancelled.</p>
                *             </dd>
                *             <dt>Canceling</dt>
                *             <dd>
                *                <p>The simulation batch job is being cancelled.</p>
                *             </dd>
                *             <dt>Completing</dt>
                *             <dd>
                *                <p>The simulation batch job is completing.</p>
                *             </dd>
                *             <dt>TimingOut</dt>
                *             <dd>
                *                <p>The simulation job batch is timing out.</p>
                *                <p>If a batch timing out, and there are pending requests that were failing due to
                *                   an internal failure (like <code>InternalServiceError</code>), the batch status
                *                   will be <code>Failed</code>. If there are no such failing request, the batch
                *                   status will be <code>TimedOut</code>. </p>
                *             </dd>
                *             <dt>TimedOut</dt>
                *             <dd>
                *                <p>The simulation batch job timed out.</p>
                *             </dd>
                *          </dl>
                */
            status?: SimulationJobBatchStatus | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation job batch was
                *          created.</p>
                */
            createdAt?: Date;
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The batch policy.</p>
                */
            batchPolicy?: BatchPolicy;
            /**
                * <p>The failure code if the simulation job batch failed.</p>
                */
            failureCode?: SimulationJobBatchErrorCode | string;
            /**
                * <p>The reason the simulation job batch failed.</p>
                */
            failureReason?: string;
            /**
                * <p>A list of failed simulation job requests. The request failed to be created into a
                *          simulation job. Failed requests do not have a simulation job ID. </p>
                */
            failedRequests?: FailedCreateSimulationJobRequest[];
            /**
                * <p>A list of pending simulation job requests. These requests have not yet been created into
                *          simulation jobs.</p>
                */
            pendingRequests?: SimulationJobRequest[];
            /**
                * <p>A list of created simulation job request summaries.</p>
                */
            createdRequests?: SimulationJobSummary[];
            /**
                * <p>A map that contains tag keys and tag values that are attached to the deployment job
                *          batch.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace StartSimulationJobBatchResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSimulationJobBatchResponse) => any;
    }
    export interface SyncDeploymentJobRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *          request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The target fleet for the synchronization.</p>
                */
            fleet: string | undefined;
    }
    export namespace SyncDeploymentJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SyncDeploymentJobRequest) => any;
    }
    export interface SyncDeploymentJobResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the synchronization request.</p>
                */
            arn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the fleet.</p>
                */
            fleet?: string;
            /**
                * <p>The status of the synchronization job.</p>
                */
            status?: DeploymentStatus | string;
            /**
                * <p>Information about the deployment configuration.</p>
                */
            deploymentConfig?: DeploymentConfig;
            /**
                * <p>Information about the deployment application configurations.</p>
                */
            deploymentApplicationConfigs?: DeploymentApplicationConfig[];
            /**
                * <p>The failure reason if the job fails.</p>
                */
            failureReason?: string;
            /**
                * <p>The failure code if the job fails:</p>
                *          <dl>
                *             <dt>InternalServiceError</dt>
                *             <dd>
                *                <p>Internal service error.</p>
                *             </dd>
                *             <dt>RobotApplicationCrash</dt>
                *             <dd>
                *                <p>Robot application exited abnormally.</p>
                *             </dd>
                *             <dt>SimulationApplicationCrash</dt>
                *             <dd>
                *                <p> Simulation application exited abnormally.</p>
                *             </dd>
                *             <dt>BadPermissionsRobotApplication</dt>
                *             <dd>
                *                <p>Robot application bundle could not be downloaded.</p>
                *             </dd>
                *             <dt>BadPermissionsSimulationApplication</dt>
                *             <dd>
                *                <p>Simulation application bundle could not be downloaded.</p>
                *             </dd>
                *             <dt>BadPermissionsS3Output</dt>
                *             <dd>
                *                <p>Unable to publish outputs to customer-provided S3 bucket.</p>
                *             </dd>
                *             <dt>BadPermissionsCloudwatchLogs</dt>
                *             <dd>
                *                <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
                *             </dd>
                *             <dt>SubnetIpLimitExceeded</dt>
                *             <dd>
                *                <p>Subnet IP limit exceeded.</p>
                *             </dd>
                *             <dt>ENILimitExceeded</dt>
                *             <dd>
                *                <p>ENI limit exceeded.</p>
                *             </dd>
                *             <dt>BadPermissionsUserCredentials</dt>
                *             <dd>
                *                <p>Unable to use the Role provided.</p>
                *             </dd>
                *             <dt>InvalidBundleRobotApplication</dt>
                *             <dd>
                *                <p>Robot bundle cannot be extracted (invalid format, bundling error, or other
                *                   issue).</p>
                *             </dd>
                *             <dt>InvalidBundleSimulationApplication</dt>
                *             <dd>
                *                <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other
                *                   issue).</p>
                *             </dd>
                *             <dt>RobotApplicationVersionMismatchedEtag</dt>
                *             <dd>
                *                <p>Etag for RobotApplication does not match value during version creation.</p>
                *             </dd>
                *             <dt>SimulationApplicationVersionMismatchedEtag</dt>
                *             <dd>
                *                <p>Etag for SimulationApplication does not match value during version
                *                   creation.</p>
                *             </dd>
                *          </dl>
                */
            failureCode?: DeploymentJobErrorCode | string;
            /**
                * <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
                */
            createdAt?: Date;
    }
    export namespace SyncDeploymentJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SyncDeploymentJobResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are tagging.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A map that contains tag keys and tag values that are attached to the resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the AWS RoboMaker resource you are removing
                *          tags.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A map that contains tag keys and tag values that will be unattached from the
                *          resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateRobotApplicationRequest {
            /**
                * <p>The application information for the robot application.</p>
                */
            application: string | undefined;
            /**
                * <p>The sources of the robot application.</p>
                */
            sources?: SourceConfig[];
            /**
                * <p>The robot software suite (ROS distribution) used by the robot application.</p>
                */
            robotSoftwareSuite: RobotSoftwareSuite | undefined;
            /**
                * <p>The revision id for the robot application.</p>
                */
            currentRevisionId?: string;
            /**
                * <p>The object that contains the Docker image URI for your robot application.</p>
                */
            environment?: Environment;
    }
    export namespace UpdateRobotApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRobotApplicationRequest) => any;
    }
    export interface UpdateRobotApplicationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the updated robot application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the robot application.</p>
                */
            name?: string;
            /**
                * <p>The version of the robot application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the robot application.</p>
                */
            sources?: Source[];
            /**
                * <p>The robot software suite (ROS distribution) used by the robot application.</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The time, in milliseconds since the epoch, when the robot application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The revision id of the robot application.</p>
                */
            revisionId?: string;
            /**
                * <p>The object that contains the Docker image URI for your robot application.</p>
                */
            environment?: Environment;
    }
    export namespace UpdateRobotApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRobotApplicationResponse) => any;
    }
    export interface UpdateSimulationApplicationRequest {
            /**
                * <p>The application information for the simulation application.</p>
                */
            application: string | undefined;
            /**
                * <p>The sources of the simulation application.</p>
                */
            sources?: SourceConfig[];
            /**
                * <p>The simulation software suite used by the simulation application.</p>
                */
            simulationSoftwareSuite: SimulationSoftwareSuite | undefined;
            /**
                * <p>Information about the robot software suite (ROS distribution).</p>
                */
            robotSoftwareSuite: RobotSoftwareSuite | undefined;
            /**
                * <p>The rendering engine for the simulation application.</p>
                */
            renderingEngine?: RenderingEngine;
            /**
                * <p>The revision id for the robot application.</p>
                */
            currentRevisionId?: string;
            /**
                * <p>The object that contains the Docker image URI for your simulation application.</p>
                */
            environment?: Environment;
    }
    export namespace UpdateSimulationApplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSimulationApplicationRequest) => any;
    }
    export interface UpdateSimulationApplicationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the updated simulation application.</p>
                */
            arn?: string;
            /**
                * <p>The name of the simulation application.</p>
                */
            name?: string;
            /**
                * <p>The version of the robot application.</p>
                */
            version?: string;
            /**
                * <p>The sources of the simulation application.</p>
                */
            sources?: Source[];
            /**
                * <p>The simulation software suite used by the simulation application.</p>
                */
            simulationSoftwareSuite?: SimulationSoftwareSuite;
            /**
                * <p>Information about the robot software suite (ROS distribution).</p>
                */
            robotSoftwareSuite?: RobotSoftwareSuite;
            /**
                * <p>The rendering engine for the simulation application.</p>
                */
            renderingEngine?: RenderingEngine;
            /**
                * <p>The time, in milliseconds since the epoch, when the simulation application was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p>The revision id of the simulation application.</p>
                */
            revisionId?: string;
            /**
                * <p>The object that contains the Docker image URI used for your simulation
                *          application.</p>
                */
            environment?: Environment;
    }
    export namespace UpdateSimulationApplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSimulationApplicationResponse) => any;
    }
    export interface UpdateWorldTemplateRequest {
            /**
                * <p>The Amazon Resource Name (arn) of the world template to update.</p>
                */
            template: string | undefined;
            /**
                * <p>The name of the template.</p>
                */
            name?: string;
            /**
                * <p>The world template body.</p>
                */
            templateBody?: string;
            /**
                * <p>The location of the world template.</p>
                */
            templateLocation?: TemplateLocation;
    }
    export namespace UpdateWorldTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorldTemplateRequest) => any;
    }
    export interface UpdateWorldTemplateResponse {
            /**
                * <p>The Amazon Resource Name (arn) of the world template.</p>
                */
            arn?: string;
            /**
                * <p>The name of the world template.</p>
                */
            name?: string;
            /**
                * <p>The time, in milliseconds since the epoch, when the world template was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The time, in milliseconds since the epoch, when the world template was last
                *          updated.</p>
                */
            lastUpdatedAt?: Date;
    }
    export namespace UpdateWorldTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWorldTemplateResponse) => any;
    }
}

declare module '@aws-sdk/client-robomaker/node_modules/@aws-sdk/client-robomaker/dist-types/models/RoboMakerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from RoboMaker service.
        */
    export class RoboMakerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

