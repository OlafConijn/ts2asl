// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-mediapackage-vod' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ConfigureLogsCommandInput, ConfigureLogsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ConfigureLogsCommand";
    import { CreateAssetCommandInput, CreateAssetCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreateAssetCommand";
    import { CreatePackagingConfigurationCommandInput, CreatePackagingConfigurationCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreatePackagingConfigurationCommand";
    import { CreatePackagingGroupCommandInput, CreatePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreatePackagingGroupCommand";
    import { DeleteAssetCommandInput, DeleteAssetCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeleteAssetCommand";
    import { DeletePackagingConfigurationCommandInput, DeletePackagingConfigurationCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeletePackagingConfigurationCommand";
    import { DeletePackagingGroupCommandInput, DeletePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeletePackagingGroupCommand";
    import { DescribeAssetCommandInput, DescribeAssetCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribeAssetCommand";
    import { DescribePackagingConfigurationCommandInput, DescribePackagingConfigurationCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribePackagingConfigurationCommand";
    import { DescribePackagingGroupCommandInput, DescribePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribePackagingGroupCommand";
    import { ListAssetsCommandInput, ListAssetsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListAssetsCommand";
    import { ListPackagingConfigurationsCommandInput, ListPackagingConfigurationsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListPackagingConfigurationsCommand";
    import { ListPackagingGroupsCommandInput, ListPackagingGroupsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListPackagingGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListTagsForResourceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/UntagResourceCommand";
    import { UpdatePackagingGroupCommandInput, UpdatePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/UpdatePackagingGroupCommand";
    import { MediaPackageVodClient } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    /**
        * AWS Elemental MediaPackage VOD
        */
    export class MediaPackageVod extends MediaPackageVodClient {
            /**
                * Changes the packaging group's properities to configure log subscription
                */
            configureLogs(args: ConfigureLogsCommandInput, options?: __HttpHandlerOptions): Promise<ConfigureLogsCommandOutput>;
            configureLogs(args: ConfigureLogsCommandInput, cb: (err: any, data?: ConfigureLogsCommandOutput) => void): void;
            configureLogs(args: ConfigureLogsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ConfigureLogsCommandOutput) => void): void;
            /**
                * Creates a new MediaPackage VOD Asset resource.
                */
            createAsset(args: CreateAssetCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssetCommandOutput>;
            createAsset(args: CreateAssetCommandInput, cb: (err: any, data?: CreateAssetCommandOutput) => void): void;
            createAsset(args: CreateAssetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssetCommandOutput) => void): void;
            /**
                * Creates a new MediaPackage VOD PackagingConfiguration resource.
                */
            createPackagingConfiguration(args: CreatePackagingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreatePackagingConfigurationCommandOutput>;
            createPackagingConfiguration(args: CreatePackagingConfigurationCommandInput, cb: (err: any, data?: CreatePackagingConfigurationCommandOutput) => void): void;
            createPackagingConfiguration(args: CreatePackagingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePackagingConfigurationCommandOutput) => void): void;
            /**
                * Creates a new MediaPackage VOD PackagingGroup resource.
                */
            createPackagingGroup(args: CreatePackagingGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreatePackagingGroupCommandOutput>;
            createPackagingGroup(args: CreatePackagingGroupCommandInput, cb: (err: any, data?: CreatePackagingGroupCommandOutput) => void): void;
            createPackagingGroup(args: CreatePackagingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePackagingGroupCommandOutput) => void): void;
            /**
                * Deletes an existing MediaPackage VOD Asset resource.
                */
            deleteAsset(args: DeleteAssetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssetCommandOutput>;
            deleteAsset(args: DeleteAssetCommandInput, cb: (err: any, data?: DeleteAssetCommandOutput) => void): void;
            deleteAsset(args: DeleteAssetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssetCommandOutput) => void): void;
            /**
                * Deletes a MediaPackage VOD PackagingConfiguration resource.
                */
            deletePackagingConfiguration(args: DeletePackagingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeletePackagingConfigurationCommandOutput>;
            deletePackagingConfiguration(args: DeletePackagingConfigurationCommandInput, cb: (err: any, data?: DeletePackagingConfigurationCommandOutput) => void): void;
            deletePackagingConfiguration(args: DeletePackagingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePackagingConfigurationCommandOutput) => void): void;
            /**
                * Deletes a MediaPackage VOD PackagingGroup resource.
                */
            deletePackagingGroup(args: DeletePackagingGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeletePackagingGroupCommandOutput>;
            deletePackagingGroup(args: DeletePackagingGroupCommandInput, cb: (err: any, data?: DeletePackagingGroupCommandOutput) => void): void;
            deletePackagingGroup(args: DeletePackagingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePackagingGroupCommandOutput) => void): void;
            /**
                * Returns a description of a MediaPackage VOD Asset resource.
                */
            describeAsset(args: DescribeAssetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAssetCommandOutput>;
            describeAsset(args: DescribeAssetCommandInput, cb: (err: any, data?: DescribeAssetCommandOutput) => void): void;
            describeAsset(args: DescribeAssetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAssetCommandOutput) => void): void;
            /**
                * Returns a description of a MediaPackage VOD PackagingConfiguration resource.
                */
            describePackagingConfiguration(args: DescribePackagingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackagingConfigurationCommandOutput>;
            describePackagingConfiguration(args: DescribePackagingConfigurationCommandInput, cb: (err: any, data?: DescribePackagingConfigurationCommandOutput) => void): void;
            describePackagingConfiguration(args: DescribePackagingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackagingConfigurationCommandOutput) => void): void;
            /**
                * Returns a description of a MediaPackage VOD PackagingGroup resource.
                */
            describePackagingGroup(args: DescribePackagingGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackagingGroupCommandOutput>;
            describePackagingGroup(args: DescribePackagingGroupCommandInput, cb: (err: any, data?: DescribePackagingGroupCommandOutput) => void): void;
            describePackagingGroup(args: DescribePackagingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackagingGroupCommandOutput) => void): void;
            /**
                * Returns a collection of MediaPackage VOD Asset resources.
                */
            listAssets(args: ListAssetsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssetsCommandOutput>;
            listAssets(args: ListAssetsCommandInput, cb: (err: any, data?: ListAssetsCommandOutput) => void): void;
            listAssets(args: ListAssetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssetsCommandOutput) => void): void;
            /**
                * Returns a collection of MediaPackage VOD PackagingConfiguration resources.
                */
            listPackagingConfigurations(args: ListPackagingConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListPackagingConfigurationsCommandOutput>;
            listPackagingConfigurations(args: ListPackagingConfigurationsCommandInput, cb: (err: any, data?: ListPackagingConfigurationsCommandOutput) => void): void;
            listPackagingConfigurations(args: ListPackagingConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackagingConfigurationsCommandOutput) => void): void;
            /**
                * Returns a collection of MediaPackage VOD PackagingGroup resources.
                */
            listPackagingGroups(args: ListPackagingGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListPackagingGroupsCommandOutput>;
            listPackagingGroups(args: ListPackagingGroupsCommandInput, cb: (err: any, data?: ListPackagingGroupsCommandOutput) => void): void;
            listPackagingGroups(args: ListPackagingGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackagingGroupsCommandOutput) => void): void;
            /**
                * Returns a list of the tags assigned to the specified resource.
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * Adds tags to the specified resource. You can specify one or more tags to add.
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * Removes tags from the specified resource. You can specify one or more tags to remove.
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * Updates a specific packaging group. You can't change the id attribute or any other system-generated attributes.
                */
            updatePackagingGroup(args: UpdatePackagingGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePackagingGroupCommandOutput>;
            updatePackagingGroup(args: UpdatePackagingGroupCommandInput, cb: (err: any, data?: UpdatePackagingGroupCommandOutput) => void): void;
            updatePackagingGroup(args: UpdatePackagingGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePackagingGroupCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ConfigureLogsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { ConfigureLogsRequest, ConfigureLogsResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface ConfigureLogsCommandInput extends ConfigureLogsRequest {
    }
    export interface ConfigureLogsCommandOutput extends ConfigureLogsResponse, __MetadataBearer {
    }
    /**
        * Changes the packaging group's properities to configure log subscription
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, ConfigureLogsCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, ConfigureLogsCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new ConfigureLogsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ConfigureLogsCommandInput} for command's `input` shape.
        * @see {@link ConfigureLogsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class ConfigureLogsCommand extends $Command<ConfigureLogsCommandInput, ConfigureLogsCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: ConfigureLogsCommandInput;
            constructor(input: ConfigureLogsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ConfigureLogsCommandInput, ConfigureLogsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreateAssetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { CreateAssetRequest, CreateAssetResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface CreateAssetCommandInput extends CreateAssetRequest {
    }
    export interface CreateAssetCommandOutput extends CreateAssetResponse, __MetadataBearer {
    }
    /**
        * Creates a new MediaPackage VOD Asset resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, CreateAssetCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, CreateAssetCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new CreateAssetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssetCommandInput} for command's `input` shape.
        * @see {@link CreateAssetCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class CreateAssetCommand extends $Command<CreateAssetCommandInput, CreateAssetCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: CreateAssetCommandInput;
            constructor(input: CreateAssetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssetCommandInput, CreateAssetCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreatePackagingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { CreatePackagingConfigurationRequest, CreatePackagingConfigurationResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface CreatePackagingConfigurationCommandInput extends CreatePackagingConfigurationRequest {
    }
    export interface CreatePackagingConfigurationCommandOutput extends CreatePackagingConfigurationResponse, __MetadataBearer {
    }
    /**
        * Creates a new MediaPackage VOD PackagingConfiguration resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, CreatePackagingConfigurationCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, CreatePackagingConfigurationCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new CreatePackagingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePackagingConfigurationCommandInput} for command's `input` shape.
        * @see {@link CreatePackagingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class CreatePackagingConfigurationCommand extends $Command<CreatePackagingConfigurationCommandInput, CreatePackagingConfigurationCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: CreatePackagingConfigurationCommandInput;
            constructor(input: CreatePackagingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePackagingConfigurationCommandInput, CreatePackagingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreatePackagingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { CreatePackagingGroupRequest, CreatePackagingGroupResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface CreatePackagingGroupCommandInput extends CreatePackagingGroupRequest {
    }
    export interface CreatePackagingGroupCommandOutput extends CreatePackagingGroupResponse, __MetadataBearer {
    }
    /**
        * Creates a new MediaPackage VOD PackagingGroup resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, CreatePackagingGroupCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, CreatePackagingGroupCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new CreatePackagingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePackagingGroupCommandInput} for command's `input` shape.
        * @see {@link CreatePackagingGroupCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class CreatePackagingGroupCommand extends $Command<CreatePackagingGroupCommandInput, CreatePackagingGroupCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: CreatePackagingGroupCommandInput;
            constructor(input: CreatePackagingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePackagingGroupCommandInput, CreatePackagingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeleteAssetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { DeleteAssetRequest, DeleteAssetResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface DeleteAssetCommandInput extends DeleteAssetRequest {
    }
    export interface DeleteAssetCommandOutput extends DeleteAssetResponse, __MetadataBearer {
    }
    /**
        * Deletes an existing MediaPackage VOD Asset resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, DeleteAssetCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, DeleteAssetCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new DeleteAssetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssetCommandInput} for command's `input` shape.
        * @see {@link DeleteAssetCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class DeleteAssetCommand extends $Command<DeleteAssetCommandInput, DeleteAssetCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: DeleteAssetCommandInput;
            constructor(input: DeleteAssetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssetCommandInput, DeleteAssetCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeletePackagingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { DeletePackagingConfigurationRequest, DeletePackagingConfigurationResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface DeletePackagingConfigurationCommandInput extends DeletePackagingConfigurationRequest {
    }
    export interface DeletePackagingConfigurationCommandOutput extends DeletePackagingConfigurationResponse, __MetadataBearer {
    }
    /**
        * Deletes a MediaPackage VOD PackagingConfiguration resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, DeletePackagingConfigurationCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, DeletePackagingConfigurationCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new DeletePackagingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePackagingConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeletePackagingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class DeletePackagingConfigurationCommand extends $Command<DeletePackagingConfigurationCommandInput, DeletePackagingConfigurationCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: DeletePackagingConfigurationCommandInput;
            constructor(input: DeletePackagingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePackagingConfigurationCommandInput, DeletePackagingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeletePackagingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { DeletePackagingGroupRequest, DeletePackagingGroupResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface DeletePackagingGroupCommandInput extends DeletePackagingGroupRequest {
    }
    export interface DeletePackagingGroupCommandOutput extends DeletePackagingGroupResponse, __MetadataBearer {
    }
    /**
        * Deletes a MediaPackage VOD PackagingGroup resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, DeletePackagingGroupCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, DeletePackagingGroupCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new DeletePackagingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePackagingGroupCommandInput} for command's `input` shape.
        * @see {@link DeletePackagingGroupCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class DeletePackagingGroupCommand extends $Command<DeletePackagingGroupCommandInput, DeletePackagingGroupCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: DeletePackagingGroupCommandInput;
            constructor(input: DeletePackagingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePackagingGroupCommandInput, DeletePackagingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribeAssetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { DescribeAssetRequest, DescribeAssetResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface DescribeAssetCommandInput extends DescribeAssetRequest {
    }
    export interface DescribeAssetCommandOutput extends DescribeAssetResponse, __MetadataBearer {
    }
    /**
        * Returns a description of a MediaPackage VOD Asset resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, DescribeAssetCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, DescribeAssetCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new DescribeAssetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAssetCommandInput} for command's `input` shape.
        * @see {@link DescribeAssetCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class DescribeAssetCommand extends $Command<DescribeAssetCommandInput, DescribeAssetCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: DescribeAssetCommandInput;
            constructor(input: DescribeAssetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAssetCommandInput, DescribeAssetCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribePackagingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { DescribePackagingConfigurationRequest, DescribePackagingConfigurationResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface DescribePackagingConfigurationCommandInput extends DescribePackagingConfigurationRequest {
    }
    export interface DescribePackagingConfigurationCommandOutput extends DescribePackagingConfigurationResponse, __MetadataBearer {
    }
    /**
        * Returns a description of a MediaPackage VOD PackagingConfiguration resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, DescribePackagingConfigurationCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, DescribePackagingConfigurationCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new DescribePackagingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackagingConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribePackagingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class DescribePackagingConfigurationCommand extends $Command<DescribePackagingConfigurationCommandInput, DescribePackagingConfigurationCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: DescribePackagingConfigurationCommandInput;
            constructor(input: DescribePackagingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackagingConfigurationCommandInput, DescribePackagingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribePackagingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { DescribePackagingGroupRequest, DescribePackagingGroupResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface DescribePackagingGroupCommandInput extends DescribePackagingGroupRequest {
    }
    export interface DescribePackagingGroupCommandOutput extends DescribePackagingGroupResponse, __MetadataBearer {
    }
    /**
        * Returns a description of a MediaPackage VOD PackagingGroup resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, DescribePackagingGroupCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, DescribePackagingGroupCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new DescribePackagingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePackagingGroupCommandInput} for command's `input` shape.
        * @see {@link DescribePackagingGroupCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class DescribePackagingGroupCommand extends $Command<DescribePackagingGroupCommandInput, DescribePackagingGroupCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: DescribePackagingGroupCommandInput;
            constructor(input: DescribePackagingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePackagingGroupCommandInput, DescribePackagingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListAssetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { ListAssetsRequest, ListAssetsResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface ListAssetsCommandInput extends ListAssetsRequest {
    }
    export interface ListAssetsCommandOutput extends ListAssetsResponse, __MetadataBearer {
    }
    /**
        * Returns a collection of MediaPackage VOD Asset resources.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, ListAssetsCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, ListAssetsCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new ListAssetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssetsCommandInput} for command's `input` shape.
        * @see {@link ListAssetsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class ListAssetsCommand extends $Command<ListAssetsCommandInput, ListAssetsCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: ListAssetsCommandInput;
            constructor(input: ListAssetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssetsCommandInput, ListAssetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListPackagingConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { ListPackagingConfigurationsRequest, ListPackagingConfigurationsResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface ListPackagingConfigurationsCommandInput extends ListPackagingConfigurationsRequest {
    }
    export interface ListPackagingConfigurationsCommandOutput extends ListPackagingConfigurationsResponse, __MetadataBearer {
    }
    /**
        * Returns a collection of MediaPackage VOD PackagingConfiguration resources.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, ListPackagingConfigurationsCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, ListPackagingConfigurationsCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new ListPackagingConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackagingConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListPackagingConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class ListPackagingConfigurationsCommand extends $Command<ListPackagingConfigurationsCommandInput, ListPackagingConfigurationsCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: ListPackagingConfigurationsCommandInput;
            constructor(input: ListPackagingConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackagingConfigurationsCommandInput, ListPackagingConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListPackagingGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { ListPackagingGroupsRequest, ListPackagingGroupsResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface ListPackagingGroupsCommandInput extends ListPackagingGroupsRequest {
    }
    export interface ListPackagingGroupsCommandOutput extends ListPackagingGroupsResponse, __MetadataBearer {
    }
    /**
        * Returns a collection of MediaPackage VOD PackagingGroup resources.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, ListPackagingGroupsCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, ListPackagingGroupsCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new ListPackagingGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPackagingGroupsCommandInput} for command's `input` shape.
        * @see {@link ListPackagingGroupsCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class ListPackagingGroupsCommand extends $Command<ListPackagingGroupsCommandInput, ListPackagingGroupsCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: ListPackagingGroupsCommandInput;
            constructor(input: ListPackagingGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPackagingGroupsCommandInput, ListPackagingGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * Returns a list of the tags assigned to the specified resource.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, ListTagsForResourceCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, ListTagsForResourceCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { TagResourceRequest } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * Adds tags to the specified resource. You can specify one or more tags to add.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, TagResourceCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, TagResourceCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { UntagResourceRequest } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * Removes tags from the specified resource. You can specify one or more tags to remove.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, UntagResourceCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, UntagResourceCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/UpdatePackagingGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MediaPackageVodClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient";
    import { UpdatePackagingGroupRequest, UpdatePackagingGroupResponse } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0";
    export interface UpdatePackagingGroupCommandInput extends UpdatePackagingGroupRequest {
    }
    export interface UpdatePackagingGroupCommandOutput extends UpdatePackagingGroupResponse, __MetadataBearer {
    }
    /**
        * Updates a specific packaging group. You can't change the id attribute or any other system-generated attributes.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MediaPackageVodClient, UpdatePackagingGroupCommand } from "@aws-sdk/client-mediapackage-vod"; // ES Modules import
        * // const { MediaPackageVodClient, UpdatePackagingGroupCommand } = require("@aws-sdk/client-mediapackage-vod"); // CommonJS import
        * const client = new MediaPackageVodClient(config);
        * const command = new UpdatePackagingGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePackagingGroupCommandInput} for command's `input` shape.
        * @see {@link UpdatePackagingGroupCommandOutput} for command's `response` shape.
        * @see {@link MediaPackageVodClientResolvedConfig | config} for MediaPackageVodClient's `config` shape.
        *
        */
    export class UpdatePackagingGroupCommand extends $Command<UpdatePackagingGroupCommandInput, UpdatePackagingGroupCommandOutput, MediaPackageVodClientResolvedConfig> {
            readonly input: UpdatePackagingGroupCommandInput;
            constructor(input: UpdatePackagingGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MediaPackageVodClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePackagingGroupCommandInput, UpdatePackagingGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/MediaPackageVodClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { ConfigureLogsCommandInput, ConfigureLogsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ConfigureLogsCommand";
    import { CreateAssetCommandInput, CreateAssetCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreateAssetCommand";
    import { CreatePackagingConfigurationCommandInput, CreatePackagingConfigurationCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreatePackagingConfigurationCommand";
    import { CreatePackagingGroupCommandInput, CreatePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/CreatePackagingGroupCommand";
    import { DeleteAssetCommandInput, DeleteAssetCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeleteAssetCommand";
    import { DeletePackagingConfigurationCommandInput, DeletePackagingConfigurationCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeletePackagingConfigurationCommand";
    import { DeletePackagingGroupCommandInput, DeletePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DeletePackagingGroupCommand";
    import { DescribeAssetCommandInput, DescribeAssetCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribeAssetCommand";
    import { DescribePackagingConfigurationCommandInput, DescribePackagingConfigurationCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribePackagingConfigurationCommand";
    import { DescribePackagingGroupCommandInput, DescribePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/DescribePackagingGroupCommand";
    import { ListAssetsCommandInput, ListAssetsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListAssetsCommand";
    import { ListPackagingConfigurationsCommandInput, ListPackagingConfigurationsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListPackagingConfigurationsCommand";
    import { ListPackagingGroupsCommandInput, ListPackagingGroupsCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListPackagingGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/ListTagsForResourceCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/UntagResourceCommand";
    import { UpdatePackagingGroupCommandInput, UpdatePackagingGroupCommandOutput } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/commands/UpdatePackagingGroupCommand";
    export type ServiceInputTypes = ConfigureLogsCommandInput | CreateAssetCommandInput | CreatePackagingConfigurationCommandInput | CreatePackagingGroupCommandInput | DeleteAssetCommandInput | DeletePackagingConfigurationCommandInput | DeletePackagingGroupCommandInput | DescribeAssetCommandInput | DescribePackagingConfigurationCommandInput | DescribePackagingGroupCommandInput | ListAssetsCommandInput | ListPackagingConfigurationsCommandInput | ListPackagingGroupsCommandInput | ListTagsForResourceCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdatePackagingGroupCommandInput;
    export type ServiceOutputTypes = ConfigureLogsCommandOutput | CreateAssetCommandOutput | CreatePackagingConfigurationCommandOutput | CreatePackagingGroupCommandOutput | DeleteAssetCommandOutput | DeletePackagingConfigurationCommandOutput | DeletePackagingGroupCommandOutput | DescribeAssetCommandOutput | DescribePackagingConfigurationCommandOutput | DescribePackagingGroupCommandOutput | ListAssetsCommandOutput | ListPackagingConfigurationsCommandOutput | ListPackagingGroupsCommandOutput | ListTagsForResourceCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdatePackagingGroupCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MediaPackageVodClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MediaPackageVodClient class constructor that set the region, credentials and other options.
        */
    export interface MediaPackageVodClientConfig extends MediaPackageVodClientConfigType {
    }
    type MediaPackageVodClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MediaPackageVodClient class. This is resolved and normalized from the {@link MediaPackageVodClientConfig | constructor configuration interface}.
        */
    export interface MediaPackageVodClientResolvedConfig extends MediaPackageVodClientResolvedConfigType {
    }
    /**
        * AWS Elemental MediaPackage VOD
        */
    export class MediaPackageVodClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MediaPackageVodClientResolvedConfig> {
            /**
                * The resolved configuration of MediaPackageVodClient class. This is resolved and normalized from the {@link MediaPackageVodClientConfig | constructor configuration interface}.
                */
            readonly config: MediaPackageVodClientResolvedConfig;
            constructor(configuration: MediaPackageVodClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MediaPackageVodServiceException as __BaseException } from "@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/MediaPackageVodServiceException";
    export enum __PeriodTriggersElement {
            ADS = "ADS"
    }
    /**
        * A MediaPackage VOD Asset resource.
        */
    export interface AssetShallow {
            /**
                * The ARN of the Asset.
                */
            Arn?: string;
            /**
                * The time the Asset was initially submitted for Ingest.
                */
            CreatedAt?: string;
            /**
                * The unique identifier for the Asset.
                */
            Id?: string;
            /**
                * The ID of the PackagingGroup for the Asset.
                */
            PackagingGroupId?: string;
            /**
                * The resource ID to include in SPEKE key requests.
                */
            ResourceId?: string;
            /**
                * ARN of the source object in S3.
                */
            SourceArn?: string;
            /**
                * The IAM role ARN used to access the source S3 bucket.
                */
            SourceRoleArn?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace AssetShallow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssetShallow) => any;
    }
    export enum ManifestLayout {
            COMPACT = "COMPACT",
            FULL = "FULL"
    }
    export enum Profile {
            HBBTV_1_5 = "HBBTV_1_5",
            NONE = "NONE"
    }
    export enum ScteMarkersSource {
            MANIFEST = "MANIFEST",
            SEGMENTS = "SEGMENTS"
    }
    export enum StreamOrder {
            ORIGINAL = "ORIGINAL",
            VIDEO_BITRATE_ASCENDING = "VIDEO_BITRATE_ASCENDING",
            VIDEO_BITRATE_DESCENDING = "VIDEO_BITRATE_DESCENDING"
    }
    /**
        * A StreamSelection configuration.
        */
    export interface StreamSelection {
            /**
                * The maximum video bitrate (bps) to include in output.
                */
            MaxVideoBitsPerSecond?: number;
            /**
                * The minimum video bitrate (bps) to include in output.
                */
            MinVideoBitsPerSecond?: number;
            /**
                * A directive that determines the order of streams in the output.
                */
            StreamOrder?: StreamOrder | string;
    }
    export namespace StreamSelection {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamSelection) => any;
    }
    /**
        * A DASH manifest configuration.
        */
    export interface DashManifest {
            /**
                * Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level.
                */
            ManifestLayout?: ManifestLayout | string;
            /**
                * An optional string to include in the name of the manifest.
                */
            ManifestName?: string;
            /**
                * Minimum duration (in seconds) that a player will buffer media before starting the presentation.
                */
            MinBufferTimeSeconds?: number;
            /**
                * The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to "HBBTV_1_5", HbbTV 1.5 compliant output is enabled.
                */
            Profile?: Profile | string;
            /**
                * The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content.
                */
            ScteMarkersSource?: ScteMarkersSource | string;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
    }
    export namespace DashManifest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashManifest) => any;
    }
    /**
        * The endpoint URL used to access an Asset using one PackagingConfiguration.
        */
    export interface EgressEndpoint {
            /**
                * The ID of the PackagingConfiguration being applied to the Asset.
                */
            PackagingConfigurationId?: string;
            /**
                * The current processing status of the asset used for the packaging configuration. The status can be either QUEUED, PROCESSING, PLAYABLE, or FAILED. Status information won't be available for most assets ingested before 2021-09-30.
                */
            Status?: string;
            /**
                * The URL of the parent manifest for the repackaged Asset.
                */
            Url?: string;
    }
    export namespace EgressEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EgressEndpoint) => any;
    }
    export enum AdMarkers {
            NONE = "NONE",
            PASSTHROUGH = "PASSTHROUGH",
            SCTE35_ENHANCED = "SCTE35_ENHANCED"
    }
    /**
        * An HTTP Live Streaming (HLS) manifest configuration.
        */
    export interface HlsManifest {
            /**
                * This setting controls how ad markers are included in the packaged OriginEndpoint.
                * "NONE" will omit all SCTE-35 ad markers from the output.
                * "PASSTHROUGH" causes the manifest to contain a copy of the SCTE-35 ad
                * markers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.
                * "SCTE35_ENHANCED" generates ad markers and blackout tags based on SCTE-35
                * messages in the input source.
                */
            AdMarkers?: AdMarkers | string;
            /**
                * When enabled, an I-Frame only stream will be included in the output.
                */
            IncludeIframeOnlyStream?: boolean;
            /**
                * An optional string to include in the name of the manifest.
                */
            ManifestName?: string;
            /**
                * The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag
                * inserted into manifests. Additionally, when an interval is specified
                * ID3Timed Metadata messages will be generated every 5 seconds using the
                * ingest time of the content.
                * If the interval is not specified, or set to 0, then
                * no EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no
                * ID3Timed Metadata messages will be generated. Note that irrespective
                * of this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,
                * it will be passed through to HLS output.
                */
            ProgramDateTimeIntervalSeconds?: number;
            /**
                * When enabled, the EXT-X-KEY tag will be repeated in output manifests.
                */
            RepeatExtXKey?: boolean;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
    }
    export namespace HlsManifest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsManifest) => any;
    }
    /**
        * A Microsoft Smooth Streaming (MSS) manifest configuration.
        */
    export interface MssManifest {
            /**
                * An optional string to include in the name of the manifest.
                */
            ManifestName?: string;
            /**
                * A StreamSelection configuration.
                */
            StreamSelection?: StreamSelection;
    }
    export namespace MssManifest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MssManifest) => any;
    }
    /**
        * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
        */
    export interface SpekeKeyProvider {
            /**
                * An Amazon Resource Name (ARN) of an IAM role that AWS Elemental
                * MediaPackage will assume when accessing the key provider service.
                */
            RoleArn: string | undefined;
            /**
                * The system IDs to include in key requests.
                */
            SystemIds: string[] | undefined;
            /**
                * The URL of the external key provider service.
                */
            Url: string | undefined;
    }
    export namespace SpekeKeyProvider {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SpekeKeyProvider) => any;
    }
    /**
        * A CMAF encryption configuration.
        */
    export interface CmafEncryption {
            /**
                * An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).
                */
            ConstantInitializationVector?: string;
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace CmafEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CmafEncryption) => any;
    }
    /**
        * A CMAF packaging configuration.
        */
    export interface CmafPackage {
            /**
                * A CMAF encryption configuration.
                */
            Encryption?: CmafEncryption;
            /**
                * A list of HLS manifest configurations.
                */
            HlsManifests: HlsManifest[] | undefined;
            /**
                * When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
                */
            IncludeEncoderConfigurationInSegments?: boolean;
            /**
                * Duration (in seconds) of each fragment. Actual fragments will be
                * rounded to the nearest multiple of the source fragment duration.
                */
            SegmentDurationSeconds?: number;
    }
    export namespace CmafPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CmafPackage) => any;
    }
    /**
        * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
        */
    export interface DashEncryption {
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace DashEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashEncryption) => any;
    }
    export enum SegmentTemplateFormat {
            NUMBER_WITH_DURATION = "NUMBER_WITH_DURATION",
            NUMBER_WITH_TIMELINE = "NUMBER_WITH_TIMELINE",
            TIME_WITH_TIMELINE = "TIME_WITH_TIMELINE"
    }
    /**
        * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
        */
    export interface DashPackage {
            /**
                * A list of DASH manifest configurations.
                */
            DashManifests: DashManifest[] | undefined;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration.
                */
            Encryption?: DashEncryption;
            /**
                * When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.
                */
            IncludeEncoderConfigurationInSegments?: boolean;
            /**
                * A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH)
                * Media Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not
                * be partitioned into more than one period. If the list contains "ADS", new periods will be created where
                * the Asset contains SCTE-35 ad markers.
                */
            PeriodTriggers?: (__PeriodTriggersElement | string)[];
            /**
                * Duration (in seconds) of each segment. Actual segments will be
                * rounded to the nearest multiple of the source segment duration.
                */
            SegmentDurationSeconds?: number;
            /**
                * Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs.
                */
            SegmentTemplateFormat?: SegmentTemplateFormat | string;
    }
    export namespace DashPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DashPackage) => any;
    }
    export enum EncryptionMethod {
            AES_128 = "AES_128",
            SAMPLE_AES = "SAMPLE_AES"
    }
    /**
        * An HTTP Live Streaming (HLS) encryption configuration.
        */
    export interface HlsEncryption {
            /**
                * A constant initialization vector for encryption (optional).
                * When not specified the initialization vector will be periodically rotated.
                */
            ConstantInitializationVector?: string;
            /**
                * The encryption method to use.
                */
            EncryptionMethod?: EncryptionMethod | string;
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace HlsEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsEncryption) => any;
    }
    /**
        * An HTTP Live Streaming (HLS) packaging configuration.
        */
    export interface HlsPackage {
            /**
                * An HTTP Live Streaming (HLS) encryption configuration.
                */
            Encryption?: HlsEncryption;
            /**
                * A list of HLS manifest configurations.
                */
            HlsManifests: HlsManifest[] | undefined;
            /**
                * When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output.
                */
            IncludeDvbSubtitles?: boolean;
            /**
                * Duration (in seconds) of each fragment. Actual fragments will be
                * rounded to the nearest multiple of the source fragment duration.
                */
            SegmentDurationSeconds?: number;
            /**
                * When enabled, audio streams will be placed in rendition groups in the output.
                */
            UseAudioRenditionGroup?: boolean;
    }
    export namespace HlsPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HlsPackage) => any;
    }
    /**
        * A Microsoft Smooth Streaming (MSS) encryption configuration.
        */
    export interface MssEncryption {
            /**
                * A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys.
                */
            SpekeKeyProvider: SpekeKeyProvider | undefined;
    }
    export namespace MssEncryption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MssEncryption) => any;
    }
    /**
        * A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
        */
    export interface MssPackage {
            /**
                * A Microsoft Smooth Streaming (MSS) encryption configuration.
                */
            Encryption?: MssEncryption;
            /**
                * A list of MSS manifest configurations.
                */
            MssManifests: MssManifest[] | undefined;
            /**
                * The duration (in seconds) of each segment.
                */
            SegmentDurationSeconds?: number;
    }
    export namespace MssPackage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MssPackage) => any;
    }
    /**
        * A MediaPackage VOD PackagingConfiguration resource.
        */
    export interface PackagingConfiguration {
            /**
                * The ARN of the PackagingConfiguration.
                */
            Arn?: string;
            /**
                * A CMAF packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the PackagingConfiguration.
                */
            Id?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
                */
            MssPackage?: MssPackage;
            /**
                * The ID of a PackagingGroup.
                */
            PackagingGroupId?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace PackagingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackagingConfiguration) => any;
    }
    /**
        * CDN Authorization credentials
        */
    export interface Authorization {
            /**
                * The Amazon Resource Name (ARN) for the secret in AWS Secrets Manager that is used for CDN authorization.
                */
            CdnIdentifierSecret: string | undefined;
            /**
                * The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.
                */
            SecretsRoleArn: string | undefined;
    }
    export namespace Authorization {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Authorization) => any;
    }
    /**
        * Configure egress access logging.
        */
    export interface EgressAccessLogs {
            /**
                * Customize the log group name.
                */
            LogGroupName?: string;
    }
    export namespace EgressAccessLogs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EgressAccessLogs) => any;
    }
    /**
        * A MediaPackage VOD PackagingGroup resource.
        */
    export interface PackagingGroup {
            /**
                * The ARN of the PackagingGroup.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The fully qualified domain name for Assets in the PackagingGroup.
                */
            DomainName?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of the PackagingGroup.
                */
            Id?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace PackagingGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PackagingGroup) => any;
    }
    /**
        * The option to configure log subscription.
        */
    export interface ConfigureLogsRequest {
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of a MediaPackage VOD PackagingGroup resource.
                */
            Id: string | undefined;
    }
    export namespace ConfigureLogsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureLogsRequest) => any;
    }
    export interface ConfigureLogsResponse {
            /**
                * The ARN of the PackagingGroup.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The fully qualified domain name for Assets in the PackagingGroup.
                */
            DomainName?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of the PackagingGroup.
                */
            Id?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace ConfigureLogsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigureLogsResponse) => any;
    }
    /**
        * The client is not authorized to access the requested resource.
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * An unexpected error occurred.
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    /**
        * The requested resource does not exist.
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * An unexpected error occurred.
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * The client has exceeded their resource or throttling limits.
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * The parameters sent in the request are not valid.
        */
    export class UnprocessableEntityException extends __BaseException {
            readonly name: "UnprocessableEntityException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnprocessableEntityException, __BaseException>);
    }
    /**
        * A new MediaPackage VOD Asset configuration.
        */
    export interface CreateAssetRequest {
            /**
                * The unique identifier for the Asset.
                */
            Id: string | undefined;
            /**
                * The ID of the PackagingGroup for the Asset.
                */
            PackagingGroupId: string | undefined;
            /**
                * The resource ID to include in SPEKE key requests.
                */
            ResourceId?: string;
            /**
                * ARN of the source object in S3.
                */
            SourceArn: string | undefined;
            /**
                * The IAM role ARN used to access the source S3 bucket.
                */
            SourceRoleArn: string | undefined;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateAssetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssetRequest) => any;
    }
    export interface CreateAssetResponse {
            /**
                * The ARN of the Asset.
                */
            Arn?: string;
            /**
                * The time the Asset was initially submitted for Ingest.
                */
            CreatedAt?: string;
            /**
                * The list of egress endpoints available for the Asset.
                */
            EgressEndpoints?: EgressEndpoint[];
            /**
                * The unique identifier for the Asset.
                */
            Id?: string;
            /**
                * The ID of the PackagingGroup for the Asset.
                */
            PackagingGroupId?: string;
            /**
                * The resource ID to include in SPEKE key requests.
                */
            ResourceId?: string;
            /**
                * ARN of the source object in S3.
                */
            SourceArn?: string;
            /**
                * The IAM role_arn used to access the source S3 bucket.
                */
            SourceRoleArn?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateAssetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssetResponse) => any;
    }
    /**
        * A new MediaPackage VOD PackagingConfiguration resource configuration.
        */
    export interface CreatePackagingConfigurationRequest {
            /**
                * A CMAF packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the PackagingConfiguration.
                */
            Id: string | undefined;
            /**
                * A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
                */
            MssPackage?: MssPackage;
            /**
                * The ID of a PackagingGroup.
                */
            PackagingGroupId: string | undefined;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreatePackagingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackagingConfigurationRequest) => any;
    }
    export interface CreatePackagingConfigurationResponse {
            /**
                * The ARN of the PackagingConfiguration.
                */
            Arn?: string;
            /**
                * A CMAF packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the PackagingConfiguration.
                */
            Id?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
                */
            MssPackage?: MssPackage;
            /**
                * The ID of a PackagingGroup.
                */
            PackagingGroupId?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreatePackagingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackagingConfigurationResponse) => any;
    }
    /**
        * A new MediaPackage VOD PackagingGroup resource configuration.
        */
    export interface CreatePackagingGroupRequest {
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of the PackagingGroup.
                */
            Id: string | undefined;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreatePackagingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackagingGroupRequest) => any;
    }
    export interface CreatePackagingGroupResponse {
            /**
                * The ARN of the PackagingGroup.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The fully qualified domain name for Assets in the PackagingGroup.
                */
            DomainName?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of the PackagingGroup.
                */
            Id?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace CreatePackagingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePackagingGroupResponse) => any;
    }
    export interface DeleteAssetRequest {
            /**
                * The ID of the MediaPackage VOD Asset resource to delete.
                */
            Id: string | undefined;
    }
    export namespace DeleteAssetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssetRequest) => any;
    }
    export interface DeleteAssetResponse {
    }
    export namespace DeleteAssetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssetResponse) => any;
    }
    export interface DeletePackagingConfigurationRequest {
            /**
                * The ID of the MediaPackage VOD PackagingConfiguration resource to delete.
                */
            Id: string | undefined;
    }
    export namespace DeletePackagingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackagingConfigurationRequest) => any;
    }
    export interface DeletePackagingConfigurationResponse {
    }
    export namespace DeletePackagingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackagingConfigurationResponse) => any;
    }
    export interface DeletePackagingGroupRequest {
            /**
                * The ID of the MediaPackage VOD PackagingGroup resource to delete.
                */
            Id: string | undefined;
    }
    export namespace DeletePackagingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackagingGroupRequest) => any;
    }
    export interface DeletePackagingGroupResponse {
    }
    export namespace DeletePackagingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePackagingGroupResponse) => any;
    }
    export interface DescribeAssetRequest {
            /**
                * The ID of an MediaPackage VOD Asset resource.
                */
            Id: string | undefined;
    }
    export namespace DescribeAssetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssetRequest) => any;
    }
    export interface DescribeAssetResponse {
            /**
                * The ARN of the Asset.
                */
            Arn?: string;
            /**
                * The time the Asset was initially submitted for Ingest.
                */
            CreatedAt?: string;
            /**
                * The list of egress endpoints available for the Asset.
                */
            EgressEndpoints?: EgressEndpoint[];
            /**
                * The unique identifier for the Asset.
                */
            Id?: string;
            /**
                * The ID of the PackagingGroup for the Asset.
                */
            PackagingGroupId?: string;
            /**
                * The resource ID to include in SPEKE key requests.
                */
            ResourceId?: string;
            /**
                * ARN of the source object in S3.
                */
            SourceArn?: string;
            /**
                * The IAM role_arn used to access the source S3 bucket.
                */
            SourceRoleArn?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeAssetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssetResponse) => any;
    }
    export interface DescribePackagingConfigurationRequest {
            /**
                * The ID of a MediaPackage VOD PackagingConfiguration resource.
                */
            Id: string | undefined;
    }
    export namespace DescribePackagingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackagingConfigurationRequest) => any;
    }
    export interface DescribePackagingConfigurationResponse {
            /**
                * The ARN of the PackagingConfiguration.
                */
            Arn?: string;
            /**
                * A CMAF packaging configuration.
                */
            CmafPackage?: CmafPackage;
            /**
                * A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.
                */
            DashPackage?: DashPackage;
            /**
                * An HTTP Live Streaming (HLS) packaging configuration.
                */
            HlsPackage?: HlsPackage;
            /**
                * The ID of the PackagingConfiguration.
                */
            Id?: string;
            /**
                * A Microsoft Smooth Streaming (MSS) PackagingConfiguration.
                */
            MssPackage?: MssPackage;
            /**
                * The ID of a PackagingGroup.
                */
            PackagingGroupId?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribePackagingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackagingConfigurationResponse) => any;
    }
    export interface DescribePackagingGroupRequest {
            /**
                * The ID of a MediaPackage VOD PackagingGroup resource.
                */
            Id: string | undefined;
    }
    export namespace DescribePackagingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackagingGroupRequest) => any;
    }
    export interface DescribePackagingGroupResponse {
            /**
                * The ARN of the PackagingGroup.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The fully qualified domain name for Assets in the PackagingGroup.
                */
            DomainName?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of the PackagingGroup.
                */
            Id?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribePackagingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePackagingGroupResponse) => any;
    }
    export interface ListAssetsRequest {
            /**
                * Upper bound on number of records to return.
                */
            MaxResults?: number;
            /**
                * A token used to resume pagination from the end of a previous request.
                */
            NextToken?: string;
            /**
                * Returns Assets associated with the specified PackagingGroup.
                */
            PackagingGroupId?: string;
    }
    export namespace ListAssetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssetsRequest) => any;
    }
    export interface ListAssetsResponse {
            /**
                * A list of MediaPackage VOD Asset resources.
                */
            Assets?: AssetShallow[];
            /**
                * A token that can be used to resume pagination from the end of the collection.
                */
            NextToken?: string;
    }
    export namespace ListAssetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssetsResponse) => any;
    }
    export interface ListPackagingConfigurationsRequest {
            /**
                * Upper bound on number of records to return.
                */
            MaxResults?: number;
            /**
                * A token used to resume pagination from the end of a previous request.
                */
            NextToken?: string;
            /**
                * Returns MediaPackage VOD PackagingConfigurations associated with the specified PackagingGroup.
                */
            PackagingGroupId?: string;
    }
    export namespace ListPackagingConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagingConfigurationsRequest) => any;
    }
    export interface ListPackagingConfigurationsResponse {
            /**
                * A token that can be used to resume pagination from the end of the collection.
                */
            NextToken?: string;
            /**
                * A list of MediaPackage VOD PackagingConfiguration resources.
                */
            PackagingConfigurations?: PackagingConfiguration[];
    }
    export namespace ListPackagingConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagingConfigurationsResponse) => any;
    }
    export interface ListPackagingGroupsRequest {
            /**
                * Upper bound on number of records to return.
                */
            MaxResults?: number;
            /**
                * A token used to resume pagination from the end of a previous request.
                */
            NextToken?: string;
    }
    export namespace ListPackagingGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagingGroupsRequest) => any;
    }
    export interface ListPackagingGroupsResponse {
            /**
                * A token that can be used to resume pagination from the end of the collection.
                */
            NextToken?: string;
            /**
                * A list of MediaPackage VOD PackagingGroup resources.
                */
            PackagingGroups?: PackagingGroup[];
    }
    export namespace ListPackagingGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPackagingGroupsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
                */
            ResourceArn: string | undefined;
            /**
                * A collection of tags associated with a resource
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * The Amazon Resource Name (ARN) for the resource. You can get this from the response to any request to the resource.
                */
            ResourceArn: string | undefined;
            /**
                * A comma-separated list of the tag keys to remove from the resource.
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    /**
        * A MediaPackage VOD PackagingGroup resource configuration.
        */
    export interface UpdatePackagingGroupRequest {
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The ID of a MediaPackage VOD PackagingGroup resource.
                */
            Id: string | undefined;
    }
    export namespace UpdatePackagingGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePackagingGroupRequest) => any;
    }
    export interface UpdatePackagingGroupResponse {
            /**
                * The ARN of the PackagingGroup.
                */
            Arn?: string;
            /**
                * CDN Authorization credentials
                */
            Authorization?: Authorization;
            /**
                * The fully qualified domain name for Assets in the PackagingGroup.
                */
            DomainName?: string;
            /**
                * Configure egress access logging.
                */
            EgressAccessLogs?: EgressAccessLogs;
            /**
                * The ID of the PackagingGroup.
                */
            Id?: string;
            /**
                * A collection of tags associated with a resource
                */
            Tags?: Record<string, string>;
    }
    export namespace UpdatePackagingGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePackagingGroupResponse) => any;
    }
}

declare module '@aws-sdk/client-mediapackage-vod/node_modules/@aws-sdk/client-mediapackage-vod/dist-types/models/MediaPackageVodServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from MediaPackageVod service.
        */
    export class MediaPackageVodServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

