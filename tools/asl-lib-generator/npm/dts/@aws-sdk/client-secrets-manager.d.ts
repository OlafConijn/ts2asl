// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-secrets-manager' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CancelRotateSecretCommandInput, CancelRotateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/CancelRotateSecretCommand";
    import { CreateSecretCommandInput, CreateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/CreateSecretCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSecretCommandInput, DeleteSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DeleteSecretCommand";
    import { DescribeSecretCommandInput, DescribeSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DescribeSecretCommand";
    import { GetRandomPasswordCommandInput, GetRandomPasswordCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetRandomPasswordCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetResourcePolicyCommand";
    import { GetSecretValueCommandInput, GetSecretValueCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetSecretValueCommand";
    import { ListSecretsCommandInput, ListSecretsCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ListSecretsCommand";
    import { ListSecretVersionIdsCommandInput, ListSecretVersionIdsCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ListSecretVersionIdsCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/PutResourcePolicyCommand";
    import { PutSecretValueCommandInput, PutSecretValueCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/PutSecretValueCommand";
    import { RemoveRegionsFromReplicationCommandInput, RemoveRegionsFromReplicationCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RemoveRegionsFromReplicationCommand";
    import { ReplicateSecretToRegionsCommandInput, ReplicateSecretToRegionsCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ReplicateSecretToRegionsCommand";
    import { RestoreSecretCommandInput, RestoreSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RestoreSecretCommand";
    import { RotateSecretCommandInput, RotateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RotateSecretCommand";
    import { StopReplicationToReplicaCommandInput, StopReplicationToReplicaCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/StopReplicationToReplicaCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UntagResourceCommand";
    import { UpdateSecretCommandInput, UpdateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UpdateSecretCommand";
    import { UpdateSecretVersionStageCommandInput, UpdateSecretVersionStageCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UpdateSecretVersionStageCommand";
    import { ValidateResourcePolicyCommandInput, ValidateResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ValidateResourcePolicyCommand";
    import { SecretsManagerClient } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    /**
        * <fullname>Amazon Web Services Secrets Manager</fullname>
        *          <p>Amazon Web Services Secrets Manager provides a service to enable you to store, manage, and retrieve, secrets.</p>
        *
        *          <p>This guide provides descriptions of the Secrets Manager API. For more information about using this
        *       service, see the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/introduction.html">Amazon Web Services Secrets Manager User Guide</a>.</p>
        *
        *          <p>
        *             <b>API Version</b>
        *          </p>
        *
        *          <p>This version of the Secrets Manager API Reference documents the Secrets Manager API version 2017-10-17.</p>
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *          <p>
        *             <b>Support and Feedback for Amazon Web Services Secrets Manager</b>
        *          </p>
        *          <p>We welcome your feedback. Send your comments to <a href="mailto:awssecretsmanager-feedback@amazon.com">awssecretsmanager-feedback@amazon.com</a>, or post your feedback and questions in the <a href="http://forums.aws.amazon.com/forum.jspa?forumID=296">Amazon Web Services Secrets Manager Discussion Forum</a>. For more
        *       information about the Amazon Web Services Discussion Forums, see <a href="http://forums.aws.amazon.com/help.jspa">Forums
        *         Help</a>.</p>
        *
        *          <p>
        *             <b>Logging API Requests</b>
        *          </p>
        *          <p>Amazon Web Services Secrets Manager supports Amazon Web Services CloudTrail, a service that records Amazon Web Services API calls for your Amazon Web Services
        *       account and delivers log files to an Amazon S3 bucket. By using information that's collected
        *       by Amazon Web Services CloudTrail, you can determine the requests successfully made to Secrets Manager, who made the
        *       request, when it was made, and so on. For more about Amazon Web Services Secrets Manager and support for Amazon Web Services
        *       CloudTrail, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/monitoring.html#monitoring_cloudtrail">Logging
        *         Amazon Web Services Secrets Manager Events with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Secrets Manager User Guide</i>.
        *       To learn more about CloudTrail, including enabling it and find your log files, see the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">Amazon Web Services CloudTrail User Guide</a>.</p>
        */
    export class SecretsManager extends SecretsManagerClient {
            /**
                * <p>Turns off automatic rotation, and if a rotation is currently in
                *       progress, cancels the rotation.</p>
                *          <p>If you cancel a rotation in progress, it can leave the <code>VersionStage</code>
                *       labels in an unexpected state. You might
                *       need to remove the staging label <code>AWSPENDING</code> from the partially created version.
                *       You also need to determine whether to roll back to the previous version of the secret
                *       by moving the staging label <code>AWSCURRENT</code> to the version that has <code>AWSPENDING</code>.
                *       To determine
                *       which version has a specific staging label, call <a>ListSecretVersionIds</a>. Then use
                *      <a>UpdateSecretVersionStage</a> to change staging labels.
                *      For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html">How rotation works</a>.</p>
                *          <p>To turn on automatic rotation again, call <a>RotateSecret</a>.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:CancelRotateSecret</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            cancelRotateSecret(args: CancelRotateSecretCommandInput, options?: __HttpHandlerOptions): Promise<CancelRotateSecretCommandOutput>;
            cancelRotateSecret(args: CancelRotateSecretCommandInput, cb: (err: any, data?: CancelRotateSecretCommandOutput) => void): void;
            cancelRotateSecret(args: CancelRotateSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelRotateSecretCommandOutput) => void): void;
            /**
                * <p>Creates a new secret. A <i>secret</i> can be a password, a set of
                *       credentials such as a user name and password, an OAuth token, or other secret information
                *       that you store in an encrypted form in Secrets Manager. The secret also
                *       includes the connection information to access a database or other service, which Secrets Manager
                *       doesn't encrypt. A secret in Secrets Manager consists of both the protected secret data and the
                *       important information needed to manage the secret.</p>
                *          <p>For information about creating a secret in the console, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_create-basic-secret.html">Create a secret</a>.</p>
                *          <p>To create a secret, you can provide the secret value to be encrypted in either the
                *       <code>SecretString</code> parameter or the <code>SecretBinary</code> parameter, but not both.
                *       If you include <code>SecretString</code> or <code>SecretBinary</code>
                *       then Secrets Manager creates an initial secret version and automatically attaches the staging
                *       label <code>AWSCURRENT</code> to it.</p>
                *          <p>For database credentials you want to rotate, for Secrets Manager to be able to rotate the secret,
                *       you must make sure the JSON you store in the <code>SecretString</code> matches the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_secret_json_structure.html">JSON structure of
                *         a database secret</a>.</p>
                *          <p>If you don't specify an KMS encryption key, Secrets Manager uses the Amazon Web Services managed key
                *       <code>aws/secretsmanager</code>. If this key
                *       doesn't already exist in your account, then Secrets Manager creates it for you automatically. All
                *       users and roles in the Amazon Web Services account automatically have access to use <code>aws/secretsmanager</code>.
                *       Creating <code>aws/secretsmanager</code> can result in a one-time significant delay in returning the
                *       result.</p>
                *          <p>If the secret is in a different Amazon Web Services account from the credentials calling the API, then
                *       you can't use <code>aws/secretsmanager</code> to encrypt the secret, and you must create
                *       and use a customer managed KMS key. </p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:CreateSecret</code>. If you
                *       include tags in the secret, you also need <code>secretsmanager:TagResource</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                *          <p>To encrypt the secret with a KMS key other than <code>aws/secretsmanager</code>, you need <code>kms:GenerateDataKey</code> and <code>kms:Decrypt</code> permission to the key. </p>
                */
            createSecret(args: CreateSecretCommandInput, options?: __HttpHandlerOptions): Promise<CreateSecretCommandOutput>;
            createSecret(args: CreateSecretCommandInput, cb: (err: any, data?: CreateSecretCommandOutput) => void): void;
            createSecret(args: CreateSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSecretCommandOutput) => void): void;
            /**
                * <p>Deletes the resource-based permission policy attached to the secret. To attach a policy to
                *       a secret, use <a>PutResourcePolicy</a>.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:DeleteResourcePolicy</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourcePolicyCommandOutput>;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes a secret and all of its versions. You can specify a recovery
                *       window during which you can restore the secret. The minimum recovery window is 7 days.
                *       The default recovery window is 30 days. Secrets Manager attaches a <code>DeletionDate</code> stamp to
                *       the secret that specifies the end of the recovery window. At the end of the recovery window,
                *       Secrets Manager deletes the secret permanently.</p>
                *          <p>You can't delete a primary secret that is replicated to other Regions. You must first delete the
                *     replicas using <a>RemoveRegionsFromReplication</a>, and then delete the primary secret.
                *     When you delete a replica, it is deleted immediately.</p>
                *          <p>You can't directly delete a version of a secret. Instead, you remove all staging labels
                *     from the version using <a>UpdateSecretVersionStage</a>. This marks the version as deprecated,
                *     and then Secrets Manager can automatically delete the version in the background.</p>
                *          <p>To determine whether an application still uses a secret, you can create an Amazon CloudWatch alarm
                *     to alert you to any attempts to access a secret during the recovery window. For more information,
                *     see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/monitoring_cloudwatch_deleted-secrets.html">
                *     Monitor secrets scheduled for deletion</a>.</p>
                *          <p>Secrets Manager performs the permanent secret deletion at the end of the waiting period as a
                *         background task with low priority. There is no guarantee of a specific time after the
                *         recovery window for the permanent delete to occur.</p>
                *          <p>At any time before recovery window ends, you can use <a>RestoreSecret</a> to
                *       remove the <code>DeletionDate</code> and cancel the deletion of the secret.</p>
                *          <p>When a secret is scheduled for deletion, you cannot retrieve the secret value.
                *       You must first cancel the deletion with <a>RestoreSecret</a> and then you can retrieve the secret.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:DeleteSecret</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            deleteSecret(args: DeleteSecretCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSecretCommandOutput>;
            deleteSecret(args: DeleteSecretCommandInput, cb: (err: any, data?: DeleteSecretCommandOutput) => void): void;
            deleteSecret(args: DeleteSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSecretCommandOutput) => void): void;
            /**
                * <p>Retrieves the details of a secret. It does not include the encrypted secret value. Secrets Manager
                *       only returns fields that have a value in the response. </p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:DescribeSecret</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            describeSecret(args: DescribeSecretCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSecretCommandOutput>;
            describeSecret(args: DescribeSecretCommandInput, cb: (err: any, data?: DescribeSecretCommandOutput) => void): void;
            describeSecret(args: DescribeSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSecretCommandOutput) => void): void;
            /**
                * <p>Generates a random password. We recommend that you specify the
                *       maximum length and include every character type that the system you are generating a password
                *       for can support.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:GetRandomPassword</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            getRandomPassword(args: GetRandomPasswordCommandInput, options?: __HttpHandlerOptions): Promise<GetRandomPasswordCommandOutput>;
            getRandomPassword(args: GetRandomPasswordCommandInput, cb: (err: any, data?: GetRandomPasswordCommandOutput) => void): void;
            getRandomPassword(args: GetRandomPasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRandomPasswordCommandOutput) => void): void;
            /**
                * <p>Retrieves the JSON text of the resource-based policy document attached to the
                *       secret. For more information about permissions policies attached to a secret, see
                *       <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-policies.html">Permissions
                *         policies attached to a secret</a>.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:GetResourcePolicy</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            getResourcePolicy(args: GetResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetResourcePolicyCommandOutput>;
            getResourcePolicy(args: GetResourcePolicyCommandInput, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            getResourcePolicy(args: GetResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves the contents of the encrypted fields <code>SecretString</code> or
                *         <code>SecretBinary</code> from the specified version of a secret, whichever contains
                *       content.</p>
                *          <p>We recommend that you cache your secret values by using client-side caching.
                *       Caching secrets improves speed and reduces your costs. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/retrieving-secrets.html">Cache secrets for
                *         your applications</a>.</p>
                *
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:GetSecretValue</code>.
                *       If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key
                *       <code>aws/secretsmanager</code>, then you also need <code>kms:Decrypt</code> permissions for that key.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            getSecretValue(args: GetSecretValueCommandInput, options?: __HttpHandlerOptions): Promise<GetSecretValueCommandOutput>;
            getSecretValue(args: GetSecretValueCommandInput, cb: (err: any, data?: GetSecretValueCommandOutput) => void): void;
            getSecretValue(args: GetSecretValueCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSecretValueCommandOutput) => void): void;
            /**
                * <p>Lists the secrets that are stored by Secrets Manager in the Amazon Web Services account, not including secrets
                *       that are marked for deletion. To see secrets marked for deletion, use the Secrets Manager console.</p>
                *          <p>ListSecrets is eventually consistent, however it might not reflect changes from the last five minutes.
                *       To get the latest information for a specific secret, use <a>DescribeSecret</a>.</p>
                *          <p>To list the versions of a secret, use <a>ListSecretVersionIds</a>.</p>
                *          <p>To get the secret value from <code>SecretString</code> or <code>SecretBinary</code>,
                *       call <a>GetSecretValue</a>.</p>
                *          <p>For information about finding secrets in the console, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_search-secret.html">Find secrets in Secrets Manager</a>.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:ListSecrets</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            listSecrets(args: ListSecretsCommandInput, options?: __HttpHandlerOptions): Promise<ListSecretsCommandOutput>;
            listSecrets(args: ListSecretsCommandInput, cb: (err: any, data?: ListSecretsCommandOutput) => void): void;
            listSecrets(args: ListSecretsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSecretsCommandOutput) => void): void;
            /**
                * <p>Lists the versions of a secret. Secrets Manager uses staging labels to indicate the different versions
                *     of a secret. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html#term_version">
                *     Secrets Manager concepts: Versions</a>.</p>
                *          <p>To list the secrets in the account, use <a>ListSecrets</a>.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:ListSecretVersionIds</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            listSecretVersionIds(args: ListSecretVersionIdsCommandInput, options?: __HttpHandlerOptions): Promise<ListSecretVersionIdsCommandOutput>;
            listSecretVersionIds(args: ListSecretVersionIdsCommandInput, cb: (err: any, data?: ListSecretVersionIdsCommandOutput) => void): void;
            listSecretVersionIds(args: ListSecretVersionIdsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSecretVersionIdsCommandOutput) => void): void;
            /**
                * <p>Attaches a resource-based permission policy to a secret. A resource-based policy is
                *       optional. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication and access control for Secrets Manager</a>
                *          </p>
                *          <p>For information about attaching a policy in the console, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html">Attach a
                *       permissions policy to a secret</a>.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:PutResourcePolicy</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            putResourcePolicy(args: PutResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutResourcePolicyCommandOutput>;
            putResourcePolicy(args: PutResourcePolicyCommandInput, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            putResourcePolicy(args: PutResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Creates a new version with a new encrypted secret value and attaches it to the secret. The
                *       version can contain a new <code>SecretString</code> value or a new <code>SecretBinary</code> value. </p>
                *          <p>We recommend you avoid calling <code>PutSecretValue</code> at a sustained rate of more than
                *       once every 10 minutes. When you update the secret value, Secrets Manager creates a new version
                *       of the secret. Secrets Manager removes outdated versions when there are more than 100, but it does not
                *       remove versions created less than 24 hours ago. If you call <code>PutSecretValue</code> more
                *       than once every 10 minutes, you create more versions than Secrets Manager removes, and you will reach
                *       the quota for secret versions.</p>
                *          <p>You can specify the staging labels to attach to the new version in <code>VersionStages</code>.
                *       If you don't include <code>VersionStages</code>, then Secrets Manager automatically
                *       moves the staging label <code>AWSCURRENT</code> to this version. If this operation creates
                *       the first version for the secret, then Secrets Manager
                *         automatically attaches the staging label <code>AWSCURRENT</code> to it .</p>
                *          <p>If this operation moves the staging label <code>AWSCURRENT</code> from another version to this
                *       version, then Secrets Manager also automatically moves the staging label <code>AWSPREVIOUS</code> to
                *       the version that <code>AWSCURRENT</code> was removed from.</p>
                *          <p>This operation is idempotent. If you call this operation with a <code>ClientRequestToken</code>
                *     that matches an existing version's VersionId, and you specify the
                *       same secret data, the operation succeeds but does nothing. However, if the secret data is
                *       different, then the operation fails because you can't modify an existing version; you can
                *       only create new ones.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:PutSecretValue</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            putSecretValue(args: PutSecretValueCommandInput, options?: __HttpHandlerOptions): Promise<PutSecretValueCommandOutput>;
            putSecretValue(args: PutSecretValueCommandInput, cb: (err: any, data?: PutSecretValueCommandOutput) => void): void;
            putSecretValue(args: PutSecretValueCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutSecretValueCommandOutput) => void): void;
            /**
                * <p>For a secret that is replicated to other Regions, deletes the secret replicas from the Regions you specify.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:RemoveRegionsFromReplication</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            removeRegionsFromReplication(args: RemoveRegionsFromReplicationCommandInput, options?: __HttpHandlerOptions): Promise<RemoveRegionsFromReplicationCommandOutput>;
            removeRegionsFromReplication(args: RemoveRegionsFromReplicationCommandInput, cb: (err: any, data?: RemoveRegionsFromReplicationCommandOutput) => void): void;
            removeRegionsFromReplication(args: RemoveRegionsFromReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveRegionsFromReplicationCommandOutput) => void): void;
            /**
                * <p>Replicates the secret to a new Regions. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create-manage-multi-region-secrets.html">Multi-Region secrets</a>.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:ReplicateSecretToRegions</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            replicateSecretToRegions(args: ReplicateSecretToRegionsCommandInput, options?: __HttpHandlerOptions): Promise<ReplicateSecretToRegionsCommandOutput>;
            replicateSecretToRegions(args: ReplicateSecretToRegionsCommandInput, cb: (err: any, data?: ReplicateSecretToRegionsCommandOutput) => void): void;
            replicateSecretToRegions(args: ReplicateSecretToRegionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ReplicateSecretToRegionsCommandOutput) => void): void;
            /**
                * <p>Cancels the scheduled deletion of a secret by removing the <code>DeletedDate</code> time
                *       stamp. You can access a secret again after it has been restored.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:RestoreSecret</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            restoreSecret(args: RestoreSecretCommandInput, options?: __HttpHandlerOptions): Promise<RestoreSecretCommandOutput>;
            restoreSecret(args: RestoreSecretCommandInput, cb: (err: any, data?: RestoreSecretCommandOutput) => void): void;
            restoreSecret(args: RestoreSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreSecretCommandOutput) => void): void;
            /**
                * <p>Configures and starts the asynchronous process of rotating the secret. For more information about rotation,
                *       see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html">Rotate secrets</a>.</p>
                *          <p>If you include the
                *       configuration parameters, the operation sets the values for the secret and then immediately
                *       starts a rotation. If you don't include the configuration parameters, the operation starts a
                *       rotation with the values already stored in the secret. </p>
                *          <p>For database credentials you want to rotate, for Secrets Manager to be able to rotate the secret, you must
                *       make sure the secret value is in the
                *         <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_secret_json_structure.html"> JSON structure
                *         of a database secret</a>. In particular, if you want to use the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets_strategies.html#rotating-secrets-two-users"> alternating users strategy</a>, your secret must contain the ARN of a superuser
                *       secret.</p>
                *
                *          <p>To configure rotation, you also need the ARN of an Amazon Web Services Lambda function and the schedule
                *       for the rotation. The Lambda rotation function creates a new
                *       version of the secret and creates or updates the credentials on the database or service to
                *       match. After testing the new credentials, the function marks the new secret version with the staging
                *       label <code>AWSCURRENT</code>. Then anyone who retrieves the secret gets the new version. For more
                *       information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html">How rotation works</a>.</p>
                *          <p>You can create the Lambda rotation function based on the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_available-rotation-templates.html">rotation function templates</a> that Secrets Manager provides. Choose
                *       a template that matches your <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets_strategies.html">Rotation strategy</a>.</p>
                *          <p>When rotation is successful, the <code>AWSPENDING</code> staging label might be attached
                *       to the same version as the <code>AWSCURRENT</code> version, or it might not be attached to any
                *       version. If the <code>AWSPENDING</code> staging label is present but not attached to the same
                *       version as <code>AWSCURRENT</code>, then any later invocation of <code>RotateSecret</code>
                *       assumes that a previous rotation request is still in progress and returns an error.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:RotateSecret</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. You also need <code>lambda:InvokeFunction</code> permissions on the rotation function.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets-required-permissions-function.html">
                *         Permissions for rotation</a>.</p>
                */
            rotateSecret(args: RotateSecretCommandInput, options?: __HttpHandlerOptions): Promise<RotateSecretCommandOutput>;
            rotateSecret(args: RotateSecretCommandInput, cb: (err: any, data?: RotateSecretCommandOutput) => void): void;
            rotateSecret(args: RotateSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RotateSecretCommandOutput) => void): void;
            /**
                * <p>Removes the link between the replica secret and the primary secret and promotes the replica to a primary secret in the replica Region.</p>
                *          <p>You must call this operation from the Region in which you want to promote the replica to a primary secret.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:StopReplicationToReplica</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            stopReplicationToReplica(args: StopReplicationToReplicaCommandInput, options?: __HttpHandlerOptions): Promise<StopReplicationToReplicaCommandOutput>;
            stopReplicationToReplica(args: StopReplicationToReplicaCommandInput, cb: (err: any, data?: StopReplicationToReplicaCommandOutput) => void): void;
            stopReplicationToReplica(args: StopReplicationToReplicaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopReplicationToReplicaCommandOutput) => void): void;
            /**
                * <p>Attaches tags to a secret. Tags consist of a key name and a value. Tags are part of the
                *       secret's metadata. They are not associated with specific versions of the secret. This operation appends tags to the existing list of tags.</p>
                *             <p>The following restrictions apply to tags:</p>
                *         <ul>
                *             <li>
                *                <p>Maximum number of tags per secret: 50</p>
                *             </li>
                *             <li>
                *                <p>Maximum key length: 127 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                <p>Maximum value length: 255 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                <p>Tag keys and values are case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>Do not use the <code>aws:</code> prefix in your tag names or values because Amazon Web Services reserves it
                *             for Amazon Web Services use. You can't edit or delete tag names or values with this
                *               prefix. Tags with this prefix do not count against your tags per secret limit.</p>
                *             </li>
                *             <li>
                *                <p>If you use your tagging schema across multiple services and resources,
                *               other services might have restrictions on allowed characters. Generally
                *               allowed characters: letters, spaces, and numbers representable in UTF-8, plus the
                *               following special characters: + - = . _ : / @.</p>
                *             </li>
                *          </ul>
                *
                *          <important>
                *             <p>If you use tags as part of your security strategy, then adding or removing a tag can
                *         change permissions. If successfully completing this operation would result in you losing
                *         your permissions for this secret, then the operation is blocked and returns an Access Denied
                *         error.</p>
                *          </important>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:TagResource</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes specific tags from a secret.</p>
                *          <p>This operation is idempotent. If a requested tag is not attached to the secret, no error
                *       is returned and the secret metadata is unchanged.</p>
                *          <important>
                *             <p>If you use tags as part of your security strategy, then removing a tag can change
                *         permissions. If successfully completing this operation would result in you losing your
                *         permissions for this secret, then the operation is blocked and returns an Access Denied
                *         error.</p>
                *          </important>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:UntagResource</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Modifies the details of a secret, including metadata and the secret value. To change the secret value, you can also use <a>PutSecretValue</a>.</p>
                *          <p>To change the rotation configuration of a secret, use <a>RotateSecret</a> instead.</p>
                *
                *          <p>We recommend you avoid calling <code>UpdateSecret</code> at a sustained rate of more than
                *       once every 10 minutes. When you call <code>UpdateSecret</code> to update the secret value, Secrets Manager creates a new version
                *       of the secret. Secrets Manager removes outdated versions when there are more than 100, but it does not
                *       remove versions created less than 24 hours ago. If you update the secret value more
                *       than once every 10 minutes, you create more versions than Secrets Manager removes, and you will reach
                *       the quota for secret versions.</p>
                *          <p>If you include <code>SecretString</code> or <code>SecretBinary</code> to create a new
                *       secret version, Secrets Manager automatically attaches the staging label <code>AWSCURRENT</code> to the new
                *       version. </p>
                *          <p>If you call this operation with a <code>ClientRequestToken</code> that matches an existing version's
                *       <code>VersionId</code>, the operation results in an error. You can't modify an existing
                *       version, you can only create a new version. To remove a version, remove all staging labels from it. See
                *     <a>UpdateSecretVersionStage</a>.</p>
                *          <p>If you don't specify an KMS encryption key, Secrets Manager uses the Amazon Web Services managed key
                *       <code>aws/secretsmanager</code>. If this key doesn't already exist in your account, then Secrets Manager
                *       creates it for you automatically. All users and roles in the Amazon Web Services account automatically have access
                *       to use <code>aws/secretsmanager</code>. Creating <code>aws/secretsmanager</code> can result in a one-time
                *       significant delay in returning the result.  </p>
                *          <p>If the secret is in a different Amazon Web Services account from the credentials calling the API, then you can't
                *       use <code>aws/secretsmanager</code> to encrypt the secret, and you must create and use a customer managed key. </p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:UpdateSecret</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>.
                *       If you use a customer managed key, you must also have <code>kms:GenerateDataKey</code> and
                *       <code>kms:Decrypt</code> permissions on the key. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/security-encryption.html">
                *         Secret encryption and decryption</a>.</p>
                */
            updateSecret(args: UpdateSecretCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSecretCommandOutput>;
            updateSecret(args: UpdateSecretCommandInput, cb: (err: any, data?: UpdateSecretCommandOutput) => void): void;
            updateSecret(args: UpdateSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSecretCommandOutput) => void): void;
            /**
                * <p>Modifies the staging labels attached to a version of a secret. Secrets Manager uses staging labels to
                *       track a version as it progresses through the secret rotation process. Each staging label can be
                *       attached to only one version at a time. To add a staging label to a version when it is already
                *       attached to another version, Secrets Manager first removes it from the other version first and
                *       then attaches it to this one. For more information about versions and staging labels, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html#term_version">Concepts: Version</a>. </p>
                *          <p>The staging labels that you specify in the <code>VersionStage</code> parameter are added
                *       to the existing list of staging labels for the version. </p>
                *          <p>You can move the <code>AWSCURRENT</code> staging label to this version by including it in this
                *       call.</p>
                *          <note>
                *             <p>Whenever you move <code>AWSCURRENT</code>, Secrets Manager automatically moves the label <code>AWSPREVIOUS</code>
                *         to the version that <code>AWSCURRENT</code> was removed from.</p>
                *          </note>
                *          <p>If this action results in the last label being removed from a version, then the version is
                *       considered to be 'deprecated' and can be deleted by Secrets Manager.</p>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:UpdateSecretVersionStage</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            updateSecretVersionStage(args: UpdateSecretVersionStageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSecretVersionStageCommandOutput>;
            updateSecretVersionStage(args: UpdateSecretVersionStageCommandInput, cb: (err: any, data?: UpdateSecretVersionStageCommandOutput) => void): void;
            updateSecretVersionStage(args: UpdateSecretVersionStageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSecretVersionStageCommandOutput) => void): void;
            /**
                * <p>Validates that a resource policy does not grant a wide range of principals access to
                *       your secret. A resource-based policy is optional for secrets.</p>
                *          <p>The API performs three checks when validating the policy:</p>
                *          <ul>
                *             <li>
                *                <p>Sends a call to <a href="https://aws.amazon.com/blogs/security/protect-sensitive-data-in-the-cloud-with-automated-reasoning-zelkova/">Zelkova</a>, an automated reasoning engine, to ensure your resource policy does not
                *           allow broad access to your secret, for example policies that use a wildcard for the principal.</p>
                *             </li>
                *             <li>
                *                <p>Checks for correct syntax in a policy.</p>
                *             </li>
                *             <li>
                *                <p>Verifies the policy does not lock out a caller.</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <b>Required permissions: </b>
                *             <code>secretsmanager:ValidateResourcePolicy</code>.
                *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
                *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
                *       and access control in Secrets Manager</a>. </p>
                */
            validateResourcePolicy(args: ValidateResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<ValidateResourcePolicyCommandOutput>;
            validateResourcePolicy(args: ValidateResourcePolicyCommandInput, cb: (err: any, data?: ValidateResourcePolicyCommandOutput) => void): void;
            validateResourcePolicy(args: ValidateResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ValidateResourcePolicyCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/CancelRotateSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelRotateSecretRequest, CancelRotateSecretResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface CancelRotateSecretCommandInput extends CancelRotateSecretRequest {
    }
    export interface CancelRotateSecretCommandOutput extends CancelRotateSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Turns off automatic rotation, and if a rotation is currently in
        *       progress, cancels the rotation.</p>
        *          <p>If you cancel a rotation in progress, it can leave the <code>VersionStage</code>
        *       labels in an unexpected state. You might
        *       need to remove the staging label <code>AWSPENDING</code> from the partially created version.
        *       You also need to determine whether to roll back to the previous version of the secret
        *       by moving the staging label <code>AWSCURRENT</code> to the version that has <code>AWSPENDING</code>.
        *       To determine
        *       which version has a specific staging label, call <a>ListSecretVersionIds</a>. Then use
        *      <a>UpdateSecretVersionStage</a> to change staging labels.
        *      For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html">How rotation works</a>.</p>
        *          <p>To turn on automatic rotation again, call <a>RotateSecret</a>.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:CancelRotateSecret</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, CancelRotateSecretCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, CancelRotateSecretCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new CancelRotateSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelRotateSecretCommandInput} for command's `input` shape.
        * @see {@link CancelRotateSecretCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class CancelRotateSecretCommand extends $Command<CancelRotateSecretCommandInput, CancelRotateSecretCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: CancelRotateSecretCommandInput;
            constructor(input: CancelRotateSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelRotateSecretCommandInput, CancelRotateSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/CreateSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateSecretRequest, CreateSecretResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface CreateSecretCommandInput extends CreateSecretRequest {
    }
    export interface CreateSecretCommandOutput extends CreateSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new secret. A <i>secret</i> can be a password, a set of
        *       credentials such as a user name and password, an OAuth token, or other secret information
        *       that you store in an encrypted form in Secrets Manager. The secret also
        *       includes the connection information to access a database or other service, which Secrets Manager
        *       doesn't encrypt. A secret in Secrets Manager consists of both the protected secret data and the
        *       important information needed to manage the secret.</p>
        *          <p>For information about creating a secret in the console, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_create-basic-secret.html">Create a secret</a>.</p>
        *          <p>To create a secret, you can provide the secret value to be encrypted in either the
        *       <code>SecretString</code> parameter or the <code>SecretBinary</code> parameter, but not both.
        *       If you include <code>SecretString</code> or <code>SecretBinary</code>
        *       then Secrets Manager creates an initial secret version and automatically attaches the staging
        *       label <code>AWSCURRENT</code> to it.</p>
        *          <p>For database credentials you want to rotate, for Secrets Manager to be able to rotate the secret,
        *       you must make sure the JSON you store in the <code>SecretString</code> matches the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_secret_json_structure.html">JSON structure of
        *         a database secret</a>.</p>
        *          <p>If you don't specify an KMS encryption key, Secrets Manager uses the Amazon Web Services managed key
        *       <code>aws/secretsmanager</code>. If this key
        *       doesn't already exist in your account, then Secrets Manager creates it for you automatically. All
        *       users and roles in the Amazon Web Services account automatically have access to use <code>aws/secretsmanager</code>.
        *       Creating <code>aws/secretsmanager</code> can result in a one-time significant delay in returning the
        *       result.</p>
        *          <p>If the secret is in a different Amazon Web Services account from the credentials calling the API, then
        *       you can't use <code>aws/secretsmanager</code> to encrypt the secret, and you must create
        *       and use a customer managed KMS key. </p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:CreateSecret</code>. If you
        *       include tags in the secret, you also need <code>secretsmanager:TagResource</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        *          <p>To encrypt the secret with a KMS key other than <code>aws/secretsmanager</code>, you need <code>kms:GenerateDataKey</code> and <code>kms:Decrypt</code> permission to the key. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, CreateSecretCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, CreateSecretCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new CreateSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSecretCommandInput} for command's `input` shape.
        * @see {@link CreateSecretCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class CreateSecretCommand extends $Command<CreateSecretCommandInput, CreateSecretCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: CreateSecretCommandInput;
            constructor(input: CreateSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSecretCommandInput, CreateSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DeleteResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteResourcePolicyRequest, DeleteResourcePolicyResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface DeleteResourcePolicyCommandInput extends DeleteResourcePolicyRequest {
    }
    export interface DeleteResourcePolicyCommandOutput extends DeleteResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the resource-based permission policy attached to the secret. To attach a policy to
        *       a secret, use <a>PutResourcePolicy</a>.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:DeleteResourcePolicy</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, DeleteResourcePolicyCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, DeleteResourcePolicyCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new DeleteResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class DeleteResourcePolicyCommand extends $Command<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: DeleteResourcePolicyCommandInput;
            constructor(input: DeleteResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DeleteSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteSecretRequest, DeleteSecretResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface DeleteSecretCommandInput extends DeleteSecretRequest {
    }
    export interface DeleteSecretCommandOutput extends DeleteSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a secret and all of its versions. You can specify a recovery
        *       window during which you can restore the secret. The minimum recovery window is 7 days.
        *       The default recovery window is 30 days. Secrets Manager attaches a <code>DeletionDate</code> stamp to
        *       the secret that specifies the end of the recovery window. At the end of the recovery window,
        *       Secrets Manager deletes the secret permanently.</p>
        *          <p>You can't delete a primary secret that is replicated to other Regions. You must first delete the
        *     replicas using <a>RemoveRegionsFromReplication</a>, and then delete the primary secret.
        *     When you delete a replica, it is deleted immediately.</p>
        *          <p>You can't directly delete a version of a secret. Instead, you remove all staging labels
        *     from the version using <a>UpdateSecretVersionStage</a>. This marks the version as deprecated,
        *     and then Secrets Manager can automatically delete the version in the background.</p>
        *          <p>To determine whether an application still uses a secret, you can create an Amazon CloudWatch alarm
        *     to alert you to any attempts to access a secret during the recovery window. For more information,
        *     see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/monitoring_cloudwatch_deleted-secrets.html">
        *     Monitor secrets scheduled for deletion</a>.</p>
        *          <p>Secrets Manager performs the permanent secret deletion at the end of the waiting period as a
        *         background task with low priority. There is no guarantee of a specific time after the
        *         recovery window for the permanent delete to occur.</p>
        *          <p>At any time before recovery window ends, you can use <a>RestoreSecret</a> to
        *       remove the <code>DeletionDate</code> and cancel the deletion of the secret.</p>
        *          <p>When a secret is scheduled for deletion, you cannot retrieve the secret value.
        *       You must first cancel the deletion with <a>RestoreSecret</a> and then you can retrieve the secret.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:DeleteSecret</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, DeleteSecretCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, DeleteSecretCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new DeleteSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSecretCommandInput} for command's `input` shape.
        * @see {@link DeleteSecretCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class DeleteSecretCommand extends $Command<DeleteSecretCommandInput, DeleteSecretCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: DeleteSecretCommandInput;
            constructor(input: DeleteSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSecretCommandInput, DeleteSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DescribeSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSecretRequest, DescribeSecretResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface DescribeSecretCommandInput extends DescribeSecretRequest {
    }
    export interface DescribeSecretCommandOutput extends DescribeSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details of a secret. It does not include the encrypted secret value. Secrets Manager
        *       only returns fields that have a value in the response. </p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:DescribeSecret</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, DescribeSecretCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, DescribeSecretCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new DescribeSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSecretCommandInput} for command's `input` shape.
        * @see {@link DescribeSecretCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class DescribeSecretCommand extends $Command<DescribeSecretCommandInput, DescribeSecretCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: DescribeSecretCommandInput;
            constructor(input: DescribeSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSecretCommandInput, DescribeSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetRandomPasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRandomPasswordRequest, GetRandomPasswordResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface GetRandomPasswordCommandInput extends GetRandomPasswordRequest {
    }
    export interface GetRandomPasswordCommandOutput extends GetRandomPasswordResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a random password. We recommend that you specify the
        *       maximum length and include every character type that the system you are generating a password
        *       for can support.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:GetRandomPassword</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, GetRandomPasswordCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, GetRandomPasswordCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new GetRandomPasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRandomPasswordCommandInput} for command's `input` shape.
        * @see {@link GetRandomPasswordCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class GetRandomPasswordCommand extends $Command<GetRandomPasswordCommandInput, GetRandomPasswordCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: GetRandomPasswordCommandInput;
            constructor(input: GetRandomPasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRandomPasswordCommandInput, GetRandomPasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetResourcePolicyRequest, GetResourcePolicyResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface GetResourcePolicyCommandInput extends GetResourcePolicyRequest {
    }
    export interface GetResourcePolicyCommandOutput extends GetResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the JSON text of the resource-based policy document attached to the
        *       secret. For more information about permissions policies attached to a secret, see
        *       <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-policies.html">Permissions
        *         policies attached to a secret</a>.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:GetResourcePolicy</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, GetResourcePolicyCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, GetResourcePolicyCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new GetResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link GetResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class GetResourcePolicyCommand extends $Command<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: GetResourcePolicyCommandInput;
            constructor(input: GetResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetSecretValueCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSecretValueRequest, GetSecretValueResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface GetSecretValueCommandInput extends GetSecretValueRequest {
    }
    export interface GetSecretValueCommandOutput extends GetSecretValueResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the contents of the encrypted fields <code>SecretString</code> or
        *         <code>SecretBinary</code> from the specified version of a secret, whichever contains
        *       content.</p>
        *          <p>We recommend that you cache your secret values by using client-side caching.
        *       Caching secrets improves speed and reduces your costs. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/retrieving-secrets.html">Cache secrets for
        *         your applications</a>.</p>
        *
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:GetSecretValue</code>.
        *       If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key
        *       <code>aws/secretsmanager</code>, then you also need <code>kms:Decrypt</code> permissions for that key.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, GetSecretValueCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, GetSecretValueCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new GetSecretValueCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSecretValueCommandInput} for command's `input` shape.
        * @see {@link GetSecretValueCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class GetSecretValueCommand extends $Command<GetSecretValueCommandInput, GetSecretValueCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: GetSecretValueCommandInput;
            constructor(input: GetSecretValueCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSecretValueCommandInput, GetSecretValueCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ListSecretsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSecretsRequest, ListSecretsResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface ListSecretsCommandInput extends ListSecretsRequest {
    }
    export interface ListSecretsCommandOutput extends ListSecretsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the secrets that are stored by Secrets Manager in the Amazon Web Services account, not including secrets
        *       that are marked for deletion. To see secrets marked for deletion, use the Secrets Manager console.</p>
        *          <p>ListSecrets is eventually consistent, however it might not reflect changes from the last five minutes.
        *       To get the latest information for a specific secret, use <a>DescribeSecret</a>.</p>
        *          <p>To list the versions of a secret, use <a>ListSecretVersionIds</a>.</p>
        *          <p>To get the secret value from <code>SecretString</code> or <code>SecretBinary</code>,
        *       call <a>GetSecretValue</a>.</p>
        *          <p>For information about finding secrets in the console, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_search-secret.html">Find secrets in Secrets Manager</a>.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:ListSecrets</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, ListSecretsCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, ListSecretsCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new ListSecretsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSecretsCommandInput} for command's `input` shape.
        * @see {@link ListSecretsCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class ListSecretsCommand extends $Command<ListSecretsCommandInput, ListSecretsCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: ListSecretsCommandInput;
            constructor(input: ListSecretsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSecretsCommandInput, ListSecretsCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ListSecretVersionIdsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSecretVersionIdsRequest, ListSecretVersionIdsResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface ListSecretVersionIdsCommandInput extends ListSecretVersionIdsRequest {
    }
    export interface ListSecretVersionIdsCommandOutput extends ListSecretVersionIdsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the versions of a secret. Secrets Manager uses staging labels to indicate the different versions
        *     of a secret. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html#term_version">
        *     Secrets Manager concepts: Versions</a>.</p>
        *          <p>To list the secrets in the account, use <a>ListSecrets</a>.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:ListSecretVersionIds</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, ListSecretVersionIdsCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, ListSecretVersionIdsCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new ListSecretVersionIdsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSecretVersionIdsCommandInput} for command's `input` shape.
        * @see {@link ListSecretVersionIdsCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class ListSecretVersionIdsCommand extends $Command<ListSecretVersionIdsCommandInput, ListSecretVersionIdsCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: ListSecretVersionIdsCommandInput;
            constructor(input: ListSecretVersionIdsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSecretVersionIdsCommandInput, ListSecretVersionIdsCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/PutResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutResourcePolicyRequest, PutResourcePolicyResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface PutResourcePolicyCommandInput extends PutResourcePolicyRequest {
    }
    export interface PutResourcePolicyCommandOutput extends PutResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches a resource-based permission policy to a secret. A resource-based policy is
        *       optional. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication and access control for Secrets Manager</a>
        *          </p>
        *          <p>For information about attaching a policy in the console, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-based-policies.html">Attach a
        *       permissions policy to a secret</a>.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:PutResourcePolicy</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, PutResourcePolicyCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, PutResourcePolicyCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new PutResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link PutResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class PutResourcePolicyCommand extends $Command<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: PutResourcePolicyCommandInput;
            constructor(input: PutResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/PutSecretValueCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutSecretValueRequest, PutSecretValueResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface PutSecretValueCommandInput extends PutSecretValueRequest {
    }
    export interface PutSecretValueCommandOutput extends PutSecretValueResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new version with a new encrypted secret value and attaches it to the secret. The
        *       version can contain a new <code>SecretString</code> value or a new <code>SecretBinary</code> value. </p>
        *          <p>We recommend you avoid calling <code>PutSecretValue</code> at a sustained rate of more than
        *       once every 10 minutes. When you update the secret value, Secrets Manager creates a new version
        *       of the secret. Secrets Manager removes outdated versions when there are more than 100, but it does not
        *       remove versions created less than 24 hours ago. If you call <code>PutSecretValue</code> more
        *       than once every 10 minutes, you create more versions than Secrets Manager removes, and you will reach
        *       the quota for secret versions.</p>
        *          <p>You can specify the staging labels to attach to the new version in <code>VersionStages</code>.
        *       If you don't include <code>VersionStages</code>, then Secrets Manager automatically
        *       moves the staging label <code>AWSCURRENT</code> to this version. If this operation creates
        *       the first version for the secret, then Secrets Manager
        *         automatically attaches the staging label <code>AWSCURRENT</code> to it .</p>
        *          <p>If this operation moves the staging label <code>AWSCURRENT</code> from another version to this
        *       version, then Secrets Manager also automatically moves the staging label <code>AWSPREVIOUS</code> to
        *       the version that <code>AWSCURRENT</code> was removed from.</p>
        *          <p>This operation is idempotent. If you call this operation with a <code>ClientRequestToken</code>
        *     that matches an existing version's VersionId, and you specify the
        *       same secret data, the operation succeeds but does nothing. However, if the secret data is
        *       different, then the operation fails because you can't modify an existing version; you can
        *       only create new ones.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:PutSecretValue</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, PutSecretValueCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, PutSecretValueCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new PutSecretValueCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutSecretValueCommandInput} for command's `input` shape.
        * @see {@link PutSecretValueCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class PutSecretValueCommand extends $Command<PutSecretValueCommandInput, PutSecretValueCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: PutSecretValueCommandInput;
            constructor(input: PutSecretValueCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutSecretValueCommandInput, PutSecretValueCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RemoveRegionsFromReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveRegionsFromReplicationRequest, RemoveRegionsFromReplicationResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface RemoveRegionsFromReplicationCommandInput extends RemoveRegionsFromReplicationRequest {
    }
    export interface RemoveRegionsFromReplicationCommandOutput extends RemoveRegionsFromReplicationResponse, __MetadataBearer {
    }
    /**
        * <p>For a secret that is replicated to other Regions, deletes the secret replicas from the Regions you specify.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:RemoveRegionsFromReplication</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, RemoveRegionsFromReplicationCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, RemoveRegionsFromReplicationCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new RemoveRegionsFromReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveRegionsFromReplicationCommandInput} for command's `input` shape.
        * @see {@link RemoveRegionsFromReplicationCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class RemoveRegionsFromReplicationCommand extends $Command<RemoveRegionsFromReplicationCommandInput, RemoveRegionsFromReplicationCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: RemoveRegionsFromReplicationCommandInput;
            constructor(input: RemoveRegionsFromReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveRegionsFromReplicationCommandInput, RemoveRegionsFromReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ReplicateSecretToRegionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ReplicateSecretToRegionsRequest, ReplicateSecretToRegionsResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface ReplicateSecretToRegionsCommandInput extends ReplicateSecretToRegionsRequest {
    }
    export interface ReplicateSecretToRegionsCommandOutput extends ReplicateSecretToRegionsResponse, __MetadataBearer {
    }
    /**
        * <p>Replicates the secret to a new Regions. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create-manage-multi-region-secrets.html">Multi-Region secrets</a>.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:ReplicateSecretToRegions</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, ReplicateSecretToRegionsCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, ReplicateSecretToRegionsCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new ReplicateSecretToRegionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ReplicateSecretToRegionsCommandInput} for command's `input` shape.
        * @see {@link ReplicateSecretToRegionsCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class ReplicateSecretToRegionsCommand extends $Command<ReplicateSecretToRegionsCommandInput, ReplicateSecretToRegionsCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: ReplicateSecretToRegionsCommandInput;
            constructor(input: ReplicateSecretToRegionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ReplicateSecretToRegionsCommandInput, ReplicateSecretToRegionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RestoreSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreSecretRequest, RestoreSecretResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface RestoreSecretCommandInput extends RestoreSecretRequest {
    }
    export interface RestoreSecretCommandOutput extends RestoreSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Cancels the scheduled deletion of a secret by removing the <code>DeletedDate</code> time
        *       stamp. You can access a secret again after it has been restored.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:RestoreSecret</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, RestoreSecretCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, RestoreSecretCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new RestoreSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreSecretCommandInput} for command's `input` shape.
        * @see {@link RestoreSecretCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class RestoreSecretCommand extends $Command<RestoreSecretCommandInput, RestoreSecretCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: RestoreSecretCommandInput;
            constructor(input: RestoreSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreSecretCommandInput, RestoreSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RotateSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RotateSecretRequest, RotateSecretResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface RotateSecretCommandInput extends RotateSecretRequest {
    }
    export interface RotateSecretCommandOutput extends RotateSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Configures and starts the asynchronous process of rotating the secret. For more information about rotation,
        *       see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html">Rotate secrets</a>.</p>
        *          <p>If you include the
        *       configuration parameters, the operation sets the values for the secret and then immediately
        *       starts a rotation. If you don't include the configuration parameters, the operation starts a
        *       rotation with the values already stored in the secret. </p>
        *          <p>For database credentials you want to rotate, for Secrets Manager to be able to rotate the secret, you must
        *       make sure the secret value is in the
        *         <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_secret_json_structure.html"> JSON structure
        *         of a database secret</a>. In particular, if you want to use the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets_strategies.html#rotating-secrets-two-users"> alternating users strategy</a>, your secret must contain the ARN of a superuser
        *       secret.</p>
        *
        *          <p>To configure rotation, you also need the ARN of an Amazon Web Services Lambda function and the schedule
        *       for the rotation. The Lambda rotation function creates a new
        *       version of the secret and creates or updates the credentials on the database or service to
        *       match. After testing the new credentials, the function marks the new secret version with the staging
        *       label <code>AWSCURRENT</code>. Then anyone who retrieves the secret gets the new version. For more
        *       information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html">How rotation works</a>.</p>
        *          <p>You can create the Lambda rotation function based on the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_available-rotation-templates.html">rotation function templates</a> that Secrets Manager provides. Choose
        *       a template that matches your <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets_strategies.html">Rotation strategy</a>.</p>
        *          <p>When rotation is successful, the <code>AWSPENDING</code> staging label might be attached
        *       to the same version as the <code>AWSCURRENT</code> version, or it might not be attached to any
        *       version. If the <code>AWSPENDING</code> staging label is present but not attached to the same
        *       version as <code>AWSCURRENT</code>, then any later invocation of <code>RotateSecret</code>
        *       assumes that a previous rotation request is still in progress and returns an error.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:RotateSecret</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. You also need <code>lambda:InvokeFunction</code> permissions on the rotation function.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets-required-permissions-function.html">
        *         Permissions for rotation</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, RotateSecretCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, RotateSecretCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new RotateSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RotateSecretCommandInput} for command's `input` shape.
        * @see {@link RotateSecretCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class RotateSecretCommand extends $Command<RotateSecretCommandInput, RotateSecretCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: RotateSecretCommandInput;
            constructor(input: RotateSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RotateSecretCommandInput, RotateSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/StopReplicationToReplicaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopReplicationToReplicaRequest, StopReplicationToReplicaResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface StopReplicationToReplicaCommandInput extends StopReplicationToReplicaRequest {
    }
    export interface StopReplicationToReplicaCommandOutput extends StopReplicationToReplicaResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the link between the replica secret and the primary secret and promotes the replica to a primary secret in the replica Region.</p>
        *          <p>You must call this operation from the Region in which you want to promote the replica to a primary secret.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:StopReplicationToReplica</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, StopReplicationToReplicaCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, StopReplicationToReplicaCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new StopReplicationToReplicaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopReplicationToReplicaCommandInput} for command's `input` shape.
        * @see {@link StopReplicationToReplicaCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class StopReplicationToReplicaCommand extends $Command<StopReplicationToReplicaCommandInput, StopReplicationToReplicaCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: StopReplicationToReplicaCommandInput;
            constructor(input: StopReplicationToReplicaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopReplicationToReplicaCommandInput, StopReplicationToReplicaCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Attaches tags to a secret. Tags consist of a key name and a value. Tags are part of the
        *       secret's metadata. They are not associated with specific versions of the secret. This operation appends tags to the existing list of tags.</p>
        *             <p>The following restrictions apply to tags:</p>
        *         <ul>
        *             <li>
        *                <p>Maximum number of tags per secret: 50</p>
        *             </li>
        *             <li>
        *                <p>Maximum key length: 127 Unicode characters in UTF-8</p>
        *             </li>
        *             <li>
        *                <p>Maximum value length: 255 Unicode characters in UTF-8</p>
        *             </li>
        *             <li>
        *                <p>Tag keys and values are case sensitive.</p>
        *             </li>
        *             <li>
        *                <p>Do not use the <code>aws:</code> prefix in your tag names or values because Amazon Web Services reserves it
        *             for Amazon Web Services use. You can't edit or delete tag names or values with this
        *               prefix. Tags with this prefix do not count against your tags per secret limit.</p>
        *             </li>
        *             <li>
        *                <p>If you use your tagging schema across multiple services and resources,
        *               other services might have restrictions on allowed characters. Generally
        *               allowed characters: letters, spaces, and numbers representable in UTF-8, plus the
        *               following special characters: + - = . _ : / @.</p>
        *             </li>
        *          </ul>
        *
        *          <important>
        *             <p>If you use tags as part of your security strategy, then adding or removing a tag can
        *         change permissions. If successfully completing this operation would result in you losing
        *         your permissions for this secret, then the operation is blocked and returns an Access Denied
        *         error.</p>
        *          </important>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:TagResource</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, TagResourceCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, TagResourceCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes specific tags from a secret.</p>
        *          <p>This operation is idempotent. If a requested tag is not attached to the secret, no error
        *       is returned and the secret metadata is unchanged.</p>
        *          <important>
        *             <p>If you use tags as part of your security strategy, then removing a tag can change
        *         permissions. If successfully completing this operation would result in you losing your
        *         permissions for this secret, then the operation is blocked and returns an Access Denied
        *         error.</p>
        *          </important>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:UntagResource</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, UntagResourceCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, UntagResourceCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UpdateSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSecretRequest, UpdateSecretResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface UpdateSecretCommandInput extends UpdateSecretRequest {
    }
    export interface UpdateSecretCommandOutput extends UpdateSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the details of a secret, including metadata and the secret value. To change the secret value, you can also use <a>PutSecretValue</a>.</p>
        *          <p>To change the rotation configuration of a secret, use <a>RotateSecret</a> instead.</p>
        *
        *          <p>We recommend you avoid calling <code>UpdateSecret</code> at a sustained rate of more than
        *       once every 10 minutes. When you call <code>UpdateSecret</code> to update the secret value, Secrets Manager creates a new version
        *       of the secret. Secrets Manager removes outdated versions when there are more than 100, but it does not
        *       remove versions created less than 24 hours ago. If you update the secret value more
        *       than once every 10 minutes, you create more versions than Secrets Manager removes, and you will reach
        *       the quota for secret versions.</p>
        *          <p>If you include <code>SecretString</code> or <code>SecretBinary</code> to create a new
        *       secret version, Secrets Manager automatically attaches the staging label <code>AWSCURRENT</code> to the new
        *       version. </p>
        *          <p>If you call this operation with a <code>ClientRequestToken</code> that matches an existing version's
        *       <code>VersionId</code>, the operation results in an error. You can't modify an existing
        *       version, you can only create a new version. To remove a version, remove all staging labels from it. See
        *     <a>UpdateSecretVersionStage</a>.</p>
        *          <p>If you don't specify an KMS encryption key, Secrets Manager uses the Amazon Web Services managed key
        *       <code>aws/secretsmanager</code>. If this key doesn't already exist in your account, then Secrets Manager
        *       creates it for you automatically. All users and roles in the Amazon Web Services account automatically have access
        *       to use <code>aws/secretsmanager</code>. Creating <code>aws/secretsmanager</code> can result in a one-time
        *       significant delay in returning the result.  </p>
        *          <p>If the secret is in a different Amazon Web Services account from the credentials calling the API, then you can't
        *       use <code>aws/secretsmanager</code> to encrypt the secret, and you must create and use a customer managed key. </p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:UpdateSecret</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>.
        *       If you use a customer managed key, you must also have <code>kms:GenerateDataKey</code> and
        *       <code>kms:Decrypt</code> permissions on the key. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/security-encryption.html">
        *         Secret encryption and decryption</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, UpdateSecretCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, UpdateSecretCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new UpdateSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSecretCommandInput} for command's `input` shape.
        * @see {@link UpdateSecretCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class UpdateSecretCommand extends $Command<UpdateSecretCommandInput, UpdateSecretCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: UpdateSecretCommandInput;
            constructor(input: UpdateSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSecretCommandInput, UpdateSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UpdateSecretVersionStageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSecretVersionStageRequest, UpdateSecretVersionStageResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface UpdateSecretVersionStageCommandInput extends UpdateSecretVersionStageRequest {
    }
    export interface UpdateSecretVersionStageCommandOutput extends UpdateSecretVersionStageResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the staging labels attached to a version of a secret. Secrets Manager uses staging labels to
        *       track a version as it progresses through the secret rotation process. Each staging label can be
        *       attached to only one version at a time. To add a staging label to a version when it is already
        *       attached to another version, Secrets Manager first removes it from the other version first and
        *       then attaches it to this one. For more information about versions and staging labels, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html#term_version">Concepts: Version</a>. </p>
        *          <p>The staging labels that you specify in the <code>VersionStage</code> parameter are added
        *       to the existing list of staging labels for the version. </p>
        *          <p>You can move the <code>AWSCURRENT</code> staging label to this version by including it in this
        *       call.</p>
        *          <note>
        *             <p>Whenever you move <code>AWSCURRENT</code>, Secrets Manager automatically moves the label <code>AWSPREVIOUS</code>
        *         to the version that <code>AWSCURRENT</code> was removed from.</p>
        *          </note>
        *          <p>If this action results in the last label being removed from a version, then the version is
        *       considered to be 'deprecated' and can be deleted by Secrets Manager.</p>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:UpdateSecretVersionStage</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, UpdateSecretVersionStageCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, UpdateSecretVersionStageCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new UpdateSecretVersionStageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSecretVersionStageCommandInput} for command's `input` shape.
        * @see {@link UpdateSecretVersionStageCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class UpdateSecretVersionStageCommand extends $Command<UpdateSecretVersionStageCommandInput, UpdateSecretVersionStageCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: UpdateSecretVersionStageCommandInput;
            constructor(input: UpdateSecretVersionStageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSecretVersionStageCommandInput, UpdateSecretVersionStageCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ValidateResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ValidateResourcePolicyRequest, ValidateResourcePolicyResponse } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0";
    import { SecretsManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient";
    export interface ValidateResourcePolicyCommandInput extends ValidateResourcePolicyRequest {
    }
    export interface ValidateResourcePolicyCommandOutput extends ValidateResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Validates that a resource policy does not grant a wide range of principals access to
        *       your secret. A resource-based policy is optional for secrets.</p>
        *          <p>The API performs three checks when validating the policy:</p>
        *          <ul>
        *             <li>
        *                <p>Sends a call to <a href="https://aws.amazon.com/blogs/security/protect-sensitive-data-in-the-cloud-with-automated-reasoning-zelkova/">Zelkova</a>, an automated reasoning engine, to ensure your resource policy does not
        *           allow broad access to your secret, for example policies that use a wildcard for the principal.</p>
        *             </li>
        *             <li>
        *                <p>Checks for correct syntax in a policy.</p>
        *             </li>
        *             <li>
        *                <p>Verifies the policy does not lock out a caller.</p>
        *             </li>
        *          </ul>
        *          <p>
        *             <b>Required permissions: </b>
        *             <code>secretsmanager:ValidateResourcePolicy</code>.
        *       For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/reference_iam-permissions.html#reference_iam-permissions_actions">
        *       IAM policy actions for Secrets Manager</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication
        *       and access control in Secrets Manager</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SecretsManagerClient, ValidateResourcePolicyCommand } from "@aws-sdk/client-secrets-manager"; // ES Modules import
        * // const { SecretsManagerClient, ValidateResourcePolicyCommand } = require("@aws-sdk/client-secrets-manager"); // CommonJS import
        * const client = new SecretsManagerClient(config);
        * const command = new ValidateResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ValidateResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link ValidateResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link SecretsManagerClientResolvedConfig | config} for SecretsManagerClient's `config` shape.
        *
        */
    export class ValidateResourcePolicyCommand extends $Command<ValidateResourcePolicyCommandInput, ValidateResourcePolicyCommandOutput, SecretsManagerClientResolvedConfig> {
            readonly input: ValidateResourcePolicyCommandInput;
            constructor(input: ValidateResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SecretsManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ValidateResourcePolicyCommandInput, ValidateResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/SecretsManagerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CancelRotateSecretCommandInput, CancelRotateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/CancelRotateSecretCommand";
    import { CreateSecretCommandInput, CreateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/CreateSecretCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteSecretCommandInput, DeleteSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DeleteSecretCommand";
    import { DescribeSecretCommandInput, DescribeSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/DescribeSecretCommand";
    import { GetRandomPasswordCommandInput, GetRandomPasswordCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetRandomPasswordCommand";
    import { GetResourcePolicyCommandInput, GetResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetResourcePolicyCommand";
    import { GetSecretValueCommandInput, GetSecretValueCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/GetSecretValueCommand";
    import { ListSecretsCommandInput, ListSecretsCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ListSecretsCommand";
    import { ListSecretVersionIdsCommandInput, ListSecretVersionIdsCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ListSecretVersionIdsCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/PutResourcePolicyCommand";
    import { PutSecretValueCommandInput, PutSecretValueCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/PutSecretValueCommand";
    import { RemoveRegionsFromReplicationCommandInput, RemoveRegionsFromReplicationCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RemoveRegionsFromReplicationCommand";
    import { ReplicateSecretToRegionsCommandInput, ReplicateSecretToRegionsCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ReplicateSecretToRegionsCommand";
    import { RestoreSecretCommandInput, RestoreSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RestoreSecretCommand";
    import { RotateSecretCommandInput, RotateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/RotateSecretCommand";
    import { StopReplicationToReplicaCommandInput, StopReplicationToReplicaCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/StopReplicationToReplicaCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UntagResourceCommand";
    import { UpdateSecretCommandInput, UpdateSecretCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UpdateSecretCommand";
    import { UpdateSecretVersionStageCommandInput, UpdateSecretVersionStageCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/UpdateSecretVersionStageCommand";
    import { ValidateResourcePolicyCommandInput, ValidateResourcePolicyCommandOutput } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/commands/ValidateResourcePolicyCommand";
    export type ServiceInputTypes = CancelRotateSecretCommandInput | CreateSecretCommandInput | DeleteResourcePolicyCommandInput | DeleteSecretCommandInput | DescribeSecretCommandInput | GetRandomPasswordCommandInput | GetResourcePolicyCommandInput | GetSecretValueCommandInput | ListSecretVersionIdsCommandInput | ListSecretsCommandInput | PutResourcePolicyCommandInput | PutSecretValueCommandInput | RemoveRegionsFromReplicationCommandInput | ReplicateSecretToRegionsCommandInput | RestoreSecretCommandInput | RotateSecretCommandInput | StopReplicationToReplicaCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateSecretCommandInput | UpdateSecretVersionStageCommandInput | ValidateResourcePolicyCommandInput;
    export type ServiceOutputTypes = CancelRotateSecretCommandOutput | CreateSecretCommandOutput | DeleteResourcePolicyCommandOutput | DeleteSecretCommandOutput | DescribeSecretCommandOutput | GetRandomPasswordCommandOutput | GetResourcePolicyCommandOutput | GetSecretValueCommandOutput | ListSecretVersionIdsCommandOutput | ListSecretsCommandOutput | PutResourcePolicyCommandOutput | PutSecretValueCommandOutput | RemoveRegionsFromReplicationCommandOutput | ReplicateSecretToRegionsCommandOutput | RestoreSecretCommandOutput | RotateSecretCommandOutput | StopReplicationToReplicaCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateSecretCommandOutput | UpdateSecretVersionStageCommandOutput | ValidateResourcePolicyCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SecretsManagerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SecretsManagerClient class constructor that set the region, credentials and other options.
        */
    export interface SecretsManagerClientConfig extends SecretsManagerClientConfigType {
    }
    type SecretsManagerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SecretsManagerClient class. This is resolved and normalized from the {@link SecretsManagerClientConfig | constructor configuration interface}.
        */
    export interface SecretsManagerClientResolvedConfig extends SecretsManagerClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Web Services Secrets Manager</fullname>
        *          <p>Amazon Web Services Secrets Manager provides a service to enable you to store, manage, and retrieve, secrets.</p>
        *
        *          <p>This guide provides descriptions of the Secrets Manager API. For more information about using this
        *       service, see the <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/introduction.html">Amazon Web Services Secrets Manager User Guide</a>.</p>
        *
        *          <p>
        *             <b>API Version</b>
        *          </p>
        *
        *          <p>This version of the Secrets Manager API Reference documents the Secrets Manager API version 2017-10-17.</p>
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *
        *          <p>
        *             <b>Support and Feedback for Amazon Web Services Secrets Manager</b>
        *          </p>
        *          <p>We welcome your feedback. Send your comments to <a href="mailto:awssecretsmanager-feedback@amazon.com">awssecretsmanager-feedback@amazon.com</a>, or post your feedback and questions in the <a href="http://forums.aws.amazon.com/forum.jspa?forumID=296">Amazon Web Services Secrets Manager Discussion Forum</a>. For more
        *       information about the Amazon Web Services Discussion Forums, see <a href="http://forums.aws.amazon.com/help.jspa">Forums
        *         Help</a>.</p>
        *
        *          <p>
        *             <b>Logging API Requests</b>
        *          </p>
        *          <p>Amazon Web Services Secrets Manager supports Amazon Web Services CloudTrail, a service that records Amazon Web Services API calls for your Amazon Web Services
        *       account and delivers log files to an Amazon S3 bucket. By using information that's collected
        *       by Amazon Web Services CloudTrail, you can determine the requests successfully made to Secrets Manager, who made the
        *       request, when it was made, and so on. For more about Amazon Web Services Secrets Manager and support for Amazon Web Services
        *       CloudTrail, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/monitoring.html#monitoring_cloudtrail">Logging
        *         Amazon Web Services Secrets Manager Events with Amazon Web Services CloudTrail</a> in the <i>Amazon Web Services Secrets Manager User Guide</i>.
        *       To learn more about CloudTrail, including enabling it and find your log files, see the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/what_is_cloud_trail_top_level.html">Amazon Web Services CloudTrail User Guide</a>.</p>
        */
    export class SecretsManagerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SecretsManagerClientResolvedConfig> {
            /**
                * The resolved configuration of SecretsManagerClient class. This is resolved and normalized from the {@link SecretsManagerClientConfig | constructor configuration interface}.
                */
            readonly config: SecretsManagerClientResolvedConfig;
            constructor(configuration: SecretsManagerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SecretsManagerServiceException as __BaseException } from "@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/SecretsManagerServiceException";
    /**
        * <p>A custom type that specifies a <code>Region</code> and the <code>KmsKeyId</code> for a replica secret.</p>
        */
    export interface ReplicaRegionType {
            /**
                * <p>A Region code. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints">Name and code of Regions</a>.</p>
                */
            Region?: string;
            /**
                * <p>The ARN, key ID, or alias of the KMS key to encrypt the secret. If you don't include this field, Secrets Manager uses <code>aws/secretsmanager</code>.</p>
                */
            KmsKeyId?: string;
    }
    export namespace ReplicaRegionType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicaRegionType) => any;
    }
    export interface CancelRotateSecretRequest {
            /**
                * <p>The ARN or name of the secret.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
    }
    export namespace CancelRotateSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelRotateSecretRequest) => any;
    }
    export interface CancelRotateSecretResponse {
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The unique identifier of the version of the secret created during the rotation. This
                *       version might not be complete, and should be evaluated for possible deletion. We recommend
                *       that you remove the <code>VersionStage</code> value <code>AWSPENDING</code> from this version so that
                *       Secrets Manager can delete it. Failing to clean up a cancelled rotation can block you from
                *       starting future rotations.</p>
                */
            VersionId?: string;
    }
    export namespace CancelRotateSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelRotateSecretResponse) => any;
    }
    /**
        * <p>An error occurred on the server side.</p>
        */
    export class InternalServiceError extends __BaseException {
            readonly name: "InternalServiceError";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceError, __BaseException>);
    }
    /**
        * <p>The parameter name or value is invalid.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>A parameter value is not valid for the current state of the
        *       resource.</p>
        *          <p>Possible causes:</p>
        *          <ul>
        *             <li>
        *                <p>The secret is scheduled for deletion.</p>
        *             </li>
        *             <li>
        *                <p>You tried to enable rotation on a secret that doesn't already have a Lambda function
        *           ARN configured and you didn't include such an ARN as a parameter in this call. </p>
        *             </li>
        *          </ul>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>Secrets Manager can't find the resource that you asked for.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>A structure that contains information about a tag.</p>
        */
    export interface Tag {
            /**
                * <p>The key identifier, or name, of the tag.</p>
                */
            Key?: string;
            /**
                * <p>The string value associated with the key of the tag.</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateSecretRequest {
            /**
                * <p>The name of the new secret.</p>
                *          <p>The secret name can contain ASCII letters, numbers, and the following characters:
                *       /_+=.@-</p>
                *
                *          <p>Do not end your secret name with a hyphen followed by six characters. If you do so, you
                *         risk confusion and unexpected results when searching for a secret by partial ARN. Secrets Manager
                *         automatically adds a hyphen and six random characters after the secret name at the end of the ARN.</p>
                */
            Name: string | undefined;
            /**
                * <p>If you include <code>SecretString</code> or <code>SecretBinary</code>, then
                *       Secrets Manager creates an initial version for the secret, and this parameter specifies the unique
                *       identifier for the new version. </p>
                *          <note>
                *             <p>If you use the Amazon Web Services CLI or one of the Amazon Web Services SDKs to call this operation, then you can
                *         leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it
                *         as the value for this parameter in the request. If you don't use the SDK and instead
                *         generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a
                *         <code>ClientRequestToken</code> yourself for the new version and include the value in the
                *         request.</p>
                *          </note>
                *          <p>This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental
                *       creation of duplicate versions if there are failures and retries during a rotation. We
                *       recommend that you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a> value to
                *       ensure uniqueness of your versions within the specified secret. </p>
                *          <ul>
                *             <li>
                *                <p>If the <code>ClientRequestToken</code> value isn't already associated with a version
                *           of the secret then a new version of the secret is created. </p>
                *             </li>
                *             <li>
                *                <p>If a version with this value already exists and the version <code>SecretString</code>
                *           and <code>SecretBinary</code> values are the same as those in the request, then the
                *           request is ignored.</p>
                *             </li>
                *             <li>
                *                <p>If a version with this value already exists and that version's
                *           <code>SecretString</code> and <code>SecretBinary</code> values are different from those
                *           in the request, then the request fails because you cannot modify an existing version.
                *           Instead, use <a>PutSecretValue</a> to create a new version.</p>
                *             </li>
                *          </ul>
                *          <p>This value becomes the <code>VersionId</code> of the new version.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The description of the secret.</p>
                */
            Description?: string;
            /**
                * <p>The ARN, key ID, or alias of the KMS key that Secrets Manager uses to
                *       encrypt the secret value in the secret.</p>
                *          <p>To use a KMS key in a different account, use the key ARN or the alias ARN.</p>
                *          <p>If you don't specify this value, then Secrets Manager uses the key <code>aws/secretsmanager</code>.
                *       If that key doesn't yet exist, then Secrets Manager creates it for you automatically the first time it
                *       encrypts the secret value.</p>
                *          <p>If the secret is in a different Amazon Web Services account from the credentials calling the API, then
                *       you can't use <code>aws/secretsmanager</code> to encrypt the secret, and you must create
                *       and use a customer managed KMS key. </p>
                */
            KmsKeyId?: string;
            /**
                * <p>The binary data to encrypt and store in the new version of
                *       the secret. We recommend that you store your binary data in a file and then pass the
                *       contents of the file as a parameter.</p>
                *          <p>Either <code>SecretString</code> or <code>SecretBinary</code> must have a value, but not
                *       both.</p>
                *          <p>This parameter is not available in the Secrets Manager console.</p>
                */
            SecretBinary?: Uint8Array;
            /**
                * <p>The text data to encrypt and store in this new version of
                *       the secret. We recommend you use a JSON structure of key/value pairs for your secret value.</p>
                *          <p>Either <code>SecretString</code> or <code>SecretBinary</code> must have a value, but not
                *       both.</p>
                *          <p>If you create a secret by using the Secrets Manager console then Secrets Manager puts the protected
                *       secret text in only the <code>SecretString</code> parameter. The Secrets Manager console stores the
                *       information as a JSON structure of key/value pairs that a Lambda rotation function can parse.</p>
                */
            SecretString?: string;
            /**
                * <p>A list of tags to attach to the secret. Each tag
                *       is a key and value pair of strings in a JSON text string, for example:</p>
                *          <p>
                *             <code>[{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]</code>
                *          </p>
                *          <p>Secrets Manager tag key names are case sensitive. A tag with the key "ABC" is a different tag
                *       from one with key "abc".</p>
                *          <p>If you check tags in permissions policies as part of your
                *       security strategy, then adding or removing a tag can change permissions. If the
                *       completion of this operation would result in you losing your permissions for
                *       this secret, then Secrets Manager blocks the operation and returns an <code>Access Denied</code>
                *       error. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#tag-secrets-abac">Control
                *         access to secrets using tags</a> and <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html#auth-and-access_tags2">Limit access to identities with tags that match secrets' tags</a>.</p>
                *          <p>For information about how to format a
                *       JSON parameter for the various command line tool environments, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-using-param.html#cli-using-param-json">Using JSON for
                *         Parameters</a>. If your command-line tool or SDK requires quotation marks around the parameter, you should
                *       use single quotes to avoid confusion with the double quotes required in the JSON text.</p>
                *             <p>The following restrictions apply to tags:</p>
                *         <ul>
                *             <li>
                *                <p>Maximum number of tags per secret: 50</p>
                *             </li>
                *             <li>
                *                <p>Maximum key length: 127 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                <p>Maximum value length: 255 Unicode characters in UTF-8</p>
                *             </li>
                *             <li>
                *                <p>Tag keys and values are case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>Do not use the <code>aws:</code> prefix in your tag names or values because Amazon Web Services reserves it
                *             for Amazon Web Services use. You can't edit or delete tag names or values with this
                *               prefix. Tags with this prefix do not count against your tags per secret limit.</p>
                *             </li>
                *             <li>
                *                <p>If you use your tagging schema across multiple services and resources,
                *               other services might have restrictions on allowed characters. Generally
                *               allowed characters: letters, spaces, and numbers representable in UTF-8, plus the
                *               following special characters: + - = . _ : / @.</p>
                *             </li>
                *          </ul>
                */
            Tags?: Tag[];
            /**
                * <p>A list of Regions and KMS keys to replicate secrets.</p>
                */
            AddReplicaRegions?: ReplicaRegionType[];
            /**
                * <p>Specifies whether to overwrite a secret with the same name in the
                *       destination Region.</p>
                */
            ForceOverwriteReplicaSecret?: boolean;
    }
    export namespace CreateSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSecretRequest) => any;
    }
    export enum StatusType {
            Failed = "Failed",
            InProgress = "InProgress",
            InSync = "InSync"
    }
    /**
        * <p>A replication object consisting of a <code>RegionReplicationStatus</code> object and includes a Region, KMSKeyId, status, and status message.</p>
        */
    export interface ReplicationStatusType {
            /**
                * <p>The Region where replication occurs.</p>
                */
            Region?: string;
            /**
                * <p>Can be an <code>ARN</code>, <code>Key ID</code>, or <code>Alias</code>. </p>
                */
            KmsKeyId?: string;
            /**
                * <p>The status can be <code>InProgress</code>, <code>Failed</code>, or <code>InSync</code>.</p>
                */
            Status?: StatusType | string;
            /**
                * <p>Status message such as "<i>Secret with this name already exists in this
                *       region</i>".</p>
                */
            StatusMessage?: string;
            /**
                * <p>The date that you last accessed the secret in the Region. </p>
                */
            LastAccessedDate?: Date;
    }
    export namespace ReplicationStatusType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicationStatusType) => any;
    }
    export interface CreateSecretResponse {
            /**
                * <p>The ARN of the new secret. The ARN includes the name of the secret followed by six random
                *       characters. This ensures that if you create a new secret with the same name as a deleted secret,
                *       then users with access to the old secret don't get access to the new secret because the ARNs
                *       are different.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the new secret.</p>
                */
            Name?: string;
            /**
                * <p>The unique identifier associated with the version of the new secret.</p>
                */
            VersionId?: string;
            /**
                * <p>A list of the replicas of this secret and their status:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Failed</code>, which indicates that the replica was not created.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InProgress</code>, which indicates that Secrets Manager is in the process of creating the replica.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InSync</code>, which indicates that the replica was created.</p>
                *             </li>
                *          </ul>
                */
            ReplicationStatus?: ReplicationStatusType[];
    }
    export namespace CreateSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSecretResponse) => any;
    }
    /**
        * <p>Secrets Manager can't decrypt the protected secret text using the provided KMS key. </p>
        */
    export class DecryptionFailure extends __BaseException {
            readonly name: "DecryptionFailure";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DecryptionFailure, __BaseException>);
    }
    /**
        * <p>Secrets Manager can't encrypt the protected secret text using the provided KMS key. Check that the
        *       KMS key is available, enabled, and not in an invalid state. For more
        *       information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">Key state: Effect on your KMS key</a>.</p>
        */
    export class EncryptionFailure extends __BaseException {
            readonly name: "EncryptionFailure";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EncryptionFailure, __BaseException>);
    }
    /**
        * <p>The request failed because it would exceed one of the Secrets Manager quotas.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The resource policy has syntax errors.</p>
        */
    export class MalformedPolicyDocumentException extends __BaseException {
            readonly name: "MalformedPolicyDocumentException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MalformedPolicyDocumentException, __BaseException>);
    }
    /**
        * <p>The request failed because you did not complete all the prerequisite steps.</p>
        */
    export class PreconditionNotMetException extends __BaseException {
            readonly name: "PreconditionNotMetException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PreconditionNotMetException, __BaseException>);
    }
    /**
        * <p>A resource with the ID you requested already exists.</p>
        */
    export class ResourceExistsException extends __BaseException {
            readonly name: "ResourceExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceExistsException, __BaseException>);
    }
    export interface DeleteResourcePolicyRequest {
            /**
                * <p>The ARN or name of the secret to delete the attached resource-based policy for.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
    }
    export namespace DeleteResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyRequest) => any;
    }
    export interface DeleteResourcePolicyResponse {
            /**
                * <p>The ARN of the secret that the resource-based policy was deleted for.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret that the resource-based policy was deleted for.</p>
                */
            Name?: string;
    }
    export namespace DeleteResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyResponse) => any;
    }
    export interface DeleteSecretRequest {
            /**
                * <p>The ARN or name of the secret to delete.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>The number of days from 7 to 30 that Secrets Manager waits before permanently deleting the
                *       secret. You can't use both this parameter and <code>ForceDeleteWithoutRecovery</code>
                *       in the same call. If you don't use either, then Secrets Manager defaults to a 30 day recovery window.</p>
                */
            RecoveryWindowInDays?: number;
            /**
                * <p>Specifies whether to delete the secret without any recovery window. You
                *       can't use both this parameter and <code>RecoveryWindowInDays</code> in the same
                *       call. If you don't use either, then Secrets Manager defaults to a 30 day recovery window.</p>
                *          <p>Secrets Manager performs the actual deletion with an asynchronous background process, so there might
                *       be a short delay before the secret is permanently deleted. If you delete a secret and then
                *       immediately create a secret with the same name, use appropriate back off and retry logic.</p>
                *          <important>
                *             <p>Use this parameter with caution. This parameter causes the operation to skip the normal
                *         recovery window before the permanent deletion that Secrets Manager would normally impose with the
                *           <code>RecoveryWindowInDays</code> parameter. If you delete a secret with the
                *           <code>ForceDeleteWithouRecovery</code> parameter, then you have no opportunity to recover
                *         the secret. You lose the secret permanently.</p>
                *          </important>
                */
            ForceDeleteWithoutRecovery?: boolean;
    }
    export namespace DeleteSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSecretRequest) => any;
    }
    export interface DeleteSecretResponse {
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The date and time after which this secret Secrets Manager can permanently delete this secret,
                *       and it can no longer be restored. This value is the date and time of the delete request
                *       plus the number of days in <code>RecoveryWindowInDays</code>.</p>
                */
            DeletionDate?: Date;
    }
    export namespace DeleteSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSecretResponse) => any;
    }
    export interface DescribeSecretRequest {
            /**
                * <p>The ARN or name of the secret. </p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
    }
    export namespace DescribeSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSecretRequest) => any;
    }
    /**
        * <p>A structure that defines the rotation configuration for the secret.</p>
        */
    export interface RotationRulesType {
            /**
                * <p>The number of days between automatic scheduled rotations of the secret. You can use this
                *       value to check that your secret meets your compliance guidelines for how often secrets must
                *       be rotated.</p>
                *          <p>In <code>DescribeSecret</code> and <code>ListSecrets</code>, this value is calculated from
                *       the rotation schedule after every successful rotation. In <code>RotateSecret</code>, you can
                *       set the rotation schedule in <code>RotationRules</code> with <code>AutomaticallyAfterDays</code>
                *       or <code>ScheduleExpression</code>, but not both.</p>
                */
            AutomaticallyAfterDays?: number;
            /**
                * <p>The length of the rotation window in hours, for example <code>3h</code> for a three hour window. Secrets Manager
                *       rotates your secret at any time during this window. The window must not go into the next UTC
                *       day. If you don't specify this value, the window automatically ends at the end of
                *       the UTC day. The window begins according to the <code>ScheduleExpression</code>. For more
                *       information, including examples, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_schedule.html">Schedule expressions
                *         in Secrets Manager rotation</a>.</p>
                */
            Duration?: string;
            /**
                * <p>A <code>cron()</code> or <code>rate()</code> expression that defines the schedule for
                *       rotating your secret. Secrets Manager rotation schedules use UTC time zone. </p>
                *          <p>Secrets Manager <code>rate()</code> expressions
                *       represent the interval in days that you want to rotate your secret, for example
                *       <code>rate(10 days)</code>. If you use a <code>rate()</code> expression, the rotation
                *       window opens at midnight, and Secrets Manager rotates your secret any time that day after midnight.
                *       You can set a <code>Duration</code> to shorten the rotation window.</p>
                *          <p>You can use a <code>cron()</code> expression to create rotation schedules that are
                *       more detailed than a rotation interval. For more information, including examples, see
                *       <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_schedule.html">Schedule expressions
                *         in Secrets Manager rotation</a>. If you use a <code>cron()</code> expression, Secrets Manager rotates
                *       your secret any time during that day after the window opens. For example,
                *       <code>cron(0 8 1 * ? *)</code> represents a rotation window that occurs on the first
                *       day of every month beginning at 8:00 AM UTC. Secrets Manager rotates the secret any time that day
                *       after 8:00 AM. You can set a <code>Duration</code> to shorten
                *       the rotation window.</p>
                */
            ScheduleExpression?: string;
    }
    export namespace RotationRulesType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotationRulesType) => any;
    }
    export interface DescribeSecretResponse {
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The description of the secret.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the KMS key that Secrets Manager uses to encrypt the secret value. If the secret is encrypted with
                *       the Amazon Web Services managed key <code>aws/secretsmanager</code>, this field is omitted.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Specifies whether automatic rotation is turned on for this secret.</p>
                *          <p>To turn on rotation, use <a>RotateSecret</a>. To turn off
                *       rotation, use <a>CancelRotateSecret</a>.</p>
                */
            RotationEnabled?: boolean;
            /**
                * <p>The ARN of the Lambda function that Secrets Manager invokes to rotate the
                *       secret. </p>
                */
            RotationLambdaARN?: string;
            /**
                * <p>The rotation schedule and Lambda function for this secret. If the secret previously had rotation turned on, but
                *       it is now turned off, this field shows the previous rotation schedule and rotation function. If the secret never had
                *     rotation turned on, this field is omitted.</p>
                */
            RotationRules?: RotationRulesType;
            /**
                * <p>The last date and time that Secrets Manager rotated the secret.
                *       If the secret isn't configured for rotation, Secrets Manager returns null.</p>
                */
            LastRotatedDate?: Date;
            /**
                * <p>The last date and time that this secret was modified in any way.</p>
                */
            LastChangedDate?: Date;
            /**
                * <p>The last date that the secret value was retrieved. This value does not include the time. This field is omitted if the secret has never been retrieved.</p>
                */
            LastAccessedDate?: Date;
            /**
                * <p>The date the secret is scheduled for deletion. If it is not scheduled for deletion, this
                *       field is omitted. When you delete a secret, Secrets Manager requires a
                *       recovery window of at least 7 days before deleting the secret. Some time after the deleted date,
                *       Secrets Manager deletes the secret, including all of its versions.</p>
                *          <p>If a secret is scheduled for deletion, then its details, including the encrypted secret
                *       value, is not accessible. To cancel a scheduled deletion and restore access to the secret, use <a>RestoreSecret</a>.</p>
                */
            DeletedDate?: Date;
            /**
                * <p>The list of tags attached to the secret. To add tags to a
                *       secret, use <a>TagResource</a>. To remove tags, use <a>UntagResource</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A list of the versions of the secret that have staging labels attached.
                *       Versions that don't have staging labels are considered deprecated and Secrets Manager
                *       can delete them.</p>
                *          <p>Secrets Manager uses staging labels to indicate the status of a secret version during rotation. The three
                *     staging labels for rotation are: </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>AWSCURRENT</code>, which indicates the current version of the secret.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWSPENDING</code>, which indicates the version of the secret that contains new
                *         secret information that will become the next current version when rotation finishes.</p>
                *                <p>During
                *           rotation, Secrets Manager creates an <code>AWSPENDING</code> version ID before creating the new secret version.
                *         To check if a secret version exists, call <a>GetSecretValue</a>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AWSPREVIOUS</code>, which indicates the previous current version of the secret.
                *       You can use this as the <i>last known good</i> version.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about rotation and staging labels, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html">How rotation works</a>.</p>
                */
            VersionIdsToStages?: Record<string, string[]>;
            /**
                * <p>The name of the service that created this secret.</p>
                */
            OwningService?: string;
            /**
                * <p>The date the secret was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The Region the secret is in. If a secret is replicated to other Regions, the replicas are listed in <code>ReplicationStatus</code>. </p>
                */
            PrimaryRegion?: string;
            /**
                * <p>A list of the replicas of this secret and their status: </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Failed</code>, which indicates that the replica was not created.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InProgress</code>, which indicates that Secrets Manager is in the process of creating the replica.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InSync</code>, which indicates that the replica was created.</p>
                *             </li>
                *          </ul>
                */
            ReplicationStatus?: ReplicationStatusType[];
    }
    export namespace DescribeSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSecretResponse) => any;
    }
    export type FilterNameStringType = "all" | "description" | "name" | "primary-region" | "tag-key" | "tag-value";
    /**
        * <p>Allows you to add filters when you use the search function in Secrets Manager. For more information, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_search-secret.html">Find secrets in Secrets Manager</a>.</p>
        */
    export interface Filter {
            /**
                * <p>The following are keys you can use:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>description</b>: Prefix match, not case-sensitive.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>name</b>: Prefix match, case-sensitive.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>tag-key</b>: Prefix match, case-sensitive.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>tag-value</b>: Prefix match, case-sensitive.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>primary-region</b>: Prefix match, case-sensitive.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>all</b>: Breaks the filter value string into words and then searches all attributes for matches. Not case-sensitive.</p>
                *             </li>
                *          </ul>
                */
            Key?: FilterNameStringType | string;
            /**
                * <p>The keyword to filter for.</p>
                *          <p>You can prefix your search value with an exclamation mark (<code>!</code>) in order to perform negation filters. </p>
                */
            Values?: string[];
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    export interface GetRandomPasswordRequest {
            /**
                * <p>The length of the password. If you don't include this parameter, the
                *       default length is 32 characters.</p>
                */
            PasswordLength?: number;
            /**
                * <p>A string of the characters that you don't want in the password.</p>
                */
            ExcludeCharacters?: string;
            /**
                * <p>Specifies whether to exclude numbers from the password. If you don't
                *       include this switch, the password can contain numbers.</p>
                */
            ExcludeNumbers?: boolean;
            /**
                * <p>Specifies whether to exclude the following punctuation characters from the password:
                *       <code>! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~</code>.
                *       If you don't include this switch, the password can contain punctuation.</p>
                */
            ExcludePunctuation?: boolean;
            /**
                * <p>Specifies whether to exclude uppercase letters from the password. If you
                *       don't include this switch, the password can contain uppercase letters.</p>
                */
            ExcludeUppercase?: boolean;
            /**
                * <p>Specifies whether to exclude lowercase letters from the password. If
                *       you don't include this switch, the password can contain lowercase letters.</p>
                */
            ExcludeLowercase?: boolean;
            /**
                * <p>Specifies whether to include the space character. If you
                *       include this switch, the password can contain space characters.</p>
                */
            IncludeSpace?: boolean;
            /**
                * <p>Specifies whether to include at least one upper and lowercase letter, one number, and one punctuation.
                *       If you don't include this switch, the password contains at least one of every character type.</p>
                */
            RequireEachIncludedType?: boolean;
    }
    export namespace GetRandomPasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRandomPasswordRequest) => any;
    }
    export interface GetRandomPasswordResponse {
            /**
                * <p>A string with the password.</p>
                */
            RandomPassword?: string;
    }
    export namespace GetRandomPasswordResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRandomPasswordResponse) => any;
    }
    export interface GetResourcePolicyRequest {
            /**
                * <p>The ARN or name of the secret to retrieve the attached resource-based policy for.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
    }
    export namespace GetResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyRequest) => any;
    }
    export interface GetResourcePolicyResponse {
            /**
                * <p>The ARN of the secret that the resource-based policy was retrieved for.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret that the resource-based policy was retrieved for.</p>
                */
            Name?: string;
            /**
                * <p>A JSON-formatted string that contains the permissions policy
                *       attached to the secret. For more information about permissions policies, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access.html">Authentication and access control for
                *         Secrets Manager</a>.</p>
                */
            ResourcePolicy?: string;
    }
    export namespace GetResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResourcePolicyResponse) => any;
    }
    export interface GetSecretValueRequest {
            /**
                * <p>The ARN or name of the secret to retrieve.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>The unique identifier of the version of the secret to retrieve. If
                *       you include both this parameter and <code>VersionStage</code>, the two parameters must refer
                *       to the same secret version. If you don't specify either a <code>VersionStage</code> or
                *         <code>VersionId</code>, then Secrets Manager returns the <code>AWSCURRENT</code> version.</p>
                *          <p>This value is typically a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a> value with
                *       32 hexadecimal digits.</p>
                */
            VersionId?: string;
            /**
                * <p>The staging label of the version of the secret to retrieve. </p>
                *          <p>Secrets Manager uses staging labels to keep track of different versions during the rotation process.
                *       If you include both this parameter and <code>VersionId</code>, the two parameters must refer
                *       to the same secret version. If you don't specify either a <code>VersionStage</code> or
                *       <code>VersionId</code>, Secrets Manager returns the <code>AWSCURRENT</code> version.</p>
                */
            VersionStage?: string;
    }
    export namespace GetSecretValueRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSecretValueRequest) => any;
    }
    export interface GetSecretValueResponse {
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The friendly name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The unique identifier of this version of the secret.</p>
                */
            VersionId?: string;
            /**
                * <p>The decrypted secret value, if the secret value was originally provided as
                *       binary data in the form of a byte array. The response parameter represents the binary data as
                *       a <a href="https://tools.ietf.org/html/rfc4648#section-4">base64-encoded</a>
                *       string.</p>
                *          <p>If the secret was created by using the Secrets Manager console, or if the secret value was
                *       originally provided as a string, then this field is omitted. The secret value appears in
                *       <code>SecretString</code> instead.</p>
                */
            SecretBinary?: Uint8Array;
            /**
                * <p>The decrypted secret value, if the secret value was originally provided as a string or
                *       through the Secrets Manager console.</p>
                *          <p>If this secret was created by using the console, then Secrets Manager stores the information as a
                *       JSON structure of key/value pairs. </p>
                */
            SecretString?: string;
            /**
                * <p>A list of all of the staging labels currently attached to this version of the
                *       secret.</p>
                */
            VersionStages?: string[];
            /**
                * <p>The date and time that this version of the secret was created. If you don't specify
                *       which version in <code>VersionId</code> or <code>VersionStage</code>, then Secrets Manager uses the
                *       <code>AWSCURRENT</code> version.</p>
                */
            CreatedDate?: Date;
    }
    export namespace GetSecretValueResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSecretValueResponse) => any;
    }
    /**
        * <p>The <code>NextToken</code> value is invalid.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export enum SortOrderType {
            asc = "asc",
            desc = "desc"
    }
    export interface ListSecretsRequest {
            /**
                * <p>The number of results to include in the response.</p>
                *          <p>If there are more results available, in the response, Secrets Manager includes <code>NextToken</code>.
                *       To get the next results, call <code>ListSecrets</code> again with the value from
                *       <code>NextToken</code>.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token that indicates where the output should continue from, if a
                *       previous call did not show all results. To get the next results, call <code>ListSecrets</code> again
                *       with this value.</p>
                */
            NextToken?: string;
            /**
                * <p>The filters to apply to the list of secrets.</p>
                */
            Filters?: Filter[];
            /**
                * <p>Lists secrets in the requested order. </p>
                */
            SortOrder?: SortOrderType | string;
    }
    export namespace ListSecretsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSecretsRequest) => any;
    }
    /**
        * <p>A structure that contains the details about a secret. It does not include the encrypted
        *         <code>SecretString</code> and <code>SecretBinary</code> values. To get those values, use
        *       <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html">GetSecretValue</a>
        *       .</p>
        */
    export interface SecretListEntry {
            /**
                * <p>The Amazon Resource Name (ARN) of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The friendly name of the secret. You can use forward slashes in the name to represent a
                *       path hierarchy. For example, <code>/prod/databases/dbserver1</code> could represent the secret
                *       for a server named <code>dbserver1</code> in the folder <code>databases</code> in the folder
                *       <code>prod</code>. </p>
                */
            Name?: string;
            /**
                * <p>The user-provided description of the secret.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the KMS key that Secrets Manager uses to encrypt the secret value. If the secret is encrypted with
                *       the Amazon Web Services managed key <code>aws/secretsmanager</code>, this field is omitted.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>Indicates whether automatic, scheduled rotation is enabled for this secret.</p>
                */
            RotationEnabled?: boolean;
            /**
                * <p>The ARN of an Amazon Web Services Lambda function invoked by Secrets Manager to rotate and expire the
                *       secret either automatically per the schedule or manually by a call to <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_RotateSecret.html">
                *                <code>RotateSecret</code>
                *             </a>.</p>
                */
            RotationLambdaARN?: string;
            /**
                * <p>A structure that defines the rotation configuration for the secret.</p>
                */
            RotationRules?: RotationRulesType;
            /**
                * <p>The most recent date and time that the Secrets Manager rotation process was successfully completed. This value is null if the secret hasn't ever rotated.</p>
                */
            LastRotatedDate?: Date;
            /**
                * <p>The last date and time that this secret was modified in any way.</p>
                */
            LastChangedDate?: Date;
            /**
                * <p>The last date that this secret was accessed. This value is truncated to midnight of the
                *       date and therefore shows only the date, not the time.</p>
                */
            LastAccessedDate?: Date;
            /**
                * <p>The date and time the deletion of the secret occurred. Not present on active secrets. The
                *       secret can be recovered until the number of days in the recovery window has passed, as
                *       specified in the <code>RecoveryWindowInDays</code> parameter of the <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_DeleteSecret.html">
                *                <code>DeleteSecret</code>
                *             </a> operation.</p>
                */
            DeletedDate?: Date;
            /**
                * <p>The list of user-defined tags associated with the secret. To add tags to a
                *       secret, use <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_TagResource.html">
                *                <code>TagResource</code>
                *             </a>.
                *       To remove tags, use <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_UntagResource.html">
                *                <code>UntagResource</code>
                *             </a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A list of all of the currently assigned <code>SecretVersionStage</code> staging labels and
                *       the <code>SecretVersionId</code> attached to each one. Staging labels are used to keep
                *       track of the different versions during the rotation process.</p>
                *          <note>
                *             <p>A version that does not have any <code>SecretVersionStage</code> is considered
                *         deprecated and subject to deletion. Such versions are not included in this list.</p>
                *          </note>
                */
            SecretVersionsToStages?: Record<string, string[]>;
            /**
                * <p>Returns the name of the service that created the secret.</p>
                */
            OwningService?: string;
            /**
                * <p>The date and time when a secret was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The Region where Secrets Manager originated the secret.</p>
                */
            PrimaryRegion?: string;
    }
    export namespace SecretListEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecretListEntry) => any;
    }
    export interface ListSecretsResponse {
            /**
                * <p>A list of the secrets in the account.</p>
                */
            SecretList?: SecretListEntry[];
            /**
                * <p>Secrets Manager includes this value if
                *       there's more output available than what is included in the current response. This can
                *       occur even when the response includes no values at all, such as when you ask for a filtered view
                *       of a long list. To get the next results, call <code>ListSecrets</code> again
                *       with this value.</p>
                */
            NextToken?: string;
    }
    export namespace ListSecretsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSecretsResponse) => any;
    }
    export interface ListSecretVersionIdsRequest {
            /**
                * <p>The ARN or name of the secret whose versions you want to list.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>The number of results to include in the response.</p>
                *          <p>If there are more results available, in the response, Secrets Manager includes <code>NextToken</code>.
                *       To get the next results, call <code>ListSecretVersionIds</code> again with the value from <code>NextToken</code>. </p>
                */
            MaxResults?: number;
            /**
                * <p>A token that indicates where the output should continue from, if a previous call
                *       did not show all results. To get the next results, call <code>ListSecretVersionIds</code> again with
                *       this value.</p>
                */
            NextToken?: string;
            /**
                * <p>Specifies whether to include versions of secrets that don't have any
                *       staging labels attached to them. Versions without staging labels are considered deprecated and are subject to
                *       deletion by Secrets Manager.</p>
                */
            IncludeDeprecated?: boolean;
    }
    export namespace ListSecretVersionIdsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSecretVersionIdsRequest) => any;
    }
    /**
        * <p>A structure that contains information about one version of a secret.</p>
        */
    export interface SecretVersionsListEntry {
            /**
                * <p>The unique version identifier of this version of the secret.</p>
                */
            VersionId?: string;
            /**
                * <p>An array of staging labels that are currently associated with this version of the
                *       secret.</p>
                */
            VersionStages?: string[];
            /**
                * <p>The date that this version of the secret was last accessed. Note that the resolution of
                *       this field is at the date level and does not include the time.</p>
                */
            LastAccessedDate?: Date;
            /**
                * <p>The date and time this version of the secret was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The KMS keys used to encrypt the secret version.</p>
                */
            KmsKeyIds?: string[];
    }
    export namespace SecretVersionsListEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SecretVersionsListEntry) => any;
    }
    export interface ListSecretVersionIdsResponse {
            /**
                * <p>A list of the versions of the secret.</p>
                */
            Versions?: SecretVersionsListEntry[];
            /**
                * <p>Secrets Manager includes this value if there's more output available than what is included
                *       in the current response. This can occur even when the response includes no values at all,
                *       such as when you ask for a filtered view of a long list. To get the next results,
                *       call <code>ListSecretVersionIds</code> again with this value. </p>
                */
            NextToken?: string;
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
    }
    export namespace ListSecretVersionIdsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSecretVersionIdsResponse) => any;
    }
    /**
        * <p>The <code>BlockPublicPolicy</code> parameter is set to true, and the resource policy did not prevent broad access to the secret.</p>
        */
    export class PublicPolicyException extends __BaseException {
            readonly name: "PublicPolicyException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PublicPolicyException, __BaseException>);
    }
    export interface PutResourcePolicyRequest {
            /**
                * <p>The ARN or name of the secret to attach the resource-based policy.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>A JSON-formatted string for an Amazon Web Services
                *       resource-based policy. For example policies, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html">Permissions
                *         policy examples</a>.</p>
                */
            ResourcePolicy: string | undefined;
            /**
                * <p>Specifies whether to block resource-based policies that allow broad access to the secret, for example those that use a wildcard for the principal.</p>
                */
            BlockPublicPolicy?: boolean;
    }
    export namespace PutResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyRequest) => any;
    }
    export interface PutResourcePolicyResponse {
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
    }
    export namespace PutResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyResponse) => any;
    }
    export interface PutSecretValueRequest {
            /**
                * <p>The ARN or name of the secret to add a new version to.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                *          <p>If the secret doesn't already exist, use <code>CreateSecret</code> instead.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>A unique identifier for the new version of the secret. </p>
                *          <note>
                *             <p>If you use the Amazon Web Services CLI or one of the Amazon Web Services SDKs to call this operation, then you can
                *         leave this parameter empty because they generate a random UUID for you. If you don't
                *         use the SDK and instead generate a raw HTTP request to the
                *         Secrets Manager service endpoint, then you must generate a <code>ClientRequestToken</code> yourself
                *         for new versions and include that value in the request. </p>
                *          </note>
                *          <p>This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental
                *       creation of duplicate versions if there are failures and retries during the Lambda rotation
                *       function processing. We recommend that you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a> value to
                *       ensure uniqueness within the specified secret. </p>
                *          <ul>
                *             <li>
                *                <p>If the <code>ClientRequestToken</code> value isn't already associated with a version
                *           of the secret then a new version of the secret is created. </p>
                *             </li>
                *             <li>
                *                <p>If a version with this value already exists and that version's
                *           <code>SecretString</code> or <code>SecretBinary</code> values are the same as those in
                *           the request then the request is ignored. The operation is idempotent. </p>
                *             </li>
                *             <li>
                *                <p>If a version with this value already exists and the version of the
                *           <code>SecretString</code> and <code>SecretBinary</code> values are different from those
                *           in the request, then the request fails because you can't modify a secret
                *           version. You can only create new versions to store new secret values.</p>
                *             </li>
                *          </ul>
                *          <p>This value becomes the <code>VersionId</code> of the new version.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The binary data to encrypt and store in the new version of
                *       the secret. To use this parameter in the command-line tools, we recommend that you store your
                *       binary data in a file and then pass the
                *       contents of the file as a parameter. </p>
                *          <p>You must include <code>SecretBinary</code> or <code>SecretString</code>, but not both.</p>
                *          <p>You can't access this value from the Secrets Manager console.</p>
                */
            SecretBinary?: Uint8Array;
            /**
                * <p>The text to encrypt and store in the new version of the secret. </p>
                *          <p>You must include <code>SecretBinary</code> or <code>SecretString</code>, but not both.</p>
                *          <p>We recommend you create the secret string as JSON key/value pairs, as shown in the example.</p>
                */
            SecretString?: string;
            /**
                * <p>A list of staging labels to attach to this version of the
                *       secret. Secrets Manager uses staging labels to track versions of a secret through the rotation process.</p>
                *          <p>If you specify a staging
                *       label that's already associated with a different version of the same secret, then Secrets Manager
                *       removes the label from the other version and attaches it to this version.
                *       If you specify
                *       <code>AWSCURRENT</code>, and it is already attached to another version, then Secrets Manager also
                *       moves the staging label <code>AWSPREVIOUS</code> to the version that <code>AWSCURRENT</code> was removed from.</p>
                *          <p>If you don't include <code>VersionStages</code>, then Secrets Manager automatically
                *       moves the staging label <code>AWSCURRENT</code> to this version.</p>
                */
            VersionStages?: string[];
    }
    export namespace PutSecretValueRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSecretValueRequest) => any;
    }
    export interface PutSecretValueResponse {
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The unique identifier of the version of the secret.</p>
                */
            VersionId?: string;
            /**
                * <p>The list of staging labels that are currently attached to this version of the secret.
                *       Secrets Manager uses staging labels to track a version as it progresses through the secret rotation
                *       process.</p>
                */
            VersionStages?: string[];
    }
    export namespace PutSecretValueResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSecretValueResponse) => any;
    }
    export interface RemoveRegionsFromReplicationRequest {
            /**
                * <p>The ARN or name of the secret.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>The Regions of the replicas to remove.</p>
                */
            RemoveReplicaRegions: string[] | undefined;
    }
    export namespace RemoveRegionsFromReplicationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveRegionsFromReplicationRequest) => any;
    }
    export interface RemoveRegionsFromReplicationResponse {
            /**
                * <p>The ARN of the primary secret.</p>
                */
            ARN?: string;
            /**
                * <p>The status of replicas for this secret after you remove Regions.</p>
                */
            ReplicationStatus?: ReplicationStatusType[];
    }
    export namespace RemoveRegionsFromReplicationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveRegionsFromReplicationResponse) => any;
    }
    export interface ReplicateSecretToRegionsRequest {
            /**
                * <p>The ARN or name of the secret to replicate.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>A list of Regions in which to replicate the secret.</p>
                */
            AddReplicaRegions: ReplicaRegionType[] | undefined;
            /**
                * <p>Specifies whether to overwrite a secret with the same name in the destination Region.</p>
                */
            ForceOverwriteReplicaSecret?: boolean;
    }
    export namespace ReplicateSecretToRegionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicateSecretToRegionsRequest) => any;
    }
    export interface ReplicateSecretToRegionsResponse {
            /**
                * <p>The ARN of the primary secret.</p>
                */
            ARN?: string;
            /**
                * <p>The status of replication.</p>
                */
            ReplicationStatus?: ReplicationStatusType[];
    }
    export namespace ReplicateSecretToRegionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReplicateSecretToRegionsResponse) => any;
    }
    export interface RestoreSecretRequest {
            /**
                * <p>The ARN or name of the secret to restore.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
    }
    export namespace RestoreSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreSecretRequest) => any;
    }
    export interface RestoreSecretResponse {
            /**
                * <p>The ARN of the secret that was restored.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret that was restored.</p>
                */
            Name?: string;
    }
    export namespace RestoreSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreSecretResponse) => any;
    }
    export interface RotateSecretRequest {
            /**
                * <p>The ARN or name of the secret to rotate.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>A unique identifier for the new version of the secret that helps
                *     ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if
                *     there are failures and retries during rotation. This value becomes the
                *     <code>VersionId</code> of the new version.</p>
                *          <p>If you use the Amazon Web Services CLI or one of the Amazon Web Services SDK to call this operation, then you can
                *     leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that
                *     in the request for this parameter. If you don't use the SDK and instead generate a raw HTTP
                *     request to the Secrets Manager service endpoint, then you must generate a
                *     <code>ClientRequestToken</code> yourself for new versions and include that value in the
                *     request.</p>
                *          <p>You only need to specify this value if you implement your own retry logic and you want to
                *     ensure that Secrets Manager doesn't attempt to create a secret version twice. We recommend that you generate a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID-type</a> value to
                *     ensure uniqueness within the specified secret. </p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The ARN of the Lambda rotation function that can rotate the secret.</p>
                */
            RotationLambdaARN?: string;
            /**
                * <p>A structure that defines the rotation configuration for this secret.</p>
                */
            RotationRules?: RotationRulesType;
            /**
                * <p>Specifies whether to rotate the secret immediately or wait until the next scheduled rotation window.
                *     The rotation schedule is defined in <a>RotateSecretRequest$RotationRules</a>.</p>
                *          <p>If you don't immediately rotate the secret, Secrets Manager tests the rotation configuration by running the
                *     <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_how.html">
                *                <code>testSecret</code>
                *       step</a> of the Lambda rotation function. The test creates an <code>AWSPENDING</code> version of the secret and then removes it.</p>
                *          <p>If you don't specify this value, then by default, Secrets Manager rotates the secret immediately.</p>
                */
            RotateImmediately?: boolean;
    }
    export namespace RotateSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateSecretRequest) => any;
    }
    export interface RotateSecretResponse {
            /**
                * <p>The ARN of the secret.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret.</p>
                */
            Name?: string;
            /**
                * <p>The ID of the new version of the secret.</p>
                */
            VersionId?: string;
    }
    export namespace RotateSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateSecretResponse) => any;
    }
    export interface StopReplicationToReplicaRequest {
            /**
                * <p>The ARN of the primary secret. </p>
                */
            SecretId: string | undefined;
    }
    export namespace StopReplicationToReplicaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopReplicationToReplicaRequest) => any;
    }
    export interface StopReplicationToReplicaResponse {
            /**
                * <p>The ARN of the promoted secret. The ARN is the same as the original primary secret except the Region is changed.</p>
                */
            ARN?: string;
    }
    export namespace StopReplicationToReplicaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopReplicationToReplicaResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The identifier for the secret to attach tags to. You can specify either the
                *       Amazon Resource Name (ARN) or the friendly name of the secret.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>The tags to attach to the secret as a JSON text string argument. Each element in the list consists of a <code>Key</code>
                *       and a <code>Value</code>.</p>
                *
                *          <p>For storing multiple values, we recommend that you use a JSON text
                *     string argument and specify key/value pairs. For more information, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters.html">Specifying parameter values for the Amazon Web Services CLI</a>
                *     in the Amazon Web Services CLI User Guide.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN or name of the secret.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>A list of tag key names to remove from the secret. You don't specify the value. Both the
                *       key and its associated value are removed.</p>
                *          <p>This parameter requires a JSON text string argument.</p>
                *          <p>For storing multiple values, we recommend that you use a JSON text
                *     string argument and specify key/value pairs. For more information, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters.html">Specifying parameter values for the Amazon Web Services CLI</a>
                *     in the Amazon Web Services CLI User Guide.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UpdateSecretRequest {
            /**
                * <p>The ARN or name of the secret.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>If you include <code>SecretString</code> or <code>SecretBinary</code>, then Secrets Manager creates
                *     a new version for the secret, and this parameter specifies the unique identifier for the new
                *     version.</p>
                *          <note>
                *             <p>If you use the Amazon Web Services CLI or one of the Amazon Web Services SDKs to call this operation, then you can
                *         leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it
                *         as the value for this parameter in the request. If you don't use the SDK and instead
                *         generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a
                *         <code>ClientRequestToken</code> yourself for the new version and include the value in the
                *         request.</p>
                *          </note>
                *          <p>This value becomes the <code>VersionId</code> of the new version.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The description of the secret.</p>
                */
            Description?: string;
            /**
                * <p>The ARN, key ID, or alias of the KMS key that Secrets Manager
                *       uses to encrypt new secret versions as well as any existing versions the staging labels
                *       <code>AWSCURRENT</code>, <code>AWSPENDING</code>, or <code>AWSPREVIOUS</code>.
                *       For more information about versions and staging labels, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/getting-started.html#term_version">Concepts: Version</a>.</p>
                *          <important>
                *             <p>You can only use the Amazon Web Services managed key <code>aws/secretsmanager</code> if you call this
                *         operation using credentials from the same Amazon Web Services account that owns the secret. If the secret is in
                *         a different account, then you must use a customer managed key and provide the ARN of that KMS key in
                *         this field. The user making the call must have permissions to both the secret and the KMS key in
                *         their respective accounts.</p>
                *          </important>
                */
            KmsKeyId?: string;
            /**
                * <p>The binary data to encrypt and store in the new
                *       version of the secret. We recommend that you
                *       store your binary data in a file and then pass
                *       the contents of the file as a parameter. </p>
                *          <p>Either <code>SecretBinary</code> or
                *         <code>SecretString</code> must have a value, but not both.</p>
                *          <p>You can't access this parameter in the Secrets Manager console.</p>
                */
            SecretBinary?: Uint8Array;
            /**
                * <p>The text data to encrypt and store in the new
                *       version of the secret. We recommend you use a JSON structure of key/value pairs for your secret value. </p>
                *          <p>Either <code>SecretBinary</code> or <code>SecretString</code> must have
                *       a value, but not both. </p>
                */
            SecretString?: string;
    }
    export namespace UpdateSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecretRequest) => any;
    }
    export interface UpdateSecretResponse {
            /**
                * <p>The ARN of the secret that was updated.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret that was updated.</p>
                */
            Name?: string;
            /**
                * <p>If Secrets Manager created a new version of the secret during this operation, then <code>VersionId</code>
                *       contains the unique identifier of the new version.</p>
                */
            VersionId?: string;
    }
    export namespace UpdateSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecretResponse) => any;
    }
    export interface UpdateSecretVersionStageRequest {
            /**
                * <p>The ARN or the name of the secret with the version and staging labelsto modify.</p>
                *          <p>For an ARN, we recommend that you specify a complete ARN rather
                *       than a partial ARN. See <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/troubleshoot.html#ARN_secretnamehyphen">Finding a secret from a partial ARN</a>.</p>
                */
            SecretId: string | undefined;
            /**
                * <p>The staging label to add to this version.</p>
                */
            VersionStage: string | undefined;
            /**
                * <p>The ID of the version that the staging label is to be removed
                *       from. If the staging label you are trying to attach to one version is already attached to a
                *       different version, then you must include this parameter and specify the version that the label
                *       is to be removed from. If the label is attached and you either do not specify this parameter,
                *       or the version ID does not match, then the operation fails.</p>
                */
            RemoveFromVersionId?: string;
            /**
                * <p>The ID of the version to add the staging label to. To
                *       remove a label from a version, then do not specify this parameter.</p>
                *          <p>If the staging label is already attached to a different version of the secret, then you
                *       must also specify the <code>RemoveFromVersionId</code> parameter. </p>
                */
            MoveToVersionId?: string;
    }
    export namespace UpdateSecretVersionStageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecretVersionStageRequest) => any;
    }
    export interface UpdateSecretVersionStageResponse {
            /**
                * <p>The ARN of the secret that was updated.</p>
                */
            ARN?: string;
            /**
                * <p>The name of the secret that was updated.</p>
                */
            Name?: string;
    }
    export namespace UpdateSecretVersionStageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecretVersionStageResponse) => any;
    }
    export interface ValidateResourcePolicyRequest {
            /**
                * <p>This field is reserved for internal use.</p>
                */
            SecretId?: string;
            /**
                * <p>A JSON-formatted string that contains an Amazon Web Services
                *       resource-based policy. The policy in the string identifies who can access or manage this
                *       secret and its versions. For example policies, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples.html">Permissions policy examples</a>.</p>
                */
            ResourcePolicy: string | undefined;
    }
    export namespace ValidateResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidateResourcePolicyRequest) => any;
    }
    /**
        * <p>Displays errors that occurred during validation of the resource policy.</p>
        */
    export interface ValidationErrorsEntry {
            /**
                * <p>Checks the name of the policy.</p>
                */
            CheckName?: string;
            /**
                * <p>Displays error messages if validation encounters problems during validation of the resource policy.</p>
                */
            ErrorMessage?: string;
    }
    export namespace ValidationErrorsEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationErrorsEntry) => any;
    }
    export interface ValidateResourcePolicyResponse {
            /**
                * <p>True if your policy passes validation, otherwise false.</p>
                */
            PolicyValidationPassed?: boolean;
            /**
                * <p>Validation errors if your policy didn't pass validation.</p>
                */
            ValidationErrors?: ValidationErrorsEntry[];
    }
    export namespace ValidateResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidateResourcePolicyResponse) => any;
    }
}

declare module '@aws-sdk/client-secrets-manager/node_modules/@aws-sdk/client-secrets-manager/dist-types/models/SecretsManagerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SecretsManager service.
        */
    export class SecretsManagerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

