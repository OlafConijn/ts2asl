// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-signer' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddProfilePermissionCommandInput, AddProfilePermissionCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/AddProfilePermissionCommand";
    import { CancelSigningProfileCommandInput, CancelSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/CancelSigningProfileCommand";
    import { DescribeSigningJobCommandInput, DescribeSigningJobCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/DescribeSigningJobCommand";
    import { GetSigningPlatformCommandInput, GetSigningPlatformCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/GetSigningPlatformCommand";
    import { GetSigningProfileCommandInput, GetSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/GetSigningProfileCommand";
    import { ListProfilePermissionsCommandInput, ListProfilePermissionsCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListProfilePermissionsCommand";
    import { ListSigningJobsCommandInput, ListSigningJobsCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningJobsCommand";
    import { ListSigningPlatformsCommandInput, ListSigningPlatformsCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningPlatformsCommand";
    import { ListSigningProfilesCommandInput, ListSigningProfilesCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningProfilesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListTagsForResourceCommand";
    import { PutSigningProfileCommandInput, PutSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/PutSigningProfileCommand";
    import { RemoveProfilePermissionCommandInput, RemoveProfilePermissionCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RemoveProfilePermissionCommand";
    import { RevokeSignatureCommandInput, RevokeSignatureCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RevokeSignatureCommand";
    import { RevokeSigningProfileCommandInput, RevokeSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RevokeSigningProfileCommand";
    import { StartSigningJobCommandInput, StartSigningJobCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/StartSigningJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/UntagResourceCommand";
    import { SignerClient } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    /**
        * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and
        * 			integrity of your code. </p>
        * 		       <p>AWS Signer supports the following applications:</p>
        *
        * 		       <p>With <i>code signing for AWS Lambda</i>, you can sign AWS Lambda
        * 			deployment packages. Integrated support is provided for Amazon S3, Amazon CloudWatch,
        * 			and AWS CloudTrail. In order to sign code, you create a signing profile and then use
        * 			Signer to sign Lambda zip files in S3. </p>
        *
        * 		       <p>With <i>code signing for IoT</i>, you can sign code for any IoT device that is
        * 			supported by AWS. IoT code signing is available for <a href="http://docs.aws.amazon.com/freertos/latest/userguide/">Amazon FreeRTOS</a> and <a href="http://docs.aws.amazon.com/iot/latest/developerguide/">AWS IoT Device Management</a>, and is
        * 			integrated with <a href="http://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager (ACM)</a>. In order to sign
        * 			code, you import a third-party code signing certificate using ACM, and use that to
        * 			sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p>
        * 		       <p>For more information about AWS Signer, see the <a href="http://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html">AWS Signer Developer Guide</a>.</p>
        *
        * 		       <p></p>
        */
    export class Signer extends SignerClient {
            /**
                * <p>Adds cross-account permissions to a signing profile.</p>
                */
            addProfilePermission(args: AddProfilePermissionCommandInput, options?: __HttpHandlerOptions): Promise<AddProfilePermissionCommandOutput>;
            addProfilePermission(args: AddProfilePermissionCommandInput, cb: (err: any, data?: AddProfilePermissionCommandOutput) => void): void;
            addProfilePermission(args: AddProfilePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddProfilePermissionCommandOutput) => void): void;
            /**
                * <p>Changes the state of an <code>ACTIVE</code> signing profile to <code>CANCELED</code>.
                * 			A canceled profile is still viewable with the <code>ListSigningProfiles</code>
                * 			operation, but it cannot perform new signing jobs, and is deleted two years after
                * 			cancelation.</p>
                */
            cancelSigningProfile(args: CancelSigningProfileCommandInput, options?: __HttpHandlerOptions): Promise<CancelSigningProfileCommandOutput>;
            cancelSigningProfile(args: CancelSigningProfileCommandInput, cb: (err: any, data?: CancelSigningProfileCommandOutput) => void): void;
            cancelSigningProfile(args: CancelSigningProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelSigningProfileCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific code signing job. You specify the job by using
                * 			the <code>jobId</code> value that is returned by the <a>StartSigningJob</a>
                * 			operation. </p>
                */
            describeSigningJob(args: DescribeSigningJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSigningJobCommandOutput>;
            describeSigningJob(args: DescribeSigningJobCommandInput, cb: (err: any, data?: DescribeSigningJobCommandOutput) => void): void;
            describeSigningJob(args: DescribeSigningJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSigningJobCommandOutput) => void): void;
            /**
                * <p>Returns information on a specific signing platform.</p>
                */
            getSigningPlatform(args: GetSigningPlatformCommandInput, options?: __HttpHandlerOptions): Promise<GetSigningPlatformCommandOutput>;
            getSigningPlatform(args: GetSigningPlatformCommandInput, cb: (err: any, data?: GetSigningPlatformCommandOutput) => void): void;
            getSigningPlatform(args: GetSigningPlatformCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSigningPlatformCommandOutput) => void): void;
            /**
                * <p>Returns information on a specific signing profile.</p>
                */
            getSigningProfile(args: GetSigningProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetSigningProfileCommandOutput>;
            getSigningProfile(args: GetSigningProfileCommandInput, cb: (err: any, data?: GetSigningProfileCommandOutput) => void): void;
            getSigningProfile(args: GetSigningProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSigningProfileCommandOutput) => void): void;
            /**
                * <p>Lists the cross-account permissions associated with a signing profile.</p>
                */
            listProfilePermissions(args: ListProfilePermissionsCommandInput, options?: __HttpHandlerOptions): Promise<ListProfilePermissionsCommandOutput>;
            listProfilePermissions(args: ListProfilePermissionsCommandInput, cb: (err: any, data?: ListProfilePermissionsCommandOutput) => void): void;
            listProfilePermissions(args: ListProfilePermissionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProfilePermissionsCommandOutput) => void): void;
            /**
                * <p>Lists all your signing jobs. You can use the <code>maxResults</code> parameter to
                * 			limit the number of signing jobs that are returned in the response. If additional jobs
                * 			remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in
                * 			subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can
                * 			continue calling <code>ListSigningJobs</code> with your <code>maxResults</code>
                * 			parameter and with new values that code signing returns in the <code>nextToken</code>
                * 			parameter until all of your signing jobs have been returned. </p>
                */
            listSigningJobs(args: ListSigningJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListSigningJobsCommandOutput>;
            listSigningJobs(args: ListSigningJobsCommandInput, cb: (err: any, data?: ListSigningJobsCommandOutput) => void): void;
            listSigningJobs(args: ListSigningJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSigningJobsCommandOutput) => void): void;
            /**
                * <p>Lists all signing platforms available in code signing that match the request parameters. If
                * 			additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use
                * 			this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining
                * 			values. You can continue calling <code>ListSigningJobs</code> with your
                * 				<code>maxResults</code> parameter and with new values that code signing returns in the
                * 				<code>nextToken</code> parameter until all of your signing jobs have been
                * 			returned.</p>
                */
            listSigningPlatforms(args: ListSigningPlatformsCommandInput, options?: __HttpHandlerOptions): Promise<ListSigningPlatformsCommandOutput>;
            listSigningPlatforms(args: ListSigningPlatformsCommandInput, cb: (err: any, data?: ListSigningPlatformsCommandOutput) => void): void;
            listSigningPlatforms(args: ListSigningPlatformsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSigningPlatformsCommandOutput) => void): void;
            /**
                * <p>Lists all available signing profiles in your AWS account. Returns only profiles with
                * 			an <code>ACTIVE</code> status unless the <code>includeCanceled</code> request field is
                * 			set to <code>true</code>. If additional jobs remain to be listed, code signing returns a
                * 				<code>nextToken</code> value. Use this value in subsequent calls to
                * 				<code>ListSigningJobs</code> to fetch the remaining values. You can continue calling
                * 				<code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with
                * 			new values that code signing returns in the <code>nextToken</code> parameter until all of your
                * 			signing jobs have been returned.</p>
                */
            listSigningProfiles(args: ListSigningProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListSigningProfilesCommandOutput>;
            listSigningProfiles(args: ListSigningProfilesCommandInput, cb: (err: any, data?: ListSigningProfilesCommandOutput) => void): void;
            listSigningProfiles(args: ListSigningProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSigningProfilesCommandOutput) => void): void;
            /**
                * <p>Returns a list of the tags associated with a signing profile resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates a signing profile. A signing profile is a code signing template that can be used to
                * 			carry out a pre-defined signing job. For more information, see <a href="http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html">http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html</a>
                *          </p>
                */
            putSigningProfile(args: PutSigningProfileCommandInput, options?: __HttpHandlerOptions): Promise<PutSigningProfileCommandOutput>;
            putSigningProfile(args: PutSigningProfileCommandInput, cb: (err: any, data?: PutSigningProfileCommandOutput) => void): void;
            putSigningProfile(args: PutSigningProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutSigningProfileCommandOutput) => void): void;
            /**
                * <p>Removes cross-account permissions from a signing profile.</p>
                */
            removeProfilePermission(args: RemoveProfilePermissionCommandInput, options?: __HttpHandlerOptions): Promise<RemoveProfilePermissionCommandOutput>;
            removeProfilePermission(args: RemoveProfilePermissionCommandInput, cb: (err: any, data?: RemoveProfilePermissionCommandOutput) => void): void;
            removeProfilePermission(args: RemoveProfilePermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveProfilePermissionCommandOutput) => void): void;
            /**
                * <p>Changes the state of a signing job to REVOKED. This indicates that the signature is no
                * 			longer valid.</p>
                */
            revokeSignature(args: RevokeSignatureCommandInput, options?: __HttpHandlerOptions): Promise<RevokeSignatureCommandOutput>;
            revokeSignature(args: RevokeSignatureCommandInput, cb: (err: any, data?: RevokeSignatureCommandOutput) => void): void;
            revokeSignature(args: RevokeSignatureCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RevokeSignatureCommandOutput) => void): void;
            /**
                * <p>Changes the state of a signing profile to REVOKED. This indicates that signatures
                * 			generated using the signing profile after an effective start date are no longer
                * 			valid.</p>
                */
            revokeSigningProfile(args: RevokeSigningProfileCommandInput, options?: __HttpHandlerOptions): Promise<RevokeSigningProfileCommandOutput>;
            revokeSigningProfile(args: RevokeSigningProfileCommandInput, cb: (err: any, data?: RevokeSigningProfileCommandOutput) => void): void;
            revokeSigningProfile(args: RevokeSigningProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RevokeSigningProfileCommandOutput) => void): void;
            /**
                * <p>Initiates a signing job to be performed on the code provided. Signing jobs are
                * 			viewable by the <code>ListSigningJobs</code> operation for two years after they are
                * 			performed. Note the following requirements: </p>
                * 		       <ul>
                *             <li>
                * 				           <p> You must create an Amazon S3 source bucket. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">Create a Bucket</a> in the
                * 						<i>Amazon S3 Getting Started Guide</i>. </p>
                * 			         </li>
                *             <li>
                * 				           <p>Your S3 source bucket must be version enabled.</p>
                * 			         </li>
                *             <li>
                * 				           <p>You must create an S3 destination bucket. Code signing uses your S3 destination
                * 					bucket to write your signed code.</p>
                * 			         </li>
                *             <li>
                * 				           <p>You specify the name of the source and destination buckets when calling the
                * 						<code>StartSigningJob</code> operation.</p>
                * 			         </li>
                *             <li>
                * 				           <p>You must also specify a request token that identifies your request to
                * 					code signing.</p>
                * 			         </li>
                *          </ul>
                * 		       <p>You can call the <a>DescribeSigningJob</a> and the <a>ListSigningJobs</a> actions after you call
                * 			<code>StartSigningJob</code>.</p>
                * 		       <p>For a Java example that shows how to use this action, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/">http://docs.aws.amazon.com/acm/latest/userguide/</a>
                *          </p>
                */
            startSigningJob(args: StartSigningJobCommandInput, options?: __HttpHandlerOptions): Promise<StartSigningJobCommandOutput>;
            startSigningJob(args: StartSigningJobCommandInput, cb: (err: any, data?: StartSigningJobCommandOutput) => void): void;
            startSigningJob(args: StartSigningJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSigningJobCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to a signing profile. Tags are labels that you can use to
                * 			identify and organize your AWS resources. Each tag consists of a key and an optional
                * 			value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify
                * 			the tag, use a key-value pair.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from a signing profile. To remove the tags, specify a list of
                * 			tag keys.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/AddProfilePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddProfilePermissionRequest, AddProfilePermissionResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface AddProfilePermissionCommandInput extends AddProfilePermissionRequest {
    }
    export interface AddProfilePermissionCommandOutput extends AddProfilePermissionResponse, __MetadataBearer {
    }
    /**
        * <p>Adds cross-account permissions to a signing profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, AddProfilePermissionCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, AddProfilePermissionCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new AddProfilePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddProfilePermissionCommandInput} for command's `input` shape.
        * @see {@link AddProfilePermissionCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class AddProfilePermissionCommand extends $Command<AddProfilePermissionCommandInput, AddProfilePermissionCommandOutput, SignerClientResolvedConfig> {
            readonly input: AddProfilePermissionCommandInput;
            constructor(input: AddProfilePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddProfilePermissionCommandInput, AddProfilePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/CancelSigningProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelSigningProfileRequest } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface CancelSigningProfileCommandInput extends CancelSigningProfileRequest {
    }
    export interface CancelSigningProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the state of an <code>ACTIVE</code> signing profile to <code>CANCELED</code>.
        * 			A canceled profile is still viewable with the <code>ListSigningProfiles</code>
        * 			operation, but it cannot perform new signing jobs, and is deleted two years after
        * 			cancelation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, CancelSigningProfileCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, CancelSigningProfileCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new CancelSigningProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelSigningProfileCommandInput} for command's `input` shape.
        * @see {@link CancelSigningProfileCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class CancelSigningProfileCommand extends $Command<CancelSigningProfileCommandInput, CancelSigningProfileCommandOutput, SignerClientResolvedConfig> {
            readonly input: CancelSigningProfileCommandInput;
            constructor(input: CancelSigningProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelSigningProfileCommandInput, CancelSigningProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/DescribeSigningJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSigningJobRequest, DescribeSigningJobResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface DescribeSigningJobCommandInput extends DescribeSigningJobRequest {
    }
    export interface DescribeSigningJobCommandOutput extends DescribeSigningJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific code signing job. You specify the job by using
        * 			the <code>jobId</code> value that is returned by the <a>StartSigningJob</a>
        * 			operation. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, DescribeSigningJobCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, DescribeSigningJobCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new DescribeSigningJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSigningJobCommandInput} for command's `input` shape.
        * @see {@link DescribeSigningJobCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class DescribeSigningJobCommand extends $Command<DescribeSigningJobCommandInput, DescribeSigningJobCommandOutput, SignerClientResolvedConfig> {
            readonly input: DescribeSigningJobCommandInput;
            constructor(input: DescribeSigningJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSigningJobCommandInput, DescribeSigningJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/GetSigningPlatformCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSigningPlatformRequest, GetSigningPlatformResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface GetSigningPlatformCommandInput extends GetSigningPlatformRequest {
    }
    export interface GetSigningPlatformCommandOutput extends GetSigningPlatformResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information on a specific signing platform.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, GetSigningPlatformCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, GetSigningPlatformCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new GetSigningPlatformCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSigningPlatformCommandInput} for command's `input` shape.
        * @see {@link GetSigningPlatformCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class GetSigningPlatformCommand extends $Command<GetSigningPlatformCommandInput, GetSigningPlatformCommandOutput, SignerClientResolvedConfig> {
            readonly input: GetSigningPlatformCommandInput;
            constructor(input: GetSigningPlatformCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSigningPlatformCommandInput, GetSigningPlatformCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/GetSigningProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSigningProfileRequest, GetSigningProfileResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface GetSigningProfileCommandInput extends GetSigningProfileRequest {
    }
    export interface GetSigningProfileCommandOutput extends GetSigningProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information on a specific signing profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, GetSigningProfileCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, GetSigningProfileCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new GetSigningProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSigningProfileCommandInput} for command's `input` shape.
        * @see {@link GetSigningProfileCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class GetSigningProfileCommand extends $Command<GetSigningProfileCommandInput, GetSigningProfileCommandOutput, SignerClientResolvedConfig> {
            readonly input: GetSigningProfileCommandInput;
            constructor(input: GetSigningProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSigningProfileCommandInput, GetSigningProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListProfilePermissionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListProfilePermissionsRequest, ListProfilePermissionsResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface ListProfilePermissionsCommandInput extends ListProfilePermissionsRequest {
    }
    export interface ListProfilePermissionsCommandOutput extends ListProfilePermissionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the cross-account permissions associated with a signing profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, ListProfilePermissionsCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, ListProfilePermissionsCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new ListProfilePermissionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProfilePermissionsCommandInput} for command's `input` shape.
        * @see {@link ListProfilePermissionsCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class ListProfilePermissionsCommand extends $Command<ListProfilePermissionsCommandInput, ListProfilePermissionsCommandOutput, SignerClientResolvedConfig> {
            readonly input: ListProfilePermissionsCommandInput;
            constructor(input: ListProfilePermissionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProfilePermissionsCommandInput, ListProfilePermissionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSigningJobsRequest, ListSigningJobsResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface ListSigningJobsCommandInput extends ListSigningJobsRequest {
    }
    export interface ListSigningJobsCommandOutput extends ListSigningJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all your signing jobs. You can use the <code>maxResults</code> parameter to
        * 			limit the number of signing jobs that are returned in the response. If additional jobs
        * 			remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in
        * 			subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can
        * 			continue calling <code>ListSigningJobs</code> with your <code>maxResults</code>
        * 			parameter and with new values that code signing returns in the <code>nextToken</code>
        * 			parameter until all of your signing jobs have been returned. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, ListSigningJobsCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, ListSigningJobsCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new ListSigningJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSigningJobsCommandInput} for command's `input` shape.
        * @see {@link ListSigningJobsCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class ListSigningJobsCommand extends $Command<ListSigningJobsCommandInput, ListSigningJobsCommandOutput, SignerClientResolvedConfig> {
            readonly input: ListSigningJobsCommandInput;
            constructor(input: ListSigningJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSigningJobsCommandInput, ListSigningJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningPlatformsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSigningPlatformsRequest, ListSigningPlatformsResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface ListSigningPlatformsCommandInput extends ListSigningPlatformsRequest {
    }
    export interface ListSigningPlatformsCommandOutput extends ListSigningPlatformsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all signing platforms available in code signing that match the request parameters. If
        * 			additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use
        * 			this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining
        * 			values. You can continue calling <code>ListSigningJobs</code> with your
        * 				<code>maxResults</code> parameter and with new values that code signing returns in the
        * 				<code>nextToken</code> parameter until all of your signing jobs have been
        * 			returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, ListSigningPlatformsCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, ListSigningPlatformsCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new ListSigningPlatformsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSigningPlatformsCommandInput} for command's `input` shape.
        * @see {@link ListSigningPlatformsCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class ListSigningPlatformsCommand extends $Command<ListSigningPlatformsCommandInput, ListSigningPlatformsCommandOutput, SignerClientResolvedConfig> {
            readonly input: ListSigningPlatformsCommandInput;
            constructor(input: ListSigningPlatformsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSigningPlatformsCommandInput, ListSigningPlatformsCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSigningProfilesRequest, ListSigningProfilesResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface ListSigningProfilesCommandInput extends ListSigningProfilesRequest {
    }
    export interface ListSigningProfilesCommandOutput extends ListSigningProfilesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all available signing profiles in your AWS account. Returns only profiles with
        * 			an <code>ACTIVE</code> status unless the <code>includeCanceled</code> request field is
        * 			set to <code>true</code>. If additional jobs remain to be listed, code signing returns a
        * 				<code>nextToken</code> value. Use this value in subsequent calls to
        * 				<code>ListSigningJobs</code> to fetch the remaining values. You can continue calling
        * 				<code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with
        * 			new values that code signing returns in the <code>nextToken</code> parameter until all of your
        * 			signing jobs have been returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, ListSigningProfilesCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, ListSigningProfilesCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new ListSigningProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSigningProfilesCommandInput} for command's `input` shape.
        * @see {@link ListSigningProfilesCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class ListSigningProfilesCommand extends $Command<ListSigningProfilesCommandInput, ListSigningProfilesCommandOutput, SignerClientResolvedConfig> {
            readonly input: ListSigningProfilesCommandInput;
            constructor(input: ListSigningProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSigningProfilesCommandInput, ListSigningProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the tags associated with a signing profile resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, ListTagsForResourceCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, ListTagsForResourceCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, SignerClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/PutSigningProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutSigningProfileRequest, PutSigningProfileResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface PutSigningProfileCommandInput extends PutSigningProfileRequest {
    }
    export interface PutSigningProfileCommandOutput extends PutSigningProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a signing profile. A signing profile is a code signing template that can be used to
        * 			carry out a pre-defined signing job. For more information, see <a href="http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html">http://docs.aws.amazon.com/signer/latest/developerguide/gs-profile.html</a>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, PutSigningProfileCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, PutSigningProfileCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new PutSigningProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutSigningProfileCommandInput} for command's `input` shape.
        * @see {@link PutSigningProfileCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class PutSigningProfileCommand extends $Command<PutSigningProfileCommandInput, PutSigningProfileCommandOutput, SignerClientResolvedConfig> {
            readonly input: PutSigningProfileCommandInput;
            constructor(input: PutSigningProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutSigningProfileCommandInput, PutSigningProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RemoveProfilePermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveProfilePermissionRequest, RemoveProfilePermissionResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface RemoveProfilePermissionCommandInput extends RemoveProfilePermissionRequest {
    }
    export interface RemoveProfilePermissionCommandOutput extends RemoveProfilePermissionResponse, __MetadataBearer {
    }
    /**
        * <p>Removes cross-account permissions from a signing profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, RemoveProfilePermissionCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, RemoveProfilePermissionCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new RemoveProfilePermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveProfilePermissionCommandInput} for command's `input` shape.
        * @see {@link RemoveProfilePermissionCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class RemoveProfilePermissionCommand extends $Command<RemoveProfilePermissionCommandInput, RemoveProfilePermissionCommandOutput, SignerClientResolvedConfig> {
            readonly input: RemoveProfilePermissionCommandInput;
            constructor(input: RemoveProfilePermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveProfilePermissionCommandInput, RemoveProfilePermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RevokeSignatureCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RevokeSignatureRequest } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface RevokeSignatureCommandInput extends RevokeSignatureRequest {
    }
    export interface RevokeSignatureCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the state of a signing job to REVOKED. This indicates that the signature is no
        * 			longer valid.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, RevokeSignatureCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, RevokeSignatureCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new RevokeSignatureCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RevokeSignatureCommandInput} for command's `input` shape.
        * @see {@link RevokeSignatureCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class RevokeSignatureCommand extends $Command<RevokeSignatureCommandInput, RevokeSignatureCommandOutput, SignerClientResolvedConfig> {
            readonly input: RevokeSignatureCommandInput;
            constructor(input: RevokeSignatureCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RevokeSignatureCommandInput, RevokeSignatureCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RevokeSigningProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RevokeSigningProfileRequest } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface RevokeSigningProfileCommandInput extends RevokeSigningProfileRequest {
    }
    export interface RevokeSigningProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the state of a signing profile to REVOKED. This indicates that signatures
        * 			generated using the signing profile after an effective start date are no longer
        * 			valid.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, RevokeSigningProfileCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, RevokeSigningProfileCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new RevokeSigningProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RevokeSigningProfileCommandInput} for command's `input` shape.
        * @see {@link RevokeSigningProfileCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class RevokeSigningProfileCommand extends $Command<RevokeSigningProfileCommandInput, RevokeSigningProfileCommandOutput, SignerClientResolvedConfig> {
            readonly input: RevokeSigningProfileCommandInput;
            constructor(input: RevokeSigningProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RevokeSigningProfileCommandInput, RevokeSigningProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/StartSigningJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartSigningJobRequest, StartSigningJobResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface StartSigningJobCommandInput extends StartSigningJobRequest {
    }
    export interface StartSigningJobCommandOutput extends StartSigningJobResponse, __MetadataBearer {
    }
    /**
        * <p>Initiates a signing job to be performed on the code provided. Signing jobs are
        * 			viewable by the <code>ListSigningJobs</code> operation for two years after they are
        * 			performed. Note the following requirements: </p>
        * 		       <ul>
        *             <li>
        * 				           <p> You must create an Amazon S3 source bucket. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">Create a Bucket</a> in the
        * 						<i>Amazon S3 Getting Started Guide</i>. </p>
        * 			         </li>
        *             <li>
        * 				           <p>Your S3 source bucket must be version enabled.</p>
        * 			         </li>
        *             <li>
        * 				           <p>You must create an S3 destination bucket. Code signing uses your S3 destination
        * 					bucket to write your signed code.</p>
        * 			         </li>
        *             <li>
        * 				           <p>You specify the name of the source and destination buckets when calling the
        * 						<code>StartSigningJob</code> operation.</p>
        * 			         </li>
        *             <li>
        * 				           <p>You must also specify a request token that identifies your request to
        * 					code signing.</p>
        * 			         </li>
        *          </ul>
        * 		       <p>You can call the <a>DescribeSigningJob</a> and the <a>ListSigningJobs</a> actions after you call
        * 			<code>StartSigningJob</code>.</p>
        * 		       <p>For a Java example that shows how to use this action, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/">http://docs.aws.amazon.com/acm/latest/userguide/</a>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, StartSigningJobCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, StartSigningJobCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new StartSigningJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSigningJobCommandInput} for command's `input` shape.
        * @see {@link StartSigningJobCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class StartSigningJobCommand extends $Command<StartSigningJobCommandInput, StartSigningJobCommandOutput, SignerClientResolvedConfig> {
            readonly input: StartSigningJobCommandInput;
            constructor(input: StartSigningJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSigningJobCommandInput, StartSigningJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to a signing profile. Tags are labels that you can use to
        * 			identify and organize your AWS resources. Each tag consists of a key and an optional
        * 			value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify
        * 			the tag, use a key-value pair.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, TagResourceCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, TagResourceCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, SignerClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from a signing profile. To remove the tags, specify a list of
        * 			tag keys.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SignerClient, UntagResourceCommand } from "@aws-sdk/client-signer"; // ES Modules import
        * // const { SignerClient, UntagResourceCommand } = require("@aws-sdk/client-signer"); // CommonJS import
        * const client = new SignerClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link SignerClientResolvedConfig | config} for SignerClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, SignerClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SignerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/SignerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddProfilePermissionCommandInput, AddProfilePermissionCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/AddProfilePermissionCommand";
    import { CancelSigningProfileCommandInput, CancelSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/CancelSigningProfileCommand";
    import { DescribeSigningJobCommandInput, DescribeSigningJobCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/DescribeSigningJobCommand";
    import { GetSigningPlatformCommandInput, GetSigningPlatformCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/GetSigningPlatformCommand";
    import { GetSigningProfileCommandInput, GetSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/GetSigningProfileCommand";
    import { ListProfilePermissionsCommandInput, ListProfilePermissionsCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListProfilePermissionsCommand";
    import { ListSigningJobsCommandInput, ListSigningJobsCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningJobsCommand";
    import { ListSigningPlatformsCommandInput, ListSigningPlatformsCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningPlatformsCommand";
    import { ListSigningProfilesCommandInput, ListSigningProfilesCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListSigningProfilesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/ListTagsForResourceCommand";
    import { PutSigningProfileCommandInput, PutSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/PutSigningProfileCommand";
    import { RemoveProfilePermissionCommandInput, RemoveProfilePermissionCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RemoveProfilePermissionCommand";
    import { RevokeSignatureCommandInput, RevokeSignatureCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RevokeSignatureCommand";
    import { RevokeSigningProfileCommandInput, RevokeSigningProfileCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/RevokeSigningProfileCommand";
    import { StartSigningJobCommandInput, StartSigningJobCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/StartSigningJobCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/commands/UntagResourceCommand";
    export type ServiceInputTypes = AddProfilePermissionCommandInput | CancelSigningProfileCommandInput | DescribeSigningJobCommandInput | GetSigningPlatformCommandInput | GetSigningProfileCommandInput | ListProfilePermissionsCommandInput | ListSigningJobsCommandInput | ListSigningPlatformsCommandInput | ListSigningProfilesCommandInput | ListTagsForResourceCommandInput | PutSigningProfileCommandInput | RemoveProfilePermissionCommandInput | RevokeSignatureCommandInput | RevokeSigningProfileCommandInput | StartSigningJobCommandInput | TagResourceCommandInput | UntagResourceCommandInput;
    export type ServiceOutputTypes = AddProfilePermissionCommandOutput | CancelSigningProfileCommandOutput | DescribeSigningJobCommandOutput | GetSigningPlatformCommandOutput | GetSigningProfileCommandOutput | ListProfilePermissionsCommandOutput | ListSigningJobsCommandOutput | ListSigningPlatformsCommandOutput | ListSigningProfilesCommandOutput | ListTagsForResourceCommandOutput | PutSigningProfileCommandOutput | RemoveProfilePermissionCommandOutput | RevokeSignatureCommandOutput | RevokeSigningProfileCommandOutput | StartSigningJobCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SignerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SignerClient class constructor that set the region, credentials and other options.
        */
    export interface SignerClientConfig extends SignerClientConfigType {
    }
    type SignerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SignerClient class. This is resolved and normalized from the {@link SignerClientConfig | constructor configuration interface}.
        */
    export interface SignerClientResolvedConfig extends SignerClientResolvedConfigType {
    }
    /**
        * <p>AWS Signer is a fully managed code signing service to help you ensure the trust and
        * 			integrity of your code. </p>
        * 		       <p>AWS Signer supports the following applications:</p>
        *
        * 		       <p>With <i>code signing for AWS Lambda</i>, you can sign AWS Lambda
        * 			deployment packages. Integrated support is provided for Amazon S3, Amazon CloudWatch,
        * 			and AWS CloudTrail. In order to sign code, you create a signing profile and then use
        * 			Signer to sign Lambda zip files in S3. </p>
        *
        * 		       <p>With <i>code signing for IoT</i>, you can sign code for any IoT device that is
        * 			supported by AWS. IoT code signing is available for <a href="http://docs.aws.amazon.com/freertos/latest/userguide/">Amazon FreeRTOS</a> and <a href="http://docs.aws.amazon.com/iot/latest/developerguide/">AWS IoT Device Management</a>, and is
        * 			integrated with <a href="http://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager (ACM)</a>. In order to sign
        * 			code, you import a third-party code signing certificate using ACM, and use that to
        * 			sign updates in Amazon FreeRTOS and AWS IoT Device Management. </p>
        * 		       <p>For more information about AWS Signer, see the <a href="http://docs.aws.amazon.com/signer/latest/developerguide/Welcome.html">AWS Signer Developer Guide</a>.</p>
        *
        * 		       <p></p>
        */
    export class SignerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SignerClientResolvedConfig> {
            /**
                * The resolved configuration of SignerClient class. This is resolved and normalized from the {@link SignerClientConfig | constructor configuration interface}.
                */
            readonly config: SignerClientResolvedConfig;
            constructor(configuration: SignerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SignerServiceException as __BaseException } from "@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/SignerServiceException";
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export interface AddProfilePermissionRequest {
            /**
                * <p>The human-readable name of the signing profile.</p>
                */
            profileName: string | undefined;
            /**
                * <p>The version of the signing profile.</p>
                */
            profileVersion?: string;
            /**
                * <p>The AWS Signer action permitted as part of cross-account permissions.</p>
                */
            action: string | undefined;
            /**
                * <p>The AWS principal receiving cross-account permissions. This may be an IAM role or
                * 			another AWS account ID.</p>
                */
            principal: string | undefined;
            /**
                * <p>A unique identifier for the current profile revision.</p>
                */
            revisionId?: string;
            /**
                * <p>A unique identifier for the cross-account permission statement.</p>
                */
            statementId: string | undefined;
    }
    export namespace AddProfilePermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddProfilePermissionRequest) => any;
    }
    export interface AddProfilePermissionResponse {
            /**
                * <p>A unique identifier for the current profile revision.</p>
                */
            revisionId?: string;
    }
    export namespace AddProfilePermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddProfilePermissionResponse) => any;
    }
    /**
        * <p>The resource encountered a conflicting state.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>An internal error occurred.</p>
        */
    export class InternalServiceErrorException extends __BaseException {
            readonly name: "InternalServiceErrorException";
            readonly $fault: "server";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceErrorException, __BaseException>);
    }
    /**
        * <p>A specified resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The client is making a request that exceeds service limits.</p>
        */
    export class ServiceLimitExceededException extends __BaseException {
            readonly name: "ServiceLimitExceededException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceLimitExceededException, __BaseException>);
    }
    /**
        * <p>The allowed number of job-signing requests has been exceeded.</p>
        * 		       <p>This error supersedes the error <code>ThrottlingException</code>.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>You signing certificate could not be validated.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>The request contains invalid parameters for the ARN or tags. This exception also
        * 			occurs when you call a tagging API on a cancelled signing profile.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    export interface CancelSigningProfileRequest {
            /**
                * <p>The name of the signing profile to be canceled.</p>
                */
            profileName: string | undefined;
    }
    export namespace CancelSigningProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelSigningProfileRequest) => any;
    }
    export type Category = "AWSIoT";
    export interface DescribeSigningJobRequest {
            /**
                * <p>The ID of the signing job on input.</p>
                */
            jobId: string | undefined;
    }
    export namespace DescribeSigningJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSigningJobRequest) => any;
    }
    export type EncryptionAlgorithm = "ECDSA" | "RSA";
    export type HashAlgorithm = "SHA1" | "SHA256";
    /**
        * <p>A signing configuration that overrides the default encryption or hash algorithm of a
        * 			signing job.</p>
        */
    export interface SigningConfigurationOverrides {
            /**
                * <p>A specified override of the default encryption algorithm that is used in a code signing
                * 			job.</p>
                */
            encryptionAlgorithm?: EncryptionAlgorithm | string;
            /**
                * <p>A specified override of the default hash algorithm that is used in a code signing
                * 			job.</p>
                */
            hashAlgorithm?: HashAlgorithm | string;
    }
    export namespace SigningConfigurationOverrides {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningConfigurationOverrides) => any;
    }
    export type ImageFormat = "JSON" | "JSONDetached" | "JSONEmbedded";
    /**
        * <p>Any overrides that are applied to the signing configuration of a code signing
        * 			platform.</p>
        */
    export interface SigningPlatformOverrides {
            /**
                * <p>A signing configuration that overrides the default encryption or hash algorithm of a
                * 			signing job.</p>
                */
            signingConfiguration?: SigningConfigurationOverrides;
            /**
                * <p>A signed image is a JSON object. When overriding the default signing platform
                * 			configuration, a customer can select either of two signing formats,
                * 				<code>JSONEmbedded</code> or <code>JSONDetached</code>. (A third format value,
                * 				<code>JSON</code>, is reserved for future use.) With <code>JSONEmbedded</code>, the
                * 			signing image has the payload embedded in it. With <code>JSONDetached</code>, the
                * 			payload is not be embedded in the signing image.</p>
                */
            signingImageFormat?: ImageFormat | string;
    }
    export namespace SigningPlatformOverrides {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningPlatformOverrides) => any;
    }
    /**
        * <p>Revocation information for a signing job.</p>
        */
    export interface SigningJobRevocationRecord {
            /**
                * <p>A caller-supplied reason for revocation.</p>
                */
            reason?: string;
            /**
                * <p>The time of revocation.</p>
                */
            revokedAt?: Date;
            /**
                * <p>The identity of the revoker.</p>
                */
            revokedBy?: string;
    }
    export namespace SigningJobRevocationRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningJobRevocationRecord) => any;
    }
    /**
        * <p>The S3 bucket name and key where code signing saved your signed code image.</p>
        */
    export interface S3SignedObject {
            /**
                * <p>Name of the S3 bucket.</p>
                */
            bucketName?: string;
            /**
                * <p>Key name that uniquely identifies a signed code image in your bucket.</p>
                */
            key?: string;
    }
    export namespace S3SignedObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3SignedObject) => any;
    }
    /**
        * <p>Points to an <code>S3SignedObject</code> object that contains information about your
        * 			signed code image.</p>
        */
    export interface SignedObject {
            /**
                * <p>The <code>S3SignedObject</code>.</p>
                */
            s3?: S3SignedObject;
    }
    export namespace SignedObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SignedObject) => any;
    }
    /**
        * <p>The ACM certificate that is used to sign your code.</p>
        */
    export interface SigningMaterial {
            /**
                * <p>The Amazon Resource Name (ARN) of the certificates that is used to sign your
                * 			code.</p>
                */
            certificateArn: string | undefined;
    }
    export namespace SigningMaterial {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningMaterial) => any;
    }
    /**
        * <p>Information about the S3 bucket where you saved your unsigned code.</p>
        */
    export interface S3Source {
            /**
                * <p>Name of the S3 bucket.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>Key name of the bucket object that contains your unsigned code.</p>
                */
            key: string | undefined;
            /**
                * <p>Version of your source image in your version enabled S3 bucket.</p>
                */
            version: string | undefined;
    }
    export namespace S3Source {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Source) => any;
    }
    /**
        * <p>An <code>S3Source</code> object that contains information about the S3 bucket where
        * 			you saved your unsigned code.</p>
        */
    export interface Source {
            /**
                * <p>The <code>S3Source</code> object.</p>
                */
            s3?: S3Source;
    }
    export namespace Source {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Source) => any;
    }
    export type SigningStatus = "Failed" | "InProgress" | "Succeeded";
    export interface DescribeSigningJobResponse {
            /**
                * <p>The ID of the signing job on output.</p>
                */
            jobId?: string;
            /**
                * <p>The object that contains the name of your S3 bucket or your raw code.</p>
                */
            source?: Source;
            /**
                * <p>The Amazon Resource Name (ARN) of your code signing certificate.</p>
                */
            signingMaterial?: SigningMaterial;
            /**
                * <p>The microcontroller platform to which your signed code image will be
                * 			distributed.</p>
                */
            platformId?: string;
            /**
                * <p>A human-readable name for the signing platform associated with the signing job.</p>
                */
            platformDisplayName?: string;
            /**
                * <p>The name of the profile that initiated the signing operation.</p>
                */
            profileName?: string;
            /**
                * <p>The version of the signing profile used to initiate the signing job.</p>
                */
            profileVersion?: string;
            /**
                * <p>A list of any overrides that were applied to the signing operation.</p>
                */
            overrides?: SigningPlatformOverrides;
            /**
                * <p>Map of user-assigned key-value pairs used during signing. These values contain any
                * 			information that you specified for use in your signing job. </p>
                */
            signingParameters?: Record<string, string>;
            /**
                * <p>Date and time that the signing job was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>Date and time that the signing job was completed.</p>
                */
            completedAt?: Date;
            /**
                * <p>Thr expiration timestamp for the signature generated by the signing job.</p>
                */
            signatureExpiresAt?: Date;
            /**
                * <p>The IAM principal that requested the signing job.</p>
                */
            requestedBy?: string;
            /**
                * <p>Status of the signing job.</p>
                */
            status?: SigningStatus | string;
            /**
                * <p>String value that contains the status reason.</p>
                */
            statusReason?: string;
            /**
                * <p>A revocation record if the signature generated by the signing job has been revoked.
                * 			Contains a timestamp and the ID of the IAM entity that revoked the signature.</p>
                */
            revocationRecord?: SigningJobRevocationRecord;
            /**
                * <p>Name of the S3 bucket where the signed code image is saved by code signing.</p>
                */
            signedObject?: SignedObject;
            /**
                * <p>The AWS account ID of the job owner.</p>
                */
            jobOwner?: string;
            /**
                * <p>The IAM entity that initiated the signing job.</p>
                */
            jobInvoker?: string;
    }
    export namespace DescribeSigningJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSigningJobResponse) => any;
    }
    /**
        * <p>The name and prefix of the S3 bucket where code signing saves your signed objects.</p>
        */
    export interface S3Destination {
            /**
                * <p>Name of the S3 bucket.</p>
                */
            bucketName?: string;
            /**
                * <p>An Amazon S3 prefix that you can use to limit responses to those that begin with the
                * 			specified prefix.</p>
                */
            prefix?: string;
    }
    export namespace S3Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Destination) => any;
    }
    /**
        * <p>Points to an <code>S3Destination</code> object that contains information about your S3
        * 			bucket.</p>
        */
    export interface Destination {
            /**
                * <p>The <code>S3Destination</code> object.</p>
                */
            s3?: S3Destination;
    }
    export namespace Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Destination) => any;
    }
    /**
        * <p>The encryption algorithm options that are available to a code signing job.</p>
        */
    export interface EncryptionAlgorithmOptions {
            /**
                * <p>The set of accepted encryption algorithms that are allowed in a code signing job.</p>
                */
            allowedValues: (EncryptionAlgorithm | string)[] | undefined;
            /**
                * <p>The default encryption algorithm that is used by a code signing job.</p>
                */
            defaultValue: EncryptionAlgorithm | string | undefined;
    }
    export namespace EncryptionAlgorithmOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionAlgorithmOptions) => any;
    }
    export interface GetSigningPlatformRequest {
            /**
                * <p>The ID of the target signing platform.</p>
                */
            platformId: string | undefined;
    }
    export namespace GetSigningPlatformRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSigningPlatformRequest) => any;
    }
    /**
        * <p>The hash algorithms that are available to a code signing job.</p>
        */
    export interface HashAlgorithmOptions {
            /**
                * <p>The set of accepted hash algorithms allowed in a code signing job.</p>
                */
            allowedValues: (HashAlgorithm | string)[] | undefined;
            /**
                * <p>The default hash algorithm that is used in a code signing job.</p>
                */
            defaultValue: HashAlgorithm | string | undefined;
    }
    export namespace HashAlgorithmOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HashAlgorithmOptions) => any;
    }
    /**
        * <p>The configuration of a code signing operation.</p>
        */
    export interface SigningConfiguration {
            /**
                * <p>The encryption algorithm options that are available for a code signing job.</p>
                */
            encryptionAlgorithmOptions: EncryptionAlgorithmOptions | undefined;
            /**
                * <p>The hash algorithm options that are available for a code signing job.</p>
                */
            hashAlgorithmOptions: HashAlgorithmOptions | undefined;
    }
    export namespace SigningConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningConfiguration) => any;
    }
    /**
        * <p>The image format of a code signing platform or profile.</p>
        */
    export interface SigningImageFormat {
            /**
                * <p>The supported formats of a code signing image.</p>
                */
            supportedFormats: (ImageFormat | string)[] | undefined;
            /**
                * <p>The default format of a code signing image.</p>
                */
            defaultFormat: ImageFormat | string | undefined;
    }
    export namespace SigningImageFormat {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningImageFormat) => any;
    }
    export interface GetSigningPlatformResponse {
            /**
                * <p>The ID of the target signing platform.</p>
                */
            platformId?: string;
            /**
                * <p>The display name of the target signing platform.</p>
                */
            displayName?: string;
            /**
                * <p>A list of partner entities that use the target signing platform.</p>
                */
            partner?: string;
            /**
                * <p>The validation template that is used by the target signing platform.</p>
                */
            target?: string;
            /**
                * <p>The category type of the target signing platform.</p>
                */
            category?: Category | string;
            /**
                * <p>A list of configurations applied to the target platform at signing.</p>
                */
            signingConfiguration?: SigningConfiguration;
            /**
                * <p>The format of the target platform's signing image.</p>
                */
            signingImageFormat?: SigningImageFormat;
            /**
                * <p>The maximum size (in MB) of the payload that can be signed by the target
                * 			platform.</p>
                */
            maxSizeInMB?: number;
            /**
                * <p>A flag indicating whether signatures generated for the signing platform can be
                * 			revoked.</p>
                */
            revocationSupported?: boolean;
    }
    export namespace GetSigningPlatformResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSigningPlatformResponse) => any;
    }
    export interface GetSigningProfileRequest {
            /**
                * <p>The name of the target signing profile.</p>
                */
            profileName: string | undefined;
            /**
                * <p>The AWS account ID of the profile owner.</p>
                */
            profileOwner?: string;
    }
    export namespace GetSigningProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSigningProfileRequest) => any;
    }
    /**
        * <p>Revocation information for a signing profile.</p>
        */
    export interface SigningProfileRevocationRecord {
            /**
                * <p>The time when revocation becomes effective.</p>
                */
            revocationEffectiveFrom?: Date;
            /**
                * <p>The time when the signing profile was revoked.</p>
                */
            revokedAt?: Date;
            /**
                * <p>The identity of the revoker.</p>
                */
            revokedBy?: string;
    }
    export namespace SigningProfileRevocationRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningProfileRevocationRecord) => any;
    }
    export type ValidityType = "DAYS" | "MONTHS" | "YEARS";
    /**
        * <p>The validity period for a signing job.</p>
        */
    export interface SignatureValidityPeriod {
            /**
                * <p>The numerical value of the time unit for signature validity.</p>
                */
            value?: number;
            /**
                * <p>The time unit for signature
                * 			validity.</p>
                */
            type?: ValidityType | string;
    }
    export namespace SignatureValidityPeriod {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SignatureValidityPeriod) => any;
    }
    export type SigningProfileStatus = "Active" | "Canceled" | "Revoked";
    export interface GetSigningProfileResponse {
            /**
                * <p>The name of the target signing profile.</p>
                */
            profileName?: string;
            /**
                * <p>The current version of the signing profile.</p>
                */
            profileVersion?: string;
            /**
                * <p>The signing profile ARN, including the profile version.</p>
                */
            profileVersionArn?: string;
            /**
                * <p>Revocation information for a signing profile.</p>
                */
            revocationRecord?: SigningProfileRevocationRecord;
            /**
                * <p>The ARN of the certificate that the target profile uses for signing operations.</p>
                */
            signingMaterial?: SigningMaterial;
            /**
                * <p>The ID of the platform that is used by the target signing profile.</p>
                */
            platformId?: string;
            /**
                * <p>A human-readable name for the signing platform associated with the signing
                * 			profile.</p>
                */
            platformDisplayName?: string;
            /**
                * <p>The validity period for a signing job.</p>
                */
            signatureValidityPeriod?: SignatureValidityPeriod;
            /**
                * <p>A list of overrides applied by the target signing profile for signing
                * 			operations.</p>
                */
            overrides?: SigningPlatformOverrides;
            /**
                * <p>A map of key-value pairs for signing operations that is attached to the target signing
                * 			profile.</p>
                */
            signingParameters?: Record<string, string>;
            /**
                * <p>The status of the target signing profile.</p>
                */
            status?: SigningProfileStatus | string;
            /**
                * <p>Reason for the status of the target signing profile.</p>
                */
            statusReason?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the signing profile.</p>
                */
            arn?: string;
            /**
                * <p>A list of tags associated with the signing profile.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace GetSigningProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSigningProfileResponse) => any;
    }
    export interface ListProfilePermissionsRequest {
            /**
                * <p>Name of the signing profile containing the cross-account permissions.</p>
                */
            profileName: string | undefined;
            /**
                * <p>String for specifying the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListProfilePermissionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProfilePermissionsRequest) => any;
    }
    /**
        * <p>A cross-account permission for a signing profile.</p>
        */
    export interface Permission {
            /**
                * <p>An AWS Signer action permitted as part of cross-account permissions.</p>
                */
            action?: string;
            /**
                * <p>The AWS principal that has been granted a cross-account permission.</p>
                */
            principal?: string;
            /**
                * <p>A unique identifier for a cross-account permission statement.</p>
                */
            statementId?: string;
            /**
                * <p>The signing profile version that a permission applies to.</p>
                */
            profileVersion?: string;
    }
    export namespace Permission {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Permission) => any;
    }
    export interface ListProfilePermissionsResponse {
            /**
                * <p>The identifier for the current revision of profile permissions.</p>
                */
            revisionId?: string;
            /**
                * <p>Total size of the policy associated with the Signing Profile in bytes.</p>
                */
            policySizeBytes?: number;
            /**
                * <p>List of permissions associated with the Signing Profile.</p>
                */
            permissions?: Permission[];
            /**
                * <p>String for specifying the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListProfilePermissionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProfilePermissionsResponse) => any;
    }
    export interface ListSigningJobsRequest {
            /**
                * <p>A status value with which to filter your results.</p>
                */
            status?: SigningStatus | string;
            /**
                * <p>The ID of microcontroller platform that you specified for the distribution of your
                * 			code image.</p>
                */
            platformId?: string;
            /**
                * <p>The IAM principal that requested the signing job.</p>
                */
            requestedBy?: string;
            /**
                * <p>Specifies the maximum number of items to return in the response. Use this parameter
                * 			when paginating results. If additional items exist beyond the number you specify, the
                * 				<code>nextToken</code> element is set in the response. Use the
                * 				<code>nextToken</code> value in a subsequent request to retrieve additional items.
                * 		</p>
                */
            maxResults?: number;
            /**
                * <p>String for specifying the next set of paginated results to return. After you receive a
                * 			response with truncated results, use this parameter in a subsequent request. Set it to
                * 			the value of <code>nextToken</code> from the response that you just received.</p>
                */
            nextToken?: string;
            /**
                * <p>Filters results to return only signing jobs with revoked signatures.</p>
                */
            isRevoked?: boolean;
            /**
                * <p>Filters results to return only signing jobs with signatures expiring before a
                * 			specified timestamp.</p>
                */
            signatureExpiresBefore?: Date;
            /**
                * <p>Filters results to return only signing jobs with signatures expiring after a specified
                * 			timestamp.</p>
                */
            signatureExpiresAfter?: Date;
            /**
                * <p>Filters results to return only signing jobs initiated by a specified IAM
                * 			entity.</p>
                */
            jobInvoker?: string;
    }
    export namespace ListSigningJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningJobsRequest) => any;
    }
    /**
        * <p>Contains information about a signing job.</p>
        */
    export interface SigningJob {
            /**
                * <p>The ID of the signing job.</p>
                */
            jobId?: string;
            /**
                * <p>A <code>Source</code> that contains information about a signing job's code image
                * 			source.</p>
                */
            source?: Source;
            /**
                * <p>A <code>SignedObject</code> structure that contains information about a signing job's
                * 			signed code image.</p>
                */
            signedObject?: SignedObject;
            /**
                * <p>A <code>SigningMaterial</code> object that contains the Amazon Resource Name (ARN) of
                * 			the certificate used for the signing job.</p>
                */
            signingMaterial?: SigningMaterial;
            /**
                * <p>The date and time that the signing job was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The status of the signing job.</p>
                */
            status?: SigningStatus | string;
            /**
                * <p>Indicates whether the signing job is revoked.</p>
                */
            isRevoked?: boolean;
            /**
                * <p>The name of the signing profile that created a signing job.</p>
                */
            profileName?: string;
            /**
                * <p>The version of the signing profile that created a signing job.</p>
                */
            profileVersion?: string;
            /**
                * <p>The unique identifier for a signing platform.</p>
                */
            platformId?: string;
            /**
                * <p>The name of a signing platform.</p>
                */
            platformDisplayName?: string;
            /**
                * <p>The time when the signature of a signing job expires.</p>
                */
            signatureExpiresAt?: Date;
            /**
                * <p>The AWS account ID of the job owner.</p>
                */
            jobOwner?: string;
            /**
                * <p>The AWS account ID of the job invoker.</p>
                */
            jobInvoker?: string;
    }
    export namespace SigningJob {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningJob) => any;
    }
    export interface ListSigningJobsResponse {
            /**
                * <p>A list of your signing jobs.</p>
                */
            jobs?: SigningJob[];
            /**
                * <p>String for specifying the next set of paginated results.</p>
                */
            nextToken?: string;
    }
    export namespace ListSigningJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningJobsResponse) => any;
    }
    export interface ListSigningPlatformsRequest {
            /**
                * <p>The category type of a signing platform.</p>
                */
            category?: string;
            /**
                * <p>Any partner entities connected to a signing platform.</p>
                */
            partner?: string;
            /**
                * <p>The validation template that is used by the target signing platform.</p>
                */
            target?: string;
            /**
                * <p>The maximum number of results to be returned by this operation.</p>
                */
            maxResults?: number;
            /**
                * <p>Value for specifying the next set of paginated results to return. After you receive a
                * 			response with truncated results, use this parameter in a subsequent request. Set it to
                * 			the value of <code>nextToken</code> from the response that you just received.</p>
                */
            nextToken?: string;
    }
    export namespace ListSigningPlatformsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningPlatformsRequest) => any;
    }
    /**
        * <p>Contains information about the signing configurations and parameters that are used to
        * 			perform a code signing job.</p>
        */
    export interface SigningPlatform {
            /**
                * <p>The ID of a code signing; platform.</p>
                */
            platformId?: string;
            /**
                * <p>The display name of a code signing platform.</p>
                */
            displayName?: string;
            /**
                * <p>Any partner entities linked to a code signing platform.</p>
                */
            partner?: string;
            /**
                * <p>The types of targets that can be signed by a code signing platform.</p>
                */
            target?: string;
            /**
                * <p>The category of a code signing platform.</p>
                */
            category?: Category | string;
            /**
                * <p>The configuration of a code signing platform. This includes the designated hash algorithm
                * 			and encryption algorithm of a signing platform.</p>
                */
            signingConfiguration?: SigningConfiguration;
            /**
                * <p>The image format of a code signing platform or profile.</p>
                */
            signingImageFormat?: SigningImageFormat;
            /**
                * <p>The maximum size (in MB) of code that can be signed by a code signing platform.</p>
                */
            maxSizeInMB?: number;
            /**
                * <p>Indicates whether revocation is supported for the platform.</p>
                */
            revocationSupported?: boolean;
    }
    export namespace SigningPlatform {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningPlatform) => any;
    }
    export interface ListSigningPlatformsResponse {
            /**
                * <p>A list of all platforms that match the request parameters.</p>
                */
            platforms?: SigningPlatform[];
            /**
                * <p>Value for specifying the next set of paginated results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListSigningPlatformsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningPlatformsResponse) => any;
    }
    export interface ListSigningProfilesRequest {
            /**
                * <p>Designates whether to include profiles with the status of
                * 			<code>CANCELED</code>.</p>
                */
            includeCanceled?: boolean;
            /**
                * <p>The maximum number of profiles to be returned.</p>
                */
            maxResults?: number;
            /**
                * <p>Value for specifying the next set of paginated results to return. After you receive a
                * 			response with truncated results, use this parameter in a subsequent request. Set it to
                * 			the value of <code>nextToken</code> from the response that you just received.</p>
                */
            nextToken?: string;
            /**
                * <p>Filters results to return only signing jobs initiated for a specified signing
                * 			platform.</p>
                */
            platformId?: string;
            /**
                * <p>Filters results to return only signing jobs with statuses in the specified
                * 			list.</p>
                */
            statuses?: (SigningProfileStatus | string)[];
    }
    export namespace ListSigningProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningProfilesRequest) => any;
    }
    /**
        * <p>Contains information about the ACM certificates and code signing configuration parameters
        * 			that can be used by a given code signing user.</p>
        */
    export interface SigningProfile {
            /**
                * <p>The name of the signing profile.</p>
                */
            profileName?: string;
            /**
                * <p>The version of a signing profile.</p>
                */
            profileVersion?: string;
            /**
                * <p>The ARN of a signing profile, including the profile version.</p>
                */
            profileVersionArn?: string;
            /**
                * <p>The ACM certificate that is available for use by a signing profile.</p>
                */
            signingMaterial?: SigningMaterial;
            /**
                * <p>The validity period for a signing job created using this signing profile.</p>
                */
            signatureValidityPeriod?: SignatureValidityPeriod;
            /**
                * <p>The ID of a platform that is available for use by a signing profile.</p>
                */
            platformId?: string;
            /**
                * <p>The name of the signing platform.</p>
                */
            platformDisplayName?: string;
            /**
                * <p>The parameters that are available for use by a code signing user.</p>
                */
            signingParameters?: Record<string, string>;
            /**
                * <p>The status of a code signing profile.</p>
                */
            status?: SigningProfileStatus | string;
            /**
                * <p>The Amazon Resource Name (ARN) for the signing profile.</p>
                */
            arn?: string;
            /**
                * <p>A list of tags associated with the signing profile.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace SigningProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningProfile) => any;
    }
    export interface ListSigningProfilesResponse {
            /**
                * <p>A list of profiles that are available in the AWS account. This includes profiles with
                * 			the status of <code>CANCELED</code> if the <code>includeCanceled</code> parameter is set
                * 			to <code>true</code>.</p>
                */
            profiles?: SigningProfile[];
            /**
                * <p>Value for specifying the next set of paginated results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListSigningProfilesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningProfilesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the signing profile.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A list of tags associated with the signing profile.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>The signing profile was not found.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    export interface PutSigningProfileRequest {
            /**
                * <p>The name of the signing profile to be created.</p>
                */
            profileName: string | undefined;
            /**
                * <p>The AWS Certificate Manager certificate that will be used to sign code with the new signing
                * 			profile.</p>
                */
            signingMaterial?: SigningMaterial;
            /**
                * <p>The default validity period override for any signature generated using this signing
                * 			profile. If unspecified, the default is 135 months.</p>
                */
            signatureValidityPeriod?: SignatureValidityPeriod;
            /**
                * <p>The ID of the signing platform to be created.</p>
                */
            platformId: string | undefined;
            /**
                * <p>A subfield of <code>platform</code>. This specifies any different configuration
                * 			options that you want to apply to the chosen platform (such as a different
                * 				<code>hash-algorithm</code> or <code>signing-algorithm</code>).</p>
                */
            overrides?: SigningPlatformOverrides;
            /**
                * <p>Map of key-value pairs for signing. These can include any information that you want to
                * 			use during signing.</p>
                */
            signingParameters?: Record<string, string>;
            /**
                * <p>Tags to be associated with the signing profile that is being created.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace PutSigningProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSigningProfileRequest) => any;
    }
    export interface PutSigningProfileResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the signing profile created.</p>
                */
            arn?: string;
            /**
                * <p>The version of the signing profile being created.</p>
                */
            profileVersion?: string;
            /**
                * <p>The signing profile ARN, including the profile version.</p>
                */
            profileVersionArn?: string;
    }
    export namespace PutSigningProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutSigningProfileResponse) => any;
    }
    export interface RemoveProfilePermissionRequest {
            /**
                * <p>A human-readable name for the signing profile with permissions to be removed.</p>
                */
            profileName: string | undefined;
            /**
                * <p>An identifier for the current revision of the signing profile permissions.</p>
                */
            revisionId: string | undefined;
            /**
                * <p>A unique identifier for the cross-account permissions statement.</p>
                */
            statementId: string | undefined;
    }
    export namespace RemoveProfilePermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveProfilePermissionRequest) => any;
    }
    export interface RemoveProfilePermissionResponse {
            /**
                * <p>An identifier for the current revision of the profile permissions.</p>
                */
            revisionId?: string;
    }
    export namespace RemoveProfilePermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveProfilePermissionResponse) => any;
    }
    export interface RevokeSignatureRequest {
            /**
                * <p>ID of the signing job to be revoked.</p>
                */
            jobId: string | undefined;
            /**
                * <p>AWS account ID of the job owner.</p>
                */
            jobOwner?: string;
            /**
                * <p>The reason for revoking the signing job.</p>
                */
            reason: string | undefined;
    }
    export namespace RevokeSignatureRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeSignatureRequest) => any;
    }
    export interface RevokeSigningProfileRequest {
            /**
                * <p>The name of the signing profile to be revoked.</p>
                */
            profileName: string | undefined;
            /**
                * <p>The version of the signing profile to be revoked.</p>
                */
            profileVersion: string | undefined;
            /**
                * <p>The reason for revoking a signing profile.</p>
                */
            reason: string | undefined;
            /**
                * <p>A timestamp for when revocation of a Signing Profile should become effective.
                * 			Signatures generated using the signing profile after this timestamp are not
                * 			trusted.</p>
                */
            effectiveTime: Date | undefined;
    }
    export namespace RevokeSigningProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeSigningProfileRequest) => any;
    }
    export interface StartSigningJobRequest {
            /**
                * <p>The S3 bucket that contains the object to sign or a BLOB that contains your raw
                * 			code.</p>
                */
            source: Source | undefined;
            /**
                * <p>The S3 bucket in which to save your signed object. The destination contains the name
                * 			of your bucket and an optional prefix.</p>
                */
            destination: Destination | undefined;
            /**
                * <p>The name of the signing profile.</p>
                */
            profileName: string | undefined;
            /**
                * <p>String that identifies the signing request. All calls after the first that use this
                * 			token return the same response as the first call.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The AWS account ID of the signing profile owner.</p>
                */
            profileOwner?: string;
    }
    export namespace StartSigningJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSigningJobRequest) => any;
    }
    export interface StartSigningJobResponse {
            /**
                * <p>The ID of your signing job.</p>
                */
            jobId?: string;
            /**
                * <p>The AWS account ID of the signing job owner.</p>
                */
            jobOwner?: string;
    }
    export namespace StartSigningJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSigningJobResponse) => any;
    }
    /**
        * @deprecated
        *
        * <p>The request was denied due to request throttling.</p>
        *         <p>Instead of this error, <code>TooManyRequestsException</code> should be used.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            code?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the signing profile.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>One or more tags to be associated with the signing profile.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the signing profile.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A list of tag keys to be removed from the signing profile.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-signer/node_modules/@aws-sdk/client-signer/dist-types/models/SignerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Signer service.
        */
    export class SignerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

